uint64_t sub_190373474(uint64_t result, PB::Writer *this)
{
  uint64_t v3;
  int v4;
  float v5;
  uint64_t vars8;

  v3 = result;
  v4 = *(_DWORD *)(result + 92);
  if (v4)
  {
    result = PB::Writer::writeVarInt(this);
    v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  result = PB::Writer::write(this, *(float *)(v3 + 88));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  result = PB::Writer::write(this, *(float *)(v3 + 28));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  result = PB::Writer::write(this, *(float *)(v3 + 72));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  result = PB::Writer::write(this, *(float *)(v3 + 20));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  result = PB::Writer::write(this, *(float *)(v3 + 16));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  result = PB::Writer::writeVarInt(this);
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  result = PB::Writer::write(this, *(float *)(v3 + 60));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_38;
  }
LABEL_37:
  result = PB::Writer::write(this, *(float *)(v3 + 64));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
LABEL_38:
  result = PB::Writer::write(this, *(float *)(v3 + 68));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10000) == 0)
  {
LABEL_19:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_20;
    }
LABEL_40:
    result = PB::Writer::write(this, *(float *)(v3 + 80));
    if ((*(_DWORD *)(v3 + 92) & 0x40000) == 0) {
      return result;
    }
    goto LABEL_41;
  }
LABEL_39:
  result = PB::Writer::write(this, *(float *)(v3 + 76));
  v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20000) != 0) {
    goto LABEL_40;
  }
LABEL_20:
  if ((v4 & 0x40000) == 0) {
    return result;
  }
LABEL_41:
  v5 = *(float *)(v3 + 84);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903736DC(uint64_t result)
{
  *(void *)result = &unk_1EDFCCC08;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_190373704(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19037373C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "yaw", *(float *)(a1 + 16));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903737B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
        unint64_t v2 = *((void *)this + 1) + 4;
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
        {
LABEL_28:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_33;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
        unint64_t v2 = *((void *)this + 1) + 8;
      }
      *((void *)this + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_19037399C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(this, v5);
  }
  return result;
}

void *sub_190373A08(void *result)
{
  *uint64_t result = &unk_1EDFCC690;
  result[1] = 0;
  return result;
}

void sub_190373A28(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCC690;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_190373AA8(PB::Base *a1)
{
  sub_190373A28(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190373AE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "correction");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190373B5C(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190373D9C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void sub_190373DBC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190373DF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "accuracy", *(float *)(a1 + 48));
    int v5 = *(_DWORD *)(a1 + 124);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "clientID");
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "isGyroOn");
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "magneticFieldCalibrationLevel");
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x200) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "magneticHeading", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "mode");
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 4) == 0)
  {
LABEL_13:
    if ((v5 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 8) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "rotationRateX", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "rotationRateY", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "rotationRateZ", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "status");
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x10) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "trueHeading", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "userAccelerationX", *(float *)(a1 + 100));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "userAccelerationY", *(float *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "userAccelerationZ", *(float *)(a1 + 108));
  int v5 = *(_DWORD *)(a1 + 124);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_51:
  PB::TextFormatter::format(this, "variant");
  if ((*(_DWORD *)(a1 + 124) & 0x400000) != 0) {
LABEL_25:
  }
    PB::TextFormatter::format(this, "visionCompassBias", *(float *)(a1 + 116));
LABEL_26:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190374138(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 124) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_DWORD *)(a1 + 124) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 3u:
              *(_DWORD *)(a1 + 124) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 4u:
              *(_DWORD *)(a1 + 124) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 5u:
              *(_DWORD *)(a1 + 124) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_39:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_155;
            case 6u:
              *(_DWORD *)(a1 + 124) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 7u:
              *(_DWORD *)(a1 + 124) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 8u:
              *(_DWORD *)(a1 + 124) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 9u:
              *(_DWORD *)(a1 + 124) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0xAu:
              *(_DWORD *)(a1 + 124) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0xBu:
              *(_DWORD *)(a1 + 124) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0xCu:
              *(_DWORD *)(a1 + 124) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0xDu:
              *(_DWORD *)(a1 + 124) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0xEu:
              *(_DWORD *)(a1 + 124) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0xFu:
              *(_DWORD *)(a1 + 124) |= 0x80u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_165;
                  }
                  unint64_t v55 = v21++;
                  char v56 = *(unsigned char *)(v22 + v55);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_164:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_165;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_164;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_165;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_165:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_156;
            case 0x10u:
              *(_DWORD *)(a1 + 124) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0x11u:
              *(_DWORD *)(a1 + 124) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0x12u:
              *(_DWORD *)(a1 + 124) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_115;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_154;
            case 0x13u:
              *(_DWORD *)(a1 + 124) |= 0x1000u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_170;
                  }
                  unint64_t v59 = v27++;
                  char v60 = *(unsigned char *)(v28 + v59);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_169:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_170;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_169;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_170;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_170:
              *(_DWORD *)(a1 + 76) = v31;
              goto LABEL_156;
            case 0x14u:
              *(_DWORD *)(a1 + 124) |= 0x40u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_175;
                  }
                  unint64_t v63 = v33++;
                  char v64 = *(unsigned char *)(v34 + v63);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_174:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_175;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_174;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_175;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_175:
              *(_DWORD *)(a1 + 52) = v37;
              goto LABEL_156;
            case 0x15u:
              *(_DWORD *)(a1 + 124) |= 0x10000u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_180;
                  }
                  unint64_t v67 = v39++;
                  char v68 = *(unsigned char *)(v40 + v67);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_179:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_180;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_179;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_180;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_180:
              *(_DWORD *)(a1 + 92) = v43;
              goto LABEL_156;
            case 0x16u:
              *(_DWORD *)(a1 + 124) |= 0x200000u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_185;
                  }
                  unint64_t v71 = v45++;
                  char v72 = *(unsigned char *)(v46 + v71);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_184:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_185;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_184;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_185;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_185:
              *(_DWORD *)(a1 + 112) = v49;
LABEL_156:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x17u:
              *(_DWORD *)(a1 + 124) |= 0x800000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v52 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v51 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v52 = v51 != 0;
              }
              *(unsigned char *)(a1 + 120) = v52;
              goto LABEL_156;
            case 0x18u:
              *(_DWORD *)(a1 + 124) |= 0x400000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
LABEL_154:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_155:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_115:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_156;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_156;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190374BF8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 124);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40));
    int v4 = *(_DWORD *)(v3 + 124);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x400) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_19:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x1000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x40) == 0)
  {
LABEL_21:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x10000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
LABEL_48:
    uint64_t result = PB::Writer::write(this);
    if ((*(_DWORD *)(v3 + 124) & 0x400000) == 0) {
      return result;
    }
    goto LABEL_49;
  }
LABEL_47:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 124);
  if ((v4 & 0x800000) != 0) {
    goto LABEL_48;
  }
LABEL_24:
  if ((v4 & 0x400000) == 0) {
    return result;
  }
LABEL_49:
  float v5 = *(float *)(v3 + 116);

  return PB::Writer::write(this, v5);
}

uint64_t sub_190374ED0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD9D0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_190374EF4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCD9D0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_190374F74(PB::Base *a1)
{
  sub_190374EF4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190374FAC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "deviceMotion");
  }
  char v6 = *(unsigned char *)(a1 + 20);
  if (v6)
  {
    PB::TextFormatter::format(this, "inQuiescentMode");
    char v6 = *(unsigned char *)(a1 + 20);
  }
  if ((v6 & 2) != 0) {
    PB::TextFormatter::format(this, "shouldGyroBeOn");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190375060(unsigned char *a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        a1[20] |= 2u;
        unint64_t v21 = *((void *)this + 1);
        if (v21 >= *((void *)this + 2))
        {
          BOOL v24 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          int v23 = *(unsigned __int8 *)(*(void *)this + v21);
          *((void *)this + 1) = v22;
          BOOL v24 = v23 != 0;
        }
        a1[17] = v24;
      }
      else if (v20 == 2)
      {
        a1[20] |= 1u;
        unint64_t v25 = *((void *)this + 1);
        if (v25 >= *((void *)this + 2))
        {
          BOOL v28 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          unint64_t v26 = v25 + 1;
          int v27 = *(unsigned __int8 *)(*(void *)this + v25);
          *((void *)this + 1) = v26;
          BOOL v28 = v27 != 0;
        }
        a1[16] = v28;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190375314(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  char v5 = *(unsigned char *)(v3 + 20);
  if (v5)
  {
    uint64_t result = PB::Writer::write(this);
    char v5 = *(unsigned char *)(v3 + 20);
  }
  if ((v5 & 2) != 0)
  {
    return PB::Writer::write(this);
  }
  return result;
}

void sub_190375394(PB::Base *this)
{
  *(void *)this = &unk_1EDFCE3E0;
  unint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 13);
  if (v3)
  {
    *((void *)this + 14) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  char v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }

  PB::Base::~Base(this);
}

void sub_190375448(PB::Base *a1)
{
  sub_190375394(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190375480(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(float **)(a1 + 8);
  char v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "dx", v7);
  }
  uint64_t v8 = *(float **)(a1 + 32);
  char v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "estimate", v10);
  }
  unint64_t v11 = *(float **)(a1 + 56);
  unint64_t v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "measurement", v13);
  }
  BOOL v14 = *(float **)(a1 + 80);
  char v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(this, "noisevariance", v16);
  }
  unint64_t v17 = *(float **)(a1 + 104);
  char v18 = *(float **)(a1 + 112);
  while (v17 != v18)
  {
    float v19 = *v17++;
    PB::TextFormatter::format(this, "residual", v19);
  }
  unint64_t v20 = *(float **)(a1 + 128);
  unint64_t v21 = *(float **)(a1 + 136);
  while (v20 != v21)
  {
    float v22 = *v20++;
    PB::TextFormatter::format(this, "statevariance", v22);
  }
  if (*(unsigned char *)(a1 + 160)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 152));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903755F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v180 = a1 + 144;
    v181 = (void **)(a1 + 128);
    uint64_t v8 = (void **)(a1 + 80);
    char v9 = (void **)(a1 + 8);
    uint64_t v178 = a1 + 24;
    uint64_t v179 = a1 + 96;
    float v10 = (void **)(a1 + 104);
    unint64_t v11 = (void **)(a1 + 56);
    uint64_t v176 = a1 + 72;
    uint64_t v177 = a1 + 120;
    unint64_t v12 = (void **)(a1 + 32);
    uint64_t v175 = a1 + 48;
    while (1)
    {
      uint64_t v13 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 160) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_278;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v26);
          uint64_t v27 = *((void *)this + 1) + 8;
          goto LABEL_280;
        case 2u:
          if (v25 != 2)
          {
            v113 = *(char **)(a1 + 40);
            unint64_t v112 = *(void *)(a1 + 48);
            if ((unint64_t)v113 >= v112)
            {
              v125 = (char *)*v12;
              uint64_t v126 = (v113 - (unsigned char *)*v12) >> 2;
              unint64_t v127 = v126 + 1;
              if ((unint64_t)(v126 + 1) >> 62) {
LABEL_289:
              }
                sub_1903479E8();
              uint64_t v128 = v112 - (void)v125;
              if (v128 >> 1 > v127) {
                unint64_t v127 = v128 >> 1;
              }
              if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v129 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v129 = v127;
              }
              if (v129)
              {
                v130 = (char *)sub_190347D04(v175, v129);
                v125 = *(char **)(a1 + 32);
                v113 = *(char **)(a1 + 40);
              }
              else
              {
                v130 = 0;
              }
              v161 = &v130[4 * v126];
              *(_DWORD *)v161 = 0;
              v114 = v161 + 4;
              while (v113 != v125)
              {
                int v162 = *((_DWORD *)v113 - 1);
                v113 -= 4;
                *((_DWORD *)v161 - 1) = v162;
                v161 -= 4;
              }
              *(void *)(a1 + 32) = v161;
              *(void *)(a1 + 40) = v114;
              *(void *)(a1 + 48) = &v130[4 * v129];
              if (v125) {
                operator delete(v125);
              }
            }
            else
            {
              *(_DWORD *)v113 = 0;
              v114 = v113 + 4;
            }
            *(void *)(a1 + 40) = v114;
            goto LABEL_276;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)this + 1);
          unint64_t v29 = *((void *)this + 2);
          while (v28 < v29 && !*((unsigned char *)this + 24))
          {
            uint64_t v31 = *(char **)(a1 + 40);
            unint64_t v30 = *(void *)(a1 + 48);
            if ((unint64_t)v31 >= v30)
            {
              unint64_t v33 = (char *)*v12;
              uint64_t v34 = (v31 - (unsigned char *)*v12) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_289;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                char v38 = (char *)sub_190347D04(v175, v37);
                unint64_t v33 = *(char **)(a1 + 32);
                uint64_t v31 = *(char **)(a1 + 40);
              }
              else
              {
                char v38 = 0;
              }
              unint64_t v39 = &v38[4 * v34];
              *(_DWORD *)unint64_t v39 = 0;
              char v32 = v39 + 4;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *(void *)(a1 + 32) = v39;
              *(void *)(a1 + 40) = v32;
              *(void *)(a1 + 48) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v31 = 0;
              char v32 = v31 + 4;
            }
            *(void *)(a1 + 40) = v32;
            unint64_t v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
              goto LABEL_172;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
            unint64_t v29 = *((void *)this + 2);
            unint64_t v28 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v28;
          }
          goto LABEL_173;
        case 3u:
          if (v25 != 2)
          {
            v116 = *(char **)(a1 + 64);
            unint64_t v115 = *(void *)(a1 + 72);
            if ((unint64_t)v116 >= v115)
            {
              v131 = (char *)*v11;
              uint64_t v132 = (v116 - (unsigned char *)*v11) >> 2;
              unint64_t v133 = v132 + 1;
              if ((unint64_t)(v132 + 1) >> 62) {
LABEL_290:
              }
                sub_1903479E8();
              uint64_t v134 = v115 - (void)v131;
              if (v134 >> 1 > v133) {
                unint64_t v133 = v134 >> 1;
              }
              if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v135 = v133;
              }
              if (v135)
              {
                v136 = (char *)sub_190347D04(v176, v135);
                v131 = *(char **)(a1 + 56);
                v116 = *(char **)(a1 + 64);
              }
              else
              {
                v136 = 0;
              }
              v163 = &v136[4 * v132];
              *(_DWORD *)v163 = 0;
              v114 = v163 + 4;
              while (v116 != v131)
              {
                int v164 = *((_DWORD *)v116 - 1);
                v116 -= 4;
                *((_DWORD *)v163 - 1) = v164;
                v163 -= 4;
              }
              *(void *)(a1 + 56) = v163;
              *(void *)(a1 + 64) = v114;
              *(void *)(a1 + 72) = &v136[4 * v135];
              if (v131) {
                operator delete(v131);
              }
            }
            else
            {
              *(_DWORD *)v116 = 0;
              v114 = v116 + 4;
            }
            *(void *)(a1 + 64) = v114;
            goto LABEL_276;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)this + 1);
          unint64_t v43 = *((void *)this + 2);
          while (v42 < v43 && !*((unsigned char *)this + 24))
          {
            unint64_t v45 = *(char **)(a1 + 64);
            unint64_t v44 = *(void *)(a1 + 72);
            if ((unint64_t)v45 >= v44)
            {
              char v47 = (char *)*v11;
              uint64_t v48 = (v45 - (unsigned char *)*v11) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_290;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                BOOL v52 = (char *)sub_190347D04(v176, v51);
                char v47 = *(char **)(a1 + 56);
                unint64_t v45 = *(char **)(a1 + 64);
              }
              else
              {
                BOOL v52 = 0;
              }
              char v53 = &v52[4 * v48];
              *(_DWORD *)char v53 = 0;
              uint64_t v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *(void *)(a1 + 56) = v53;
              *(void *)(a1 + 64) = v46;
              *(void *)(a1 + 72) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              uint64_t v46 = v45 + 4;
            }
            *(void *)(a1 + 64) = v46;
            unint64_t v55 = *((void *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
              goto LABEL_172;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)this + v55);
            unint64_t v43 = *((void *)this + 2);
            unint64_t v42 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v42;
          }
          goto LABEL_173;
        case 4u:
          if (v25 != 2)
          {
            v118 = *(char **)(a1 + 112);
            unint64_t v117 = *(void *)(a1 + 120);
            if ((unint64_t)v118 >= v117)
            {
              v137 = (char *)*v10;
              uint64_t v138 = (v118 - (unsigned char *)*v10) >> 2;
              unint64_t v139 = v138 + 1;
              if ((unint64_t)(v138 + 1) >> 62) {
LABEL_291:
              }
                sub_1903479E8();
              uint64_t v140 = v117 - (void)v137;
              if (v140 >> 1 > v139) {
                unint64_t v139 = v140 >> 1;
              }
              if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v141 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v141 = v139;
              }
              if (v141)
              {
                v142 = (char *)sub_190347D04(v177, v141);
                v137 = *(char **)(a1 + 104);
                v118 = *(char **)(a1 + 112);
              }
              else
              {
                v142 = 0;
              }
              v165 = &v142[4 * v138];
              *(_DWORD *)v165 = 0;
              v114 = v165 + 4;
              while (v118 != v137)
              {
                int v166 = *((_DWORD *)v118 - 1);
                v118 -= 4;
                *((_DWORD *)v165 - 1) = v166;
                v165 -= 4;
              }
              *(void *)(a1 + 104) = v165;
              *(void *)(a1 + 112) = v114;
              *(void *)(a1 + 120) = &v142[4 * v141];
              if (v137) {
                operator delete(v137);
              }
            }
            else
            {
              *(_DWORD *)v118 = 0;
              v114 = v118 + 4;
            }
            *(void *)(a1 + 112) = v114;
            goto LABEL_276;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v56 = *((void *)this + 1);
          unint64_t v57 = *((void *)this + 2);
          while (v56 < v57 && !*((unsigned char *)this + 24))
          {
            unint64_t v59 = *(char **)(a1 + 112);
            unint64_t v58 = *(void *)(a1 + 120);
            if ((unint64_t)v59 >= v58)
            {
              char v61 = (char *)*v10;
              uint64_t v62 = (v59 - (unsigned char *)*v10) >> 2;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62) {
                goto LABEL_291;
              }
              uint64_t v64 = v58 - (void)v61;
              if (v64 >> 1 > v63) {
                unint64_t v63 = v64 >> 1;
              }
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v63;
              }
              if (v65)
              {
                unsigned int v66 = (char *)sub_190347D04(v177, v65);
                char v61 = *(char **)(a1 + 104);
                unint64_t v59 = *(char **)(a1 + 112);
              }
              else
              {
                unsigned int v66 = 0;
              }
              unint64_t v67 = &v66[4 * v62];
              *(_DWORD *)unint64_t v67 = 0;
              char v60 = v67 + 4;
              while (v59 != v61)
              {
                int v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *(void *)(a1 + 104) = v67;
              *(void *)(a1 + 112) = v60;
              *(void *)(a1 + 120) = &v66[4 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v59 = 0;
              char v60 = v59 + 4;
            }
            *(void *)(a1 + 112) = v60;
            unint64_t v69 = *((void *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2)) {
              goto LABEL_172;
            }
            *(v60 - 1) = *(_DWORD *)(*(void *)this + v69);
            unint64_t v57 = *((void *)this + 2);
            unint64_t v56 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v56;
          }
          goto LABEL_173;
        case 5u:
          if (v25 != 2)
          {
            v120 = *(char **)(a1 + 16);
            unint64_t v119 = *(void *)(a1 + 24);
            if ((unint64_t)v120 >= v119)
            {
              v143 = (char *)*v9;
              uint64_t v144 = (v120 - (unsigned char *)*v9) >> 2;
              unint64_t v145 = v144 + 1;
              if ((unint64_t)(v144 + 1) >> 62) {
LABEL_292:
              }
                sub_1903479E8();
              uint64_t v146 = v119 - (void)v143;
              if (v146 >> 1 > v145) {
                unint64_t v145 = v146 >> 1;
              }
              if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v147 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v147 = v145;
              }
              if (v147)
              {
                v148 = (char *)sub_190347D04(v178, v147);
                v143 = *(char **)(a1 + 8);
                v120 = *(char **)(a1 + 16);
              }
              else
              {
                v148 = 0;
              }
              v167 = &v148[4 * v144];
              *(_DWORD *)v167 = 0;
              v114 = v167 + 4;
              while (v120 != v143)
              {
                int v168 = *((_DWORD *)v120 - 1);
                v120 -= 4;
                *((_DWORD *)v167 - 1) = v168;
                v167 -= 4;
              }
              *(void *)(a1 + 8) = v167;
              *(void *)(a1 + 16) = v114;
              *(void *)(a1 + 24) = &v148[4 * v147];
              if (v143) {
                operator delete(v143);
              }
            }
            else
            {
              *(_DWORD *)v120 = 0;
              v114 = v120 + 4;
            }
            *(void *)(a1 + 16) = v114;
            goto LABEL_276;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v70 = *((void *)this + 1);
          unint64_t v71 = *((void *)this + 2);
          while (v70 < v71 && !*((unsigned char *)this + 24))
          {
            v73 = *(char **)(a1 + 16);
            unint64_t v72 = *(void *)(a1 + 24);
            if ((unint64_t)v73 >= v72)
            {
              v75 = (char *)*v9;
              uint64_t v76 = (v73 - (unsigned char *)*v9) >> 2;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62) {
                goto LABEL_292;
              }
              uint64_t v78 = v72 - (void)v75;
              if (v78 >> 1 > v77) {
                unint64_t v77 = v78 >> 1;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v77;
              }
              if (v79)
              {
                v80 = (char *)sub_190347D04(v178, v79);
                v75 = *(char **)(a1 + 8);
                v73 = *(char **)(a1 + 16);
              }
              else
              {
                v80 = 0;
              }
              v81 = &v80[4 * v76];
              *(_DWORD *)v81 = 0;
              v74 = v81 + 4;
              while (v73 != v75)
              {
                int v82 = *((_DWORD *)v73 - 1);
                v73 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *(void *)(a1 + 8) = v81;
              *(void *)(a1 + 16) = v74;
              *(void *)(a1 + 24) = &v80[4 * v79];
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(_DWORD *)v73 = 0;
              v74 = v73 + 4;
            }
            *(void *)(a1 + 16) = v74;
            unint64_t v83 = *((void *)this + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2)) {
              goto LABEL_172;
            }
            *(v74 - 1) = *(_DWORD *)(*(void *)this + v83);
            unint64_t v71 = *((void *)this + 2);
            unint64_t v70 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v70;
          }
          goto LABEL_173;
        case 6u:
          if (v25 != 2)
          {
            v122 = *(char **)(a1 + 88);
            unint64_t v121 = *(void *)(a1 + 96);
            if ((unint64_t)v122 >= v121)
            {
              v149 = (char *)*v8;
              uint64_t v150 = (v122 - (unsigned char *)*v8) >> 2;
              unint64_t v151 = v150 + 1;
              if ((unint64_t)(v150 + 1) >> 62) {
LABEL_293:
              }
                sub_1903479E8();
              uint64_t v152 = v121 - (void)v149;
              if (v152 >> 1 > v151) {
                unint64_t v151 = v152 >> 1;
              }
              if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v153 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v151;
              }
              if (v153)
              {
                v154 = (char *)sub_190347D04(v179, v153);
                v149 = *(char **)(a1 + 80);
                v122 = *(char **)(a1 + 88);
              }
              else
              {
                v154 = 0;
              }
              v169 = &v154[4 * v150];
              *(_DWORD *)v169 = 0;
              v114 = v169 + 4;
              while (v122 != v149)
              {
                int v170 = *((_DWORD *)v122 - 1);
                v122 -= 4;
                *((_DWORD *)v169 - 1) = v170;
                v169 -= 4;
              }
              *(void *)(a1 + 80) = v169;
              *(void *)(a1 + 88) = v114;
              *(void *)(a1 + 96) = &v154[4 * v153];
              if (v149) {
                operator delete(v149);
              }
            }
            else
            {
              *(_DWORD *)v122 = 0;
              v114 = v122 + 4;
            }
            *(void *)(a1 + 88) = v114;
            goto LABEL_276;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v84 = *((void *)this + 1);
          unint64_t v85 = *((void *)this + 2);
          while (v84 < v85 && !*((unsigned char *)this + 24))
          {
            v87 = *(char **)(a1 + 88);
            unint64_t v86 = *(void *)(a1 + 96);
            if ((unint64_t)v87 >= v86)
            {
              v89 = (char *)*v8;
              uint64_t v90 = (v87 - (unsigned char *)*v8) >> 2;
              unint64_t v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 62) {
                goto LABEL_293;
              }
              uint64_t v92 = v86 - (void)v89;
              if (v92 >> 1 > v91) {
                unint64_t v91 = v92 >> 1;
              }
              if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v93 = v91;
              }
              if (v93)
              {
                v94 = (char *)sub_190347D04(v179, v93);
                v89 = *(char **)(a1 + 80);
                v87 = *(char **)(a1 + 88);
              }
              else
              {
                v94 = 0;
              }
              v95 = &v94[4 * v90];
              *(_DWORD *)v95 = 0;
              v88 = v95 + 4;
              while (v87 != v89)
              {
                int v96 = *((_DWORD *)v87 - 1);
                v87 -= 4;
                *((_DWORD *)v95 - 1) = v96;
                v95 -= 4;
              }
              *(void *)(a1 + 80) = v95;
              *(void *)(a1 + 88) = v88;
              *(void *)(a1 + 96) = &v94[4 * v93];
              if (v89) {
                operator delete(v89);
              }
            }
            else
            {
              *(_DWORD *)v87 = 0;
              v88 = v87 + 4;
            }
            *(void *)(a1 + 88) = v88;
            unint64_t v97 = *((void *)this + 1);
            if (v97 > 0xFFFFFFFFFFFFFFFBLL || v97 + 4 > *((void *)this + 2)) {
              goto LABEL_172;
            }
            *(v88 - 1) = *(_DWORD *)(*(void *)this + v97);
            unint64_t v85 = *((void *)this + 2);
            unint64_t v84 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v84;
          }
          goto LABEL_173;
        case 7u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v98 = *((void *)this + 1);
            unint64_t v99 = *((void *)this + 2);
            while (v98 < v99 && !*((unsigned char *)this + 24))
            {
              v101 = *(char **)(a1 + 136);
              unint64_t v100 = *(void *)(a1 + 144);
              if ((unint64_t)v101 >= v100)
              {
                v103 = (char *)*v181;
                uint64_t v104 = (v101 - (unsigned char *)*v181) >> 2;
                unint64_t v105 = v104 + 1;
                if ((unint64_t)(v104 + 1) >> 62) {
                  goto LABEL_294;
                }
                uint64_t v106 = v100 - (void)v103;
                if (v106 >> 1 > v105) {
                  unint64_t v105 = v106 >> 1;
                }
                if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v107 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v107 = v105;
                }
                if (v107)
                {
                  v108 = (char *)sub_190347D04(v180, v107);
                  v103 = *(char **)(a1 + 128);
                  v101 = *(char **)(a1 + 136);
                }
                else
                {
                  v108 = 0;
                }
                v109 = &v108[4 * v104];
                *(_DWORD *)v109 = 0;
                v102 = v109 + 4;
                while (v101 != v103)
                {
                  int v110 = *((_DWORD *)v101 - 1);
                  v101 -= 4;
                  *((_DWORD *)v109 - 1) = v110;
                  v109 -= 4;
                }
                *(void *)(a1 + 128) = v109;
                *(void *)(a1 + 136) = v102;
                *(void *)(a1 + 144) = &v108[4 * v107];
                if (v103) {
                  operator delete(v103);
                }
              }
              else
              {
                *(_DWORD *)v101 = 0;
                v102 = v101 + 4;
              }
              *(void *)(a1 + 136) = v102;
              unint64_t v111 = *((void *)this + 1);
              if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)this + 2))
              {
LABEL_172:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v102 - 1) = *(_DWORD *)(*(void *)this + v111);
              unint64_t v99 = *((void *)this + 2);
              unint64_t v98 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v98;
            }
LABEL_173:
            PB::Reader::recallMark();
          }
          else
          {
            v124 = *(char **)(a1 + 136);
            unint64_t v123 = *(void *)(a1 + 144);
            if ((unint64_t)v124 >= v123)
            {
              v155 = (char *)*v181;
              uint64_t v156 = (v124 - (unsigned char *)*v181) >> 2;
              unint64_t v157 = v156 + 1;
              if ((unint64_t)(v156 + 1) >> 62) {
LABEL_294:
              }
                sub_1903479E8();
              uint64_t v158 = v123 - (void)v155;
              if (v158 >> 1 > v157) {
                unint64_t v157 = v158 >> 1;
              }
              if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v159 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v159 = v157;
              }
              if (v159)
              {
                v160 = (char *)sub_190347D04(v180, v159);
                v155 = *(char **)(a1 + 128);
                v124 = *(char **)(a1 + 136);
              }
              else
              {
                v160 = 0;
              }
              v171 = &v160[4 * v156];
              *(_DWORD *)v171 = 0;
              v114 = v171 + 4;
              while (v124 != v155)
              {
                int v172 = *((_DWORD *)v124 - 1);
                v124 -= 4;
                *((_DWORD *)v171 - 1) = v172;
                v171 -= 4;
              }
              *(void *)(a1 + 128) = v171;
              *(void *)(a1 + 136) = v114;
              *(void *)(a1 + 144) = &v160[4 * v159];
              if (v155) {
                operator delete(v155);
              }
            }
            else
            {
              *(_DWORD *)v124 = 0;
              v114 = v124 + 4;
            }
            *(void *)(a1 + 136) = v114;
LABEL_276:
            unint64_t v173 = *((void *)this + 1);
            if (v173 <= 0xFFFFFFFFFFFFFFFBLL && v173 + 4 <= *((void *)this + 2))
            {
              *(v114 - 1) = *(_DWORD *)(*(void *)this + v173);
              uint64_t v27 = *((void *)this + 1) + 4;
LABEL_280:
              *((void *)this + 1) = v27;
            }
            else
            {
LABEL_278:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_281:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_281;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190376280(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if (*(unsigned char *)(result + 160)) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 152));
  }
  int v4 = (float *)v3[4];
  char v5 = (float *)v3[5];
  while (v4 != v5)
  {
    float v6 = *v4++;
    uint64_t result = PB::Writer::write(this, v6);
  }
  float v7 = (float *)v3[7];
  uint64_t v8 = (float *)v3[8];
  while (v7 != v8)
  {
    float v9 = *v7++;
    uint64_t result = PB::Writer::write(this, v9);
  }
  float v10 = (float *)v3[13];
  unint64_t v11 = (float *)v3[14];
  while (v10 != v11)
  {
    float v12 = *v10++;
    uint64_t result = PB::Writer::write(this, v12);
  }
  uint64_t v13 = (float *)v3[1];
  char v14 = (float *)v3[2];
  while (v13 != v14)
  {
    float v15 = *v13++;
    uint64_t result = PB::Writer::write(this, v15);
  }
  unint64_t v16 = (float *)v3[10];
  unint64_t v17 = (float *)v3[11];
  while (v16 != v17)
  {
    float v18 = *v16++;
    uint64_t result = PB::Writer::write(this, v18);
  }
  char v20 = (float *)v3[16];
  float v19 = (float *)v3[17];
  while (v20 != v19)
  {
    float v21 = *v20++;
    uint64_t result = PB::Writer::write(this, v21);
  }
  return result;
}

double sub_190376384(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCE418;
  *(_DWORD *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1903763B8(PB::Base *this)
{
  *(void *)this = &unk_1EDFCE418;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_19037642C(PB::Base *a1)
{
  sub_1903763B8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190376464(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(float **)(a1 + 8);
  float v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "biasvariance", v7);
  }
  uint64_t v8 = *(float **)(a1 + 32);
  float v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "statevariance", v10);
  }
  if (*(unsigned char *)(a1 + 64)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_19037652C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    float v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)this + 1);
          unint64_t v43 = *((void *)this + 2);
          while (v42 < v43 && !*((unsigned char *)this + 24))
          {
            unint64_t v45 = *(char **)(a1 + 40);
            unint64_t v44 = *(void *)(a1 + 48);
            if ((unint64_t)v45 >= v44)
            {
              char v47 = (char *)*v10;
              uint64_t v48 = (v45 - (unsigned char *)*v10) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_128;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                BOOL v52 = (char *)sub_190347D04(v11, v51);
                char v47 = *(char **)(a1 + 32);
                unint64_t v45 = *(char **)(a1 + 40);
              }
              else
              {
                BOOL v52 = 0;
              }
              char v53 = &v52[4 * v48];
              *(_DWORD *)char v53 = 0;
              uint64_t v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *(void *)(a1 + 32) = v53;
              *(void *)(a1 + 40) = v46;
              *(void *)(a1 + 48) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              uint64_t v46 = v45 + 4;
            }
            *(void *)(a1 + 40) = v46;
            unint64_t v55 = *((void *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
              goto LABEL_82;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)this + v55);
            unint64_t v43 = *((void *)this + 2);
            unint64_t v42 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v42;
          }
          goto LABEL_83;
        }
        char v60 = *(char **)(a1 + 40);
        unint64_t v59 = *(void *)(a1 + 48);
        if ((unint64_t)v60 >= v59)
        {
          unint64_t v67 = (char *)*v10;
          uint64_t v68 = (v60 - (unsigned char *)*v10) >> 2;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62) {
LABEL_128:
          }
            sub_1903479E8();
          uint64_t v70 = v59 - (void)v67;
          if (v70 >> 1 > v69) {
            unint64_t v69 = v70 >> 1;
          }
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v71 = v69;
          }
          if (v71)
          {
            unint64_t v72 = (char *)sub_190347D04(v11, v71);
            unint64_t v67 = *(char **)(a1 + 32);
            char v60 = *(char **)(a1 + 40);
          }
          else
          {
            unint64_t v72 = 0;
          }
          v75 = &v72[4 * v68];
          *(_DWORD *)v75 = 0;
          unint64_t v58 = v75 + 4;
          while (v60 != v67)
          {
            int v76 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *((_DWORD *)v75 - 1) = v76;
            v75 -= 4;
          }
          *(void *)(a1 + 32) = v75;
          *(void *)(a1 + 40) = v58;
          *(void *)(a1 + 48) = &v72[4 * v71];
          if (v67) {
            operator delete(v67);
          }
        }
        else
        {
          *(_DWORD *)char v60 = 0;
          unint64_t v58 = v60 + 4;
        }
        *(void *)(a1 + 40) = v58;
LABEL_114:
        unint64_t v77 = *((void *)this + 1);
        if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)this + 2))
        {
LABEL_116:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v58 - 1) = *(_DWORD *)(*(void *)this + v77);
        uint64_t v27 = *((void *)this + 1) + 4;
        goto LABEL_118;
      }
      if (v25 == 1)
      {
        *(unsigned char *)(a1 + 64) |= 1u;
        unint64_t v26 = *((void *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
          goto LABEL_116;
        }
        *(void *)(a1 + 56) = *(void *)(*(void *)this + v26);
        uint64_t v27 = *((void *)this + 1) + 8;
LABEL_118:
        *((void *)this + 1) = v27;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this) & 1) == 0) {
        return 0;
      }
LABEL_119:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    if (v24 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v28 = *((void *)this + 1);
      unint64_t v29 = *((void *)this + 2);
      while (v28 < v29 && !*((unsigned char *)this + 24))
      {
        uint64_t v31 = *(char **)(a1 + 16);
        unint64_t v30 = *(void *)(a1 + 24);
        if ((unint64_t)v31 >= v30)
        {
          unint64_t v33 = (char *)*v8;
          uint64_t v34 = (v31 - (unsigned char *)*v8) >> 2;
          unint64_t v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62) {
            goto LABEL_127;
          }
          uint64_t v36 = v30 - (void)v33;
          if (v36 >> 1 > v35) {
            unint64_t v35 = v36 >> 1;
          }
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v37 = v35;
          }
          if (v37)
          {
            char v38 = (char *)sub_190347D04(v9, v37);
            unint64_t v33 = *(char **)(a1 + 8);
            uint64_t v31 = *(char **)(a1 + 16);
          }
          else
          {
            char v38 = 0;
          }
          unint64_t v39 = &v38[4 * v34];
          *(_DWORD *)unint64_t v39 = 0;
          char v32 = v39 + 4;
          while (v31 != v33)
          {
            int v40 = *((_DWORD *)v31 - 1);
            v31 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          *(void *)(a1 + 8) = v39;
          *(void *)(a1 + 16) = v32;
          *(void *)(a1 + 24) = &v38[4 * v37];
          if (v33) {
            operator delete(v33);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v31 = 0;
          char v32 = v31 + 4;
        }
        *(void *)(a1 + 16) = v32;
        unint64_t v41 = *((void *)this + 1);
        if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2))
        {
LABEL_82:
          *((unsigned char *)this + 24) = 1;
          break;
        }
        *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
        unint64_t v29 = *((void *)this + 2);
        unint64_t v28 = *((void *)this + 1) + 4;
        *((void *)this + 1) = v28;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    unint64_t v57 = *(char **)(a1 + 16);
    unint64_t v56 = *(void *)(a1 + 24);
    if ((unint64_t)v57 >= v56)
    {
      char v61 = (char *)*v8;
      uint64_t v62 = (v57 - (unsigned char *)*v8) >> 2;
      unint64_t v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62) {
LABEL_127:
      }
        sub_1903479E8();
      uint64_t v64 = v56 - (void)v61;
      if (v64 >> 1 > v63) {
        unint64_t v63 = v64 >> 1;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v63;
      }
      if (v65)
      {
        unsigned int v66 = (char *)sub_190347D04(v9, v65);
        char v61 = *(char **)(a1 + 8);
        unint64_t v57 = *(char **)(a1 + 16);
      }
      else
      {
        unsigned int v66 = 0;
      }
      v73 = &v66[4 * v62];
      *(_DWORD *)v73 = 0;
      unint64_t v58 = v73 + 4;
      while (v57 != v61)
      {
        int v74 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *((_DWORD *)v73 - 1) = v74;
        v73 -= 4;
      }
      *(void *)(a1 + 8) = v73;
      *(void *)(a1 + 16) = v58;
      *(void *)(a1 + 24) = &v66[4 * v65];
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v57 = 0;
      unint64_t v58 = v57 + 4;
    }
    *(void *)(a1 + 16) = v58;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t sub_190376AA8(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if (*(unsigned char *)(result + 64)) {
    double result = PB::Writer::write(this, *(double *)(result + 56));
  }
  int v4 = (float *)v3[4];
  char v5 = (float *)v3[5];
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  uint64_t v8 = (float *)v3[1];
  float v7 = (float *)v3[2];
  while (v8 != v7)
  {
    float v9 = *v8++;
    double result = PB::Writer::write(this, v9);
  }
  return result;
}

uint64_t sub_190376B2C(uint64_t result)
{
  *(void *)double result = &unk_1EDFCEA70;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_190376B54(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190376B8C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "theta", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190376C30(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 28) |= 4u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
        unint64_t v2 = *((void *)this + 1) + 4;
      }
      else
      {
        if (v20 == 2)
        {
          *(unsigned char *)(a1 + 28) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_32;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
        }
        else
        {
          if (v20 != 1)
          {
            uint64_t result = PB::Reader::skip(this);
            if (!result) {
              return result;
            }
            unint64_t v2 = *((void *)this + 1);
            goto LABEL_38;
          }
          *(unsigned char *)(a1 + 28) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_32:
            *((unsigned char *)this + 24) = 1;
            goto LABEL_38;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
        }
        unint64_t v2 = *((void *)this + 1) + 8;
      }
      *((void *)this + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_190376E54(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if ((v4 & 2) == 0)
  {
    if ((*(unsigned char *)(result + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
  char v4 = *(unsigned char *)(v3 + 28);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_7:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

uint64_t sub_190376EE0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2A48;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_190376F08(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190376F40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "displacingState");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190376FBC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19037724C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903772B8(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCBA88;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1903772E0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190377318(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "displayOn");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190377378(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *(unsigned char *)(a1 + 8) = v21;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190377508(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::write(this);
  }
  return result;
}

double sub_190377528(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCDF10;
  *(_DWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

void sub_190377574(PB::Base *this)
{
  *(void *)this = &unk_1EDFCDF10;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = (void *)*((void *)this + 10);
  if (v4)
  {
    *((void *)this + 11) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 7);
  if (v5)
  {
    *((void *)this + 8) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 1);
  if (v7)
  {
    *((void *)this + 2) = v7;
    operator delete(v7);
  }

  PB::Base::~Base(this);
}

void sub_190377668(PB::Base *a1)
{
  sub_190377574(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903776A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 168);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "AzABufferMean", *(float *)(a1 + 136));
    __int16 v5 = *(_WORD *)(a1 + 168);
  }
  if ((v5 & 8) != 0) {
    PB::TextFormatter::format(this, "AzBBufferMean", *(float *)(a1 + 140));
  }
  float v6 = *(float **)(a1 + 8);
  float v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "cachedAttitude", v8);
  }
  uint64_t v9 = *(void *)(a1 + 104);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, this, "candidateA");
  }
  uint64_t v10 = *(void *)(a1 + 112);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, this, "candidateB");
  }
  unint64_t v11 = *(float **)(a1 + 32);
  unint64_t v12 = *(float **)(a1 + 40);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "currAttitude", v13);
  }
  __int16 v14 = *(_WORD *)(a1 + 168);
  if ((v14 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "disambiguationFlag");
    __int16 v14 = *(_WORD *)(a1 + 168);
    if ((v14 & 1) == 0)
    {
LABEL_15:
      if ((v14 & 0x20) == 0) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if ((v14 & 1) == 0)
  {
    goto LABEL_15;
  }
  PB::TextFormatter::format(this, "lastDoTUpdateTime", *(double *)(a1 + 120));
  if ((*(_WORD *)(a1 + 168) & 0x20) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "lastEstimatedDoTAngleRad", *(float *)(a1 + 148));
LABEL_17:
  char v15 = *(float **)(a1 + 56);
  unsigned int v16 = *(float **)(a1 + 64);
  while (v15 != v16)
  {
    float v17 = *v15++;
    PB::TextFormatter::format(this, "lpfInertialRotationRate", v17);
  }
  char v18 = *(float **)(a1 + 80);
  char v19 = *(float **)(a1 + 88);
  while (v18 != v19)
  {
    float v20 = *v18++;
    PB::TextFormatter::format(this, "lpfInertialUserAccel", v20);
  }
  __int16 v21 = *(_WORD *)(a1 + 168);
  if ((v21 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "newDisambiguation");
    __int16 v21 = *(_WORD *)(a1 + 168);
    if ((v21 & 0x40) == 0)
    {
LABEL_23:
      if ((v21 & 0x80) == 0) {
        goto LABEL_24;
      }
      goto LABEL_35;
    }
  }
  else if ((v21 & 0x40) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(this, "numAbortedPeaks");
  __int16 v21 = *(_WORD *)(a1 + 168);
  if ((v21 & 0x80) == 0)
  {
LABEL_24:
    if ((v21 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "numLargeYawDetections");
  __int16 v21 = *(_WORD *)(a1 + 168);
  if ((v21 & 0x100) == 0)
  {
LABEL_25:
    if ((v21 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_36:
  PB::TextFormatter::format(this, "stateFSM");
  if ((*(_WORD *)(a1 + 168) & 2) != 0) {
LABEL_26:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 128));
LABEL_27:

  return MEMORY[0x1F4147498](this);
}

BOOL sub_19037794C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 32);
    uint64_t v9 = (void **)(a1 + 8);
    uint64_t v185 = a1 + 24;
    uint64_t v186 = a1 + 48;
    uint64_t v10 = (void **)(a1 + 56);
    uint64_t v11 = a1 + 72;
    unint64_t v12 = (void **)(a1 + 80);
    uint64_t v13 = a1 + 96;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        unint64_t v18 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v19 = *(unsigned char *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v2 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v26 = v17 & 7;
      if (v26 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 168) |= 2u;
          unint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_287;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v27);
          goto LABEL_53;
        case 2u:
          if (v26 != 2)
          {
            unint64_t v135 = *(char **)(a1 + 88);
            unint64_t v134 = *(void *)(a1 + 96);
            if ((unint64_t)v135 >= v134)
            {
              int v162 = (char *)*v12;
              uint64_t v163 = (v135 - (unsigned char *)*v12) >> 2;
              unint64_t v164 = v163 + 1;
              if ((unint64_t)(v163 + 1) >> 62) {
LABEL_303:
              }
                sub_1903479E8();
              uint64_t v165 = v134 - (void)v162;
              if (v165 >> 1 > v164) {
                unint64_t v164 = v165 >> 1;
              }
              if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v166 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v166 = v164;
              }
              if (v166)
              {
                v167 = (char *)sub_190347D04(v13, v166);
                int v162 = *(char **)(a1 + 80);
                unint64_t v135 = *(char **)(a1 + 88);
              }
              else
              {
                v167 = 0;
              }
              uint64_t v178 = &v167[4 * v163];
              *(_DWORD *)uint64_t v178 = 0;
              unint64_t v127 = v178 + 4;
              while (v135 != v162)
              {
                int v179 = *((_DWORD *)v135 - 1);
                v135 -= 4;
                *((_DWORD *)v178 - 1) = v179;
                v178 -= 4;
              }
              *(void *)(a1 + 80) = v178;
              *(void *)(a1 + 88) = v127;
              *(void *)(a1 + 96) = &v167[4 * v166];
              if (v162) {
                operator delete(v162);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v135 = 0;
              unint64_t v127 = v135 + 4;
            }
            *(void *)(a1 + 88) = v127;
            goto LABEL_285;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v71 = *((void *)this + 1);
          unint64_t v72 = *((void *)this + 2);
          while (v71 < v72 && !*((unsigned char *)this + 24))
          {
            int v74 = *(char **)(a1 + 88);
            unint64_t v73 = *(void *)(a1 + 96);
            if ((unint64_t)v74 >= v73)
            {
              int v76 = (char *)*v12;
              uint64_t v77 = (v74 - (unsigned char *)*v12) >> 2;
              unint64_t v78 = v77 + 1;
              if ((unint64_t)(v77 + 1) >> 62) {
                goto LABEL_303;
              }
              uint64_t v79 = v73 - (void)v76;
              if (v79 >> 1 > v78) {
                unint64_t v78 = v79 >> 1;
              }
              if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v78;
              }
              if (v80)
              {
                v81 = (char *)sub_190347D04(v13, v80);
                int v76 = *(char **)(a1 + 80);
                int v74 = *(char **)(a1 + 88);
              }
              else
              {
                v81 = 0;
              }
              int v82 = &v81[4 * v77];
              *(_DWORD *)int v82 = 0;
              v75 = v82 + 4;
              while (v74 != v76)
              {
                int v83 = *((_DWORD *)v74 - 1);
                v74 -= 4;
                *((_DWORD *)v82 - 1) = v83;
                v82 -= 4;
              }
              *(void *)(a1 + 80) = v82;
              *(void *)(a1 + 88) = v75;
              *(void *)(a1 + 96) = &v81[4 * v80];
              if (v76) {
                operator delete(v76);
              }
            }
            else
            {
              *(_DWORD *)int v74 = 0;
              v75 = v74 + 4;
            }
            *(void *)(a1 + 88) = v75;
            unint64_t v84 = *((void *)this + 1);
            if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
              goto LABEL_169;
            }
            *(v75 - 1) = *(_DWORD *)(*(void *)this + v84);
            unint64_t v72 = *((void *)this + 2);
            unint64_t v71 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v71;
          }
          goto LABEL_170;
        case 3u:
          if (v26 != 2)
          {
            uint64_t v126 = *(char **)(a1 + 64);
            unint64_t v125 = *(void *)(a1 + 72);
            if ((unint64_t)v126 >= v125)
            {
              uint64_t v150 = (char *)*v10;
              uint64_t v151 = (v126 - (unsigned char *)*v10) >> 2;
              unint64_t v152 = v151 + 1;
              if ((unint64_t)(v151 + 1) >> 62) {
LABEL_301:
              }
                sub_1903479E8();
              uint64_t v153 = v125 - (void)v150;
              if (v153 >> 1 > v152) {
                unint64_t v152 = v153 >> 1;
              }
              if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v154 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v154 = v152;
              }
              if (v154)
              {
                v155 = (char *)sub_190347D04(v11, v154);
                uint64_t v150 = *(char **)(a1 + 56);
                uint64_t v126 = *(char **)(a1 + 64);
              }
              else
              {
                v155 = 0;
              }
              v174 = &v155[4 * v151];
              *(_DWORD *)v174 = 0;
              unint64_t v127 = v174 + 4;
              while (v126 != v150)
              {
                int v175 = *((_DWORD *)v126 - 1);
                v126 -= 4;
                *((_DWORD *)v174 - 1) = v175;
                v174 -= 4;
              }
              *(void *)(a1 + 56) = v174;
              *(void *)(a1 + 64) = v127;
              *(void *)(a1 + 72) = &v155[4 * v154];
              if (v150) {
                operator delete(v150);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v126 = 0;
              unint64_t v127 = v126 + 4;
            }
            *(void *)(a1 + 64) = v127;
            goto LABEL_285;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)this + 1);
          unint64_t v29 = *((void *)this + 2);
          while (v28 < v29 && !*((unsigned char *)this + 24))
          {
            uint64_t v31 = *(char **)(a1 + 64);
            unint64_t v30 = *(void *)(a1 + 72);
            if ((unint64_t)v31 >= v30)
            {
              unint64_t v33 = (char *)*v10;
              uint64_t v34 = (v31 - (unsigned char *)*v10) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_301;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                char v38 = (char *)sub_190347D04(v11, v37);
                unint64_t v33 = *(char **)(a1 + 56);
                uint64_t v31 = *(char **)(a1 + 64);
              }
              else
              {
                char v38 = 0;
              }
              unint64_t v39 = &v38[4 * v34];
              *(_DWORD *)unint64_t v39 = 0;
              char v32 = v39 + 4;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *(void *)(a1 + 56) = v39;
              *(void *)(a1 + 64) = v32;
              *(void *)(a1 + 72) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v31 = 0;
              char v32 = v31 + 4;
            }
            *(void *)(a1 + 64) = v32;
            unint64_t v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
              goto LABEL_169;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
            unint64_t v29 = *((void *)this + 2);
            unint64_t v28 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v28;
          }
          goto LABEL_170;
        case 4u:
          *(_WORD *)(a1 + 168) |= 0x20u;
          unint64_t v85 = *((void *)this + 1);
          if (v85 > 0xFFFFFFFFFFFFFFFBLL || v85 + 4 > *((void *)this + 2)) {
            goto LABEL_287;
          }
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v85);
          goto LABEL_289;
        case 5u:
          *(_WORD *)(a1 + 168) |= 1u;
          unint64_t v42 = *((void *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((void *)this + 2)) {
            goto LABEL_287;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v42);
LABEL_53:
          uint64_t v43 = *((void *)this + 1) + 8;
          goto LABEL_290;
        case 6u:
          *(_WORD *)(a1 + 168) |= 0x100u;
          unint64_t v86 = *((void *)this + 1);
          unint64_t v87 = *((void *)this + 2);
          uint64_t v88 = *(void *)this;
          if (v86 <= 0xFFFFFFFFFFFFFFF5 && v86 + 10 <= v87)
          {
            char v89 = 0;
            unsigned int v90 = 0;
            uint64_t v91 = 0;
            do
            {
              unint64_t v92 = v86 + 1;
              *((void *)this + 1) = v86 + 1;
              char v93 = *(unsigned char *)(v88 + v86);
              v91 |= (unint64_t)(v93 & 0x7F) << v89;
              if ((v93 & 0x80) == 0) {
                goto LABEL_250;
              }
              v89 += 7;
              unint64_t v86 = v92;
              BOOL v20 = v90++ > 8;
            }
            while (!v20);
LABEL_192:
            LODWORD(v91) = 0;
            goto LABEL_250;
          }
          char v136 = 0;
          unsigned int v137 = 0;
          uint64_t v91 = 0;
          if (v87 <= v86) {
            unint64_t v87 = *((void *)this + 1);
          }
          while (2)
          {
            if (v87 == v86)
            {
              LODWORD(v91) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v138 = v86 + 1;
              char v139 = *(unsigned char *)(v88 + v86);
              *((void *)this + 1) = v138;
              v91 |= (unint64_t)(v139 & 0x7F) << v136;
              if (v139 < 0)
              {
                v136 += 7;
                unint64_t v86 = v138;
                BOOL v20 = v137++ > 8;
                if (v20) {
                  goto LABEL_192;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v91) = 0;
              }
            }
            break;
          }
LABEL_250:
          *(_DWORD *)(a1 + 160) = v91;
          goto LABEL_291;
        case 7u:
          operator new();
        case 8u:
          operator new();
        case 9u:
          *(_WORD *)(a1 + 168) |= 0x10u;
          unint64_t v94 = *((void *)this + 1);
          unint64_t v95 = *((void *)this + 2);
          uint64_t v96 = *(void *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            char v97 = 0;
            unsigned int v98 = 0;
            uint64_t v99 = 0;
            do
            {
              unint64_t v100 = v94 + 1;
              *((void *)this + 1) = v94 + 1;
              char v101 = *(unsigned char *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0) {
                goto LABEL_253;
              }
              v97 += 7;
              unint64_t v94 = v100;
              BOOL v20 = v98++ > 8;
            }
            while (!v20);
LABEL_199:
            LODWORD(v99) = 0;
            goto LABEL_253;
          }
          char v140 = 0;
          unsigned int v141 = 0;
          uint64_t v99 = 0;
          if (v95 <= v94) {
            unint64_t v95 = *((void *)this + 1);
          }
          while (2)
          {
            if (v95 == v94)
            {
              LODWORD(v99) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v142 = v94 + 1;
              char v143 = *(unsigned char *)(v96 + v94);
              *((void *)this + 1) = v142;
              v99 |= (unint64_t)(v143 & 0x7F) << v140;
              if (v143 < 0)
              {
                v140 += 7;
                unint64_t v94 = v142;
                BOOL v20 = v141++ > 8;
                if (v20) {
                  goto LABEL_199;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v99) = 0;
              }
            }
            break;
          }
LABEL_253:
          *(_DWORD *)(a1 + 144) = v99;
          goto LABEL_291;
        case 0xAu:
          *(_WORD *)(a1 + 168) |= 0x200u;
          unint64_t v44 = *((void *)this + 1);
          if (v44 >= *((void *)this + 2))
          {
            BOOL v47 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v45 = v44 + 1;
            int v46 = *(unsigned __int8 *)(*(void *)this + v44);
            *((void *)this + 1) = v45;
            BOOL v47 = v46 != 0;
          }
          *(unsigned char *)(a1 + 164) = v47;
          goto LABEL_291;
        case 0xBu:
          *(_WORD *)(a1 + 168) |= 4u;
          unint64_t v102 = *((void *)this + 1);
          if (v102 > 0xFFFFFFFFFFFFFFFBLL || v102 + 4 > *((void *)this + 2)) {
            goto LABEL_287;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v102);
          goto LABEL_289;
        case 0xCu:
          *(_WORD *)(a1 + 168) |= 8u;
          unint64_t v48 = *((void *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)this + 2)) {
            goto LABEL_287;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v48);
          goto LABEL_289;
        case 0xDu:
          *(_WORD *)(a1 + 168) |= 0x40u;
          unint64_t v49 = *((void *)this + 1);
          unint64_t v50 = *((void *)this + 2);
          uint64_t v51 = *(void *)this;
          if (v49 <= 0xFFFFFFFFFFFFFFF5 && v49 + 10 <= v50)
          {
            char v52 = 0;
            unsigned int v53 = 0;
            uint64_t v54 = 0;
            do
            {
              unint64_t v55 = v49 + 1;
              *((void *)this + 1) = v49 + 1;
              char v56 = *(unsigned char *)(v51 + v49);
              v54 |= (unint64_t)(v56 & 0x7F) << v52;
              if ((v56 & 0x80) == 0) {
                goto LABEL_247;
              }
              v52 += 7;
              unint64_t v49 = v55;
              BOOL v20 = v53++ > 8;
            }
            while (!v20);
LABEL_181:
            LODWORD(v54) = 0;
            goto LABEL_247;
          }
          char v128 = 0;
          unsigned int v129 = 0;
          uint64_t v54 = 0;
          if (v50 <= v49) {
            unint64_t v50 = *((void *)this + 1);
          }
          while (2)
          {
            if (v50 == v49)
            {
              LODWORD(v54) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v130 = v49 + 1;
              char v131 = *(unsigned char *)(v51 + v49);
              *((void *)this + 1) = v130;
              v54 |= (unint64_t)(v131 & 0x7F) << v128;
              if (v131 < 0)
              {
                v128 += 7;
                unint64_t v49 = v130;
                BOOL v20 = v129++ > 8;
                if (v20) {
                  goto LABEL_181;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v54) = 0;
              }
            }
            break;
          }
LABEL_247:
          *(_DWORD *)(a1 + 152) = v54;
          goto LABEL_291;
        case 0xEu:
          *(_WORD *)(a1 + 168) |= 0x80u;
          unint64_t v103 = *((void *)this + 1);
          unint64_t v104 = *((void *)this + 2);
          uint64_t v105 = *(void *)this;
          if (v103 <= 0xFFFFFFFFFFFFFFF5 && v103 + 10 <= v104)
          {
            char v106 = 0;
            unsigned int v107 = 0;
            uint64_t v108 = 0;
            do
            {
              unint64_t v109 = v103 + 1;
              *((void *)this + 1) = v103 + 1;
              char v110 = *(unsigned char *)(v105 + v103);
              v108 |= (unint64_t)(v110 & 0x7F) << v106;
              if ((v110 & 0x80) == 0) {
                goto LABEL_256;
              }
              v106 += 7;
              unint64_t v103 = v109;
              BOOL v20 = v107++ > 8;
            }
            while (!v20);
LABEL_206:
            LODWORD(v108) = 0;
            goto LABEL_256;
          }
          char v144 = 0;
          unsigned int v145 = 0;
          uint64_t v108 = 0;
          if (v104 <= v103) {
            unint64_t v104 = *((void *)this + 1);
          }
          while (2)
          {
            if (v104 == v103)
            {
              LODWORD(v108) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v146 = v103 + 1;
              char v147 = *(unsigned char *)(v105 + v103);
              *((void *)this + 1) = v146;
              v108 |= (unint64_t)(v147 & 0x7F) << v144;
              if (v147 < 0)
              {
                v144 += 7;
                unint64_t v103 = v146;
                BOOL v20 = v145++ > 8;
                if (v20) {
                  goto LABEL_206;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v108) = 0;
              }
            }
            break;
          }
LABEL_256:
          *(_DWORD *)(a1 + 156) = v108;
          goto LABEL_291;
        case 0xFu:
          if (v26 != 2)
          {
            unint64_t v133 = *(char **)(a1 + 16);
            unint64_t v132 = *(void *)(a1 + 24);
            if ((unint64_t)v133 >= v132)
            {
              uint64_t v156 = (char *)*v9;
              uint64_t v157 = (v133 - (unsigned char *)*v9) >> 2;
              unint64_t v158 = v157 + 1;
              if ((unint64_t)(v157 + 1) >> 62) {
LABEL_302:
              }
                sub_1903479E8();
              uint64_t v159 = v132 - (void)v156;
              if (v159 >> 1 > v158) {
                unint64_t v158 = v159 >> 1;
              }
              if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v160 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v160 = v158;
              }
              if (v160)
              {
                v161 = (char *)sub_190347D04(v185, v160);
                uint64_t v156 = *(char **)(a1 + 8);
                unint64_t v133 = *(char **)(a1 + 16);
              }
              else
              {
                v161 = 0;
              }
              uint64_t v176 = &v161[4 * v157];
              *(_DWORD *)uint64_t v176 = 0;
              unint64_t v127 = v176 + 4;
              while (v133 != v156)
              {
                int v177 = *((_DWORD *)v133 - 1);
                v133 -= 4;
                *((_DWORD *)v176 - 1) = v177;
                v176 -= 4;
              }
              *(void *)(a1 + 8) = v176;
              *(void *)(a1 + 16) = v127;
              *(void *)(a1 + 24) = &v161[4 * v160];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v133 = 0;
              unint64_t v127 = v133 + 4;
            }
            *(void *)(a1 + 16) = v127;
            goto LABEL_285;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v57 = *((void *)this + 1);
          unint64_t v58 = *((void *)this + 2);
          while (v57 < v58 && !*((unsigned char *)this + 24))
          {
            char v60 = *(char **)(a1 + 16);
            unint64_t v59 = *(void *)(a1 + 24);
            if ((unint64_t)v60 >= v59)
            {
              uint64_t v62 = (char *)*v9;
              uint64_t v63 = (v60 - (unsigned char *)*v9) >> 2;
              unint64_t v64 = v63 + 1;
              if ((unint64_t)(v63 + 1) >> 62) {
                goto LABEL_302;
              }
              uint64_t v65 = v59 - (void)v62;
              if (v65 >> 1 > v64) {
                unint64_t v64 = v65 >> 1;
              }
              if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v66 = v64;
              }
              if (v66)
              {
                unint64_t v67 = (char *)sub_190347D04(v185, v66);
                uint64_t v62 = *(char **)(a1 + 8);
                char v60 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v67 = 0;
              }
              uint64_t v68 = &v67[4 * v63];
              *(_DWORD *)uint64_t v68 = 0;
              char v61 = v68 + 4;
              while (v60 != v62)
              {
                int v69 = *((_DWORD *)v60 - 1);
                v60 -= 4;
                *((_DWORD *)v68 - 1) = v69;
                v68 -= 4;
              }
              *(void *)(a1 + 8) = v68;
              *(void *)(a1 + 16) = v61;
              *(void *)(a1 + 24) = &v67[4 * v66];
              if (v62) {
                operator delete(v62);
              }
            }
            else
            {
              *(_DWORD *)char v60 = 0;
              char v61 = v60 + 4;
            }
            *(void *)(a1 + 16) = v61;
            unint64_t v70 = *((void *)this + 1);
            if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
              goto LABEL_169;
            }
            *(v61 - 1) = *(_DWORD *)(*(void *)this + v70);
            unint64_t v58 = *((void *)this + 2);
            unint64_t v57 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v57;
          }
          goto LABEL_170;
        case 0x10u:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v111 = *((void *)this + 1);
            unint64_t v112 = *((void *)this + 2);
            while (v111 < v112 && !*((unsigned char *)this + 24))
            {
              v114 = *(char **)(a1 + 40);
              unint64_t v113 = *(void *)(a1 + 48);
              if ((unint64_t)v114 >= v113)
              {
                v116 = (char *)*v8;
                uint64_t v117 = (v114 - (unsigned char *)*v8) >> 2;
                unint64_t v118 = v117 + 1;
                if ((unint64_t)(v117 + 1) >> 62) {
                  goto LABEL_304;
                }
                uint64_t v119 = v113 - (void)v116;
                if (v119 >> 1 > v118) {
                  unint64_t v118 = v119 >> 1;
                }
                if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v120 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v120 = v118;
                }
                if (v120)
                {
                  unint64_t v121 = (char *)sub_190347D04(v186, v120);
                  v116 = *(char **)(a1 + 32);
                  v114 = *(char **)(a1 + 40);
                }
                else
                {
                  unint64_t v121 = 0;
                }
                v122 = &v121[4 * v117];
                *(_DWORD *)v122 = 0;
                unint64_t v115 = v122 + 4;
                while (v114 != v116)
                {
                  int v123 = *((_DWORD *)v114 - 1);
                  v114 -= 4;
                  *((_DWORD *)v122 - 1) = v123;
                  v122 -= 4;
                }
                *(void *)(a1 + 32) = v122;
                *(void *)(a1 + 40) = v115;
                *(void *)(a1 + 48) = &v121[4 * v120];
                if (v116) {
                  operator delete(v116);
                }
              }
              else
              {
                *(_DWORD *)v114 = 0;
                unint64_t v115 = v114 + 4;
              }
              *(void *)(a1 + 40) = v115;
              unint64_t v124 = *((void *)this + 1);
              if (v124 > 0xFFFFFFFFFFFFFFFBLL || v124 + 4 > *((void *)this + 2))
              {
LABEL_169:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v115 - 1) = *(_DWORD *)(*(void *)this + v124);
              unint64_t v112 = *((void *)this + 2);
              unint64_t v111 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v111;
            }
LABEL_170:
            PB::Reader::recallMark();
          }
          else
          {
            v149 = *(char **)(a1 + 40);
            unint64_t v148 = *(void *)(a1 + 48);
            if ((unint64_t)v149 >= v148)
            {
              int v168 = (char *)*v8;
              uint64_t v169 = (v149 - (unsigned char *)*v8) >> 2;
              unint64_t v170 = v169 + 1;
              if ((unint64_t)(v169 + 1) >> 62) {
LABEL_304:
              }
                sub_1903479E8();
              uint64_t v171 = v148 - (void)v168;
              if (v171 >> 1 > v170) {
                unint64_t v170 = v171 >> 1;
              }
              if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v172 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v172 = v170;
              }
              if (v172)
              {
                unint64_t v173 = (char *)sub_190347D04(v186, v172);
                int v168 = *(char **)(a1 + 32);
                v149 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v173 = 0;
              }
              uint64_t v180 = &v173[4 * v169];
              *(_DWORD *)uint64_t v180 = 0;
              unint64_t v127 = v180 + 4;
              while (v149 != v168)
              {
                int v181 = *((_DWORD *)v149 - 1);
                v149 -= 4;
                *((_DWORD *)v180 - 1) = v181;
                v180 -= 4;
              }
              *(void *)(a1 + 32) = v180;
              *(void *)(a1 + 40) = v127;
              *(void *)(a1 + 48) = &v173[4 * v172];
              if (v168) {
                operator delete(v168);
              }
            }
            else
            {
              *(_DWORD *)v149 = 0;
              unint64_t v127 = v149 + 4;
            }
            *(void *)(a1 + 40) = v127;
LABEL_285:
            unint64_t v182 = *((void *)this + 1);
            if (v182 <= 0xFFFFFFFFFFFFFFFBLL && v182 + 4 <= *((void *)this + 2))
            {
              *(v127 - 1) = *(_DWORD *)(*(void *)this + v182);
LABEL_289:
              uint64_t v43 = *((void *)this + 1) + 4;
LABEL_290:
              *((void *)this + 1) = v43;
            }
            else
            {
LABEL_287:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_291:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_291;
      }
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v17 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v23 = v2 + 1;
      char v24 = *(unsigned char *)(v14 + v2);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19037885C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_WORD *)(result + 168) & 2) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 128));
  }
  int v4 = *(float **)(v3 + 80);
  __int16 v5 = *(float **)(v3 + 88);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  float v7 = *(float **)(v3 + 56);
  float v8 = *(float **)(v3 + 64);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  __int16 v10 = *(_WORD *)(v3 + 168);
  if ((v10 & 0x20) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 148));
    __int16 v10 = *(_WORD *)(v3 + 168);
    if ((v10 & 1) == 0)
    {
LABEL_11:
      if ((v10 & 0x100) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else if ((v10 & 1) == 0)
  {
    goto LABEL_11;
  }
  double result = PB::Writer::write(this, *(double *)(v3 + 120));
  if ((*(_WORD *)(v3 + 168) & 0x100) != 0) {
LABEL_12:
  }
    double result = PB::Writer::writeVarInt(this);
LABEL_13:
  uint64_t v11 = *(const PB::Base **)(v3 + 104);
  if (v11) {
    double result = PB::Writer::writeSubmessage(this, v11);
  }
  unint64_t v12 = *(const PB::Base **)(v3 + 112);
  if (v12) {
    double result = PB::Writer::writeSubmessage(this, v12);
  }
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x10) != 0)
  {
    double result = PB::Writer::writeVarInt(this);
    __int16 v13 = *(_WORD *)(v3 + 168);
    if ((v13 & 0x200) == 0)
    {
LABEL_19:
      if ((v13 & 4) == 0) {
        goto LABEL_20;
      }
      goto LABEL_36;
    }
  }
  else if ((*(_WORD *)(v3 + 168) & 0x200) == 0)
  {
    goto LABEL_19;
  }
  double result = PB::Writer::write(this);
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 4) == 0)
  {
LABEL_20:
    if ((v13 & 8) == 0) {
      goto LABEL_21;
    }
    goto LABEL_37;
  }
LABEL_36:
  double result = PB::Writer::write(this, *(float *)(v3 + 136));
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 8) == 0)
  {
LABEL_21:
    if ((v13 & 0x40) == 0) {
      goto LABEL_22;
    }
LABEL_38:
    double result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 168) & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_37:
  double result = PB::Writer::write(this, *(float *)(v3 + 140));
  __int16 v13 = *(_WORD *)(v3 + 168);
  if ((v13 & 0x40) != 0) {
    goto LABEL_38;
  }
LABEL_22:
  if ((v13 & 0x80) != 0) {
LABEL_23:
  }
    double result = PB::Writer::writeVarInt(this);
LABEL_24:
  uint64_t v14 = *(float **)(v3 + 8);
  char v15 = *(float **)(v3 + 16);
  while (v14 != v15)
  {
    float v16 = *v14++;
    double result = PB::Writer::write(this, v16);
  }
  unint64_t v18 = *(float **)(v3 + 32);
  unint64_t v17 = *(float **)(v3 + 40);
  while (v18 != v17)
  {
    float v19 = *v18++;
    double result = PB::Writer::write(this, v19);
  }
  return result;
}

double sub_190378A44(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCD538;
  *(_DWORD *)(a1 + 204) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  return result;
}

void sub_190378A98(PB::Base *this)
{
  *(void *)this = &unk_1EDFCD538;
  uint64_t v2 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  __int16 v5 = (void *)*((void *)this + 13);
  if (v5)
  {
    *((void *)this + 14) = v5;
    operator delete(v5);
  }
  float v6 = (void *)*((void *)this + 10);
  if (v6)
  {
    *((void *)this + 11) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 7);
  if (v7)
  {
    *((void *)this + 8) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)this + 4);
  if (v8)
  {
    *((void *)this + 5) = v8;
    operator delete(v8);
  }
  float v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    *((void *)this + 2) = v9;
    operator delete(v9);
  }

  PB::Base::~Base(this);
}

void sub_190378B8C(PB::Base *a1)
{
  sub_190378A98(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190378BC4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 176);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "TNBFrame");
  }
  if ((*(unsigned char *)(a1 + 204) & 2) != 0) {
    PB::TextFormatter::format(this, "dotQuality", *(float *)(a1 + 192));
  }
  float v6 = *(float **)(a1 + 8);
  float v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "dotVector", v8);
  }
  if ((*(unsigned char *)(a1 + 204) & 8) != 0) {
    PB::TextFormatter::format(this, "fusingGaze");
  }
  float v9 = *(float **)(a1 + 32);
  __int16 v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(this, "gazeVector", v11);
  }
  char v12 = *(unsigned char *)(a1 + 204);
  if ((v12 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "hasStep");
    char v12 = *(unsigned char *)(a1 + 204);
  }
  if ((v12 & 0x20) != 0) {
    PB::TextFormatter::format(this, "hasValidTNBFrame");
  }
  __int16 v13 = *(float **)(a1 + 56);
  uint64_t v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(this, "lpfInertialRotationRate", v15);
  }
  float v16 = *(float **)(a1 + 80);
  unint64_t v17 = *(float **)(a1 + 88);
  while (v16 != v17)
  {
    float v18 = *v16++;
    PB::TextFormatter::format(this, "lpfInertialUserAccel", v18);
  }
  float v19 = *(float **)(a1 + 104);
  BOOL v20 = *(float **)(a1 + 112);
  while (v19 != v20)
  {
    float v21 = *v19++;
    PB::TextFormatter::format(this, "rawDoTVector", v21);
  }
  unsigned int v22 = *(float **)(a1 + 128);
  unint64_t v23 = *(float **)(a1 + 136);
  while (v22 != v23)
  {
    float v24 = *v22++;
    PB::TextFormatter::format(this, "rawInertialRotationRate", v24);
  }
  char v25 = *(float **)(a1 + 152);
  int v26 = *(float **)(a1 + 160);
  while (v25 != v26)
  {
    float v27 = *v25++;
    PB::TextFormatter::format(this, "rawInertialUserAccel", v27);
  }
  char v28 = *(unsigned char *)(a1 + 204);
  if ((v28 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 196));
    char v28 = *(unsigned char *)(a1 + 204);
  }
  if (v28) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 184));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190378E2C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v219 = a1 + 72;
    v220 = (void **)(a1 + 128);
    v221 = (void **)(a1 + 56);
    float v8 = (void **)(a1 + 104);
    uint64_t v217 = a1 + 120;
    uint64_t v218 = a1 + 144;
    float v9 = (void **)(a1 + 32);
    __int16 v10 = (void **)(a1 + 8);
    uint64_t v215 = a1 + 24;
    uint64_t v216 = a1 + 48;
    float v11 = (void **)(a1 + 80);
    char v12 = (void **)(a1 + 152);
    uint64_t v213 = a1 + 168;
    uint64_t v214 = a1 + 96;
    while (1)
    {
      uint64_t v13 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 204) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_338;
          }
          *(void *)(a1 + 184) = *(void *)(*(void *)this + v26);
          uint64_t v27 = *((void *)this + 1) + 8;
          goto LABEL_341;
        case 2u:
          if (v25 != 2)
          {
            unsigned int v141 = *(char **)(a1 + 160);
            unint64_t v140 = *(void *)(a1 + 168);
            if ((unint64_t)v141 >= v140)
            {
              v155 = (char *)*v12;
              uint64_t v156 = (v141 - (unsigned char *)*v12) >> 2;
              unint64_t v157 = v156 + 1;
              if ((unint64_t)(v156 + 1) >> 62) {
LABEL_350:
              }
                sub_1903479E8();
              uint64_t v158 = v140 - (void)v155;
              if (v158 >> 1 > v157) {
                unint64_t v157 = v158 >> 1;
              }
              if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v159 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v159 = v157;
              }
              if (v159)
              {
                unint64_t v160 = (char *)sub_190347D04(v213, v159);
                v155 = *(char **)(a1 + 152);
                unsigned int v141 = *(char **)(a1 + 160);
              }
              else
              {
                unint64_t v160 = 0;
              }
              v197 = &v160[4 * v156];
              *(_DWORD *)v197 = 0;
              unint64_t v142 = v197 + 4;
              while (v141 != v155)
              {
                int v198 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v197 - 1) = v198;
                v197 -= 4;
              }
              *(void *)(a1 + 152) = v197;
              *(void *)(a1 + 160) = v142;
              *(void *)(a1 + 168) = &v160[4 * v159];
              if (v155) {
                operator delete(v155);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v141 = 0;
              unint64_t v142 = v141 + 4;
            }
            *(void *)(a1 + 160) = v142;
            goto LABEL_336;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)this + 1);
          unint64_t v29 = *((void *)this + 2);
          while (v28 < v29 && !*((unsigned char *)this + 24))
          {
            uint64_t v31 = *(char **)(a1 + 160);
            unint64_t v30 = *(void *)(a1 + 168);
            if ((unint64_t)v31 >= v30)
            {
              unint64_t v33 = (char *)*v12;
              uint64_t v34 = (v31 - (unsigned char *)*v12) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_350;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                char v38 = (char *)sub_190347D04(v213, v37);
                unint64_t v33 = *(char **)(a1 + 152);
                uint64_t v31 = *(char **)(a1 + 160);
              }
              else
              {
                char v38 = 0;
              }
              unint64_t v39 = &v38[4 * v34];
              *(_DWORD *)unint64_t v39 = 0;
              char v32 = v39 + 4;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *(void *)(a1 + 152) = v39;
              *(void *)(a1 + 160) = v32;
              *(void *)(a1 + 168) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v31 = 0;
              char v32 = v31 + 4;
            }
            *(void *)(a1 + 160) = v32;
            unint64_t v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
              goto LABEL_209;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
            unint64_t v29 = *((void *)this + 2);
            unint64_t v28 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v28;
          }
          goto LABEL_210;
        case 3u:
          if (v25 != 2)
          {
            char v144 = *(char **)(a1 + 88);
            unint64_t v143 = *(void *)(a1 + 96);
            if ((unint64_t)v144 >= v143)
            {
              v161 = (char *)*v11;
              uint64_t v162 = (v144 - (unsigned char *)*v11) >> 2;
              unint64_t v163 = v162 + 1;
              if ((unint64_t)(v162 + 1) >> 62) {
LABEL_351:
              }
                sub_1903479E8();
              uint64_t v164 = v143 - (void)v161;
              if (v164 >> 1 > v163) {
                unint64_t v163 = v164 >> 1;
              }
              if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v165 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v165 = v163;
              }
              if (v165)
              {
                unint64_t v166 = (char *)sub_190347D04(v214, v165);
                v161 = *(char **)(a1 + 80);
                char v144 = *(char **)(a1 + 88);
              }
              else
              {
                unint64_t v166 = 0;
              }
              v199 = &v166[4 * v162];
              *(_DWORD *)v199 = 0;
              unint64_t v142 = v199 + 4;
              while (v144 != v161)
              {
                int v200 = *((_DWORD *)v144 - 1);
                v144 -= 4;
                *((_DWORD *)v199 - 1) = v200;
                v199 -= 4;
              }
              *(void *)(a1 + 80) = v199;
              *(void *)(a1 + 88) = v142;
              *(void *)(a1 + 96) = &v166[4 * v165];
              if (v161) {
                operator delete(v161);
              }
            }
            else
            {
              *(_DWORD *)char v144 = 0;
              unint64_t v142 = v144 + 4;
            }
            *(void *)(a1 + 88) = v142;
            goto LABEL_336;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)this + 1);
          unint64_t v43 = *((void *)this + 2);
          while (v42 < v43 && !*((unsigned char *)this + 24))
          {
            unint64_t v45 = *(char **)(a1 + 88);
            unint64_t v44 = *(void *)(a1 + 96);
            if ((unint64_t)v45 >= v44)
            {
              BOOL v47 = (char *)*v11;
              uint64_t v48 = (v45 - (unsigned char *)*v11) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_351;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                char v52 = (char *)sub_190347D04(v214, v51);
                BOOL v47 = *(char **)(a1 + 80);
                unint64_t v45 = *(char **)(a1 + 88);
              }
              else
              {
                char v52 = 0;
              }
              unsigned int v53 = &v52[4 * v48];
              *(_DWORD *)unsigned int v53 = 0;
              int v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *(void *)(a1 + 80) = v53;
              *(void *)(a1 + 88) = v46;
              *(void *)(a1 + 96) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              int v46 = v45 + 4;
            }
            *(void *)(a1 + 88) = v46;
            unint64_t v55 = *((void *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
              goto LABEL_209;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)this + v55);
            unint64_t v43 = *((void *)this + 2);
            unint64_t v42 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v42;
          }
          goto LABEL_210;
        case 4u:
          if (v25 != 2)
          {
            unint64_t v146 = *(char **)(a1 + 16);
            unint64_t v145 = *(void *)(a1 + 24);
            if ((unint64_t)v146 >= v145)
            {
              v167 = (char *)*v10;
              uint64_t v168 = (v146 - (unsigned char *)*v10) >> 2;
              unint64_t v169 = v168 + 1;
              if ((unint64_t)(v168 + 1) >> 62) {
LABEL_352:
              }
                sub_1903479E8();
              uint64_t v170 = v145 - (void)v167;
              if (v170 >> 1 > v169) {
                unint64_t v169 = v170 >> 1;
              }
              if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v171 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v171 = v169;
              }
              if (v171)
              {
                unint64_t v172 = (char *)sub_190347D04(v215, v171);
                v167 = *(char **)(a1 + 8);
                unint64_t v146 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v172 = 0;
              }
              v201 = &v172[4 * v168];
              *(_DWORD *)v201 = 0;
              unint64_t v142 = v201 + 4;
              while (v146 != v167)
              {
                int v202 = *((_DWORD *)v146 - 1);
                v146 -= 4;
                *((_DWORD *)v201 - 1) = v202;
                v201 -= 4;
              }
              *(void *)(a1 + 8) = v201;
              *(void *)(a1 + 16) = v142;
              *(void *)(a1 + 24) = &v172[4 * v171];
              if (v167) {
                operator delete(v167);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v146 = 0;
              unint64_t v142 = v146 + 4;
            }
            *(void *)(a1 + 16) = v142;
            goto LABEL_336;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v56 = *((void *)this + 1);
          unint64_t v57 = *((void *)this + 2);
          while (v56 < v57 && !*((unsigned char *)this + 24))
          {
            unint64_t v59 = *(char **)(a1 + 16);
            unint64_t v58 = *(void *)(a1 + 24);
            if ((unint64_t)v59 >= v58)
            {
              char v61 = (char *)*v10;
              uint64_t v62 = (v59 - (unsigned char *)*v10) >> 2;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62) {
                goto LABEL_352;
              }
              uint64_t v64 = v58 - (void)v61;
              if (v64 >> 1 > v63) {
                unint64_t v63 = v64 >> 1;
              }
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v63;
              }
              if (v65)
              {
                unint64_t v66 = (char *)sub_190347D04(v215, v65);
                char v61 = *(char **)(a1 + 8);
                unint64_t v59 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v66 = 0;
              }
              unint64_t v67 = &v66[4 * v62];
              *(_DWORD *)unint64_t v67 = 0;
              char v60 = v67 + 4;
              while (v59 != v61)
              {
                int v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *(void *)(a1 + 8) = v67;
              *(void *)(a1 + 16) = v60;
              *(void *)(a1 + 24) = &v66[4 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v59 = 0;
              char v60 = v59 + 4;
            }
            *(void *)(a1 + 16) = v60;
            unint64_t v69 = *((void *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2)) {
              goto LABEL_209;
            }
            *(v60 - 1) = *(_DWORD *)(*(void *)this + v69);
            unint64_t v57 = *((void *)this + 2);
            unint64_t v56 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v56;
          }
          goto LABEL_210;
        case 5u:
          if (v25 != 2)
          {
            unint64_t v148 = *(char **)(a1 + 40);
            unint64_t v147 = *(void *)(a1 + 48);
            if ((unint64_t)v148 >= v147)
            {
              unint64_t v173 = (char *)*v9;
              uint64_t v174 = (v148 - (unsigned char *)*v9) >> 2;
              unint64_t v175 = v174 + 1;
              if ((unint64_t)(v174 + 1) >> 62) {
LABEL_353:
              }
                sub_1903479E8();
              uint64_t v176 = v147 - (void)v173;
              if (v176 >> 1 > v175) {
                unint64_t v175 = v176 >> 1;
              }
              if ((unint64_t)v176 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v177 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v177 = v175;
              }
              if (v177)
              {
                uint64_t v178 = (char *)sub_190347D04(v216, v177);
                unint64_t v173 = *(char **)(a1 + 32);
                unint64_t v148 = *(char **)(a1 + 40);
              }
              else
              {
                uint64_t v178 = 0;
              }
              v203 = &v178[4 * v174];
              *(_DWORD *)v203 = 0;
              unint64_t v142 = v203 + 4;
              while (v148 != v173)
              {
                int v204 = *((_DWORD *)v148 - 1);
                v148 -= 4;
                *((_DWORD *)v203 - 1) = v204;
                v203 -= 4;
              }
              *(void *)(a1 + 32) = v203;
              *(void *)(a1 + 40) = v142;
              *(void *)(a1 + 48) = &v178[4 * v177];
              if (v173) {
                operator delete(v173);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v148 = 0;
              unint64_t v142 = v148 + 4;
            }
            *(void *)(a1 + 40) = v142;
            goto LABEL_336;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v70 = *((void *)this + 1);
          unint64_t v71 = *((void *)this + 2);
          while (v70 < v71 && !*((unsigned char *)this + 24))
          {
            unint64_t v73 = *(char **)(a1 + 40);
            unint64_t v72 = *(void *)(a1 + 48);
            if ((unint64_t)v73 >= v72)
            {
              v75 = (char *)*v9;
              uint64_t v76 = (v73 - (unsigned char *)*v9) >> 2;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62) {
                goto LABEL_353;
              }
              uint64_t v78 = v72 - (void)v75;
              if (v78 >> 1 > v77) {
                unint64_t v77 = v78 >> 1;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v77;
              }
              if (v79)
              {
                unint64_t v80 = (char *)sub_190347D04(v216, v79);
                v75 = *(char **)(a1 + 32);
                unint64_t v73 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v80 = 0;
              }
              v81 = &v80[4 * v76];
              *(_DWORD *)v81 = 0;
              int v74 = v81 + 4;
              while (v73 != v75)
              {
                int v82 = *((_DWORD *)v73 - 1);
                v73 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *(void *)(a1 + 32) = v81;
              *(void *)(a1 + 40) = v74;
              *(void *)(a1 + 48) = &v80[4 * v79];
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v73 = 0;
              int v74 = v73 + 4;
            }
            *(void *)(a1 + 40) = v74;
            unint64_t v83 = *((void *)this + 1);
            if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2)) {
              goto LABEL_209;
            }
            *(v74 - 1) = *(_DWORD *)(*(void *)this + v83);
            unint64_t v71 = *((void *)this + 2);
            unint64_t v70 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v70;
          }
          goto LABEL_210;
        case 6u:
          *(unsigned char *)(a1 + 204) |= 2u;
          unint64_t v84 = *((void *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
            goto LABEL_338;
          }
          *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(void *)this + v84);
          goto LABEL_340;
        case 7u:
          *(unsigned char *)(a1 + 204) |= 8u;
          unint64_t v85 = *((void *)this + 1);
          if (v85 >= *((void *)this + 2))
          {
            BOOL v88 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v86 = v85 + 1;
            int v87 = *(unsigned __int8 *)(*(void *)this + v85);
            *((void *)this + 1) = v86;
            BOOL v88 = v87 != 0;
          }
          *(unsigned char *)(a1 + 200) = v88;
          goto LABEL_342;
        case 8u:
          *(unsigned char *)(a1 + 204) |= 0x10u;
          unint64_t v89 = *((void *)this + 1);
          if (v89 >= *((void *)this + 2))
          {
            BOOL v92 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v90 = v89 + 1;
            int v91 = *(unsigned __int8 *)(*(void *)this + v89);
            *((void *)this + 1) = v90;
            BOOL v92 = v91 != 0;
          }
          *(unsigned char *)(a1 + 201) = v92;
          goto LABEL_342;
        case 9u:
          *(unsigned char *)(a1 + 204) |= 0x20u;
          unint64_t v93 = *((void *)this + 1);
          if (v93 >= *((void *)this + 2))
          {
            BOOL v96 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v94 = v93 + 1;
            int v95 = *(unsigned __int8 *)(*(void *)this + v93);
            *((void *)this + 1) = v94;
            BOOL v96 = v95 != 0;
          }
          *(unsigned char *)(a1 + 202) = v96;
          goto LABEL_342;
        case 0xAu:
          operator new();
        case 0xBu:
          if (v25 != 2)
          {
            uint64_t v150 = *(char **)(a1 + 112);
            unint64_t v149 = *(void *)(a1 + 120);
            if ((unint64_t)v150 >= v149)
            {
              int v179 = (char *)*v8;
              uint64_t v180 = (v150 - (unsigned char *)*v8) >> 2;
              unint64_t v181 = v180 + 1;
              if ((unint64_t)(v180 + 1) >> 62) {
LABEL_354:
              }
                sub_1903479E8();
              uint64_t v182 = v149 - (void)v179;
              if (v182 >> 1 > v181) {
                unint64_t v181 = v182 >> 1;
              }
              if ((unint64_t)v182 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v183 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v183 = v181;
              }
              if (v183)
              {
                v184 = (char *)sub_190347D04(v217, v183);
                int v179 = *(char **)(a1 + 104);
                uint64_t v150 = *(char **)(a1 + 112);
              }
              else
              {
                v184 = 0;
              }
              v205 = &v184[4 * v180];
              *(_DWORD *)v205 = 0;
              unint64_t v142 = v205 + 4;
              while (v150 != v179)
              {
                int v206 = *((_DWORD *)v150 - 1);
                v150 -= 4;
                *((_DWORD *)v205 - 1) = v206;
                v205 -= 4;
              }
              *(void *)(a1 + 104) = v205;
              *(void *)(a1 + 112) = v142;
              *(void *)(a1 + 120) = &v184[4 * v183];
              if (v179) {
                operator delete(v179);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v150 = 0;
              unint64_t v142 = v150 + 4;
            }
            *(void *)(a1 + 112) = v142;
            goto LABEL_336;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v97 = *((void *)this + 1);
          unint64_t v98 = *((void *)this + 2);
          while (v97 < v98 && !*((unsigned char *)this + 24))
          {
            unint64_t v100 = *(char **)(a1 + 112);
            unint64_t v99 = *(void *)(a1 + 120);
            if ((unint64_t)v100 >= v99)
            {
              unint64_t v102 = (char *)*v8;
              uint64_t v103 = (v100 - (unsigned char *)*v8) >> 2;
              unint64_t v104 = v103 + 1;
              if ((unint64_t)(v103 + 1) >> 62) {
                goto LABEL_354;
              }
              uint64_t v105 = v99 - (void)v102;
              if (v105 >> 1 > v104) {
                unint64_t v104 = v105 >> 1;
              }
              if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v106 = v104;
              }
              if (v106)
              {
                unsigned int v107 = (char *)sub_190347D04(v217, v106);
                unint64_t v102 = *(char **)(a1 + 104);
                unint64_t v100 = *(char **)(a1 + 112);
              }
              else
              {
                unsigned int v107 = 0;
              }
              uint64_t v108 = &v107[4 * v103];
              *(_DWORD *)uint64_t v108 = 0;
              char v101 = v108 + 4;
              while (v100 != v102)
              {
                int v109 = *((_DWORD *)v100 - 1);
                v100 -= 4;
                *((_DWORD *)v108 - 1) = v109;
                v108 -= 4;
              }
              *(void *)(a1 + 104) = v108;
              *(void *)(a1 + 112) = v101;
              *(void *)(a1 + 120) = &v107[4 * v106];
              if (v102) {
                operator delete(v102);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v100 = 0;
              char v101 = v100 + 4;
            }
            *(void *)(a1 + 112) = v101;
            unint64_t v110 = *((void *)this + 1);
            if (v110 > 0xFFFFFFFFFFFFFFFBLL || v110 + 4 > *((void *)this + 2)) {
              goto LABEL_209;
            }
            *(v101 - 1) = *(_DWORD *)(*(void *)this + v110);
            unint64_t v98 = *((void *)this + 2);
            unint64_t v97 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v97;
          }
          goto LABEL_210;
        case 0xCu:
          *(unsigned char *)(a1 + 204) |= 4u;
          unint64_t v111 = *((void *)this + 1);
          if (v111 > 0xFFFFFFFFFFFFFFFBLL || v111 + 4 > *((void *)this + 2)) {
            goto LABEL_338;
          }
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(void *)this + v111);
          goto LABEL_340;
        case 0xDu:
          if (v25 != 2)
          {
            unint64_t v152 = *(char **)(a1 + 136);
            unint64_t v151 = *(void *)(a1 + 144);
            if ((unint64_t)v152 >= v151)
            {
              uint64_t v185 = (char *)*v220;
              uint64_t v186 = (v152 - (unsigned char *)*v220) >> 2;
              unint64_t v187 = v186 + 1;
              if ((unint64_t)(v186 + 1) >> 62) {
LABEL_355:
              }
                sub_1903479E8();
              uint64_t v188 = v151 - (void)v185;
              if (v188 >> 1 > v187) {
                unint64_t v187 = v188 >> 1;
              }
              if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v189 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v189 = v187;
              }
              if (v189)
              {
                v190 = (char *)sub_190347D04(v218, v189);
                uint64_t v185 = *(char **)(a1 + 128);
                unint64_t v152 = *(char **)(a1 + 136);
              }
              else
              {
                v190 = 0;
              }
              v207 = &v190[4 * v186];
              *(_DWORD *)v207 = 0;
              unint64_t v142 = v207 + 4;
              while (v152 != v185)
              {
                int v208 = *((_DWORD *)v152 - 1);
                v152 -= 4;
                *((_DWORD *)v207 - 1) = v208;
                v207 -= 4;
              }
              *(void *)(a1 + 128) = v207;
              *(void *)(a1 + 136) = v142;
              *(void *)(a1 + 144) = &v190[4 * v189];
              if (v185) {
                operator delete(v185);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v152 = 0;
              unint64_t v142 = v152 + 4;
            }
            *(void *)(a1 + 136) = v142;
            goto LABEL_336;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v112 = *((void *)this + 1);
          unint64_t v113 = *((void *)this + 2);
          while (v112 < v113 && !*((unsigned char *)this + 24))
          {
            unint64_t v115 = *(char **)(a1 + 136);
            unint64_t v114 = *(void *)(a1 + 144);
            if ((unint64_t)v115 >= v114)
            {
              uint64_t v117 = (char *)*v220;
              uint64_t v118 = (v115 - (unsigned char *)*v220) >> 2;
              unint64_t v119 = v118 + 1;
              if ((unint64_t)(v118 + 1) >> 62) {
                goto LABEL_355;
              }
              uint64_t v120 = v114 - (void)v117;
              if (v120 >> 1 > v119) {
                unint64_t v119 = v120 >> 1;
              }
              if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v121 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v121 = v119;
              }
              if (v121)
              {
                v122 = (char *)sub_190347D04(v218, v121);
                uint64_t v117 = *(char **)(a1 + 128);
                unint64_t v115 = *(char **)(a1 + 136);
              }
              else
              {
                v122 = 0;
              }
              int v123 = &v122[4 * v118];
              *(_DWORD *)int v123 = 0;
              v116 = v123 + 4;
              while (v115 != v117)
              {
                int v124 = *((_DWORD *)v115 - 1);
                v115 -= 4;
                *((_DWORD *)v123 - 1) = v124;
                v123 -= 4;
              }
              *(void *)(a1 + 128) = v123;
              *(void *)(a1 + 136) = v116;
              *(void *)(a1 + 144) = &v122[4 * v121];
              if (v117) {
                operator delete(v117);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v115 = 0;
              v116 = v115 + 4;
            }
            *(void *)(a1 + 136) = v116;
            unint64_t v125 = *((void *)this + 1);
            if (v125 > 0xFFFFFFFFFFFFFFFBLL || v125 + 4 > *((void *)this + 2)) {
              goto LABEL_209;
            }
            *(v116 - 1) = *(_DWORD *)(*(void *)this + v125);
            unint64_t v113 = *((void *)this + 2);
            unint64_t v112 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v112;
          }
          goto LABEL_210;
        case 0xEu:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v126 = *((void *)this + 1);
            unint64_t v127 = *((void *)this + 2);
            while (v126 < v127 && !*((unsigned char *)this + 24))
            {
              unsigned int v129 = *(char **)(a1 + 64);
              unint64_t v128 = *(void *)(a1 + 72);
              if ((unint64_t)v129 >= v128)
              {
                char v131 = (char *)*v221;
                uint64_t v132 = (v129 - (unsigned char *)*v221) >> 2;
                unint64_t v133 = v132 + 1;
                if ((unint64_t)(v132 + 1) >> 62) {
                  goto LABEL_356;
                }
                uint64_t v134 = v128 - (void)v131;
                if (v134 >> 1 > v133) {
                  unint64_t v133 = v134 >> 1;
                }
                if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v135 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v135 = v133;
                }
                if (v135)
                {
                  char v136 = (char *)sub_190347D04(v219, v135);
                  char v131 = *(char **)(a1 + 56);
                  unsigned int v129 = *(char **)(a1 + 64);
                }
                else
                {
                  char v136 = 0;
                }
                unsigned int v137 = &v136[4 * v132];
                *(_DWORD *)unsigned int v137 = 0;
                unint64_t v130 = v137 + 4;
                while (v129 != v131)
                {
                  int v138 = *((_DWORD *)v129 - 1);
                  v129 -= 4;
                  *((_DWORD *)v137 - 1) = v138;
                  v137 -= 4;
                }
                *(void *)(a1 + 56) = v137;
                *(void *)(a1 + 64) = v130;
                *(void *)(a1 + 72) = &v136[4 * v135];
                if (v131) {
                  operator delete(v131);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v129 = 0;
                unint64_t v130 = v129 + 4;
              }
              *(void *)(a1 + 64) = v130;
              unint64_t v139 = *((void *)this + 1);
              if (v139 > 0xFFFFFFFFFFFFFFFBLL || v139 + 4 > *((void *)this + 2))
              {
LABEL_209:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v130 - 1) = *(_DWORD *)(*(void *)this + v139);
              unint64_t v127 = *((void *)this + 2);
              unint64_t v126 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v126;
            }
LABEL_210:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v154 = *(char **)(a1 + 64);
            unint64_t v153 = *(void *)(a1 + 72);
            if ((unint64_t)v154 >= v153)
            {
              v191 = (char *)*v221;
              uint64_t v192 = (v154 - (unsigned char *)*v221) >> 2;
              unint64_t v193 = v192 + 1;
              if ((unint64_t)(v192 + 1) >> 62) {
LABEL_356:
              }
                sub_1903479E8();
              uint64_t v194 = v153 - (void)v191;
              if (v194 >> 1 > v193) {
                unint64_t v193 = v194 >> 1;
              }
              if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v195 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v195 = v193;
              }
              if (v195)
              {
                v196 = (char *)sub_190347D04(v219, v195);
                v191 = *(char **)(a1 + 56);
                unint64_t v154 = *(char **)(a1 + 64);
              }
              else
              {
                v196 = 0;
              }
              v209 = &v196[4 * v192];
              *(_DWORD *)v209 = 0;
              unint64_t v142 = v209 + 4;
              while (v154 != v191)
              {
                int v210 = *((_DWORD *)v154 - 1);
                v154 -= 4;
                *((_DWORD *)v209 - 1) = v210;
                v209 -= 4;
              }
              *(void *)(a1 + 56) = v209;
              *(void *)(a1 + 64) = v142;
              *(void *)(a1 + 72) = &v196[4 * v195];
              if (v191) {
                operator delete(v191);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v154 = 0;
              unint64_t v142 = v154 + 4;
            }
            *(void *)(a1 + 64) = v142;
LABEL_336:
            unint64_t v211 = *((void *)this + 1);
            if (v211 <= 0xFFFFFFFFFFFFFFFBLL && v211 + 4 <= *((void *)this + 2))
            {
              *(v142 - 1) = *(_DWORD *)(*(void *)this + v211);
LABEL_340:
              uint64_t v27 = *((void *)this + 1) + 4;
LABEL_341:
              *((void *)this + 1) = v27;
            }
            else
            {
LABEL_338:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_342:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_342;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190379EA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 204)) {
    double result = PB::Writer::write(this, *(double *)(result + 184));
  }
  int v4 = *(float **)(v3 + 152);
  uint64_t v5 = *(float **)(v3 + 160);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  float v7 = *(float **)(v3 + 80);
  float v8 = *(float **)(v3 + 88);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  __int16 v10 = *(float **)(v3 + 8);
  float v11 = *(float **)(v3 + 16);
  while (v10 != v11)
  {
    float v12 = *v10++;
    double result = PB::Writer::write(this, v12);
  }
  uint64_t v13 = *(float **)(v3 + 32);
  char v14 = *(float **)(v3 + 40);
  while (v13 != v14)
  {
    float v15 = *v13++;
    double result = PB::Writer::write(this, v15);
  }
  char v16 = *(unsigned char *)(v3 + 204);
  if ((v16 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 192));
    char v16 = *(unsigned char *)(v3 + 204);
    if ((v16 & 8) == 0)
    {
LABEL_17:
      if ((v16 & 0x10) == 0) {
        goto LABEL_18;
      }
      goto LABEL_36;
    }
  }
  else if ((*(unsigned char *)(v3 + 204) & 8) == 0)
  {
    goto LABEL_17;
  }
  double result = PB::Writer::write(this);
  char v16 = *(unsigned char *)(v3 + 204);
  if ((v16 & 0x10) == 0)
  {
LABEL_18:
    if ((v16 & 0x20) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_36:
  double result = PB::Writer::write(this);
  if ((*(unsigned char *)(v3 + 204) & 0x20) != 0) {
LABEL_19:
  }
    double result = PB::Writer::write(this);
LABEL_20:
  unint64_t v17 = *(const PB::Base **)(v3 + 176);
  if (v17) {
    double result = PB::Writer::writeSubmessage(this, v17);
  }
  char v18 = *(float **)(v3 + 104);
  float v19 = *(float **)(v3 + 112);
  while (v18 != v19)
  {
    float v20 = *v18++;
    double result = PB::Writer::write(this, v20);
  }
  if ((*(unsigned char *)(v3 + 204) & 4) != 0) {
    double result = PB::Writer::write(this, *(float *)(v3 + 196));
  }
  unsigned int v21 = *(float **)(v3 + 128);
  unint64_t v22 = *(float **)(v3 + 136);
  while (v21 != v22)
  {
    float v23 = *v21++;
    double result = PB::Writer::write(this, v23);
  }
  int v25 = *(float **)(v3 + 56);
  float v24 = *(float **)(v3 + 64);
  while (v25 != v24)
  {
    float v26 = *v25++;
    double result = PB::Writer::write(this, v26);
  }
  return result;
}

uint64_t sub_19037A060(uint64_t result)
{
  *(void *)double result = &unk_1EDFCD110;
  *(_DWORD *)(result + 120) = 0;
  return result;
}

void sub_19037A088(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19037A0C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "biasFraction", *(float *)(a1 + 16));
    int v5 = *(_DWORD *)(a1 + 120);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cookie");
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "currentRange", *(float *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "distanceReleaseThreshold", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "distanceTriggerThreshold", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "habcBiasCorrectedDenominator", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "habcBiasCorrectedNumFramesCaptured");
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "habcBiasCorrectedNumerator", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "habcBiasCorrectedRateBaseline", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "habcBiasCorrectedRateBaselineSigma", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "habcDenominator", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "habcNumFramesCaptured");
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "habcNumerator", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "habcRateBaseline", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "habcRateBaselineSigma", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "numBaselineCaptureFrames");
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "numEffSpads", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "rateScalingFactor", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "reflectanceEstimate", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "signalDeltaNCounts", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "signalRateBaselineKcpss", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "signalRateBaselineSigmaKcpss", *(float *)(a1 + 100));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "signalRateNoiseMarginKcpss", *(float *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "signalRateSigmaKcpss", *(float *)(a1 + 108));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "signalRateTriggerThresholdNCounts", *(float *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 120);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_57:
  PB::TextFormatter::format(this, "smudgeTimeoutCountdownMs", *(float *)(a1 + 116));
  if (*(_DWORD *)(a1 + 120)) {
LABEL_28:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_29:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19037A464(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 120) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_151;
            case 2u:
              *(_DWORD *)(a1 + 120) |= 0x1000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 3u:
              *(_DWORD *)(a1 + 120) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 4u:
              *(_DWORD *)(a1 + 120) |= 0x400000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 5u:
              *(_DWORD *)(a1 + 120) |= 0x800000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 6u:
              *(_DWORD *)(a1 + 120) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 7u:
              *(_DWORD *)(a1 + 120) |= 0x2000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 8u:
              *(_DWORD *)(a1 + 120) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 9u:
              *(_DWORD *)(a1 + 120) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0xAu:
              *(_DWORD *)(a1 + 120) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0xBu:
              *(_DWORD *)(a1 + 120) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0xCu:
              *(_DWORD *)(a1 + 120) |= 0x10000u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  unint64_t v47 = v21++;
                  char v48 = *(unsigned char *)(v22 + v47);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_160:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_160;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 76) = v25;
              goto LABEL_152;
            case 0xDu:
              *(_DWORD *)(a1 + 120) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0xEu:
              *(_DWORD *)(a1 + 120) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0xFu:
              *(_DWORD *)(a1 + 120) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x10u:
              *(_DWORD *)(a1 + 120) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x11u:
              *(_DWORD *)(a1 + 120) |= 0x1000u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_166;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_165:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_165;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_166;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_166:
              *(_DWORD *)(a1 + 60) = v31;
              goto LABEL_152;
            case 0x12u:
              *(_DWORD *)(a1 + 120) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x13u:
              *(_DWORD *)(a1 + 120) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x14u:
              *(_DWORD *)(a1 + 120) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x15u:
              *(_DWORD *)(a1 + 120) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x16u:
              *(_DWORD *)(a1 + 120) |= 0x80u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_171;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_170:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_171;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_170;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_171;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_171:
              *(_DWORD *)(a1 + 40) = v37;
              goto LABEL_152;
            case 0x17u:
              *(_DWORD *)(a1 + 120) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x18u:
              *(_DWORD *)(a1 + 120) |= 0x4000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x19u:
              *(_DWORD *)(a1 + 120) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_120;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_150;
            case 0x1Au:
              *(_DWORD *)(a1 + 120) |= 4u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_176;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_175:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_175;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_176;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 20) = v43;
LABEL_152:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x1Bu:
              *(_DWORD *)(a1 + 120) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
LABEL_150:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_151:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_120:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_152;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_152;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19037AF20(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 120);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    int v4 = *(_DWORD *)(v3 + 120);
    if ((v4 & 0x1000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x1000000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x20000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x10000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x2000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_17:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x100) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_23:
    if ((v4 & 2) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 2) == 0)
  {
LABEL_24:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 4) == 0) {
      goto LABEL_27;
    }
LABEL_54:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_DWORD *)(v3 + 120) & 0x40000) == 0) {
      return result;
    }
    goto LABEL_55;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 120);
  if ((v4 & 4) != 0) {
    goto LABEL_54;
  }
LABEL_27:
  if ((v4 & 0x40000) == 0) {
    return result;
  }
LABEL_55:
  float v5 = *(float *)(v3 + 84);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19037B24C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCDF48;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_19037B274(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19037B2AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "proximityRawValue");
    char v5 = *(unsigned char *)(a1 + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "proximityState");
  if (*(unsigned char *)(a1 + 24)) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19037B350(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 24) |= 2u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          unint64_t v2 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 16) = v25;
      }
      else if (v20 == 2)
      {
        *(unsigned char *)(a1 + 24) |= 4u;
        unint64_t v27 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_66:
          unint64_t v2 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v2 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v2;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 20) = v31;
      }
      else if (v20 == 1)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19037B6D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(result + 24) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 24) & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_7:

  return PB::Writer::writeVarInt(this);
}

void *sub_19037B760(void *result)
{
  *uint64_t result = &unk_1EDFCD570;
  *(void *)((char *)result + 164) = 0;
  return result;
}

void sub_19037B788(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19037B7C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "ambientRatePerSPAD", *(float *)(a1 + 48));
    uint64_t v5 = *(void *)(a1 + 164);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_41;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "ambientRateTotal", *(float *)(a1 + 52));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "blockSelectByte");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x100) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "correctedSignalRatePerSPAD", *(float *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "estimatedAmbientBias", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "integrationTime");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "numAOPClients");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "numAperturedSPADs");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "numFullSPADs");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "oscFrequencySetting");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "oscTrim");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "pearlScanWindowOnTs");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x10000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "pearlScanWindowOpen");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "pearlScanWindownOffTs");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 4) == 0)
  {
LABEL_16:
    if ((v5 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "pearlSessionOffTs");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 8) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "pearlSessionOnTs");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "pearlSessionRunning");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "pearlSessionType");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "rawRange", *(float *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "refPhaseOffset");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "refSignalRateTotal", *(float *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "regValAmbientWindowEvents");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "regValRange");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "regValRefAmbientWindowEvents");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "regValRefRange");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "regValRefSignalTotalEvents");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "regValSignalTotalEvents");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "signalEventLimit");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "signalRatePerSPAD", *(float *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "signalRateTotal", *(float *)(a1 + 148));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x10) == 0) {
      goto LABEL_33;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "signalToAmbientWindowRatio");
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_33:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 164);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
LABEL_71:
  PB::TextFormatter::format(this, "totalRateTotal", *(float *)(a1 + 156));
  if ((*(void *)(a1 + 164) & 0x200000000) != 0) {
LABEL_35:
  }
    PB::TextFormatter::format(this, "vhvSetting");
LABEL_36:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19037BC44(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 164) |= 0x10uLL;
          unint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v20);
          uint64_t v21 = *((void *)this + 1) + 8;
          goto LABEL_392;
        case 2u:
          *(void *)(a1 + 164) |= 0x80000uLL;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v23);
          goto LABEL_391;
        case 3u:
          *(void *)(a1 + 164) |= 0x20000000uLL;
          unint64_t v24 = *((void *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v24);
          goto LABEL_391;
        case 4u:
          *(void *)(a1 + 164) |= 0x20uLL;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v25);
          goto LABEL_391;
        case 5u:
          *(void *)(a1 + 164) |= 0x40000000uLL;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_391;
        case 6u:
          *(void *)(a1 + 164) |= 0x40uLL;
          unint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v27);
          goto LABEL_391;
        case 7u:
          *(void *)(a1 + 164) |= 0x100000000uLL;
          unint64_t v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v28);
          goto LABEL_391;
        case 8u:
          *(void *)(a1 + 164) |= 0x2000uLL;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_396;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v34) = 0;
            goto LABEL_396;
          }
          char v224 = 0;
          unsigned int v225 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v226 = v29 + 1;
              char v227 = *(unsigned char *)(v31 + v29);
              *((void *)this + 1) = v226;
              v34 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                unint64_t v29 = v226;
                BOOL v14 = v225++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_396:
          *(_DWORD *)(a1 + 80) = v34;
          goto LABEL_489;
        case 9u:
          *(void *)(a1 + 164) |= 0x1000uLL;
          unint64_t v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          uint64_t v39 = *(void *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_400;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_235:
            LODWORD(v42) = 0;
            goto LABEL_400;
          }
          char v228 = 0;
          unsigned int v229 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)this + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v230 = v37 + 1;
              char v231 = *(unsigned char *)(v39 + v37);
              *((void *)this + 1) = v230;
              v42 |= (unint64_t)(v231 & 0x7F) << v228;
              if (v231 < 0)
              {
                v228 += 7;
                unint64_t v37 = v230;
                BOOL v14 = v229++ > 8;
                if (v14) {
                  goto LABEL_235;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v42) = 0;
              }
            }
            break;
          }
LABEL_400:
          *(_DWORD *)(a1 + 76) = v42;
          goto LABEL_489;
        case 0xAu:
          *(void *)(a1 + 164) |= 0x80uLL;
          unint64_t v45 = *((void *)this + 1);
          unint64_t v46 = *((void *)this + 2);
          uint64_t v47 = *(void *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_404;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v14 = v49++ > 8;
            }
            while (!v14);
LABEL_242:
            LODWORD(v50) = 0;
            goto LABEL_404;
          }
          char v232 = 0;
          unsigned int v233 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)this + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v234 = v45 + 1;
              char v235 = *(unsigned char *)(v47 + v45);
              *((void *)this + 1) = v234;
              v50 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                unint64_t v45 = v234;
                BOOL v14 = v233++ > 8;
                if (v14) {
                  goto LABEL_242;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v50) = 0;
              }
            }
            break;
          }
LABEL_404:
          *(_DWORD *)(a1 + 56) = v50;
          goto LABEL_489;
        case 0xBu:
          *(void *)(a1 + 164) |= 0x200000000uLL;
          unint64_t v53 = *((void *)this + 1);
          unint64_t v54 = *((void *)this + 2);
          uint64_t v55 = *(void *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)this + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_408;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v14 = v57++ > 8;
            }
            while (!v14);
LABEL_249:
            LODWORD(v58) = 0;
            goto LABEL_408;
          }
          char v236 = 0;
          unsigned int v237 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)this + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v238 = v53 + 1;
              char v239 = *(unsigned char *)(v55 + v53);
              *((void *)this + 1) = v238;
              v58 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                unint64_t v53 = v238;
                BOOL v14 = v237++ > 8;
                if (v14) {
                  goto LABEL_249;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v58) = 0;
              }
            }
            break;
          }
LABEL_408:
          *(_DWORD *)(a1 + 160) = v58;
          goto LABEL_489;
        case 0xCu:
          *(void *)(a1 + 164) |= 0x10000000uLL;
          unint64_t v61 = *((void *)this + 1);
          unint64_t v62 = *((void *)this + 2);
          uint64_t v63 = *(void *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)this + 1) = v61 + 1;
              char v68 = *(unsigned char *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_412;
              }
              v64 += 7;
              unint64_t v61 = v67;
              BOOL v14 = v65++ > 8;
            }
            while (!v14);
LABEL_256:
            LODWORD(v66) = 0;
            goto LABEL_412;
          }
          char v240 = 0;
          unsigned int v241 = 0;
          uint64_t v66 = 0;
          if (v62 <= v61) {
            unint64_t v62 = *((void *)this + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v242 = v61 + 1;
              char v243 = *(unsigned char *)(v63 + v61);
              *((void *)this + 1) = v242;
              v66 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                unint64_t v61 = v242;
                BOOL v14 = v241++ > 8;
                if (v14) {
                  goto LABEL_256;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v66) = 0;
              }
            }
            break;
          }
LABEL_412:
          *(_DWORD *)(a1 + 140) = v66;
          goto LABEL_489;
        case 0xDu:
          *(void *)(a1 + 164) |= 0x400uLL;
          unint64_t v69 = *((void *)this + 1);
          unint64_t v70 = *((void *)this + 2);
          uint64_t v71 = *(void *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_416;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_263:
            LODWORD(v74) = 0;
            goto LABEL_416;
          }
          char v244 = 0;
          unsigned int v245 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)this + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v246 = v69 + 1;
              char v247 = *(unsigned char *)(v71 + v69);
              *((void *)this + 1) = v246;
              v74 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                unint64_t v69 = v246;
                BOOL v14 = v245++ > 8;
                if (v14) {
                  goto LABEL_263;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_416:
          *(_DWORD *)(a1 + 68) = v74;
          goto LABEL_489;
        case 0xEu:
          *(void *)(a1 + 164) |= 0x4000uLL;
          unint64_t v77 = *((void *)this + 1);
          unint64_t v78 = *((void *)this + 2);
          uint64_t v79 = *(void *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)this + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_420;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }
            while (!v14);
LABEL_270:
            LODWORD(v82) = 0;
            goto LABEL_420;
          }
          char v248 = 0;
          unsigned int v249 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)this + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v250 = v77 + 1;
              char v251 = *(unsigned char *)(v79 + v77);
              *((void *)this + 1) = v250;
              v82 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                unint64_t v77 = v250;
                BOOL v14 = v249++ > 8;
                if (v14) {
                  goto LABEL_270;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v82) = 0;
              }
            }
            break;
          }
LABEL_420:
          *(_DWORD *)(a1 + 84) = v82;
          goto LABEL_489;
        case 0xFu:
          *(void *)(a1 + 164) |= 0x800000uLL;
          unint64_t v85 = *((void *)this + 1);
          unint64_t v86 = *((void *)this + 2);
          uint64_t v87 = *(void *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)this + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_424;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }
            while (!v14);
LABEL_277:
            LODWORD(v90) = 0;
            goto LABEL_424;
          }
          char v252 = 0;
          unsigned int v253 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)this + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v254 = v85 + 1;
              char v255 = *(unsigned char *)(v87 + v85);
              *((void *)this + 1) = v254;
              v90 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                unint64_t v85 = v254;
                BOOL v14 = v253++ > 8;
                if (v14) {
                  goto LABEL_277;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v90) = 0;
              }
            }
            break;
          }
LABEL_424:
          *(_DWORD *)(a1 + 120) = v90;
          goto LABEL_489;
        case 0x10u:
          *(void *)(a1 + 164) |= 0x2000000uLL;
          unint64_t v93 = *((void *)this + 1);
          unint64_t v94 = *((void *)this + 2);
          uint64_t v95 = *(void *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)this + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_428;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }
            while (!v14);
LABEL_284:
            LODWORD(v98) = 0;
            goto LABEL_428;
          }
          char v256 = 0;
          unsigned int v257 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)this + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v258 = v93 + 1;
              char v259 = *(unsigned char *)(v95 + v93);
              *((void *)this + 1) = v258;
              v98 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                unint64_t v93 = v258;
                BOOL v14 = v257++ > 8;
                if (v14) {
                  goto LABEL_284;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v98) = 0;
              }
            }
            break;
          }
LABEL_428:
          *(_DWORD *)(a1 + 128) = v98;
          goto LABEL_489;
        case 0x11u:
          *(void *)(a1 + 164) |= 0x8000000uLL;
          unint64_t v101 = *((void *)this + 1);
          unint64_t v102 = *((void *)this + 2);
          uint64_t v103 = *(void *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)this + 1) = v101 + 1;
              char v108 = *(unsigned char *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_432;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v14 = v105++ > 8;
            }
            while (!v14);
LABEL_291:
            LODWORD(v106) = 0;
            goto LABEL_432;
          }
          char v260 = 0;
          unsigned int v261 = 0;
          uint64_t v106 = 0;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)this + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v262 = v101 + 1;
              char v263 = *(unsigned char *)(v103 + v101);
              *((void *)this + 1) = v262;
              v106 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                unint64_t v101 = v262;
                BOOL v14 = v261++ > 8;
                if (v14) {
                  goto LABEL_291;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v106) = 0;
              }
            }
            break;
          }
LABEL_432:
          *(_DWORD *)(a1 + 136) = v106;
          goto LABEL_489;
        case 0x12u:
          *(void *)(a1 + 164) |= 0x4000000uLL;
          unint64_t v109 = *((void *)this + 1);
          unint64_t v110 = *((void *)this + 2);
          uint64_t v111 = *(void *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)this + 1) = v109 + 1;
              char v116 = *(unsigned char *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_436;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }
            while (!v14);
LABEL_298:
            LODWORD(v114) = 0;
            goto LABEL_436;
          }
          char v264 = 0;
          unsigned int v265 = 0;
          uint64_t v114 = 0;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)this + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v266 = v109 + 1;
              char v267 = *(unsigned char *)(v111 + v109);
              *((void *)this + 1) = v266;
              v114 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                unint64_t v109 = v266;
                BOOL v14 = v265++ > 8;
                if (v14) {
                  goto LABEL_298;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v114) = 0;
              }
            }
            break;
          }
LABEL_436:
          *(_DWORD *)(a1 + 132) = v114;
          goto LABEL_489;
        case 0x13u:
          *(void *)(a1 + 164) |= 0x400000uLL;
          unint64_t v117 = *((void *)this + 1);
          unint64_t v118 = *((void *)this + 2);
          uint64_t v119 = *(void *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            char v120 = 0;
            unsigned int v121 = 0;
            uint64_t v122 = 0;
            do
            {
              unint64_t v123 = v117 + 1;
              *((void *)this + 1) = v117 + 1;
              char v124 = *(unsigned char *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0) {
                goto LABEL_440;
              }
              v120 += 7;
              unint64_t v117 = v123;
              BOOL v14 = v121++ > 8;
            }
            while (!v14);
LABEL_305:
            LODWORD(v122) = 0;
            goto LABEL_440;
          }
          char v268 = 0;
          unsigned int v269 = 0;
          uint64_t v122 = 0;
          if (v118 <= v117) {
            unint64_t v118 = *((void *)this + 1);
          }
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v270 = v117 + 1;
              char v271 = *(unsigned char *)(v119 + v117);
              *((void *)this + 1) = v270;
              v122 |= (unint64_t)(v271 & 0x7F) << v268;
              if (v271 < 0)
              {
                v268 += 7;
                unint64_t v117 = v270;
                BOOL v14 = v269++ > 8;
                if (v14) {
                  goto LABEL_305;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v122) = 0;
              }
            }
            break;
          }
LABEL_440:
          *(_DWORD *)(a1 + 116) = v122;
          goto LABEL_489;
        case 0x14u:
          *(void *)(a1 + 164) |= 0x1000000uLL;
          unint64_t v125 = *((void *)this + 1);
          unint64_t v126 = *((void *)this + 2);
          uint64_t v127 = *(void *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)this + 1) = v125 + 1;
              char v132 = *(unsigned char *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_444;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }
            while (!v14);
LABEL_312:
            LODWORD(v130) = 0;
            goto LABEL_444;
          }
          char v272 = 0;
          unsigned int v273 = 0;
          uint64_t v130 = 0;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)this + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v274 = v125 + 1;
              char v275 = *(unsigned char *)(v127 + v125);
              *((void *)this + 1) = v274;
              v130 |= (unint64_t)(v275 & 0x7F) << v272;
              if (v275 < 0)
              {
                v272 += 7;
                unint64_t v125 = v274;
                BOOL v14 = v273++ > 8;
                if (v14) {
                  goto LABEL_312;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v130) = 0;
              }
            }
            break;
          }
LABEL_444:
          *(_DWORD *)(a1 + 124) = v130;
          goto LABEL_489;
        case 0x15u:
          *(void *)(a1 + 164) |= 0x80000000uLL;
          unint64_t v133 = *((void *)this + 1);
          unint64_t v134 = *((void *)this + 2);
          uint64_t v135 = *(void *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)this + 1) = v133 + 1;
              char v140 = *(unsigned char *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_448;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }
            while (!v14);
LABEL_319:
            LODWORD(v138) = 0;
            goto LABEL_448;
          }
          char v276 = 0;
          unsigned int v277 = 0;
          uint64_t v138 = 0;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)this + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v278 = v133 + 1;
              char v279 = *(unsigned char *)(v135 + v133);
              *((void *)this + 1) = v278;
              v138 |= (unint64_t)(v279 & 0x7F) << v276;
              if (v279 < 0)
              {
                v276 += 7;
                unint64_t v133 = v278;
                BOOL v14 = v277++ > 8;
                if (v14) {
                  goto LABEL_319;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v138) = 0;
              }
            }
            break;
          }
LABEL_448:
          *(_DWORD *)(a1 + 152) = v138;
          goto LABEL_489;
        case 0x16u:
          *(void *)(a1 + 164) |= 0x8000uLL;
          unint64_t v141 = *((void *)this + 1);
          unint64_t v142 = *((void *)this + 2);
          uint64_t v143 = *(void *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            char v144 = 0;
            unsigned int v145 = 0;
            uint64_t v146 = 0;
            do
            {
              unint64_t v147 = v141 + 1;
              *((void *)this + 1) = v141 + 1;
              char v148 = *(unsigned char *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0) {
                goto LABEL_452;
              }
              v144 += 7;
              unint64_t v141 = v147;
              BOOL v14 = v145++ > 8;
            }
            while (!v14);
LABEL_326:
            LODWORD(v146) = 0;
            goto LABEL_452;
          }
          char v280 = 0;
          unsigned int v281 = 0;
          uint64_t v146 = 0;
          if (v142 <= v141) {
            unint64_t v142 = *((void *)this + 1);
          }
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v282 = v141 + 1;
              char v283 = *(unsigned char *)(v143 + v141);
              *((void *)this + 1) = v282;
              v146 |= (unint64_t)(v283 & 0x7F) << v280;
              if (v283 < 0)
              {
                v280 += 7;
                unint64_t v141 = v282;
                BOOL v14 = v281++ > 8;
                if (v14) {
                  goto LABEL_326;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v146) = 0;
              }
            }
            break;
          }
LABEL_452:
          *(_DWORD *)(a1 + 88) = v146;
          goto LABEL_489;
        case 0x17u:
          *(void *)(a1 + 164) |= 0x100000uLL;
          unint64_t v149 = *((void *)this + 1);
          unint64_t v150 = *((void *)this + 2);
          uint64_t v151 = *(void *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)this + 1) = v149 + 1;
              char v156 = *(unsigned char *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_456;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v14 = v153++ > 8;
            }
            while (!v14);
LABEL_333:
            LODWORD(v154) = 0;
            goto LABEL_456;
          }
          char v284 = 0;
          unsigned int v285 = 0;
          uint64_t v154 = 0;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)this + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v286 = v149 + 1;
              char v287 = *(unsigned char *)(v151 + v149);
              *((void *)this + 1) = v286;
              v154 |= (unint64_t)(v287 & 0x7F) << v284;
              if (v287 < 0)
              {
                v284 += 7;
                unint64_t v149 = v286;
                BOOL v14 = v285++ > 8;
                if (v14) {
                  goto LABEL_333;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v154) = 0;
              }
            }
            break;
          }
LABEL_456:
          *(_DWORD *)(a1 + 108) = v154;
          goto LABEL_489;
        case 0x18u:
          *(void *)(a1 + 164) |= 0x100uLL;
          unint64_t v157 = *((void *)this + 1);
          if (v157 > 0xFFFFFFFFFFFFFFFBLL || v157 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v157);
          goto LABEL_391;
        case 0x19u:
          *(void *)(a1 + 164) |= 0x200000uLL;
          unint64_t v158 = *((void *)this + 1);
          if (v158 > 0xFFFFFFFFFFFFFFFBLL || v158 + 4 > *((void *)this + 2)) {
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v158);
          goto LABEL_391;
        case 0x1Au:
          *(void *)(a1 + 164) |= 0x200uLL;
          unint64_t v159 = *((void *)this + 1);
          if (v159 <= 0xFFFFFFFFFFFFFFFBLL && v159 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v159);
LABEL_391:
            uint64_t v21 = *((void *)this + 1) + 4;
LABEL_392:
            *((void *)this + 1) = v21;
          }
          else
          {
LABEL_165:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_489;
        case 0x1Bu:
          *(void *)(a1 + 164) |= 0x20000uLL;
          unint64_t v160 = *((void *)this + 1);
          unint64_t v161 = *((void *)this + 2);
          uint64_t v162 = *(void *)this;
          if (v160 <= 0xFFFFFFFFFFFFFFF5 && v160 + 10 <= v161)
          {
            char v163 = 0;
            unsigned int v164 = 0;
            uint64_t v165 = 0;
            do
            {
              unint64_t v166 = v160 + 1;
              *((void *)this + 1) = v160 + 1;
              char v167 = *(unsigned char *)(v162 + v160);
              v165 |= (unint64_t)(v167 & 0x7F) << v163;
              if ((v167 & 0x80) == 0) {
                goto LABEL_460;
              }
              v163 += 7;
              unint64_t v160 = v166;
              BOOL v14 = v164++ > 8;
            }
            while (!v14);
LABEL_340:
            LODWORD(v165) = 0;
            goto LABEL_460;
          }
          char v288 = 0;
          unsigned int v289 = 0;
          uint64_t v165 = 0;
          if (v161 <= v160) {
            unint64_t v161 = *((void *)this + 1);
          }
          while (2)
          {
            if (v161 == v160)
            {
              LODWORD(v165) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v290 = v160 + 1;
              char v291 = *(unsigned char *)(v162 + v160);
              *((void *)this + 1) = v290;
              v165 |= (unint64_t)(v291 & 0x7F) << v288;
              if (v291 < 0)
              {
                v288 += 7;
                unint64_t v160 = v290;
                BOOL v14 = v289++ > 8;
                if (v14) {
                  goto LABEL_340;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v165) = 0;
              }
            }
            break;
          }
LABEL_460:
          *(_DWORD *)(a1 + 96) = v165;
          goto LABEL_489;
        case 0x1Cu:
          *(void *)(a1 + 164) |= 0x40000uLL;
          unint64_t v168 = *((void *)this + 1);
          unint64_t v169 = *((void *)this + 2);
          uint64_t v170 = *(void *)this;
          if (v168 <= 0xFFFFFFFFFFFFFFF5 && v168 + 10 <= v169)
          {
            char v171 = 0;
            unsigned int v172 = 0;
            uint64_t v173 = 0;
            do
            {
              unint64_t v174 = v168 + 1;
              *((void *)this + 1) = v168 + 1;
              char v175 = *(unsigned char *)(v170 + v168);
              v173 |= (unint64_t)(v175 & 0x7F) << v171;
              if ((v175 & 0x80) == 0) {
                goto LABEL_464;
              }
              v171 += 7;
              unint64_t v168 = v174;
              BOOL v14 = v172++ > 8;
            }
            while (!v14);
LABEL_347:
            LODWORD(v173) = 0;
            goto LABEL_464;
          }
          char v292 = 0;
          unsigned int v293 = 0;
          uint64_t v173 = 0;
          if (v169 <= v168) {
            unint64_t v169 = *((void *)this + 1);
          }
          while (2)
          {
            if (v169 == v168)
            {
              LODWORD(v173) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v294 = v168 + 1;
              char v295 = *(unsigned char *)(v170 + v168);
              *((void *)this + 1) = v294;
              v173 |= (unint64_t)(v295 & 0x7F) << v292;
              if (v295 < 0)
              {
                v292 += 7;
                unint64_t v168 = v294;
                BOOL v14 = v293++ > 8;
                if (v14) {
                  goto LABEL_347;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v173) = 0;
              }
            }
            break;
          }
LABEL_464:
          *(_DWORD *)(a1 + 100) = v173;
          goto LABEL_489;
        case 0x1Du:
          *(void *)(a1 + 164) |= 0x10000uLL;
          unint64_t v176 = *((void *)this + 1);
          unint64_t v177 = *((void *)this + 2);
          uint64_t v178 = *(void *)this;
          if (v176 <= 0xFFFFFFFFFFFFFFF5 && v176 + 10 <= v177)
          {
            char v179 = 0;
            unsigned int v180 = 0;
            uint64_t v181 = 0;
            do
            {
              unint64_t v182 = v176 + 1;
              *((void *)this + 1) = v176 + 1;
              char v183 = *(unsigned char *)(v178 + v176);
              v181 |= (unint64_t)(v183 & 0x7F) << v179;
              if ((v183 & 0x80) == 0) {
                goto LABEL_468;
              }
              v179 += 7;
              unint64_t v176 = v182;
              BOOL v14 = v180++ > 8;
            }
            while (!v14);
LABEL_354:
            LODWORD(v181) = 0;
            goto LABEL_468;
          }
          char v296 = 0;
          unsigned int v297 = 0;
          uint64_t v181 = 0;
          if (v177 <= v176) {
            unint64_t v177 = *((void *)this + 1);
          }
          while (2)
          {
            if (v177 == v176)
            {
              LODWORD(v181) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v298 = v176 + 1;
              char v299 = *(unsigned char *)(v178 + v176);
              *((void *)this + 1) = v298;
              v181 |= (unint64_t)(v299 & 0x7F) << v296;
              if (v299 < 0)
              {
                v296 += 7;
                unint64_t v176 = v298;
                BOOL v14 = v297++ > 8;
                if (v14) {
                  goto LABEL_354;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v181) = 0;
              }
            }
            break;
          }
LABEL_468:
          *(_DWORD *)(a1 + 92) = v181;
          goto LABEL_489;
        case 0x1Eu:
          *(void *)(a1 + 164) |= 8uLL;
          unint64_t v184 = *((void *)this + 1);
          unint64_t v185 = *((void *)this + 2);
          uint64_t v186 = *(void *)this;
          if (v184 <= 0xFFFFFFFFFFFFFFF5 && v184 + 10 <= v185)
          {
            char v187 = 0;
            unsigned int v188 = 0;
            uint64_t v189 = 0;
            do
            {
              unint64_t v190 = v184 + 1;
              *((void *)this + 1) = v184 + 1;
              char v191 = *(unsigned char *)(v186 + v184);
              v189 |= (unint64_t)(v191 & 0x7F) << v187;
              if ((v191 & 0x80) == 0) {
                goto LABEL_472;
              }
              v187 += 7;
              unint64_t v184 = v190;
              BOOL v14 = v188++ > 8;
            }
            while (!v14);
LABEL_361:
            uint64_t v189 = 0;
            goto LABEL_472;
          }
          char v300 = 0;
          unsigned int v301 = 0;
          uint64_t v189 = 0;
          if (v185 <= v184) {
            unint64_t v185 = *((void *)this + 1);
          }
          while (2)
          {
            if (v185 == v184)
            {
              uint64_t v189 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v302 = v184 + 1;
              char v303 = *(unsigned char *)(v186 + v184);
              *((void *)this + 1) = v302;
              v189 |= (unint64_t)(v303 & 0x7F) << v300;
              if (v303 < 0)
              {
                v300 += 7;
                unint64_t v184 = v302;
                BOOL v14 = v301++ > 8;
                if (v14) {
                  goto LABEL_361;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v189 = 0;
              }
            }
            break;
          }
LABEL_472:
          *(void *)(a1 + 32) = v189;
          goto LABEL_489;
        case 0x1Fu:
          *(void *)(a1 + 164) |= 4uLL;
          unint64_t v192 = *((void *)this + 1);
          unint64_t v193 = *((void *)this + 2);
          uint64_t v194 = *(void *)this;
          if (v192 <= 0xFFFFFFFFFFFFFFF5 && v192 + 10 <= v193)
          {
            char v195 = 0;
            unsigned int v196 = 0;
            uint64_t v197 = 0;
            do
            {
              unint64_t v198 = v192 + 1;
              *((void *)this + 1) = v192 + 1;
              char v199 = *(unsigned char *)(v194 + v192);
              v197 |= (unint64_t)(v199 & 0x7F) << v195;
              if ((v199 & 0x80) == 0) {
                goto LABEL_476;
              }
              v195 += 7;
              unint64_t v192 = v198;
              BOOL v14 = v196++ > 8;
            }
            while (!v14);
LABEL_368:
            uint64_t v197 = 0;
            goto LABEL_476;
          }
          char v304 = 0;
          unsigned int v305 = 0;
          uint64_t v197 = 0;
          if (v193 <= v192) {
            unint64_t v193 = *((void *)this + 1);
          }
          while (2)
          {
            if (v193 == v192)
            {
              uint64_t v197 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v306 = v192 + 1;
              char v307 = *(unsigned char *)(v194 + v192);
              *((void *)this + 1) = v306;
              v197 |= (unint64_t)(v307 & 0x7F) << v304;
              if (v307 < 0)
              {
                v304 += 7;
                unint64_t v192 = v306;
                BOOL v14 = v305++ > 8;
                if (v14) {
                  goto LABEL_368;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v197 = 0;
              }
            }
            break;
          }
LABEL_476:
          *(void *)(a1 + 24) = v197;
          goto LABEL_489;
        case 0x20u:
          *(void *)(a1 + 164) |= 1uLL;
          unint64_t v200 = *((void *)this + 1);
          unint64_t v201 = *((void *)this + 2);
          uint64_t v202 = *(void *)this;
          if (v200 <= 0xFFFFFFFFFFFFFFF5 && v200 + 10 <= v201)
          {
            char v203 = 0;
            unsigned int v204 = 0;
            uint64_t v205 = 0;
            do
            {
              unint64_t v206 = v200 + 1;
              *((void *)this + 1) = v200 + 1;
              char v207 = *(unsigned char *)(v202 + v200);
              v205 |= (unint64_t)(v207 & 0x7F) << v203;
              if ((v207 & 0x80) == 0) {
                goto LABEL_480;
              }
              v203 += 7;
              unint64_t v200 = v206;
              BOOL v14 = v204++ > 8;
            }
            while (!v14);
LABEL_375:
            uint64_t v205 = 0;
            goto LABEL_480;
          }
          char v308 = 0;
          unsigned int v309 = 0;
          uint64_t v205 = 0;
          if (v201 <= v200) {
            unint64_t v201 = *((void *)this + 1);
          }
          while (2)
          {
            if (v201 == v200)
            {
              uint64_t v205 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v310 = v200 + 1;
              char v311 = *(unsigned char *)(v202 + v200);
              *((void *)this + 1) = v310;
              v205 |= (unint64_t)(v311 & 0x7F) << v308;
              if (v311 < 0)
              {
                v308 += 7;
                unint64_t v200 = v310;
                BOOL v14 = v309++ > 8;
                if (v14) {
                  goto LABEL_375;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v205 = 0;
              }
            }
            break;
          }
LABEL_480:
          *(void *)(a1 + 8) = v205;
          goto LABEL_489;
        case 0x21u:
          *(void *)(a1 + 164) |= 2uLL;
          unint64_t v208 = *((void *)this + 1);
          unint64_t v209 = *((void *)this + 2);
          uint64_t v210 = *(void *)this;
          if (v208 <= 0xFFFFFFFFFFFFFFF5 && v208 + 10 <= v209)
          {
            char v211 = 0;
            unsigned int v212 = 0;
            uint64_t v213 = 0;
            do
            {
              unint64_t v214 = v208 + 1;
              *((void *)this + 1) = v208 + 1;
              char v215 = *(unsigned char *)(v210 + v208);
              v213 |= (unint64_t)(v215 & 0x7F) << v211;
              if ((v215 & 0x80) == 0) {
                goto LABEL_484;
              }
              v211 += 7;
              unint64_t v208 = v214;
              BOOL v14 = v212++ > 8;
            }
            while (!v14);
LABEL_382:
            uint64_t v213 = 0;
            goto LABEL_484;
          }
          char v312 = 0;
          unsigned int v313 = 0;
          uint64_t v213 = 0;
          if (v209 <= v208) {
            unint64_t v209 = *((void *)this + 1);
          }
          while (2)
          {
            if (v209 == v208)
            {
              uint64_t v213 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v314 = v208 + 1;
              char v315 = *(unsigned char *)(v210 + v208);
              *((void *)this + 1) = v314;
              v213 |= (unint64_t)(v315 & 0x7F) << v312;
              if (v315 < 0)
              {
                v312 += 7;
                unint64_t v208 = v314;
                BOOL v14 = v313++ > 8;
                if (v14) {
                  goto LABEL_382;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v213 = 0;
              }
            }
            break;
          }
LABEL_484:
          *(void *)(a1 + 16) = v213;
          goto LABEL_489;
        case 0x22u:
          *(void *)(a1 + 164) |= 0x800uLL;
          unint64_t v216 = *((void *)this + 1);
          unint64_t v217 = *((void *)this + 2);
          uint64_t v218 = *(void *)this;
          if (v216 <= 0xFFFFFFFFFFFFFFF5 && v216 + 10 <= v217)
          {
            char v219 = 0;
            unsigned int v220 = 0;
            uint64_t v221 = 0;
            do
            {
              unint64_t v222 = v216 + 1;
              *((void *)this + 1) = v216 + 1;
              char v223 = *(unsigned char *)(v218 + v216);
              v221 |= (unint64_t)(v223 & 0x7F) << v219;
              if ((v223 & 0x80) == 0) {
                goto LABEL_488;
              }
              v219 += 7;
              unint64_t v216 = v222;
              BOOL v14 = v220++ > 8;
            }
            while (!v14);
LABEL_389:
            LODWORD(v221) = 0;
            goto LABEL_488;
          }
          char v316 = 0;
          unsigned int v317 = 0;
          uint64_t v221 = 0;
          if (v217 <= v216) {
            unint64_t v217 = *((void *)this + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_489;
      }
      while (1)
      {
        if (v217 == v216)
        {
          LODWORD(v221) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_488;
        }
        unint64_t v318 = v216 + 1;
        char v319 = *(unsigned char *)(v218 + v216);
        *((void *)this + 1) = v318;
        v221 |= (unint64_t)(v319 & 0x7F) << v316;
        if ((v319 & 0x80) == 0) {
          break;
        }
        v316 += 7;
        unint64_t v216 = v318;
        BOOL v14 = v317++ > 8;
        if (v14) {
          goto LABEL_389;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v221) = 0;
      }
LABEL_488:
      *(_DWORD *)(a1 + 72) = v221;
LABEL_489:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19037D640(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 164);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40));
    uint64_t v4 = *(void *)(v3 + 164);
    if ((v4 & 0x80000) == 0)
    {
LABEL_3:
      if ((v4 & 0x20000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_38;
    }
  }
  else if ((v4 & 0x80000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 148));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_15:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x800000) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x400000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x200) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_27:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x20000) == 0)
  {
LABEL_28:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x40000) == 0)
  {
LABEL_29:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_30:
    if ((v4 & 8) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 8) == 0)
  {
LABEL_31:
    if ((v4 & 4) == 0) {
      goto LABEL_32;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 4) == 0)
  {
LABEL_32:
    if ((v4 & 1) == 0) {
      goto LABEL_33;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 1) == 0)
  {
LABEL_33:
    if ((v4 & 2) == 0) {
      goto LABEL_34;
    }
LABEL_68:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(void *)(v3 + 164) & 0x800) == 0) {
      return result;
    }
    goto LABEL_69;
  }
LABEL_67:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 164);
  if ((v4 & 2) != 0) {
    goto LABEL_68;
  }
LABEL_34:
  if ((v4 & 0x800) == 0) {
    return result;
  }
LABEL_69:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_19037DA30(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCBAC0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_19037DA58(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19037DA90(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "proximityState");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19037DB0C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19037DD9C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_19037DE08(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD07C8;
  *(_DWORD *)(result + 28) = -1;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_19037DE38(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19037DE70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "currentMeanAngleY", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaMeanAngleY", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "doubleTapCounter");
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "doubleTapStatus");
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "entropyConcha", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "entropyTragus", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "location");
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(this, "tapInterval", *(float *)(a1 + 44));
  if (*(_WORD *)(a1 + 48)) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_11:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19037DFD4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_86;
            case 2u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_90:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_90;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 40) = v25;
              goto LABEL_102;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_95:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_95;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_96;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_96:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_102;
            case 4u:
              *(_WORD *)(a1 + 48) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_85;
            case 5u:
              *(_WORD *)(a1 + 48) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_85;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_85;
            case 7u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_85;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
LABEL_85:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_86:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_55:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_102;
            case 9u:
              *(_WORD *)(a1 + 48) |= 8u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_101;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_100:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_100;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_101;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_101:
              *(_DWORD *)(a1 + 24) = v37;
LABEL_102:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_102;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19037E59C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 48);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
    if ((*(_WORD *)(v3 + 48) & 8) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_19:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_19037E6D0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC2A0;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_19037E6F8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19037E730(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "averageFilteredPressure", *(float *)(a1 + 24));
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "deltaStepCount");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "elevationAscended");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "elevationDescended");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "isWorkoutElevationFusion");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "pressureAmplitude", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "pressureFailureState");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "pressureQuality");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "source");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  if ((*(_WORD *)(a1 + 60) & 2) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
LABEL_13:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19037E8D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_78;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_30;
            case 2u:
              *(_WORD *)(a1 + 60) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_78;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_30:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_127;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x10u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  unint64_t v61 = v21++;
                  char v62 = *(unsigned char *)(v22 + v61);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_131:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_131;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 32) = v25;
              goto LABEL_158;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_137;
                  }
                  unint64_t v65 = v27++;
                  char v66 = *(unsigned char *)(v28 + v65);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_136:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_137;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_136;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_137;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_137:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_158;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_142;
                  }
                  unint64_t v69 = v33++;
                  char v70 = *(unsigned char *)(v34 + v69);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_141:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_142;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_141;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_142;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_142:
              *(_DWORD *)(a1 + 52) = v37;
              goto LABEL_158;
            case 6u:
              *(_WORD *)(a1 + 60) |= 8u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_147;
                  }
                  unint64_t v73 = v39++;
                  char v74 = *(unsigned char *)(v40 + v73);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_146:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_147;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_146;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_147;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_147:
              *(_DWORD *)(a1 + 28) = v43;
              goto LABEL_158;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_78;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_126;
            case 8u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_152;
                  }
                  unint64_t v77 = v45++;
                  char v78 = *(unsigned char *)(v46 + v77);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_151:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_152;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_151;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_152;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_152:
              *(_DWORD *)(a1 + 48) = v49;
              goto LABEL_158;
            case 9u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_157;
                  }
                  unint64_t v81 = v51++;
                  char v82 = *(unsigned char *)(v52 + v81);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_156:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_156;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_157;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 44) = v55;
LABEL_158:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_126:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_127:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_78:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_158;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v58 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v57 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v58 = v57 != 0;
              }
              *(unsigned char *)(a1 + 56) = v58;
              goto LABEL_158;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_158;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19037F13C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
    if ((*(_WORD *)(v3 + 60) & 0x400) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x400) == 0) {
    return result;
  }
LABEL_23:

  return PB::Writer::write(this);
}

uint64_t sub_19037F2A8(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCE8B0;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_19037F2D0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19037F308(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "altitudeDelta", *(float *)(a1 + 48));
    int v5 = *(_DWORD *)(a1 + 92);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "altitudeDeltaStreaming", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "deltaTime", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x8000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "didEstimate");
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "downhillStartTime", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "elevationAscended");
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "elevationDescended");
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "gradeType");
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "heightRef", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "isWorkoutElevationFusion");
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "predictionError", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "predictionIntercept", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "source");
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "timeDeltaStreaming", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_37:
  PB::TextFormatter::format(this, "timeRef", *(double *)(a1 + 40));
  if ((*(_DWORD *)(a1 + 92) & 0x4000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(this, "verticalSpeed", *(float *)(a1 + 84));
LABEL_19:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19037F56C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 92) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_81;
            case 2u:
              *(_DWORD *)(a1 + 92) |= 2u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_129;
                  }
                  unint64_t v51 = v21++;
                  char v52 = *(unsigned char *)(v22 + v51);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_128:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_128;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_129;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_129:
              *(void *)(a1 + 16) = v25;
              goto LABEL_145;
            case 3u:
              *(_DWORD *)(a1 + 92) |= 4u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_134;
                  }
                  unint64_t v55 = v27++;
                  char v56 = *(unsigned char *)(v28 + v55);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_133:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_134;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_133;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_134;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_134:
              *(void *)(a1 + 24) = v31;
              goto LABEL_145;
            case 4u:
              *(_DWORD *)(a1 + 92) |= 0x1000u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_139;
                  }
                  unint64_t v59 = v33++;
                  char v60 = *(unsigned char *)(v34 + v59);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_138:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_139;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_138;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_139;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_139:
              *(_DWORD *)(a1 + 76) = v37;
              goto LABEL_145;
            case 5u:
              *(_DWORD *)(a1 + 92) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 6u:
              *(_DWORD *)(a1 + 92) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 7u:
              *(_DWORD *)(a1 + 92) |= 0x100u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_144;
                  }
                  unint64_t v63 = v39++;
                  char v64 = *(unsigned char *)(v40 + v63);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_143:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_144;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_143;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_144;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_144:
              *(_DWORD *)(a1 + 60) = v43;
LABEL_145:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 8u:
              *(_DWORD *)(a1 + 92) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 9u:
              *(_DWORD *)(a1 + 92) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *(unsigned char *)(a1 + 88) = v46;
              goto LABEL_145;
            case 0xAu:
              *(_DWORD *)(a1 + 92) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 0xBu:
              *(_DWORD *)(a1 + 92) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_81;
            case 0xCu:
              *(_DWORD *)(a1 + 92) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 0xDu:
              *(_DWORD *)(a1 + 92) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 0xEu:
              *(_DWORD *)(a1 + 92) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_81:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_124;
            case 0xFu:
              *(_DWORD *)(a1 + 92) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_87;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_123;
            case 0x10u:
              *(_DWORD *)(a1 + 92) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
LABEL_123:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_124:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_87:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_145;
            case 0x11u:
              *(_DWORD *)(a1 + 92) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 89) = v48;
              goto LABEL_145;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_145;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19037FDE0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 92);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    int v4 = *(_DWORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x8000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_15:
    if ((v4 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_16:
    if ((v4 & 0x800) == 0) {
      goto LABEL_17;
    }
LABEL_34:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
    if ((*(_DWORD *)(v3 + 92) & 0x10000) == 0) {
      return result;
    }
    goto LABEL_35;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 92);
  if ((v4 & 0x800) != 0) {
    goto LABEL_34;
  }
LABEL_17:
  if ((v4 & 0x10000) == 0) {
    return result;
  }
LABEL_35:

  return PB::Writer::write(this);
}

uint64_t sub_19037FFF4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2C40;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_190380018(PB::Base *this)
{
  *(void *)this = &unk_1EDFC2C40;
  uint64_t v4 = *((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *unint64_t v2 = 0;
  if (v4) {
    sub_1903478E8((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

void sub_19038007C(PB::Base *a1)
{
  sub_190380018(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903800B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(unsigned char *)(a1 + 32) & 4) != 0) {
    PB::TextFormatter::format(this, "active");
  }
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format();
  }
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "threshold", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190380164(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 32) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
                goto LABEL_30;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v20);
              uint64_t v21 = *((void *)this + 1) + 8;
              goto LABEL_36;
            case 2u:
              operator new();
            case 3u:
              *(unsigned char *)(a1 + 32) |= 2u;
              unint64_t v23 = *((void *)this + 1);
              if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v23);
                uint64_t v21 = *((void *)this + 1) + 4;
LABEL_36:
                *((void *)this + 1) = v21;
              }
              else
              {
LABEL_30:
                *((unsigned char *)this + 24) = 1;
              }
LABEL_37:
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *(unsigned char *)(a1 + 32) |= 4u;
              unint64_t v24 = *((void *)this + 1);
              if (v24 >= *((void *)this + 2))
              {
                BOOL v27 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                unint64_t v25 = v24 + 1;
                int v26 = *(unsigned __int8 *)(*(void *)this + v24);
                *((void *)this + 1) = v25;
                BOOL v27 = v26 != 0;
              }
              *(unsigned char *)(a1 + 28) = v27;
              goto LABEL_37;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              goto LABEL_37;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19038041C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 32)) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
  }
  if (*(void *)(v3 + 8)) {
    uint64_t result = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
    char v4 = *(unsigned char *)(v3 + 32);
  }
  if ((v4 & 4) != 0)
  {
    return PB::Writer::write(this);
  }
  return result;
}

uint64_t sub_1903804B4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCBE78;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1903804DC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190380514(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "state");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190380574(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903807AC(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903807CC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCDA08;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_1903807F4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19038082C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "doingBiasEstimation");
    int v5 = *(_DWORD *)(a1 + 96);
    if ((v5 & 0x20000) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "doingYawCorrection");
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "magneticFieldCalibrationLevel");
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "magneticFieldX", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "magneticFieldY", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "magneticFieldZ", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "quaternionW", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 2) == 0)
  {
LABEL_9:
    if ((v5 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "quaternionX", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 4) == 0)
  {
LABEL_10:
    if ((v5 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "quaternionY", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_11:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "quaternionZ", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_12:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "rotationRateX", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_13:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "rotationRateY", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x800) == 0)
  {
LABEL_14:
    if ((v5 & 0x10) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "rotationRateZ", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "userAccelerationX", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "userAccelerationY", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 96);
  if ((v5 & 0x4000) == 0)
  {
LABEL_18:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_39:
  PB::TextFormatter::format(this, "userAccelerationZ", *(float *)(a1 + 84));
  if ((*(_DWORD *)(a1 + 96) & 0x8000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "variant");
LABEL_20:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190380AB0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 96) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_DWORD *)(a1 + 96) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 3u:
              *(_DWORD *)(a1 + 96) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 4u:
              *(_DWORD *)(a1 + 96) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 5u:
              *(_DWORD *)(a1 + 96) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_39:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_105;
            case 6u:
              *(_DWORD *)(a1 + 96) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 7u:
              *(_DWORD *)(a1 + 96) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 8u:
              *(_DWORD *)(a1 + 96) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 9u:
              *(_DWORD *)(a1 + 96) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 0xAu:
              *(_DWORD *)(a1 + 96) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 0xBu:
              *(_DWORD *)(a1 + 96) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 0xCu:
              *(_DWORD *)(a1 + 96) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 0xDu:
              *(_DWORD *)(a1 + 96) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_104;
            case 0xEu:
              *(_DWORD *)(a1 + 96) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
LABEL_104:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_105:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_66:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_116;
            case 0xFu:
              *(_DWORD *)(a1 + 96) |= 0x20u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_110;
                  }
                  unint64_t v39 = v21++;
                  char v40 = *(unsigned char *)(v22 + v39);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_109:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_109;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_110;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_116;
            case 0x10u:
              *(_DWORD *)(a1 + 96) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 92) = v28;
              goto LABEL_116;
            case 0x11u:
              *(_DWORD *)(a1 + 96) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 93) = v30;
              goto LABEL_116;
            case 0x12u:
              *(_DWORD *)(a1 + 96) |= 0x8000u;
              unint64_t v31 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v32 = *(void *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v35 = 0;
                if (v2 <= v31) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  unint64_t v43 = v31++;
                  char v44 = *(unsigned char *)(v32 + v43);
                  *((void *)this + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  BOOL v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_114:
                    unint64_t v2 = v43 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_114;
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              do
              {
                unint64_t v2 = v31 + 1;
                *((void *)this + 1) = v31 + 1;
                char v36 = *(unsigned char *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_115;
                }
                v33 += 7;
                unint64_t v31 = v2;
                BOOL v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_115:
              *(_DWORD *)(a1 + 88) = v35;
LABEL_116:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_116;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903811F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 96);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40));
    int v4 = *(_DWORD *)(v3 + 96);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x1000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x40) == 0)
  {
LABEL_13:
    if ((v4 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x80) == 0)
  {
LABEL_14:
    if ((v4 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_15:
    if ((v4 & 0x20) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x10000) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    uint64_t result = PB::Writer::write(this);
    if ((*(_DWORD *)(v3 + 96) & 0x8000) == 0) {
      return result;
    }
    goto LABEL_37;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 96);
  if ((v4 & 0x20000) != 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((v4 & 0x8000) == 0) {
    return result;
  }
LABEL_37:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_190381428(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCEED0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_190381454(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

float sub_19038148C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDFCEED0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (*(unsigned char *)(a2 + 16))
  {
    int v3 = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = 1;
    *(_DWORD *)(a1 + 8) = v3;
    char v2 = 3;
    if ((*(unsigned char *)(a2 + 16) & 2) == 0) {
      return result;
    }
    goto LABEL_5;
  }
  char v2 = 2;
  if ((*(unsigned char *)(a2 + 16) & 2) != 0)
  {
LABEL_5:
    float result = *(float *)(a2 + 12);
    *(unsigned char *)(a1 + 16) = v2;
    *(float *)(a1 + 12) = result;
  }
  return result;
}

uint64_t sub_1903814F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 16);
  if (v5)
  {
    PB::TextFormatter::format(this, "name");
    char v5 = *(unsigned char *)(a1 + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "value", *(float *)(a1 + 12));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190381570(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 16) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 4;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190381800(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 16);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 12);
    return PB::Writer::write(this, v5);
  }
  return result;
}

uint64_t sub_19038186C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCFB10;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_190381894(void **a1)
{
  *a1 = &unk_1EDFCFB10;
  unint64_t v2 = a1 + 1;
  sub_190347828(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_1903818F0(void **a1)
{
  *a1 = &unk_1EDFCFB10;
  uint64_t v3 = a1 + 1;
  sub_190347828(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x192FCC980]();
}

uint64_t sub_190381960(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  float v5 = *(uint64_t **)(a1 + 8);
  float v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "blendShapeCoefficients");
  }
  char v8 = *(unsigned char *)(a1 + 48);
  if (v8)
  {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 32));
    char v8 = *(unsigned char *)(a1 + 48);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190381A38(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *(unsigned char *)(a1 + 48) |= 2u;
        unint64_t v22 = *((void *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
          goto LABEL_30;
        }
        *(void *)(a1 + 40) = *(void *)(*(void *)this + v22);
LABEL_34:
        *((void *)this + 1) += 8;
        goto LABEL_35;
      }
      if (v20 == 1) {
        sub_190381C94();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
LABEL_35:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    *(unsigned char *)(a1 + 48) |= 1u;
    unint64_t v21 = *((void *)this + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)this + 2))
    {
LABEL_30:
      *((unsigned char *)this + 24) = 1;
      goto LABEL_35;
    }
    *(void *)(a1 + 32) = *(void *)(*(void *)this + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

void sub_190381C94()
{
}

void sub_190381DB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190347EEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_190381DF4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base ***)(result + 8);
  float v5 = *(const PB::Base ***)(result + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6);
  }
  char v7 = *(unsigned char *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
    char v7 = *(unsigned char *)(v3 + 48);
  }
  if (v7)
  {
    double v8 = *(double *)(v3 + 32);
    return PB::Writer::write(this, v8);
  }
  return result;
}

uint64_t sub_190381E8C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB2A8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_190381EB4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190381EEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "isCovered");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190381F68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *(unsigned char *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190382150(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(this);
  }
  return result;
}

double sub_1903821BC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC1D68;
  *(_DWORD *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1903821F0(PB::Base *this)
{
  *(void *)this = &unk_1EDFC1D68;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_190382264(PB::Base *a1)
{
  sub_1903821F0(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19038229C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(float **)(a1 + 32);
  float v6 = *(float **)(a1 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "accel", v7);
  }
  uint64_t v8 = *(float **)(a1 + 8);
  char v9 = *(float **)(a1 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "accelFiltered", v10);
  }
  __int16 v11 = *(_WORD *)(a1 + 96);
  if (v11)
  {
    PB::TextFormatter::format(this, "faceDownLookbackTimestamp", *(double *)(a1 + 56));
    __int16 v11 = *(_WORD *)(a1 + 96);
    if ((v11 & 4) == 0)
    {
LABEL_7:
      if ((v11 & 8) == 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
  }
  else if ((v11 & 4) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "faceDownState");
  __int16 v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 8) == 0)
  {
LABEL_8:
    if ((v11 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "gravityAngle", *(float *)(a1 + 76));
  __int16 v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 0x10) == 0)
  {
LABEL_9:
    if ((v11 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "gravityAngleVar", *(float *)(a1 + 80));
  __int16 v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 0x80) == 0)
  {
LABEL_10:
    if ((v11 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isFaceDown");
  __int16 v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 0x20) == 0)
  {
LABEL_11:
    if ((v11 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 84));
  __int16 v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 0x40) == 0)
  {
LABEL_12:
    if ((v11 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "pocketProbabilityVar", *(float *)(a1 + 88));
  __int16 v11 = *(_WORD *)(a1 + 96);
  if ((v11 & 0x100) == 0)
  {
LABEL_13:
    if ((v11 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_25:
  PB::TextFormatter::format(this, "shouldSuppress");
  if ((*(_WORD *)(a1 + 96) & 2) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
LABEL_15:

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190382468(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    float v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 96) |= 2u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v25);
          goto LABEL_102;
        case 2u:
          if (v24 != 2)
          {
            unint64_t v77 = *(char **)(a1 + 40);
            unint64_t v76 = *(void *)(a1 + 48);
            if ((unint64_t)v77 >= v76)
            {
              unint64_t v85 = (char *)*v10;
              uint64_t v86 = (v77 - (unsigned char *)*v10) >> 2;
              unint64_t v87 = v86 + 1;
              if ((unint64_t)(v86 + 1) >> 62) {
LABEL_170:
              }
                sub_1903479E8();
              uint64_t v88 = v76 - (void)v85;
              if (v88 >> 1 > v87) {
                unint64_t v87 = v88 >> 1;
              }
              if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v89 = v87;
              }
              if (v89)
              {
                uint64_t v90 = (char *)sub_190347D04(v11, v89);
                unint64_t v85 = *(char **)(a1 + 32);
                unint64_t v77 = *(char **)(a1 + 40);
              }
              else
              {
                uint64_t v90 = 0;
              }
              unsigned int v97 = &v90[4 * v86];
              *(_DWORD *)unsigned int v97 = 0;
              char v78 = v97 + 4;
              while (v77 != v85)
              {
                int v98 = *((_DWORD *)v77 - 1);
                v77 -= 4;
                *((_DWORD *)v97 - 1) = v98;
                v97 -= 4;
              }
              *(void *)(a1 + 32) = v97;
              *(void *)(a1 + 40) = v78;
              *(void *)(a1 + 48) = &v90[4 * v89];
              if (v85) {
                operator delete(v85);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v77 = 0;
              char v78 = v77 + 4;
            }
            *(void *)(a1 + 40) = v78;
            goto LABEL_154;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v26 = *((void *)this + 1);
          unint64_t v27 = *((void *)this + 2);
          while (v26 < v27 && !*((unsigned char *)this + 24))
          {
            unint64_t v29 = *(char **)(a1 + 40);
            unint64_t v28 = *(void *)(a1 + 48);
            if ((unint64_t)v29 >= v28)
            {
              unint64_t v31 = (char *)*v10;
              uint64_t v32 = (v29 - (unsigned char *)*v10) >> 2;
              unint64_t v33 = v32 + 1;
              if ((unint64_t)(v32 + 1) >> 62) {
                goto LABEL_170;
              }
              uint64_t v34 = v28 - (void)v31;
              if (v34 >> 1 > v33) {
                unint64_t v33 = v34 >> 1;
              }
              if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v33;
              }
              if (v35)
              {
                char v36 = (char *)sub_190347D04(v11, v35);
                unint64_t v31 = *(char **)(a1 + 32);
                unint64_t v29 = *(char **)(a1 + 40);
              }
              else
              {
                char v36 = 0;
              }
              char v37 = &v36[4 * v32];
              *(_DWORD *)char v37 = 0;
              char v30 = v37 + 4;
              while (v29 != v31)
              {
                int v38 = *((_DWORD *)v29 - 1);
                v29 -= 4;
                *((_DWORD *)v37 - 1) = v38;
                v37 -= 4;
              }
              *(void *)(a1 + 32) = v37;
              *(void *)(a1 + 40) = v30;
              *(void *)(a1 + 48) = &v36[4 * v35];
              if (v31) {
                operator delete(v31);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v29 = 0;
              char v30 = v29 + 4;
            }
            *(void *)(a1 + 40) = v30;
            unint64_t v39 = *((void *)this + 1);
            if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
              goto LABEL_118;
            }
            *(v30 - 1) = *(_DWORD *)(*(void *)this + v39);
            unint64_t v27 = *((void *)this + 2);
            unint64_t v26 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v26;
          }
          goto LABEL_119;
        case 3u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v40 = *((void *)this + 1);
            unint64_t v41 = *((void *)this + 2);
            while (v40 < v41 && !*((unsigned char *)this + 24))
            {
              unint64_t v43 = *(char **)(a1 + 16);
              unint64_t v42 = *(void *)(a1 + 24);
              if ((unint64_t)v43 >= v42)
              {
                int v45 = (char *)*v8;
                uint64_t v46 = (v43 - (unsigned char *)*v8) >> 2;
                unint64_t v47 = v46 + 1;
                if ((unint64_t)(v46 + 1) >> 62) {
                  goto LABEL_171;
                }
                uint64_t v48 = v42 - (void)v45;
                if (v48 >> 1 > v47) {
                  unint64_t v47 = v48 >> 1;
                }
                if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v49 = v47;
                }
                if (v49)
                {
                  unsigned int v50 = (char *)sub_190347D04(v9, v49);
                  int v45 = *(char **)(a1 + 8);
                  unint64_t v43 = *(char **)(a1 + 16);
                }
                else
                {
                  unsigned int v50 = 0;
                }
                unint64_t v51 = &v50[4 * v46];
                *(_DWORD *)unint64_t v51 = 0;
                char v44 = v51 + 4;
                while (v43 != v45)
                {
                  int v52 = *((_DWORD *)v43 - 1);
                  v43 -= 4;
                  *((_DWORD *)v51 - 1) = v52;
                  v51 -= 4;
                }
                *(void *)(a1 + 8) = v51;
                *(void *)(a1 + 16) = v44;
                *(void *)(a1 + 24) = &v50[4 * v49];
                if (v45) {
                  operator delete(v45);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v43 = 0;
                char v44 = v43 + 4;
              }
              *(void *)(a1 + 16) = v44;
              unint64_t v53 = *((void *)this + 1);
              if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)this + 2))
              {
LABEL_118:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v44 - 1) = *(_DWORD *)(*(void *)this + v53);
              unint64_t v41 = *((void *)this + 2);
              unint64_t v40 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v40;
            }
LABEL_119:
            PB::Reader::recallMark();
          }
          else
          {
            unsigned int v80 = *(char **)(a1 + 16);
            unint64_t v79 = *(void *)(a1 + 24);
            if ((unint64_t)v80 >= v79)
            {
              unint64_t v91 = (char *)*v8;
              uint64_t v92 = (v80 - (unsigned char *)*v8) >> 2;
              unint64_t v93 = v92 + 1;
              if ((unint64_t)(v92 + 1) >> 62) {
LABEL_171:
              }
                sub_1903479E8();
              uint64_t v94 = v79 - (void)v91;
              if (v94 >> 1 > v93) {
                unint64_t v93 = v94 >> 1;
              }
              if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v95 = v93;
              }
              if (v95)
              {
                char v96 = (char *)sub_190347D04(v9, v95);
                unint64_t v91 = *(char **)(a1 + 8);
                unsigned int v80 = *(char **)(a1 + 16);
              }
              else
              {
                char v96 = 0;
              }
              unint64_t v99 = &v96[4 * v92];
              *(_DWORD *)unint64_t v99 = 0;
              char v78 = v99 + 4;
              while (v80 != v91)
              {
                int v100 = *((_DWORD *)v80 - 1);
                v80 -= 4;
                *((_DWORD *)v99 - 1) = v100;
                v99 -= 4;
              }
              *(void *)(a1 + 8) = v99;
              *(void *)(a1 + 16) = v78;
              *(void *)(a1 + 24) = &v96[4 * v95];
              if (v91) {
                operator delete(v91);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v80 = 0;
              char v78 = v80 + 4;
            }
            *(void *)(a1 + 16) = v78;
LABEL_154:
            unint64_t v101 = *((void *)this + 1);
            if (v101 <= 0xFFFFFFFFFFFFFFFBLL && v101 + 4 <= *((void *)this + 2))
            {
              *(v78 - 1) = *(_DWORD *)(*(void *)this + v101);
LABEL_158:
              uint64_t v75 = *((void *)this + 1) + 4;
LABEL_159:
              *((void *)this + 1) = v75;
            }
            else
            {
LABEL_156:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_160:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(_WORD *)(a1 + 96) |= 8u;
          unint64_t v54 = *((void *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v54);
          goto LABEL_158;
        case 5u:
          *(_WORD *)(a1 + 96) |= 0x10u;
          unint64_t v55 = *((void *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v55);
          goto LABEL_158;
        case 6u:
          *(_WORD *)(a1 + 96) |= 0x80u;
          unint64_t v56 = *((void *)this + 1);
          if (v56 >= *((void *)this + 2))
          {
            BOOL v59 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v57 = v56 + 1;
            int v58 = *(unsigned __int8 *)(*(void *)this + v56);
            *((void *)this + 1) = v57;
            BOOL v59 = v58 != 0;
          }
          *(unsigned char *)(a1 + 92) = v59;
          goto LABEL_160;
        case 7u:
          *(_WORD *)(a1 + 96) |= 0x100u;
          unint64_t v60 = *((void *)this + 1);
          if (v60 >= *((void *)this + 2))
          {
            BOOL v63 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v61 = v60 + 1;
            int v62 = *(unsigned __int8 *)(*(void *)this + v60);
            *((void *)this + 1) = v61;
            BOOL v63 = v62 != 0;
          }
          *(unsigned char *)(a1 + 93) = v63;
          goto LABEL_160;
        case 8u:
          *(_WORD *)(a1 + 96) |= 4u;
          unint64_t v64 = *((void *)this + 1);
          unint64_t v65 = *((void *)this + 2);
          uint64_t v66 = *(void *)this;
          if (v64 <= 0xFFFFFFFFFFFFFFF5 && v64 + 10 <= v65)
          {
            char v67 = 0;
            unsigned int v68 = 0;
            uint64_t v69 = 0;
            do
            {
              unint64_t v70 = v64 + 1;
              *((void *)this + 1) = v64 + 1;
              char v71 = *(unsigned char *)(v66 + v64);
              v69 |= (unint64_t)(v71 & 0x7F) << v67;
              if ((v71 & 0x80) == 0) {
                goto LABEL_139;
              }
              v67 += 7;
              unint64_t v64 = v70;
              BOOL v18 = v68++ > 8;
            }
            while (!v18);
LABEL_117:
            LODWORD(v69) = 0;
            goto LABEL_139;
          }
          char v81 = 0;
          unsigned int v82 = 0;
          uint64_t v69 = 0;
          if (v65 <= v64) {
            unint64_t v65 = *((void *)this + 1);
          }
          while (2)
          {
            if (v65 == v64)
            {
              LODWORD(v69) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v83 = v64 + 1;
              char v84 = *(unsigned char *)(v66 + v64);
              *((void *)this + 1) = v83;
              v69 |= (unint64_t)(v84 & 0x7F) << v81;
              if (v84 < 0)
              {
                v81 += 7;
                unint64_t v64 = v83;
                BOOL v18 = v82++ > 8;
                if (v18) {
                  goto LABEL_117;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v69) = 0;
              }
            }
            break;
          }
LABEL_139:
          *(_DWORD *)(a1 + 72) = v69;
          goto LABEL_160;
        case 9u:
          *(_WORD *)(a1 + 96) |= 0x20u;
          unint64_t v72 = *((void *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v72);
          goto LABEL_158;
        case 0xAu:
          *(_WORD *)(a1 + 96) |= 0x40u;
          unint64_t v73 = *((void *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v73);
          goto LABEL_158;
        case 0xBu:
          *(_WORD *)(a1 + 96) |= 1u;
          unint64_t v74 = *((void *)this + 1);
          if (v74 > 0xFFFFFFFFFFFFFFF7 || v74 + 8 > *((void *)this + 2)) {
            goto LABEL_156;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v74);
LABEL_102:
          uint64_t v75 = *((void *)this + 1) + 8;
          goto LABEL_159;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_160;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190382CA8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(_WORD *)(result + 96) & 2) != 0) {
    double result = PB::Writer::write(this, *(double *)(result + 64));
  }
  int v4 = *(float **)(v3 + 32);
  char v5 = *(float **)(v3 + 40);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  float v7 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 8) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 76));
    __int16 v10 = *(_WORD *)(v3 + 96);
    if ((v10 & 0x10) == 0)
    {
LABEL_11:
      if ((v10 & 0x80) == 0) {
        goto LABEL_12;
      }
      goto LABEL_20;
    }
  }
  else if ((v10 & 0x10) == 0)
  {
    goto LABEL_11;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 80));
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x80) == 0)
  {
LABEL_12:
    if ((v10 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }
LABEL_20:
  double result = PB::Writer::write(this);
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x100) == 0)
  {
LABEL_13:
    if ((v10 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = PB::Writer::write(this);
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 4) == 0)
  {
LABEL_14:
    if ((v10 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = PB::Writer::writeVarInt(this);
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x20) == 0)
  {
LABEL_15:
    if ((v10 & 0x40) == 0) {
      goto LABEL_16;
    }
LABEL_24:
    double result = PB::Writer::write(this, *(float *)(v3 + 88));
    if ((*(_WORD *)(v3 + 96) & 1) == 0) {
      return result;
    }
    goto LABEL_25;
  }
LABEL_23:
  double result = PB::Writer::write(this, *(float *)(v3 + 84));
  __int16 v10 = *(_WORD *)(v3 + 96);
  if ((v10 & 0x40) != 0) {
    goto LABEL_24;
  }
LABEL_16:
  if ((v10 & 1) == 0) {
    return result;
  }
LABEL_25:
  double v11 = *(double *)(v3 + 56);

  return PB::Writer::write(this, v11);
}

uint64_t sub_190382E24(uint64_t result)
{
  *(void *)double result = &unk_1EDFD0640;
  *(_DWORD *)(result + 136) = 0;
  return result;
}

void sub_190382E4C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190382E84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "aperture", *(float *)(a1 + 24));
    int v5 = *(_DWORD *)(a1 + 136);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_38;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "ev", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "exposureDuration", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "failureCode");
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "gaze_x", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "gaze_y", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "gaze_z", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "iso", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "left_eye_x", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "left_eye_y", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "left_eye_z", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "lidAngle", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x8000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "lux", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "orientation");
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20000) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "poseLibrary");
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40000) == 0)
  {
LABEL_18:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "qw", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80000) == 0)
  {
LABEL_19:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "qx", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100000) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "qy", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200000) == 0)
  {
LABEL_21:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "qz", *(float *)(a1 + 100));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400000) == 0)
  {
LABEL_22:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "right_eye_x", *(float *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "right_eye_y", *(float *)(a1 + 108));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v5 & 1) == 0) {
      goto LABEL_25;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "right_eye_z", *(float *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 1) == 0)
  {
LABEL_25:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "rollValue", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_26:
    if ((v5 & 2) == 0) {
      goto LABEL_27;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "sensorCovered");
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 2) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "tooDark");
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "type");
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
LABEL_65:
  PB::TextFormatter::format(this, "y", *(float *)(a1 + 124));
  if ((*(_DWORD *)(a1 + 136) & 0x10000000) != 0) {
LABEL_32:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 128));
LABEL_33:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903832A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 136) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 2u:
              *(_DWORD *)(a1 + 136) |= 0x2000000u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_176;
                  }
                  unint64_t v51 = v21++;
                  char v52 = *(unsigned char *)(v22 + v51);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_175:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_176;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_175;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_176;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_176:
              *(_DWORD *)(a1 + 116) = v25;
              goto LABEL_167;
            case 3u:
              *(_DWORD *)(a1 + 136) |= 0x10000u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_181;
                  }
                  unint64_t v55 = v27++;
                  char v56 = *(unsigned char *)(v28 + v55);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_180:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_181;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_180;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_181;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_181:
              *(_DWORD *)(a1 + 80) = v31;
              goto LABEL_167;
            case 4u:
              *(_DWORD *)(a1 + 136) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 5u:
              *(_DWORD *)(a1 + 136) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 6u:
              *(_DWORD *)(a1 + 136) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 7u:
              *(_DWORD *)(a1 + 136) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 8u:
              *(_DWORD *)(a1 + 136) |= 0x4000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 9u:
              *(_DWORD *)(a1 + 136) |= 0x8000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0xAu:
              *(_DWORD *)(a1 + 136) |= 0x10000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0xBu:
              *(_DWORD *)(a1 + 136) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0xCu:
              *(_DWORD *)(a1 + 136) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0xDu:
              *(_DWORD *)(a1 + 136) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0xEu:
              *(_DWORD *)(a1 + 136) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0xFu:
              *(_DWORD *)(a1 + 136) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x10u:
              *(_DWORD *)(a1 + 136) |= 0x20000u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_186;
                  }
                  unint64_t v59 = v33++;
                  char v60 = *(unsigned char *)(v34 + v59);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_185:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_186;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_185;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_186;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_186:
              *(_DWORD *)(a1 + 84) = v37;
              goto LABEL_167;
            case 0x11u:
              *(_DWORD *)(a1 + 136) |= 0x40u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_191;
                  }
                  unint64_t v63 = v39++;
                  char v64 = *(unsigned char *)(v40 + v63);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_190:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_191;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_190;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_191;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_191:
              *(_DWORD *)(a1 + 40) = v43;
LABEL_167:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x12u:
              *(_DWORD *)(a1 + 136) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_94:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_166;
            case 0x13u:
              *(_DWORD *)(a1 + 136) |= 0x40000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *(unsigned char *)(a1 + 133) = v46;
              goto LABEL_167;
            case 0x14u:
              *(_DWORD *)(a1 + 136) |= 0x20000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 132) = v48;
              goto LABEL_167;
            case 0x15u:
              *(_DWORD *)(a1 + 136) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x16u:
              *(_DWORD *)(a1 + 136) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x17u:
              *(_DWORD *)(a1 + 136) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x18u:
              *(_DWORD *)(a1 + 136) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x19u:
              *(_DWORD *)(a1 + 136) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x1Au:
              *(_DWORD *)(a1 + 136) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x1Bu:
              *(_DWORD *)(a1 + 136) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x1Cu:
              *(_DWORD *)(a1 + 136) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x1Du:
              *(_DWORD *)(a1 + 136) |= 0x400000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x1Eu:
              *(_DWORD *)(a1 + 136) |= 0x800000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_131;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_165;
            case 0x1Fu:
              *(_DWORD *)(a1 + 136) |= 0x1000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
LABEL_165:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_166:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_131:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_167;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_167;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190383E74(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 136);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    int v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x2000000) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x2000000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200000) == 0)
  {
LABEL_7:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 1) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) == 0)
  {
LABEL_25:
    if ((v4 & 0x200) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x200) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_28:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_29:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_31;
    }
LABEL_62:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
    if ((*(_DWORD *)(v3 + 136) & 0x1000000) == 0) {
      return result;
    }
    goto LABEL_63;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800000) != 0) {
    goto LABEL_62;
  }
LABEL_31:
  if ((v4 & 0x1000000) == 0) {
    return result;
  }
LABEL_63:
  float v5 = *(float *)(v3 + 112);

  return PB::Writer::write(this, v5);
}

uint64_t sub_190384210(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCDA40;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_190384238(PB::Base *this)
{
  *(void *)this = &unk_1EDFCDA40;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903842BC(PB::Base *a1)
{
  sub_190384238(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903842F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if (v5)
  {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 32);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903843A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v20 == 2)
      {
        *(unsigned char *)(a1 + 32) |= 1u;
        unint64_t v22 = *((void *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
          goto LABEL_30;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v22);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_35;
        }
        *(unsigned char *)(a1 + 32) |= 2u;
        unint64_t v21 = *((void *)this + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)this + 2))
        {
LABEL_30:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_35;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v21);
      }
      *((void *)this + 1) += 8;
LABEL_35:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_190384658(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 32);
  }
  if (v4) {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  }
  char v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
  {
    return PB::Writer::writeSubmessage(this, v5);
  }
  return result;
}

uint64_t sub_1903846D8(uint64_t result)
{
  if (!*(void *)(result + 24)) {
    operator new();
  }
  return result;
}

uint64_t sub_190384784(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1903847FC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1903847FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    char v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_190384894((uint64_t)v13);
  return v11;
}

uint64_t sub_190384894(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_190347E84((void *)a1);
  }
  return a1;
}

uint64_t sub_1903848CC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_190384944((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_190384944(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    char v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1903849DC((uint64_t)v13);
  return v11;
}

uint64_t sub_1903849DC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_190347E84((void *)a1);
  }
  return a1;
}

uint64_t sub_190384A14(uint64_t *a1, void *a2)
{
  uint64_t result = sub_190384A8C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_190384A8C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    char v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_190384B24((uint64_t)v13);
  return v11;
}

uint64_t sub_190384B24(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_190347E84((void *)a1);
  }
  return a1;
}

uint64_t sub_190384B5C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_190384BD4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_190384BD4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    char v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_190384C6C((uint64_t)v13);
  return v11;
}

uint64_t sub_190384C6C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_190347E84((void *)a1);
  }
  return a1;
}

uint64_t sub_190384CA4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_190384D1C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_190384D1C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    char v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_190384DB4((uint64_t)v13);
  return v11;
}

uint64_t sub_190384DB4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_190347E84((void *)a1);
  }
  return a1;
}

uint64_t sub_190384DEC(uint64_t a1)
{
  unint64_t v2 = (std::__shared_weak_count *)operator new(0xE40uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFD0E80;
  uint64_t v3 = (uint64_t)&v2[1];
  sub_190395088(&v2[1].__vftable);
  char v4 = *(void **)a1;
  do
    int v5 = sub_190385140(v4, v3);
  while (v5 == 1);
  if (v5)
  {
    *(void *)a1 = 0;
  }
  else
  {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v2;
    if (v6) {
      sub_1902D8B58(v6);
    }
  }
  sub_1902D8B58(v2);
  return a1;
}

void sub_190384E98(_Unwind_Exception *a1)
{
  sub_1902D8B58(v1);
  _Unwind_Resume(a1);
}

void *sub_190384EAC(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = a2;
  sub_190384DEC((uint64_t)a1);
  return a1;
}

void sub_190384EDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_1902D8B58(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190384EF8(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = -1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 192) = 0;
  inflateInit_((z_streamp)(a1 + 48), "1.2.12", 112);
  return a1;
}

void sub_190384F68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = v2;
  int v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 168) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190384F8C(uint64_t a1)
{
  inflateEnd((z_streamp)(a1 + 48));
  unint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 168) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_190384FD0(uint64_t a1)
{
  *(void *)(a1 + 168) = *(void *)(a1 + 160);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  if (!*(void *)a1)
  {
    unint64_t v2 = *(void **)(a1 + 32);
    if (v2) {
      munmap(v2, *(void *)(a1 + 16));
    }
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t result = *(unsigned int *)(a1 + 8);
  if ((result & 0x80000000) == 0) {
    uint64_t result = close(result);
  }
  *(_DWORD *)(a1 + 8) = -1;
  *(void *)a1 = 0;
  return result;
}

uint64_t sub_190385038(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  if (v1)
  {
    if (a1[2] > 7uLL && *v1 == 0xE020C5BE006C536DLL)
    {
      a1[3] += 8;
      return 1;
    }
    sub_190384FD0((uint64_t)a1);
  }
  return 0;
}

uint64_t sub_190385098(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 16) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  *(unsigned char *)(a1 + 40) = 0;

  return sub_190385038((void *)a1);
}

BOOL sub_190385130(uint64_t a1)
{
  return *(void *)(a1 + 32) != 0;
}

uint64_t sub_190385140(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[20];
  if (v3 == a1[21])
  {
    return sub_190385230((uint64_t)a1);
  }
  else
  {
    char v4 = a1 + 23;
    unint64_t v5 = a1[23];
    if (v5 >= 4
      && (uint64_t v7 = (_DWORD *)a1[24],
          unsigned int v10 = *v7,
          uint64_t v8 = (const unsigned __int8 *)(v7 + 1),
          uint64_t v9 = v10,
          unint64_t v11 = v5 - 4,
          a1[23] = v11,
          a1[24] = v8,
          v11 >= v10))
    {
      PB::Reader::Reader((PB::Reader *)v14, v8);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)a2 + 16))(a2, v14);
      uint64_t v13 = a1[24] + v9;
      a1[23] -= v9;
      a1[24] = v13;
      return v14[24];
    }
    else
    {
      a1[21] = v3;
      uint64_t result = 1;
      *char v4 = 0;
      a1[24] = 0;
    }
  }
  return result;
}

uint64_t sub_190385230(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    return 2;
  }
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= v4 || (unint64_t v5 = v3 + 16, v4 <= v3 + 16))
  {
LABEL_18:
    sub_190384FD0(a1);
    return 2;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    *(unsigned char *)(a1 + 40) = 0;
    if (v3 + 8 < v4)
    {
      uint64_t result = 1;
      while (*(void *)(v1 + v3) != 0x5979AAB3D5E07959)
      {
        v3 += 8;
        *(void *)(a1 + 24) = v3;
        if (v3 + 8 >= v4) {
          return result;
        }
      }
    }
    return 1;
  }
  uint64_t v7 = v1 + v3;
  if (*(void *)(v1 + v3) != 0x5979AAB3D5E07959)
  {
    *(void *)(a1 + 24) = v3 + 8;
    goto LABEL_21;
  }
  uint64_t v10 = v7 + 8;
  int v8 = *(_DWORD *)(v7 + 8);
  uint64_t v9 = *(unsigned int *)(v10 + 4);
  *(void *)(a1 + 24) = v5;
  if (v8 != 1936614771)
  {
    uint64_t v12 = v3 + v9 + 23;
    goto LABEL_23;
  }
  if (v9 <= 0xB)
  {
LABEL_21:
    uint64_t result = 1;
    *(unsigned char *)(a1 + 40) = 1;
    return result;
  }
  int v11 = v9;
  if (v5 + v9 >= v4)
  {
    if (v3 + 44 < v4)
    {
      int v11 = v4 - (v3 + 16);
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_16:
  if (!sub_190385380(a1, v1 + v5 + 12, v11 - 12)) {
    goto LABEL_21;
  }
  uint64_t v12 = v9 + *(void *)(a1 + 24) + 7;
LABEL_23:
  *(void *)(a1 + 24) = v12 & 0xFFFFFFFFFFFFFFF8;
  return 1;
}

BOOL sub_190385380(uint64_t a1, uint64_t a2, int a3)
{
  sub_19038556C(__p, 0x4000uLL);
  *(void *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 56) = a3;
  int v6 = (int)__p[0];
  int v7 = (int)__p[1];
  *(void **)(a1 + 72) = __p[0];
  while (1)
  {
    *(_DWORD *)(a1 + 80) = v7 - v6;
    int v8 = inflate((z_streamp)(a1 + 48), 2);
    if (v8) {
      break;
    }
    uint64_t v9 = (char *)__p[0];
    int v7 = (int)__p[1];
    size_t v10 = (char *)__p[1] - (char *)__p[0];
    if ((char *)__p[1] - (char *)__p[0] < 1)
    {
      if ((v10 & 0x8000000000000000) != 0)
      {
        int v7 = LODWORD(__p[0]) + 2 * v10;
        __p[1] = (char *)__p[0] + 2 * v10;
      }
    }
    else
    {
      sub_190385624((unint64_t *)__p, v10);
      uint64_t v9 = (char *)__p[0];
      int v7 = (int)__p[1];
    }
    int v11 = &v9[*(void *)(a1 + 88)];
    *(void *)(a1 + 72) = v11;
    int v6 = (int)v11;
  }
  BOOL v12 = v8 == 1;
  unint64_t v13 = *(void *)(a1 + 88);
  char v14 = __p[0];
  BOOL v15 = v13 >= (char *)__p[1] - (char *)__p[0];
  if (v13 <= (char *)__p[1] - (char *)__p[0])
  {
    long long v16 = (char *)__p[0] + v13;
    if (v15) {
      long long v16 = (char *)__p[1];
    }
  }
  else
  {
    sub_190385624((unint64_t *)__p, v13 - ((char *)__p[1] - (char *)__p[0]));
    char v14 = __p[0];
    long long v16 = (char *)__p[1];
  }
  *(void *)(a1 + 192) = v14;
  uint64_t v17 = v16 - v14;
  long long v18 = *(_OWORD *)(a1 + 160);
  *(void *)(a1 + 160) = v14;
  *(void *)(a1 + 168) = v16;
  *(_OWORD *)__p = v18;
  uint64_t v19 = *(void *)(a1 + 176);
  *(void *)(a1 + 176) = v22;
  *(void *)(a1 + 184) = v17;
  uint64_t v22 = v19;
  inflateReset((z_streamp)(a1 + 48));
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v12;
}

void sub_1903854AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1903854D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFD0E80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1903854F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFD0E80;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190385544(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *sub_19038556C(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1903855E0(a1, a2);
    unint64_t v4 = (char *)a1[1];
    unint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1903855C4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1903855E0(void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    sub_1903479E8();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void sub_190385624(unint64_t *a1, size_t a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    int v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      sub_1903479E8();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    BOOL v12 = &v7[v11];
    unint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      char v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      unint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_190385760(uint64_t a1)
{
  *(void *)a1 = 0;
  unint64_t v2 = dispatch_queue_create("CMMsl.Writer", 0);
  *(void *)(a1 + 8) = v2;
  unint64_t v3 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v2);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 300;
  *(_DWORD *)(a1 + 40) = -1;
  uint64_t v4 = MEMORY[0x1E4F143A8];
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  handler[0] = v4;
  handler[1] = 0x40000000;
  handler[2] = sub_190385864;
  handler[3] = &unk_1E568CF88;
  handler[4] = a1;
  dispatch_source_set_event_handler(v3, handler);
  dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 16), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_resume(*(dispatch_object_t *)(a1 + 16));
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  deflateInit_((z_streamp)(a1 + 80), -1, "1.2.12", 112);
  return a1;
}

void sub_190385864(uint64_t a1)
{
}

void sub_19038586C(void *a1)
{
  uint64_t v1 = (void **)(a1 + 7);
  if (a1[7])
  {
    unint64_t v3 = (z_stream *)(a1 + 10);
    while (1)
    {
      int v4 = deflate(v3, 4);
      if (v4) {
        break;
      }
      sub_190386238((char *)a1);
    }
    if (v4 == 1)
    {
      uint64_t v5 = a1[15];
      uint64_t v6 = v5 + 28;
      size_t v7 = (v5 + 35) & 0xFFFFFFFFFFFFFFF8;
      *(_DWORD *)(a1[7] + 12) = v5 + 12;
      if (v5 + 28 < v7)
      {
        do
          *((unsigned char *)*v1 + v6++) = 0;
        while (v7 != v6);
      }
      unint64_t v8 = (const void *)a1[7];
      if (*a1)
      {
        (*(void (**)(void, const void *, size_t))(*(void *)*a1 + 24))(*a1, v8, v7);
        free(*v1);
      }
      else
      {
        unint64_t v9 = a1[1];
        destructor[0] = MEMORY[0x1E4F143A8];
        destructor[1] = 0x40000000;
        destructor[2] = sub_1903862B0;
        destructor[3] = &unk_1E568D070;
        destructor[4] = v8;
        size_t v10 = dispatch_data_create(v8, v7, v9, destructor);
        dispatch_io_write((dispatch_io_t)a1[3], a1[6], v10, (dispatch_queue_t)a1[1], &unk_1EDFD1320);
        dispatch_release(v10);
      }
      a1[6] += v7;
      v1[1] = 0;
      v1[2] = 0;
      void *v1 = 0;
      deflateReset(v3);
      dispatch_source_set_timer((dispatch_source_t)a1[2], 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, (unint64_t)(1000000000 * a1[4]) >> 1);
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "zstream status? Msl %d\n", v4);
    }
  }
}

void sub_190385A3C(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(NSObject **)(a1 + 8);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = sub_190385AB0;
  v3[3] = &unk_1E568CFA8;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

uint64_t sub_190385AB0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_DWORD *)(v1 + 40) != -1) {
    sub_1905F4C18();
  }
  *(void *)(v1 + 32) = *(void *)(result + 40);
  return result;
}

uint64_t sub_190385AE0(uint64_t a1)
{
  unint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2) {
    dispatch_release(v2);
  }
  unint64_t v3 = *(NSObject **)(a1 + 16);
  if (v3) {
    dispatch_release(v3);
  }
  int v4 = *(NSObject **)(a1 + 24);
  if (v4)
  {
    dispatch_release(v4);
  }
  else
  {
    int v5 = *(_DWORD *)(a1 + 40);
    if ((v5 & 0x80000000) == 0) {
      close(v5);
    }
  }
  free(*(void **)(a1 + 56));
  deflateEnd((z_streamp)(a1 + 80));
  return a1;
}

uint64_t sub_190385B50(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v8 = 0;
  unint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  char v11 = 0;
  unint64_t v3 = *(NSObject **)(a1 + 8);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = sub_190385C04;
  v6[3] = &unk_1E568CFF0;
  v6[5] = a1;
  v6[6] = a2;
  int v7 = a3;
  v6[4] = &v8;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v4;
}

dispatch_io_t sub_190385C04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = open_dprotected_np(*(const char **)(a1 + 48), 16777730, *(_DWORD *)(a1 + 56), 0, 438);
  *(_DWORD *)(v2 + 40) = v3;
  if (v3 < 0)
  {
    int v7 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v8 = "Cannot open Msl file\n";
    size_t v9 = 21;
  }
  else
  {
    off_t v4 = lseek(v3, 0, 2);
    if (v4 < 0)
    {
      int v7 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v8 = "Cannot seek to end of Msl file\n";
      size_t v9 = 31;
    }
    else
    {
      off_t v5 = v4;
      if ((lseek(*(_DWORD *)(v2 + 40), 0, 0) & 0x8000000000000000) == 0)
      {
        if (v5)
        {
          uint64_t __buf = 0;
          if (pread(*(_DWORD *)(v2 + 40), &__buf, 8uLL, 0) == 8)
          {
            if (__buf == 0xE020C5BE006C536DLL)
            {
              unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
LABEL_15:
              *(void *)(v2 + 48) = v6;
              dispatch_fd_t v11 = *(_DWORD *)(v2 + 40);
              BOOL v12 = *(NSObject **)(v2 + 8);
              cleanup_handler[0] = MEMORY[0x1E4F143A8];
              cleanup_handler[1] = 0x40000000;
              cleanup_handler[2] = sub_190385E38;
              cleanup_handler[3] = &unk_1E568CFC8;
              dispatch_fd_t v17 = v11;
              dispatch_io_t result = dispatch_io_create(1uLL, v11, v12, cleanup_handler);
              *(void *)(v2 + 24) = result;
              if (result)
              {
                *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
                return result;
              }
              unint64_t v13 = (FILE *)*MEMORY[0x1E4F143C8];
              char v14 = "Cannot create dispatch_io for Msl file\n";
              size_t v15 = 39;
              return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
            }
            unint64_t v13 = (FILE *)*MEMORY[0x1E4F143C8];
            char v14 = "Bad signature in Msl file\n";
            size_t v15 = 26;
          }
          else
          {
            unint64_t v13 = (FILE *)*MEMORY[0x1E4F143C8];
            char v14 = "Short signature in Msl file\n";
            size_t v15 = 28;
          }
          return (dispatch_io_t)fwrite(v14, v15, 1uLL, v13);
        }
        unint64_t v6 = 8;
        pwrite(*(_DWORD *)(v2 + 40), &unk_190604DB0, 8uLL, 0);
        goto LABEL_15;
      }
      int v7 = (FILE *)*MEMORY[0x1E4F143C8];
      uint64_t v8 = "Cannot seek to start of Msl file\n";
      size_t v9 = 33;
    }
  }

  return (dispatch_io_t)fwrite(v8, v9, 1uLL, v7);
}

uint64_t sub_190385E38(uint64_t a1)
{
  return close(*(_DWORD *)(a1 + 32));
}

void sub_190385E40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = sub_190385EB4;
  v3[3] = &unk_1E568D010;
  v3[4] = a1;
  v3[5] = a2;
  dispatch_sync(v2, v3);
}

void sub_190385EB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  PB::Writer::Writer((PB::Writer *)&v5);
  (*(void (**)(void, uint64_t *))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), &v5);
  uint64_t v3 = *(void *)(v2 + 56);
  if (!v3)
  {
    sub_190385F94(v2);
    uint64_t v3 = *(void *)(v2 + 56);
  }
  ++*(_DWORD *)(v3 + 16);
  int v4 = v5 - v6;
  sub_190386078((char *)v2, (uint64_t)&v4, 4);
  sub_190386078((char *)v2, v6, v5 - v6);
  if (!*(void *)(v2 + 72)) {
    sub_19038586C((void *)v2);
  }
  PB::Writer::~Writer((PB::Writer *)&v5);
}

void sub_190385F7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  PB::Writer::~Writer((PB::Writer *)va);
  _Unwind_Resume(a1);
}

void sub_190385F94(uint64_t a1)
{
  *(void *)(a1 + 56) = malloc_type_malloc(0x8000uLL, 0x4A3B362DuLL);
  *(_OWORD *)(a1 + 64) = xmmword_190604DA0;
  gettimeofday(&v7, 0);
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)uint64_t v2 = 0x5979AAB3D5E07959;
  *(void *)(v2 + 8) = 1936614771;
  int tv_sec = v7.tv_sec;
  *(_DWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 20) = tv_sec;
  *(_DWORD *)(v2 + 24) = 1000 * v7.tv_usec;
  *(void *)(a1 + 104) = v2 + 28;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a1 + 64) - 28;
  unint64_t v4 = 1000000000 * *(void *)(a1 + 32);
  uint64_t v5 = *(NSObject **)(a1 + 16);
  dispatch_time_t v6 = dispatch_time(0, v4);

  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, v4 >> 1);
}

char *sub_190386078(char *result, uint64_t a2, int a3)
{
  *((void *)result + 10) = a2;
  uint64_t v3 = (z_stream *)(result + 80);
  *((_DWORD *)result + 22) = a3;
  if (a3)
  {
    unint64_t v4 = result;
    do
    {
      dispatch_io_t result = (char *)deflate(v3, 0);
      if (!result && !*((_DWORD *)v4 + 28)) {
        dispatch_io_t result = sub_190386238(v4);
      }
    }
    while (*((_DWORD *)v4 + 22));
  }
  return result;
}

void sub_1903860D0(uint64_t a1)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0);
  uint64_t v3 = *(NSObject **)(a1 + 8);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = sub_190386158;
  v4[3] = &unk_1E568D050;
  v4[4] = a1;
  v4[5] = v2;
  dispatch_sync(v3, v4);
}

void sub_190386158(uint64_t a1)
{
  dispatch_semaphore_t v2 = *(void **)(a1 + 32);
  sub_19038586C(v2);
  uint64_t v3 = v2[3];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = sub_1903861F8;
  v5[3] = &unk_1E568D030;
  uint64_t v4 = *(void *)(a1 + 40);
  v5[4] = v2;
  v5[5] = v4;
  dispatch_io_barrier(v3, v5);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
}

intptr_t sub_1903861F8(uint64_t a1)
{
  fsync(*(_DWORD *)(*(void *)(a1 + 32) + 40));
  dispatch_semaphore_t v2 = *(NSObject **)(a1 + 40);

  return dispatch_semaphore_signal(v2);
}

char *sub_190386238(char *result)
{
  uint64_t v1 = result;
  uint64_t v3 = *((void *)result + 8);
  uint64_t v2 = *((void *)result + 9);
  if (v2)
  {
    *((_DWORD *)result + 28) += v2;
    *((void *)result + 8) = v3 + v2;
    *((void *)result + 9) = 0;
  }
  else
  {
    *((void *)result + 8) = 2 * v3;
    dispatch_io_t result = (char *)malloc_type_realloc(*((void **)result + 7), 2 * v3, 0x59C50B5uLL);
    *((void *)v1 + 7) = result;
    uint64_t v4 = *((void *)v1 + 15);
    *((void *)v1 + 13) = &result[v4 + 28];
    *((_DWORD *)v1 + 28) = *((_DWORD *)v1 + 16) - v4;
  }
  return result;
}

void sub_1903862B0(uint64_t a1)
{
}

void sub_1903862B8(int a1, char a2, int a3, int __errnum)
{
  if (__errnum || (a2 & 1) == 0)
  {
    uint64_t v4 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v5 = strerror(__errnum);
    fprintf(v4, "Msl dispatch io write error %s\n", v5);
  }
}

uint64_t sub_190386310(uint64_t a1)
{
  return *(void *)(a1 + 120) + *(void *)(a1 + 48);
}

uint64_t sub_190386320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = (void *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_190347AFC((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v5 = v6;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    sub_190347AFC((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v7;
  }
  uint64_t v8 = (unsigned char *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_190347AFC(v8, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t v8 = v9;
  }
  long long v10 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0xBFF0000000000000;
  char v11 = sub_1903E1828((uint64_t)v5, (const char *)a2, a3);
  *(unsigned char *)(a1 + 136) = v11;
  if ((v11 & 1) == 0)
  {
    if (qword_1E929E7E0 != -1) {
      dispatch_once(&qword_1E929E7E0, &unk_1EDFD1340);
    }
    BOOL v12 = qword_1E929E7D8;
    if (os_log_type_enabled((os_log_t)qword_1E929E7D8, OS_LOG_TYPE_ERROR)) {
      sub_1905F4C44(a1, v5, v12);
    }
  }
  return a1;
}

void sub_19038646C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1903864D0(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_190386548(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 128);
  uint64_t result = *(void *)(a1 + 128);
  if (result)
  {
    sub_1903860D0(result);
    return sub_190387560(v2, 0);
  }
  return result;
}

void sub_19038659C(uint64_t a1)
{
}

void sub_190386884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_190387210((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1903868EC(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_190386A5C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x192FCC930](v1);
  _Unwind_Resume(a1);
}

void *sub_190386A84(void *a1, uint64_t a2)
{
  MEMORY[0x192FCC7B0](v8, a1);
  if (v8[0])
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    std::locale::use_facet(&v9, MEMORY[0x1E4FBA2B0]);
    std::locale::~locale(&v9);
    uint64_t v4 = (const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
    if (v4[1].__fmtflags_ == -1)
    {
      std::ios_base::getloc(v4);
      uint64_t v5 = std::locale::use_facet(&v9, MEMORY[0x1E4FBA258]);
      std::ios_base::fmtflags v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
      std::locale::~locale(&v9);
      v4[1].__fmtflags_ = v6;
    }
    strlen(*(const char **)(a2 + 8));
    if (!std::time_put<char,std::ostreambuf_iterator<char>>::put()) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 1);
    }
  }
  MEMORY[0x192FCC7C0](v8);
  return a1;
}

void sub_190386BF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x192FCC7C0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x190386BD4);
}

void sub_190386C50(_Unwind_Exception *a1)
{
}

void sub_190386C64(uint64_t a1@<X0>, const void **a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, std::string *a6@<X8>)
{
  v30[2] = *MEMORY[0x1E4F143B8];
  sub_1903875B0(a3, 95, (uint64_t)&v27);
  int v11 = *(char *)(a4 + 23);
  if (v11 >= 0) {
    BOOL v12 = (const std::string::value_type *)a4;
  }
  else {
    BOOL v12 = *(const std::string::value_type **)a4;
  }
  if (v11 >= 0) {
    std::string::size_type v13 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    std::string::size_type v13 = *(void *)(a4 + 8);
  }
  char v14 = std::string::append(&v27, v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v28, 46);
  std::string v29 = v28;
  memset(&v28, 0, sizeof(v28));
  int v16 = *(char *)(a5 + 23);
  if (v16 >= 0) {
    dispatch_fd_t v17 = (const std::string::value_type *)a5;
  }
  else {
    dispatch_fd_t v17 = *(const std::string::value_type **)a5;
  }
  if (v16 >= 0) {
    std::string::size_type v18 = *(unsigned __int8 *)(a5 + 23);
  }
  else {
    std::string::size_type v18 = *(void *)(a5 + 8);
  }
  uint64_t v19 = std::string::append(&v29, v17, v18);
  std::string::size_type v20 = v19->__r_.__value_.__r.__words[0];
  v30[0] = v19->__r_.__value_.__l.__size_;
  *(void *)((char *)v30 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
  char v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v22 = v30[0];
  *(void *)(a1 + 104) = v20;
  *(void *)(a1 + 112) = v22;
  *(void *)(a1 + 119) = *(void *)((char *)v30 + 7);
  *(unsigned char *)(a1 + 127) = v21;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  sub_1903875B0(a2, 47, (uint64_t)&v29);
  int v23 = *(char *)(a1 + 127);
  if (v23 >= 0) {
    unsigned int v24 = (const std::string::value_type *)(a1 + 104);
  }
  else {
    unsigned int v24 = *(const std::string::value_type **)(a1 + 104);
  }
  if (v23 >= 0) {
    std::string::size_type v25 = *(unsigned __int8 *)(a1 + 127);
  }
  else {
    std::string::size_type v25 = *(void *)(a1 + 112);
  }
  char v26 = std::string::append(&v29, v24, v25);
  *a6 = *v26;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
}

void sub_190386E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190386E98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  sub_1903E19D8(a1 + 16, a1 + 64, a3, &v4);
  sub_190387AF0(&v3, ".*_(\\d+-\\d+-\\d+_\\d+:\\d+:\\d+\\.\\d+)\\..*", 0);
}

void sub_1903871D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a12.__locale_ = (std::locale::__imp *)&a20;
  sub_190387A4C((void ***)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_190387210(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x192FCC930](a1 + 112);
  return a1;
}

void sub_190387314(uint64_t a1, uint64_t a2)
{
  double v4 = sub_1905CEBF4();

  sub_190387354(a1, a2, v4);
}

void sub_190387354(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 136))
  {
    if (qword_1E929E7E0 != -1) {
      dispatch_once(&qword_1E929E7E0, &unk_1EDFD1340);
    }
    long long v10 = qword_1E929E7D8;
    if (os_log_type_enabled((os_log_t)qword_1E929E7D8, OS_LOG_TYPE_FAULT)) {
      sub_1905F4CCC(v10);
    }
    int v11 = qword_1E929E7D8;
    if (os_log_type_enabled((os_log_t)qword_1E929E7D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315650;
      std::string::size_type v13 = "assert";
      __int16 v14 = 2080;
      long long v15 = "fValid";
      __int16 v16 = 2080;
      dispatch_fd_t v17 = "On call to writeItem client should check if the logger was opened";
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_INFO, "Event: %s\n Condition: %s\n Message: %s", buf, 0x20u);
    }
    abort_report_np();
  }
  uint64_t v6 = *(void *)(a1 + 128);
  if (!v6
    || *(double *)(a1 + 144) < 0.0
    || sub_190386310(v6) > *(void *)a1
    || (double v8 = *(double *)(a1 + 144), v8 > a3)
    || (LODWORD(v7) = *(_DWORD *)(a1 + 8), a3 - v8 > (double)v7))
  {
    sub_19038659C(a1);
  }
  uint64_t v9 = *(void *)(a1 + 128);

  sub_190385E40(v9, a2);
}

void sub_190387510(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 128);
  if (v1) {
    sub_1903860D0(v1);
  }
}

void sub_190387520(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    sub_1902D8B58(locale);
  }

  std::locale::~locale(this);
}

uint64_t sub_190387560(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_190385B4C();
    JUMPOUT(0x192FCC980);
  }
  return result;
}

uint64_t sub_1903875B0@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  uint64_t result = sub_190395000(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    unint64_t v7 = (char *)result;
  }
  else {
    unint64_t v7 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      double v8 = a1;
    }
    else {
      double v8 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }
  uint64_t v9 = &v7[v5];
  *uint64_t v9 = a2;
  v9[1] = 0;
  return result;
}

os_log_t sub_190387644()
{
  os_log_t result = os_log_create("com.apple.MotionSensorLogging", "MSL");
  qword_1E929E7D8 = (uint64_t)result;
  return result;
}

void *sub_190387674(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x192FCC7B0](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      long long v10 = std::locale::use_facet(&v14, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_190387818(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x192FCC7C0](v13);
  return a1;
}

void sub_1903877B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x192FCC7C0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x190387790);
}

void sub_190387804(_Unwind_Exception *a1)
{
}

uint64_t sub_190387818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      sub_1903879A0(__p, v12, __c);
      std::string::size_type v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_190387984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1903879A0(void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    sub_190347B9C();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void sub_190387A4C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_190387AA0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_190387AA0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_190387AF0(const std::locale *a1, const char *a2, int a3)
{
  size_t v5 = sub_190387B88(a1);
  LODWORD(v5[3].__locale_) = a3;
  *(_OWORD *)((char *)&v5[3].__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[5].__locale_ + 4) = 0u;
  HIDWORD(v5[7].__locale_) = 0;
  strlen(a2);
  sub_190387BE8();
}

void sub_190387B68(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    sub_1902D8B58(locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

const std::locale *sub_190387B88(const std::locale *a1)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x192FCC8E0]();
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v2, MEMORY[0x1E4FBA258]);
  a1[2].__locale_ = (std::locale::__imp *)std::locale::use_facet(a1, MEMORY[0x1E4FBA280]);
  return a1;
}

void sub_190387BD4(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_190387BE8()
{
}

void sub_190387DA8(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_190387DDC()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_190387E20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_190387E34(uint64_t a1, uint64_t a2)
{
  sub_190388484(&v2, a2);
}

char *sub_190387E7C(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v6 = a2;
  do
  {
    size_t v7 = v6;
    uint64_t v6 = sub_190388910(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  if (v7 == a2) {
    operator new();
  }
  if (v7 != (unsigned __int8 *)a3)
  {
    if (*v7 == 124)
    {
      size_t v8 = v7 + 1;
      int v9 = v7 + 1;
      do
      {
        long long v10 = v9;
        int v9 = sub_190388910(a1, (char *)v9, a3);
      }
      while (v9 != v10);
      if (v10 == v8) {
        operator new();
      }
      sub_190388808();
    }
    return (char *)v7;
  }
  return a3;
}

unsigned __int8 *sub_190387FDC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return a2;
  }
  double v4 = a3;
  if (*a2 == 94) {
    sub_190389114();
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t v6 = v3;
      uint64_t v3 = sub_1903902D4(a1, v3, v4);
    }
    while (v3 != v6);
    if (v6 != v4)
    {
      if (v6 + 1 == v4 && *v6 == 36) {
        sub_190389198();
      }
      sub_19039027C();
    }
  }
  return v4;
}

unsigned __int8 *sub_19038808C(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = sub_190390970(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
LABEL_8:
  }
    sub_19039027C();
  if (v6 != (unsigned __int8 *)v3)
  {
    if (*v6 == 124)
    {
      if (sub_190390970(a1, (char *)v6 + 1, v3) != v6 + 1) {
        sub_190388808();
      }
      goto LABEL_8;
    }
    return v6;
  }
  return (unsigned __int8 *)v3;
}

unsigned __int8 *sub_190388130(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  uint64_t v6 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v6) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = a3;
  }
  if (v7 == __s) {
    operator new();
  }
  sub_190387FDC(a1, __s, v7);
  if (v7 == a3) {
    long long v10 = v7;
  }
  else {
    long long v10 = v7 + 1;
  }
  if (v10 != a3)
  {
    size_t v8 = (unsigned __int8 *)memchr(v10, 10, a3 - v10);
    if (v8) {
      int v9 = v8;
    }
    else {
      int v9 = a3;
    }
    if (v9 != v10)
    {
      sub_190387FDC(a1, v10, v9);
      sub_190388808();
    }
    operator new();
  }
  return a3;
}

char *sub_190388298(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6 = (char *)memchr(__s, 10, a3 - __s);
  if (v6) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = a3;
  }
  if (v7 == __s) {
    operator new();
  }
  sub_19038808C(a1, __s, v7);
  if (v7 == a3) {
    long long v10 = v7;
  }
  else {
    long long v10 = v7 + 1;
  }
  if (v10 != a3)
  {
    size_t v8 = (char *)memchr(v10, 10, a3 - v10);
    if (v8) {
      int v9 = v8;
    }
    else {
      int v9 = a3;
    }
    if (v9 != v10)
    {
      sub_19038808C(a1, v10, v9);
      sub_190388808();
    }
    operator new();
  }
  return a3;
}

void sub_190388400()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_190388444(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19038845C()
{
}

void sub_190388470(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_190388484(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1903884EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_1905F4DA4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_190388508(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190388540(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_190388570(uint64_t a1, uint64_t a2)
{
  if (sub_1903885B4(a2, (uint64_t)&unk_1EDFC7210)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

BOOL sub_1903885B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *sub_190388604(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_190388670(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903886FC(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_190388710(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19038877C(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x192FCC980);
}

void sub_190388808()
{
}

unsigned __int8 *sub_190388910(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)sub_1903889B8(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    size_t v7 = sub_190388BC8(a1, (unsigned __int8 *)a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
    if (v7 != (unsigned __int8 *)a2)
    {
      return sub_190388E10(a1, v7, (unsigned __int8 *)a3);
    }
  }
  return result;
}

char *sub_1903889B8(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v6 = *a2;
    if (v6 > 91)
    {
      if (v6 == 92)
      {
        if (a2 + 1 != a3)
        {
          int v13 = a2[1];
          if (v13 == 66 || v13 == 98) {
            sub_19038921C();
          }
        }
      }
      else if (v6 == 94)
      {
        sub_190389114();
      }
    }
    else
    {
      if (v6 == 36) {
        sub_190389198();
      }
      BOOL v8 = v6 == 40;
      size_t v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        int v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          int v11 = *v9;
          if (v11 == 33)
          {
            sub_190387B88(v14);
            long long v15 = 0u;
            uint64_t v17 = 0;
            long long v16 = 0u;
            LODWORD(v15) = *(_DWORD *)(a1 + 24);
            sub_190387BE8(v14, a2 + 3, a3);
            sub_1903892B0();
          }
          if (v11 == 61)
          {
            sub_190387B88(v14);
            long long v15 = 0u;
            uint64_t v17 = 0;
            long long v16 = 0u;
            LODWORD(v15) = *(_DWORD *)(a1 + 24);
            sub_190387BE8(v14, a2 + 3, a3);
            sub_1903892B0();
          }
        }
      }
    }
  }
  return a2;
}

void sub_190388BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *sub_190388BC8(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == (unsigned __int8 *)a3) {
    return v3;
  }
  int v6 = (char)*a2;
  if (v6 <= 62)
  {
    if (v6 != 40)
    {
      if (v6 == 46) {
        operator new();
      }
      if ((v6 - 42) >= 2) {
        goto LABEL_28;
      }
LABEL_34:
      sub_19038B02C();
    }
    if (a2 + 1 != (unsigned __int8 *)a3)
    {
      if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
      {
        BOOL v8 = (_DWORD *)(a1 + 36);
        ++*(_DWORD *)(a1 + 36);
        int v9 = (char *)sub_190387E7C(a1, a2 + 3, a3);
        if (v9 == a3) {
          goto LABEL_35;
        }
        long long v10 = v9;
        if (*v9 != 41) {
          goto LABEL_35;
        }
        goto LABEL_25;
      }
      sub_19038AF2C(a1);
      BOOL v8 = (_DWORD *)(a1 + 36);
      ++*(_DWORD *)(a1 + 36);
      int v11 = (char *)sub_190387E7C(a1, v3 + 1, a3);
      if (v11 != a3)
      {
        long long v10 = v11;
        if (*v11 == 41)
        {
          sub_19038AFB0(a1);
LABEL_25:
          --*v8;
          return (unsigned __int8 *)(v10 + 1);
        }
      }
    }
LABEL_35:
    sub_190389358();
  }
  if (v6 <= 91)
  {
    if (v6 == 91)
    {
      return sub_19038AE18(a1, a2, a3);
    }
    if (v6 == 63) {
      goto LABEL_34;
    }
LABEL_28:
    return sub_19038B084(a1, a2, a3);
  }
  if (v6 != 92)
  {
    if (v6 == 123) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }

  return sub_19038AD74(a1, a2, (unsigned __int8 *)a3);
}

unsigned __int8 *sub_190388E10(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v5 = (char)*a2;
  if (v5 <= 62)
  {
    if (v5 == 42 || v5 == 43) {
LABEL_18:
    }
      sub_19038FC74();
    return a2;
  }
  if (v5 == 63) {
    goto LABEL_18;
  }
  if (v5 == 123)
  {
    int v6 = a2 + 1;
    size_t v7 = sub_19038FE04(a1, a2 + 1, a3, &v13);
    if (v7 == v6) {
      goto LABEL_23;
    }
    if (v7 != a3)
    {
      int v8 = (char)*v7;
      if (v8 != 44)
      {
        if (v8 == 125) {
          goto LABEL_18;
        }
LABEL_23:
        sub_19038FEA4();
      }
      int v9 = v7 + 1;
      if (v7 + 1 == a3) {
        goto LABEL_23;
      }
      if (*v9 == 125) {
        goto LABEL_18;
      }
      int v12 = -1;
      int v11 = sub_19038FE04(a1, v9, a3, &v12);
      if (v11 != v9 && v11 != a3 && *v11 == 125)
      {
        if (v12 >= v13) {
          goto LABEL_18;
        }
        goto LABEL_23;
      }
    }
    sub_19038FEFC();
  }
  return a2;
}

void sub_190389114()
{
}

void sub_190389198()
{
}

void sub_19038921C()
{
}

void sub_1903892B0()
{
}

void sub_190389334(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void sub_190389358()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19038939C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1903893B0(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19038941C(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903894A8(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 80) = v4;
  return result;
}

void *sub_190389508(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_190389574(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190389600(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((int v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_190389650(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B30;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_1903896DC(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B30;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190389788(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 80) = v12;
  return result;
}

uint64_t sub_19038989C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_1EDFD0A70;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

std::locale *sub_19038992C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0A70;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    sub_1902D8B58(locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }
  return a1;
}

void sub_1903899CC(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0A70;
  uint64_t v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale) {
    sub_1902D8B58(locale);
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  BOOL v4 = a1[1].__locale_;
  if (v4) {
    (*(void (**)(std::locale::__imp *))(*(void *)v4 + 8))(v4);
  }

  JUMPOUT(0x192FCC980);
}

void sub_190389A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v25 = 0;
  long long v26 = 0uLL;
  char v27 = 0;
  char v28 = 0;
  uint64_t v29 = 0;
  __p = 0;
  uint64_t v19 = 0;
  unint64_t v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v20 = 0;
  *(void *)&long long v21 = v5;
  *((void *)&v21 + 1) = v5;
  char v22 = 0;
  sub_19038A0FC((char **)&__p, v4, &v21);
  uint64_t v23 = v6;
  uint64_t v24 = v6;
  char v25 = 0;
  long long v26 = v21;
  char v27 = v22;
  uint64_t v29 = v6;
  char v28 = 1;
  uint64_t v7 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v8 = v7 == *(void *)(a2 + 8);
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_190389C8C(a1 + 16, v7, *(void *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 80) = 0;
    int v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(a1 + 8);
  int v10 = (char *)__p;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (unsigned char *)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10) {
      return;
    }
    goto LABEL_14;
  }
  int v12 = 0;
  int v13 = *(_DWORD *)(a1 + 80);
  uint64_t v14 = *(void *)(a2 + 32);
  unint64_t v15 = 1;
  do
  {
    long long v16 = &v10[24 * v15];
    uint64_t v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v16;
    *(unsigned char *)(v17 + 16) = v16[16];
    unint64_t v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  uint64_t v19 = v10;
  operator delete(v10);
}

void sub_190389BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_190389C18(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(a1 + 24) = a4;
  BOOL v8 = (_OWORD *)(a1 + 24);
  *(void *)(a1 + 32) = a4;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t result = sub_19038A0FC((char **)a1, a2, (long long *)(a1 + 24));
  *(void *)(a1 + 48) = a3;
  *(void *)(a1 + 56) = a3;
  *(unsigned char *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *v8;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a1 + 40);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = a3;
  }
  *(unsigned char *)(a1 + 96) = 1;
  return result;
}

uint64_t sub_190389C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  unsigned int v42 = 0;
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(void *)&long long v40 = a3;
    *((void *)&v40 + 1) = a3;
    char v41 = 0;
    *(_DWORD *)uint64_t v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v39, 0, 21);
    uint64_t v43 = (_OWORD *)sub_19038A470((uint64_t *)&v42, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v37[32])
    {
      *(void *)&v37[40] = *(void *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    char v35 = a4;
    int v12 = v43;
    *((_DWORD *)v43 - 24) = 0;
    *((void *)v12 - 11) = a2;
    *((void *)v12 - 10) = a2;
    *((void *)v12 - 9) = a3;
    sub_19038A354((uint64_t)(v12 - 4), *(unsigned int *)(a1 + 28), &v40);
    sub_19038A390((uint64_t)v43 - 40, *(unsigned int *)(a1 + 32));
    int v13 = v43;
    *((void *)v43 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *((unsigned char *)v13 - 4) = a6;
    unsigned int v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) == 0 && (int)(v14 >> 12) >= (int)a3 - (int)a2) {
        sub_19038A3C0();
      }
      long long v16 = v13 - 1;
      uint64_t v15 = *((void *)v13 - 2);
      uint64_t v17 = v13 - 6;
      if (v15) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 16))(v15, v13 - 6);
      }
      switch(*(_DWORD *)v17)
      {
        case 0xFFFFFC18:
          uint64_t v18 = *((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v18 == a2 || (a5 & 0x1000) != 0 && v18 != a3) {
            goto LABEL_16;
          }
          uint64_t v26 = *v35;
          *(void *)uint64_t v26 = a2;
          *(void *)(v26 + 8) = v18;
          *(unsigned char *)(v26 + 16) = 1;
          uint64_t v27 = *((void *)v13 - 8);
          uint64_t v28 = *((void *)v13 - 7) - v27;
          if (v28)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
            unsigned int v30 = (unsigned char *)(v27 + 16);
            unsigned int v31 = 1;
            do
            {
              uint64_t v32 = v26 + 24 * v31;
              *(_OWORD *)uint64_t v32 = *((_OWORD *)v30 - 1);
              char v33 = *v30;
              v30 += 24;
              *(unsigned char *)(v32 + 16) = v33;
            }
            while (v29 > v31++);
          }
          uint64_t v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          uint64_t v19 = v43 - 6;
          sub_19038A7F0((uint64_t)&v44, (void *)v43 - 12);
          uint64_t v43 = v19;
          goto LABEL_23;
        case 0xFFFFFC20:
          long long v20 = *(v13 - 5);
          *(_OWORD *)uint64_t v37 = *v17;
          *(_OWORD *)&v37[16] = v20;
          memset(&v37[32], 0, 24);
          sub_19038ABA4(&v37[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          sub_19038AC24((char *)__p, *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          uint64_t v21 = *v16;
          *(void *)((char *)&v39[1] + 5) = *(void *)((char *)v13 - 11);
          v39[1] = v21;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v16 + 24))(*v16, 1, v13 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v39[1] + 24))(v39[1], 0, v37);
          char v22 = v43;
          if ((unint64_t)v43 >= v44)
          {
            uint64_t v43 = (_OWORD *)sub_19038A470((uint64_t *)&v42, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&v37[16];
            *uint64_t v43 = *(_OWORD *)v37;
            v22[1] = v23;
            *((void *)v22 + 4) = 0;
            *((void *)v22 + 5) = 0;
            *((void *)v22 + 6) = 0;
            *((void *)v22 + 7) = 0;
            v22[2] = *(_OWORD *)&v37[32];
            *((void *)v22 + 6) = *(void *)&v37[48];
            memset(&v37[32], 0, 24);
            *((void *)v22 + 8) = 0;
            *((void *)v22 + 9) = 0;
            *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)__p;
            *((void *)v22 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            uint64_t v24 = v39[1];
            *(void *)((char *)v22 + 85) = *(void *)((char *)&v39[1] + 5);
            *((void *)v22 + 10) = v24;
            uint64_t v43 = v22 + 6;
          }
          if (*(void *)&v37[32])
          {
            *(void *)&v37[40] = *(void *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          int v13 = v43;
          ++v14;
          if (v42 != v43) {
            continue;
          }
          uint64_t v6 = 0;
          break;
        default:
          sub_19038A418();
      }
      break;
    }
  }
  *(void *)uint64_t v37 = &v42;
  sub_19038ACDC((void ***)v37);
  return v6;
}

void sub_19038A07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  sub_19038A310(&a13);
  a13 = v18 - 112;
  sub_19038ACDC((void ***)&a13);
  _Unwind_Resume(a1);
}

char *sub_19038A0FC(char **a1, unint64_t a2, long long *a3)
{
  uint64_t v6 = (uint64_t)a1[2];
  uint64_t result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) >= a2)
  {
    uint64_t v15 = a1[1];
    unint64_t v16 = (v15 - result) / 24;
    if (v16 >= a2) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = (v15 - result) / 24;
    }
    if (v17)
    {
      uint64_t v18 = result;
      do
      {
        *(_OWORD *)uint64_t v18 = *a3;
        v18[16] = *((unsigned char *)a3 + 16);
        v18 += 24;
        --v17;
      }
      while (v17);
    }
    if (a2 <= v16)
    {
      a1[1] = &result[24 * a2];
    }
    else
    {
      uint64_t v19 = &v15[24 * (a2 - v16)];
      uint64_t v20 = 24 * a2 - 24 * v16;
      do
      {
        long long v21 = *a3;
        *((void *)v15 + 2) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v15 = v21;
        v15 += 24;
        v20 -= 24;
      }
      while (v20);
      a1[1] = v19;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1903479E8();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t result = sub_19038A274(a1, v10);
    unint64_t v11 = a1[1];
    int v12 = &v11[24 * a2];
    uint64_t v13 = 24 * a2;
    do
    {
      long long v14 = *a3;
      *((void *)v11 + 2) = *((void *)a3 + 2);
      *(_OWORD *)unint64_t v11 = v14;
      v11 += 24;
      v13 -= 24;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

char *sub_19038A274(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_1903479E8();
  }
  uint64_t result = (char *)sub_19038A2C8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_19038A2C8(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_190347AC8();
  }
  return operator new(24 * a2);
}

void *sub_19038A310(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_19038A354(uint64_t a1, unint64_t a2, long long *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_19038A8C4((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void sub_19038A390(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_19038AA4C((void **)a1, a2 - v2);
  }
}

void sub_19038A3C0()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19038A404(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19038A418()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19038A45C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19038A470(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    sub_1903479E8();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_19038A638(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  sub_19038A5C0(a1, v16);
  uint64_t v14 = a1[1];
  sub_19038A848(v16);
  return v14;
}

void sub_19038A5AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19038A848((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19038A5C0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19038A680((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_19038A638(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_190347AC8();
  }
  return operator new(96 * a2);
}

uint64_t sub_19038A680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_19038A764((uint64_t)v12);
  return v10;
}

uint64_t sub_19038A764(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19038A79C((uint64_t *)a1);
  }
  return a1;
}

void sub_19038A79C(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  unint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_19038A7F0(v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void sub_19038A7F0(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **sub_19038A848(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_19038A87C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    sub_19038A7F0(v4, (void *)(i - 96));
  }
}

void sub_19038A8C4(void **a1, unint64_t a2, long long *a3)
{
  long long v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      long long v15 = &v9[3 * a2];
      uint64_t v16 = 24 * a2;
      do
      {
        long long v17 = *a3;
        v9[2] = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)*a1) >> 3);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1903479E8();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)sub_19038A2C8(v6, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v18 = &v14[24 * v10];
    uint64_t v19 = &v18[24 * a2];
    uint64_t v20 = 24 * a2;
    long long v21 = v18;
    do
    {
      long long v22 = *a3;
      *((void *)v21 + 2) = *((void *)a3 + 2);
      *(_OWORD *)long long v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    long long v23 = &v14[24 * v13];
    char v25 = (char *)*a1;
    uint64_t v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        long long v26 = *(_OWORD *)(v24 - 24);
        *((void *)v18 - 1) = *((void *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      uint64_t v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
    {
      operator delete(v24);
    }
  }
}

void sub_19038AA4C(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_1903479E8();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)sub_19038AB6C(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = &v13[16 * v10];
    long long v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    uint64_t v18 = (char *)*a1;
    long long v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      long long v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void *sub_19038AB6C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_190347AC8();
  }
  return operator new(16 * a2);
}

char *sub_19038ABA4(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_19038A274(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_19038AC08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19038AC24(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_19038AC98(result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_19038AC7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_19038AC98(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1903479E8();
  }
  uint64_t result = (char *)sub_19038AB6C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_19038ACDC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        sub_19038A7F0((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *sub_19038AD74(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    sub_19038B1F0();
  }
  uint64_t result = sub_19038B248(a1, a2 + 1, a3);
  if (result == v5)
  {
    uint64_t result = (unsigned __int8 *)sub_19038B308(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      uint64_t result = sub_19038B3D8(a1, (char *)a2 + 1, (char *)a3, 0);
      if (result == v5) {
        return a2;
      }
    }
  }
  return result;
}

unsigned char *sub_19038AE18(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 != a3) {
      sub_19038C4D4();
    }
    sub_19038D914();
  }
  return a2;
}

uint64_t sub_19038AF2C(uint64_t result)
{
  if ((*(unsigned char *)(result + 24) & 2) == 0) {
    operator new();
  }
  return result;
}

uint64_t sub_19038AFB0(uint64_t result)
{
  if ((*(unsigned char *)(result + 24) & 2) == 0) {
    operator new();
  }
  return result;
}

void sub_19038B02C()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19038B070(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_19038B084(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3)
  {
    int v3 = (char)*a2;
    BOOL v4 = (v3 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v4 && (v3 - 123) >= 3) {
      sub_19038B6DC(a1);
    }
  }
  return a2;
}

void *sub_19038B0F8(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19038B164(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x192FCC980);
}

void sub_19038B1F0()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19038B234(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19038B248(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    unsigned int v5 = v4 - 48;
    if (v4 == 48) {
      sub_19038B6DC(a1);
    }
    if ((v4 - 49) <= 8)
    {
      uint64_t v6 = a2 + 1;
      if (a2 + 1 == a3) {
        goto LABEL_12;
      }
      do
      {
        int v7 = *v6;
        if ((v7 - 48) > 9) {
          break;
        }
        if (v5 >= 0x19999999) {
          goto LABEL_14;
        }
        ++v6;
        unsigned int v5 = v7 + 10 * v5 - 48;
      }
      while (v6 != a3);
      if (v5)
      {
LABEL_12:
        if (v5 <= *(_DWORD *)(a1 + 28)) {
          sub_19038B874(a1);
        }
      }
LABEL_14:
      sub_19038B81C();
    }
  }
  return a2;
}

char *sub_19038B308(uint64_t a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v3 = *a2;
  if (v3 > 99)
  {
    if (v3 == 119) {
      goto LABEL_12;
    }
    if (v3 == 115) {
LABEL_13:
    }
      sub_19038C4D4();
    if (v3 != 100) {
      return a2;
    }
LABEL_10:
    sub_19038C4D4();
  }
  switch(v3)
  {
    case 'D':
      goto LABEL_10;
    case 'S':
      goto LABEL_13;
    case 'W':
LABEL_12:
      sub_19038C4D4();
  }
  return a2;
}

unsigned __int8 *sub_19038B3D8(uint64_t a1, char *a2, char *a3, std::string *this)
{
  int v4 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v4;
  }
  int v5 = *a2;
  if (v5 > 109)
  {
    char v6 = 0;
    switch(*a2)
    {
      case 'n':
        if (!this) {
          goto LABEL_52;
        }
        int v7 = this;
        std::string::value_type v8 = 10;
        goto LABEL_50;
      case 'r':
        if (!this) {
          goto LABEL_52;
        }
        int v7 = this;
        std::string::value_type v8 = 13;
        goto LABEL_50;
      case 't':
        if (!this) {
          goto LABEL_52;
        }
        int v7 = this;
        std::string::value_type v8 = 9;
        goto LABEL_50;
      case 'u':
        if (a2 + 1 == a3) {
          goto LABEL_55;
        }
        int v9 = a2[1];
        if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
          goto LABEL_55;
        }
        int v4 = a2 + 2;
        if (a2 + 2 == a3) {
          goto LABEL_55;
        }
        int v10 = *v4;
        char v11 = -48;
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
          goto LABEL_24;
        }
        v10 |= 0x20u;
        if ((v10 - 97) >= 6) {
          goto LABEL_55;
        }
        char v11 = -87;
LABEL_24:
        char v6 = 16 * (v11 + v10);
LABEL_25:
        if (v4 + 1 == a3) {
          goto LABEL_55;
        }
        int v12 = v4[1];
        char v13 = -48;
        if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
          goto LABEL_30;
        }
        v12 |= 0x20u;
        if ((v12 - 97) >= 6) {
          goto LABEL_55;
        }
        char v13 = -87;
LABEL_30:
        if (v4 + 2 == a3) {
          goto LABEL_55;
        }
        int v14 = v4[2];
        char v15 = -48;
        if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
          goto LABEL_35;
        }
        v14 |= 0x20u;
        if ((v14 - 97) >= 6) {
          goto LABEL_55;
        }
        char v15 = -87;
LABEL_35:
        if (!this) {
          sub_19038B6DC(a1);
        }
        std::string::operator=(this, v15 + v14 + 16 * (v13 + v12 + v6));
        v4 += 3;
        break;
      case 'v':
        if (!this) {
          goto LABEL_52;
        }
        int v7 = this;
        std::string::value_type v8 = 11;
        goto LABEL_50;
      case 'x':
        goto LABEL_25;
      default:
        goto LABEL_45;
    }
    return (unsigned __int8 *)v4;
  }
  if (v5 == 48)
  {
    if (this)
    {
      int v7 = this;
      std::string::value_type v8 = 0;
      goto LABEL_50;
    }
LABEL_52:
    sub_19038B6DC(a1);
  }
  if (v5 != 99)
  {
    if (v5 == 102)
    {
      if (this)
      {
        int v7 = this;
        std::string::value_type v8 = 12;
LABEL_50:
        std::string::operator=(v7, v8);
        return (unsigned __int8 *)++v4;
      }
      goto LABEL_52;
    }
LABEL_45:
    if (*a2 != 95
      && ((v5 & 0x80) != 0
       || (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 16) + 4 * *a2) & 0x500) == 0))
    {
      std::string::value_type v8 = *a2;
      if (this)
      {
        int v7 = this;
        goto LABEL_50;
      }
      goto LABEL_52;
    }
LABEL_55:
    sub_19038B1F0();
  }
  if (a2 + 1 == a3) {
    goto LABEL_55;
  }
  char v16 = a2[1];
  if (((v16 & 0xDF) - 65) > 0x19u) {
    goto LABEL_55;
  }
  if (!this) {
    sub_19038B6DC(a1);
  }
  std::string::operator=(this, v16 & 0x1F);
  v4 += 2;
  return (unsigned __int8 *)v4;
}

void sub_19038B6DC(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_19038B7F8(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void sub_19038B81C()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19038B860(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19038B874(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 24);
  if ((v1 & 1) == 0)
  {
    if ((v1 & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t sub_19038B9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_1EDFD0C78;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 40) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_19038BA38(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  void *v1 = &unk_1EDFD0B90;
  uint64_t v4 = v1[1];
  if (v4) {
    sub_1905F4DA4(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *sub_19038BA78(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0C78;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_19038BB04(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0C78;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19038BBB0(uint64_t result, uint64_t a2)
{
  int v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_19038BC44(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0D08;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_19038BCD0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0D08;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19038BD7C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

void *sub_19038BDC4(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19038BE30(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19038BEBC(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

std::locale *sub_19038BF04(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B60;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_19038BF90(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B60;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19038C03C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 80) = v6;
  return result;
}

std::locale *sub_19038C154(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0C48;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void sub_19038C1E0(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0C48;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19038C28C(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      int v9 = *(unsigned __int8 **)(a2 + 16);
      uint64_t v10 = v6;
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v9++;
        if (v11 != v13) {
          break;
        }
        if (!--v10) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 80) = v8;
  return result;
}

void *sub_19038C31C(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19038C388(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x192FCC980);
}

unsigned int *sub_19038C414(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    sub_19038B81C();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 80) = v10;
  return result;
}

void sub_19038C4D4()
{
}

void sub_19038C54C(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void sub_19038C570(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        long long v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          long long v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_1903479E8();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      char v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        long long v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          unsigned int v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned int v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  long long v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    unint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

uint64_t sub_19038C7B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)a1 = &unk_1EDFD0CA8;
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 170) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_19038C900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  sub_190387A4C((void ***)&a10);
  std::string v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  sub_19038D2D8((void ***)&a10);
  unint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  unint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *unint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void sub_19038C99C(std::locale *a1)
{
  sub_19038D40C(a1);

  JUMPOUT(0x192FCC980);
}

void sub_19038C9D4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(signed __int8 **)(a2 + 16);
  unsigned int v5 = *(signed __int8 **)(a2 + 24);
  if (v4 == v5)
  {
    uint64_t v37 = 0;
    int v36 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_221;
  }
  if (!*(unsigned char *)(a1 + 171) || v4 + 1 == v5) {
    goto LABEL_58;
  }
  signed __int8 v6 = *v4;
  unsigned __int8 v125 = *v4;
  signed __int8 v7 = v4[1];
  unsigned __int8 v126 = v7;
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v125 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v6);
    unsigned __int8 v126 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v7);
  }
  uint64_t v8 = a1 + 16;
  sub_19038D5AC(a1 + 16, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124) {
      goto LABEL_8;
    }
LABEL_58:
    int v36 = 0;
    uint64_t v37 = 1;
    goto LABEL_59;
  }
  size_t v38 = v123;
  operator delete(__p);
  if (!v38) {
    goto LABEL_58;
  }
LABEL_8:
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 120) - v9;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    BOOL v12 = (unsigned char *)(v9 + 1);
    do
    {
      if (v125 == *(v12 - 1) && v126 == *v12) {
        goto LABEL_218;
      }
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  if (!*(unsigned char *)(a1 + 170) || *(void *)(a1 + 88) == *(void *)(a1 + 96))
  {
    int v36 = 0;
  }
  else
  {
    sub_19038D4F4(a1 + 16, (char *)&v125, (char *)&v127);
    uint64_t v14 = *(void *)(a1 + 88);
    char v15 = v124;
    uint64_t v16 = *(void *)(a1 + 96) - v14;
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v16 / 48;
      char v113 = v124;
      if (v124 >= 0) {
        size_t v19 = v124;
      }
      else {
        size_t v19 = v123;
      }
      if (v124 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v18 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v16 / 48;
      }
      BOOL v22 = 1;
      while (1)
      {
        int v23 = *(char *)(v14 + 23);
        if (v23 >= 0) {
          size_t v24 = *(unsigned __int8 *)(v14 + 23);
        }
        else {
          size_t v24 = *(void *)(v14 + 8);
        }
        if (v23 >= 0) {
          char v25 = (const void *)v14;
        }
        else {
          char v25 = *(const void **)v14;
        }
        if (v24 >= v19) {
          size_t v26 = v19;
        }
        else {
          size_t v26 = v24;
        }
        int v27 = memcmp(p_p, v25, v26);
        BOOL v28 = v19 >= v24;
        if (v27) {
          BOOL v28 = v27 >= 0;
        }
        if (v28)
        {
          int v29 = *(char *)(v14 + 47);
          if (v29 >= 0) {
            size_t v30 = *(unsigned __int8 *)(v14 + 47);
          }
          else {
            size_t v30 = *(void *)(v14 + 32);
          }
          if (v29 >= 0) {
            unsigned int v31 = (const void *)(v14 + 24);
          }
          else {
            unsigned int v31 = *(const void **)(v14 + 24);
          }
          if (v19 >= v30) {
            size_t v32 = v30;
          }
          else {
            size_t v32 = v19;
          }
          int v33 = memcmp(v31, p_p, v32);
          BOOL v34 = v30 >= v19;
          if (v33) {
            BOOL v34 = v33 >= 0;
          }
          if (v34) {
            break;
          }
        }
        BOOL v22 = ++v17 < v18;
        v14 += 48;
        if (v21 == v17)
        {
          int v35 = 0;
          int v36 = 0;
          goto LABEL_162;
        }
      }
      int v36 = 1;
      int v35 = 5;
LABEL_162:
      uint64_t v8 = a1 + 16;
      char v15 = v113;
    }
    else
    {
      BOOL v22 = 0;
      int v35 = 0;
      int v36 = 0;
    }
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v22) {
      goto LABEL_195;
    }
  }
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_200;
  }
  sub_19038D804(v8, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  uint64_t v89 = *(void *)(a1 + 136);
  uint64_t v90 = v124;
  uint64_t v91 = *(void *)(a1 + 144) - v89;
  if (v91)
  {
    uint64_t v92 = 0;
    unint64_t v93 = v91 / 24;
    unint64_t v95 = __p;
    size_t v94 = v123;
    if (v124 >= 0) {
      size_t v96 = v124;
    }
    else {
      size_t v96 = v123;
    }
    if (v93 <= 1) {
      uint64_t v97 = 1;
    }
    else {
      uint64_t v97 = v91 / 24;
    }
    BOOL v98 = 1;
    while (1)
    {
      unint64_t v99 = (unsigned __int8 **)(v89 + 24 * v92);
      int v100 = (unsigned __int8 *)*((unsigned __int8 *)v99 + 23);
      int v101 = (char)v100;
      if ((char)v100 < 0) {
        int v100 = v99[1];
      }
      if ((unsigned __int8 *)v96 == v100)
      {
        if (v101 >= 0) {
          unint64_t v102 = (unsigned __int8 *)(v89 + 24 * v92);
        }
        else {
          unint64_t v102 = *v99;
        }
        if ((v90 & 0x80) == 0)
        {
          if (v90)
          {
            uint64_t v103 = &__p;
            uint64_t v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != *v102) {
                goto LABEL_188;
              }
              uint64_t v103 = (void **)((char *)v103 + 1);
              ++v102;
              --v104;
            }
            while (v104);
            int v36 = 1;
            int v35 = 5;
            goto LABEL_192;
          }
          int v36 = 1;
          if (v98) {
            goto LABEL_220;
          }
LABEL_200:
          if ((char)v125 < 0)
          {
            int v109 = *(_DWORD *)(a1 + 164);
            goto LABEL_213;
          }
          int v106 = *(_DWORD *)(a1 + 160);
          uint64_t v107 = *(void *)(*(void *)(a1 + 24) + 16);
          int v108 = *(_DWORD *)(v107 + 4 * v125);
          if ((v108 & v106) == 0 && (v125 != 95 || (v106 & 0x80) == 0)
            || (char)v126 < 0
            || (*(_DWORD *)(v107 + 4 * v126) & v106) == 0 && ((v106 & 0x80) == 0 || v126 != 95))
          {
            int v109 = *(_DWORD *)(a1 + 164);
            if ((v108 & v109) != 0 || v125 == 95 && (v109 & 0x80) != 0)
            {
LABEL_217:
              int v110 = v36;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v126) & v109) != 0) {
                goto LABEL_217;
              }
              int v110 = 1;
              if (v126 == 95 && (v109 & 0x80) != 0) {
                goto LABEL_217;
              }
LABEL_219:
              int v36 = v110;
LABEL_220:
              uint64_t v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          int v110 = 1;
          goto LABEL_219;
        }
        unint64_t v118 = v93;
        uint64_t v121 = v90;
        int v105 = memcmp(v95, v102, v94);
        unint64_t v93 = v118;
        uint64_t v90 = v121;
        if (!v105) {
          break;
        }
      }
LABEL_188:
      BOOL v98 = ++v92 < v93;
      if (v92 == v97) {
        goto LABEL_191;
      }
    }
    int v35 = 5;
    int v36 = 1;
    goto LABEL_193;
  }
  BOOL v98 = 0;
LABEL_191:
  int v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0) {
LABEL_193:
  }
    operator delete(__p);
  if (!v98) {
    goto LABEL_200;
  }
LABEL_195:
  if (v35) {
    goto LABEL_220;
  }
  uint64_t v37 = 2;
LABEL_59:
  unsigned __int8 v39 = **(unsigned char **)(a2 + 16);
  unsigned __int8 v125 = v39;
  if (*(unsigned char *)(a1 + 169))
  {
    unsigned __int8 v39 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), (char)v39);
    unsigned __int8 v125 = v39;
  }
  long long v40 = *(unsigned __int8 **)(a1 + 40);
  unint64_t v41 = *(void *)(a1 + 48) - (void)v40;
  if (v41)
  {
    if (v41 <= 1) {
      unint64_t v41 = 1;
    }
    while (1)
    {
      int v42 = *v40++;
      if (v42 == v39) {
        break;
      }
      if (!--v41) {
        goto LABEL_66;
      }
    }
LABEL_77:
    int v36 = 1;
    goto LABEL_221;
  }
LABEL_66:
  unsigned int v43 = *(_DWORD *)(a1 + 164);
  if (v43 || *(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    if ((v39 & 0x80) != 0 || (*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v39) & v43) == 0) {
      int v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    int v45 = *(void **)(a1 + 72);
    BOOL v46 = memchr(*(void **)(a1 + 64), (char)v39, (size_t)v45 - *(void *)(a1 + 64));
    int v47 = v46 ? v46 : v45;
    if ((v44 & 1) == 0 && v47 == v45) {
      goto LABEL_77;
    }
  }
  uint64_t v49 = *(void *)(a1 + 88);
  uint64_t v48 = *(void *)(a1 + 96);
  if (v49 != v48)
  {
    if (*(unsigned char *)(a1 + 170))
    {
      sub_19038D4F4(a1 + 16, (char *)&v125, (char *)&v126);
      uint64_t v49 = *(void *)(a1 + 88);
      uint64_t v48 = *(void *)(a1 + 96);
    }
    else
    {
      char v124 = 1;
      LOWORD(__p) = v39;
    }
    uint64_t v50 = v48 - v49;
    if (v50)
    {
      uint64_t v119 = v37;
      int v116 = v36;
      uint64_t v51 = 0;
      unint64_t v52 = v50 / 48;
      char v114 = v124;
      if (v124 >= 0) {
        size_t v53 = v124;
      }
      else {
        size_t v53 = v123;
      }
      if (v124 >= 0) {
        unsigned int v54 = &__p;
      }
      else {
        unsigned int v54 = __p;
      }
      if (v52 <= 1) {
        uint64_t v55 = 1;
      }
      else {
        uint64_t v55 = v50 / 48;
      }
      BOOL v56 = 1;
      while (1)
      {
        int v57 = *(char *)(v49 + 23);
        if (v57 >= 0) {
          size_t v58 = *(unsigned __int8 *)(v49 + 23);
        }
        else {
          size_t v58 = *(void *)(v49 + 8);
        }
        if (v57 >= 0) {
          unint64_t v59 = (const void *)v49;
        }
        else {
          unint64_t v59 = *(const void **)v49;
        }
        if (v58 >= v53) {
          size_t v60 = v53;
        }
        else {
          size_t v60 = v58;
        }
        int v61 = memcmp(v54, v59, v60);
        BOOL v62 = v53 >= v58;
        if (v61) {
          BOOL v62 = v61 >= 0;
        }
        if (v62)
        {
          int v63 = *(char *)(v49 + 47);
          if (v63 >= 0) {
            size_t v64 = *(unsigned __int8 *)(v49 + 47);
          }
          else {
            size_t v64 = *(void *)(v49 + 32);
          }
          if (v63 >= 0) {
            unint64_t v65 = (const void *)(v49 + 24);
          }
          else {
            unint64_t v65 = *(const void **)(v49 + 24);
          }
          if (v53 >= v64) {
            size_t v66 = v64;
          }
          else {
            size_t v66 = v53;
          }
          int v67 = memcmp(v65, v54, v66);
          BOOL v68 = v64 >= v53;
          if (v67) {
            BOOL v68 = v67 >= 0;
          }
          if (v68) {
            break;
          }
        }
        BOOL v56 = ++v51 < v52;
        v49 += 48;
        if (v55 == v51)
        {
          int v36 = v116;
          goto LABEL_123;
        }
      }
      int v36 = 1;
LABEL_123:
      uint64_t v37 = v119;
      if ((v114 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    else
    {
      BOOL v56 = 0;
      if ((v124 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    operator delete(__p);
LABEL_125:
    if (v56) {
      goto LABEL_221;
    }
  }
  if (*(void *)(a1 + 136) == *(void *)(a1 + 144)) {
    goto LABEL_154;
  }
  sub_19038D804(a1 + 16, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  uint64_t v69 = *(void *)(a1 + 136);
  uint64_t v70 = v124;
  uint64_t v71 = *(void *)(a1 + 144) - v69;
  if (v71)
  {
    uint64_t v120 = v37;
    uint64_t v72 = 0;
    unint64_t v73 = v71 / 24;
    unint64_t v74 = __p;
    size_t v75 = v123;
    if (v124 >= 0) {
      size_t v76 = v124;
    }
    else {
      size_t v76 = v123;
    }
    if (v73 <= 1) {
      uint64_t v77 = 1;
    }
    else {
      uint64_t v77 = v71 / 24;
    }
    BOOL v78 = 1;
    while (1)
    {
      unint64_t v79 = (unsigned __int8 **)(v69 + 24 * v72);
      unsigned int v80 = (unsigned __int8 *)*((unsigned __int8 *)v79 + 23);
      int v81 = (char)v80;
      if ((char)v80 < 0) {
        unsigned int v80 = v79[1];
      }
      if ((unsigned __int8 *)v76 == v80)
      {
        if (v81 >= 0) {
          unsigned int v82 = (unsigned __int8 *)(v69 + 24 * v72);
        }
        else {
          unsigned int v82 = *v79;
        }
        if ((v70 & 0x80) != 0)
        {
          int v117 = v36;
          unint64_t v85 = v73;
          uint64_t v115 = v77;
          int v86 = memcmp(v74, v82, v75);
          uint64_t v77 = v115;
          unint64_t v73 = v85;
          int v36 = v117;
          if (!v86)
          {
            int v36 = 1;
            uint64_t v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!v70)
          {
            int v36 = 1;
            uint64_t v37 = v120;
            if (!v78) {
              goto LABEL_154;
            }
            goto LABEL_221;
          }
          unint64_t v83 = &__p;
          uint64_t v84 = v70;
          while (*(unsigned __int8 *)v83 == *v82)
          {
            unint64_t v83 = (void **)((char *)v83 + 1);
            ++v82;
            if (!--v84)
            {
              int v36 = 1;
              goto LABEL_149;
            }
          }
        }
      }
      BOOL v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        uint64_t v37 = v120;
        if ((v70 & 0x80) == 0) {
          goto LABEL_153;
        }
        goto LABEL_152;
      }
    }
  }
  BOOL v78 = 0;
  if (v124 < 0) {
LABEL_152:
  }
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0) {
      goto LABEL_221;
    }
    unsigned int v87 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(void *)(*(void *)(a1 + 24) + 16) + 4 * v125) & v87) == 0)
    {
      int v88 = (v87 >> 7) & 1;
      if (v125 != 95) {
        int v88 = 0;
      }
      if (v88 != 1) {
        goto LABEL_221;
      }
    }
    goto LABEL_77;
  }
LABEL_221:
  if (v36 == *(unsigned __int8 *)(a1 + 168))
  {
    uint64_t v111 = 0;
    int v112 = -993;
  }
  else
  {
    *(void *)(a2 + 16) += v37;
    uint64_t v111 = *(void *)(a1 + 8);
    int v112 = -995;
  }
  *(_DWORD *)a2 = v112;
  *(void *)(a2 + 80) = v111;
}

void sub_19038D2D8(void ***a1)
{
  uint64_t v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unsigned int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_19038D370((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_19038D370(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t sub_19038D3C8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

std::locale *sub_19038D40C(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0CA8;
  signed __int8 v7 = a1 + 17;
  sub_190387A4C((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  signed __int8 v7 = a1 + 11;
  sub_19038D2D8((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  uint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_1EDFD0B90;
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void sub_19038D4F4(uint64_t a1, char *a2, char *a3)
{
  sub_19038D75C(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19038D590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19038D5AC(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  sub_19038D75C(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_19038D728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19038D75C(void *result, char *a2, char *a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_190347B9C();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *unint64_t v4 = result;
    unint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)unint64_t v4 = v10;
    unint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)unint64_t v4 = 0;
  return result;
}

void sub_19038D804(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  sub_19038D75C(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = (unsigned char *)a4;
      }
      else {
        char v10 = *(unsigned char **)a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19038D8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19038D914()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19038D958(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_19038D96C(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = sub_19038DEFC(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      uint64_t v10 = sub_19038DD1C(a1, a2 + 2, a3, a4);
LABEL_34:
      uint64_t v6 = v10;
      char v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  uint64_t v18 = sub_19038DFB8(a1, a2 + 2, a3, (uint64_t)&v26);
  unint64_t v4 = (unsigned char *)v18;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  uint64_t v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          uint64_t v14 = sub_19038E1E4(a1, v13, a3, &v26);
        }
        else
        {
          uint64_t v14 = (char *)sub_19038E0A8(a1, v13, a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    uint64_t v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (uint64_t v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          sub_19038E814(v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      uint64_t v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_36;
      }
LABEL_28:
      sub_19038C570(v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    char v20 = 1;
    unint64_t v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  unint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    uint64_t v22 = sub_19038DFB8(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    unint64_t v4 = (unsigned char *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if (v16 == 92)
    {
      if (v11) {
        uint64_t v22 = (uint64_t)sub_19038E1E4(a1, v14 + 2, a3, &v25);
      }
      else {
        uint64_t v22 = (uint64_t)sub_19038E0A8(a1, v14 + 2, a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  sub_19038E3EC(v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v20) {
    return v4;
  }
  return (unsigned char *)v6;
}

void sub_19038DCBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19038DD1C(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  for (uint64_t i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_33;
    }
  }
  if (&a2[i] == a3) {
LABEL_33:
  }
    sub_19038D914();
  sub_19038EB0C(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    uint64_t v8 = v19;
    if (v19)
    {
      int v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    sub_19038EA70();
  }
  uint64_t v8 = v18;
  if (!v18) {
    goto LABEL_34;
  }
  int v9 = (char *)v17;
LABEL_14:
  sub_19038ECBC(a1, v9, &v9[v8], (uint64_t)__p);
  unint64_t v10 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10)
  {
    sub_19038EAC8(a4, (long long *)__p);
  }
  else
  {
    uint64_t v11 = v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v11 = v18;
    }
    if (v11 == 2)
    {
      unint64_t v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        unint64_t v13 = (char *)v17;
      }
      sub_19038E814((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1) {
        sub_19038EA70();
      }
      int v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        int v12 = (char *)v17;
      }
      sub_19038C570((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v17);
  }
  return (uint64_t)&a2[i + 2];
}

void sub_19038DEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_19038DEFC(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_11;
    }
  }
  if (&a2[i] == a3) {
LABEL_11:
  }
    sub_19038D914();
  int v7 = sub_19038F1D0(a1, a2, &a2[i], *(unsigned char *)(a1 + 24) & 1);
  if (!v7) {
    sub_19038F178();
  }
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t sub_19038DFB8(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    sub_19038D914();
  sub_19038EB0C(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    sub_19038EA70();
  }
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *sub_19038E0A8(uint64_t a1, char *a2, char *a3, std::string *this, uint64_t a5)
{
  if (a2 == a3) {
    sub_19038B1F0();
  }
  int v6 = *a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_19038C570(a5, 95);
        return (unsigned __int8 *)(a2 + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        long long v10 = this;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (unsigned __int8 *)(a2 + 1);
      }
      if (v6 != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return (unsigned __int8 *)(a2 + 1);
  }
  if (v6 <= 82)
  {
    if (*a2)
    {
      if (v6 == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (unsigned __int8 *)(a2 + 1);
      }
      goto LABEL_25;
    }
    std::string::value_type v9 = 0;
    long long v10 = this;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    sub_19038F2A4(a5, 95);
    return (unsigned __int8 *)(a2 + 1);
  }
LABEL_25:

  return sub_19038B3D8(a1, a2, a3, this);
}

char *sub_19038E1E4(uint64_t a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_45:
  }
    sub_19038B1F0();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (!this) {
          goto LABEL_43;
        }
        int v6 = this;
        LOBYTE(v5) = 10;
        goto LABEL_16;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (!this) {
          goto LABEL_43;
        }
        int v6 = this;
        LOBYTE(v5) = 13;
        goto LABEL_16;
      case 't':
        if (!this) {
          goto LABEL_43;
        }
        int v6 = this;
        LOBYTE(v5) = 9;
        goto LABEL_16;
      case 'v':
        if (!this) {
          goto LABEL_43;
        }
        int v6 = this;
        LOBYTE(v5) = 11;
        goto LABEL_16;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            int v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            int v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
        }
        break;
    }
    goto LABEL_43;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        int v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
LABEL_43:
      sub_19038B6DC(a1);
    }
LABEL_14:
    if (this)
    {
      int v6 = this;
      goto LABEL_16;
    }
    goto LABEL_43;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_45;
  }
  std::string::value_type v7 = v5 - 48;
  unint64_t v11 = a2 + 1;
  if (a2 + 1 == a3)
  {
LABEL_38:
    unint64_t v11 = a3;
    goto LABEL_39;
  }
  if ((*v11 & 0xF8) == 0x30)
  {
    std::string::value_type v7 = *v11 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v8 = a2[2];
      int v9 = v8 & 0xF8;
      std::string::value_type v10 = v8 + 8 * v7 - 48;
      if (v9 == 48) {
        unint64_t v11 = a2 + 3;
      }
      else {
        unint64_t v11 = a2 + 2;
      }
      if (v9 == 48) {
        std::string::value_type v7 = v10;
      }
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_39:
  if (!this) {
    sub_19038B6DC(a1);
  }
  std::string::operator=(this, v7);
  return v11;
}

void sub_19038E3EC(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        char v8 = v4;
        if (v4[23] < 0) {
          char v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        std::string::value_type v10 = v4;
        if (v4[23] < 0) {
          std::string::value_type v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        unint64_t v13 = v3;
        if (v3[23] < 0) {
          unint64_t v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        int v15 = v3;
        if (v3[23] < 0) {
          int v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        unsigned __int8 v19 = a2;
        if (a2[23] < 0) {
          unsigned __int8 v19 = *(char **)a2;
        }
        char v20 = a2;
        if (a2[23] < 0) {
          char v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        int v23 = a3;
        if (a3[23] < 0) {
          int v23 = *(char **)a3;
        }
        std::string v24 = a3;
        if (a3[23] < 0) {
          std::string v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      std::string v26 = v4;
      unint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    sub_19038F658(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      uint64_t v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    sub_19038F658(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)long long v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::string __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    sub_19038F4EC((uint64_t *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = a3[23]), v29 != 1)) {
      sub_19038F710();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      size_t v30 = a2;
      if (a2[23] < 0) {
        size_t v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v30);
      size_t v32 = v4;
      if (v4[23] < 0) {
        size_t v32 = *(unsigned char **)v4;
      }
      *size_t v32 = v31;
      int v33 = v3;
      if (v3[23] < 0) {
        int v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v33);
      int v35 = v3;
      if (v3[23] < 0) {
        int v35 = *(unsigned char **)v3;
      }
      *int v35 = v34;
    }
    *(_OWORD *)long long v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    sub_19038F4EC((uint64_t *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_19038E7C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void sub_19038E814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    std::string::value_type v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)sub_19038F9E8(v18, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v27 = &v25[2 * v21];
        uint64_t v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)sub_19038F9E8(v18, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v27 = &v37[2 * v33];
        uint64_t v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    sub_1903479E8();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *char v9 = v8;
    std::string v26 = v9 + 1;
    goto LABEL_48;
  }
  std::string::value_type v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3) {
    goto LABEL_49;
  }
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)sub_19038F9E8(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v27 = &v17[2 * v13];
  uint64_t v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  std::string v26 = v27 + 2;
  size_t v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 120) = v26;
  *(void *)(a1 + 128) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 120) = v26;
}

void sub_19038EA70()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19038EAB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19038EAC8(uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = sub_19038EE2C(v3, a2);
  }
  else
  {
    sub_19038EDCC(v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void sub_19038EB0C(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  sub_19038D75C(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_19038EC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19038ECBC(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  sub_19038D75C(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a4;
      }
      else {
        uint64_t v10 = *(unsigned char **)a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19038EDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19038EDCC(void *result, long long *a2)
{
  char v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_190347AFC((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_19038EE24(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_19038EE2C(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1903479E8();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_19038A2C8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::string v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_190347AFC(v11, *(void **)a2, *((void *)a2 + 1));
    std::string v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string v11 = v12;
  }
  uint64_t v16 = v11 + 24;
  sub_19038EF50(a1, v15);
  uint64_t v13 = a1[1];
  sub_19038F0E8((uint64_t)v15);
  return v13;
}

void sub_19038EF3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19038F0E8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19038EF50(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19038EFC8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_19038EFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  sub_19038F068((uint64_t)v12);
  return a6;
}

uint64_t sub_19038F068(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19038F0A0(a1);
  }
  return a1;
}

void sub_19038F0A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

uint64_t sub_19038F0E8(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_19038F120(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_19038F178()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19038F1BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19038F1D0(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  sub_19038D75C(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_19038F288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19038F2A4(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    uint64_t v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      uint64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          unsigned __int8 v12 = operator new(v11);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          uint64_t v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_1903479E8();
    }
    goto LABEL_22;
  }
  unint64_t v6 = (unint64_t *)(a1 + 64);
  uint64_t v5 = *(unsigned char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unsigned __int8 v12 = operator new(v28);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        uint64_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          __int16 v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *uint64_t v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  long long v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    unsigned __int8 v12 = operator new(v18);
  }
  else {
    unsigned __int8 v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  unsigned __int8 v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 80) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

void **sub_19038F4EC(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_1903479E8();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    v19[4] = result;
    if (v14) {
      long long v15 = (char *)sub_19038F7E0((uint64_t)result, v14);
    }
    else {
      long long v15 = 0;
    }
    unint64_t v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v16 = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    v19[2] = v16 + 48;
    sub_19038F768(a1, v19);
    uint64_t v10 = a1[1];
    uint64_t result = sub_19038F96C(v19);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_19038F644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19038F96C((void **)va);
  _Unwind_Resume(a1);
}

void sub_19038F658(uint64_t a1, char *a2, char *a3)
{
  sub_19038D75C(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unint64_t v5 = __p;
  }
  else {
    unint64_t v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19038F6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19038F710()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19038F754(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_19038F768(uint64_t *a1, void *a2)
{
  uint64_t result = sub_19038F828((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_19038F7E0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_190347AC8();
  }
  return operator new(48 * a2);
}

uint64_t sub_19038F828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  sub_19038F8E0((uint64_t)v13);
  return a6;
}

uint64_t sub_19038F8E0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_19038F918((uint64_t *)a1);
  }
  return a1;
}

void sub_19038F918(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_19038D370(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **sub_19038F96C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_19038F9A0(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    sub_19038D370(v4, i - 48);
  }
}

void *sub_19038F9E8(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    sub_190347AC8();
  }
  return operator new(2 * a2);
}

void *sub_19038FA1C(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19038FA88(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19038FB14(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void *sub_19038FB44(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_19038FBB0(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19038FC3C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_19038FC74()
{
}

void sub_19038FDCC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_19038FE04(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            sub_19038FEA4();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return a2;
}

void sub_19038FEA4()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19038FEE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19038FEFC()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_19038FF40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_19038FF58(void *a1)
{
  sub_1903900B0(a1);

  JUMPOUT(0x192FCC980);
}

unsigned int *sub_19038FF90(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    *int v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return sub_190390164(result, a2);
    }
    goto LABEL_23;
  }
  *int v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *sub_190390044(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return sub_190390164(result, a3);
  }
  return result;
}

void sub_190390078(void *a1)
{
  sub_1903900B0(a1);

  JUMPOUT(0x192FCC980);
}

void *sub_1903900B0(void *a1)
{
  *a1 = &unk_1EDFD0BC0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *a1 = &unk_1EDFD0B90;
  uint64_t v3 = a1[1];
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

unsigned int *sub_190390164(unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    uint64_t v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(void *)(v7 - 8) = v5;
      *(void *)uint64_t v7 = v5;
      *(unsigned char *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_1903901BC()
{
}

uint64_t sub_1903901D0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_1903901E8(void *a1)
{
  sub_1903900B0(a1);

  JUMPOUT(0x192FCC980);
}

void sub_190390220(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_19039022C(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 80) = *(void *)(result + v3);
  return result;
}

void sub_190390254()
{
}

uint64_t sub_190390268(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 80) = *(void *)(result + 8);
  return result;
}

void sub_19039027C()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x192FCC730](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E4FBA2D8], MEMORY[0x1E4FBA200]);
}

void sub_1903902C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1903902D4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = sub_190390370(a1, a2, a3);
  if (v6 == a2) {
    return a2;
  }

  return sub_190390480(a1, v6, a3);
}

unsigned char *sub_190390370(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v6 = sub_190390624(a1, a2, a3);
  uint64_t v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      int v8 = a2[1];
      if (v8 == 40)
      {
        uint64_t v9 = (uint64_t)(a2 + 2);
        sub_19038AF2C(a1);
        do
        {
          uint64_t v10 = (unsigned char *)v9;
          uint64_t v9 = sub_1903902D4(a1, v9, a3);
        }
        while ((unsigned char *)v9 != v10);
        if (v10 == a3 || v10 + 1 == a3 || *v10 != 92 || v10[1] != 41) {
          sub_190389358();
        }
        uint64_t v7 = v10 + 2;
        sub_19038AFB0(a1);
      }
      else
      {
        int v12 = sub_190390910(a1, v8);
        uint64_t v13 = 2;
        if (!v12) {
          uint64_t v13 = 0;
        }
        return &a2[v13];
      }
    }
  }
  return v7;
}

unsigned __int8 *sub_190390480(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if (v4 == 42) {
      sub_19038FC74();
    }
    if (a2 + 1 != a3 && v4 == 92 && a2[1] == 123)
    {
      uint64_t v6 = a2 + 2;
      int v13 = 0;
      uint64_t v7 = sub_19038FE04(a1, a2 + 2, a3, &v13);
      if (v7 == v6) {
        goto LABEL_16;
      }
      if (v7 != a3)
      {
        int v8 = v7 + 1;
        int v9 = *v7;
        if (v9 == 44)
        {
          int v12 = -1;
          uint64_t v10 = sub_19038FE04(a1, v8, a3, &v12);
          if (v10 != a3 && v10 + 1 != a3 && *v10 == 92 && v10[1] == 125)
          {
            if (v12 != -1 && v12 < v13) {
LABEL_16:
            }
              sub_19038FEA4();
LABEL_20:
            sub_19038FC74();
          }
        }
        else if (v8 != a3 && v9 == 92 && *v8 == 125)
        {
          goto LABEL_20;
        }
      }
      sub_19038FEFC();
    }
  }
  return a2;
}

unsigned char *sub_190390624(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = sub_19039075C(a1, a2, a3);
    if (result != a2) {
      return result;
    }
    goto LABEL_12;
  }
  int v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    sub_19038B6DC(a1);
  }
  uint64_t result = sub_19039075C(a1, a2, a3);
  if (result == a2)
  {
    if (*a2 == 46) {
      operator new();
    }
LABEL_12:
    return sub_19038AE18(a1, a2, a3);
  }
  return result;
}

unsigned char *sub_19039075C(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  if (a2 != a3
    && a2 + 1 != a3
    && *a2 == 92
    && ((char)a2[1] - 36) <= 0x3A
    && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
  {
    sub_19038B6DC(a1);
  }
  return a2;
}

void *sub_1903907D8(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v2 = a1[1];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_190390844(void *a1)
{
  *a1 = &unk_1EDFD0B90;
  uint64_t v1 = a1[1];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903908D0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 80) = v3;
  return result;
}

uint64_t sub_190390910(uint64_t a1, unsigned __int8 a2)
{
  if (((a2 & 0xF8) == 0x30 || (a2 & 0xFE) == 0x38) && a2 - 49 <= 8)
  {
    if (a2 - 48 <= *(_DWORD *)(a1 + 28)) {
      sub_19038B874(a1);
    }
    sub_19038B81C();
  }
  return 0;
}

unsigned __int8 *sub_190390970(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_1903909D0(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    sub_19039027C();
  }
  do
  {
    uint64_t v7 = v6;
    int v6 = sub_1903909D0(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *sub_1903909D0(uint64_t a1, char *a2, char *a3)
{
  int v6 = sub_190390B14(a1, a2, a3);
  uint64_t v7 = (unsigned __int8 *)v6;
  if (v6 == a2 && v6 != a3)
  {
    int v8 = *a2;
    if (v8 == 36) {
      sub_190389198();
    }
    if (v8 != 40)
    {
      if (v8 == 94) {
        sub_190389114();
      }
      return (unsigned __int8 *)a2;
    }
    sub_19038AF2C(a1);
    ++*(_DWORD *)(a1 + 36);
    int v9 = (char *)sub_19038808C(a1, a2 + 1, a3);
    if (v9 == a3 || (uint64_t v10 = v9, *v9 != 41)) {
      sub_190389358();
    }
    sub_19038AFB0(a1);
    --*(_DWORD *)(a1 + 36);
    uint64_t v7 = (unsigned __int8 *)(v10 + 1);
  }
  if (v7 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }

  return sub_190388E10(a1, v7, (unsigned __int8 *)a3);
}

char *sub_190390B14(uint64_t a1, char *a2, char *a3)
{
  uint64_t result = sub_190390BFC(a1, a2, a3);
  if (result == a2)
  {
    uint64_t result = sub_190390C88(a1, a2, a3);
    if (result == a2)
    {
      if (a2 != a3 && *a2 == 46) {
        operator new();
      }
      return sub_19038AE18(a1, a2, a3);
    }
  }
  return result;
}

char *sub_190390BFC(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    int v3 = *a2;
    uint64_t v4 = (v3 - 36);
    if (v4 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (v3 - 36)) & 0x5800000080004D1) != 0) {
      return a2;
    }
    if (v4 == 5)
    {
      if (*(_DWORD *)(a1 + 36)) {
        return a2;
      }
    }
    else
    {
LABEL_8:
      if ((v3 - 123) < 2) {
        return a2;
      }
    }
    sub_19038B6DC(a1);
  }
  return a2;
}

char *sub_190390C88(uint64_t a1, char *a2, char *a3)
{
  int v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  uint64_t v4 = (unsigned __int8 *)(a2 + 1);
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  int v5 = (char)*v4;
  BOOL v6 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v6 || (v5 - 123) < 3) {
    sub_19038B6DC(a1);
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    int v8 = sub_190390910(a1, *v4);
    uint64_t v9 = 2;
    if (!v8) {
      uint64_t v9 = 0;
    }
    v3 += v9;
    return v3;
  }

  return sub_19038E1E4(a1, (char *)v4, a3, 0);
}

void sub_190390D60(unint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t v134 = *MEMORY[0x1E4F143B8];
LABEL_2:
  unint64_t v11 = a2 - 24;
  uint64_t v121 = (void **)(a2 - 48);
  unint64_t v124 = a2;
  unint64_t v118 = (void **)(a2 - 72);
  unint64_t v12 = a1;
  while (1)
  {
    a1 = v12;
    uint64_t v13 = v124 - v12;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - v12) >> 3);
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          sub_190392954(*a3, (void **)v11, v131);
          sub_190392954(*a3, (void **)a1, __p);
          BOOL v53 = sub_1903928E8((uint64_t)&v127, (const void **)v131, (const void **)__p);
          if (v130 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v132) < 0) {
            operator delete(v131[0]);
          }
          if (v53)
          {
            long long v54 = *(_OWORD *)a1;
            char v132 = *(void **)(a1 + 16);
            *(_OWORD *)unint64_t v131 = v54;
            long long v55 = *(_OWORD *)v11;
            *(void *)(a1 + 16) = *(void *)(v11 + 16);
            *(_OWORD *)a1 = v55;
            long long v56 = *(_OWORD *)v131;
            *(void *)(v11 + 16) = v132;
            *(_OWORD *)unint64_t v11 = v56;
          }
          break;
        case 3uLL:
          sub_1903922A0((void **)a1, (void **)(a1 + 24), (void **)v11, a3);
          break;
        case 4uLL:
          sub_190394E14(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)v11, a3);
          break;
        case 5uLL:
          sub_190392024(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), (void **)v11, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v13 <= 575)
    {
      if (a5)
      {
        if (a1 == v124) {
          return;
        }
        int v57 = (void **)(a1 + 24);
        if (a1 + 24 == v124) {
          return;
        }
        uint64_t v58 = 0;
        unint64_t v59 = (void **)a1;
        while (2)
        {
          size_t v60 = v57;
          sub_190392954(*a3, v57, v131);
          sub_190392954(*a3, v59, __p);
          BOOL v61 = sub_1903928E8((uint64_t)&v127, (const void **)v131, (const void **)__p);
          if (v130 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v132) < 0)
          {
            operator delete(v131[0]);
            if (!v61) {
              goto LABEL_148;
            }
          }
          else if (!v61)
          {
            goto LABEL_148;
          }
          long long v62 = *(_OWORD *)v60;
          char v128 = v60[2];
          long long v127 = v62;
          v60[1] = 0;
          v60[2] = 0;
          *size_t v60 = 0;
          uint64_t v63 = v58;
          do
          {
            uint64_t v64 = a1 + v63;
            unint64_t v65 = (void **)(a1 + v63 + 24);
            if (*(char *)(a1 + v63 + 47) < 0) {
              operator delete(*v65);
            }
            *(_OWORD *)unint64_t v65 = *(_OWORD *)v64;
            *(void *)(a1 + v63 + 40) = *(void *)(v64 + 16);
            *(unsigned char *)(v64 + 23) = 0;
            *(unsigned char *)uint64_t v64 = 0;
            if (!v63)
            {
              uint64_t v67 = a1;
              goto LABEL_147;
            }
            sub_190392954(*a3, (void **)&v127, v131);
            sub_190392954(*a3, (void **)(a1 + v63 - 24), __p);
            BOOL v66 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
            if (v130 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v132) < 0) {
              operator delete(v131[0]);
            }
            v63 -= 24;
          }
          while (v66);
          uint64_t v67 = a1 + v63 + 24;
          if (*(char *)(a1 + v63 + 47) < 0) {
            operator delete(*(void **)v67);
          }
LABEL_147:
          long long v68 = v127;
          *(void *)(v67 + 16) = v128;
          *(_OWORD *)uint64_t v67 = v68;
LABEL_148:
          int v57 = v60 + 3;
          v58 += 24;
          unint64_t v59 = v60;
          if (v60 + 3 == (void **)v124) {
            return;
          }
          continue;
        }
      }
      if (a1 == v124) {
        return;
      }
      uint64_t v107 = (void **)(a1 + 24);
      if (a1 + 24 == v124) {
        return;
      }
      unint64_t v108 = a1 - 24;
      while (2)
      {
        int v109 = v107;
        sub_190392954(*a3, v107, v131);
        sub_190392954(*a3, (void **)a1, __p);
        BOOL v110 = sub_1903928E8((uint64_t)&v127, (const void **)v131, (const void **)__p);
        if (v130 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v132) < 0)
        {
          operator delete(v131[0]);
          if (!v110) {
            goto LABEL_243;
          }
        }
        else if (!v110)
        {
          goto LABEL_243;
        }
        long long v111 = *(_OWORD *)v109;
        char v128 = v109[2];
        long long v127 = v111;
        v109[1] = 0;
        v109[2] = 0;
        char *v109 = 0;
        unint64_t v112 = v108;
        do
        {
          char v113 = (void **)(v112 + 48);
          if (*(char *)(v112 + 71) < 0) {
            operator delete(*v113);
          }
          *(_OWORD *)char v113 = *(_OWORD *)(v112 + 24);
          *(void *)(v112 + 64) = *(void *)(v112 + 40);
          *(unsigned char *)(v112 + 47) = 0;
          *(unsigned char *)(v112 + 24) = 0;
          sub_190392954(*a3, (void **)&v127, v131);
          sub_190392954(*a3, (void **)v112, __p);
          BOOL v114 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
          if (v130 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v132) < 0) {
            operator delete(v131[0]);
          }
          v112 -= 24;
        }
        while (v114);
        int v115 = *(char *)(v112 + 71);
        unint64_t v116 = v112 + 48;
        if (v115 < 0) {
          operator delete(*(void **)v116);
        }
        long long v117 = v127;
        *(void *)(v116 + 16) = v128;
        *(_OWORD *)unint64_t v116 = v117;
LABEL_243:
        uint64_t v107 = v109 + 3;
        v108 += 24;
        a1 = (unint64_t)v109;
        if (v109 + 3 == (void **)v124) {
          return;
        }
        continue;
      }
    }
    if (!a4) {
      break;
    }
    unint64_t v15 = v14 >> 1;
    unint64_t v16 = a1 + 24 * (v14 >> 1);
    if ((unint64_t)v13 >= 0xC01)
    {
      sub_1903922A0((void **)a1, (void **)(a1 + 24 * (v14 >> 1)), (void **)v11, a3);
      sub_1903922A0((void **)(a1 + 24), (void **)(a1 + 24 * v15 - 24), v121, a3);
      sub_1903922A0((void **)(a1 + 48), (void **)(a1 + 24 * v15 + 24), v118, a3);
      sub_1903922A0((void **)(a1 + 24 * v15 - 24), (void **)v16, (void **)(a1 + 24 * v15 + 24), a3);
      long long v17 = *(_OWORD *)a1;
      char v132 = *(void **)(a1 + 16);
      *(_OWORD *)unint64_t v131 = v17;
      long long v18 = *(_OWORD *)v16;
      *(void *)(a1 + 16) = *(void *)(v16 + 16);
      *(_OWORD *)a1 = v18;
      long long v19 = *(_OWORD *)v131;
      *(void *)(v16 + 16) = v132;
      *(_OWORD *)unint64_t v16 = v19;
    }
    else
    {
      sub_1903922A0((void **)(a1 + 24 * (v14 >> 1)), (void **)a1, (void **)v11, a3);
    }
    --a4;
    if (a5) {
      goto LABEL_16;
    }
    sub_190392954(*a3, (void **)(a1 - 24), v131);
    sub_190392954(*a3, (void **)a1, __p);
    BOOL v20 = sub_1903928E8((uint64_t)&v127, (const void **)v131, (const void **)__p);
    if (v130 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v132) < 0) {
      operator delete(v131[0]);
    }
    if (v20)
    {
LABEL_16:
      uint64_t v21 = 0;
      long long v22 = *(_OWORD *)a1;
      char v128 = *(void **)(a1 + 16);
      long long v127 = v22;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      do
      {
        sub_190392954(*a3, (void **)(a1 + v21 + 24), v131);
        sub_190392954(*a3, (void **)&v127, __p);
        BOOL v23 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
        if (v130 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v132) < 0) {
          operator delete(v131[0]);
        }
        v21 += 24;
      }
      while (v23);
      unint64_t v24 = a1 + v21;
      uint64_t v25 = (void **)v124;
      if (v21 == 24)
      {
        uint64_t v25 = (void **)v124;
        while (v24 < (unint64_t)v25)
        {
          v25 -= 3;
          sub_190392954(*a3, v25, v131);
          sub_190392954(*a3, (void **)&v127, __p);
          BOOL v27 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
          if (v130 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v132) < 0)
          {
            operator delete(v131[0]);
            if (v27) {
              break;
            }
          }
          else if (v27)
          {
            break;
          }
        }
      }
      else
      {
        do
        {
          while (1)
          {
            v25 -= 3;
            sub_190392954(*a3, v25, v131);
            sub_190392954(*a3, (void **)&v127, __p);
            BOOL v26 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
            if (v130 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v132) < 0) {
              break;
            }
            if (v26) {
              goto LABEL_38;
            }
          }
          operator delete(v131[0]);
        }
        while (!v26);
      }
LABEL_38:
      unint64_t v12 = a1 + v21;
      if (v24 < (unint64_t)v25)
      {
        size_t v28 = v25;
        do
        {
          long long v29 = *(_OWORD *)v12;
          char v132 = *(void **)(v12 + 16);
          *(_OWORD *)unint64_t v131 = v29;
          long long v30 = *(_OWORD *)v28;
          *(void *)(v12 + 16) = v28[2];
          *(_OWORD *)unint64_t v12 = v30;
          long long v31 = *(_OWORD *)v131;
          v28[2] = v132;
          *(_OWORD *)size_t v28 = v31;
          do
          {
            while (1)
            {
              v12 += 24;
              sub_190392954(*a3, (void **)v12, v131);
              sub_190392954(*a3, (void **)&v127, __p);
              BOOL v32 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
              if (v130 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v132) < 0) {
                break;
              }
              if (!v32) {
                goto LABEL_49;
              }
            }
            operator delete(v131[0]);
          }
          while (v32);
          do
          {
            while (1)
            {
LABEL_49:
              v28 -= 3;
              sub_190392954(*a3, v28, v131);
              sub_190392954(*a3, (void **)&v127, __p);
              BOOL v33 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
              if (v130 < 0) {
                operator delete(__p[0]);
              }
              if ((SHIBYTE(v132) & 0x80000000) == 0) {
                break;
              }
              operator delete(v131[0]);
              if (v33) {
                goto LABEL_53;
              }
            }
          }
          while (!v33);
LABEL_53:
          ;
        }
        while (v12 < (unint64_t)v28);
      }
      unint64_t v34 = (long long *)(v12 - 24);
      if (v12 - 24 == a1)
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)a1);
        }
      }
      else
      {
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        long long v35 = *v34;
        *(void *)(a1 + 16) = *(void *)(v12 - 8);
        *(_OWORD *)a1 = v35;
        *(unsigned char *)(v12 - 1) = 0;
        *(unsigned char *)(v12 - 24) = 0;
      }
      long long v36 = v127;
      *(void *)(v12 - 8) = v128;
      *unint64_t v34 = v36;
      if (v24 < (unint64_t)v25) {
        goto LABEL_63;
      }
      BOOL v37 = sub_190392574(a1, v12 - 24, a3);
      if (sub_190392574(v12, v124, a3))
      {
        a2 = v12 - 24;
        if (v37) {
          return;
        }
        goto LABEL_2;
      }
      if (!v37)
      {
LABEL_63:
        sub_190390D60(a1, v12 - 24, a3, a4, a5 & 1);
        a5 = 0;
      }
    }
    else
    {
      long long v38 = *(_OWORD *)a1;
      char v128 = *(void **)(a1 + 16);
      long long v127 = v38;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      sub_190392954(*a3, (void **)&v127, v131);
      sub_190392954(*a3, (void **)v11, __p);
      BOOL v39 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
      if (v130 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v132) < 0) {
        operator delete(v131[0]);
      }
      if (v39)
      {
        unint64_t v12 = a1;
        do
        {
          sub_190392954(*a3, (void **)&v127, v131);
          v12 += 24;
          sub_190392954(*a3, (void **)v12, __p);
          BOOL v40 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
          if (v130 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v132) < 0) {
            operator delete(v131[0]);
          }
        }
        while (!v40);
      }
      else
      {
        unint64_t v41 = a1 + 24;
        do
        {
          unint64_t v12 = v41;
          if (v41 >= v124) {
            break;
          }
          sub_190392954(*a3, (void **)&v127, v131);
          sub_190392954(*a3, (void **)v12, __p);
          BOOL v42 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
          if (v130 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v132) < 0) {
            operator delete(v131[0]);
          }
          unint64_t v41 = v12 + 24;
        }
        while (!v42);
      }
      unint64_t v43 = v124;
      if (v12 < v124)
      {
        unint64_t v43 = v124;
        do
        {
          while (1)
          {
            sub_190392954(*a3, (void **)&v127, v131);
            v43 -= 24;
            sub_190392954(*a3, (void **)v43, __p);
            BOOL v44 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
            if (v130 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v132) < 0) {
              break;
            }
            if (!v44) {
              goto LABEL_105;
            }
          }
          operator delete(v131[0]);
        }
        while (v44);
      }
LABEL_105:
      while (v12 < v43)
      {
        long long v45 = *(_OWORD *)v12;
        char v132 = *(void **)(v12 + 16);
        *(_OWORD *)unint64_t v131 = v45;
        long long v46 = *(_OWORD *)v43;
        *(void *)(v12 + 16) = *(void *)(v43 + 16);
        *(_OWORD *)unint64_t v12 = v46;
        long long v47 = *(_OWORD *)v131;
        *(void *)(v43 + 16) = v132;
        *(_OWORD *)unint64_t v43 = v47;
        do
        {
          while (1)
          {
            sub_190392954(*a3, (void **)&v127, v131);
            v12 += 24;
            sub_190392954(*a3, (void **)v12, __p);
            BOOL v48 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
            if (v130 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v132) < 0) {
              break;
            }
            if (v48) {
              goto LABEL_101;
            }
          }
          operator delete(v131[0]);
        }
        while (!v48);
        do
        {
          while (1)
          {
LABEL_101:
            sub_190392954(*a3, (void **)&v127, v131);
            v43 -= 24;
            sub_190392954(*a3, (void **)v43, __p);
            BOOL v49 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
            if (v130 < 0) {
              operator delete(__p[0]);
            }
            if ((SHIBYTE(v132) & 0x80000000) == 0) {
              break;
            }
            operator delete(v131[0]);
            if (!v49) {
              goto LABEL_105;
            }
          }
        }
        while (v49);
      }
      uint64_t v50 = (long long *)(v12 - 24);
      BOOL v5 = v12 - 24 >= a1;
      BOOL v6 = v12 - 24 == a1;
      if (v12 - 24 == a1)
      {
        if (*(char *)(v12 - 1) < 0) {
          operator delete(*(void **)a1);
        }
      }
      else
      {
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        long long v51 = *v50;
        *(void *)(a1 + 16) = *(void *)(v12 - 8);
        *(_OWORD *)a1 = v51;
        *(unsigned char *)(v12 - 1) = 0;
        *(unsigned char *)(v12 - 24) = 0;
      }
      a5 = 0;
      long long v52 = v127;
      *(void *)(v12 - 8) = v128;
      *uint64_t v50 = v52;
    }
  }
  uint64_t v69 = (_OWORD *)v124;
  if (a1 != v124)
  {
    int64_t v70 = (v14 - 2) >> 1;
    int64_t v122 = v70;
    do
    {
      int64_t v71 = v70;
      if (v122 >= v70)
      {
        uint64_t v72 = (2 * v70) | 1;
        unint64_t v73 = a1 + 24 * v72;
        uint64_t v74 = 2 * v70 + 2;
        int64_t v75 = v70;
        if (v74 < (uint64_t)v14)
        {
          sub_190392954(*a3, (void **)(a1 + 24 * v72), v131);
          sub_190392954(*a3, (void **)(v73 + 24), __p);
          BOOL v76 = sub_1903928E8((uint64_t)&v127, (const void **)v131, (const void **)__p);
          if (v130 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v132) < 0) {
            operator delete(v131[0]);
          }
          if (v76)
          {
            v73 += 24;
            uint64_t v72 = v74;
          }
        }
        sub_190392954(*a3, (void **)v73, v131);
        int64_t v119 = v75;
        unint64_t v77 = a1 + 24 * v75;
        sub_190392954(*a3, (void **)v77, __p);
        BOOL v78 = sub_1903928E8((uint64_t)&v127, (const void **)v131, (const void **)__p);
        uint64_t v69 = (_OWORD *)v124;
        if (v130 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v132) < 0) {
          operator delete(v131[0]);
        }
        int64_t v71 = v75;
        if (!v78)
        {
          long long v79 = *(_OWORD *)v77;
          char v128 = *(void **)(v77 + 16);
          long long v127 = v79;
          *(void *)(v77 + 8) = 0;
          *(void *)(v77 + 16) = 0;
          *(void *)unint64_t v77 = 0;
          do
          {
            unint64_t v80 = v73;
            if (*(char *)(v77 + 23) < 0) {
              operator delete(*(void **)v77);
            }
            long long v81 = *(_OWORD *)v73;
            *(void *)(v77 + 16) = *(void *)(v73 + 16);
            *(_OWORD *)unint64_t v77 = v81;
            *(unsigned char *)(v73 + 23) = 0;
            *(unsigned char *)unint64_t v73 = 0;
            if (v122 < v72) {
              goto LABEL_185;
            }
            uint64_t v82 = (2 * v72) | 1;
            unint64_t v73 = a1 + 24 * v82;
            uint64_t v72 = 2 * v72 + 2;
            if (v72 < (uint64_t)v14)
            {
              sub_190392954(*a3, (void **)(a1 + 24 * v82), v131);
              sub_190392954(*a3, (void **)(v73 + 24), __p);
              BOOL v83 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
              if (v130 < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v132) < 0) {
                operator delete(v131[0]);
              }
              if (v83) {
                v73 += 24;
              }
              else {
                uint64_t v72 = v82;
              }
            }
            else
            {
              uint64_t v72 = v82;
            }
            sub_190392954(*a3, (void **)v73, v131);
            sub_190392954(*a3, (void **)&v127, __p);
            BOOL v84 = sub_1903928E8((uint64_t)v133, (const void **)v131, (const void **)__p);
            if (v130 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v132) < 0) {
              operator delete(v131[0]);
            }
            unint64_t v77 = v80;
          }
          while (!v84);
          if (*(char *)(v80 + 23) < 0) {
            operator delete(*(void **)v80);
          }
LABEL_185:
          long long v85 = v127;
          *(void *)(v80 + 16) = v128;
          *(_OWORD *)unint64_t v80 = v85;
          uint64_t v69 = (_OWORD *)v124;
          int64_t v71 = v119;
        }
      }
      int64_t v70 = v71 - 1;
    }
    while (v71);
    int64_t v86 = v13 / 0x18uLL;
    while (2)
    {
      uint64_t v87 = 0;
      uint64_t v120 = v69;
      size_t v123 = *(void **)a1;
      *(void *)unint64_t v133 = *(void *)(a1 + 8);
      *(void *)&v133[7] = *(void *)(a1 + 15);
      char v125 = *(unsigned char *)(a1 + 23);
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      unint64_t v88 = a1;
      do
      {
        uint64_t v89 = v88 + 24 * v87 + 24;
        uint64_t v90 = 2 * v87;
        uint64_t v87 = (2 * v87) | 1;
        uint64_t v91 = v90 + 2;
        if (v90 + 2 < v86)
        {
          sub_190392954(*a3, (void **)v89, v131);
          sub_190392954(*a3, (void **)(v89 + 24), __p);
          BOOL v92 = sub_1903928E8((uint64_t)&v127, (const void **)v131, (const void **)__p);
          if (v130 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v132) < 0) {
            operator delete(v131[0]);
          }
          if (v92)
          {
            v89 += 24;
            uint64_t v87 = v91;
          }
        }
        if (*(char *)(v88 + 23) < 0) {
          operator delete(*(void **)v88);
        }
        long long v93 = *(_OWORD *)v89;
        *(void *)(v88 + 16) = *(void *)(v89 + 16);
        *(_OWORD *)unint64_t v88 = v93;
        *(unsigned char *)(v89 + 23) = 0;
        *(unsigned char *)uint64_t v89 = 0;
        unint64_t v88 = v89;
      }
      while (v87 <= (uint64_t)((unint64_t)(v86 - 2) >> 1));
      uint64_t v69 = (_OWORD *)((char *)v120 - 24);
      if ((_OWORD *)v89 == (_OWORD *)((char *)v120 - 24))
      {
        *(void *)uint64_t v89 = v123;
        uint64_t v100 = *(void *)&v133[7];
        *(void *)(v89 + 8) = *(void *)v133;
        *(void *)(v89 + 15) = v100;
        *(unsigned char *)(v89 + 23) = v125;
        goto LABEL_220;
      }
      long long v94 = *v69;
      *(void *)(v89 + 16) = *((void *)v120 - 1);
      *(_OWORD *)uint64_t v89 = v94;
      *((void *)v120 - 3) = v123;
      uint64_t v95 = *(void *)v133;
      *(void *)((char *)v120 - 9) = *(void *)&v133[7];
      *((void *)v120 - 2) = v95;
      *((unsigned char *)v120 - 1) = v125;
      uint64_t v96 = v89 - a1 + 24;
      if (v96 < 25) {
        goto LABEL_220;
      }
      unint64_t v97 = (v96 / 0x18uLL - 2) >> 1;
      unint64_t v98 = a1 + 24 * v97;
      sub_190392954(*a3, (void **)v98, v131);
      sub_190392954(*a3, (void **)v89, __p);
      BOOL v99 = sub_1903928E8((uint64_t)&v127, (const void **)v131, (const void **)__p);
      if (v130 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v132) < 0)
      {
        operator delete(v131[0]);
        if (!v99) {
          goto LABEL_220;
        }
      }
      else if (!v99)
      {
        goto LABEL_220;
      }
      long long v101 = *(_OWORD *)v89;
      char v128 = *(void **)(v89 + 16);
      long long v127 = v101;
      *(void *)(v89 + 8) = 0;
      *(void *)(v89 + 16) = 0;
      *(void *)uint64_t v89 = 0;
      while (1)
      {
        uint64_t v102 = v98;
        if (*(char *)(v89 + 23) < 0) {
          operator delete(*(void **)v89);
        }
        long long v103 = *(_OWORD *)v98;
        *(void *)(v89 + 16) = *(void *)(v98 + 16);
        *(_OWORD *)uint64_t v89 = v103;
        *(unsigned char *)(v98 + 23) = 0;
        *(unsigned char *)unint64_t v98 = 0;
        if (!v97) {
          break;
        }
        unint64_t v97 = (v97 - 1) >> 1;
        unint64_t v98 = a1 + 24 * v97;
        sub_190392954(*a3, (void **)v98, v131);
        sub_190392954(*a3, (void **)&v127, __p);
        BOOL v104 = sub_1903928E8((uint64_t)&v126, (const void **)v131, (const void **)__p);
        if (v130 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v132) < 0) {
          operator delete(v131[0]);
        }
        uint64_t v89 = v102;
        if (!v104)
        {
          if (*(char *)(v102 + 23) < 0) {
            operator delete(*(void **)v102);
          }
          break;
        }
      }
      long long v105 = v127;
      *(void *)(v102 + 16) = v128;
      *(_OWORD *)uint64_t v102 = v105;
      uint64_t v69 = (_OWORD *)((char *)v120 - 24);
LABEL_220:
      if (v86-- <= 2) {
        return;
      }
      continue;
    }
  }
}

void sub_190391F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_190392024(uint64_t a1, void **a2, void **a3, void **a4, void **a5, uint64_t **a6)
{
  sub_190394E14(a1, a2, a3, a4, a6);
  sub_190392954(*a6, a5, v30);
  sub_190392954(*a6, a4, __p);
  BOOL v12 = sub_1903928E8((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v12) {
      return result;
    }
  }
  else if (!v12)
  {
    return result;
  }
  unint64_t v14 = a4[2];
  long long v15 = *(_OWORD *)a4;
  unint64_t v16 = a5[2];
  *(_OWORD *)a4 = *(_OWORD *)a5;
  a4[2] = v16;
  *(_OWORD *)a5 = v15;
  a5[2] = v14;
  sub_190392954(*a6, a4, v30);
  sub_190392954(*a6, a3, __p);
  BOOL v17 = sub_1903928E8((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v17) {
      return result;
    }
  }
  else if (!v17)
  {
    return result;
  }
  long long v18 = a3[2];
  long long v19 = *(_OWORD *)a3;
  BOOL v20 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  a3[2] = v20;
  *(_OWORD *)a4 = v19;
  a4[2] = v18;
  sub_190392954(*a6, a3, v30);
  sub_190392954(*a6, a2, __p);
  BOOL v21 = sub_1903928E8((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if (!v21) {
      return result;
    }
  }
  else if (!v21)
  {
    return result;
  }
  long long v22 = a2[2];
  long long v23 = *(_OWORD *)a2;
  unint64_t v24 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v24;
  *(_OWORD *)a3 = v23;
  a3[2] = v22;
  sub_190392954(*a6, a2, v30);
  sub_190392954(*a6, (void **)a1, __p);
  BOOL v25 = sub_1903928E8((uint64_t)v32, (const void **)v30, (const void **)__p);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (v25)
  {
    BOOL v26 = *(void **)(a1 + 16);
    __n128 result = *(__n128 *)a1;
    BOOL v27 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v27;
    *(__n128 *)a2 = result;
    a2[2] = v26;
  }
  return result;
}

void sub_190392278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1903922A0(void **a1, void **a2, void **a3, uint64_t **a4)
{
  sub_190392954(*a4, a2, v27);
  sub_190392954(*a4, a1, __p);
  BOOL v8 = sub_1903928E8((uint64_t)v29, v27, (const void **)__p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0)
  {
    operator delete((void *)v27[0]);
    if (v8) {
      goto LABEL_5;
    }
  }
  else if (v8)
  {
LABEL_5:
    sub_190392954(*a4, a3, v27);
    sub_190392954(*a4, a2, __p);
    BOOL v9 = sub_1903928E8((uint64_t)v29, v27, (const void **)__p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0)
    {
      operator delete((void *)v27[0]);
      if (v9) {
        goto LABEL_9;
      }
    }
    else if (v9)
    {
LABEL_9:
      uint64_t v10 = a1[2];
      __n128 result = *(__n128 *)a1;
      BOOL v12 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v12;
LABEL_23:
      *(__n128 *)a3 = result;
      a3[2] = v10;
      return result;
    }
    unint64_t v14 = a1[2];
    __n128 v15 = *(__n128 *)a1;
    unint64_t v16 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v16;
    *(__n128 *)a2 = v15;
    a2[2] = v14;
    sub_190392954(*a4, a3, v27);
    sub_190392954(*a4, a2, __p);
    BOOL v17 = sub_1903928E8((uint64_t)v29, v27, (const void **)__p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete((void *)v27[0]);
    }
    if (v17)
    {
      uint64_t v10 = a2[2];
      __n128 result = *(__n128 *)a2;
      long long v18 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v18;
      goto LABEL_23;
    }
    return result;
  }
  sub_190392954(*a4, a3, v27);
  sub_190392954(*a4, a2, __p);
  BOOL v13 = sub_1903928E8((uint64_t)v29, v27, (const void **)__p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0)
  {
    operator delete((void *)v27[0]);
    if (!v13) {
      return result;
    }
  }
  else if (!v13)
  {
    return result;
  }
  long long v19 = a2[2];
  long long v20 = *(_OWORD *)a2;
  BOOL v21 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v21;
  *(_OWORD *)a3 = v20;
  a3[2] = v19;
  sub_190392954(*a4, a2, v27);
  sub_190392954(*a4, a1, __p);
  BOOL v22 = sub_1903928E8((uint64_t)v29, v27, (const void **)__p);
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v28 < 0) {
    operator delete((void *)v27[0]);
  }
  if (v22)
  {
    long long v23 = a1[2];
    __n128 result = *(__n128 *)a1;
    unint64_t v24 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v24;
    *(__n128 *)a2 = result;
    a2[2] = v23;
  }
  return result;
}

void sub_190392548(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 89) < 0) {
    operator delete(*(void **)(v1 - 112));
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_190392574(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      sub_190392954(*a3, (void **)(a2 - 24), v27);
      sub_190392954(*a3, (void **)a1, __p);
      BOOL v9 = sub_1903928E8((uint64_t)&v23, (const void **)v27, (const void **)__p);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (v28 < 0) {
        operator delete(v27[0]);
      }
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 16);
        long long v11 = *(_OWORD *)a1;
        uint64_t v12 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v12;
        *(_OWORD *)uint64_t v8 = v11;
        *(void *)(v8 + 16) = v10;
      }
      return 1;
    case 3uLL:
      sub_1903922A0((void **)a1, (void **)(a1 + 24), (void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_190394E14(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_190392024(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), (void **)(a2 - 24), a3);
      return 1;
    default:
      BOOL v13 = (void **)(a1 + 48);
      sub_1903922A0((void **)a1, (void **)(a1 + 24), (void **)(a1 + 48), a3);
      uint64_t v14 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    sub_190392954(*a3, (void **)v14, v27);
    sub_190392954(*a3, v13, __p);
    BOOL v17 = sub_1903928E8((uint64_t)&v23, (const void **)v27, (const void **)__p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      break;
    }
    if (v17) {
      goto LABEL_17;
    }
LABEL_30:
    BOOL v13 = (void **)v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2) {
      return 1;
    }
  }
  operator delete(v27[0]);
  if (!v17) {
    goto LABEL_30;
  }
LABEL_17:
  long long v23 = *(_OWORD *)v14;
  uint64_t v24 = *(void *)(v14 + 16);
  *(void *)(v14 + 8) = 0;
  *(void *)(v14 + 16) = 0;
  *(void *)uint64_t v14 = 0;
  uint64_t v18 = v15;
  do
  {
    uint64_t v19 = a1 + v18;
    long long v20 = (void **)(a1 + v18 + 72);
    if (*(char *)(a1 + v18 + 95) < 0) {
      operator delete(*v20);
    }
    *(_OWORD *)long long v20 = *(_OWORD *)(v19 + 48);
    *(void *)(a1 + v18 + 88) = *(void *)(v19 + 64);
    *(unsigned char *)(v19 + 71) = 0;
    *(unsigned char *)(v19 + 48) = 0;
    if (v18 == -48)
    {
      uint64_t v22 = a1;
      goto LABEL_29;
    }
    sub_190392954(*a3, (void **)&v23, v27);
    sub_190392954(*a3, (void **)(a1 + v18 + 24), __p);
    BOOL v21 = sub_1903928E8((uint64_t)&v29, (const void **)v27, (const void **)__p);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    v18 -= 24;
  }
  while (v21);
  uint64_t v22 = a1 + v18 + 72;
  if (*(char *)(a1 + v18 + 95) < 0) {
    operator delete(*(void **)v22);
  }
LABEL_29:
  *(_OWORD *)uint64_t v22 = v23;
  *(void *)(v22 + 16) = v24;
  if (++v16 != 8) {
    goto LABEL_30;
  }
  return v14 + 24 == a2;
}

void sub_190392884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1903928E8(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void sub_190392954(uint64_t *a1@<X0>, void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v9, 0, sizeof(v9));
  uint64_t v5 = *a1;
  uint64_t v6 = (void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v6 >= 0) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = *a2;
  }
  if ((char)v6 < 0) {
    uint64_t v6 = a2[1];
  }
  sub_190392A5C((uint64_t)v7, (uint64_t)v6 + (void)v7, (uint64_t)__p, v5, 0);
  if ((void *)((char *)__p[1] - (char *)__p[0]) == (void *)48)
  {
    if (*((unsigned char *)__p[0] + 40))
    {
      sub_19038D75C(a3, *((char **)__p[0] + 3), *((char **)__p[0] + 4), *((void *)__p[0] + 4) - *((void *)__p[0] + 3));
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
  }
  else if (*((char *)a2 + 23) < 0)
  {
    sub_190347AFC(a3, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    a3[2] = a2[2];
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_190392A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190392A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5 = a5;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v12, 0, sizeof(v12));
  int v9 = sub_190392B54(a4, a1, a2, (uint64_t)__p, a5 | 0x1040u);
  sub_190392D30(a3, a1, a2, (uint64_t *)__p, (v5 & 0x800) != 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!v9) {
    return 0;
  }
  if (!*(unsigned char *)(a3 + 88)) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)(a3 + 8) = *(void *)a3;
  return result;
}

void sub_190392B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190392B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  sub_190389C18(a4, *(_DWORD *)(a1 + 28) + 1, a2, a3, (unsigned __int16)(v9 & 0x800) >> 11);
  if (sub_190392EC0(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
  {
    if (*(void *)(a4 + 8) == *(void *)a4) {
      uint64_t v10 = (uint64_t *)(a4 + 24);
    }
    else {
      uint64_t v10 = *(uint64_t **)a4;
    }
LABEL_8:
    uint64_t v11 = *v10;
    *(void *)(a4 + 56) = *v10;
    *(unsigned char *)(a4 + 64) = *(void *)(a4 + 48) != v11;
    uint64_t v12 = v10[1];
    *(void *)(a4 + 72) = v12;
    *(unsigned char *)(a4 + 88) = v12 != *(void *)(a4 + 80);
    return 1;
  }
  if (a2 != a3 && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    uint64_t v15 = a2 + 1;
    if (v15 != a3)
    {
      while (1)
      {
        sub_19038A0FC((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), (long long *)(a4 + 24));
        int v16 = sub_190392EC0(a1, v15, a3, (uint64_t *)a4, v14, 0);
        uint64_t v18 = *(void *)a4;
        uint64_t v17 = *(void *)(a4 + 8);
        if (v16) {
          break;
        }
        sub_19038A0FC((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3), (long long *)(a4 + 24));
        if (++v15 == a3) {
          goto LABEL_14;
        }
      }
      if (v17 == v18) {
        uint64_t v10 = (uint64_t *)(a4 + 24);
      }
      else {
        uint64_t v10 = *(uint64_t **)a4;
      }
      goto LABEL_8;
    }
LABEL_14:
    sub_19038A0FC((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3), (long long *)(a4 + 24));
    if (sub_190392EC0(a1, a3, a3, (uint64_t *)a4, v14, 0))
    {
      if (*(void *)(a4 + 8) == *(void *)a4) {
        uint64_t v10 = (uint64_t *)(a4 + 24);
      }
      else {
        uint64_t v10 = *(uint64_t **)a4;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  *(void *)(a4 + 8) = *(void *)a4;
  return result;
}

void sub_190392D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  sub_190394C5C(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  uint64_t v11 = *(void *)a1;
  if (*(void *)(a1 + 8) != *(void *)a1)
  {
    uint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      uint64_t v17 = (void *)(v15 + v12);
      if (v16 <= v13) {
        uint64_t v18 = a4 + 3;
      }
      else {
        uint64_t v18 = v17;
      }
      *(void *)(v11 + v12) = a2 + *v18 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13) {
        char v19 = a4 + 3;
      }
      else {
        char v19 = (uint64_t *)(*a4 + v12);
      }
      *(void *)(*(void *)a1 + v12 + 8) = a2 + v19[1] - v10;
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13) {
        uint64_t v20 = a4 + 3;
      }
      else {
        uint64_t v20 = (uint64_t *)(*a4 + v12);
      }
      char v21 = *((unsigned char *)v20 + 16);
      uint64_t v11 = *(void *)a1;
      uint64_t v22 = *(void *)(a1 + 8);
      *(unsigned char *)(*(void *)a1 + v12 + 16) = v21;
      ++v13;
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v11) >> 3));
  }
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v23 = a2 + a4[6] - v10;
  *(void *)(a1 + 48) = v23;
  *(void *)(a1 + 56) = a2 + a4[7] - v10;
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a4 + 64);
  *(void *)(a1 + 72) = a2 + a4[9] - v10;
  *(void *)(a1 + 80) = a2 + a4[10] - v10;
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    *(void *)(a1 + 104) = v23;
  }
  *(unsigned char *)(a1 + 96) = *((unsigned char *)a4 + 96);
}

uint64_t sub_190392EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return sub_190389C8C(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return sub_190393490(a1, a2, a3, a4, a5, a6);
  }
  return sub_190392EE0(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_190392EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)int v57 = 0;
    memset(&v57[8], 0, 32);
    long long v58 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    memset(v60, 0, 21);
    sub_190393A58(&v61, (uint64_t)v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v57[32])
    {
      *(void *)&long long v58 = *(void *)&v57[32];
      operator delete(*(void **)&v57[32]);
    }
    long long v52 = a4;
    uint64_t v12 = *((void *)&v61 + 1);
    unint64_t v13 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    sub_19038A390(*(void *)(v12 + 8 * v14) + 32 * v16 + 56, *(unsigned int *)(a1 + 32));
    char v55 = 0;
    unsigned int v18 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = a2;
    uint64_t v19 = a3 - a2;
    uint64_t v20 = *((void *)&v63 + 1);
    uint64_t v21 = *((void *)&v61 + 1);
    unint64_t v22 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v23 = v22 / 0x2A;
    unint64_t v24 = 3 * (v22 % 0x2A);
    *(void *)(*(void *)(*((void *)&v61 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    uint64_t v25 = *(void *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(unsigned char *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19) {
        sub_19038A3C0();
      }
      unint64_t v27 = v20 + v63 - 1;
      uint64_t v28 = *(void *)(*((void *)&v61 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      BOOL v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == a3;
          BOOL v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v53;
          if ((v55 & (v53 >= v37)) == 0) {
            uint64_t v38 = v37;
          }
          if (v38 != v19)
          {
            uint64_t v53 = v38;
            sub_190393B5C(&v61);
            char v55 = 1;
            goto LABEL_38;
          }
          BOOL v39 = (void **)*((void *)&v61 + 1);
          uint64_t v40 = v62;
          if ((void)v62 == *((void *)&v61 + 1))
          {
            uint64_t v40 = *((void *)&v61 + 1);
          }
          else
          {
            unint64_t v41 = (void *)(*((void *)&v61 + 1) + 8 * ((unint64_t)v63 / 0x2A));
            BOOL v42 = (void *)(*v41 + 96 * ((unint64_t)v63 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v61 + 1) + 8 * ((*((void *)&v63 + 1) + (void)v63) / 0x2AuLL))
                + 96 * ((*((void *)&v63 + 1) + (void)v63) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                sub_19038A7F0((uint64_t)&v63 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  BOOL v44 = (void *)v41[1];
                  ++v41;
                  BOOL v42 = v44;
                }
              }
              while (v42 != (void *)v43);
              BOOL v39 = (void **)*((void *)&v61 + 1);
              uint64_t v40 = v62;
            }
          }
          *((void *)&v63 + 1) = 0;
          unint64_t v47 = v40 - (void)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              BOOL v39 = (void **)(*((void *)&v61 + 1) + 8);
              *((void *)&v61 + 1) = v39;
              unint64_t v47 = v62 - (void)v39;
            }
            while ((void)v62 - (void)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            uint64_t v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v48 = 42;
          }
          *(void *)&long long v63 = v48;
LABEL_53:
          char v55 = 1;
          uint64_t v53 = v19;
LABEL_38:
          uint64_t v20 = *((void *)&v63 + 1);
          if (*((void *)&v63 + 1)) {
            continue;
          }
          if ((v55 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v49 = *v52;
          *(void *)uint64_t v49 = v54;
          *(void *)(v49 + 8) = v54 + v53;
          uint64_t v50 = 1;
          *(unsigned char *)(v49 + 16) = 1;
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          sub_190393BF0((uint64_t)&v61, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          sub_190393B5C(&v61);
          goto LABEL_38;
        case 0xFFFFFC20:
          long long v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)int v57 = *(_OWORD *)v30;
          *(_OWORD *)&v57[16] = v45;
          long long v58 = 0uLL;
          *(void *)&v57[32] = 0;
          sub_19038ABA4(&v57[32], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v60[0] = 0;
          sub_19038AC24((char *)__p, *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v46 = *v32;
          *(void *)((char *)&v60[1] + 5) = *(void *)(v30 + 85);
          v60[1] = v46;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, unsigned char *))(*(void *)v60[1] + 24))(v60[1], 0, v57);
          sub_190393A58(&v61, (uint64_t)v57);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v57[32])
          {
            *(void *)&long long v58 = *(void *)&v57[32];
            operator delete(*(void **)&v57[32]);
          }
          goto LABEL_38;
        default:
          sub_19038A418();
      }
      break;
    }
  }
  else
  {
LABEL_56:
    uint64_t v50 = 0;
  }
  sub_1903947FC(&v61);
  return v50;
}

void sub_190393418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  sub_1903947FC((void *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_190393490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  char v55 = 0;
  long long v56 = 0;
  v57[0] = 0;
  *(_DWORD *)long long v52 = 0;
  memset(&v52[8], 0, 32);
  long long v53 = 0u;
  memset(v54, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(void *)&long long v50 = a3;
    *((void *)&v50 + 1) = a3;
    char v51 = 0;
    *(_DWORD *)unint64_t v47 = 0;
    memset(&v47[8], 0, 48);
    *(_OWORD *)std::string __p = 0uLL;
    memset(v49, 0, 21);
    long long v56 = (_OWORD *)sub_19038A470((uint64_t *)&v55, (uint64_t)v47);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v47[32])
    {
      *(void *)&v47[40] = *(void *)&v47[32];
      operator delete(*(void **)&v47[32]);
    }
    BOOL v42 = a4;
    uint64_t v11 = v56;
    *((_DWORD *)v56 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 10) = a2;
    *((void *)v11 - 9) = a3;
    sub_19038A354((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v50);
    sub_19038A390((uint64_t)v56 - 40, *(unsigned int *)(a1 + 32));
    uint64_t v43 = a3;
    uint64_t v44 = 0;
    char v12 = 0;
    unsigned int v13 = 0;
    uint64_t v14 = a3 - a2;
    uint64_t v15 = v56;
    *((void *)v56 - 2) = v6;
    *((_DWORD *)v15 - 2) = a5;
    *((unsigned char *)v15 - 4) = a6;
    do
    {
      BOOL v16 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v14;
      if (!v16) {
        sub_19038A3C0();
      }
      unsigned int v18 = v15 - 1;
      uint64_t v17 = *((void *)v15 - 2);
      uint64_t v19 = v15 - 6;
      if (v17) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16))(v17, v15 - 6);
      }
      switch(*(_DWORD *)v19)
      {
        case 0xFFFFFC18:
          uint64_t v20 = *((void *)v15 - 10);
          if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v43) {
            goto LABEL_19;
          }
          char v27 = v12;
          uint64_t v28 = v20 - *((void *)v15 - 11);
          uint64_t v29 = v44;
          if ((v27 & (v44 >= v28)) == 0)
          {
            long long v30 = *(v15 - 5);
            *(_OWORD *)long long v52 = *(_OWORD *)v19;
            *(_OWORD *)&v52[16] = v30;
            if (v52 != v19)
            {
              sub_190394954(&v52[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
              sub_190394B0C(v54, *((uint64_t **)v15 - 5), *((uint64_t **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
            }
            uint64_t v31 = (void *)*v18;
            *(void **)((char *)&v54[3] + 5) = *(void **)((char *)v15 - 11);
            v54[3] = v31;
            uint64_t v29 = v28;
          }
          BOOL v32 = v56;
          if (v29 == v14)
          {
            uint64_t v33 = (uint64_t)v55;
            while (v32 != (void *)v33)
            {
              v32 -= 12;
              sub_19038A7F0((uint64_t)v57, v32);
            }
            long long v56 = (_OWORD *)v33;
            char v12 = 1;
            uint64_t v44 = v14;
          }
          else
          {
            uint64_t v44 = v29;
            unint64_t v34 = v56 - 6;
            sub_19038A7F0((uint64_t)v57, (void *)v56 - 12);
            long long v56 = v34;
            char v12 = 1;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          uint64_t v21 = v56 - 6;
          sub_19038A7F0((uint64_t)v57, (void *)v56 - 12);
          long long v56 = v21;
          break;
        case 0xFFFFFC20:
          long long v22 = *(v15 - 5);
          *(_OWORD *)unint64_t v47 = *(_OWORD *)v19;
          *(_OWORD *)&v47[16] = v22;
          memset(&v47[32], 0, 24);
          sub_19038ABA4(&v47[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v49[0] = 0;
          sub_19038AC24((char *)__p, *((long long **)v15 - 5), *((long long **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
          unint64_t v23 = (void *)*v18;
          *(void *)((char *)&v49[1] + 5) = *(void *)((char *)v15 - 11);
          v49[1] = v23;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24))(*v18, 1, v15 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v49[1] + 24))(v49[1], 0, v47);
          unint64_t v24 = v56;
          if ((unint64_t)v56 >= v57[0])
          {
            long long v56 = (_OWORD *)sub_19038A470((uint64_t *)&v55, (uint64_t)v47);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v25 = *(_OWORD *)&v47[16];
            *long long v56 = *(_OWORD *)v47;
            v24[1] = v25;
            *((void *)v24 + 4) = 0;
            *((void *)v24 + 5) = 0;
            *((void *)v24 + 6) = 0;
            *((void *)v24 + 7) = 0;
            v24[2] = *(_OWORD *)&v47[32];
            *((void *)v24 + 6) = *(void *)&v47[48];
            memset(&v47[32], 0, 24);
            *((void *)v24 + 8) = 0;
            *((void *)v24 + 9) = 0;
            *(_OWORD *)((char *)v24 + 56) = *(_OWORD *)__p;
            *((void *)v24 + 9) = v49[0];
            __p[0] = 0;
            __p[1] = 0;
            v49[0] = 0;
            uint64_t v26 = v49[1];
            *(void *)((char *)v24 + 85) = *(void *)((char *)&v49[1] + 5);
            *((void *)v24 + 10) = v26;
            long long v56 = v24 + 6;
          }
          if (*(void *)&v47[32])
          {
            *(void *)&v47[40] = *(void *)&v47[32];
            operator delete(*(void **)&v47[32]);
          }
          break;
        default:
          sub_19038A418();
      }
      uint64_t v15 = v56;
    }
    while (v55 != v56);
    if (v12)
    {
      uint64_t v35 = *v42;
      *(void *)uint64_t v35 = a2;
      *(void *)(v35 + 8) = a2 + v44;
      *(unsigned char *)(v35 + 16) = 1;
      if ((void)v53 != *(void *)&v52[32])
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *(void *)&v52[32]) >> 3);
        uint64_t v37 = (unsigned char *)(*(void *)&v52[32] + 16);
        unsigned int v38 = 1;
        do
        {
          uint64_t v39 = v35 + 24 * v38;
          *(_OWORD *)uint64_t v39 = *((_OWORD *)v37 - 1);
          char v40 = *v37;
          v37 += 24;
          *(unsigned char *)(v39 + 16) = v40;
          BOOL v16 = v36 > v38++;
        }
        while (v16);
      }
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (v54[0])
  {
    v54[1] = v54[0];
    operator delete(v54[0]);
  }
  if (*(void *)&v52[32])
  {
    *(void *)&long long v53 = *(void *)&v52[32];
    operator delete(*(void **)&v52[32]);
  }
  *(void *)long long v52 = &v55;
  sub_19038ACDC((void ***)v52);
  return v6;
}

void sub_1903939D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  sub_19038A310(&a17);
  sub_19038A310(&a33);
  a33 = v33 - 120;
  sub_19038ACDC((void ***)&a33);
  _Unwind_Resume(a1);
}

__n128 sub_190393A58(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_190393CE4(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t sub_190393B5C(void *a1)
{
  uint64_t v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  sub_19038A7F0((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;

  return sub_190394468(a1, 1);
}

int64x2_t sub_190393BF0(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_1903944E0((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(void *)(v7 - 56) = 0;
  *(void *)(v7 - 48) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v7 - 40) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_190604DE0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_190393CE4(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_190347A00(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      sub_190393FFC(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    sub_190394114((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_190347A00((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        char v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)char v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_190347A00((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0xFC0uLL);
  sub_190394234(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_19039434C((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_190393FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_190393FFC(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)sub_190347A00(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      char v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void sub_190394114(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)sub_190347A00(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void sub_190394234(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)sub_190347A00(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_19039434C(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)sub_190347A00(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t sub_190394468(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_1903944E0(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = sub_190347A00(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      unint64_t v41 = operator new(0xFC0uLL);
      sub_190394234(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_190347A00((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::string __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      uint64_t v43 = v33;
      unsigned int v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFC0uLL);
        sub_190393FFC(a1, &__p);
        unint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFC0uLL);
      }
      sub_190394114((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_190394114((uint64_t)a1, &__p);
  }
}

void sub_1903947B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1903947FC(void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_19038A7F0((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }
  *uint64_t v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }

  return sub_1902D5C18((uint64_t)a1);
}

char *sub_190394954(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          v26[16] = *((unsigned char *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }
    else
    {
      int64_t v21 = (long long *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((unsigned char *)v6 + 16);
          uint64_t v6 = (long long *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      uint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          long long v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (long long *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      int64_t v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_1903479E8();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = sub_19038A274(a1, v12);
    int64_t v15 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        long long v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    int64_t v18 = v16 - v13;
  }
  *uint64_t v14 = &v13[v18];
  return result;
}

char *sub_190394B0C(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      long long v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = (long long *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      unint64_t v23 = v12;
      if (v20 != (long long *)a3)
      {
        long long v24 = v12;
        do
        {
          long long v25 = *v20++;
          *(_OWORD *)long long v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (long long *)a3);
      }
      long long v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      sub_1903479E8();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = sub_19038AC98(a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        long long v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    long long v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void sub_190394C5C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_190394C98((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 24 * a2;
  }
}

void sub_190394C98(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (unsigned char *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[3 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        *uint64_t v7 = 0;
        v7[1] = 0;
        *((unsigned char *)v7 + 16) = 0;
        v7 += 3;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (unsigned char *)*a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      sub_1903479E8();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (unsigned char *)*a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)sub_19038A2C8(v4, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    int64_t v15 = &v12[24 * v8];
    long long v16 = &v15[24 * a2];
    uint64_t v17 = 24 * a2;
    int64_t v18 = v15;
    do
    {
      *(void *)int64_t v18 = 0;
      *((void *)v18 + 1) = 0;
      v18[16] = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    unint64_t v19 = &v12[24 * v11];
    uint64_t v21 = (char *)*a1;
    unint64_t v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        long long v22 = *(_OWORD *)(v20 - 24);
        *((void *)v15 - 1) = *((void *)v20 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      unint64_t v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
    {
      operator delete(v20);
    }
  }
}

__n128 sub_190394E14(uint64_t a1, void **a2, void **a3, void **a4, uint64_t **a5)
{
  sub_1903922A0((void **)a1, a2, a3, a5);
  sub_190392954(*a5, a4, v24);
  sub_190392954(*a5, a3, __p);
  BOOL v10 = sub_1903928E8((uint64_t)v26, (const void **)v24, (const void **)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (!v10) {
      return result;
    }
  }
  else if (!v10)
  {
    return result;
  }
  unint64_t v12 = a3[2];
  long long v13 = *(_OWORD *)a3;
  uint64_t v14 = a4[2];
  *(_OWORD *)a3 = *(_OWORD *)a4;
  a3[2] = v14;
  *(_OWORD *)a4 = v13;
  a4[2] = v12;
  sub_190392954(*a5, a3, v24);
  sub_190392954(*a5, a2, __p);
  BOOL v15 = sub_1903928E8((uint64_t)v26, (const void **)v24, (const void **)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0)
  {
    operator delete(v24[0]);
    if (!v15) {
      return result;
    }
  }
  else if (!v15)
  {
    return result;
  }
  long long v16 = a2[2];
  long long v17 = *(_OWORD *)a2;
  int64_t v18 = a3[2];
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = v18;
  *(_OWORD *)a3 = v17;
  a3[2] = v16;
  sub_190392954(*a5, a2, v24);
  sub_190392954(*a5, (void **)a1, __p);
  BOOL v19 = sub_1903928E8((uint64_t)v26, (const void **)v24, (const void **)__p);
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (v19)
  {
    unint64_t v20 = *(void **)(a1 + 16);
    __n128 result = *(__n128 *)a1;
    uint64_t v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = v21;
    *(__n128 *)a2 = result;
    a2[2] = v20;
  }
  return result;
}

void sub_190394FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190395000(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_190347B9C();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void *sub_190395088(void *a1)
{
  *a1 = &unk_1EDFD0248;
  bzero(a1 + 1, 0x260uLL);
  bzero(a1 + 78, 0xBB4uLL);
  return a1;
}

void sub_1903950E0(PB::Base *this)
{
  *(void *)this = &unk_1EDFD0248;
  uint64_t v2 = *((void *)this + 451);
  *((void *)this + 451) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 450);
  *((void *)this + 450) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 449);
  *((void *)this + 449) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 448);
  *((void *)this + 448) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 447);
  *((void *)this + 447) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 446);
  *((void *)this + 446) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 445);
  *((void *)this + 445) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 444);
  *((void *)this + 444) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 443);
  *((void *)this + 443) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 442);
  *((void *)this + 442) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 441);
  *((void *)this + 441) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 440);
  *((void *)this + 440) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  uint64_t v14 = *((void *)this + 439);
  *((void *)this + 439) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  uint64_t v15 = *((void *)this + 438);
  *((void *)this + 438) = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  uint64_t v16 = *((void *)this + 437);
  *((void *)this + 437) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *((void *)this + 436);
  *((void *)this + 436) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
  }
  uint64_t v18 = *((void *)this + 435);
  *((void *)this + 435) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  uint64_t v19 = *((void *)this + 434);
  *((void *)this + 434) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
  }
  uint64_t v20 = *((void *)this + 433);
  *((void *)this + 433) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = *((void *)this + 432);
  *((void *)this + 432) = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  uint64_t v22 = *((void *)this + 431);
  *((void *)this + 431) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  uint64_t v23 = *((void *)this + 430);
  *((void *)this + 430) = 0;
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
  }
  uint64_t v24 = *((void *)this + 429);
  *((void *)this + 429) = 0;
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
  }
  uint64_t v25 = *((void *)this + 428);
  *((void *)this + 428) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  uint64_t v26 = *((void *)this + 427);
  *((void *)this + 427) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = *((void *)this + 426);
  *((void *)this + 426) = 0;
  if (v27) {
    (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
  }
  uint64_t v28 = *((void *)this + 425);
  *((void *)this + 425) = 0;
  if (v28) {
    (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
  }
  uint64_t v29 = *((void *)this + 424);
  *((void *)this + 424) = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *((void *)this + 423);
  *((void *)this + 423) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = *((void *)this + 422);
  *((void *)this + 422) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  uint64_t v32 = *((void *)this + 421);
  *((void *)this + 421) = 0;
  if (v32) {
    (*(void (**)(uint64_t))(*(void *)v32 + 8))(v32);
  }
  uint64_t v33 = *((void *)this + 420);
  *((void *)this + 420) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = *((void *)this + 419);
  *((void *)this + 419) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  uint64_t v35 = *((void *)this + 418);
  *((void *)this + 418) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *((void *)this + 417);
  *((void *)this + 417) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = *((void *)this + 416);
  *((void *)this + 416) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  uint64_t v38 = *((void *)this + 415);
  *((void *)this + 415) = 0;
  if (v38) {
    (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  }
  uint64_t v39 = *((void *)this + 414);
  *((void *)this + 414) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
  }
  uint64_t v40 = *((void *)this + 413);
  *((void *)this + 413) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  uint64_t v41 = *((void *)this + 412);
  *((void *)this + 412) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = *((void *)this + 411);
  *((void *)this + 411) = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  uint64_t v43 = *((void *)this + 410);
  *((void *)this + 410) = 0;
  if (v43) {
    (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
  }
  uint64_t v44 = *((void *)this + 409);
  *((void *)this + 409) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  uint64_t v45 = *((void *)this + 408);
  *((void *)this + 408) = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  uint64_t v46 = *((void *)this + 407);
  *((void *)this + 407) = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  uint64_t v47 = *((void *)this + 406);
  *((void *)this + 406) = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 8))(v47);
  }
  uint64_t v48 = *((void *)this + 405);
  *((void *)this + 405) = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  uint64_t v49 = *((void *)this + 404);
  *((void *)this + 404) = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  uint64_t v50 = *((void *)this + 403);
  *((void *)this + 403) = 0;
  if (v50) {
    (*(void (**)(uint64_t))(*(void *)v50 + 8))(v50);
  }
  uint64_t v51 = *((void *)this + 402);
  *((void *)this + 402) = 0;
  if (v51) {
    (*(void (**)(uint64_t))(*(void *)v51 + 8))(v51);
  }
  uint64_t v52 = *((void *)this + 401);
  *((void *)this + 401) = 0;
  if (v52) {
    (*(void (**)(uint64_t))(*(void *)v52 + 8))(v52);
  }
  uint64_t v53 = *((void *)this + 400);
  *((void *)this + 400) = 0;
  if (v53) {
    (*(void (**)(uint64_t))(*(void *)v53 + 8))(v53);
  }
  uint64_t v54 = *((void *)this + 399);
  *((void *)this + 399) = 0;
  if (v54) {
    (*(void (**)(uint64_t))(*(void *)v54 + 8))(v54);
  }
  uint64_t v55 = *((void *)this + 398);
  *((void *)this + 398) = 0;
  if (v55) {
    (*(void (**)(uint64_t))(*(void *)v55 + 8))(v55);
  }
  uint64_t v56 = *((void *)this + 397);
  *((void *)this + 397) = 0;
  if (v56) {
    (*(void (**)(uint64_t))(*(void *)v56 + 8))(v56);
  }
  uint64_t v57 = *((void *)this + 396);
  *((void *)this + 396) = 0;
  if (v57) {
    (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
  }
  uint64_t v58 = *((void *)this + 395);
  *((void *)this + 395) = 0;
  if (v58) {
    (*(void (**)(uint64_t))(*(void *)v58 + 8))(v58);
  }
  uint64_t v59 = *((void *)this + 394);
  *((void *)this + 394) = 0;
  if (v59) {
    (*(void (**)(uint64_t))(*(void *)v59 + 8))(v59);
  }
  uint64_t v60 = *((void *)this + 393);
  *((void *)this + 393) = 0;
  if (v60) {
    (*(void (**)(uint64_t))(*(void *)v60 + 8))(v60);
  }
  uint64_t v61 = *((void *)this + 392);
  *((void *)this + 392) = 0;
  if (v61) {
    (*(void (**)(uint64_t))(*(void *)v61 + 8))(v61);
  }
  uint64_t v62 = *((void *)this + 391);
  *((void *)this + 391) = 0;
  if (v62) {
    (*(void (**)(uint64_t))(*(void *)v62 + 8))(v62);
  }
  uint64_t v63 = *((void *)this + 390);
  *((void *)this + 390) = 0;
  if (v63) {
    (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
  }
  uint64_t v64 = *((void *)this + 389);
  *((void *)this + 389) = 0;
  if (v64) {
    (*(void (**)(uint64_t))(*(void *)v64 + 8))(v64);
  }
  uint64_t v65 = *((void *)this + 388);
  *((void *)this + 388) = 0;
  if (v65) {
    (*(void (**)(uint64_t))(*(void *)v65 + 8))(v65);
  }
  uint64_t v66 = *((void *)this + 387);
  *((void *)this + 387) = 0;
  if (v66) {
    (*(void (**)(uint64_t))(*(void *)v66 + 8))(v66);
  }
  uint64_t v67 = *((void *)this + 386);
  *((void *)this + 386) = 0;
  if (v67) {
    (*(void (**)(uint64_t))(*(void *)v67 + 8))(v67);
  }
  uint64_t v68 = *((void *)this + 385);
  *((void *)this + 385) = 0;
  if (v68) {
    (*(void (**)(uint64_t))(*(void *)v68 + 8))(v68);
  }
  uint64_t v69 = *((void *)this + 384);
  *((void *)this + 384) = 0;
  if (v69) {
    (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
  }
  uint64_t v70 = *((void *)this + 383);
  *((void *)this + 383) = 0;
  if (v70) {
    (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
  }
  uint64_t v71 = *((void *)this + 382);
  *((void *)this + 382) = 0;
  if (v71) {
    (*(void (**)(uint64_t))(*(void *)v71 + 8))(v71);
  }
  uint64_t v72 = *((void *)this + 381);
  *((void *)this + 381) = 0;
  if (v72) {
    (*(void (**)(uint64_t))(*(void *)v72 + 8))(v72);
  }
  uint64_t v73 = *((void *)this + 380);
  *((void *)this + 380) = 0;
  if (v73) {
    (*(void (**)(uint64_t))(*(void *)v73 + 8))(v73);
  }
  uint64_t v74 = *((void *)this + 379);
  *((void *)this + 379) = 0;
  if (v74) {
    (*(void (**)(uint64_t))(*(void *)v74 + 8))(v74);
  }
  uint64_t v75 = *((void *)this + 378);
  *((void *)this + 378) = 0;
  if (v75) {
    (*(void (**)(uint64_t))(*(void *)v75 + 8))(v75);
  }
  uint64_t v76 = *((void *)this + 377);
  *((void *)this + 377) = 0;
  if (v76) {
    (*(void (**)(uint64_t))(*(void *)v76 + 8))(v76);
  }
  uint64_t v77 = *((void *)this + 376);
  *((void *)this + 376) = 0;
  if (v77) {
    (*(void (**)(uint64_t))(*(void *)v77 + 8))(v77);
  }
  uint64_t v78 = *((void *)this + 375);
  *((void *)this + 375) = 0;
  if (v78) {
    (*(void (**)(uint64_t))(*(void *)v78 + 8))(v78);
  }
  uint64_t v79 = *((void *)this + 374);
  *((void *)this + 374) = 0;
  if (v79) {
    (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
  }
  uint64_t v80 = *((void *)this + 373);
  *((void *)this + 373) = 0;
  if (v80) {
    (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
  }
  uint64_t v81 = *((void *)this + 372);
  *((void *)this + 372) = 0;
  if (v81) {
    (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
  }
  uint64_t v82 = *((void *)this + 371);
  *((void *)this + 371) = 0;
  if (v82) {
    (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
  }
  uint64_t v83 = *((void *)this + 370);
  *((void *)this + 370) = 0;
  if (v83) {
    (*(void (**)(uint64_t))(*(void *)v83 + 8))(v83);
  }
  uint64_t v84 = *((void *)this + 369);
  *((void *)this + 369) = 0;
  if (v84) {
    (*(void (**)(uint64_t))(*(void *)v84 + 8))(v84);
  }
  uint64_t v85 = *((void *)this + 368);
  *((void *)this + 368) = 0;
  if (v85) {
    (*(void (**)(uint64_t))(*(void *)v85 + 8))(v85);
  }
  uint64_t v86 = *((void *)this + 367);
  *((void *)this + 367) = 0;
  if (v86) {
    (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
  }
  uint64_t v87 = *((void *)this + 366);
  *((void *)this + 366) = 0;
  if (v87) {
    (*(void (**)(uint64_t))(*(void *)v87 + 8))(v87);
  }
  uint64_t v88 = *((void *)this + 365);
  *((void *)this + 365) = 0;
  if (v88) {
    (*(void (**)(uint64_t))(*(void *)v88 + 8))(v88);
  }
  uint64_t v89 = *((void *)this + 364);
  *((void *)this + 364) = 0;
  if (v89) {
    (*(void (**)(uint64_t))(*(void *)v89 + 8))(v89);
  }
  uint64_t v90 = *((void *)this + 363);
  *((void *)this + 363) = 0;
  if (v90) {
    (*(void (**)(uint64_t))(*(void *)v90 + 8))(v90);
  }
  uint64_t v91 = *((void *)this + 362);
  *((void *)this + 362) = 0;
  if (v91) {
    (*(void (**)(uint64_t))(*(void *)v91 + 8))(v91);
  }
  uint64_t v92 = *((void *)this + 361);
  *((void *)this + 361) = 0;
  if (v92) {
    (*(void (**)(uint64_t))(*(void *)v92 + 8))(v92);
  }
  uint64_t v93 = *((void *)this + 360);
  *((void *)this + 360) = 0;
  if (v93) {
    (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
  }
  uint64_t v94 = *((void *)this + 359);
  *((void *)this + 359) = 0;
  if (v94) {
    (*(void (**)(uint64_t))(*(void *)v94 + 8))(v94);
  }
  uint64_t v95 = *((void *)this + 358);
  *((void *)this + 358) = 0;
  if (v95) {
    (*(void (**)(uint64_t))(*(void *)v95 + 8))(v95);
  }
  uint64_t v96 = *((void *)this + 357);
  *((void *)this + 357) = 0;
  if (v96) {
    (*(void (**)(uint64_t))(*(void *)v96 + 8))(v96);
  }
  uint64_t v97 = *((void *)this + 356);
  *((void *)this + 356) = 0;
  if (v97) {
    (*(void (**)(uint64_t))(*(void *)v97 + 8))(v97);
  }
  uint64_t v98 = *((void *)this + 355);
  *((void *)this + 355) = 0;
  if (v98) {
    (*(void (**)(uint64_t))(*(void *)v98 + 8))(v98);
  }
  uint64_t v99 = *((void *)this + 354);
  *((void *)this + 354) = 0;
  if (v99) {
    (*(void (**)(uint64_t))(*(void *)v99 + 8))(v99);
  }
  uint64_t v100 = *((void *)this + 353);
  *((void *)this + 353) = 0;
  if (v100) {
    (*(void (**)(uint64_t))(*(void *)v100 + 8))(v100);
  }
  uint64_t v101 = *((void *)this + 352);
  *((void *)this + 352) = 0;
  if (v101) {
    (*(void (**)(uint64_t))(*(void *)v101 + 8))(v101);
  }
  uint64_t v102 = *((void *)this + 351);
  *((void *)this + 351) = 0;
  if (v102) {
    (*(void (**)(uint64_t))(*(void *)v102 + 8))(v102);
  }
  uint64_t v103 = *((void *)this + 350);
  *((void *)this + 350) = 0;
  if (v103) {
    (*(void (**)(uint64_t))(*(void *)v103 + 8))(v103);
  }
  uint64_t v104 = *((void *)this + 349);
  *((void *)this + 349) = 0;
  if (v104) {
    (*(void (**)(uint64_t))(*(void *)v104 + 8))(v104);
  }
  uint64_t v105 = *((void *)this + 348);
  *((void *)this + 348) = 0;
  if (v105) {
    (*(void (**)(uint64_t))(*(void *)v105 + 8))(v105);
  }
  uint64_t v106 = *((void *)this + 347);
  *((void *)this + 347) = 0;
  if (v106) {
    (*(void (**)(uint64_t))(*(void *)v106 + 8))(v106);
  }
  uint64_t v107 = *((void *)this + 346);
  *((void *)this + 346) = 0;
  if (v107) {
    (*(void (**)(uint64_t))(*(void *)v107 + 8))(v107);
  }
  uint64_t v108 = *((void *)this + 345);
  *((void *)this + 345) = 0;
  if (v108) {
    (*(void (**)(uint64_t))(*(void *)v108 + 8))(v108);
  }
  uint64_t v109 = *((void *)this + 344);
  *((void *)this + 344) = 0;
  if (v109) {
    (*(void (**)(uint64_t))(*(void *)v109 + 8))(v109);
  }
  uint64_t v110 = *((void *)this + 343);
  *((void *)this + 343) = 0;
  if (v110) {
    (*(void (**)(uint64_t))(*(void *)v110 + 8))(v110);
  }
  uint64_t v111 = *((void *)this + 342);
  *((void *)this + 342) = 0;
  if (v111) {
    (*(void (**)(uint64_t))(*(void *)v111 + 8))(v111);
  }
  uint64_t v112 = *((void *)this + 341);
  *((void *)this + 341) = 0;
  if (v112) {
    (*(void (**)(uint64_t))(*(void *)v112 + 8))(v112);
  }
  uint64_t v113 = *((void *)this + 340);
  *((void *)this + 340) = 0;
  if (v113) {
    (*(void (**)(uint64_t))(*(void *)v113 + 8))(v113);
  }
  uint64_t v114 = *((void *)this + 339);
  *((void *)this + 339) = 0;
  if (v114) {
    (*(void (**)(uint64_t))(*(void *)v114 + 8))(v114);
  }
  uint64_t v115 = *((void *)this + 338);
  *((void *)this + 338) = 0;
  if (v115) {
    (*(void (**)(uint64_t))(*(void *)v115 + 8))(v115);
  }
  uint64_t v116 = *((void *)this + 337);
  *((void *)this + 337) = 0;
  if (v116) {
    (*(void (**)(uint64_t))(*(void *)v116 + 8))(v116);
  }
  uint64_t v117 = *((void *)this + 336);
  *((void *)this + 336) = 0;
  if (v117) {
    (*(void (**)(uint64_t))(*(void *)v117 + 8))(v117);
  }
  uint64_t v118 = *((void *)this + 335);
  *((void *)this + 335) = 0;
  if (v118) {
    (*(void (**)(uint64_t))(*(void *)v118 + 8))(v118);
  }
  uint64_t v119 = *((void *)this + 334);
  *((void *)this + 334) = 0;
  if (v119) {
    (*(void (**)(uint64_t))(*(void *)v119 + 8))(v119);
  }
  uint64_t v120 = *((void *)this + 333);
  *((void *)this + 333) = 0;
  if (v120) {
    (*(void (**)(uint64_t))(*(void *)v120 + 8))(v120);
  }
  uint64_t v121 = *((void *)this + 332);
  *((void *)this + 332) = 0;
  if (v121) {
    (*(void (**)(uint64_t))(*(void *)v121 + 8))(v121);
  }
  uint64_t v122 = *((void *)this + 331);
  *((void *)this + 331) = 0;
  if (v122) {
    (*(void (**)(uint64_t))(*(void *)v122 + 8))(v122);
  }
  uint64_t v123 = *((void *)this + 330);
  *((void *)this + 330) = 0;
  if (v123) {
    (*(void (**)(uint64_t))(*(void *)v123 + 8))(v123);
  }
  uint64_t v124 = *((void *)this + 329);
  *((void *)this + 329) = 0;
  if (v124) {
    (*(void (**)(uint64_t))(*(void *)v124 + 8))(v124);
  }
  uint64_t v125 = *((void *)this + 328);
  *((void *)this + 328) = 0;
  if (v125) {
    (*(void (**)(uint64_t))(*(void *)v125 + 8))(v125);
  }
  uint64_t v126 = *((void *)this + 327);
  *((void *)this + 327) = 0;
  if (v126) {
    (*(void (**)(uint64_t))(*(void *)v126 + 8))(v126);
  }
  uint64_t v127 = *((void *)this + 326);
  *((void *)this + 326) = 0;
  if (v127) {
    (*(void (**)(uint64_t))(*(void *)v127 + 8))(v127);
  }
  uint64_t v128 = *((void *)this + 325);
  *((void *)this + 325) = 0;
  if (v128) {
    (*(void (**)(uint64_t))(*(void *)v128 + 8))(v128);
  }
  uint64_t v129 = *((void *)this + 324);
  *((void *)this + 324) = 0;
  if (v129) {
    (*(void (**)(uint64_t))(*(void *)v129 + 8))(v129);
  }
  uint64_t v130 = *((void *)this + 323);
  *((void *)this + 323) = 0;
  if (v130) {
    (*(void (**)(uint64_t))(*(void *)v130 + 8))(v130);
  }
  uint64_t v131 = *((void *)this + 322);
  *((void *)this + 322) = 0;
  if (v131) {
    (*(void (**)(uint64_t))(*(void *)v131 + 8))(v131);
  }
  uint64_t v132 = *((void *)this + 321);
  *((void *)this + 321) = 0;
  if (v132) {
    (*(void (**)(uint64_t))(*(void *)v132 + 8))(v132);
  }
  uint64_t v133 = *((void *)this + 320);
  *((void *)this + 320) = 0;
  if (v133) {
    (*(void (**)(uint64_t))(*(void *)v133 + 8))(v133);
  }
  uint64_t v134 = *((void *)this + 319);
  *((void *)this + 319) = 0;
  if (v134) {
    (*(void (**)(uint64_t))(*(void *)v134 + 8))(v134);
  }
  uint64_t v135 = *((void *)this + 318);
  *((void *)this + 318) = 0;
  if (v135) {
    (*(void (**)(uint64_t))(*(void *)v135 + 8))(v135);
  }
  uint64_t v136 = *((void *)this + 317);
  *((void *)this + 317) = 0;
  if (v136) {
    (*(void (**)(uint64_t))(*(void *)v136 + 8))(v136);
  }
  uint64_t v137 = *((void *)this + 316);
  *((void *)this + 316) = 0;
  if (v137) {
    (*(void (**)(uint64_t))(*(void *)v137 + 8))(v137);
  }
  uint64_t v138 = *((void *)this + 315);
  *((void *)this + 315) = 0;
  if (v138) {
    (*(void (**)(uint64_t))(*(void *)v138 + 8))(v138);
  }
  uint64_t v139 = *((void *)this + 314);
  *((void *)this + 314) = 0;
  if (v139) {
    (*(void (**)(uint64_t))(*(void *)v139 + 8))(v139);
  }
  uint64_t v140 = *((void *)this + 313);
  *((void *)this + 313) = 0;
  if (v140) {
    (*(void (**)(uint64_t))(*(void *)v140 + 8))(v140);
  }
  uint64_t v141 = *((void *)this + 312);
  *((void *)this + 312) = 0;
  if (v141) {
    (*(void (**)(uint64_t))(*(void *)v141 + 8))(v141);
  }
  uint64_t v142 = *((void *)this + 311);
  *((void *)this + 311) = 0;
  if (v142) {
    (*(void (**)(uint64_t))(*(void *)v142 + 8))(v142);
  }
  uint64_t v143 = *((void *)this + 310);
  *((void *)this + 310) = 0;
  if (v143) {
    (*(void (**)(uint64_t))(*(void *)v143 + 8))(v143);
  }
  uint64_t v144 = *((void *)this + 309);
  *((void *)this + 309) = 0;
  if (v144) {
    (*(void (**)(uint64_t))(*(void *)v144 + 8))(v144);
  }
  uint64_t v145 = *((void *)this + 308);
  *((void *)this + 308) = 0;
  if (v145) {
    (*(void (**)(uint64_t))(*(void *)v145 + 8))(v145);
  }
  uint64_t v146 = *((void *)this + 307);
  *((void *)this + 307) = 0;
  if (v146) {
    (*(void (**)(uint64_t))(*(void *)v146 + 8))(v146);
  }
  uint64_t v147 = *((void *)this + 306);
  *((void *)this + 306) = 0;
  if (v147) {
    (*(void (**)(uint64_t))(*(void *)v147 + 8))(v147);
  }
  uint64_t v148 = *((void *)this + 305);
  *((void *)this + 305) = 0;
  if (v148) {
    (*(void (**)(uint64_t))(*(void *)v148 + 8))(v148);
  }
  uint64_t v149 = *((void *)this + 304);
  *((void *)this + 304) = 0;
  if (v149) {
    (*(void (**)(uint64_t))(*(void *)v149 + 8))(v149);
  }
  uint64_t v150 = *((void *)this + 303);
  *((void *)this + 303) = 0;
  if (v150) {
    (*(void (**)(uint64_t))(*(void *)v150 + 8))(v150);
  }
  uint64_t v151 = *((void *)this + 302);
  *((void *)this + 302) = 0;
  if (v151) {
    (*(void (**)(uint64_t))(*(void *)v151 + 8))(v151);
  }
  uint64_t v152 = *((void *)this + 301);
  *((void *)this + 301) = 0;
  if (v152) {
    (*(void (**)(uint64_t))(*(void *)v152 + 8))(v152);
  }
  uint64_t v153 = *((void *)this + 300);
  *((void *)this + 300) = 0;
  if (v153) {
    (*(void (**)(uint64_t))(*(void *)v153 + 8))(v153);
  }
  uint64_t v154 = *((void *)this + 299);
  *((void *)this + 299) = 0;
  if (v154) {
    (*(void (**)(uint64_t))(*(void *)v154 + 8))(v154);
  }
  uint64_t v155 = *((void *)this + 298);
  *((void *)this + 298) = 0;
  if (v155) {
    (*(void (**)(uint64_t))(*(void *)v155 + 8))(v155);
  }
  uint64_t v156 = *((void *)this + 297);
  *((void *)this + 297) = 0;
  if (v156) {
    (*(void (**)(uint64_t))(*(void *)v156 + 8))(v156);
  }
  uint64_t v157 = *((void *)this + 296);
  *((void *)this + 296) = 0;
  if (v157) {
    (*(void (**)(uint64_t))(*(void *)v157 + 8))(v157);
  }
  uint64_t v158 = *((void *)this + 295);
  *((void *)this + 295) = 0;
  if (v158) {
    (*(void (**)(uint64_t))(*(void *)v158 + 8))(v158);
  }
  uint64_t v159 = *((void *)this + 294);
  *((void *)this + 294) = 0;
  if (v159) {
    (*(void (**)(uint64_t))(*(void *)v159 + 8))(v159);
  }
  uint64_t v160 = *((void *)this + 293);
  *((void *)this + 293) = 0;
  if (v160) {
    (*(void (**)(uint64_t))(*(void *)v160 + 8))(v160);
  }
  uint64_t v161 = *((void *)this + 292);
  *((void *)this + 292) = 0;
  if (v161) {
    (*(void (**)(uint64_t))(*(void *)v161 + 8))(v161);
  }
  uint64_t v162 = *((void *)this + 291);
  *((void *)this + 291) = 0;
  if (v162) {
    (*(void (**)(uint64_t))(*(void *)v162 + 8))(v162);
  }
  uint64_t v163 = *((void *)this + 290);
  *((void *)this + 290) = 0;
  if (v163) {
    (*(void (**)(uint64_t))(*(void *)v163 + 8))(v163);
  }
  uint64_t v164 = *((void *)this + 289);
  *((void *)this + 289) = 0;
  if (v164) {
    (*(void (**)(uint64_t))(*(void *)v164 + 8))(v164);
  }
  uint64_t v165 = *((void *)this + 288);
  *((void *)this + 288) = 0;
  if (v165) {
    (*(void (**)(uint64_t))(*(void *)v165 + 8))(v165);
  }
  uint64_t v166 = *((void *)this + 287);
  *((void *)this + 287) = 0;
  if (v166) {
    (*(void (**)(uint64_t))(*(void *)v166 + 8))(v166);
  }
  uint64_t v167 = *((void *)this + 286);
  *((void *)this + 286) = 0;
  if (v167) {
    (*(void (**)(uint64_t))(*(void *)v167 + 8))(v167);
  }
  uint64_t v168 = *((void *)this + 285);
  *((void *)this + 285) = 0;
  if (v168) {
    (*(void (**)(uint64_t))(*(void *)v168 + 8))(v168);
  }
  uint64_t v169 = *((void *)this + 284);
  *((void *)this + 284) = 0;
  if (v169) {
    (*(void (**)(uint64_t))(*(void *)v169 + 8))(v169);
  }
  uint64_t v170 = *((void *)this + 283);
  *((void *)this + 283) = 0;
  if (v170) {
    (*(void (**)(uint64_t))(*(void *)v170 + 8))(v170);
  }
  uint64_t v171 = *((void *)this + 282);
  *((void *)this + 282) = 0;
  if (v171) {
    (*(void (**)(uint64_t))(*(void *)v171 + 8))(v171);
  }
  uint64_t v172 = *((void *)this + 281);
  *((void *)this + 281) = 0;
  if (v172) {
    (*(void (**)(uint64_t))(*(void *)v172 + 8))(v172);
  }
  uint64_t v173 = *((void *)this + 280);
  *((void *)this + 280) = 0;
  if (v173) {
    (*(void (**)(uint64_t))(*(void *)v173 + 8))(v173);
  }
  uint64_t v174 = *((void *)this + 279);
  *((void *)this + 279) = 0;
  if (v174) {
    (*(void (**)(uint64_t))(*(void *)v174 + 8))(v174);
  }
  uint64_t v175 = *((void *)this + 278);
  *((void *)this + 278) = 0;
  if (v175) {
    (*(void (**)(uint64_t))(*(void *)v175 + 8))(v175);
  }
  uint64_t v176 = *((void *)this + 277);
  *((void *)this + 277) = 0;
  if (v176) {
    (*(void (**)(uint64_t))(*(void *)v176 + 8))(v176);
  }
  uint64_t v177 = *((void *)this + 276);
  *((void *)this + 276) = 0;
  if (v177) {
    (*(void (**)(uint64_t))(*(void *)v177 + 8))(v177);
  }
  uint64_t v178 = *((void *)this + 275);
  *((void *)this + 275) = 0;
  if (v178) {
    (*(void (**)(uint64_t))(*(void *)v178 + 8))(v178);
  }
  uint64_t v179 = *((void *)this + 274);
  *((void *)this + 274) = 0;
  if (v179) {
    (*(void (**)(uint64_t))(*(void *)v179 + 8))(v179);
  }
  uint64_t v180 = *((void *)this + 273);
  *((void *)this + 273) = 0;
  if (v180) {
    (*(void (**)(uint64_t))(*(void *)v180 + 8))(v180);
  }
  uint64_t v181 = *((void *)this + 272);
  *((void *)this + 272) = 0;
  if (v181) {
    (*(void (**)(uint64_t))(*(void *)v181 + 8))(v181);
  }
  uint64_t v182 = *((void *)this + 271);
  *((void *)this + 271) = 0;
  if (v182) {
    (*(void (**)(uint64_t))(*(void *)v182 + 8))(v182);
  }
  uint64_t v183 = *((void *)this + 270);
  *((void *)this + 270) = 0;
  if (v183) {
    (*(void (**)(uint64_t))(*(void *)v183 + 8))(v183);
  }
  uint64_t v184 = *((void *)this + 269);
  *((void *)this + 269) = 0;
  if (v184) {
    (*(void (**)(uint64_t))(*(void *)v184 + 8))(v184);
  }
  uint64_t v185 = *((void *)this + 268);
  *((void *)this + 268) = 0;
  if (v185) {
    (*(void (**)(uint64_t))(*(void *)v185 + 8))(v185);
  }
  uint64_t v186 = *((void *)this + 267);
  *((void *)this + 267) = 0;
  if (v186) {
    (*(void (**)(uint64_t))(*(void *)v186 + 8))(v186);
  }
  uint64_t v187 = *((void *)this + 266);
  *((void *)this + 266) = 0;
  if (v187) {
    (*(void (**)(uint64_t))(*(void *)v187 + 8))(v187);
  }
  uint64_t v188 = *((void *)this + 265);
  *((void *)this + 265) = 0;
  if (v188) {
    (*(void (**)(uint64_t))(*(void *)v188 + 8))(v188);
  }
  uint64_t v189 = *((void *)this + 264);
  *((void *)this + 264) = 0;
  if (v189) {
    (*(void (**)(uint64_t))(*(void *)v189 + 8))(v189);
  }
  uint64_t v190 = *((void *)this + 263);
  *((void *)this + 263) = 0;
  if (v190) {
    (*(void (**)(uint64_t))(*(void *)v190 + 8))(v190);
  }
  uint64_t v191 = *((void *)this + 262);
  *((void *)this + 262) = 0;
  if (v191) {
    (*(void (**)(uint64_t))(*(void *)v191 + 8))(v191);
  }
  uint64_t v192 = *((void *)this + 261);
  *((void *)this + 261) = 0;
  if (v192) {
    (*(void (**)(uint64_t))(*(void *)v192 + 8))(v192);
  }
  uint64_t v193 = *((void *)this + 260);
  *((void *)this + 260) = 0;
  if (v193) {
    (*(void (**)(uint64_t))(*(void *)v193 + 8))(v193);
  }
  uint64_t v194 = *((void *)this + 259);
  *((void *)this + 259) = 0;
  if (v194) {
    (*(void (**)(uint64_t))(*(void *)v194 + 8))(v194);
  }
  uint64_t v195 = *((void *)this + 258);
  *((void *)this + 258) = 0;
  if (v195) {
    (*(void (**)(uint64_t))(*(void *)v195 + 8))(v195);
  }
  uint64_t v196 = *((void *)this + 257);
  *((void *)this + 257) = 0;
  if (v196) {
    (*(void (**)(uint64_t))(*(void *)v196 + 8))(v196);
  }
  uint64_t v197 = *((void *)this + 256);
  *((void *)this + 256) = 0;
  if (v197) {
    (*(void (**)(uint64_t))(*(void *)v197 + 8))(v197);
  }
  uint64_t v198 = *((void *)this + 255);
  *((void *)this + 255) = 0;
  if (v198) {
    (*(void (**)(uint64_t))(*(void *)v198 + 8))(v198);
  }
  uint64_t v199 = *((void *)this + 254);
  *((void *)this + 254) = 0;
  if (v199) {
    (*(void (**)(uint64_t))(*(void *)v199 + 8))(v199);
  }
  uint64_t v200 = *((void *)this + 253);
  *((void *)this + 253) = 0;
  if (v200) {
    (*(void (**)(uint64_t))(*(void *)v200 + 8))(v200);
  }
  uint64_t v201 = *((void *)this + 252);
  *((void *)this + 252) = 0;
  if (v201) {
    (*(void (**)(uint64_t))(*(void *)v201 + 8))(v201);
  }
  uint64_t v202 = *((void *)this + 251);
  *((void *)this + 251) = 0;
  if (v202) {
    (*(void (**)(uint64_t))(*(void *)v202 + 8))(v202);
  }
  uint64_t v203 = *((void *)this + 250);
  *((void *)this + 250) = 0;
  if (v203) {
    (*(void (**)(uint64_t))(*(void *)v203 + 8))(v203);
  }
  uint64_t v204 = *((void *)this + 249);
  *((void *)this + 249) = 0;
  if (v204) {
    (*(void (**)(uint64_t))(*(void *)v204 + 8))(v204);
  }
  uint64_t v205 = *((void *)this + 248);
  *((void *)this + 248) = 0;
  if (v205) {
    (*(void (**)(uint64_t))(*(void *)v205 + 8))(v205);
  }
  uint64_t v206 = *((void *)this + 247);
  *((void *)this + 247) = 0;
  if (v206) {
    (*(void (**)(uint64_t))(*(void *)v206 + 8))(v206);
  }
  uint64_t v207 = *((void *)this + 246);
  *((void *)this + 246) = 0;
  if (v207) {
    (*(void (**)(uint64_t))(*(void *)v207 + 8))(v207);
  }
  uint64_t v208 = *((void *)this + 245);
  *((void *)this + 245) = 0;
  if (v208) {
    (*(void (**)(uint64_t))(*(void *)v208 + 8))(v208);
  }
  uint64_t v209 = *((void *)this + 244);
  *((void *)this + 244) = 0;
  if (v209) {
    (*(void (**)(uint64_t))(*(void *)v209 + 8))(v209);
  }
  uint64_t v210 = *((void *)this + 243);
  *((void *)this + 243) = 0;
  if (v210) {
    (*(void (**)(uint64_t))(*(void *)v210 + 8))(v210);
  }
  uint64_t v211 = *((void *)this + 242);
  *((void *)this + 242) = 0;
  if (v211) {
    (*(void (**)(uint64_t))(*(void *)v211 + 8))(v211);
  }
  uint64_t v212 = *((void *)this + 241);
  *((void *)this + 241) = 0;
  if (v212) {
    (*(void (**)(uint64_t))(*(void *)v212 + 8))(v212);
  }
  uint64_t v213 = *((void *)this + 240);
  *((void *)this + 240) = 0;
  if (v213) {
    (*(void (**)(uint64_t))(*(void *)v213 + 8))(v213);
  }
  uint64_t v214 = *((void *)this + 239);
  *((void *)this + 239) = 0;
  if (v214) {
    (*(void (**)(uint64_t))(*(void *)v214 + 8))(v214);
  }
  uint64_t v215 = *((void *)this + 238);
  *((void *)this + 238) = 0;
  if (v215) {
    (*(void (**)(uint64_t))(*(void *)v215 + 8))(v215);
  }
  uint64_t v216 = *((void *)this + 237);
  *((void *)this + 237) = 0;
  if (v216) {
    (*(void (**)(uint64_t))(*(void *)v216 + 8))(v216);
  }
  uint64_t v217 = *((void *)this + 236);
  *((void *)this + 236) = 0;
  if (v217) {
    (*(void (**)(uint64_t))(*(void *)v217 + 8))(v217);
  }
  uint64_t v218 = *((void *)this + 235);
  *((void *)this + 235) = 0;
  if (v218) {
    (*(void (**)(uint64_t))(*(void *)v218 + 8))(v218);
  }
  uint64_t v219 = *((void *)this + 234);
  *((void *)this + 234) = 0;
  if (v219) {
    (*(void (**)(uint64_t))(*(void *)v219 + 8))(v219);
  }
  uint64_t v220 = *((void *)this + 233);
  *((void *)this + 233) = 0;
  if (v220) {
    (*(void (**)(uint64_t))(*(void *)v220 + 8))(v220);
  }
  uint64_t v221 = *((void *)this + 232);
  *((void *)this + 232) = 0;
  if (v221) {
    (*(void (**)(uint64_t))(*(void *)v221 + 8))(v221);
  }
  uint64_t v222 = *((void *)this + 231);
  *((void *)this + 231) = 0;
  if (v222) {
    (*(void (**)(uint64_t))(*(void *)v222 + 8))(v222);
  }
  uint64_t v223 = *((void *)this + 230);
  *((void *)this + 230) = 0;
  if (v223) {
    (*(void (**)(uint64_t))(*(void *)v223 + 8))(v223);
  }
  uint64_t v224 = *((void *)this + 229);
  *((void *)this + 229) = 0;
  if (v224) {
    (*(void (**)(uint64_t))(*(void *)v224 + 8))(v224);
  }
  uint64_t v225 = *((void *)this + 228);
  *((void *)this + 228) = 0;
  if (v225) {
    (*(void (**)(uint64_t))(*(void *)v225 + 8))(v225);
  }
  uint64_t v226 = *((void *)this + 227);
  *((void *)this + 227) = 0;
  if (v226) {
    (*(void (**)(uint64_t))(*(void *)v226 + 8))(v226);
  }
  uint64_t v227 = *((void *)this + 226);
  *((void *)this + 226) = 0;
  if (v227) {
    (*(void (**)(uint64_t))(*(void *)v227 + 8))(v227);
  }
  uint64_t v228 = *((void *)this + 225);
  *((void *)this + 225) = 0;
  if (v228) {
    (*(void (**)(uint64_t))(*(void *)v228 + 8))(v228);
  }
  uint64_t v229 = *((void *)this + 224);
  *((void *)this + 224) = 0;
  if (v229) {
    (*(void (**)(uint64_t))(*(void *)v229 + 8))(v229);
  }
  uint64_t v230 = *((void *)this + 223);
  *((void *)this + 223) = 0;
  if (v230) {
    (*(void (**)(uint64_t))(*(void *)v230 + 8))(v230);
  }
  uint64_t v231 = *((void *)this + 222);
  *((void *)this + 222) = 0;
  if (v231) {
    (*(void (**)(uint64_t))(*(void *)v231 + 8))(v231);
  }
  uint64_t v232 = *((void *)this + 221);
  *((void *)this + 221) = 0;
  if (v232) {
    (*(void (**)(uint64_t))(*(void *)v232 + 8))(v232);
  }
  uint64_t v233 = *((void *)this + 220);
  *((void *)this + 220) = 0;
  if (v233) {
    (*(void (**)(uint64_t))(*(void *)v233 + 8))(v233);
  }
  uint64_t v234 = *((void *)this + 219);
  *((void *)this + 219) = 0;
  if (v234) {
    (*(void (**)(uint64_t))(*(void *)v234 + 8))(v234);
  }
  uint64_t v235 = *((void *)this + 218);
  *((void *)this + 218) = 0;
  if (v235) {
    (*(void (**)(uint64_t))(*(void *)v235 + 8))(v235);
  }
  uint64_t v236 = *((void *)this + 217);
  *((void *)this + 217) = 0;
  if (v236) {
    (*(void (**)(uint64_t))(*(void *)v236 + 8))(v236);
  }
  uint64_t v237 = *((void *)this + 216);
  *((void *)this + 216) = 0;
  if (v237) {
    (*(void (**)(uint64_t))(*(void *)v237 + 8))(v237);
  }
  uint64_t v238 = *((void *)this + 215);
  *((void *)this + 215) = 0;
  if (v238) {
    (*(void (**)(uint64_t))(*(void *)v238 + 8))(v238);
  }
  uint64_t v239 = *((void *)this + 214);
  *((void *)this + 214) = 0;
  if (v239) {
    (*(void (**)(uint64_t))(*(void *)v239 + 8))(v239);
  }
  uint64_t v240 = *((void *)this + 213);
  *((void *)this + 213) = 0;
  if (v240) {
    (*(void (**)(uint64_t))(*(void *)v240 + 8))(v240);
  }
  uint64_t v241 = *((void *)this + 212);
  *((void *)this + 212) = 0;
  if (v241) {
    (*(void (**)(uint64_t))(*(void *)v241 + 8))(v241);
  }
  uint64_t v242 = *((void *)this + 211);
  *((void *)this + 211) = 0;
  if (v242) {
    (*(void (**)(uint64_t))(*(void *)v242 + 8))(v242);
  }
  uint64_t v243 = *((void *)this + 210);
  *((void *)this + 210) = 0;
  if (v243) {
    (*(void (**)(uint64_t))(*(void *)v243 + 8))(v243);
  }
  uint64_t v244 = *((void *)this + 209);
  *((void *)this + 209) = 0;
  if (v244) {
    (*(void (**)(uint64_t))(*(void *)v244 + 8))(v244);
  }
  uint64_t v245 = *((void *)this + 208);
  *((void *)this + 208) = 0;
  if (v245) {
    (*(void (**)(uint64_t))(*(void *)v245 + 8))(v245);
  }
  uint64_t v246 = *((void *)this + 207);
  *((void *)this + 207) = 0;
  if (v246) {
    (*(void (**)(uint64_t))(*(void *)v246 + 8))(v246);
  }
  uint64_t v247 = *((void *)this + 206);
  *((void *)this + 206) = 0;
  if (v247) {
    (*(void (**)(uint64_t))(*(void *)v247 + 8))(v247);
  }
  uint64_t v248 = *((void *)this + 205);
  *((void *)this + 205) = 0;
  if (v248) {
    (*(void (**)(uint64_t))(*(void *)v248 + 8))(v248);
  }
  uint64_t v249 = *((void *)this + 204);
  *((void *)this + 204) = 0;
  if (v249) {
    (*(void (**)(uint64_t))(*(void *)v249 + 8))(v249);
  }
  uint64_t v250 = *((void *)this + 203);
  *((void *)this + 203) = 0;
  if (v250) {
    (*(void (**)(uint64_t))(*(void *)v250 + 8))(v250);
  }
  uint64_t v251 = *((void *)this + 202);
  *((void *)this + 202) = 0;
  if (v251) {
    (*(void (**)(uint64_t))(*(void *)v251 + 8))(v251);
  }
  uint64_t v252 = *((void *)this + 201);
  *((void *)this + 201) = 0;
  if (v252) {
    (*(void (**)(uint64_t))(*(void *)v252 + 8))(v252);
  }
  uint64_t v253 = *((void *)this + 200);
  *((void *)this + 200) = 0;
  if (v253) {
    (*(void (**)(uint64_t))(*(void *)v253 + 8))(v253);
  }
  uint64_t v254 = *((void *)this + 199);
  *((void *)this + 199) = 0;
  if (v254) {
    (*(void (**)(uint64_t))(*(void *)v254 + 8))(v254);
  }
  uint64_t v255 = *((void *)this + 198);
  *((void *)this + 198) = 0;
  if (v255) {
    (*(void (**)(uint64_t))(*(void *)v255 + 8))(v255);
  }
  uint64_t v256 = *((void *)this + 197);
  *((void *)this + 197) = 0;
  if (v256) {
    (*(void (**)(uint64_t))(*(void *)v256 + 8))(v256);
  }
  uint64_t v257 = *((void *)this + 196);
  *((void *)this + 196) = 0;
  if (v257) {
    (*(void (**)(uint64_t))(*(void *)v257 + 8))(v257);
  }
  uint64_t v258 = *((void *)this + 195);
  *((void *)this + 195) = 0;
  if (v258) {
    (*(void (**)(uint64_t))(*(void *)v258 + 8))(v258);
  }
  uint64_t v259 = *((void *)this + 194);
  *((void *)this + 194) = 0;
  if (v259) {
    (*(void (**)(uint64_t))(*(void *)v259 + 8))(v259);
  }
  uint64_t v260 = *((void *)this + 193);
  *((void *)this + 193) = 0;
  if (v260) {
    (*(void (**)(uint64_t))(*(void *)v260 + 8))(v260);
  }
  uint64_t v261 = *((void *)this + 192);
  *((void *)this + 192) = 0;
  if (v261) {
    (*(void (**)(uint64_t))(*(void *)v261 + 8))(v261);
  }
  uint64_t v262 = *((void *)this + 191);
  *((void *)this + 191) = 0;
  if (v262) {
    (*(void (**)(uint64_t))(*(void *)v262 + 8))(v262);
  }
  uint64_t v263 = *((void *)this + 190);
  *((void *)this + 190) = 0;
  if (v263) {
    (*(void (**)(uint64_t))(*(void *)v263 + 8))(v263);
  }
  uint64_t v264 = *((void *)this + 189);
  *((void *)this + 189) = 0;
  if (v264) {
    (*(void (**)(uint64_t))(*(void *)v264 + 8))(v264);
  }
  uint64_t v265 = *((void *)this + 188);
  *((void *)this + 188) = 0;
  if (v265) {
    (*(void (**)(uint64_t))(*(void *)v265 + 8))(v265);
  }
  uint64_t v266 = *((void *)this + 187);
  *((void *)this + 187) = 0;
  if (v266) {
    (*(void (**)(uint64_t))(*(void *)v266 + 8))(v266);
  }
  uint64_t v267 = *((void *)this + 186);
  *((void *)this + 186) = 0;
  if (v267) {
    (*(void (**)(uint64_t))(*(void *)v267 + 8))(v267);
  }
  uint64_t v268 = *((void *)this + 185);
  *((void *)this + 185) = 0;
  if (v268) {
    (*(void (**)(uint64_t))(*(void *)v268 + 8))(v268);
  }
  uint64_t v269 = *((void *)this + 184);
  *((void *)this + 184) = 0;
  if (v269) {
    (*(void (**)(uint64_t))(*(void *)v269 + 8))(v269);
  }
  uint64_t v270 = *((void *)this + 183);
  *((void *)this + 183) = 0;
  if (v270) {
    (*(void (**)(uint64_t))(*(void *)v270 + 8))(v270);
  }
  uint64_t v271 = *((void *)this + 182);
  *((void *)this + 182) = 0;
  if (v271) {
    (*(void (**)(uint64_t))(*(void *)v271 + 8))(v271);
  }
  uint64_t v272 = *((void *)this + 181);
  *((void *)this + 181) = 0;
  if (v272) {
    (*(void (**)(uint64_t))(*(void *)v272 + 8))(v272);
  }
  uint64_t v273 = *((void *)this + 180);
  *((void *)this + 180) = 0;
  if (v273) {
    (*(void (**)(uint64_t))(*(void *)v273 + 8))(v273);
  }
  uint64_t v274 = *((void *)this + 179);
  *((void *)this + 179) = 0;
  if (v274) {
    (*(void (**)(uint64_t))(*(void *)v274 + 8))(v274);
  }
  uint64_t v275 = *((void *)this + 178);
  *((void *)this + 178) = 0;
  if (v275) {
    (*(void (**)(uint64_t))(*(void *)v275 + 8))(v275);
  }
  uint64_t v276 = *((void *)this + 177);
  *((void *)this + 177) = 0;
  if (v276) {
    (*(void (**)(uint64_t))(*(void *)v276 + 8))(v276);
  }
  uint64_t v277 = *((void *)this + 176);
  *((void *)this + 176) = 0;
  if (v277) {
    (*(void (**)(uint64_t))(*(void *)v277 + 8))(v277);
  }
  uint64_t v278 = *((void *)this + 175);
  *((void *)this + 175) = 0;
  if (v278) {
    (*(void (**)(uint64_t))(*(void *)v278 + 8))(v278);
  }
  uint64_t v279 = *((void *)this + 174);
  *((void *)this + 174) = 0;
  if (v279) {
    (*(void (**)(uint64_t))(*(void *)v279 + 8))(v279);
  }
  uint64_t v280 = *((void *)this + 173);
  *((void *)this + 173) = 0;
  if (v280) {
    (*(void (**)(uint64_t))(*(void *)v280 + 8))(v280);
  }
  uint64_t v281 = *((void *)this + 172);
  *((void *)this + 172) = 0;
  if (v281) {
    (*(void (**)(uint64_t))(*(void *)v281 + 8))(v281);
  }
  uint64_t v282 = *((void *)this + 171);
  *((void *)this + 171) = 0;
  if (v282) {
    (*(void (**)(uint64_t))(*(void *)v282 + 8))(v282);
  }
  uint64_t v283 = *((void *)this + 170);
  *((void *)this + 170) = 0;
  if (v283) {
    (*(void (**)(uint64_t))(*(void *)v283 + 8))(v283);
  }
  uint64_t v284 = *((void *)this + 169);
  *((void *)this + 169) = 0;
  if (v284) {
    (*(void (**)(uint64_t))(*(void *)v284 + 8))(v284);
  }
  uint64_t v285 = *((void *)this + 168);
  *((void *)this + 168) = 0;
  if (v285) {
    (*(void (**)(uint64_t))(*(void *)v285 + 8))(v285);
  }
  uint64_t v286 = *((void *)this + 167);
  *((void *)this + 167) = 0;
  if (v286) {
    (*(void (**)(uint64_t))(*(void *)v286 + 8))(v286);
  }
  uint64_t v287 = *((void *)this + 166);
  *((void *)this + 166) = 0;
  if (v287) {
    (*(void (**)(uint64_t))(*(void *)v287 + 8))(v287);
  }
  uint64_t v288 = *((void *)this + 165);
  *((void *)this + 165) = 0;
  if (v288) {
    (*(void (**)(uint64_t))(*(void *)v288 + 8))(v288);
  }
  uint64_t v289 = *((void *)this + 164);
  *((void *)this + 164) = 0;
  if (v289) {
    (*(void (**)(uint64_t))(*(void *)v289 + 8))(v289);
  }
  uint64_t v290 = *((void *)this + 163);
  *((void *)this + 163) = 0;
  if (v290) {
    (*(void (**)(uint64_t))(*(void *)v290 + 8))(v290);
  }
  uint64_t v291 = *((void *)this + 162);
  *((void *)this + 162) = 0;
  if (v291) {
    (*(void (**)(uint64_t))(*(void *)v291 + 8))(v291);
  }
  uint64_t v292 = *((void *)this + 161);
  *((void *)this + 161) = 0;
  if (v292) {
    (*(void (**)(uint64_t))(*(void *)v292 + 8))(v292);
  }
  uint64_t v293 = *((void *)this + 160);
  *((void *)this + 160) = 0;
  if (v293) {
    (*(void (**)(uint64_t))(*(void *)v293 + 8))(v293);
  }
  uint64_t v294 = *((void *)this + 159);
  *((void *)this + 159) = 0;
  if (v294) {
    (*(void (**)(uint64_t))(*(void *)v294 + 8))(v294);
  }
  uint64_t v295 = *((void *)this + 158);
  *((void *)this + 158) = 0;
  if (v295) {
    (*(void (**)(uint64_t))(*(void *)v295 + 8))(v295);
  }
  uint64_t v296 = *((void *)this + 157);
  *((void *)this + 157) = 0;
  if (v296) {
    (*(void (**)(uint64_t))(*(void *)v296 + 8))(v296);
  }
  uint64_t v297 = *((void *)this + 156);
  *((void *)this + 156) = 0;
  if (v297) {
    (*(void (**)(uint64_t))(*(void *)v297 + 8))(v297);
  }
  uint64_t v298 = *((void *)this + 155);
  *((void *)this + 155) = 0;
  if (v298) {
    (*(void (**)(uint64_t))(*(void *)v298 + 8))(v298);
  }
  uint64_t v299 = *((void *)this + 154);
  *((void *)this + 154) = 0;
  if (v299) {
    (*(void (**)(uint64_t))(*(void *)v299 + 8))(v299);
  }
  uint64_t v300 = *((void *)this + 153);
  *((void *)this + 153) = 0;
  if (v300) {
    (*(void (**)(uint64_t))(*(void *)v300 + 8))(v300);
  }
  uint64_t v301 = *((void *)this + 152);
  *((void *)this + 152) = 0;
  if (v301) {
    (*(void (**)(uint64_t))(*(void *)v301 + 8))(v301);
  }
  uint64_t v302 = *((void *)this + 151);
  *((void *)this + 151) = 0;
  if (v302) {
    (*(void (**)(uint64_t))(*(void *)v302 + 8))(v302);
  }
  uint64_t v303 = *((void *)this + 150);
  *((void *)this + 150) = 0;
  if (v303) {
    (*(void (**)(uint64_t))(*(void *)v303 + 8))(v303);
  }
  uint64_t v304 = *((void *)this + 149);
  *((void *)this + 149) = 0;
  if (v304) {
    (*(void (**)(uint64_t))(*(void *)v304 + 8))(v304);
  }
  uint64_t v305 = *((void *)this + 148);
  *((void *)this + 148) = 0;
  if (v305) {
    (*(void (**)(uint64_t))(*(void *)v305 + 8))(v305);
  }
  uint64_t v306 = *((void *)this + 147);
  *((void *)this + 147) = 0;
  if (v306) {
    (*(void (**)(uint64_t))(*(void *)v306 + 8))(v306);
  }
  uint64_t v307 = *((void *)this + 146);
  *((void *)this + 146) = 0;
  if (v307) {
    (*(void (**)(uint64_t))(*(void *)v307 + 8))(v307);
  }
  uint64_t v308 = *((void *)this + 145);
  *((void *)this + 145) = 0;
  if (v308) {
    (*(void (**)(uint64_t))(*(void *)v308 + 8))(v308);
  }
  uint64_t v309 = *((void *)this + 144);
  *((void *)this + 144) = 0;
  if (v309) {
    (*(void (**)(uint64_t))(*(void *)v309 + 8))(v309);
  }
  uint64_t v310 = *((void *)this + 143);
  *((void *)this + 143) = 0;
  if (v310) {
    (*(void (**)(uint64_t))(*(void *)v310 + 8))(v310);
  }
  uint64_t v311 = *((void *)this + 142);
  *((void *)this + 142) = 0;
  if (v311) {
    (*(void (**)(uint64_t))(*(void *)v311 + 8))(v311);
  }
  uint64_t v312 = *((void *)this + 141);
  *((void *)this + 141) = 0;
  if (v312) {
    (*(void (**)(uint64_t))(*(void *)v312 + 8))(v312);
  }
  uint64_t v313 = *((void *)this + 140);
  *((void *)this + 140) = 0;
  if (v313) {
    (*(void (**)(uint64_t))(*(void *)v313 + 8))(v313);
  }
  uint64_t v314 = *((void *)this + 139);
  *((void *)this + 139) = 0;
  if (v314) {
    (*(void (**)(uint64_t))(*(void *)v314 + 8))(v314);
  }
  uint64_t v315 = *((void *)this + 138);
  *((void *)this + 138) = 0;
  if (v315) {
    (*(void (**)(uint64_t))(*(void *)v315 + 8))(v315);
  }
  uint64_t v316 = *((void *)this + 137);
  *((void *)this + 137) = 0;
  if (v316) {
    (*(void (**)(uint64_t))(*(void *)v316 + 8))(v316);
  }
  uint64_t v317 = *((void *)this + 136);
  *((void *)this + 136) = 0;
  if (v317) {
    (*(void (**)(uint64_t))(*(void *)v317 + 8))(v317);
  }
  uint64_t v318 = *((void *)this + 135);
  *((void *)this + 135) = 0;
  if (v318) {
    (*(void (**)(uint64_t))(*(void *)v318 + 8))(v318);
  }
  uint64_t v319 = *((void *)this + 134);
  *((void *)this + 134) = 0;
  if (v319) {
    (*(void (**)(uint64_t))(*(void *)v319 + 8))(v319);
  }
  uint64_t v320 = *((void *)this + 133);
  *((void *)this + 133) = 0;
  if (v320) {
    (*(void (**)(uint64_t))(*(void *)v320 + 8))(v320);
  }
  uint64_t v321 = *((void *)this + 132);
  *((void *)this + 132) = 0;
  if (v321) {
    (*(void (**)(uint64_t))(*(void *)v321 + 8))(v321);
  }
  uint64_t v322 = *((void *)this + 131);
  *((void *)this + 131) = 0;
  if (v322) {
    (*(void (**)(uint64_t))(*(void *)v322 + 8))(v322);
  }
  uint64_t v323 = *((void *)this + 130);
  *((void *)this + 130) = 0;
  if (v323) {
    (*(void (**)(uint64_t))(*(void *)v323 + 8))(v323);
  }
  uint64_t v324 = *((void *)this + 129);
  *((void *)this + 129) = 0;
  if (v324) {
    (*(void (**)(uint64_t))(*(void *)v324 + 8))(v324);
  }
  uint64_t v325 = *((void *)this + 128);
  *((void *)this + 128) = 0;
  if (v325) {
    (*(void (**)(uint64_t))(*(void *)v325 + 8))(v325);
  }
  uint64_t v326 = *((void *)this + 127);
  *((void *)this + 127) = 0;
  if (v326) {
    (*(void (**)(uint64_t))(*(void *)v326 + 8))(v326);
  }
  uint64_t v327 = *((void *)this + 126);
  *((void *)this + 126) = 0;
  if (v327) {
    (*(void (**)(uint64_t))(*(void *)v327 + 8))(v327);
  }
  uint64_t v328 = *((void *)this + 125);
  *((void *)this + 125) = 0;
  if (v328) {
    (*(void (**)(uint64_t))(*(void *)v328 + 8))(v328);
  }
  uint64_t v329 = *((void *)this + 124);
  *((void *)this + 124) = 0;
  if (v329) {
    (*(void (**)(uint64_t))(*(void *)v329 + 8))(v329);
  }
  uint64_t v330 = *((void *)this + 123);
  *((void *)this + 123) = 0;
  if (v330) {
    (*(void (**)(uint64_t))(*(void *)v330 + 8))(v330);
  }
  uint64_t v331 = *((void *)this + 122);
  *((void *)this + 122) = 0;
  if (v331) {
    (*(void (**)(uint64_t))(*(void *)v331 + 8))(v331);
  }
  uint64_t v332 = *((void *)this + 121);
  *((void *)this + 121) = 0;
  if (v332) {
    (*(void (**)(uint64_t))(*(void *)v332 + 8))(v332);
  }
  uint64_t v333 = *((void *)this + 120);
  *((void *)this + 120) = 0;
  if (v333) {
    (*(void (**)(uint64_t))(*(void *)v333 + 8))(v333);
  }
  uint64_t v334 = *((void *)this + 119);
  *((void *)this + 119) = 0;
  if (v334) {
    (*(void (**)(uint64_t))(*(void *)v334 + 8))(v334);
  }
  uint64_t v335 = *((void *)this + 118);
  *((void *)this + 118) = 0;
  if (v335) {
    (*(void (**)(uint64_t))(*(void *)v335 + 8))(v335);
  }
  uint64_t v336 = *((void *)this + 117);
  *((void *)this + 117) = 0;
  if (v336) {
    (*(void (**)(uint64_t))(*(void *)v336 + 8))(v336);
  }
  uint64_t v337 = *((void *)this + 116);
  *((void *)this + 116) = 0;
  if (v337) {
    (*(void (**)(uint64_t))(*(void *)v337 + 8))(v337);
  }
  uint64_t v338 = *((void *)this + 115);
  *((void *)this + 115) = 0;
  if (v338) {
    (*(void (**)(uint64_t))(*(void *)v338 + 8))(v338);
  }
  uint64_t v339 = *((void *)this + 114);
  *((void *)this + 114) = 0;
  if (v339) {
    (*(void (**)(uint64_t))(*(void *)v339 + 8))(v339);
  }
  uint64_t v340 = *((void *)this + 113);
  *((void *)this + 113) = 0;
  if (v340) {
    (*(void (**)(uint64_t))(*(void *)v340 + 8))(v340);
  }
  uint64_t v341 = *((void *)this + 112);
  *((void *)this + 112) = 0;
  if (v341) {
    (*(void (**)(uint64_t))(*(void *)v341 + 8))(v341);
  }
  uint64_t v342 = *((void *)this + 111);
  *((void *)this + 111) = 0;
  if (v342) {
    (*(void (**)(uint64_t))(*(void *)v342 + 8))(v342);
  }
  uint64_t v343 = *((void *)this + 110);
  *((void *)this + 110) = 0;
  if (v343) {
    (*(void (**)(uint64_t))(*(void *)v343 + 8))(v343);
  }
  uint64_t v344 = *((void *)this + 109);
  *((void *)this + 109) = 0;
  if (v344) {
    (*(void (**)(uint64_t))(*(void *)v344 + 8))(v344);
  }
  uint64_t v345 = *((void *)this + 108);
  *((void *)this + 108) = 0;
  if (v345) {
    (*(void (**)(uint64_t))(*(void *)v345 + 8))(v345);
  }
  uint64_t v346 = *((void *)this + 107);
  *((void *)this + 107) = 0;
  if (v346) {
    (*(void (**)(uint64_t))(*(void *)v346 + 8))(v346);
  }
  uint64_t v347 = *((void *)this + 106);
  *((void *)this + 106) = 0;
  if (v347) {
    (*(void (**)(uint64_t))(*(void *)v347 + 8))(v347);
  }
  uint64_t v348 = *((void *)this + 105);
  *((void *)this + 105) = 0;
  if (v348) {
    (*(void (**)(uint64_t))(*(void *)v348 + 8))(v348);
  }
  uint64_t v349 = *((void *)this + 104);
  *((void *)this + 104) = 0;
  if (v349) {
    (*(void (**)(uint64_t))(*(void *)v349 + 8))(v349);
  }
  uint64_t v350 = *((void *)this + 103);
  *((void *)this + 103) = 0;
  if (v350) {
    (*(void (**)(uint64_t))(*(void *)v350 + 8))(v350);
  }
  uint64_t v351 = *((void *)this + 102);
  *((void *)this + 102) = 0;
  if (v351) {
    (*(void (**)(uint64_t))(*(void *)v351 + 8))(v351);
  }
  uint64_t v352 = *((void *)this + 101);
  *((void *)this + 101) = 0;
  if (v352) {
    (*(void (**)(uint64_t))(*(void *)v352 + 8))(v352);
  }
  uint64_t v353 = *((void *)this + 100);
  *((void *)this + 100) = 0;
  if (v353) {
    (*(void (**)(uint64_t))(*(void *)v353 + 8))(v353);
  }
  uint64_t v354 = *((void *)this + 99);
  *((void *)this + 99) = 0;
  if (v354) {
    (*(void (**)(uint64_t))(*(void *)v354 + 8))(v354);
  }
  uint64_t v355 = *((void *)this + 98);
  *((void *)this + 98) = 0;
  if (v355) {
    (*(void (**)(uint64_t))(*(void *)v355 + 8))(v355);
  }
  uint64_t v356 = *((void *)this + 97);
  *((void *)this + 97) = 0;
  if (v356) {
    (*(void (**)(uint64_t))(*(void *)v356 + 8))(v356);
  }
  uint64_t v357 = *((void *)this + 96);
  *((void *)this + 96) = 0;
  if (v357) {
    (*(void (**)(uint64_t))(*(void *)v357 + 8))(v357);
  }
  uint64_t v358 = *((void *)this + 95);
  *((void *)this + 95) = 0;
  if (v358) {
    (*(void (**)(uint64_t))(*(void *)v358 + 8))(v358);
  }
  uint64_t v359 = *((void *)this + 94);
  *((void *)this + 94) = 0;
  if (v359) {
    (*(void (**)(uint64_t))(*(void *)v359 + 8))(v359);
  }
  uint64_t v360 = *((void *)this + 93);
  *((void *)this + 93) = 0;
  if (v360) {
    (*(void (**)(uint64_t))(*(void *)v360 + 8))(v360);
  }
  uint64_t v361 = *((void *)this + 92);
  *((void *)this + 92) = 0;
  if (v361) {
    (*(void (**)(uint64_t))(*(void *)v361 + 8))(v361);
  }
  uint64_t v362 = *((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v362) {
    (*(void (**)(uint64_t))(*(void *)v362 + 8))(v362);
  }
  uint64_t v363 = *((void *)this + 90);
  *((void *)this + 90) = 0;
  if (v363) {
    (*(void (**)(uint64_t))(*(void *)v363 + 8))(v363);
  }
  uint64_t v364 = *((void *)this + 89);
  *((void *)this + 89) = 0;
  if (v364) {
    (*(void (**)(uint64_t))(*(void *)v364 + 8))(v364);
  }
  uint64_t v365 = *((void *)this + 88);
  *((void *)this + 88) = 0;
  if (v365) {
    (*(void (**)(uint64_t))(*(void *)v365 + 8))(v365);
  }
  uint64_t v366 = *((void *)this + 87);
  *((void *)this + 87) = 0;
  if (v366) {
    (*(void (**)(uint64_t))(*(void *)v366 + 8))(v366);
  }
  uint64_t v367 = *((void *)this + 86);
  *((void *)this + 86) = 0;
  if (v367) {
    (*(void (**)(uint64_t))(*(void *)v367 + 8))(v367);
  }
  uint64_t v368 = *((void *)this + 85);
  *((void *)this + 85) = 0;
  if (v368) {
    (*(void (**)(uint64_t))(*(void *)v368 + 8))(v368);
  }
  uint64_t v369 = *((void *)this + 84);
  *((void *)this + 84) = 0;
  if (v369) {
    (*(void (**)(uint64_t))(*(void *)v369 + 8))(v369);
  }
  uint64_t v370 = *((void *)this + 83);
  *((void *)this + 83) = 0;
  if (v370) {
    (*(void (**)(uint64_t))(*(void *)v370 + 8))(v370);
  }
  uint64_t v371 = *((void *)this + 82);
  *((void *)this + 82) = 0;
  if (v371) {
    (*(void (**)(uint64_t))(*(void *)v371 + 8))(v371);
  }
  uint64_t v372 = *((void *)this + 81);
  *((void *)this + 81) = 0;
  if (v372) {
    (*(void (**)(uint64_t))(*(void *)v372 + 8))(v372);
  }
  uint64_t v373 = *((void *)this + 80);
  *((void *)this + 80) = 0;
  if (v373) {
    (*(void (**)(uint64_t))(*(void *)v373 + 8))(v373);
  }
  uint64_t v374 = *((void *)this + 79);
  *((void *)this + 79) = 0;
  if (v374) {
    (*(void (**)(uint64_t))(*(void *)v374 + 8))(v374);
  }
  uint64_t v375 = *((void *)this + 78);
  *((void *)this + 78) = 0;
  if (v375) {
    (*(void (**)(uint64_t))(*(void *)v375 + 8))(v375);
  }
  uint64_t v376 = *((void *)this + 76);
  *((void *)this + 76) = 0;
  if (v376) {
    (*(void (**)(uint64_t))(*(void *)v376 + 8))(v376);
  }
  uint64_t v377 = *((void *)this + 75);
  *((void *)this + 75) = 0;
  if (v377) {
    (*(void (**)(uint64_t))(*(void *)v377 + 8))(v377);
  }
  uint64_t v378 = *((void *)this + 74);
  *((void *)this + 74) = 0;
  if (v378) {
    (*(void (**)(uint64_t))(*(void *)v378 + 8))(v378);
  }
  uint64_t v379 = *((void *)this + 73);
  *((void *)this + 73) = 0;
  if (v379) {
    (*(void (**)(uint64_t))(*(void *)v379 + 8))(v379);
  }
  uint64_t v380 = *((void *)this + 72);
  *((void *)this + 72) = 0;
  if (v380) {
    (*(void (**)(uint64_t))(*(void *)v380 + 8))(v380);
  }
  uint64_t v381 = *((void *)this + 71);
  *((void *)this + 71) = 0;
  if (v381) {
    (*(void (**)(uint64_t))(*(void *)v381 + 8))(v381);
  }
  uint64_t v382 = *((void *)this + 70);
  *((void *)this + 70) = 0;
  if (v382) {
    (*(void (**)(uint64_t))(*(void *)v382 + 8))(v382);
  }
  uint64_t v383 = *((void *)this + 69);
  *((void *)this + 69) = 0;
  if (v383) {
    (*(void (**)(uint64_t))(*(void *)v383 + 8))(v383);
  }
  uint64_t v384 = *((void *)this + 68);
  *((void *)this + 68) = 0;
  if (v384) {
    (*(void (**)(uint64_t))(*(void *)v384 + 8))(v384);
  }
  uint64_t v385 = *((void *)this + 67);
  *((void *)this + 67) = 0;
  if (v385) {
    (*(void (**)(uint64_t))(*(void *)v385 + 8))(v385);
  }
  uint64_t v386 = *((void *)this + 66);
  *((void *)this + 66) = 0;
  if (v386) {
    (*(void (**)(uint64_t))(*(void *)v386 + 8))(v386);
  }
  uint64_t v387 = *((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v387) {
    (*(void (**)(uint64_t))(*(void *)v387 + 8))(v387);
  }
  uint64_t v388 = *((void *)this + 64);
  *((void *)this + 64) = 0;
  if (v388) {
    (*(void (**)(uint64_t))(*(void *)v388 + 8))(v388);
  }
  uint64_t v389 = *((void *)this + 63);
  *((void *)this + 63) = 0;
  if (v389) {
    (*(void (**)(uint64_t))(*(void *)v389 + 8))(v389);
  }
  uint64_t v390 = *((void *)this + 62);
  *((void *)this + 62) = 0;
  if (v390) {
    (*(void (**)(uint64_t))(*(void *)v390 + 8))(v390);
  }
  uint64_t v391 = *((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v391) {
    (*(void (**)(uint64_t))(*(void *)v391 + 8))(v391);
  }
  uint64_t v392 = *((void *)this + 60);
  *((void *)this + 60) = 0;
  if (v392) {
    (*(void (**)(uint64_t))(*(void *)v392 + 8))(v392);
  }
  uint64_t v393 = *((void *)this + 59);
  *((void *)this + 59) = 0;
  if (v393) {
    (*(void (**)(uint64_t))(*(void *)v393 + 8))(v393);
  }
  uint64_t v394 = *((void *)this + 58);
  *((void *)this + 58) = 0;
  if (v394) {
    (*(void (**)(uint64_t))(*(void *)v394 + 8))(v394);
  }
  uint64_t v395 = *((void *)this + 57);
  *((void *)this + 57) = 0;
  if (v395) {
    (*(void (**)(uint64_t))(*(void *)v395 + 8))(v395);
  }
  uint64_t v396 = *((void *)this + 56);
  *((void *)this + 56) = 0;
  if (v396) {
    (*(void (**)(uint64_t))(*(void *)v396 + 8))(v396);
  }
  uint64_t v397 = *((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v397) {
    (*(void (**)(uint64_t))(*(void *)v397 + 8))(v397);
  }
  uint64_t v398 = *((void *)this + 54);
  *((void *)this + 54) = 0;
  if (v398) {
    (*(void (**)(uint64_t))(*(void *)v398 + 8))(v398);
  }
  uint64_t v399 = *((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v399) {
    (*(void (**)(uint64_t))(*(void *)v399 + 8))(v399);
  }
  uint64_t v400 = *((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v400) {
    (*(void (**)(uint64_t))(*(void *)v400 + 8))(v400);
  }
  uint64_t v401 = *((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v401) {
    (*(void (**)(uint64_t))(*(void *)v401 + 8))(v401);
  }
  uint64_t v402 = *((void *)this + 50);
  *((void *)this + 50) = 0;
  if (v402) {
    (*(void (**)(uint64_t))(*(void *)v402 + 8))(v402);
  }
  uint64_t v403 = *((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v403) {
    (*(void (**)(uint64_t))(*(void *)v403 + 8))(v403);
  }
  uint64_t v404 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v404) {
    (*(void (**)(uint64_t))(*(void *)v404 + 8))(v404);
  }
  uint64_t v405 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v405) {
    (*(void (**)(uint64_t))(*(void *)v405 + 8))(v405);
  }
  uint64_t v406 = *((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v406) {
    (*(void (**)(uint64_t))(*(void *)v406 + 8))(v406);
  }
  uint64_t v407 = *((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v407) {
    (*(void (**)(uint64_t))(*(void *)v407 + 8))(v407);
  }
  uint64_t v408 = *((void *)this + 44);
  *((void *)this + 44) = 0;
  if (v408) {
    (*(void (**)(uint64_t))(*(void *)v408 + 8))(v408);
  }
  uint64_t v409 = *((void *)this + 43);
  *((void *)this + 43) = 0;
  if (v409) {
    (*(void (**)(uint64_t))(*(void *)v409 + 8))(v409);
  }
  uint64_t v410 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v410) {
    (*(void (**)(uint64_t))(*(void *)v410 + 8))(v410);
  }
  uint64_t v411 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v411) {
    (*(void (**)(uint64_t))(*(void *)v411 + 8))(v411);
  }
  uint64_t v412 = *((void *)this + 40);
  *((void *)this + 40) = 0;
  if (v412) {
    (*(void (**)(uint64_t))(*(void *)v412 + 8))(v412);
  }
  uint64_t v413 = *((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v413) {
    (*(void (**)(uint64_t))(*(void *)v413 + 8))(v413);
  }
  uint64_t v414 = *((void *)this + 38);
  *((void *)this + 38) = 0;
  if (v414) {
    (*(void (**)(uint64_t))(*(void *)v414 + 8))(v414);
  }
  uint64_t v415 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v415) {
    (*(void (**)(uint64_t))(*(void *)v415 + 8))(v415);
  }
  uint64_t v416 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v416) {
    (*(void (**)(uint64_t))(*(void *)v416 + 8))(v416);
  }
  uint64_t v417 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v417) {
    (*(void (**)(uint64_t))(*(void *)v417 + 8))(v417);
  }
  uint64_t v418 = *((void *)this + 34);
  *((void *)this + 34) = 0;
  if (v418) {
    (*(void (**)(uint64_t))(*(void *)v418 + 8))(v418);
  }
  uint64_t v419 = *((void *)this + 33);
  *((void *)this + 33) = 0;
  if (v419) {
    (*(void (**)(uint64_t))(*(void *)v419 + 8))(v419);
  }
  uint64_t v420 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v420) {
    (*(void (**)(uint64_t))(*(void *)v420 + 8))(v420);
  }
  uint64_t v421 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v421) {
    (*(void (**)(uint64_t))(*(void *)v421 + 8))(v421);
  }
  uint64_t v422 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v422) {
    (*(void (**)(uint64_t))(*(void *)v422 + 8))(v422);
  }
  uint64_t v423 = *((void *)this + 29);
  *((void *)this + 29) = 0;
  if (v423) {
    (*(void (**)(uint64_t))(*(void *)v423 + 8))(v423);
  }
  uint64_t v424 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v424) {
    (*(void (**)(uint64_t))(*(void *)v424 + 8))(v424);
  }
  uint64_t v425 = *((void *)this + 27);
  *((void *)this + 27) = 0;
  if (v425) {
    (*(void (**)(uint64_t))(*(void *)v425 + 8))(v425);
  }
  uint64_t v426 = *((void *)this + 26);
  *((void *)this + 26) = 0;
  if (v426) {
    (*(void (**)(uint64_t))(*(void *)v426 + 8))(v426);
  }
  uint64_t v427 = *((void *)this + 25);
  *((void *)this + 25) = 0;
  if (v427) {
    (*(void (**)(uint64_t))(*(void *)v427 + 8))(v427);
  }
  uint64_t v428 = *((void *)this + 24);
  *((void *)this + 24) = 0;
  if (v428) {
    (*(void (**)(uint64_t))(*(void *)v428 + 8))(v428);
  }
  uint64_t v429 = *((void *)this + 23);
  *((void *)this + 23) = 0;
  if (v429) {
    (*(void (**)(uint64_t))(*(void *)v429 + 8))(v429);
  }
  uint64_t v430 = *((void *)this + 22);
  *((void *)this + 22) = 0;
  if (v430) {
    (*(void (**)(uint64_t))(*(void *)v430 + 8))(v430);
  }
  uint64_t v431 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v431) {
    (*(void (**)(uint64_t))(*(void *)v431 + 8))(v431);
  }
  uint64_t v432 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v432) {
    (*(void (**)(uint64_t))(*(void *)v432 + 8))(v432);
  }
  uint64_t v433 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v433) {
    (*(void (**)(uint64_t))(*(void *)v433 + 8))(v433);
  }
  uint64_t v434 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v434) {
    (*(void (**)(uint64_t))(*(void *)v434 + 8))(v434);
  }
  uint64_t v435 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v435) {
    (*(void (**)(uint64_t))(*(void *)v435 + 8))(v435);
  }
  uint64_t v436 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v436) {
    (*(void (**)(uint64_t))(*(void *)v436 + 8))(v436);
  }
  uint64_t v437 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v437) {
    (*(void (**)(uint64_t))(*(void *)v437 + 8))(v437);
  }
  uint64_t v438 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v438) {
    (*(void (**)(uint64_t))(*(void *)v438 + 8))(v438);
  }
  uint64_t v439 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v439) {
    (*(void (**)(uint64_t))(*(void *)v439 + 8))(v439);
  }
  uint64_t v440 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v440) {
    (*(void (**)(uint64_t))(*(void *)v440 + 8))(v440);
  }
  uint64_t v441 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v441) {
    (*(void (**)(uint64_t))(*(void *)v441 + 8))(v441);
  }
  uint64_t v442 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v442) {
    (*(void (**)(uint64_t))(*(void *)v442 + 8))(v442);
  }
  uint64_t v443 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v443) {
    (*(void (**)(uint64_t))(*(void *)v443 + 8))(v443);
  }
  uint64_t v444 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v444) {
    (*(void (**)(uint64_t))(*(void *)v444 + 8))(v444);
  }
  uint64_t v445 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v445) {
    (*(void (**)(uint64_t))(*(void *)v445 + 8))(v445);
  }
  uint64_t v446 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v446) {
    (*(void (**)(uint64_t))(*(void *)v446 + 8))(v446);
  }
  uint64_t v447 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v447) {
    (*(void (**)(uint64_t))(*(void *)v447 + 8))(v447);
  }
  uint64_t v448 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v448) {
    (*(void (**)(uint64_t))(*(void *)v448 + 8))(v448);
  }
  uint64_t v449 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v449) {
    (*(void (**)(uint64_t))(*(void *)v449 + 8))(v449);
  }
  uint64_t v450 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v450) {
    (*(void (**)(uint64_t))(*(void *)v450 + 8))(v450);
  }
  uint64_t v451 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v451) {
    (*(void (**)(uint64_t))(*(void *)v451 + 8))(v451);
  }

  PB::Base::~Base(this);
}

void sub_19039A594(PB::Base *a1)
{
  sub_1903950E0(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19039A5CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "aPSleep");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "aPWake");
  }
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "accel");
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, this, "accel800");
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, this, "accelBatch");
  }
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, this, "accelGesture");
  }
  uint64_t v11 = *(void *)(a1 + 56);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, this, "accelGps");
  }
  uint64_t v12 = *(void *)(a1 + 64);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, this, "accelOscarEmu");
  }
  uint64_t v13 = *(void *)(a1 + 72);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, this, "accelTNBFrame");
  }
  uint64_t v14 = *(void *)(a1 + 80);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, this, "accelerometerPace");
  }
  uint64_t v15 = *(void *)(a1 + 88);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, this, "accessoryAccel");
  }
  uint64_t v16 = *(void *)(a1 + 96);
  if (v16) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32))(v16, this, "accessoryAccelConfig");
  }
  uint64_t v17 = *(void *)(a1 + 104);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, this, "accessoryActivityAsleepConfidenceEpoch");
  }
  uint64_t v18 = *(void *)(a1 + 112);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32))(v18, this, "accessoryActivityStateUpdate");
  }
  uint64_t v19 = *(void *)(a1 + 120);
  if (v19) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v19 + 32))(v19, this, "accessoryConfig");
  }
  uint64_t v20 = *(void *)(a1 + 128);
  if (v20) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v20 + 32))(v20, this, "accessoryDeviceMotion");
  }
  uint64_t v21 = *(void *)(a1 + 136);
  if (v21) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v21 + 32))(v21, this, "accessoryDeviceMotionConfig");
  }
  uint64_t v22 = *(void *)(a1 + 144);
  if (v22) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v22 + 32))(v22, this, "accessoryGyro");
  }
  uint64_t v23 = *(void *)(a1 + 152);
  if (v23) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v23 + 32))(v23, this, "accessoryGyroCachedBias");
  }
  uint64_t v24 = *(void *)(a1 + 160);
  if (v24) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v24 + 32))(v24, this, "accessoryGyroConfig");
  }
  uint64_t v25 = *(void *)(a1 + 168);
  if (v25) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v25 + 32))(v25, this, "accessoryGyroGYTT");
  }
  uint64_t v26 = *(void *)(a1 + 176);
  if (v26) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v26 + 32))(v26, this, "accessoryHeartRate");
  }
  uint64_t v27 = *(void *)(a1 + 184);
  if (v27) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v27 + 32))(v27, this, "accessoryInEarStatus");
  }
  uint64_t v28 = *(void *)(a1 + 192);
  if (v28) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v28 + 32))(v28, this, "accessoryMagnetometer");
  }
  uint64_t v29 = *(void *)(a1 + 200);
  if (v29) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v29 + 32))(v29, this, "accessoryMagnetometerConfig");
  }
  uint64_t v30 = *(void *)(a1 + 208);
  if (v30) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v30 + 32))(v30, this, "accessoryPPG");
  }
  uint64_t v31 = *(void *)(a1 + 216);
  if (v31) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v31 + 32))(v31, this, "accessoryProx");
  }
  uint64_t v32 = *(void *)(a1 + 224);
  if (v32) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v32 + 32))(v32, this, "accessoryProxSensorDrop");
  }
  uint64_t v33 = *(void *)(a1 + 232);
  if (v33) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v33 + 32))(v33, this, "accessoryProxTempComp");
  }
  uint64_t v34 = *(void *)(a1 + 240);
  if (v34) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v34 + 32))(v34, this, "accessoryProximityConfig");
  }
  uint64_t v35 = *(void *)(a1 + 248);
  if (v35) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v35 + 32))(v35, this, "accessorySleepStateConfidenceEpoch");
  }
  uint64_t v36 = *(void *)(a1 + 256);
  if (v36) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v36 + 32))(v36, this, "accessorySleepStateUpdate");
  }
  uint64_t v37 = *(void *)(a1 + 264);
  if (v37) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v37 + 32))(v37, this, "accessoryStepDetectorDebug");
  }
  uint64_t v38 = *(void *)(a1 + 272);
  if (v38) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v38 + 32))(v38, this, "accessoryWake");
  }
  uint64_t v39 = *(void *)(a1 + 280);
  if (v39) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v39 + 32))(v39, this, "accessoryWakeDebug");
  }
  uint64_t v40 = *(void *)(a1 + 288);
  if (v40) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v40 + 32))(v40, this, "airpodEvent");
  }
  uint64_t v41 = *(void *)(a1 + 296);
  if (v41) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v41 + 32))(v41, this, "alsData");
  }
  uint64_t v42 = *(void *)(a1 + 304);
  if (v42) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v42 + 32))(v42, this, "alsPhone");
  }
  uint64_t v43 = *(void *)(a1 + 312);
  if (v43) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v43 + 32))(v43, this, "altimeter");
  }
  uint64_t v44 = *(void *)(a1 + 320);
  if (v44) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v44 + 32))(v44, this, "altimeterKF");
  }
  uint64_t v45 = *(void *)(a1 + 328);
  if (v45) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v45 + 32))(v45, this, "anchorCorrection");
  }
  uint64_t v46 = *(void *)(a1 + 336);
  if (v46) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v46 + 32))(v46, this, "anchorMotionCorrespondence");
  }
  uint64_t v47 = *(void *)(a1 + 344);
  if (v47) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v47 + 32))(v47, this, "appleCV3DSLAMState");
  }
  uint64_t v48 = *(void *)(a1 + 352);
  if (v48) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v48 + 32))(v48, this, "arSessionState");
  }
  uint64_t v49 = *(void *)(a1 + 360);
  if (v49) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v49 + 32))(v49, this, "arkitWorldPose");
  }
  uint64_t v50 = *(void *)(a1 + 368);
  if (v50) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v50 + 32))(v50, this, "audioAccessoryDeviceMotion");
  }
  uint64_t v51 = *(void *)(a1 + 376);
  if (v51) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v51 + 32))(v51, this, "auxiliaryDeviceMotion");
  }
  uint64_t v52 = *(void *)(a1 + 384);
  if (v52) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v52 + 32))(v52, this, "averagedALSData");
  }
  uint64_t v53 = *(void *)(a1 + 392);
  if (v53) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v53 + 32))(v53, this, "bTConnection");
  }
  uint64_t v54 = *(void *)(a1 + 400);
  if (v54) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v54 + 32))(v54, this, "backlightState");
  }
  uint64_t v55 = *(void *)(a1 + 408);
  if (v55) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v55 + 32))(v55, this, "basebandCompassCoex");
  }
  uint64_t v56 = *(void *)(a1 + 416);
  if (v56) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v56 + 32))(v56, this, "basebandCompassCoexConstraints");
  }
  uint64_t v57 = *(void *)(a1 + 424);
  if (v57) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v57 + 32))(v57, this, "basebandSpeed");
  }
  uint64_t v58 = *(void *)(a1 + 432);
  if (v58) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v58 + 32))(v58, this, "baselineResetCheck");
  }
  uint64_t v59 = *(void *)(a1 + 440);
  if (v59) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v59 + 32))(v59, this, "batchedLocationFromOdometer");
  }
  uint64_t v60 = *(void *)(a1 + 448);
  if (v60) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v60 + 32))(v60, this, "batterySaverModeStatus");
  }
  uint64_t v61 = *(void *)(a1 + 456);
  if (v61) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v61 + 32))(v61, this, "batteryStatus");
  }
  uint64_t v62 = *(void *)(a1 + 464);
  if (v62) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v62 + 32))(v62, this, "bioMotionAnchorPose");
  }
  uint64_t v63 = *(void *)(a1 + 472);
  if (v63) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v63 + 32))(v63, this, "bioMotionClassification");
  }
  uint64_t v64 = *(void *)(a1 + 480);
  if (v64) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v64 + 32))(v64, this, "bioMotionLinkLengthFitParameters");
  }
  uint64_t v65 = *(void *)(a1 + 488);
  if (v65) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v65 + 32))(v65, this, "bioMotionOnlineLinkLengthUpdate");
  }
  uint64_t v66 = *(void *)(a1 + 496);
  if (v66) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v66 + 32))(v66, this, "bioMotionPose");
  }
  uint64_t v67 = *(void *)(a1 + 504);
  if (v67) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v67 + 32))(v67, this, "bioMotionPredictedPose");
  }
  uint64_t v68 = *(void *)(a1 + 512);
  if (v68) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v68 + 32))(v68, this, "bioMotionPropagatedAnchor");
  }
  uint64_t v69 = *(void *)(a1 + 520);
  if (v69) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v69 + 32))(v69, this, "bleedToZeroCorrection");
  }
  uint64_t v70 = *(void *)(a1 + 528);
  if (v70) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v70 + 32))(v70, this, "bodyMetrics");
  }
  uint64_t v71 = *(void *)(a1 + 536);
  if (v71) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v71 + 32))(v71, this, "braveHeartAccel");
  }
  uint64_t v72 = *(void *)(a1 + 544);
  if (v72) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v72 + 32))(v72, this, "braveHeartDeviceMotion");
  }
  uint64_t v73 = *(void *)(a1 + 552);
  if (v73) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v73 + 32))(v73, this, "braveHeartNatalieData");
  }
  uint64_t v74 = *(void *)(a1 + 560);
  if (v74) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v74 + 32))(v74, this, "braveHeartVO2MaxInput");
  }
  uint64_t v75 = *(void *)(a1 + 568);
  if (v75) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v75 + 32))(v75, this, "braveHeartWorkoutEvent");
  }
  uint64_t v76 = *(void *)(a1 + 576);
  if (v76) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v76 + 32))(v76, this, "bumpToWakeState");
  }
  uint64_t v77 = *(void *)(a1 + 584);
  if (v77) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v77 + 32))(v77, this, "cV3DPredictedPose");
  }
  uint64_t v78 = *(void *)(a1 + 592);
  if (v78) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v78 + 32))(v78, this, "calorimetryMETsConsumed");
  }
  uint64_t v79 = *(void *)(a1 + 600);
  if (v79) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v79 + 32))(v79, this, "calorimetryPauseEvent");
  }
  uint64_t v80 = *(void *)(a1 + 608);
  if (v80) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v80 + 32))(v80, this, "catherineHealthKitData");
  }
  if (*(unsigned char *)(a1 + 3616)) {
    PB::TextFormatter::format(this, "cftime", *(double *)(a1 + 616));
  }
  uint64_t v81 = *(void *)(a1 + 624);
  if (v81) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v81 + 32))(v81, this, "clefCalibration");
  }
  uint64_t v82 = *(void *)(a1 + 632);
  if (v82) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v82 + 32))(v82, this, "coarseElevationChange");
  }
  uint64_t v83 = *(void *)(a1 + 640);
  if (v83) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v83 + 32))(v83, this, "compass");
  }
  uint64_t v84 = *(void *)(a1 + 648);
  if (v84) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v84 + 32))(v84, this, "compassAlignment");
  }
  uint64_t v85 = *(void *)(a1 + 656);
  if (v85) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v85 + 32))(v85, this, "compassCalibration");
  }
  uint64_t v86 = *(void *)(a1 + 664);
  if (v86) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v86 + 32))(v86, this, "compassCalibrationAttempt");
  }
  uint64_t v87 = *(void *)(a1 + 672);
  if (v87) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v87 + 32))(v87, this, "compassConstraints");
  }
  uint64_t v88 = *(void *)(a1 + 680);
  if (v88) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v88 + 32))(v88, this, "compassCorrection");
  }
  uint64_t v89 = *(void *)(a1 + 688);
  if (v89) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v89 + 32))(v89, this, "complexHandMotion");
  }
  uint64_t v90 = *(void *)(a1 + 696);
  if (v90) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v90 + 32))(v90, this, "constrainedIntegratorModelPredictedPose");
  }
  uint64_t v91 = *(void *)(a1 + 704);
  if (v91) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v91 + 32))(v91, this, "constrainedIntegratorPose");
  }
  uint64_t v92 = *(void *)(a1 + 712);
  if (v92) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v92 + 32))(v92, this, "coprocessorReplyGaitMetrics");
  }
  uint64_t v93 = *(void *)(a1 + 720);
  if (v93) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v93 + 32))(v93, this, "courseConstraints");
  }
  uint64_t v94 = *(void *)(a1 + 728);
  if (v94) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v94 + 32))(v94, this, "courseCorrection");
  }
  uint64_t v95 = *(void *)(a1 + 736);
  if (v95) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v95 + 32))(v95, this, "cvWatchCalories");
  }
  uint64_t v96 = *(void *)(a1 + 744);
  if (v96) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v96 + 32))(v96, this, "deviceMotion");
  }
  uint64_t v97 = *(void *)(a1 + 752);
  if (v97) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v97 + 32))(v97, this, "deviceMotionAlwaysOn");
  }
  uint64_t v98 = *(void *)(a1 + 760);
  if (v98) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v98 + 32))(v98, this, "deviceMotionCovariance");
  }
  uint64_t v99 = *(void *)(a1 + 768);
  if (v99) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v99 + 32))(v99, this, "directionOfTravelMetrics");
  }
  uint64_t v100 = *(void *)(a1 + 776);
  if (v100) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v100 + 32))(v100, this, "displacingState");
  }
  uint64_t v101 = *(void *)(a1 + 784);
  if (v101) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v101 + 32))(v101, this, "displayStatus");
  }
  uint64_t v102 = *(void *)(a1 + 792);
  if (v102) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v102 + 32))(v102, this, "dopplerDebugRecord");
  }
  uint64_t v103 = *(void *)(a1 + 800);
  if (v103) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v103 + 32))(v103, this, "dopplerProximityEvent");
  }
  uint64_t v104 = *(void *)(a1 + 808);
  if (v104) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v104 + 32))(v104, this, "dopplerRawDataInput");
  }
  uint64_t v105 = *(void *)(a1 + 816);
  if (v105) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v105 + 32))(v105, this, "dopplerSample");
  }
  uint64_t v106 = *(void *)(a1 + 824);
  if (v106) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v106 + 32))(v106, this, "dotEstimatorHandSwing");
  }
  uint64_t v107 = *(void *)(a1 + 832);
  if (v107) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v107 + 32))(v107, this, "dotEstimatorWithTNB");
  }
  uint64_t v108 = *(void *)(a1 + 840);
  if (v108) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v108 + 32))(v108, this, "doubleTap");
  }
  uint64_t v109 = *(void *)(a1 + 848);
  if (v109) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v109 + 32))(v109, this, "elevationChange");
  }
  uint64_t v110 = *(void *)(a1 + 856);
  if (v110) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v110 + 32))(v110, this, "elevationGradeEstimator");
  }
  uint64_t v111 = *(void *)(a1 + 864);
  if (v111) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v111 + 32))(v111, this, "elevationThreshold");
  }
  uint64_t v112 = *(void *)(a1 + 872);
  if (v112) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v112 + 32))(v112, this, "emergencyState");
  }
  uint64_t v113 = *(void *)(a1 + 880);
  if (v113) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v113 + 32))(v113, this, "enhancedDeviceMotion");
  }
  uint64_t v114 = *(void *)(a1 + 888);
  if (v114) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v114 + 32))(v114, this, "faceBlendShapeCoefficientsSample");
  }
  uint64_t v115 = *(void *)(a1 + 896);
  if (v115) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v115 + 32))(v115, this, "faceCovered");
  }
  uint64_t v116 = *(void *)(a1 + 904);
  if (v116) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v116 + 32))(v116, this, "faceDownDetection");
  }
  uint64_t v117 = *(void *)(a1 + 912);
  if (v117) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v117 + 32))(v117, this, "facePose");
  }
  uint64_t v118 = *(void *)(a1 + 920);
  if (v118) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v118 + 32))(v118, this, "facePoseSynchronized");
  }
  uint64_t v119 = *(void *)(a1 + 928);
  if (v119) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v119 + 32))(v119, this, "fallDetectionActivityClassifierReplay");
  }
  uint64_t v120 = *(void *)(a1 + 936);
  if (v120) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v120 + 32))(v120, this, "fallDetectionDetector");
  }
  uint64_t v121 = *(void *)(a1 + 944);
  if (v121) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v121 + 32))(v121, this, "fallDetectionGyroControllerReplay");
  }
  uint64_t v122 = *(void *)(a1 + 952);
  if (v122) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v122 + 32))(v122, this, "fallDetectionReferee");
  }
  uint64_t v123 = *(void *)(a1 + 960);
  if (v123) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v123 + 32))(v123, this, "fallDetectionReplay");
  }
  uint64_t v124 = *(void *)(a1 + 968);
  if (v124) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v124 + 32))(v124, this, "fallDetectionStateMachine");
  }
  uint64_t v125 = *(void *)(a1 + 976);
  if (v125) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v125 + 32))(v125, this, "fallDetectionWristStateReplay");
  }
  uint64_t v126 = *(void *)(a1 + 984);
  if (v126) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v126 + 32))(v126, this, "fallDistanceReplay");
  }
  uint64_t v127 = *(void *)(a1 + 992);
  if (v127) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v127 + 32))(v127, this, "fallFalsePositiveSuppressionFeatures");
  }
  uint64_t v128 = *(void *)(a1 + 1000);
  if (v128) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v128 + 32))(v128, this, "fallSnippet");
  }
  uint64_t v129 = *(void *)(a1 + 1008);
  if (v129) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v129 + 32))(v129, this, "fallStats");
  }
  uint64_t v130 = *(void *)(a1 + 1016);
  if (v130) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v130 + 32))(v130, this, "firstStepFeatures");
  }
  uint64_t v131 = *(void *)(a1 + 1024);
  if (v131) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v131 + 32))(v131, this, "fitnessMachineData");
  }
  uint64_t v132 = *(void *)(a1 + 1032);
  if (v132) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v132 + 32))(v132, this, "fitnessMachineSample");
  }
  uint64_t v133 = *(void *)(a1 + 1040);
  if (v133) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v133 + 32))(v133, this, "focusModes");
  }
  uint64_t v134 = *(void *)(a1 + 1048);
  if (v134) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v134 + 32))(v134, this, "frequencyResponse");
  }
  uint64_t v135 = *(void *)(a1 + 1056);
  if (v135) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v135 + 32))(v135, this, "fusedBioMotionClassification");
  }
  uint64_t v136 = *(void *)(a1 + 1064);
  if (v136) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v136 + 32))(v136, this, "gaitCycleSegment");
  }
  uint64_t v137 = *(void *)(a1 + 1072);
  if (v137) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v137 + 32))(v137, this, "gaitCycleSegmentationState");
  }
  uint64_t v138 = *(void *)(a1 + 1080);
  if (v138) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v138 + 32))(v138, this, "gaitEventsHKResult");
  }
  uint64_t v139 = *(void *)(a1 + 1088);
  if (v139) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v139 + 32))(v139, this, "gaitEventsModelOutput");
  }
  uint64_t v140 = *(void *)(a1 + 1096);
  if (v140) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v140 + 32))(v140, this, "gaitEventsStrideAggregation");
  }
  uint64_t v141 = *(void *)(a1 + 1104);
  if (v141) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v141 + 32))(v141, this, "geomagneticData");
  }
  uint64_t v142 = *(void *)(a1 + 1112);
  if (v142) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v142 + 32))(v142, this, "gnssAvailabilityPredictorData");
  }
  uint64_t v143 = *(void *)(a1 + 1120);
  if (v143) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v143 + 32))(v143, this, "gnssLeechLocationData");
  }
  uint64_t v144 = *(void *)(a1 + 1128);
  if (v144) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v144 + 32))(v144, this, "gravityConstraints");
  }
  uint64_t v145 = *(void *)(a1 + 1136);
  if (v145) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v145 + 32))(v145, this, "gravityCorrection");
  }
  uint64_t v146 = *(void *)(a1 + 1144);
  if (v146) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v146 + 32))(v146, this, "gyro");
  }
  uint64_t v147 = *(void *)(a1 + 1152);
  if (v147) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v147 + 32))(v147, this, "gyroBiasAndVariance");
  }
  uint64_t v148 = *(void *)(a1 + 1160);
  if (v148) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v148 + 32))(v148, this, "gyroBiasConstraints");
  }
  uint64_t v149 = *(void *)(a1 + 1168);
  if (v149) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v149 + 32))(v149, this, "gyroBiasCorrection");
  }
  uint64_t v150 = *(void *)(a1 + 1176);
  if (v150) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v150 + 32))(v150, this, "gyroBiasEstimateError");
  }
  uint64_t v151 = *(void *)(a1 + 1184);
  if (v151) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v151 + 32))(v151, this, "gyroBiasFit");
  }
  uint64_t v152 = *(void *)(a1 + 1192);
  if (v152) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v152 + 32))(v152, this, "gyroCalibrationDataFactory");
  }
  uint64_t v153 = *(void *)(a1 + 1200);
  if (v153) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v153 + 32))(v153, this, "gyroCalibrationDataNonlinearNonFactory");
  }
  uint64_t v154 = *(void *)(a1 + 1208);
  if (v154) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v154 + 32))(v154, this, "gyroCalibrationSample");
  }
  uint64_t v155 = *(void *)(a1 + 1216);
  if (v155) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v155 + 32))(v155, this, "gyroCalibrationSampleNonlinear");
  }
  uint64_t v156 = *(void *)(a1 + 1224);
  if (v156) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v156 + 32))(v156, this, "gyroCompass");
  }
  uint64_t v157 = *(void *)(a1 + 1232);
  if (v157) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v157 + 32))(v157, this, "gyroDt");
  }
  uint64_t v158 = *(void *)(a1 + 1240);
  if (v158) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v158 + 32))(v158, this, "gyroFactoryCalibrationData");
  }
  uint64_t v159 = *(void *)(a1 + 1248);
  if (v159) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v159 + 32))(v159, this, "gyroGps");
  }
  uint64_t v160 = *(void *)(a1 + 1256);
  if (v160) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v160 + 32))(v160, this, "gyroOscarEmu");
  }
  uint64_t v161 = *(void *)(a1 + 1264);
  if (v161) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v161 + 32))(v161, this, "gyroTemperature");
  }
  uint64_t v162 = *(void *)(a1 + 1272);
  if (v162) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v162 + 32))(v162, this, "hapticModuleState");
  }
  uint64_t v163 = *(void *)(a1 + 1280);
  if (v163) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v163 + 32))(v163, this, "harmonicMetrics");
  }
  uint64_t v164 = *(void *)(a1 + 1288);
  if (v164) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v164 + 32))(v164, this, "headToHeadsetAttitudeEstimatorMeasurementUpdate");
  }
  uint64_t v165 = *(void *)(a1 + 1296);
  if (v165) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v165 + 32))(v165, this, "headToHeadsetTransformationEstimate");
  }
  uint64_t v166 = *(void *)(a1 + 1304);
  if (v166) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v166 + 32))(v166, this, "headTrackingBehaviorUpdate");
  }
  uint64_t v167 = *(void *)(a1 + 1312);
  if (v167) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v167 + 32))(v167, this, "headTrackingClientModeUpdate");
  }
  uint64_t v168 = *(void *)(a1 + 1320);
  if (v168) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v168 + 32))(v168, this, "heartRateReference");
  }
  uint64_t v169 = *(void *)(a1 + 1328);
  if (v169) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v169 + 32))(v169, this, "hgAccel");
  }
  uint64_t v170 = *(void *)(a1 + 1336);
  if (v170) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v170 + 32))(v170, this, "hidShower");
  }
  uint64_t v171 = *(void *)(a1 + 1344);
  if (v171) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v171 + 32))(v171, this, "inEarAdditionalState");
  }
  uint64_t v172 = *(void *)(a1 + 1352);
  if (v172) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v172 + 32))(v172, this, "inEarBaseline");
  }
  uint64_t v173 = *(void *)(a1 + 1360);
  if (v173) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v173 + 32))(v173, this, "inEarBaselining");
  }
  uint64_t v174 = *(void *)(a1 + 1368);
  if (v174) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v174 + 32))(v174, this, "inEarConstraints");
  }
  uint64_t v175 = *(void *)(a1 + 1376);
  if (v175) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v175 + 32))(v175, this, "inEarOpenLid");
  }
  uint64_t v176 = *(void *)(a1 + 1384);
  if (v176) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v176 + 32))(v176, this, "inEarOptical");
  }
  uint64_t v177 = *(void *)(a1 + 1392);
  if (v177) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v177 + 32))(v177, this, "inEarSession");
  }
  uint64_t v178 = *(void *)(a1 + 1400);
  if (v178) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v178 + 32))(v178, this, "inEarTransition");
  }
  uint64_t v179 = *(void *)(a1 + 1408);
  if (v179) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v179 + 32))(v179, this, "inEarTransitionEntry");
  }
  uint64_t v180 = *(void *)(a1 + 1416);
  if (v180) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v180 + 32))(v180, this, "inertialOdometry");
  }
  uint64_t v181 = *(void *)(a1 + 1424);
  if (v181) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v181 + 32))(v181, this, "initialHistoricalMeanSeaLevelPressure");
  }
  uint64_t v182 = *(void *)(a1 + 1432);
  if (v182) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v182 + 32))(v182, this, "interpolatedAccessoryAccel");
  }
  uint64_t v183 = *(void *)(a1 + 1440);
  if (v183) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v183 + 32))(v183, this, "intersiloNSCodingData");
  }
  uint64_t v184 = *(void *)(a1 + 1448);
  if (v184) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v184 + 32))(v184, this, "ispPacket");
  }
  uint64_t v185 = *(void *)(a1 + 1456);
  if (v185) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v185 + 32))(v185, this, "jitterBufferLevel");
  }
  uint64_t v186 = *(void *)(a1 + 1464);
  if (v186) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v186 + 32))(v186, this, "jointLinkModelPose");
  }
  uint64_t v187 = *(void *)(a1 + 1472);
  if (v187) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v187 + 32))(v187, this, "jointLinkModelPredictedPose");
  }
  uint64_t v188 = *(void *)(a1 + 1480);
  if (v188) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v188 + 32))(v188, this, "kData1");
  }
  uint64_t v189 = *(void *)(a1 + 1488);
  if (v189) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v189 + 32))(v189, this, "kData2");
  }
  uint64_t v190 = *(void *)(a1 + 1496);
  if (v190) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v190 + 32))(v190, this, "kData3");
  }
  uint64_t v191 = *(void *)(a1 + 1504);
  if (v191) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v191 + 32))(v191, this, "kappaActivityPhone");
  }
  uint64_t v192 = *(void *)(a1 + 1512);
  if (v192) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v192 + 32))(v192, this, "kappaActivityWatch");
  }
  uint64_t v193 = *(void *)(a1 + 1520);
  if (v193) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v193 + 32))(v193, this, "kappaAirbagResult");
  }
  uint64_t v194 = *(void *)(a1 + 1528);
  if (v194) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v194 + 32))(v194, this, "kappaAudioResult");
  }
  uint64_t v195 = *(void *)(a1 + 1536);
  if (v195) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v195 + 32))(v195, this, "kappaBaroResult");
  }
  uint64_t v196 = *(void *)(a1 + 1544);
  if (v196) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v196 + 32))(v196, this, "kappaCrashResult");
  }
  uint64_t v197 = *(void *)(a1 + 1552);
  if (v197) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v197 + 32))(v197, this, "kappaDirectionOfTravel");
  }
  uint64_t v198 = *(void *)(a1 + 1560);
  if (v198) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v198 + 32))(v198, this, "kappaGpsResult");
  }
  uint64_t v199 = *(void *)(a1 + 1568);
  if (v199) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v199 + 32))(v199, this, "kappaGravityAutocorrelationResult");
  }
  uint64_t v200 = *(void *)(a1 + 1576);
  if (v200) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v200 + 32))(v200, this, "kappaHighSpeedCrashResult");
  }
  uint64_t v201 = *(void *)(a1 + 1584);
  if (v201) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v201 + 32))(v201, this, "kappaLackOfMotionResult");
  }
  uint64_t v202 = *(void *)(a1 + 1592);
  if (v202) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v202 + 32))(v202, this, "kappaLocalAudioResult");
  }
  uint64_t v203 = *(void *)(a1 + 1600);
  if (v203) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v203 + 32))(v203, this, "kappaMildImpactResult");
  }
  uint64_t v204 = *(void *)(a1 + 1608);
  if (v204) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v204 + 32))(v204, this, "kappaPeakDetectorMapMagTimestamps");
  }
  uint64_t v205 = *(void *)(a1 + 1616);
  if (v205) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v205 + 32))(v205, this, "kappaPeakDetectorMapResult");
  }
  uint64_t v206 = *(void *)(a1 + 1624);
  if (v206) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v206 + 32))(v206, this, "kappaPulseDeltaV");
  }
  uint64_t v207 = *(void *)(a1 + 1632);
  if (v207) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v207 + 32))(v207, this, "kappaPulseInertialAccel");
  }
  uint64_t v208 = *(void *)(a1 + 1640);
  if (v208) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v208 + 32))(v208, this, "kappaPulseInertialHgAccel");
  }
  uint64_t v209 = *(void *)(a1 + 1648);
  if (v209) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v209 + 32))(v209, this, "kappaPulseResult");
  }
  uint64_t v210 = *(void *)(a1 + 1656);
  if (v210) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v210 + 32))(v210, this, "kappaQuiescenceResult");
  }
  uint64_t v211 = *(void *)(a1 + 1664);
  if (v211) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v211 + 32))(v211, this, "kappaRecoveryResult");
  }
  uint64_t v212 = *(void *)(a1 + 1672);
  if (v212) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v212 + 32))(v212, this, "kappaRemoteAudioResult");
  }
  uint64_t v213 = *(void *)(a1 + 1680);
  if (v213) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v213 + 32))(v213, this, "kappaRoads");
  }
  uint64_t v214 = *(void *)(a1 + 1688);
  if (v214) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v214 + 32))(v214, this, "kappaRoadsResult");
  }
  uint64_t v215 = *(void *)(a1 + 1696);
  if (v215) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v215 + 32))(v215, this, "kappaRolloverCrashResult");
  }
  uint64_t v216 = *(void *)(a1 + 1704);
  if (v216) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v216 + 32))(v216, this, "kappaSevereCrashResult");
  }
  uint64_t v217 = *(void *)(a1 + 1712);
  if (v217) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v217 + 32))(v217, this, "kappaSpinResult");
  }
  uint64_t v218 = *(void *)(a1 + 1720);
  if (v218) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v218 + 32))(v218, this, "kappaSteps");
  }
  uint64_t v219 = *(void *)(a1 + 1728);
  if (v219) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v219 + 32))(v219, this, "kappaStepsResult");
  }
  uint64_t v220 = *(void *)(a1 + 1736);
  if (v220) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v220 + 32))(v220, this, "kappaTrigger");
  }
  uint64_t v221 = *(void *)(a1 + 1744);
  if (v221) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v221 + 32))(v221, this, "kappaTriggerClustersResult");
  }
  uint64_t v222 = *(void *)(a1 + 1752);
  if (v222) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v222 + 32))(v222, this, "kappaTriggerDebug");
  }
  uint64_t v223 = *(void *)(a1 + 1760);
  if (v223) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v223 + 32))(v223, this, "kappaZgDetected");
  }
  uint64_t v224 = *(void *)(a1 + 1768);
  if (v224) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v224 + 32))(v224, this, "kappaZgResult");
  }
  uint64_t v225 = *(void *)(a1 + 1776);
  if (v225) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v225 + 32))(v225, this, "keyboardAttached");
  }
  uint64_t v226 = *(void *)(a1 + 1784);
  if (v226) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v226 + 32))(v226, this, "keyboardKeyPress");
  }
  uint64_t v227 = *(void *)(a1 + 1792);
  if (v227) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v227 + 32))(v227, this, "keyboardMotionFeatures");
  }
  uint64_t v228 = *(void *)(a1 + 1800);
  if (v228) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v228 + 32))(v228, this, "keyboardMotionState");
  }
  uint64_t v229 = *(void *)(a1 + 1808);
  if (v229) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v229 + 32))(v229, this, "keyboardMotionTrackpad");
  }
  uint64_t v230 = *(void *)(a1 + 1816);
  if (v230) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v230 + 32))(v230, this, "kmVelocityEstimatorState");
  }
  uint64_t v231 = *(void *)(a1 + 1824);
  if (v231) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v231 + 32))(v231, this, "legacyALS5CHInput");
  }
  uint64_t v232 = *(void *)(a1 + 1832);
  if (v232) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v232 + 32))(v232, this, "liftToWakeFeaturesNeo");
  }
  uint64_t v233 = *(void *)(a1 + 1840);
  if (v233) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v233 + 32))(v233, this, "liftToWakeOnHeadStatus");
  }
  uint64_t v234 = *(void *)(a1 + 1848);
  if (v234) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v234 + 32))(v234, this, "liftToWakeState");
  }
  uint64_t v235 = *(void *)(a1 + 1856);
  if (v235) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v235 + 32))(v235, this, "liftToWakeStatusNeo");
  }
  uint64_t v236 = *(void *)(a1 + 1864);
  if (v236) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v236 + 32))(v236, this, "locationOscarEmu");
  }
  uint64_t v237 = *(void *)(a1 + 1872);
  if (v237) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v237 + 32))(v237, this, "lockScreenStatus");
  }
  uint64_t v238 = *(void *)(a1 + 1880);
  if (v238) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v238 + 32))(v238, this, "lslHeadingEstimation");
  }
  uint64_t v239 = *(void *)(a1 + 1888);
  if (v239) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v239 + 32))(v239, this, "mLBasedBioMotionClassification");
  }
  uint64_t v240 = *(void *)(a1 + 1896);
  if (v240) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v240 + 32))(v240, this, "magicMountState");
  }
  uint64_t v241 = *(void *)(a1 + 1904);
  if (v241) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v241 + 32))(v241, this, "magneticAccessoryType1");
  }
  uint64_t v242 = *(void *)(a1 + 1912);
  if (v242) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v242 + 32))(v242, this, "magneticAccessoryType2");
  }
  uint64_t v243 = *(void *)(a1 + 1920);
  if (v243) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v243 + 32))(v243, this, "magnetometer");
  }
  uint64_t v244 = *(void *)(a1 + 1928);
  if (v244) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v244 + 32))(v244, this, "magnetometerCalibratorFilterParameters");
  }
  uint64_t v245 = *(void *)(a1 + 1936);
  if (v245) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v245 + 32))(v245, this, "magnetometerReset");
  }
  uint64_t v246 = *(void *)(a1 + 1944);
  if (v246) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v246 + 32))(v246, this, "mapsRouteHintData");
  }
  uint64_t v247 = *(void *)(a1 + 1952);
  if (v247) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v247 + 32))(v247, this, "metsInfo");
  }
  uint64_t v248 = *(void *)(a1 + 1960);
  if (v248) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v248 + 32))(v248, this, "mobilityBoutMetrics");
  }
  uint64_t v249 = *(void *)(a1 + 1968);
  if (v249) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v249 + 32))(v249, this, "mobilitySmoothedGaitMetrics");
  }
  uint64_t v250 = *(void *)(a1 + 1976);
  if (v250) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v250 + 32))(v250, this, "modelBasedBioMotionClassification");
  }
  uint64_t v251 = *(void *)(a1 + 1984);
  if (v251) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v251 + 32))(v251, this, "motionActivity");
  }
  uint64_t v252 = *(void *)(a1 + 1992);
  if (v252) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v252 + 32))(v252, this, "motionActivityReplay");
  }
  uint64_t v253 = *(void *)(a1 + 2000);
  if (v253) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v253 + 32))(v253, this, "motionContextActivity");
  }
  uint64_t v254 = *(void *)(a1 + 2008);
  if (v254) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v254 + 32))(v254, this, "motionGPSLocation");
  }
  uint64_t v255 = *(void *)(a1 + 2016);
  if (v255) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v255 + 32))(v255, this, "motionHint");
  }
  uint64_t v256 = *(void *)(a1 + 2024);
  if (v256) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v256 + 32))(v256, this, "motionLocation");
  }
  uint64_t v257 = *(void *)(a1 + 2032);
  if (v257) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v257 + 32))(v257, this, "motionLoiAltitudeData");
  }
  uint64_t v258 = *(void *)(a1 + 2040);
  if (v258) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v258 + 32))(v258, this, "motionLoiData");
  }
  uint64_t v259 = *(void *)(a1 + 2048);
  if (v259) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v259 + 32))(v259, this, "motionStateUpdate");
  }
  uint64_t v260 = *(void *)(a1 + 2056);
  if (v260) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v260 + 32))(v260, this, "motionWifiAssociation");
  }
  uint64_t v261 = *(void *)(a1 + 2064);
  if (v261) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v261 + 32))(v261, this, "motionWifiLocation");
  }
  uint64_t v262 = *(void *)(a1 + 2072);
  if (v262) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v262 + 32))(v262, this, "movementStats");
  }
  uint64_t v263 = *(void *)(a1 + 2080);
  if (v263) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v263 + 32))(v263, this, "movementStatsGravityProjection");
  }
  uint64_t v264 = *(void *)(a1 + 2088);
  if (v264) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v264 + 32))(v264, this, "movementStatsSignal");
  }
  uint64_t v265 = *(void *)(a1 + 2096);
  if (v265) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v265 + 32))(v265, this, "natalieData");
  }
  uint64_t v266 = *(void *)(a1 + 2104);
  if (v266) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v266 + 32))(v266, this, "nonlinearBiasFit");
  }
  uint64_t v267 = *(void *)(a1 + 2112);
  if (v267) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v267 + 32))(v267, this, "odometer");
  }
  uint64_t v268 = *(void *)(a1 + 2120);
  if (v268) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v268 + 32))(v268, this, "odometerWithAltitude");
  }
  uint64_t v269 = *(void *)(a1 + 2128);
  if (v269) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v269 + 32))(v269, this, "odtPose");
  }
  uint64_t v270 = *(void *)(a1 + 2136);
  if (v270) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v270 + 32))(v270, this, "onsetHeartRateData");
  }
  uint64_t v271 = *(void *)(a1 + 2144);
  if (v271) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v271 + 32))(v271, this, "orientation");
  }
  uint64_t v272 = *(void *)(a1 + 2152);
  if (v272) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v272 + 32))(v272, this, "pdrAlgType");
  }
  uint64_t v273 = *(void *)(a1 + 2160);
  if (v273) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v273 + 32))(v273, this, "pdrDOTEstimatorState");
  }
  uint64_t v274 = *(void *)(a1 + 2168);
  if (v274) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v274 + 32))(v274, this, "pdrDOTEstimatorStateArmSwing");
  }
  uint64_t v275 = *(void *)(a1 + 2176);
  if (v275) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v275 + 32))(v275, this, "pdrDOTEstimatorStateBody");
  }
  uint64_t v276 = *(void *)(a1 + 2184);
  if (v276) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v276 + 32))(v276, this, "pdrDOTEstimatorStateBodyDebug");
  }
  uint64_t v277 = *(void *)(a1 + 2192);
  if (v277) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v277 + 32))(v277, this, "pdrDOTEstimatorStateDebug");
  }
  uint64_t v278 = *(void *)(a1 + 2200);
  if (v278) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v278 + 32))(v278, this, "pdrDOTEstimatorStateHeading");
  }
  uint64_t v279 = *(void *)(a1 + 2208);
  if (v279) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v279 + 32))(v279, this, "pdrDOTEstimatorUncertaintyModelOnBody");
  }
  uint64_t v280 = *(void *)(a1 + 2216);
  if (v280) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v280 + 32))(v280, this, "pdrDOTMeasurementSelectorState");
  }
  uint64_t v281 = *(void *)(a1 + 2224);
  if (v281) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v281 + 32))(v281, this, "pdrFeatures");
  }
  uint64_t v282 = *(void *)(a1 + 2232);
  if (v282) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v282 + 32))(v282, this, "pdrFenceReference");
  }
  uint64_t v283 = *(void *)(a1 + 2240);
  if (v283) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v283 + 32))(v283, this, "pdrFenceState");
  }
  uint64_t v284 = *(void *)(a1 + 2248);
  if (v284) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v284 + 32))(v284, this, "pdrImpulse");
  }
  uint64_t v285 = *(void *)(a1 + 2256);
  if (v285) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v285 + 32))(v285, this, "pdrMLModelOutput");
  }
  uint64_t v286 = *(void *)(a1 + 2264);
  if (v286) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v286 + 32))(v286, this, "pdrPedestrianClassifierState");
  }
  uint64_t v287 = *(void *)(a1 + 2272);
  if (v287) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v287 + 32))(v287, this, "pdrPlacementClassifierState");
  }
  uint64_t v288 = *(void *)(a1 + 2280);
  if (v288) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v288 + 32))(v288, this, "pdrSpeedEstimatorState");
  }
  uint64_t v289 = *(void *)(a1 + 2288);
  if (v289) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v289 + 32))(v289, this, "pdrSpeedEstimatorStateDebug");
  }
  uint64_t v290 = *(void *)(a1 + 2296);
  if (v290) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v290 + 32))(v290, this, "pdrVelocityEstimatorState");
  }
  uint64_t v291 = *(void *)(a1 + 2304);
  if (v291) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v291 + 32))(v291, this, "pearlAttitude");
  }
  uint64_t v292 = *(void *)(a1 + 2312);
  if (v292) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v292 + 32))(v292, this, "pedOdomFusionExtendedModeSegment");
  }
  uint64_t v293 = *(void *)(a1 + 2320);
  if (v293) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v293 + 32))(v293, this, "pedestrianCalorieModelDebugging");
  }
  uint64_t v294 = *(void *)(a1 + 2328);
  if (v294) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v294 + 32))(v294, this, "pedestrianFenceExit");
  }
  uint64_t v295 = *(void *)(a1 + 2336);
  if (v295) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v295 + 32))(v295, this, "pedometerPathStraightness");
  }
  uint64_t v296 = *(void *)(a1 + 2344);
  if (v296) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v296 + 32))(v296, this, "peerState");
  }
  uint64_t v297 = *(void *)(a1 + 2352);
  if (v297) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v297 + 32))(v297, this, "pencilDeviceMotion");
  }
  uint64_t v298 = *(void *)(a1 + 2360);
  if (v298) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v298 + 32))(v298, this, "pencilFusionDMYawAlignmentUpdate");
  }
  uint64_t v299 = *(void *)(a1 + 2368);
  if (v299) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v299 + 32))(v299, this, "pencilFusionReplayResult");
  }
  uint64_t v300 = *(void *)(a1 + 2376);
  if (v300) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v300 + 32))(v300, this, "pencilFusionResult");
  }
  uint64_t v301 = *(void *)(a1 + 2384);
  if (v301) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v301 + 32))(v301, this, "pencilFusionRingSensorTrustModelUpdate");
  }
  uint64_t v302 = *(void *)(a1 + 2392);
  if (v302) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v302 + 32))(v302, this, "pencilTipForce");
  }
  uint64_t v303 = *(void *)(a1 + 2400);
  if (v303) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v303 + 32))(v303, this, "pencilTouch");
  }
  uint64_t v304 = *(void *)(a1 + 2408);
  if (v304) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v304 + 32))(v304, this, "physicalEffortInput");
  }
  uint64_t v305 = *(void *)(a1 + 2416);
  if (v305) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v305 + 32))(v305, this, "physicalEffortSample");
  }
  uint64_t v306 = *(void *)(a1 + 2424);
  if (v306) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v306 + 32))(v306, this, "pocketDetectionPacket");
  }
  uint64_t v307 = *(void *)(a1 + 2432);
  if (v307) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v307 + 32))(v307, this, "pose");
  }
  uint64_t v308 = *(void *)(a1 + 2440);
  if (v308) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v308 + 32))(v308, this, "poseState");
  }
  uint64_t v309 = *(void *)(a1 + 2448);
  if (v309) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v309 + 32))(v309, this, "postureJoint");
  }
  uint64_t v310 = *(void *)(a1 + 2456);
  if (v310) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v310 + 32))(v310, this, "postureSkeleton");
  }
  uint64_t v311 = *(void *)(a1 + 2464);
  if (v311) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v311 + 32))(v311, this, "powerManagementUserActivity");
  }
  uint64_t v312 = *(void *)(a1 + 2472);
  if (v312) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v312 + 32))(v312, this, "precisionFindingDOTEstimate");
  }
  uint64_t v313 = *(void *)(a1 + 2480);
  if (v313) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v313 + 32))(v313, this, "precisionFindingRangeFilter");
  }
  uint64_t v314 = *(void *)(a1 + 2488);
  if (v314) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v314 + 32))(v314, this, "precisionFindingSessionStartStop");
  }
  uint64_t v315 = *(void *)(a1 + 2496);
  if (v315) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v315 + 32))(v315, this, "precisionFindingState");
  }
  uint64_t v316 = *(void *)(a1 + 2504);
  if (v316) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v316 + 32))(v316, this, "precisionFindingVelocityEstimate");
  }
  uint64_t v317 = *(void *)(a1 + 2512);
  if (v317) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v317 + 32))(v317, this, "precisionFindingVerticalState");
  }
  uint64_t v318 = *(void *)(a1 + 2520);
  if (v318) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v318 + 32))(v318, this, "predictedRelativeDeviceMotion");
  }
  uint64_t v319 = *(void *)(a1 + 2528);
  if (v319) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v319 + 32))(v319, this, "pressure");
  }
  uint64_t v320 = *(void *)(a1 + 2536);
  if (v320) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v320 + 32))(v320, this, "pressureCalibration");
  }
  uint64_t v321 = *(void *)(a1 + 2544);
  if (v321) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v321 + 32))(v321, this, "pressureCompensated");
  }
  uint64_t v322 = *(void *)(a1 + 2552);
  if (v322) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v322 + 32))(v322, this, "pressureFiltered");
  }
  uint64_t v323 = *(void *)(a1 + 2560);
  if (v323) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v323 + 32))(v323, this, "pressureFiltered1HzLowPass");
  }
  uint64_t v324 = *(void *)(a1 + 2568);
  if (v324) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v324 + 32))(v324, this, "pressureFilteredNoTemperature");
  }
  uint64_t v325 = *(void *)(a1 + 2576);
  if (v325) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v325 + 32))(v325, this, "pressureGps");
  }
  uint64_t v326 = *(void *)(a1 + 2584);
  if (v326) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v326 + 32))(v326, this, "pressureOscarEmu");
  }
  uint64_t v327 = *(void *)(a1 + 2592);
  if (v327) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v327 + 32))(v327, this, "prox");
  }
  uint64_t v328 = *(void *)(a1 + 2600);
  if (v328) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v328 + 32))(v328, this, "proxBaselineEstimatorState");
  }
  uint64_t v329 = *(void *)(a1 + 2608);
  if (v329) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v329 + 32))(v329, this, "proxCalibration");
  }
  uint64_t v330 = *(void *)(a1 + 2616);
  if (v330) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v330 + 32))(v330, this, "proxPDP");
  }
  uint64_t v331 = *(void *)(a1 + 2624);
  if (v331) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v331 + 32))(v331, this, "ptsConsumedGNSS");
  }
  uint64_t v332 = *(void *)(a1 + 2632);
  if (v332) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v332 + 32))(v332, this, "ptsForwardPropagation");
  }
  uint64_t v333 = *(void *)(a1 + 2640);
  if (v333) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v333 + 32))(v333, this, "ptsMapMatchedRoute");
  }
  uint64_t v334 = *(void *)(a1 + 2648);
  if (v334) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v334 + 32))(v334, this, "ptsReconstructedRoute");
  }
  uint64_t v335 = *(void *)(a1 + 2656);
  if (v335) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v335 + 32))(v335, this, "rawAudio");
  }
  uint64_t v336 = *(void *)(a1 + 2664);
  if (v336) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v336 + 32))(v336, this, "relDMInSystemConfig");
  }
  uint64_t v337 = *(void *)(a1 + 2672);
  if (v337) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v337 + 32))(v337, this, "relativeDeviceMotionComplexTransition");
  }
  uint64_t v338 = *(void *)(a1 + 2680);
  if (v338) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v338 + 32))(v338, this, "relativeDeviceMotionCorrelatedMotion");
  }
  uint64_t v339 = *(void *)(a1 + 2688);
  if (v339) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v339 + 32))(v339, this, "relativeDeviceMotionInternal");
  }
  uint64_t v340 = *(void *)(a1 + 2696);
  if (v340) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v340 + 32))(v340, this, "relativeGravityConstraints");
  }
  uint64_t v341 = *(void *)(a1 + 2704);
  if (v341) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v341 + 32))(v341, this, "relativeGravityCorrection");
  }
  uint64_t v342 = *(void *)(a1 + 2712);
  if (v342) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v342 + 32))(v342, this, "rhythmicGnssOperatorStatus");
  }
  uint64_t v343 = *(void *)(a1 + 2720);
  if (v343) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v343 + 32))(v343, this, "rotationRate");
  }
  uint64_t v344 = *(void *)(a1 + 2728);
  if (v344) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v344 + 32))(v344, this, "runningArmSwingSignals");
  }
  uint64_t v345 = *(void *)(a1 + 2736);
  if (v345) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v345 + 32))(v345, this, "runningCentripetalAccelSignals");
  }
  uint64_t v346 = *(void *)(a1 + 2744);
  if (v346) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v346 + 32))(v346, this, "runningFormMetrics");
  }
  uint64_t v347 = *(void *)(a1 + 2752);
  if (v347) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v347 + 32))(v347, this, "runningPower");
  }
  uint64_t v348 = *(void *)(a1 + 2760);
  if (v348) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v348 + 32))(v348, this, "runningRotationAxis");
  }
  uint64_t v349 = *(void *)(a1 + 2768);
  if (v349) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v349 + 32))(v349, this, "runningSpeedKFResult");
  }
  uint64_t v350 = *(void *)(a1 + 2776);
  if (v350) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v350 + 32))(v350, this, "runningStrideLength");
  }
  uint64_t v351 = *(void *)(a1 + 2784);
  if (v351) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v351 + 32))(v351, this, "runningVerticalOscillation");
  }
  uint64_t v352 = *(void *)(a1 + 2792);
  if (v352) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v352 + 32))(v352, this, "runningVerticalOscillationGradientBoostedSignals");
  }
  uint64_t v353 = *(void *)(a1 + 2800);
  if (v353) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v353 + 32))(v353, this, "runningVerticalOscillationSignals");
  }
  uint64_t v354 = *(void *)(a1 + 2808);
  if (v354) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v354 + 32))(v354, this, "safetyCompanionStatus");
  }
  uint64_t v355 = *(void *)(a1 + 2816);
  if (v355) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v355 + 32))(v355, this, "safetyHertzSample");
  }
  uint64_t v356 = *(void *)(a1 + 2824);
  if (v356) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v356 + 32))(v356, this, "safetyRemoteSample");
  }
  uint64_t v357 = *(void *)(a1 + 2832);
  if (v357) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v357 + 32))(v357, this, "safetyTrustedAudioResult");
  }
  uint64_t v358 = *(void *)(a1 + 2840);
  if (v358) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v358 + 32))(v358, this, "sessionOverride");
  }
  uint64_t v359 = *(void *)(a1 + 2848);
  if (v359) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v359 + 32))(v359, this, "signalEnvironment");
  }
  uint64_t v360 = *(void *)(a1 + 2856);
  if (v360) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v360 + 32))(v360, this, "simActivityEvent");
  }
  uint64_t v361 = *(void *)(a1 + 2864);
  if (v361) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v361 + 32))(v361, this, "sitStandDetectorFeatures");
  }
  uint64_t v362 = *(void *)(a1 + 2872);
  if (v362) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v362 + 32))(v362, this, "sitStandDetectorPosteriorBufferStatsForSitToStand");
  }
  uint64_t v363 = *(void *)(a1 + 2880);
  if (v363) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v363 + 32))(v363, this, "sitStandDetectorPosteriorBufferStatsForStandToSit");
  }
  uint64_t v364 = *(void *)(a1 + 2888);
  if (v364) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v364 + 32))(v364, this, "sitStandDetectorTransitions");
  }
  uint64_t v365 = *(void *)(a1 + 2896);
  if (v365) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v365 + 32))(v365, this, "skeleton2D");
  }
  uint64_t v366 = *(void *)(a1 + 2904);
  if (v366) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v366 + 32))(v366, this, "skeleton3D");
  }
  uint64_t v367 = *(void *)(a1 + 2912);
  if (v367) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v367 + 32))(v367, this, "skeleton3DLifted");
  }
  uint64_t v368 = *(void *)(a1 + 2920);
  if (v368) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v368 + 32))(v368, this, "skeleton3DRetargeted");
  }
  uint64_t v369 = *(void *)(a1 + 2928);
  if (v369) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v369 + 32))(v369, this, "spatialEvent");
  }
  uint64_t v370 = *(void *)(a1 + 2936);
  if (v370) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v370 + 32))(v370, this, "spl");
  }
  uint64_t v371 = *(void *)(a1 + 2944);
  if (v371) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v371 + 32))(v371, this, "spuPlaybackExampleDeviceMotion");
  }
  uint64_t v372 = *(void *)(a1 + 2952);
  if (v372) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v372 + 32))(v372, this, "spuPlaybackExampleMotionStateUpdate");
  }
  uint64_t v373 = *(void *)(a1 + 2960);
  if (v373) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v373 + 32))(v373, this, "steadinessEvent");
  }
  uint64_t v374 = *(void *)(a1 + 2968);
  if (v374) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v374 + 32))(v374, this, "steadinessModelBalanceFeatures");
  }
  uint64_t v375 = *(void *)(a1 + 2976);
  if (v375) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v375 + 32))(v375, this, "steadinessModelContinuousWalkingFeatures");
  }
  uint64_t v376 = *(void *)(a1 + 2984);
  if (v376) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v376 + 32))(v376, this, "steadinessModelGaitBaselineFeatures");
  }
  uint64_t v377 = *(void *)(a1 + 2992);
  if (v377) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v377 + 32))(v377, this, "steadinessModelHarmonicFeatures");
  }
  uint64_t v378 = *(void *)(a1 + 3000);
  if (v378) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v378 + 32))(v378, this, "steadinessModelResult");
  }
  uint64_t v379 = *(void *)(a1 + 3008);
  if (v379) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v379 + 32))(v379, this, "steadinessModelTemporalDispersionFeatures");
  }
  uint64_t v380 = *(void *)(a1 + 3016);
  if (v380) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v380 + 32))(v380, this, "steadinessModelTemporalEntropyFeatures");
  }
  uint64_t v381 = *(void *)(a1 + 3024);
  if (v381) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v381 + 32))(v381, this, "stepCadenceToStrideLengthBin");
  }
  uint64_t v382 = *(void *)(a1 + 3032);
  if (v382) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v382 + 32))(v382, this, "stepCountEntry");
  }
  uint64_t v383 = *(void *)(a1 + 3040);
  if (v383) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v383 + 32))(v383, this, "stepCountEntryAddition");
  }
  uint64_t v384 = *(void *)(a1 + 3048);
  if (v384) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v384 + 32))(v384, this, "stepDistanceFusionResult");
  }
  uint64_t v385 = *(void *)(a1 + 3056);
  if (v385) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v385 + 32))(v385, this, "stepLikelihoodFeatures");
  }
  uint64_t v386 = *(void *)(a1 + 3064);
  if (v386) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v386 + 32))(v386, this, "streamingHeartRateData");
  }
  uint64_t v387 = *(void *)(a1 + 3072);
  if (v387) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v387 + 32))(v387, this, "streamingHighFrequencyHeartRateData");
  }
  uint64_t v388 = *(void *)(a1 + 3080);
  if (v388) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v388 + 32))(v388, this, "strideCalBin");
  }
  uint64_t v389 = *(void *)(a1 + 3088);
  if (v389) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v389 + 32))(v389, this, "strideCalEntry");
  }
  uint64_t v390 = *(void *)(a1 + 3096);
  if (v390) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v390 + 32))(v390, this, "subStats");
  }
  uint64_t v391 = *(void *)(a1 + 3104);
  if (v391) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v391 + 32))(v391, this, "swingDoTCandidate");
  }
  uint64_t v392 = *(void *)(a1 + 3112);
  if (v392) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v392 + 32))(v392, this, "tapAccept");
  }
  uint64_t v393 = *(void *)(a1 + 3120);
  if (v393) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v393 + 32))(v393, this, "tapDetect");
  }
  uint64_t v394 = *(void *)(a1 + 3128);
  if (v394) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v394 + 32))(v394, this, "tempestPoCAuxiliaryDeviceMotion");
  }
  uint64_t v395 = *(void *)(a1 + 3136);
  if (v395) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v395 + 32))(v395, this, "tempestPoCListenerOrientation");
  }
  uint64_t v396 = *(void *)(a1 + 3144);
  if (v396) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v396 + 32))(v396, this, "timestamp");
  }
  uint64_t v397 = *(void *)(a1 + 3152);
  if (v397) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v397 + 32))(v397, this, "touchOscarEmu");
  }
  uint64_t v398 = *(void *)(a1 + 3160);
  if (v398) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v398 + 32))(v398, this, "trackRunData");
  }
  uint64_t v399 = *(void *)(a1 + 3168);
  if (v399) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v399 + 32))(v399, this, "ultraFastAccel");
  }
  uint64_t v400 = *(void *)(a1 + 3176);
  if (v400) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v400 + 32))(v400, this, "userInteraction");
  }
  uint64_t v401 = *(void *)(a1 + 3184);
  if (v401) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v401 + 32))(v401, this, "userStudyEvent");
  }
  uint64_t v402 = *(void *)(a1 + 3192);
  if (v402) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v402 + 32))(v402, this, "uwbRange");
  }
  uint64_t v403 = *(void *)(a1 + 3200);
  if (v403) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v403 + 32))(v403, this, "vO2MaxModelInput");
  }
  uint64_t v404 = *(void *)(a1 + 3208);
  if (v404) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v404 + 32))(v404, this, "velocityEstimatorFusionState");
  }
  uint64_t v405 = *(void *)(a1 + 3216);
  if (v405) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v405 + 32))(v405, this, "vibrationEvent");
  }
  uint64_t v406 = *(void *)(a1 + 3224);
  if (v406) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v406 + 32))(v406, this, "viewObstructedMachineLearningDecision");
  }
  uint64_t v407 = *(void *)(a1 + 3232);
  if (v407) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v407 + 32))(v407, this, "viewObstructedMachineLearningFeatures");
  }
  uint64_t v408 = *(void *)(a1 + 3240);
  if (v408) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v408 + 32))(v408, this, "viewObstructedMachineLearningProbabilities");
  }
  uint64_t v409 = *(void *)(a1 + 3248);
  if (v409) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v409 + 32))(v409, this, "viewObstructedState");
  }
  uint64_t v410 = *(void *)(a1 + 3256);
  if (v410) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v410 + 32))(v410, this, "vioEstimation");
  }
  uint64_t v411 = *(void *)(a1 + 3264);
  if (v411) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v411 + 32))(v411, this, "vioPose");
  }
  uint64_t v412 = *(void *)(a1 + 3272);
  if (v412) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v412 + 32))(v412, this, "vioReplayPose");
  }
  uint64_t v413 = *(void *)(a1 + 3280);
  if (v413) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v413 + 32))(v413, this, "visionCompassBias");
  }
  uint64_t v414 = *(void *)(a1 + 3288);
  if (v414) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v414 + 32))(v414, this, "visualLocalization");
  }
  uint64_t v415 = *(void *)(a1 + 3296);
  if (v415) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v415 + 32))(v415, this, "visualLocalizationAttitudeConstraints");
  }
  uint64_t v416 = *(void *)(a1 + 3304);
  if (v416) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v416 + 32))(v416, this, "visualLocalizationAttitudeCorrection");
  }
  uint64_t v417 = *(void *)(a1 + 3312);
  if (v417) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v417 + 32))(v417, this, "visualStateMeasurement");
  }
  uint64_t v418 = *(void *)(a1 + 3320);
  if (v418) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v418 + 32))(v418, this, "vo2MaxInput");
  }
  uint64_t v419 = *(void *)(a1 + 3328);
  if (v419) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v419 + 32))(v419, this, "vo2MaxOutput");
  }
  uint64_t v420 = *(void *)(a1 + 3336);
  if (v420) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v420 + 32))(v420, this, "wakeGestureNotification");
  }
  uint64_t v421 = *(void *)(a1 + 3344);
  if (v421) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v421 + 32))(v421, this, "wakeGestureSample");
  }
  uint64_t v422 = *(void *)(a1 + 3352);
  if (v422) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v422 + 32))(v422, this, "walkingDetectionResult");
  }
  uint64_t v423 = *(void *)(a1 + 3360);
  if (v423) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v423 + 32))(v423, this, "walkingSteadinessClassification");
  }
  uint64_t v424 = *(void *)(a1 + 3368);
  if (v424) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v424 + 32))(v424, this, "watchActiveCalories");
  }
  uint64_t v425 = *(void *)(a1 + 3376);
  if (v425) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v425 + 32))(v425, this, "watchBasalCalories");
  }
  uint64_t v426 = *(void *)(a1 + 3384);
  if (v426) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v426 + 32))(v426, this, "watchEnclosureMaterial");
  }
  uint64_t v427 = *(void *)(a1 + 3392);
  if (v427) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v427 + 32))(v427, this, "watchHeartRateData");
  }
  uint64_t v428 = *(void *)(a1 + 3400);
  if (v428) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v428 + 32))(v428, this, "watchOnWristState");
  }
  uint64_t v429 = *(void *)(a1 + 3408);
  if (v429) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v429 + 32))(v429, this, "watchOrientationSettings");
  }
  uint64_t v430 = *(void *)(a1 + 3416);
  if (v430) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v430 + 32))(v430, this, "wifiScanResults");
  }
  uint64_t v431 = *(void *)(a1 + 3424);
  if (v431) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v431 + 32))(v431, this, "workoutActivity");
  }
  uint64_t v432 = *(void *)(a1 + 3432);
  if (v432) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v432 + 32))(v432, this, "workoutEvent");
  }
  uint64_t v433 = *(void *)(a1 + 3440);
  if (v433) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v433 + 32))(v433, this, "workoutRecorderALSData");
  }
  uint64_t v434 = *(void *)(a1 + 3448);
  if (v434) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v434 + 32))(v434, this, "workoutRecorderAccel");
  }
  uint64_t v435 = *(void *)(a1 + 3456);
  if (v435) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v435 + 32))(v435, this, "workoutRecorderAccel800");
  }
  uint64_t v436 = *(void *)(a1 + 3464);
  if (v436) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v436 + 32))(v436, this, "workoutRecorderAveragedALSData");
  }
  uint64_t v437 = *(void *)(a1 + 3472);
  if (v437) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v437 + 32))(v437, this, "workoutRecorderBodyMetrics");
  }
  uint64_t v438 = *(void *)(a1 + 3480);
  if (v438) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v438 + 32))(v438, this, "workoutRecorderCompassCalibration");
  }
  uint64_t v439 = *(void *)(a1 + 3488);
  if (v439) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v439 + 32))(v439, this, "workoutRecorderElevation");
  }
  uint64_t v440 = *(void *)(a1 + 3496);
  if (v440) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v440 + 32))(v440, this, "workoutRecorderFaceCovered");
  }
  uint64_t v441 = *(void *)(a1 + 3504);
  if (v441) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v441 + 32))(v441, this, "workoutRecorderFitnessMachineData");
  }
  uint64_t v442 = *(void *)(a1 + 3512);
  if (v442) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v442 + 32))(v442, this, "workoutRecorderHealthKitInfo");
  }
  uint64_t v443 = *(void *)(a1 + 3520);
  if (v443) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v443 + 32))(v443, this, "workoutRecorderHeartRate");
  }
  uint64_t v444 = *(void *)(a1 + 3528);
  if (v444) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v444 + 32))(v444, this, "workoutRecorderMagnetometer");
  }
  uint64_t v445 = *(void *)(a1 + 3536);
  if (v445) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v445 + 32))(v445, this, "workoutRecorderOdometer");
  }
  uint64_t v446 = *(void *)(a1 + 3544);
  if (v446) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v446 + 32))(v446, this, "workoutRecorderPressure");
  }
  uint64_t v447 = *(void *)(a1 + 3552);
  if (v447) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v447 + 32))(v447, this, "workoutRecorderRotationRate");
  }
  uint64_t v448 = *(void *)(a1 + 3560);
  if (v448) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v448 + 32))(v448, this, "workoutRecorderWatchOnWristStatus");
  }
  uint64_t v449 = *(void *)(a1 + 3568);
  if (v449) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v449 + 32))(v449, this, "workoutRecorderWatchOrientationSettings");
  }
  uint64_t v450 = *(void *)(a1 + 3576);
  if (v450) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v450 + 32))(v450, this, "workoutRecorderWifiScanResults");
  }
  uint64_t v451 = *(void *)(a1 + 3584);
  if (v451) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v451 + 32))(v451, this, "workoutRecorderWorkoutEvent");
  }
  uint64_t v452 = *(void *)(a1 + 3592);
  if (v452) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v452 + 32))(v452, this, "workoutRecorderWorkoutSessionPriors");
  }
  uint64_t v453 = *(void *)(a1 + 3600);
  if (v453) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v453 + 32))(v453, this, "workoutSessionPriors");
  }
  uint64_t v454 = *(void *)(a1 + 3608);
  if (v454) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v454 + 32))(v454, this, "zeroVelocityCorrection");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903A089C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v9 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v16 = 0;
        unsigned int v17 = 0;
        uint64_t v18 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (1)
        {
          if (v3 == v2)
          {
            unint64_t v12 = 0;
            *((unsigned char *)this + 24) = 1;
            goto LABEL_24;
          }
          unint64_t v19 = v2 + 1;
          char v20 = *(unsigned char *)(v9 + v2);
          *((void *)this + 1) = v19;
          v18 |= (unint64_t)(v20 & 0x7F) << v16;
          if ((v20 & 0x80) == 0) {
            break;
          }
          v16 += 7;
          unint64_t v2 = v19;
          BOOL v15 = v17++ > 8;
          if (v15)
          {
LABEL_19:
            unint64_t v12 = 0;
            goto LABEL_24;
          }
        }
        unint64_t v12 = *((unsigned char *)this + 24) ? 0 : v18;
      }
      else
      {
        char v10 = 0;
        unsigned int v11 = 0;
        unint64_t v12 = 0;
        while (1)
        {
          unint64_t v13 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v14 = *(unsigned char *)(v9 + v2);
          v12 |= (unint64_t)(v14 & 0x7F) << v10;
          if ((v14 & 0x80) == 0) {
            break;
          }
          v10 += 7;
          unint64_t v2 = v13;
          BOOL v15 = v11++ > 8;
          if (v15) {
            goto LABEL_19;
          }
        }
      }
LABEL_24:
      int v4 = *((unsigned __int8 *)this + 24);
      if (*((unsigned char *)this + 24) || (v12 & 7) == 4) {
        break;
      }
      unint64_t v22 = v12 >> 3;
      if ((int)(v12 >> 3) <= 2047)
      {
        switch((int)v22)
        {
          case 1:
            *(unsigned char *)(a1 + 3616) |= 1u;
            unint64_t v23 = *((void *)this + 1);
            if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *((void *)this + 2))
            {
              *(void *)(a1 + 616) = *(void *)(*(void *)this + v23);
              *((void *)this + 1) += 8;
            }
            else
            {
              *((unsigned char *)this + 24) = 1;
            }
            goto LABEL_491;
          case 2:
            operator new();
          case 3:
            operator new();
          case 4:
            operator new();
          case 5:
            operator new();
          case 6:
            operator new();
          case 7:
            operator new();
          case 8:
            operator new();
          case 9:
            operator new();
          case 10:
            operator new();
          case 11:
            operator new();
          case 12:
          case 13:
          case 14:
          case 15:
          case 69:
          case 70:
          case 71:
          case 72:
          case 73:
          case 74:
          case 75:
          case 76:
          case 77:
          case 78:
          case 79:
          case 80:
          case 81:
          case 82:
          case 83:
          case 84:
          case 85:
          case 86:
          case 87:
          case 88:
          case 89:
          case 90:
          case 91:
          case 92:
          case 93:
          case 94:
          case 95:
          case 96:
          case 97:
          case 98:
          case 99:
          case 137:
          case 138:
          case 146:
          case 147:
          case 149:
          case 211:
          case 264:
          case 265:
          case 266:
          case 267:
          case 268:
          case 269:
          case 270:
          case 271:
          case 272:
          case 273:
          case 274:
          case 275:
          case 276:
          case 277:
          case 278:
          case 279:
          case 280:
          case 281:
          case 282:
          case 283:
          case 284:
          case 285:
          case 286:
          case 287:
          case 288:
          case 289:
          case 290:
          case 291:
          case 292:
          case 293:
          case 294:
          case 295:
          case 296:
          case 297:
          case 298:
          case 299:
          case 300:
          case 301:
          case 302:
          case 303:
          case 304:
          case 305:
          case 306:
          case 307:
          case 308:
          case 309:
          case 310:
          case 311:
          case 312:
          case 313:
          case 314:
          case 315:
          case 316:
          case 317:
          case 318:
          case 319:
          case 320:
          case 321:
          case 322:
          case 323:
          case 324:
          case 325:
          case 326:
          case 327:
          case 328:
          case 329:
          case 330:
          case 331:
          case 332:
          case 333:
          case 334:
          case 335:
          case 336:
          case 337:
          case 338:
          case 339:
          case 340:
          case 341:
          case 342:
          case 343:
          case 344:
          case 345:
          case 346:
          case 347:
          case 348:
          case 349:
          case 350:
          case 351:
          case 352:
          case 353:
          case 354:
          case 355:
          case 356:
          case 357:
          case 358:
          case 359:
          case 360:
          case 361:
          case 362:
          case 363:
          case 364:
          case 365:
          case 366:
          case 367:
          case 368:
          case 369:
          case 370:
          case 371:
          case 372:
          case 373:
          case 374:
          case 375:
          case 376:
          case 377:
          case 378:
          case 379:
          case 380:
          case 381:
          case 382:
          case 383:
          case 384:
          case 385:
          case 386:
          case 387:
          case 388:
          case 389:
          case 390:
          case 391:
          case 392:
          case 393:
          case 394:
          case 395:
          case 396:
          case 397:
          case 398:
          case 399:
          case 400:
          case 401:
          case 402:
          case 403:
          case 404:
          case 405:
          case 406:
          case 407:
          case 408:
          case 409:
          case 410:
          case 411:
          case 412:
          case 413:
          case 414:
          case 415:
          case 416:
          case 417:
          case 418:
          case 419:
          case 420:
          case 421:
          case 422:
          case 423:
          case 424:
          case 425:
          case 426:
          case 427:
          case 428:
          case 429:
          case 430:
          case 431:
          case 432:
          case 433:
          case 434:
          case 435:
          case 436:
          case 437:
          case 438:
          case 439:
          case 440:
          case 441:
          case 442:
          case 443:
          case 444:
          case 445:
          case 446:
          case 447:
          case 448:
          case 449:
          case 450:
          case 451:
          case 452:
          case 453:
          case 454:
          case 455:
          case 456:
          case 457:
          case 458:
          case 459:
          case 460:
          case 461:
          case 462:
          case 463:
          case 464:
          case 465:
          case 466:
          case 467:
          case 468:
          case 469:
          case 470:
          case 471:
          case 472:
          case 473:
          case 474:
          case 475:
          case 476:
          case 477:
          case 478:
          case 479:
          case 480:
          case 481:
          case 482:
          case 483:
          case 484:
          case 485:
          case 486:
          case 487:
          case 488:
          case 489:
          case 490:
          case 491:
          case 492:
          case 493:
          case 494:
          case 495:
          case 496:
          case 497:
          case 498:
          case 499:
          case 500:
          case 501:
          case 502:
          case 503:
          case 504:
          case 505:
          case 506:
          case 507:
          case 508:
          case 509:
          case 510:
          case 511:
            goto LABEL_215;
          case 16:
            operator new();
          case 17:
            operator new();
          case 18:
            operator new();
          case 19:
            operator new();
          case 20:
            operator new();
          case 21:
            operator new();
          case 22:
            operator new();
          case 23:
            operator new();
          case 24:
            operator new();
          case 25:
            operator new();
          case 26:
            operator new();
          case 27:
            operator new();
          case 28:
            operator new();
          case 29:
            operator new();
          case 30:
            operator new();
          case 31:
            operator new();
          case 32:
            operator new();
          case 33:
            operator new();
          case 34:
            operator new();
          case 35:
            operator new();
          case 36:
            operator new();
          case 37:
            operator new();
          case 38:
            operator new();
          case 39:
            operator new();
          case 40:
            operator new();
          case 41:
            operator new();
          case 42:
            operator new();
          case 43:
            operator new();
          case 44:
            operator new();
          case 45:
            operator new();
          case 46:
            operator new();
          case 47:
            operator new();
          case 48:
            operator new();
          case 49:
            operator new();
          case 50:
            operator new();
          case 51:
            operator new();
          case 52:
            operator new();
          case 53:
            operator new();
          case 54:
            operator new();
          case 55:
            operator new();
          case 56:
            operator new();
          case 57:
            operator new();
          case 58:
            operator new();
          case 59:
            operator new();
          case 60:
            operator new();
          case 61:
            operator new();
          case 62:
            operator new();
          case 63:
            operator new();
          case 64:
            operator new();
          case 65:
            operator new();
          case 66:
            operator new();
          case 67:
            operator new();
          case 68:
            operator new();
          case 100:
            operator new();
          case 101:
            operator new();
          case 102:
            operator new();
          case 103:
            operator new();
          case 104:
            operator new();
          case 105:
            operator new();
          case 106:
            operator new();
          case 107:
            operator new();
          case 108:
            operator new();
          case 109:
            operator new();
          case 110:
            operator new();
          case 111:
            operator new();
          case 112:
            operator new();
          case 113:
            operator new();
          case 114:
            operator new();
          case 115:
            operator new();
          case 116:
            operator new();
          case 117:
            operator new();
          case 118:
            operator new();
          case 119:
            operator new();
          case 120:
            operator new();
          case 121:
            operator new();
          case 122:
            operator new();
          case 123:
            operator new();
          case 124:
            operator new();
          case 125:
            operator new();
          case 126:
            operator new();
          case 127:
            operator new();
          case 128:
            operator new();
          case 129:
            operator new();
          case 130:
            operator new();
          case 131:
            operator new();
          case 132:
            operator new();
          case 133:
            operator new();
          case 134:
            operator new();
          case 135:
            operator new();
          case 136:
            operator new();
          case 139:
            operator new();
          case 140:
            operator new();
          case 141:
            operator new();
          case 142:
            operator new();
          case 143:
            operator new();
          case 144:
            operator new();
          case 145:
            operator new();
          case 148:
            operator new();
          case 150:
            operator new();
          case 151:
            operator new();
          case 152:
            operator new();
          case 153:
            operator new();
          case 154:
            operator new();
          case 155:
            operator new();
          case 156:
            operator new();
          case 157:
            operator new();
          case 158:
            operator new();
          case 159:
            operator new();
          case 160:
            operator new();
          case 161:
            operator new();
          case 162:
            operator new();
          case 163:
            operator new();
          case 164:
            operator new();
          case 165:
            operator new();
          case 166:
            operator new();
          case 167:
            operator new();
          case 168:
            operator new();
          case 169:
            operator new();
          case 170:
            operator new();
          case 171:
            operator new();
          case 172:
            operator new();
          case 173:
            operator new();
          case 174:
            operator new();
          case 175:
            operator new();
          case 176:
            operator new();
          case 177:
            operator new();
          case 178:
            operator new();
          case 179:
            operator new();
          case 180:
            operator new();
          case 181:
            operator new();
          case 182:
            operator new();
          case 183:
            operator new();
          case 184:
            operator new();
          case 185:
            operator new();
          case 186:
            operator new();
          case 187:
            operator new();
          case 188:
            operator new();
          case 189:
            operator new();
          case 190:
            operator new();
          case 191:
            operator new();
          case 192:
            operator new();
          case 193:
            operator new();
          case 194:
            operator new();
          case 195:
            operator new();
          case 196:
            operator new();
          case 197:
            operator new();
          case 198:
            operator new();
          case 199:
            operator new();
          case 200:
            operator new();
          case 201:
            operator new();
          case 202:
            operator new();
          case 203:
            operator new();
          case 204:
            operator new();
          case 205:
            operator new();
          case 206:
            operator new();
          case 207:
            operator new();
          case 208:
            operator new();
          case 209:
            operator new();
          case 210:
            operator new();
          case 212:
            operator new();
          case 213:
            operator new();
          case 214:
            operator new();
          case 215:
            operator new();
          case 216:
            operator new();
          case 217:
            operator new();
          case 218:
            operator new();
          case 219:
            operator new();
          case 220:
            operator new();
          case 221:
            operator new();
          case 222:
            operator new();
          case 223:
            operator new();
          case 224:
            operator new();
          case 225:
            operator new();
          case 226:
            operator new();
          case 227:
            operator new();
          case 228:
            operator new();
          case 229:
            operator new();
          case 230:
            operator new();
          case 231:
            operator new();
          case 232:
            operator new();
          case 233:
            operator new();
          case 234:
            operator new();
          case 235:
            operator new();
          case 236:
            operator new();
          case 237:
            operator new();
          case 238:
            operator new();
          case 239:
            operator new();
          case 240:
            operator new();
          case 241:
            operator new();
          case 242:
            operator new();
          case 243:
            operator new();
          case 244:
            operator new();
          case 245:
            operator new();
          case 246:
            operator new();
          case 247:
            operator new();
          case 248:
            operator new();
          case 249:
            operator new();
          case 250:
            operator new();
          case 251:
            operator new();
          case 252:
            operator new();
          case 253:
            operator new();
          case 254:
            operator new();
          case 255:
            operator new();
          case 256:
            operator new();
          case 257:
            operator new();
          case 258:
            operator new();
          case 259:
            operator new();
          case 260:
            operator new();
          case 261:
            operator new();
          case 262:
            operator new();
          case 263:
            operator new();
          case 512:
            operator new();
          default:
            switch((int)v22)
            {
              case 1001:
                operator new();
              case 1002:
                operator new();
              case 1003:
                operator new();
              case 1004:
                operator new();
              case 1005:
                operator new();
              case 1006:
                operator new();
              case 1007:
                operator new();
              case 1008:
                operator new();
              case 1009:
                operator new();
              case 1010:
                operator new();
              case 1011:
                operator new();
              case 1012:
                operator new();
              case 1013:
                operator new();
              case 1014:
                operator new();
              case 1015:
                operator new();
              case 1016:
                operator new();
              case 1017:
                operator new();
              case 1018:
                operator new();
              case 1019:
                operator new();
              case 1020:
                operator new();
              case 1021:
                operator new();
              case 1022:
                operator new();
              case 1023:
                operator new();
              case 1024:
                operator new();
              case 1025:
                operator new();
              case 1026:
                operator new();
              case 1027:
                operator new();
              case 1028:
                operator new();
              case 1029:
                operator new();
              case 1030:
                operator new();
              case 1031:
                operator new();
              case 1032:
                operator new();
              case 1033:
                operator new();
              case 1034:
                operator new();
              case 1035:
                operator new();
              case 1036:
                operator new();
              case 1037:
                operator new();
              case 1038:
                operator new();
              case 1039:
                operator new();
              case 1040:
                operator new();
              case 1041:
                operator new();
              case 1042:
                operator new();
              case 1043:
                operator new();
              case 1044:
                operator new();
              case 1045:
                operator new();
              case 1046:
                operator new();
              case 1047:
                operator new();
              case 1048:
                operator new();
              case 1049:
                operator new();
              case 1050:
                operator new();
              case 1051:
                operator new();
              case 1052:
                operator new();
              case 1053:
                operator new();
              default:
                goto LABEL_215;
            }
            goto LABEL_215;
        }
      }
      if ((int)v22 > 29999)
      {
        switch(v22)
        {
          case 0x7530:
            operator new();
          case 0x7531:
            operator new();
          case 0x7532:
            operator new();
        }
      }
      else
      {
        switch((int)v22)
        {
          case 2048:
            operator new();
          case 2049:
            operator new();
          case 2050:
            operator new();
          case 2051:
            operator new();
          case 2052:
            operator new();
          case 2053:
            operator new();
          case 2054:
            operator new();
          case 2055:
            operator new();
          case 2056:
            operator new();
          case 2057:
            operator new();
          case 2058:
            operator new();
          case 2059:
            operator new();
          case 2060:
            operator new();
          case 2061:
            operator new();
          case 2062:
            operator new();
          case 2063:
            operator new();
          case 2064:
            operator new();
          case 2065:
            operator new();
          case 2066:
            operator new();
          case 2067:
            operator new();
          case 2068:
            operator new();
          case 2069:
            operator new();
          case 2070:
            operator new();
          case 2071:
            operator new();
          case 2072:
            operator new();
          case 2073:
            operator new();
          case 2074:
            operator new();
          case 2075:
            operator new();
          case 2076:
            operator new();
          case 2080:
            operator new();
          case 2089:
            operator new();
          case 2090:
            operator new();
          case 2091:
            operator new();
          case 2098:
            operator new();
          case 2099:
            operator new();
          case 2100:
            operator new();
          case 2101:
            operator new();
          case 2102:
            operator new();
          case 2103:
            operator new();
          case 2104:
            operator new();
          case 2105:
            operator new();
          case 2106:
            operator new();
          case 2107:
            operator new();
          case 2108:
            operator new();
          case 2109:
            operator new();
          case 2110:
            operator new();
          case 2111:
            operator new();
          case 2112:
            operator new();
          case 2113:
            operator new();
          case 2114:
            operator new();
          case 2115:
            operator new();
          case 2116:
            operator new();
          case 2117:
            operator new();
          case 2118:
            operator new();
          case 2119:
            operator new();
          case 2120:
            operator new();
          case 2121:
            operator new();
          case 2122:
            operator new();
          case 2123:
            operator new();
          case 2124:
            operator new();
          case 2125:
            operator new();
          case 2126:
            operator new();
          case 2127:
            operator new();
          case 2128:
            operator new();
          case 2129:
            operator new();
          case 2130:
            operator new();
          case 2131:
            operator new();
          case 2132:
            operator new();
          case 2133:
            operator new();
          case 2134:
            operator new();
          case 2135:
            operator new();
          case 2136:
            operator new();
          case 2137:
            operator new();
          case 2138:
            operator new();
          case 2139:
            operator new();
          case 2140:
            operator new();
          case 2141:
            operator new();
          case 2142:
            operator new();
          case 2143:
            operator new();
          case 2144:
            operator new();
          case 2145:
            operator new();
          case 2146:
            operator new();
          case 2147:
            operator new();
          case 2148:
            operator new();
          case 2149:
            operator new();
          case 2150:
            operator new();
          case 2151:
            operator new();
          case 2152:
            operator new();
          case 2153:
            operator new();
          case 2154:
            operator new();
          case 2155:
            operator new();
          case 2156:
            operator new();
          case 2157:
            operator new();
          case 2158:
            operator new();
          case 2159:
            operator new();
          case 2160:
            operator new();
          case 2161:
            operator new();
          case 2162:
            operator new();
          case 2163:
            operator new();
          case 2164:
            operator new();
          case 2165:
            operator new();
          case 2166:
            operator new();
          case 2167:
            operator new();
          case 2168:
            operator new();
          case 2169:
            operator new();
          case 2170:
            operator new();
          case 2171:
            operator new();
          case 2172:
            operator new();
          case 2173:
            operator new();
          case 2174:
            operator new();
          case 2175:
            operator new();
          case 2176:
            operator new();
          case 2177:
            operator new();
          case 2178:
            operator new();
          case 2179:
            operator new();
          case 2180:
            operator new();
          case 2181:
            operator new();
          case 2182:
            operator new();
          case 2183:
            operator new();
          case 2184:
            operator new();
          case 2185:
            operator new();
          case 2186:
            operator new();
          case 2187:
            operator new();
          case 2188:
            operator new();
          case 2189:
            operator new();
          case 2190:
            operator new();
          case 2191:
            operator new();
          case 2192:
            operator new();
          case 2193:
            operator new();
          case 2194:
            operator new();
          case 2195:
            operator new();
          case 2196:
            operator new();
          case 2197:
            operator new();
          case 2198:
            operator new();
          case 2199:
            operator new();
          case 2200:
            operator new();
          case 2201:
            operator new();
          case 2202:
            operator new();
          case 2203:
            operator new();
          case 2204:
            operator new();
          case 2205:
            operator new();
          case 2206:
            operator new();
          case 2207:
            operator new();
          case 2208:
            operator new();
          case 2209:
            operator new();
          case 2210:
            operator new();
          case 2211:
            operator new();
          case 2212:
            operator new();
          case 2213:
            operator new();
          case 2214:
            operator new();
          case 2215:
            operator new();
          case 2216:
            operator new();
          case 2217:
            operator new();
          case 2218:
            operator new();
          case 2219:
            operator new();
          case 2220:
            operator new();
          case 2221:
            operator new();
          case 2222:
            operator new();
          case 2223:
            operator new();
          case 2224:
            operator new();
          case 2225:
            operator new();
          case 2226:
            operator new();
          case 2227:
            operator new();
          case 2228:
            operator new();
          case 2229:
            operator new();
          case 2230:
            operator new();
          case 2231:
            operator new();
          case 2232:
            operator new();
          case 2233:
            operator new();
          case 2234:
            operator new();
          case 2235:
            operator new();
          case 2236:
            operator new();
          default:
            break;
        }
      }
LABEL_215:
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
LABEL_491:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1903AB1E4(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if (*(unsigned char *)(result + 3616)) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 616));
  }
  int v4 = (const PB::Base *)v3[146];
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  uint64_t v5 = (const PB::Base *)v3[145];
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5);
  }
  uint64_t v6 = (const PB::Base *)v3[142];
  if (v6) {
    uint64_t result = PB::Writer::writeSubmessage(this, v6);
  }
  uint64_t v7 = (const PB::Base *)v3[141];
  if (v7) {
    uint64_t result = PB::Writer::writeSubmessage(this, v7);
  }
  uint64_t v8 = (const PB::Base *)v3[85];
  if (v8) {
    uint64_t result = PB::Writer::writeSubmessage(this, v8);
  }
  uint64_t v9 = (const PB::Base *)v3[84];
  if (v9) {
    uint64_t result = PB::Writer::writeSubmessage(this, v9);
  }
  char v10 = (const PB::Base *)v3[91];
  if (v10) {
    uint64_t result = PB::Writer::writeSubmessage(this, v10);
  }
  unsigned int v11 = (const PB::Base *)v3[90];
  if (v11) {
    uint64_t result = PB::Writer::writeSubmessage(this, v11);
  }
  unint64_t v12 = (const PB::Base *)v3[180];
  if (v12) {
    uint64_t result = PB::Writer::writeSubmessage(this, v12);
  }
  unint64_t v13 = (const PB::Base *)v3[95];
  if (v13) {
    uint64_t result = PB::Writer::writeSubmessage(this, v13);
  }
  char v14 = (const PB::Base *)v3[11];
  if (v14) {
    uint64_t result = PB::Writer::writeSubmessage(this, v14);
  }
  BOOL v15 = (const PB::Base *)v3[18];
  if (v15) {
    uint64_t result = PB::Writer::writeSubmessage(this, v15);
  }
  char v16 = (const PB::Base *)v3[27];
  if (v16) {
    uint64_t result = PB::Writer::writeSubmessage(this, v16);
  }
  unsigned int v17 = (const PB::Base *)v3[431];
  if (v17) {
    uint64_t result = PB::Writer::writeSubmessage(this, v17);
  }
  uint64_t v18 = (const PB::Base *)v3[434];
  if (v18) {
    uint64_t result = PB::Writer::writeSubmessage(this, v18);
  }
  unint64_t v19 = (const PB::Base *)v3[436];
  if (v19) {
    uint64_t result = PB::Writer::writeSubmessage(this, v19);
  }
  char v20 = (const PB::Base *)v3[440];
  if (v20) {
    uint64_t result = PB::Writer::writeSubmessage(this, v20);
  }
  uint64_t v21 = (const PB::Base *)v3[444];
  if (v21) {
    uint64_t result = PB::Writer::writeSubmessage(this, v21);
  }
  unint64_t v22 = (const PB::Base *)v3[442];
  if (v22) {
    uint64_t result = PB::Writer::writeSubmessage(this, v22);
  }
  unint64_t v23 = (const PB::Base *)v3[448];
  if (v23) {
    uint64_t result = PB::Writer::writeSubmessage(this, v23);
  }
  uint64_t v24 = (const PB::Base *)v3[415];
  if (v24) {
    uint64_t result = PB::Writer::writeSubmessage(this, v24);
  }
  uint64_t v25 = (const PB::Base *)v3[68];
  if (v25) {
    uint64_t result = PB::Writer::writeSubmessage(this, v25);
  }
  uint64_t v26 = (const PB::Base *)v3[69];
  if (v26) {
    uint64_t result = PB::Writer::writeSubmessage(this, v26);
  }
  uint64_t v27 = (const PB::Base *)v3[70];
  if (v27) {
    uint64_t result = PB::Writer::writeSubmessage(this, v27);
  }
  uint64_t v28 = (const PB::Base *)v3[67];
  if (v28) {
    uint64_t result = PB::Writer::writeSubmessage(this, v28);
  }
  uint64_t v29 = (const PB::Base *)v3[71];
  if (v29) {
    uint64_t result = PB::Writer::writeSubmessage(this, v29);
  }
  uint64_t v30 = (const PB::Base *)v3[439];
  if (v30) {
    uint64_t result = PB::Writer::writeSubmessage(this, v30);
  }
  uint64_t v31 = (const PB::Base *)v3[288];
  if (v31) {
    uint64_t result = PB::Writer::writeSubmessage(this, v31);
  }
  uint64_t v32 = (const PB::Base *)v3[340];
  if (v32) {
    uint64_t result = PB::Writer::writeSubmessage(this, v32);
  }
  uint64_t v33 = (const PB::Base *)v3[446];
  if (v33) {
    uint64_t result = PB::Writer::writeSubmessage(this, v33);
  }
  uint64_t v34 = (const PB::Base *)v3[425];
  if (v34) {
    uint64_t result = PB::Writer::writeSubmessage(this, v34);
  }
  uint64_t v35 = (const PB::Base *)v3[76];
  if (v35) {
    uint64_t result = PB::Writer::writeSubmessage(this, v35);
  }
  uint64_t v36 = (const PB::Base *)v3[427];
  if (v36) {
    uint64_t result = PB::Writer::writeSubmessage(this, v36);
  }
  uint64_t v37 = (const PB::Base *)v3[176];
  if (v37) {
    uint64_t result = PB::Writer::writeSubmessage(this, v37);
  }
  uint64_t v38 = (const PB::Base *)v3[174];
  if (v38) {
    uint64_t result = PB::Writer::writeSubmessage(this, v38);
  }
  uint64_t v39 = (const PB::Base *)v3[169];
  if (v39) {
    uint64_t result = PB::Writer::writeSubmessage(this, v39);
  }
  uint64_t v40 = (const PB::Base *)v3[28];
  if (v40) {
    uint64_t result = PB::Writer::writeSubmessage(this, v40);
  }
  uint64_t v41 = (const PB::Base *)v3[29];
  if (v41) {
    uint64_t result = PB::Writer::writeSubmessage(this, v41);
  }
  uint64_t v42 = (const PB::Base *)v3[34];
  if (v42) {
    uint64_t result = PB::Writer::writeSubmessage(this, v42);
  }
  uint64_t v43 = (const PB::Base *)v3[114];
  if (v43) {
    uint64_t result = PB::Writer::writeSubmessage(this, v43);
  }
  uint64_t v44 = (const PB::Base *)v3[447];
  if (v44) {
    uint64_t result = PB::Writer::writeSubmessage(this, v44);
  }
  uint64_t v45 = (const PB::Base *)v3[443];
  if (v45) {
    uint64_t result = PB::Writer::writeSubmessage(this, v45);
  }
  uint64_t v46 = (const PB::Base *)v3[168];
  if (v46) {
    uint64_t result = PB::Writer::writeSubmessage(this, v46);
  }
  uint64_t v47 = (const PB::Base *)v3[410];
  if (v47) {
    uint64_t result = PB::Writer::writeSubmessage(this, v47);
  }
  uint64_t v48 = (const PB::Base *)v3[44];
  if (v48) {
    uint64_t result = PB::Writer::writeSubmessage(this, v48);
  }
  uint64_t v49 = (const PB::Base *)v3[407];
  if (v49) {
    uint64_t result = PB::Writer::writeSubmessage(this, v49);
  }
  uint64_t v50 = (const PB::Base *)v3[235];
  if (v50) {
    uint64_t result = PB::Writer::writeSubmessage(this, v50);
  }
  uint64_t v51 = (const PB::Base *)v3[125];
  if (v51) {
    uint64_t result = PB::Writer::writeSubmessage(this, v51);
  }
  uint64_t v52 = (const PB::Base *)v3[10];
  if (v52) {
    uint64_t result = PB::Writer::writeSubmessage(this, v52);
  }
  uint64_t v53 = (const PB::Base *)v3[259];
  if (v53) {
    uint64_t result = PB::Writer::writeSubmessage(this, v53);
  }
  uint64_t v54 = (const PB::Base *)v3[379];
  if (v54) {
    uint64_t result = PB::Writer::writeSubmessage(this, v54);
  }
  uint64_t v55 = (const PB::Base *)v3[245];
  if (v55) {
    uint64_t result = PB::Writer::writeSubmessage(this, v55);
  }
  uint64_t v56 = (const PB::Base *)v3[89];
  if (v56) {
    uint64_t result = PB::Writer::writeSubmessage(this, v56);
  }
  uint64_t v57 = (const PB::Base *)v3[408];
  if (v57) {
    uint64_t result = PB::Writer::writeSubmessage(this, v57);
  }
  uint64_t v58 = (const PB::Base *)v3[356];
  if (v58) {
    uint64_t result = PB::Writer::writeSubmessage(this, v58);
  }
  uint64_t v59 = (const PB::Base *)v3[409];
  if (v59) {
    uint64_t result = PB::Writer::writeSubmessage(this, v59);
  }
  uint64_t v60 = (const PB::Base *)v3[414];
  if (v60) {
    uint64_t result = PB::Writer::writeSubmessage(this, v60);
  }
  uint64_t v61 = (const PB::Base *)v3[219];
  if (v61) {
    uint64_t result = PB::Writer::writeSubmessage(this, v61);
  }
  uint64_t v62 = (const PB::Base *)v3[194];
  if (v62) {
    uint64_t result = PB::Writer::writeSubmessage(this, v62);
  }
  uint64_t v63 = (const PB::Base *)v3[166];
  if (v63) {
    uint64_t result = PB::Writer::writeSubmessage(this, v63);
  }
  uint64_t v64 = (const PB::Base *)v3[215];
  if (v64) {
    uint64_t result = PB::Writer::writeSubmessage(this, v64);
  }
  uint64_t v65 = (const PB::Base *)v3[397];
  if (v65) {
    uint64_t result = PB::Writer::writeSubmessage(this, v65);
  }
  uint64_t v66 = (const PB::Base *)v3[210];
  if (v66) {
    uint64_t result = PB::Writer::writeSubmessage(this, v66);
  }
  uint64_t v67 = (const PB::Base *)v3[16];
  if (v67) {
    uint64_t result = PB::Writer::writeSubmessage(this, v67);
  }
  uint64_t v68 = (const PB::Base *)v3[398];
  if (v68) {
    uint64_t result = PB::Writer::writeSubmessage(this, v68);
  }
  uint64_t v69 = (const PB::Base *)v3[47];
  if (v69) {
    uint64_t result = PB::Writer::writeSubmessage(this, v69);
  }
  uint64_t v70 = (const PB::Base *)v3[391];
  if (v70) {
    uint64_t result = PB::Writer::writeSubmessage(this, v70);
  }
  uint64_t v71 = (const PB::Base *)v3[46];
  if (v71) {
    uint64_t result = PB::Writer::writeSubmessage(this, v71);
  }
  uint64_t v72 = (const PB::Base *)v3[392];
  if (v72) {
    uint64_t result = PB::Writer::writeSubmessage(this, v72);
  }
  uint64_t v73 = (const PB::Base *)v3[432];
  if (v73) {
    uint64_t result = PB::Writer::writeSubmessage(this, v73);
  }
  uint64_t v74 = (const PB::Base *)v3[37];
  if (v74) {
    uint64_t result = PB::Writer::writeSubmessage(this, v74);
  }
  uint64_t v75 = (const PB::Base *)v3[430];
  if (v75) {
    uint64_t result = PB::Writer::writeSubmessage(this, v75);
  }
  uint64_t v76 = (const PB::Base *)v3[411];
  if (v76) {
    uint64_t result = PB::Writer::writeSubmessage(this, v76);
  }
  uint64_t v77 = (const PB::Base *)v3[155];
  if (v77) {
    uint64_t result = PB::Writer::writeSubmessage(this, v77);
  }
  uint64_t v78 = (const PB::Base *)v3[367];
  if (v78) {
    uint64_t result = PB::Writer::writeSubmessage(this, v78);
  }
  uint64_t v79 = (const PB::Base *)v3[131];
  if (v79) {
    uint64_t result = PB::Writer::writeSubmessage(this, v79);
  }
  uint64_t v80 = (const PB::Base *)v3[109];
  if (v80) {
    uint64_t result = PB::Writer::writeSubmessage(this, v80);
  }
  uint64_t v81 = (const PB::Base *)v3[4];
  if (v81) {
    uint64_t result = PB::Writer::writeSubmessage(this, v81);
  }
  uint64_t v82 = (const PB::Base *)v3[253];
  if (v82) {
    uint64_t result = PB::Writer::writeSubmessage(this, v82);
  }
  uint64_t v83 = (const PB::Base *)v3[248];
  if (v83) {
    uint64_t result = PB::Writer::writeSubmessage(this, v83);
  }
  uint64_t v84 = (const PB::Base *)v3[62];
  if (v84) {
    uint64_t result = PB::Writer::writeSubmessage(this, v84);
  }
  uint64_t v85 = (const PB::Base *)v3[217];
  if (v85) {
    uint64_t result = PB::Writer::writeSubmessage(this, v85);
  }
  uint64_t v86 = (const PB::Base *)v3[333];
  if (v86) {
    uint64_t result = PB::Writer::writeSubmessage(this, v86);
  }
  uint64_t v87 = (const PB::Base *)v3[183];
  if (v87) {
    uint64_t result = PB::Writer::writeSubmessage(this, v87);
  }
  uint64_t v88 = (const PB::Base *)v3[88];
  if (v88) {
    uint64_t result = PB::Writer::writeSubmessage(this, v88);
  }
  uint64_t v89 = (const PB::Base *)v3[151];
  if (v89) {
    uint64_t result = PB::Writer::writeSubmessage(this, v89);
  }
  uint64_t v90 = (const PB::Base *)v3[152];
  if (v90) {
    uint64_t result = PB::Writer::writeSubmessage(this, v90);
  }
  uint64_t v91 = (const PB::Base *)v3[150];
  if (v91) {
    uint64_t result = PB::Writer::writeSubmessage(this, v91);
  }
  uint64_t v92 = (const PB::Base *)v3[149];
  if (v92) {
    uint64_t result = PB::Writer::writeSubmessage(this, v92);
  }
  uint64_t v93 = (const PB::Base *)v3[59];
  if (v93) {
    uint64_t result = PB::Writer::writeSubmessage(this, v93);
  }
  uint64_t v94 = (const PB::Base *)v3[132];
  if (v94) {
    uint64_t result = PB::Writer::writeSubmessage(this, v94);
  }
  uint64_t v95 = (const PB::Base *)v3[247];
  if (v95) {
    uint64_t result = PB::Writer::writeSubmessage(this, v95);
  }
  uint64_t v96 = (const PB::Base *)v3[236];
  if (v96) {
    uint64_t result = PB::Writer::writeSubmessage(this, v96);
  }
  uint64_t v97 = (const PB::Base *)v3[304];
  if (v97) {
    uint64_t result = PB::Writer::writeSubmessage(this, v97);
  }
  uint64_t v98 = (const PB::Base *)v3[305];
  if (v98) {
    uint64_t result = PB::Writer::writeSubmessage(this, v98);
  }
  uint64_t v99 = (const PB::Base *)v3[63];
  if (v99) {
    uint64_t result = PB::Writer::writeSubmessage(this, v99);
  }
  uint64_t v100 = (const PB::Base *)v3[184];
  if (v100) {
    uint64_t result = PB::Writer::writeSubmessage(this, v100);
  }
  uint64_t v101 = (const PB::Base *)v3[87];
  if (v101) {
    uint64_t result = PB::Writer::writeSubmessage(this, v101);
  }
  uint64_t v102 = (const PB::Base *)v3[318];
  if (v102) {
    uint64_t result = PB::Writer::writeSubmessage(this, v102);
  }
  uint64_t v103 = (const PB::Base *)v3[416];
  if (v103) {
    uint64_t result = PB::Writer::writeSubmessage(this, v103);
  }
  uint64_t v104 = (const PB::Base *)v3[238];
  if (v104) {
    uint64_t result = PB::Writer::writeSubmessage(this, v104);
  }
  uint64_t v105 = (const PB::Base *)v3[239];
  if (v105) {
    uint64_t result = PB::Writer::writeSubmessage(this, v105);
  }
  uint64_t v106 = (const PB::Base *)v3[317];
  if (v106) {
    uint64_t result = PB::Writer::writeSubmessage(this, v106);
  }
  uint64_t v107 = (const PB::Base *)v3[441];
  if (v107) {
    uint64_t result = PB::Writer::writeSubmessage(this, v107);
  }
  uint64_t v108 = (const PB::Base *)v3[435];
  if (v108) {
    uint64_t result = PB::Writer::writeSubmessage(this, v108);
  }
  uint64_t v109 = (const PB::Base *)v3[332];
  if (v109) {
    uint64_t result = PB::Writer::writeSubmessage(this, v109);
  }
  uint64_t v110 = (const PB::Base *)v3[73];
  if (v110) {
    uint64_t result = PB::Writer::writeSubmessage(this, v110);
  }
  uint64_t v111 = (const PB::Base *)v3[60];
  if (v111) {
    uint64_t result = PB::Writer::writeSubmessage(this, v111);
  }
  uint64_t v112 = (const PB::Base *)v3[61];
  if (v112) {
    uint64_t result = PB::Writer::writeSubmessage(this, v112);
  }
  uint64_t v113 = (const PB::Base *)v3[266];
  if (v113) {
    uint64_t result = PB::Writer::writeSubmessage(this, v113);
  }
  uint64_t v114 = (const PB::Base *)v3[299];
  if (v114) {
    uint64_t result = PB::Writer::writeSubmessage(this, v114);
  }
  uint64_t v115 = (const PB::Base *)v3[300];
  if (v115) {
    uint64_t result = PB::Writer::writeSubmessage(this, v115);
  }
  uint64_t v116 = (const PB::Base *)v3[48];
  if (v116) {
    uint64_t result = PB::Writer::writeSubmessage(this, v116);
  }
  uint64_t v117 = (const PB::Base *)v3[393];
  if (v117) {
    uint64_t result = PB::Writer::writeSubmessage(this, v117);
  }
  uint64_t v118 = (const PB::Base *)v3[43];
  if (v118) {
    uint64_t result = PB::Writer::writeSubmessage(this, v118);
  }
  uint64_t v119 = (const PB::Base *)v3[58];
  if (v119) {
    uint64_t result = PB::Writer::writeSubmessage(this, v119);
  }
  uint64_t v120 = (const PB::Base *)v3[64];
  if (v120) {
    uint64_t result = PB::Writer::writeSubmessage(this, v120);
  }
  uint64_t v121 = (const PB::Base *)v3[420];
  if (v121) {
    uint64_t result = PB::Writer::writeSubmessage(this, v121);
  }
  uint64_t v122 = (const PB::Base *)v3[375];
  if (v122) {
    uint64_t result = PB::Writer::writeSubmessage(this, v122);
  }
  uint64_t v123 = (const PB::Base *)v3[370];
  if (v123) {
    uint64_t result = PB::Writer::writeSubmessage(this, v123);
  }
  uint64_t v124 = (const PB::Base *)v3[373];
  if (v124) {
    uint64_t result = PB::Writer::writeSubmessage(this, v124);
  }
  uint64_t v125 = (const PB::Base *)v3[372];
  if (v125) {
    uint64_t result = PB::Writer::writeSubmessage(this, v125);
  }
  uint64_t v126 = (const PB::Base *)v3[376];
  if (v126) {
    uint64_t result = PB::Writer::writeSubmessage(this, v126);
  }
  uint64_t v127 = (const PB::Base *)v3[377];
  if (v127) {
    uint64_t result = PB::Writer::writeSubmessage(this, v127);
  }
  uint64_t v128 = (const PB::Base *)v3[371];
  if (v128) {
    uint64_t result = PB::Writer::writeSubmessage(this, v128);
  }
  uint64_t v129 = (const PB::Base *)v3[242];
  if (v129) {
    uint64_t result = PB::Writer::writeSubmessage(this, v129);
  }
  uint64_t v130 = (const PB::Base *)v3[445];
  if (v130) {
    uint64_t result = PB::Writer::writeSubmessage(this, v130);
  }
  uint64_t v131 = (const PB::Base *)v3[230];
  if (v131) {
    uint64_t result = PB::Writer::writeSubmessage(this, v131);
  }
  uint64_t v132 = (const PB::Base *)v3[24];
  if (v132) {
    uint64_t result = PB::Writer::writeSubmessage(this, v132);
  }
  uint64_t v133 = (const PB::Base *)v3[380];
  if (v133) {
    uint64_t result = PB::Writer::writeSubmessage(this, v133);
  }
  uint64_t v134 = (const PB::Base *)v3[381];
  if (v134) {
    uint64_t result = PB::Writer::writeSubmessage(this, v134);
  }
  uint64_t v135 = (const PB::Base *)v3[363];
  if (v135) {
    uint64_t result = PB::Writer::writeSubmessage(this, v135);
  }
  uint64_t v136 = (const PB::Base *)v3[92];
  if (v136) {
    uint64_t result = PB::Writer::writeSubmessage(this, v136);
  }
  uint64_t v137 = (const PB::Base *)v3[111];
  if (v137) {
    uint64_t result = PB::Writer::writeSubmessage(this, v137);
  }
  uint64_t v138 = (const PB::Base *)v3[57];
  if (v138) {
    uint64_t result = PB::Writer::writeSubmessage(this, v138);
  }
  uint64_t v139 = (const PB::Base *)v3[234];
  if (v139) {
    uint64_t result = PB::Writer::writeSubmessage(this, v139);
  }
  uint64_t v140 = (const PB::Base *)v3[56];
  if (v140) {
    uint64_t result = PB::Writer::writeSubmessage(this, v140);
  }
  uint64_t v141 = (const PB::Base *)v3[308];
  if (v141) {
    uint64_t result = PB::Writer::writeSubmessage(this, v141);
  }
  uint64_t v142 = (const PB::Base *)v3[130];
  if (v142) {
    uint64_t result = PB::Writer::writeSubmessage(this, v142);
  }
  uint64_t v143 = (const PB::Base *)v3[98];
  if (v143) {
    uint64_t result = PB::Writer::writeSubmessage(this, v143);
  }
  uint64_t v144 = (const PB::Base *)v3[1];
  if (v144) {
    uint64_t result = PB::Writer::writeSubmessage(this, v144);
  }
  uint64_t v145 = (const PB::Base *)v3[2];
  if (v145) {
    uint64_t result = PB::Writer::writeSubmessage(this, v145);
  }
  uint64_t v146 = (const PB::Base *)v3[40];
  if (v146) {
    uint64_t result = PB::Writer::writeSubmessage(this, v146);
  }
  uint64_t v147 = (const PB::Base *)v3[231];
  if (v147) {
    uint64_t result = PB::Writer::writeSubmessage(this, v147);
  }
  uint64_t v148 = (const PB::Base *)v3[406];
  if (v148) {
    uint64_t result = PB::Writer::writeSubmessage(this, v148);
  }
  uint64_t v149 = (const PB::Base *)v3[343];
  if (v149) {
    uint64_t result = PB::Writer::writeSubmessage(this, v149);
  }
  uint64_t v150 = (const PB::Base *)v3[450];
  if (v150) {
    uint64_t result = PB::Writer::writeSubmessage(this, v150);
  }
  uint64_t v151 = (const PB::Base *)v3[449];
  if (v151) {
    uint64_t result = PB::Writer::writeSubmessage(this, v151);
  }
  uint64_t v152 = (const PB::Base *)v3[45];
  if (v152) {
    uint64_t result = PB::Writer::writeSubmessage(this, v152);
  }
  uint64_t v153 = (const PB::Base *)v3[281];
  if (v153) {
    uint64_t result = PB::Writer::writeSubmessage(this, v153);
  }
  uint64_t v154 = (const PB::Base *)v3[303];
  if (v154) {
    uint64_t result = PB::Writer::writeSubmessage(this, v154);
  }
  uint64_t v155 = (const PB::Base *)v3[229];
  if (v155) {
    uint64_t result = PB::Writer::writeSubmessage(this, v155);
  }
  uint64_t v156 = (const PB::Base *)v3[232];
  if (v156) {
    uint64_t result = PB::Writer::writeSubmessage(this, v156);
  }
  uint64_t v157 = (const PB::Base *)v3[344];
  if (v157) {
    uint64_t result = PB::Writer::writeSubmessage(this, v157);
  }
  uint64_t v158 = (const PB::Base *)v3[51];
  if (v158) {
    uint64_t result = PB::Writer::writeSubmessage(this, v158);
  }
  uint64_t v159 = (const PB::Base *)v3[52];
  if (v159) {
    uint64_t result = PB::Writer::writeSubmessage(this, v159);
  }
  uint64_t v160 = (const PB::Base *)v3[250];
  if (v160) {
    uint64_t result = PB::Writer::writeSubmessage(this, v160);
  }
  uint64_t v161 = (const PB::Base *)v3[269];
  if (v161) {
    uint64_t result = PB::Writer::writeSubmessage(this, v161);
  }
  uint64_t v162 = (const PB::Base *)v3[9];
  if (v162) {
    uint64_t result = PB::Writer::writeSubmessage(this, v162);
  }
  uint64_t v163 = (const PB::Base *)v3[104];
  if (v163) {
    uint64_t result = PB::Writer::writeSubmessage(this, v163);
  }
  uint64_t v164 = (const PB::Base *)v3[282];
  if (v164) {
    uint64_t result = PB::Writer::writeSubmessage(this, v164);
  }
  uint64_t v165 = (const PB::Base *)v3[136];
  if (v165) {
    uint64_t result = PB::Writer::writeSubmessage(this, v165);
  }
  uint64_t v166 = (const PB::Base *)v3[137];
  if (v166) {
    uint64_t result = PB::Writer::writeSubmessage(this, v166);
  }
  uint64_t v167 = (const PB::Base *)v3[135];
  if (v167) {
    uint64_t result = PB::Writer::writeSubmessage(this, v167);
  }
  uint64_t v168 = (const PB::Base *)v3[112];
  if (v168) {
    uint64_t result = PB::Writer::writeSubmessage(this, v168);
  }
  uint64_t v169 = (const PB::Base *)v3[433];
  if (v169) {
    uint64_t result = PB::Writer::writeSubmessage(this, v169);
  }
  uint64_t v170 = (const PB::Base *)v3[386];
  if (v170) {
    uint64_t result = PB::Writer::writeSubmessage(this, v170);
  }
  uint64_t v171 = (const PB::Base *)v3[346];
  if (v171) {
    uint64_t result = PB::Writer::writeSubmessage(this, v171);
  }
  uint64_t v172 = (const PB::Base *)v3[327];
  if (v172) {
    uint64_t result = PB::Writer::writeSubmessage(this, v172);
  }
  uint64_t v173 = (const PB::Base *)v3[224];
  if (v173) {
    uint64_t result = PB::Writer::writeSubmessage(this, v173);
  }
  uint64_t v174 = (const PB::Base *)v3[225];
  if (v174) {
    uint64_t result = PB::Writer::writeSubmessage(this, v174);
  }
  uint64_t v175 = (const PB::Base *)v3[38];
  if (v175) {
    uint64_t result = PB::Writer::writeSubmessage(this, v175);
  }
  uint64_t v176 = (const PB::Base *)v3[223];
  if (v176) {
    uint64_t result = PB::Writer::writeSubmessage(this, v176);
  }
  uint64_t v177 = (const PB::Base *)v3[417];
  if (v177) {
    uint64_t result = PB::Writer::writeSubmessage(this, v177);
  }
  uint64_t v178 = (const PB::Base *)v3[325];
  if (v178) {
    uint64_t result = PB::Writer::writeSubmessage(this, v178);
  }
  uint64_t v179 = (const PB::Base *)v3[54];
  if (v179) {
    uint64_t result = PB::Writer::writeSubmessage(this, v179);
  }
  uint64_t v180 = (const PB::Base *)v3[339];
  if (v180) {
    uint64_t result = PB::Writer::writeSubmessage(this, v180);
  }
  uint64_t v181 = (const PB::Base *)v3[226];
  if (v181) {
    uint64_t result = PB::Writer::writeSubmessage(this, v181);
  }
  uint64_t v182 = (const PB::Base *)v3[222];
  if (v182) {
    uint64_t result = PB::Writer::writeSubmessage(this, v182);
  }
  uint64_t v183 = (const PB::Base *)v3[50];
  if (v183) {
    uint64_t result = PB::Writer::writeSubmessage(this, v183);
  }
  uint64_t v184 = (const PB::Base *)v3[55];
  if (v184) {
    uint64_t result = PB::Writer::writeSubmessage(this, v184);
  }
  uint64_t v185 = (const PB::Base *)v3[165];
  if (v185) {
    uint64_t result = PB::Writer::writeSubmessage(this, v185);
  }
  uint64_t v186 = (const PB::Base *)v3[362];
  if (v186) {
    uint64_t result = PB::Writer::writeSubmessage(this, v186);
  }
  uint64_t v187 = (const PB::Base *)v3[365];
  if (v187) {
    uint64_t result = PB::Writer::writeSubmessage(this, v187);
  }
  uint64_t v188 = (const PB::Base *)v3[364];
  if (v188) {
    uint64_t result = PB::Writer::writeSubmessage(this, v188);
  }
  uint64_t v189 = (const PB::Base *)v3[129];
  if (v189) {
    uint64_t result = PB::Writer::writeSubmessage(this, v189);
  }
  uint64_t v190 = (const PB::Base *)v3[424];
  if (v190) {
    uint64_t result = PB::Writer::writeSubmessage(this, v190);
  }
  uint64_t v191 = (const PB::Base *)v3[115];
  if (v191) {
    uint64_t result = PB::Writer::writeSubmessage(this, v191);
  }
  uint64_t v192 = (const PB::Base *)v3[421];
  if (v192) {
    uint64_t result = PB::Writer::writeSubmessage(this, v192);
  }
  uint64_t v193 = (const PB::Base *)v3[422];
  if (v193) {
    uint64_t result = PB::Writer::writeSubmessage(this, v193);
  }
  uint64_t v194 = (const PB::Base *)v3[395];
  if (v194) {
    uint64_t result = PB::Writer::writeSubmessage(this, v194);
  }
  uint64_t v195 = (const PB::Base *)v3[139];
  if (v195) {
    uint64_t result = PB::Writer::writeSubmessage(this, v195);
  }
  uint64_t v196 = (const PB::Base *)v3[140];
  if (v196) {
    uint64_t result = PB::Writer::writeSubmessage(this, v196);
  }
  uint64_t v197 = (const PB::Base *)v3[243];
  if (v197) {
    uint64_t result = PB::Writer::writeSubmessage(this, v197);
  }
  uint64_t v198 = (const PB::Base *)v3[128];
  if (v198) {
    uint64_t result = PB::Writer::writeSubmessage(this, v198);
  }
  uint64_t v199 = (const PB::Base *)v3[438];
  if (v199) {
    uint64_t result = PB::Writer::writeSubmessage(this, v199);
  }
  uint64_t v200 = (const PB::Base *)v3[14];
  if (v200) {
    uint64_t result = PB::Writer::writeSubmessage(this, v200);
  }
  uint64_t v201 = (const PB::Base *)v3[291];
  if (v201) {
    uint64_t result = PB::Writer::writeSubmessage(this, v201);
  }
  uint64_t v202 = (const PB::Base *)v3[177];
  if (v202) {
    uint64_t result = PB::Writer::writeSubmessage(this, v202);
  }
  uint64_t v203 = (const PB::Base *)v3[301];
  if (v203) {
    uint64_t result = PB::Writer::writeSubmessage(this, v203);
  }
  uint64_t v204 = (const PB::Base *)v3[302];
  if (v204) {
    uint64_t result = PB::Writer::writeSubmessage(this, v204);
  }
  uint64_t v205 = (const PB::Base *)v3[290];
  if (v205) {
    uint64_t result = PB::Writer::writeSubmessage(this, v205);
  }
  uint64_t v206 = (const PB::Base *)v3[108];
  if (v206) {
    uint64_t result = PB::Writer::writeSubmessage(this, v206);
  }
  uint64_t v207 = (const PB::Base *)v3[178];
  if (v207) {
    uint64_t result = PB::Writer::writeSubmessage(this, v207);
  }
  uint64_t v208 = (const PB::Base *)v3[428];
  if (v208) {
    uint64_t result = PB::Writer::writeSubmessage(this, v208);
  }
  uint64_t v209 = (const PB::Base *)v3[294];
  if (v209) {
    uint64_t result = PB::Writer::writeSubmessage(this, v209);
  }
  uint64_t v210 = (const PB::Base *)v3[297];
  if (v210) {
    uint64_t result = PB::Writer::writeSubmessage(this, v210);
  }
  uint64_t v211 = (const PB::Base *)v3[159];
  if (v211) {
    uint64_t result = PB::Writer::writeSubmessage(this, v211);
  }
  uint64_t v212 = (const PB::Base *)v3[374];
  if (v212) {
    uint64_t result = PB::Writer::writeSubmessage(this, v212);
  }
  uint64_t v213 = (const PB::Base *)v3[296];
  if (v213) {
    uint64_t result = PB::Writer::writeSubmessage(this, v213);
  }
  uint64_t v214 = (const PB::Base *)v3[246];
  if (v214) {
    uint64_t result = PB::Writer::writeSubmessage(this, v214);
  }
  uint64_t v215 = (const PB::Base *)v3[423];
  if (v215) {
    uint64_t result = PB::Writer::writeSubmessage(this, v215);
  }
  uint64_t v216 = (const PB::Base *)v3[22];
  if (v216) {
    uint64_t result = PB::Writer::writeSubmessage(this, v216);
  }
  uint64_t v217 = (const PB::Base *)v3[26];
  if (v217) {
    uint64_t result = PB::Writer::writeSubmessage(this, v217);
  }
  uint64_t v218 = (const PB::Base *)v3[254];
  if (v218) {
    uint64_t result = PB::Writer::writeSubmessage(this, v218);
  }
  uint64_t v219 = (const PB::Base *)v3[97];
  if (v219) {
    uint64_t result = PB::Writer::writeSubmessage(this, v219);
  }
  uint64_t v220 = (const PB::Base *)v3[306];
  if (v220) {
    uint64_t result = PB::Writer::writeSubmessage(this, v220);
  }
  uint64_t v221 = (const PB::Base *)v3[307];
  if (v221) {
    uint64_t result = PB::Writer::writeSubmessage(this, v221);
  }
  uint64_t v222 = (const PB::Base *)v3[167];
  if (v222) {
    uint64_t result = PB::Writer::writeSubmessage(this, v222);
  }
  uint64_t v223 = (const PB::Base *)v3[437];
  if (v223) {
    uint64_t result = PB::Writer::writeSubmessage(this, v223);
  }
  uint64_t v224 = (const PB::Base *)v3[384];
  if (v224) {
    uint64_t result = PB::Writer::writeSubmessage(this, v224);
  }
  uint64_t v225 = (const PB::Base *)v3[396];
  if (v225) {
    uint64_t result = PB::Writer::writeSubmessage(this, v225);
  }
  uint64_t v226 = (const PB::Base *)v3[3];
  if (v226) {
    uint64_t result = PB::Writer::writeSubmessage(this, v226);
  }
  uint64_t v227 = (const PB::Base *)v3[143];
  if (v227) {
    uint64_t result = PB::Writer::writeSubmessage(this, v227);
  }
  uint64_t v228 = (const PB::Base *)v3[240];
  if (v228) {
    uint64_t result = PB::Writer::writeSubmessage(this, v228);
  }
  uint64_t v229 = (const PB::Base *)v3[80];
  if (v229) {
    uint64_t result = PB::Writer::writeSubmessage(this, v229);
  }
  uint64_t v230 = (const PB::Base *)v3[93];
  if (v230) {
    uint64_t result = PB::Writer::writeSubmessage(this, v230);
  }
  uint64_t v231 = (const PB::Base *)v3[158];
  if (v231) {
    uint64_t result = PB::Writer::writeSubmessage(this, v231);
  }
  uint64_t v232 = (const PB::Base *)v3[7];
  if (v232) {
    uint64_t result = PB::Writer::writeSubmessage(this, v232);
  }
  uint64_t v233 = (const PB::Base *)v3[156];
  if (v233) {
    uint64_t result = PB::Writer::writeSubmessage(this, v233);
  }
  uint64_t v234 = (const PB::Base *)v3[5];
  if (v234) {
    uint64_t result = PB::Writer::writeSubmessage(this, v234);
  }
  uint64_t v235 = (const PB::Base *)v3[8];
  if (v235) {
    uint64_t result = PB::Writer::writeSubmessage(this, v235);
  }
  uint64_t v236 = (const PB::Base *)v3[81];
  if (v236) {
    uint64_t result = PB::Writer::writeSubmessage(this, v236);
  }
  uint64_t v237 = (const PB::Base *)v3[144];
  if (v237) {
    uint64_t result = PB::Writer::writeSubmessage(this, v237);
  }
  uint64_t v238 = (const PB::Base *)v3[316];
  if (v238) {
    uint64_t result = PB::Writer::writeSubmessage(this, v238);
  }
  uint64_t v239 = (const PB::Base *)v3[323];
  if (v239) {
    uint64_t result = PB::Writer::writeSubmessage(this, v239);
  }
  uint64_t v240 = (const PB::Base *)v3[322];
  if (v240) {
    uint64_t result = PB::Writer::writeSubmessage(this, v240);
  }
  uint64_t v241 = (const PB::Base *)v3[319];
  if (v241) {
    uint64_t result = PB::Writer::writeSubmessage(this, v241);
  }
  uint64_t v242 = (const PB::Base *)v3[148];
  if (v242) {
    uint64_t result = PB::Writer::writeSubmessage(this, v242);
  }
  uint64_t v243 = (const PB::Base *)v3[154];
  if (v243) {
    uint64_t result = PB::Writer::writeSubmessage(this, v243);
  }
  uint64_t v244 = (const PB::Base *)v3[324];
  if (v244) {
    uint64_t result = PB::Writer::writeSubmessage(this, v244);
  }
  uint64_t v245 = (const PB::Base *)v3[256];
  if (v245) {
    uint64_t result = PB::Writer::writeSubmessage(this, v245);
  }
  uint64_t v246 = (const PB::Base *)v3[153];
  if (v246) {
    uint64_t result = PB::Writer::writeSubmessage(this, v246);
  }
  uint64_t v247 = (const PB::Base *)v3[82];
  if (v247) {
    uint64_t result = PB::Writer::writeSubmessage(this, v247);
  }
  uint64_t v248 = (const PB::Base *)v3[157];
  if (v248) {
    uint64_t result = PB::Writer::writeSubmessage(this, v248);
  }
  uint64_t v249 = (const PB::Base *)v3[49];
  if (v249) {
    uint64_t result = PB::Writer::writeSubmessage(this, v249);
  }
  uint64_t v250 = (const PB::Base *)v3[394];
  if (v250) {
    uint64_t result = PB::Writer::writeSubmessage(this, v250);
  }
  uint64_t v251 = (const PB::Base *)v3[355];
  if (v251) {
    uint64_t result = PB::Writer::writeSubmessage(this, v251);
  }
  uint64_t v252 = (const PB::Base *)v3[252];
  if (v252) {
    uint64_t result = PB::Writer::writeSubmessage(this, v252);
  }
  uint64_t v253 = (const PB::Base *)v3[6];
  if (v253) {
    uint64_t result = PB::Writer::writeSubmessage(this, v253);
  }
  uint64_t v254 = (const PB::Base *)v3[233];
  if (v254) {
    uint64_t result = PB::Writer::writeSubmessage(this, v254);
  }
  uint64_t v255 = (const PB::Base *)v3[110];
  if (v255) {
    uint64_t result = PB::Writer::writeSubmessage(this, v255);
  }
  uint64_t v256 = (const PB::Base *)v3[263];
  if (v256) {
    uint64_t result = PB::Writer::writeSubmessage(this, v256);
  }
  uint64_t v257 = (const PB::Base *)v3[262];
  if (v257) {
    uint64_t result = PB::Writer::writeSubmessage(this, v257);
  }
  uint64_t v258 = (const PB::Base *)v3[66];
  if (v258) {
    uint64_t result = PB::Writer::writeSubmessage(this, v258);
  }
  uint64_t v259 = (const PB::Base *)v3[429];
  if (v259) {
    uint64_t result = PB::Writer::writeSubmessage(this, v259);
  }
  uint64_t v260 = (const PB::Base *)v3[267];
  if (v260) {
    uint64_t result = PB::Writer::writeSubmessage(this, v260);
  }
  uint64_t v261 = (const PB::Base *)v3[383];
  if (v261) {
    uint64_t result = PB::Writer::writeSubmessage(this, v261);
  }
  uint64_t v262 = (const PB::Base *)v3[106];
  if (v262) {
    uint64_t result = PB::Writer::writeSubmessage(this, v262);
  }
  uint64_t v263 = (const PB::Base *)v3[251];
  if (v263) {
    uint64_t result = PB::Writer::writeSubmessage(this, v263);
  }
  uint64_t v264 = (const PB::Base *)v3[258];
  if (v264) {
    uint64_t result = PB::Writer::writeSubmessage(this, v264);
  }
  uint64_t v265 = (const PB::Base *)v3[385];
  if (v265) {
    uint64_t result = PB::Writer::writeSubmessage(this, v265);
  }
  uint64_t v266 = (const PB::Base *)v3[75];
  if (v266) {
    uint64_t result = PB::Writer::writeSubmessage(this, v266);
  }
  uint64_t v267 = (const PB::Base *)v3[79];
  if (v267) {
    uint64_t result = PB::Writer::writeSubmessage(this, v267);
  }
  uint64_t v268 = (const PB::Base *)v3[264];
  if (v268) {
    uint64_t result = PB::Writer::writeSubmessage(this, v268);
  }
  uint64_t v269 = (const PB::Base *)v3[244];
  if (v269) {
    uint64_t result = PB::Writer::writeSubmessage(this, v269);
  }
  uint64_t v270 = (const PB::Base *)v3[126];
  if (v270) {
    uint64_t result = PB::Writer::writeSubmessage(this, v270);
  }
  uint64_t v271 = (const PB::Base *)v3[53];
  if (v271) {
    uint64_t result = PB::Writer::writeSubmessage(this, v271);
  }
  uint64_t v272 = (const PB::Base *)v3[402];
  if (v272) {
    uint64_t result = PB::Writer::writeSubmessage(this, v272);
  }
  uint64_t v273 = (const PB::Base *)v3[378];
  if (v273) {
    uint64_t result = PB::Writer::writeSubmessage(this, v273);
  }
  uint64_t v274 = (const PB::Base *)v3[426];
  if (v274) {
    uint64_t result = PB::Writer::writeSubmessage(this, v274);
  }
  uint64_t v275 = (const PB::Base *)v3[257];
  if (v275) {
    uint64_t result = PB::Writer::writeSubmessage(this, v275);
  }
  uint64_t v276 = (const PB::Base *)v3[255];
  if (v276) {
    uint64_t result = PB::Writer::writeSubmessage(this, v276);
  }
  uint64_t v277 = (const PB::Base *)v3[265];
  if (v277) {
    uint64_t result = PB::Writer::writeSubmessage(this, v277);
  }
  uint64_t v278 = (const PB::Base *)v3[321];
  if (v278) {
    uint64_t result = PB::Writer::writeSubmessage(this, v278);
  }
  uint64_t v279 = (const PB::Base *)v3[175];
  if (v279) {
    uint64_t result = PB::Writer::writeSubmessage(this, v279);
  }
  uint64_t v280 = (const PB::Base *)v3[78];
  if (v280) {
    uint64_t result = PB::Writer::writeSubmessage(this, v280);
  }
  uint64_t v281 = (const PB::Base *)v3[36];
  if (v281) {
    uint64_t result = PB::Writer::writeSubmessage(this, v281);
  }
  uint64_t v282 = (const PB::Base *)v3[173];
  if (v282) {
    uint64_t result = PB::Writer::writeSubmessage(this, v282);
  }
  uint64_t v283 = (const PB::Base *)v3[171];
  if (v283) {
    uint64_t result = PB::Writer::writeSubmessage(this, v283);
  }
  uint64_t v284 = (const PB::Base *)v3[172];
  if (v284) {
    uint64_t result = PB::Writer::writeSubmessage(this, v284);
  }
  uint64_t v285 = (const PB::Base *)v3[170];
  if (v285) {
    uint64_t result = PB::Writer::writeSubmessage(this, v285);
  }
  uint64_t v286 = (const PB::Base *)v3[15];
  if (v286) {
    uint64_t result = PB::Writer::writeSubmessage(this, v286);
  }
  uint64_t v287 = (const PB::Base *)v3[12];
  if (v287) {
    uint64_t result = PB::Writer::writeSubmessage(this, v287);
  }
  uint64_t v288 = (const PB::Base *)v3[30];
  if (v288) {
    uint64_t result = PB::Writer::writeSubmessage(this, v288);
  }
  uint64_t v289 = (const PB::Base *)v3[390];
  if (v289) {
    uint64_t result = PB::Writer::writeSubmessage(this, v289);
  }
  uint64_t v290 = (const PB::Base *)v3[389];
  if (v290) {
    uint64_t result = PB::Writer::writeSubmessage(this, v290);
  }
  uint64_t v291 = (const PB::Base *)v3[105];
  if (v291) {
    uint64_t result = PB::Writer::writeSubmessage(this, v291);
  }
  uint64_t v292 = (const PB::Base *)v3[35];
  if (v292) {
    uint64_t result = PB::Writer::writeSubmessage(this, v292);
  }
  uint64_t v293 = (const PB::Base *)v3[138];
  if (v293) {
    uint64_t result = PB::Writer::writeSubmessage(this, v293);
  }
  uint64_t v294 = (const PB::Base *)v3[336];
  if (v294) {
    uint64_t result = PB::Writer::writeSubmessage(this, v294);
  }
  uint64_t v295 = (const PB::Base *)v3[338];
  if (v295) {
    uint64_t result = PB::Writer::writeSubmessage(this, v295);
  }
  uint64_t v296 = (const PB::Base *)v3[337];
  if (v296) {
    uint64_t result = PB::Writer::writeSubmessage(this, v296);
  }
  uint64_t v297 = (const PB::Base *)v3[451];
  if (v297) {
    uint64_t result = PB::Writer::writeSubmessage(this, v297);
  }
  uint64_t v298 = (const PB::Base *)v3[41];
  if (v298) {
    uint64_t result = PB::Writer::writeSubmessage(this, v298);
  }
  uint64_t v299 = (const PB::Base *)v3[315];
  if (v299) {
    uint64_t result = PB::Writer::writeSubmessage(this, v299);
  }
  uint64_t v300 = (const PB::Base *)v3[261];
  if (v300) {
    uint64_t result = PB::Writer::writeSubmessage(this, v300);
  }
  uint64_t v301 = (const PB::Base *)v3[260];
  if (v301) {
    uint64_t result = PB::Writer::writeSubmessage(this, v301);
  }
  uint64_t v302 = (const PB::Base *)v3[65];
  if (v302) {
    uint64_t result = PB::Writer::writeSubmessage(this, v302);
  }
  uint64_t v303 = (const PB::Base *)v3[20];
  if (v303) {
    uint64_t result = PB::Writer::writeSubmessage(this, v303);
  }
  uint64_t v304 = (const PB::Base *)v3[21];
  if (v304) {
    uint64_t result = PB::Writer::writeSubmessage(this, v304);
  }
  uint64_t v305 = (const PB::Base *)v3[19];
  if (v305) {
    uint64_t result = PB::Writer::writeSubmessage(this, v305);
  }
  uint64_t v306 = (const PB::Base *)v3[133];
  if (v306) {
    uint64_t result = PB::Writer::writeSubmessage(this, v306);
  }
  uint64_t v307 = (const PB::Base *)v3[134];
  if (v307) {
    uint64_t result = PB::Writer::writeSubmessage(this, v307);
  }
  uint64_t v308 = (const PB::Base *)v3[83];
  if (v308) {
    uint64_t result = PB::Writer::writeSubmessage(this, v308);
  }
  uint64_t v309 = (const PB::Base *)v3[413];
  if (v309) {
    uint64_t result = PB::Writer::writeSubmessage(this, v309);
  }
  uint64_t v310 = (const PB::Base *)v3[412];
  if (v310) {
    uint64_t result = PB::Writer::writeSubmessage(this, v310);
  }
  uint64_t v311 = (const PB::Base *)v3[25];
  if (v311) {
    uint64_t result = PB::Writer::writeSubmessage(this, v311);
  }
  uint64_t v312 = (const PB::Base *)v3[119];
  if (v312) {
    uint64_t result = PB::Writer::writeSubmessage(this, v312);
  }
  uint64_t v313 = (const PB::Base *)v3[120];
  if (v313) {
    uint64_t result = PB::Writer::writeSubmessage(this, v313);
  }
  uint64_t v314 = (const PB::Base *)v3[121];
  if (v314) {
    uint64_t result = PB::Writer::writeSubmessage(this, v314);
  }
  uint64_t v315 = (const PB::Base *)v3[117];
  if (v315) {
    uint64_t result = PB::Writer::writeSubmessage(this, v315);
  }
  uint64_t v316 = (const PB::Base *)v3[124];
  if (v316) {
    uint64_t result = PB::Writer::writeSubmessage(this, v316);
  }
  uint64_t v317 = (const PB::Base *)v3[17];
  if (v317) {
    uint64_t result = PB::Writer::writeSubmessage(this, v317);
  }
  uint64_t v318 = (const PB::Base *)v3[335];
  if (v318) {
    uint64_t result = PB::Writer::writeSubmessage(this, v318);
  }
  uint64_t v319 = (const PB::Base *)v3[334];
  if (v319) {
    uint64_t result = PB::Writer::writeSubmessage(this, v319);
  }
  uint64_t v320 = (const PB::Base *)v3[94];
  if (v320) {
    uint64_t result = PB::Writer::writeSubmessage(this, v320);
  }
  uint64_t v321 = (const PB::Base *)v3[118];
  if (v321) {
    uint64_t result = PB::Writer::writeSubmessage(this, v321);
  }
  uint64_t v322 = (const PB::Base *)v3[419];
  if (v322) {
    uint64_t result = PB::Writer::writeSubmessage(this, v322);
  }
  uint64_t v323 = (const PB::Base *)v3[23];
  if (v323) {
    uint64_t result = PB::Writer::writeSubmessage(this, v323);
  }
  uint64_t v324 = (const PB::Base *)v3[122];
  if (v324) {
    uint64_t result = PB::Writer::writeSubmessage(this, v324);
  }
  uint64_t v325 = (const PB::Base *)v3[147];
  if (v325) {
    uint64_t result = PB::Writer::writeSubmessage(this, v325);
  }
  uint64_t v326 = (const PB::Base *)v3[382];
  if (v326) {
    uint64_t result = PB::Writer::writeSubmessage(this, v326);
  }
  uint64_t v327 = (const PB::Base *)v3[127];
  if (v327) {
    uint64_t result = PB::Writer::writeSubmessage(this, v327);
  }
  uint64_t v328 = (const PB::Base *)v3[33];
  if (v328) {
    uint64_t result = PB::Writer::writeSubmessage(this, v328);
  }
  uint64_t v329 = (const PB::Base *)v3[358];
  if (v329) {
    uint64_t result = PB::Writer::writeSubmessage(this, v329);
  }
  uint64_t v330 = (const PB::Base *)v3[361];
  if (v330) {
    uint64_t result = PB::Writer::writeSubmessage(this, v330);
  }
  uint64_t v331 = (const PB::Base *)v3[359];
  if (v331) {
    uint64_t result = PB::Writer::writeSubmessage(this, v331);
  }
  uint64_t v332 = (const PB::Base *)v3[360];
  if (v332) {
    uint64_t result = PB::Writer::writeSubmessage(this, v332);
  }
  uint64_t v333 = (const PB::Base *)v3[366];
  if (v333) {
    uint64_t result = PB::Writer::writeSubmessage(this, v333);
  }
  uint64_t v334 = (const PB::Base *)v3[123];
  if (v334) {
    uint64_t result = PB::Writer::writeSubmessage(this, v334);
  }
  uint64_t v335 = (const PB::Base *)v3[182];
  if (v335) {
    uint64_t result = PB::Writer::writeSubmessage(this, v335);
  }
  uint64_t v336 = (const PB::Base *)v3[320];
  if (v336) {
    uint64_t result = PB::Writer::writeSubmessage(this, v336);
  }
  uint64_t v337 = (const PB::Base *)v3[249];
  if (v337) {
    uint64_t result = PB::Writer::writeSubmessage(this, v337);
  }
  uint64_t v338 = (const PB::Base *)v3[116];
  if (v338) {
    uint64_t result = PB::Writer::writeSubmessage(this, v338);
  }
  uint64_t v339 = (const PB::Base *)v3[228];
  if (v339) {
    uint64_t result = PB::Writer::writeSubmessage(this, v339);
  }
  uint64_t v340 = (const PB::Base *)v3[102];
  if (v340) {
    uint64_t result = PB::Writer::writeSubmessage(this, v340);
  }
  uint64_t v341 = (const PB::Base *)v3[100];
  if (v341) {
    uint64_t result = PB::Writer::writeSubmessage(this, v341);
  }
  uint64_t v342 = (const PB::Base *)v3[101];
  if (v342) {
    uint64_t result = PB::Writer::writeSubmessage(this, v342);
  }
  uint64_t v343 = (const PB::Base *)v3[99];
  if (v343) {
    uint64_t result = PB::Writer::writeSubmessage(this, v343);
  }
  uint64_t v344 = (const PB::Base *)v3[268];
  if (v344) {
    uint64_t result = PB::Writer::writeSubmessage(this, v344);
  }
  uint64_t v345 = (const PB::Base *)v3[191];
  if (v345) {
    uint64_t result = PB::Writer::writeSubmessage(this, v345);
  }
  uint64_t v346 = (const PB::Base *)v3[192];
  if (v346) {
    uint64_t result = PB::Writer::writeSubmessage(this, v346);
  }
  uint64_t v347 = (const PB::Base *)v3[195];
  if (v347) {
    uint64_t result = PB::Writer::writeSubmessage(this, v347);
  }
  uint64_t v348 = (const PB::Base *)v3[206];
  if (v348) {
    uint64_t result = PB::Writer::writeSubmessage(this, v348);
  }
  uint64_t v349 = (const PB::Base *)v3[221];
  if (v349) {
    uint64_t result = PB::Writer::writeSubmessage(this, v349);
  }
  uint64_t v350 = (const PB::Base *)v3[220];
  if (v350) {
    uint64_t result = PB::Writer::writeSubmessage(this, v350);
  }
  uint64_t v351 = (const PB::Base *)v3[204];
  if (v351) {
    uint64_t result = PB::Writer::writeSubmessage(this, v351);
  }
  uint64_t v352 = (const PB::Base *)v3[164];
  if (v352) {
    uint64_t result = PB::Writer::writeSubmessage(this, v352);
  }
  uint64_t v353 = (const PB::Base *)v3[163];
  if (v353) {
    uint64_t result = PB::Writer::writeSubmessage(this, v353);
  }
  uint64_t v354 = (const PB::Base *)v3[190];
  if (v354) {
    uint64_t result = PB::Writer::writeSubmessage(this, v354);
  }
  uint64_t v355 = (const PB::Base *)v3[193];
  if (v355) {
    uint64_t result = PB::Writer::writeSubmessage(this, v355);
  }
  uint64_t v356 = (const PB::Base *)v3[207];
  if (v356) {
    uint64_t result = PB::Writer::writeSubmessage(this, v356);
  }
  uint64_t v357 = (const PB::Base *)v3[208];
  if (v357) {
    uint64_t result = PB::Writer::writeSubmessage(this, v357);
  }
  uint64_t v358 = (const PB::Base *)v3[212];
  if (v358) {
    uint64_t result = PB::Writer::writeSubmessage(this, v358);
  }
  uint64_t v359 = (const PB::Base *)v3[200];
  if (v359) {
    uint64_t result = PB::Writer::writeSubmessage(this, v359);
  }
  uint64_t v360 = (const PB::Base *)v3[198];
  if (v360) {
    uint64_t result = PB::Writer::writeSubmessage(this, v360);
  }
  uint64_t v361 = (const PB::Base *)v3[213];
  if (v361) {
    uint64_t result = PB::Writer::writeSubmessage(this, v361);
  }
  uint64_t v362 = (const PB::Base *)v3[199];
  if (v362) {
    uint64_t result = PB::Writer::writeSubmessage(this, v362);
  }
  uint64_t v363 = (const PB::Base *)v3[209];
  if (v363) {
    uint64_t result = PB::Writer::writeSubmessage(this, v363);
  }
  uint64_t v364 = (const PB::Base *)v3[96];
  if (v364) {
    uint64_t result = PB::Writer::writeSubmessage(this, v364);
  }
  uint64_t v365 = (const PB::Base *)v3[403];
  if (v365) {
    uint64_t result = PB::Writer::writeSubmessage(this, v365);
  }
  uint64_t v366 = (const PB::Base *)v3[162];
  if (v366) {
    uint64_t result = PB::Writer::writeSubmessage(this, v366);
  }
  uint64_t v367 = (const PB::Base *)v3[404];
  if (v367) {
    uint64_t result = PB::Writer::writeSubmessage(this, v367);
  }
  uint64_t v368 = (const PB::Base *)v3[405];
  if (v368) {
    uint64_t result = PB::Writer::writeSubmessage(this, v368);
  }
  uint64_t v369 = (const PB::Base *)v3[341];
  if (v369) {
    uint64_t result = PB::Writer::writeSubmessage(this, v369);
  }
  uint64_t v370 = (const PB::Base *)v3[342];
  if (v370) {
    uint64_t result = PB::Writer::writeSubmessage(this, v370);
  }
  uint64_t v371 = (const PB::Base *)v3[345];
  if (v371) {
    uint64_t result = PB::Writer::writeSubmessage(this, v371);
  }
  uint64_t v372 = (const PB::Base *)v3[350];
  if (v372) {
    uint64_t result = PB::Writer::writeSubmessage(this, v372);
  }
  uint64_t v373 = (const PB::Base *)v3[348];
  if (v373) {
    uint64_t result = PB::Writer::writeSubmessage(this, v373);
  }
  uint64_t v374 = (const PB::Base *)v3[214];
  if (v374) {
    uint64_t result = PB::Writer::writeSubmessage(this, v374);
  }
  uint64_t v375 = (const PB::Base *)v3[203];
  if (v375) {
    uint64_t result = PB::Writer::writeSubmessage(this, v375);
  }
  uint64_t v376 = (const PB::Base *)v3[347];
  if (v376) {
    uint64_t result = PB::Writer::writeSubmessage(this, v376);
  }
  uint64_t v377 = (const PB::Base *)v3[181];
  if (v377) {
    uint64_t result = PB::Writer::writeSubmessage(this, v377);
  }
  uint64_t v378 = (const PB::Base *)v3[197];
  if (v378) {
    uint64_t result = PB::Writer::writeSubmessage(this, v378);
  }
  uint64_t v379 = (const PB::Base *)v3[205];
  if (v379) {
    uint64_t result = PB::Writer::writeSubmessage(this, v379);
  }
  uint64_t v380 = (const PB::Base *)v3[160];
  if (v380) {
    uint64_t result = PB::Writer::writeSubmessage(this, v380);
  }
  uint64_t v381 = (const PB::Base *)v3[74];
  if (v381) {
    uint64_t result = PB::Writer::writeSubmessage(this, v381);
  }
  uint64_t v382 = (const PB::Base *)v3[292];
  if (v382) {
    uint64_t result = PB::Writer::writeSubmessage(this, v382);
  }
  uint64_t v383 = (const PB::Base *)v3[86];
  if (v383) {
    uint64_t result = PB::Writer::writeSubmessage(this, v383);
  }
  uint64_t v384 = (const PB::Base *)v3[107];
  if (v384) {
    uint64_t result = PB::Writer::writeSubmessage(this, v384);
  }
  uint64_t v385 = (const PB::Base *)v3[400];
  if (v385) {
    uint64_t result = PB::Writer::writeSubmessage(this, v385);
  }
  uint64_t v386 = (const PB::Base *)v3[326];
  if (v386) {
    uint64_t result = PB::Writer::writeSubmessage(this, v386);
  }
  uint64_t v387 = (const PB::Base *)v3[216];
  if (v387) {
    uint64_t result = PB::Writer::writeSubmessage(this, v387);
  }
  uint64_t v388 = (const PB::Base *)v3[418];
  if (v388) {
    uint64_t result = PB::Writer::writeSubmessage(this, v388);
  }
  uint64_t v389 = (const PB::Base *)v3[196];
  if (v389) {
    uint64_t result = PB::Writer::writeSubmessage(this, v389);
  }
  uint64_t v390 = (const PB::Base *)v3[349];
  if (v390) {
    uint64_t result = PB::Writer::writeSubmessage(this, v390);
  }
  uint64_t v391 = (const PB::Base *)v3[387];
  if (v391) {
    uint64_t result = PB::Writer::writeSubmessage(this, v391);
  }
  uint64_t v392 = (const PB::Base *)v3[289];
  if (v392) {
    uint64_t result = PB::Writer::writeSubmessage(this, v392);
  }
  uint64_t v393 = (const PB::Base *)v3[237];
  if (v393) {
    uint64_t result = PB::Writer::writeSubmessage(this, v393);
  }
  uint64_t v394 = (const PB::Base *)v3[283];
  if (v394) {
    uint64_t result = PB::Writer::writeSubmessage(this, v394);
  }
  uint64_t v395 = (const PB::Base *)v3[284];
  if (v395) {
    uint64_t result = PB::Writer::writeSubmessage(this, v395);
  }
  uint64_t v396 = (const PB::Base *)v3[285];
  if (v396) {
    uint64_t result = PB::Writer::writeSubmessage(this, v396);
  }
  uint64_t v397 = (const PB::Base *)v3[270];
  if (v397) {
    uint64_t result = PB::Writer::writeSubmessage(this, v397);
  }
  uint64_t v398 = (const PB::Base *)v3[287];
  if (v398) {
    uint64_t result = PB::Writer::writeSubmessage(this, v398);
  }
  uint64_t v399 = (const PB::Base *)v3[227];
  if (v399) {
    uint64_t result = PB::Writer::writeSubmessage(this, v399);
  }
  uint64_t v400 = (const PB::Base *)v3[401];
  if (v400) {
    uint64_t result = PB::Writer::writeSubmessage(this, v400);
  }
  uint64_t v401 = (const PB::Base *)v3[279];
  if (v401) {
    uint64_t result = PB::Writer::writeSubmessage(this, v401);
  }
  uint64_t v402 = (const PB::Base *)v3[280];
  if (v402) {
    uint64_t result = PB::Writer::writeSubmessage(this, v402);
  }
  uint64_t v403 = (const PB::Base *)v3[399];
  if (v403) {
    uint64_t result = PB::Writer::writeSubmessage(this, v403);
  }
  uint64_t v404 = (const PB::Base *)v3[388];
  if (v404) {
    uint64_t result = PB::Writer::writeSubmessage(this, v404);
  }
  uint64_t v405 = (const PB::Base *)v3[103];
  if (v405) {
    uint64_t result = PB::Writer::writeSubmessage(this, v405);
  }
  uint64_t v406 = (const PB::Base *)v3[218];
  if (v406) {
    uint64_t result = PB::Writer::writeSubmessage(this, v406);
  }
  uint64_t v407 = (const PB::Base *)v3[357];
  if (v407) {
    uint64_t result = PB::Writer::writeSubmessage(this, v407);
  }
  uint64_t v408 = (const PB::Base *)v3[278];
  if (v408) {
    uint64_t result = PB::Writer::writeSubmessage(this, v408);
  }
  uint64_t v409 = (const PB::Base *)v3[272];
  if (v409) {
    uint64_t result = PB::Writer::writeSubmessage(this, v409);
  }
  uint64_t v410 = (const PB::Base *)v3[271];
  if (v410) {
    uint64_t result = PB::Writer::writeSubmessage(this, v410);
  }
  uint64_t v411 = (const PB::Base *)v3[275];
  if (v411) {
    uint64_t result = PB::Writer::writeSubmessage(this, v411);
  }
  uint64_t v412 = (const PB::Base *)v3[13];
  if (v412) {
    uint64_t result = PB::Writer::writeSubmessage(this, v412);
  }
  uint64_t v413 = (const PB::Base *)v3[286];
  if (v413) {
    uint64_t result = PB::Writer::writeSubmessage(this, v413);
  }
  uint64_t v414 = (const PB::Base *)v3[309];
  if (v414) {
    uint64_t result = PB::Writer::writeSubmessage(this, v414);
  }
  uint64_t v415 = (const PB::Base *)v3[312];
  if (v415) {
    uint64_t result = PB::Writer::writeSubmessage(this, v415);
  }
  uint64_t v416 = (const PB::Base *)v3[211];
  if (v416) {
    uint64_t result = PB::Writer::writeSubmessage(this, v416);
  }
  uint64_t v417 = (const PB::Base *)v3[313];
  if (v417) {
    uint64_t result = PB::Writer::writeSubmessage(this, v417);
  }
  uint64_t v418 = (const PB::Base *)v3[310];
  if (v418) {
    uint64_t result = PB::Writer::writeSubmessage(this, v418);
  }
  uint64_t v419 = (const PB::Base *)v3[277];
  if (v419) {
    uint64_t result = PB::Writer::writeSubmessage(this, v419);
  }
  uint64_t v420 = (const PB::Base *)v3[72];
  if (v420) {
    uint64_t result = PB::Writer::writeSubmessage(this, v420);
  }
  uint64_t v421 = (const PB::Base *)v3[276];
  if (v421) {
    uint64_t result = PB::Writer::writeSubmessage(this, v421);
  }
  uint64_t v422 = (const PB::Base *)v3[293];
  if (v422) {
    uint64_t result = PB::Writer::writeSubmessage(this, v422);
  }
  uint64_t v423 = (const PB::Base *)v3[241];
  if (v423) {
    uint64_t result = PB::Writer::writeSubmessage(this, v423);
  }
  uint64_t v424 = (const PB::Base *)v3[188];
  if (v424) {
    uint64_t result = PB::Writer::writeSubmessage(this, v424);
  }
  uint64_t v425 = (const PB::Base *)v3[189];
  if (v425) {
    uint64_t result = PB::Writer::writeSubmessage(this, v425);
  }
  uint64_t v426 = (const PB::Base *)v3[311];
  if (v426) {
    uint64_t result = PB::Writer::writeSubmessage(this, v426);
  }
  uint64_t v427 = (const PB::Base *)v3[274];
  if (v427) {
    uint64_t result = PB::Writer::writeSubmessage(this, v427);
  }
  uint64_t v428 = (const PB::Base *)v3[273];
  if (v428) {
    uint64_t result = PB::Writer::writeSubmessage(this, v428);
  }
  uint64_t v429 = (const PB::Base *)v3[202];
  if (v429) {
    uint64_t result = PB::Writer::writeSubmessage(this, v429);
  }
  uint64_t v430 = (const PB::Base *)v3[201];
  if (v430) {
    uint64_t result = PB::Writer::writeSubmessage(this, v430);
  }
  uint64_t v431 = (const PB::Base *)v3[314];
  if (v431) {
    uint64_t result = PB::Writer::writeSubmessage(this, v431);
  }
  uint64_t v432 = (const PB::Base *)v3[39];
  if (v432) {
    uint64_t result = PB::Writer::writeSubmessage(this, v432);
  }
  uint64_t v433 = (const PB::Base *)v3[113];
  if (v433) {
    uint64_t result = PB::Writer::writeSubmessage(this, v433);
  }
  uint64_t v434 = (const PB::Base *)v3[295];
  if (v434) {
    uint64_t result = PB::Writer::writeSubmessage(this, v434);
  }
  uint64_t v435 = (const PB::Base *)v3[298];
  if (v435) {
    uint64_t result = PB::Writer::writeSubmessage(this, v435);
  }
  uint64_t v436 = (const PB::Base *)v3[32];
  if (v436) {
    uint64_t result = PB::Writer::writeSubmessage(this, v436);
  }
  uint64_t v437 = (const PB::Base *)v3[31];
  if (v437) {
    uint64_t result = PB::Writer::writeSubmessage(this, v437);
  }
  uint64_t v438 = (const PB::Base *)v3[352];
  if (v438) {
    uint64_t result = PB::Writer::writeSubmessage(this, v438);
  }
  uint64_t v439 = (const PB::Base *)v3[351];
  if (v439) {
    uint64_t result = PB::Writer::writeSubmessage(this, v439);
  }
  uint64_t v440 = (const PB::Base *)v3[328];
  if (v440) {
    uint64_t result = PB::Writer::writeSubmessage(this, v440);
  }
  uint64_t v441 = (const PB::Base *)v3[329];
  if (v441) {
    uint64_t result = PB::Writer::writeSubmessage(this, v441);
  }
  uint64_t v442 = (const PB::Base *)v3[331];
  if (v442) {
    uint64_t result = PB::Writer::writeSubmessage(this, v442);
  }
  uint64_t v443 = (const PB::Base *)v3[161];
  if (v443) {
    uint64_t result = PB::Writer::writeSubmessage(this, v443);
  }
  uint64_t v444 = (const PB::Base *)v3[330];
  if (v444) {
    uint64_t result = PB::Writer::writeSubmessage(this, v444);
  }
  uint64_t v445 = (const PB::Base *)v3[42];
  if (v445) {
    uint64_t result = PB::Writer::writeSubmessage(this, v445);
  }
  uint64_t v446 = (const PB::Base *)v3[185];
  if (v446) {
    uint64_t result = PB::Writer::writeSubmessage(this, v446);
  }
  uint64_t v447 = (const PB::Base *)v3[186];
  if (v447) {
    uint64_t result = PB::Writer::writeSubmessage(this, v447);
  }
  uint64_t v448 = (const PB::Base *)v3[187];
  if (v448) {
    uint64_t result = PB::Writer::writeSubmessage(this, v448);
  }
  uint64_t v449 = (const PB::Base *)v3[353];
  if (v449) {
    uint64_t result = PB::Writer::writeSubmessage(this, v449);
  }
  uint64_t v450 = (const PB::Base *)v3[354];
  if (v450) {
    uint64_t result = PB::Writer::writeSubmessage(this, v450);
  }
  uint64_t v451 = (const PB::Base *)v3[368];
  if (v451) {
    uint64_t result = PB::Writer::writeSubmessage(this, v451);
  }
  uint64_t v452 = (const PB::Base *)v3[369];
  if (v452) {
    uint64_t result = PB::Writer::writeSubmessage(this, v452);
  }
  uint64_t v453 = (const PB::Base *)v3[179];
  if (v453)
  {
    return PB::Writer::writeSubmessage(this, v453);
  }
  return result;
}

uint64_t sub_1903AD560(uint64_t result)
{
  if (!*(void *)(result + 88)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AD5F0(uint64_t result)
{
  if (!*(void *)(result + 144)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AD680(uint64_t result)
{
  if (!*(void *)(result + 912)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AD710(uint64_t result)
{
  if (!*(void *)(result + 3184)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AD7A0(uint64_t result)
{
  if (!*(void *)(result + 368)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AD830(uint64_t result)
{
  if (!*(void *)(result + 3136)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AD8C0(uint64_t result)
{
  if (!*(void *)(result + 1984)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AD950(uint64_t result)
{
  if (!*(void *)(result + 2664)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AD9E0(uint64_t result)
{
  if (!*(void *)(result + 2432)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903ADA70(uint64_t result)
{
  if (!*(void *)(result + 2544)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903ADB00(uint64_t result)
{
  if (!*(void *)(result + 888)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903ADB90(uint64_t result)
{
  if (!*(void *)(result + 360)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903ADC20(uint64_t result)
{
  if (!*(void *)(result + 2000)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903ADCB0(uint64_t result)
{
  if (!*(void *)(result + 2152)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903ADD40(uint64_t result)
{
  if (!*(void *)(result + 2256)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903ADDD0(uint64_t result)
{
  if (!*(void *)(result + 1320)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903ADE60(uint64_t result)
{
  if (!*(void *)(result + 2896)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903ADEF0(uint64_t result)
{
  if (!*(void *)(result + 2920)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903ADF80(uint64_t result)
{
  if (!*(void *)(result + 2912)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE010(uint64_t result)
{
  if (!*(void *)(result + 1032)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE0A0(uint64_t result)
{
  if (!*(void *)(result + 3392)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE130(uint64_t result)
{
  if (!*(void *)(result + 920)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE1C0(uint64_t result)
{
  if (!*(void *)(result + 3368)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE250(uint64_t result)
{
  if (!*(void *)(result + 3376)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE2E0(uint64_t result)
{
  if (!*(void *)(result + 24)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE370(uint64_t result)
{
  if (!*(void *)(result + 1144)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE400(uint64_t result)
{
  if (!*(void *)(result + 1264)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE490(uint64_t result)
{
  if (!*(void *)(result + 1152)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE520(uint64_t result)
{
  if (!*(void *)(result + 1232)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE5B0(uint64_t result)
{
  if (!*(void *)(result + 1920)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE640(uint64_t result)
{
  if (!*(void *)(result + 640)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE6D0(uint64_t result)
{
  if (!*(void *)(result + 648)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE760(uint64_t result)
{
  if (!*(void *)(result + 2552)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE7F0(uint64_t result)
{
  if (!*(void *)(result + 3152)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE880(uint64_t result)
{
  if (!*(void *)(result + 744)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE910(uint64_t result)
{
  if (!*(void *)(result + 528)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AE9A0(uint64_t result)
{
  if (!*(void *)(result + 3432)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AEA30(uint64_t result)
{
  if (!*(void *)(result + 2008)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AEAC0(uint64_t result)
{
  if (!*(void *)(result + 2688)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AEB50(uint64_t result)
{
  if (!*(void *)(result + 2520)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AEBE0(uint64_t result)
{
  if (!*(void *)(result + 168)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AEC70(uint64_t result)
{
  if (!*(void *)(result + 152)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AED00(uint64_t result)
{
  if (!*(void *)(result + 136)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AED90(uint64_t result)
{
  if (!*(void *)(result + 3352)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AEE20(uint64_t result)
{
  if (!*(void *)(result + 184)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AEEB0(uint64_t result)
{
  if (!*(void *)(result + 1456)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AEF40(uint64_t result)
{
  if (!*(void *)(result + 1312)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903AEFD0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCFC28;
  *(_DWORD *)(result + 208) = 0;
  return result;
}

void sub_1903AEFF8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903AF030(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 208);
  if (v5)
  {
    PB::TextFormatter::format(this, "acceleration", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 208);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "centerOfMassAccelAmplitude", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "centerOfMassAccelMax", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "centripetalAccelMeanY", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "centripetalAccelMeanZ", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "height", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "position", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "rotationProjectedGravityAmplitude", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "rotationRateMean", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "rotationRateMeanX", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "swingAccelAmplitudeY", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "swingAccelAmplitudeZ", *(double *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "swingAccelMaxY", *(double *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "swingAccelMaxZ", *(double *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 136));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "userAccelAmplitudeZ", *(double *)(a1 + 144));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "userAccelMaxX", *(double *)(a1 + 152));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "userAccelMaxY", *(double *)(a1 + 160));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "userAccelMean", *(double *)(a1 + 168));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "userAccelMeanY", *(double *)(a1 + 176));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "userAccelProjectedGravityAmplitudeCadence", *(double *)(a1 + 184));
  int v5 = *(_DWORD *)(a1 + 208);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_53:
  PB::TextFormatter::format(this, "velocity", *(double *)(a1 + 192));
  if ((*(_DWORD *)(a1 + 208) & 0x1000000) != 0) {
LABEL_26:
  }
    PB::TextFormatter::format(this, "weight", *(double *)(a1 + 200));
LABEL_27:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903AF394(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 208) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 2u:
          *(_DWORD *)(a1 + 208) |= 0x10000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 3u:
          *(_DWORD *)(a1 + 208) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 4u:
          *(_DWORD *)(a1 + 208) |= 0x800000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 192) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 5u:
          *(_DWORD *)(a1 + 208) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 6u:
          *(_DWORD *)(a1 + 208) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 7u:
          *(_DWORD *)(a1 + 208) |= 0x1000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 200) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 8u:
          *(_DWORD *)(a1 + 208) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 9u:
          *(_DWORD *)(a1 + 208) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0xAu:
          *(_DWORD *)(a1 + 208) |= 0x100000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0xBu:
          *(_DWORD *)(a1 + 208) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0xCu:
          *(_DWORD *)(a1 + 208) |= 0x200000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 176) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0xDu:
          *(_DWORD *)(a1 + 208) |= 0x8000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0xEu:
          *(_DWORD *)(a1 + 208) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0xFu:
          *(_DWORD *)(a1 + 208) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x10u:
          *(_DWORD *)(a1 + 208) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x11u:
          *(_DWORD *)(a1 + 208) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x12u:
          *(_DWORD *)(a1 + 208) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x13u:
          *(_DWORD *)(a1 + 208) |= 0x4000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x14u:
          *(_DWORD *)(a1 + 208) |= 0x80000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x15u:
          *(_DWORD *)(a1 + 208) |= 0x400000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 184) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x16u:
          *(_DWORD *)(a1 + 208) |= 0x40000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x17u:
          *(_DWORD *)(a1 + 208) |= 0x20000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x18u:
          *(_DWORD *)(a1 + 208) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_96;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_100;
        case 0x19u:
          *(_DWORD *)(a1 + 208) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_100:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_96:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903AFAF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 208);
  if ((v4 & 0x400) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 88));
    int v4 = *(_DWORD *)(v3 + 208);
    if ((v4 & 0x10000) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v4 & 0x10000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 192));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 200));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20) == 0)
  {
LABEL_9:
    if ((v4 & 0x80) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 8) == 0)
  {
LABEL_12:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x8000) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 4) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x200) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x200) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x4000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x400000) == 0)
  {
LABEL_22:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 184));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x40000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 152));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100) == 0) {
      goto LABEL_25;
    }
LABEL_50:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
    if ((*(_DWORD *)(v3 + 208) & 2) == 0) {
      return result;
    }
    goto LABEL_51;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 208);
  if ((v4 & 0x100) != 0) {
    goto LABEL_50;
  }
LABEL_25:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_51:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

void *sub_1903AFDE4(void *result)
{
  *uint64_t result = &unk_1EDFCF950;
  result[1] = 0;
  return result;
}

void sub_1903AFE04(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCF950;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903AFE84(PB::Base *a1)
{
  sub_1903AFE04(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903AFEBC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903AFF38(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B0134(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903B0150(void *result)
{
  *uint64_t result = &unk_1EDFCFD40;
  result[1] = 0;
  return result;
}

void sub_1903B0170(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCFD40;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903B01F0(PB::Base *a1)
{
  sub_1903B0170(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B0228(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B02A4(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B04A0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_1903B04BC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2EE0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1903B04E4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B051C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "code");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B0598(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v26 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v27 = *(void *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v39 = v26++;
            char v40 = *(unsigned char *)(v27 + v39);
            *((void *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0) {
              break;
            }
            v37 += 7;
            BOOL v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v39 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)this + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v35 = v20++;
            char v36 = *(unsigned char *)(v21 + v35);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0) {
              break;
            }
            v33 += 7;
            BOOL v14 = v34++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v24 = 0;
          }
LABEL_59:
          unint64_t v3 = v35 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v3 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v3;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(void *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B08C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903B0930(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2BD0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1903B0958(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B0990(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dramDurationMs");
    char v5 = *(unsigned char *)(a1 + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestamp");
  if ((*(unsigned char *)(a1 + 24) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "vehicularFlags");
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B0A34(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 24) |= 2u;
        unint64_t v27 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_80;
            }
            unint64_t v46 = v27++;
            char v47 = *(unsigned char *)(v28 + v46);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            BOOL v14 = v45++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_79;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_79:
          unint64_t v3 = v46 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v3 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v3;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_80:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if (v20 == 2)
      {
        *(unsigned char *)(a1 + 24) |= 4u;
        unint64_t v33 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v34 = *(void *)this;
        if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
        {
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v37 = 0;
          if (v2 <= v33) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v33)
            {
              LODWORD(v37) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_85;
            }
            unint64_t v50 = v33++;
            char v51 = *(unsigned char *)(v34 + v50);
            *((void *)this + 1) = v33;
            v37 |= (unint64_t)(v51 & 0x7F) << v48;
            if ((v51 & 0x80) == 0) {
              break;
            }
            v48 += 7;
            BOOL v14 = v49++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              goto LABEL_84;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v37) = 0;
          }
LABEL_84:
          unint64_t v3 = v50 + 1;
        }
        else
        {
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          while (1)
          {
            unint64_t v3 = v33 + 1;
            *((void *)this + 1) = v33 + 1;
            char v38 = *(unsigned char *)(v34 + v33);
            v37 |= (unint64_t)(v38 & 0x7F) << v35;
            if ((v38 & 0x80) == 0) {
              break;
            }
            v35 += 7;
            unint64_t v33 = v3;
            BOOL v14 = v36++ > 8;
            if (v14)
            {
              LODWORD(v37) = 0;
              break;
            }
          }
        }
LABEL_85:
        *(_DWORD *)(a1 + 20) = v37;
      }
      else if (v20 == 1)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v21)
            {
              uint64_t v25 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_75;
            }
            unint64_t v42 = v21++;
            char v43 = *(unsigned char *)(v22 + v42);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v43 & 0x7F) << v40;
            if ((v43 & 0x80) == 0) {
              break;
            }
            v40 += 7;
            BOOL v14 = v41++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              goto LABEL_74;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v25 = 0;
          }
LABEL_74:
          unint64_t v3 = v42 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v3 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v3;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              uint64_t v25 = 0;
              break;
            }
          }
        }
LABEL_75:
        *(void *)(a1 + 8) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B0E54(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(result + 24) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 24) & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_7:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903B0EE0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC1DA0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1903B0F08(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B0F40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 52);
  if (v5)
  {
    PB::TextFormatter::format(this, "createdAtTimestamp");
    char v5 = *(unsigned char *)(a1 + 52);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 52) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "epochNumber");
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "epochTimestamp");
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "lastRealTriggerTimestamp");
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "mode");
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "receivedAtTimestamp");
  if ((*(unsigned char *)(a1 + 52) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "sessionNumber");
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B1064(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          unint64_t v20 = v11 >> 3;
          switch((v11 >> 3))
          {
            case 2u:
              *(unsigned char *)(a1 + 52) |= 0x20u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v64 = 0;
                unsigned int v65 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_135;
                  }
                  unint64_t v66 = v21++;
                  char v67 = *(unsigned char *)(v22 + v66);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v67 & 0x7F) << v64;
                  if ((v67 & 0x80) == 0) {
                    break;
                  }
                  v64 += 7;
                  BOOL v14 = v65++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
                    goto LABEL_134;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
LABEL_134:
                unint64_t v3 = v66 + 1;
              }
              else
              {
                char v23 = 0;
                unsigned int v24 = 0;
                uint64_t v25 = 0;
                do
                {
                  unint64_t v3 = v21 + 1;
                  *((void *)this + 1) = v21 + 1;
                  char v26 = *(unsigned char *)(v22 + v21);
                  v25 |= (unint64_t)(v26 & 0x7F) << v23;
                  if ((v26 & 0x80) == 0) {
                    goto LABEL_135;
                  }
                  v23 += 7;
                  unint64_t v21 = v3;
                  BOOL v14 = v24++ > 8;
                }
                while (!v14);
                LODWORD(v25) = 0;
              }
LABEL_135:
              *(_DWORD *)(a1 + 44) = v25;
              goto LABEL_166;
            case 3u:
              *(unsigned char *)(a1 + 52) |= 0x40u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v72 = 0;
                unsigned int v73 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  unint64_t v74 = v33++;
                  char v75 = *(unsigned char *)(v34 + v74);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v75 & 0x7F) << v72;
                  if ((v75 & 0x80) == 0) {
                    break;
                  }
                  v72 += 7;
                  BOOL v14 = v73++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_144:
                    unint64_t v3 = v74 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_144;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v3 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v35 += 7;
                unint64_t v33 = v3;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 48) = v37;
              goto LABEL_166;
            case 4u:
              *(unsigned char *)(a1 + 52) |= 0x10u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v76 = 0;
                unsigned int v77 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  unint64_t v78 = v39++;
                  char v79 = *(unsigned char *)(v40 + v78);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v79 & 0x7F) << v76;
                  if ((v79 & 0x80) == 0) {
                    break;
                  }
                  v76 += 7;
                  BOOL v14 = v77++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_149:
                    unint64_t v3 = v78 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_149;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v3 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v41 += 7;
                unint64_t v39 = v3;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 40) = v43;
              goto LABEL_166;
            case 5u:
              *(unsigned char *)(a1 + 52) |= 8u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v80 = 0;
                unsigned int v81 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v45)
                  {
                    uint64_t v49 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_155;
                  }
                  unint64_t v82 = v45++;
                  char v83 = *(unsigned char *)(v46 + v82);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v83 & 0x7F) << v80;
                  if ((v83 & 0x80) == 0) {
                    break;
                  }
                  v80 += 7;
                  BOOL v14 = v81++ > 8;
                  if (v14)
                  {
                    uint64_t v49 = 0;
LABEL_154:
                    unint64_t v3 = v82 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v49 = 0;
                }
                goto LABEL_154;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v3 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_155;
                }
                v47 += 7;
                unint64_t v45 = v3;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              uint64_t v49 = 0;
LABEL_155:
              *(void *)(a1 + 32) = v49;
              goto LABEL_166;
            case 6u:
              *(unsigned char *)(a1 + 52) |= 1u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v84 = 0;
                unsigned int v85 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v51)
                  {
                    uint64_t v55 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_160;
                  }
                  unint64_t v86 = v51++;
                  char v87 = *(unsigned char *)(v52 + v86);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v87 & 0x7F) << v84;
                  if ((v87 & 0x80) == 0) {
                    break;
                  }
                  v84 += 7;
                  BOOL v14 = v85++ > 8;
                  if (v14)
                  {
                    uint64_t v55 = 0;
LABEL_159:
                    unint64_t v3 = v86 + 1;
                    goto LABEL_160;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v55 = 0;
                }
                goto LABEL_159;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v3 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_160;
                }
                v53 += 7;
                unint64_t v51 = v3;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              uint64_t v55 = 0;
LABEL_160:
              *(void *)(a1 + 8) = v55;
              goto LABEL_166;
            default:
              if (v20 == 100)
              {
                *(unsigned char *)(a1 + 52) |= 4u;
                unint64_t v57 = *((void *)this + 1);
                unint64_t v2 = *((void *)this + 2);
                uint64_t v58 = *(void *)this;
                if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
                {
                  char v88 = 0;
                  unsigned int v89 = 0;
                  uint64_t v61 = 0;
                  if (v2 <= v57) {
                    unint64_t v3 = *((void *)this + 1);
                  }
                  else {
                    unint64_t v3 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v3 == v57)
                    {
                      uint64_t v61 = 0;
                      *((unsigned char *)this + 24) = 1;
                      goto LABEL_165;
                    }
                    unint64_t v90 = v57++;
                    char v91 = *(unsigned char *)(v58 + v90);
                    *((void *)this + 1) = v57;
                    v61 |= (unint64_t)(v91 & 0x7F) << v88;
                    if ((v91 & 0x80) == 0) {
                      break;
                    }
                    v88 += 7;
                    BOOL v14 = v89++ > 8;
                    if (v14)
                    {
                      uint64_t v61 = 0;
                      goto LABEL_164;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    uint64_t v61 = 0;
                  }
LABEL_164:
                  unint64_t v3 = v90 + 1;
                }
                else
                {
                  char v59 = 0;
                  unsigned int v60 = 0;
                  uint64_t v61 = 0;
                  while (1)
                  {
                    unint64_t v3 = v57 + 1;
                    *((void *)this + 1) = v57 + 1;
                    char v62 = *(unsigned char *)(v58 + v57);
                    v61 |= (unint64_t)(v62 & 0x7F) << v59;
                    if ((v62 & 0x80) == 0) {
                      break;
                    }
                    v59 += 7;
                    unint64_t v57 = v3;
                    BOOL v14 = v60++ > 8;
                    if (v14)
                    {
                      uint64_t v61 = 0;
                      break;
                    }
                  }
                }
LABEL_165:
                *(void *)(a1 + 24) = v61;
              }
              else if (v20 == 101)
              {
                *(unsigned char *)(a1 + 52) |= 2u;
                unint64_t v27 = *((void *)this + 1);
                unint64_t v2 = *((void *)this + 2);
                uint64_t v28 = *(void *)this;
                if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
                {
                  char v68 = 0;
                  unsigned int v69 = 0;
                  uint64_t v31 = 0;
                  if (v2 <= v27) {
                    unint64_t v3 = *((void *)this + 1);
                  }
                  else {
                    unint64_t v3 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v3 == v27)
                    {
                      uint64_t v31 = 0;
                      *((unsigned char *)this + 24) = 1;
                      goto LABEL_140;
                    }
                    unint64_t v70 = v27++;
                    char v71 = *(unsigned char *)(v28 + v70);
                    *((void *)this + 1) = v27;
                    v31 |= (unint64_t)(v71 & 0x7F) << v68;
                    if ((v71 & 0x80) == 0) {
                      break;
                    }
                    v68 += 7;
                    BOOL v14 = v69++ > 8;
                    if (v14)
                    {
                      uint64_t v31 = 0;
                      goto LABEL_139;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    uint64_t v31 = 0;
                  }
LABEL_139:
                  unint64_t v3 = v70 + 1;
                }
                else
                {
                  char v29 = 0;
                  unsigned int v30 = 0;
                  uint64_t v31 = 0;
                  while (1)
                  {
                    unint64_t v3 = v27 + 1;
                    *((void *)this + 1) = v27 + 1;
                    char v32 = *(unsigned char *)(v28 + v27);
                    v31 |= (unint64_t)(v32 & 0x7F) << v29;
                    if ((v32 & 0x80) == 0) {
                      break;
                    }
                    v29 += 7;
                    unint64_t v27 = v3;
                    BOOL v14 = v30++ > 8;
                    if (v14)
                    {
                      uint64_t v31 = 0;
                      break;
                    }
                  }
                }
LABEL_140:
                *(void *)(a1 + 16) = v31;
              }
              else
              {
                uint64_t result = PB::Reader::skip(this);
                if (!result) {
                  return result;
                }
                unint64_t v3 = *((void *)this + 1);
                unint64_t v2 = *((void *)this + 2);
              }
LABEL_166:
              int v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903B186C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 52);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 52);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 52) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 52) & 2) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_15:

  return PB::Writer::writeVarInt(this);
}

void *sub_1903B1968(void *result)
{
  *uint64_t result = &unk_1EDFC1DD8;
  *(void *)((char *)result + 212) = 0;
  return result;
}

void sub_1903B1990(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B19C8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 212);
  if (v5)
  {
    PB::TextFormatter::format(this, "calculationTimestamp");
    uint64_t v5 = *(void *)(a1 + 212);
    if ((v5 & 0x1000) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_47;
    }
  }
  else if ((v5 & 0x1000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dramDuration");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "dramMaxTimestamp");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "dramMinTimestamp");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "epochMaxTimestamp");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "epochMinTimestamp");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x2000) == 0)
  {
LABEL_8:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "maxRMS", *(float *)(a1 + 108));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x4000) == 0)
  {
LABEL_9:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "numPointsInEpoch");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x8000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "numShortAudio");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "planarChaosAtMaxEnergy", *(float *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "planarChaosAtMaxSaturation", *(float *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "planarEnergyAtMaxChaos", *(float *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "planarEnergyAtMaxSaturation", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "planarMaxChaos", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x200000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "planarMaxEnergy", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x400000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "planarMaxSaturation", *(float *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "planarPassThru");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x800000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "planarSaturationAtMaxChaos", *(float *)(a1 + 148));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_20:
    if ((v5 & 0x20) == 0) {
      goto LABEL_21;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "planarSaturationAtMaxEnergy", *(float *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x20) == 0)
  {
LABEL_21:
    if ((v5 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "planarTimestampAtMaxChaos");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x40) == 0)
  {
LABEL_22:
    if ((v5 & 0x80) == 0) {
      goto LABEL_23;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "planarTimestampAtMaxEnergy");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x80) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "planarTimestampAtMaxSaturation");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "rolloverChaosAtMaxEnergy", *(float *)(a1 + 156));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "rolloverChaosAtMaxSaturation", *(float *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "rolloverEnergyAtMaxChaos", *(float *)(a1 + 164));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "rolloverEnergyAtMaxSaturation", *(float *)(a1 + 168));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "rolloverMaxChaos", *(float *)(a1 + 172));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "rolloverMaxEnergy", *(float *)(a1 + 176));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "rolloverMaxSaturation", *(float *)(a1 + 180));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "rolloverPassThru");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "rolloverSaturationAtMaxChaos", *(float *)(a1 + 184));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x100) == 0) {
      goto LABEL_34;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "rolloverSaturationAtMaxEnergy", *(float *)(a1 + 188));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x100) == 0)
  {
LABEL_34:
    if ((v5 & 0x200) == 0) {
      goto LABEL_35;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "rolloverTimestampAtMaxChaos");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x200) == 0)
  {
LABEL_35:
    if ((v5 & 0x400) == 0) {
      goto LABEL_36;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "rolloverTimestampAtMaxEnergy");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x400) == 0)
  {
LABEL_36:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "rolloverTimestampAtMaxSaturation");
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "soundEnvelopeCount", *(float *)(a1 + 192));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "soundMaxMeanOverArmSession", *(float *)(a1 + 196));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "soundMeanCurrentWindow", *(float *)(a1 + 200));
  uint64_t v5 = *(void *)(a1 + 212);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x800) == 0) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
LABEL_83:
  PB::TextFormatter::format(this, "soundMeanLast15s", *(float *)(a1 + 204));
  if ((*(void *)(a1 + 212) & 0x800) != 0) {
LABEL_41:
  }
    PB::TextFormatter::format(this, "timestamp");
LABEL_42:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B1F0C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 212) |= 0x800uLL;
          unint64_t v20 = *((void *)this + 1);
          unint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            char v172 = 0;
            unsigned int v173 = 0;
            uint64_t v25 = 0;
            if (v21 <= v20) {
              unint64_t v21 = *((void *)this + 1);
            }
            do
            {
              if (v21 == v20)
              {
                uint64_t v25 = 0;
                *((unsigned char *)this + 24) = 1;
                goto LABEL_321;
              }
              unint64_t v174 = v20 + 1;
              char v175 = *(unsigned char *)(v22 + v20);
              *((void *)this + 1) = v174;
              v25 |= (unint64_t)(v175 & 0x7F) << v172;
              if ((v175 & 0x80) == 0)
              {
                if (*((unsigned char *)this + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_321;
              }
              v172 += 7;
              unint64_t v20 = v174;
              BOOL v14 = v173++ > 8;
            }
            while (!v14);
LABEL_208:
            uint64_t v25 = 0;
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              unint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
              if (v14) {
                goto LABEL_208;
              }
            }
          }
LABEL_321:
          *(void *)(a1 + 96) = v25;
          goto LABEL_313;
        case 2u:
          *(void *)(a1 + 212) |= 0x200000uLL;
          unint64_t v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v29);
          goto LABEL_312;
        case 3u:
          *(void *)(a1 + 212) |= 0x40uLL;
          unint64_t v30 = *((void *)this + 1);
          unint64_t v31 = *((void *)this + 2);
          uint64_t v32 = *(void *)this;
          if (v30 <= 0xFFFFFFFFFFFFFFF5 && v30 + 10 <= v31)
          {
            char v33 = 0;
            unsigned int v34 = 0;
            uint64_t v35 = 0;
            do
            {
              unint64_t v36 = v30 + 1;
              *((void *)this + 1) = v30 + 1;
              char v37 = *(unsigned char *)(v32 + v30);
              v35 |= (unint64_t)(v37 & 0x7F) << v33;
              if ((v37 & 0x80) == 0) {
                goto LABEL_325;
              }
              v33 += 7;
              unint64_t v30 = v36;
              BOOL v14 = v34++ > 8;
            }
            while (!v14);
LABEL_215:
            uint64_t v35 = 0;
            goto LABEL_325;
          }
          char v176 = 0;
          unsigned int v177 = 0;
          uint64_t v35 = 0;
          if (v31 <= v30) {
            unint64_t v31 = *((void *)this + 1);
          }
          while (2)
          {
            if (v31 == v30)
            {
              uint64_t v35 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v178 = v30 + 1;
              char v179 = *(unsigned char *)(v32 + v30);
              *((void *)this + 1) = v178;
              v35 |= (unint64_t)(v179 & 0x7F) << v176;
              if (v179 < 0)
              {
                v176 += 7;
                unint64_t v30 = v178;
                BOOL v14 = v177++ > 8;
                if (v14) {
                  goto LABEL_215;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v35 = 0;
              }
            }
            break;
          }
LABEL_325:
          *(void *)(a1 + 56) = v35;
          goto LABEL_313;
        case 4u:
          *(void *)(a1 + 212) |= 0x10000uLL;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_312;
        case 5u:
          *(void *)(a1 + 212) |= 0x1000000uLL;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v39);
          goto LABEL_312;
        case 6u:
          *(void *)(a1 + 212) |= 0x100000uLL;
          unint64_t v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v40);
          goto LABEL_312;
        case 7u:
          *(void *)(a1 + 212) |= 0x20uLL;
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          uint64_t v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_329;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v14 = v45++ > 8;
            }
            while (!v14);
LABEL_222:
            uint64_t v46 = 0;
            goto LABEL_329;
          }
          char v180 = 0;
          unsigned int v181 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)this + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              uint64_t v46 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v182 = v41 + 1;
              char v183 = *(unsigned char *)(v43 + v41);
              *((void *)this + 1) = v182;
              v46 |= (unint64_t)(v183 & 0x7F) << v180;
              if (v183 < 0)
              {
                v180 += 7;
                unint64_t v41 = v182;
                BOOL v14 = v181++ > 8;
                if (v14) {
                  goto LABEL_222;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v46 = 0;
              }
            }
            break;
          }
LABEL_329:
          *(void *)(a1 + 48) = v46;
          goto LABEL_313;
        case 8u:
          *(void *)(a1 + 212) |= 0x40000uLL;
          unint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v49);
          goto LABEL_312;
        case 9u:
          *(void *)(a1 + 212) |= 0x800000uLL;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v50);
          goto LABEL_312;
        case 0xAu:
          *(void *)(a1 + 212) |= 0x400000uLL;
          unint64_t v51 = *((void *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v51);
          goto LABEL_312;
        case 0xBu:
          *(void *)(a1 + 212) |= 0x80uLL;
          unint64_t v52 = *((void *)this + 1);
          unint64_t v53 = *((void *)this + 2);
          uint64_t v54 = *(void *)this;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            char v55 = 0;
            unsigned int v56 = 0;
            uint64_t v57 = 0;
            do
            {
              unint64_t v58 = v52 + 1;
              *((void *)this + 1) = v52 + 1;
              char v59 = *(unsigned char *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0) {
                goto LABEL_333;
              }
              v55 += 7;
              unint64_t v52 = v58;
              BOOL v14 = v56++ > 8;
            }
            while (!v14);
LABEL_229:
            uint64_t v57 = 0;
            goto LABEL_333;
          }
          char v184 = 0;
          unsigned int v185 = 0;
          uint64_t v57 = 0;
          if (v53 <= v52) {
            unint64_t v53 = *((void *)this + 1);
          }
          while (2)
          {
            if (v53 == v52)
            {
              uint64_t v57 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v186 = v52 + 1;
              char v187 = *(unsigned char *)(v54 + v52);
              *((void *)this + 1) = v186;
              v57 |= (unint64_t)(v187 & 0x7F) << v184;
              if (v187 < 0)
              {
                v184 += 7;
                unint64_t v52 = v186;
                BOOL v14 = v185++ > 8;
                if (v14) {
                  goto LABEL_229;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v57 = 0;
              }
            }
            break;
          }
LABEL_333:
          *(void *)(a1 + 64) = v57;
          goto LABEL_313;
        case 0xCu:
          *(void *)(a1 + 212) |= 0x20000uLL;
          unint64_t v60 = *((void *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v60);
          goto LABEL_312;
        case 0xDu:
          *(void *)(a1 + 212) |= 0x80000uLL;
          unint64_t v61 = *((void *)this + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v61);
          goto LABEL_312;
        case 0xEu:
          *(void *)(a1 + 212) |= 0x40000000uLL;
          unint64_t v62 = *((void *)this + 1);
          if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v62);
          goto LABEL_312;
        case 0xFu:
          *(void *)(a1 + 212) |= 0x200uLL;
          unint64_t v63 = *((void *)this + 1);
          unint64_t v64 = *((void *)this + 2);
          uint64_t v65 = *(void *)this;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            char v66 = 0;
            unsigned int v67 = 0;
            uint64_t v68 = 0;
            do
            {
              unint64_t v69 = v63 + 1;
              *((void *)this + 1) = v63 + 1;
              char v70 = *(unsigned char *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0) {
                goto LABEL_337;
              }
              v66 += 7;
              unint64_t v63 = v69;
              BOOL v14 = v67++ > 8;
            }
            while (!v14);
LABEL_236:
            uint64_t v68 = 0;
            goto LABEL_337;
          }
          char v188 = 0;
          unsigned int v189 = 0;
          uint64_t v68 = 0;
          if (v64 <= v63) {
            unint64_t v64 = *((void *)this + 1);
          }
          while (2)
          {
            if (v64 == v63)
            {
              uint64_t v68 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v190 = v63 + 1;
              char v191 = *(unsigned char *)(v65 + v63);
              *((void *)this + 1) = v190;
              v68 |= (unint64_t)(v191 & 0x7F) << v188;
              if (v191 < 0)
              {
                v188 += 7;
                unint64_t v63 = v190;
                BOOL v14 = v189++ > 8;
                if (v14) {
                  goto LABEL_236;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v68 = 0;
              }
            }
            break;
          }
LABEL_337:
          *(void *)(a1 + 80) = v68;
          goto LABEL_313;
        case 0x10u:
          *(void *)(a1 + 212) |= 0x2000000uLL;
          unint64_t v71 = *((void *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFFBLL || v71 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v71);
          goto LABEL_312;
        case 0x11u:
          *(void *)(a1 + 212) |= 0x200000000uLL;
          unint64_t v72 = *((void *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFFBLL || v72 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 188) = *(_DWORD *)(*(void *)this + v72);
          goto LABEL_312;
        case 0x12u:
          *(void *)(a1 + 212) |= 0x20000000uLL;
          unint64_t v73 = *((void *)this + 1);
          if (v73 > 0xFFFFFFFFFFFFFFFBLL || v73 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(void *)this + v73);
          goto LABEL_312;
        case 0x13u:
          *(void *)(a1 + 212) |= 0x100uLL;
          unint64_t v74 = *((void *)this + 1);
          unint64_t v75 = *((void *)this + 2);
          uint64_t v76 = *(void *)this;
          if (v74 <= 0xFFFFFFFFFFFFFFF5 && v74 + 10 <= v75)
          {
            char v77 = 0;
            unsigned int v78 = 0;
            uint64_t v79 = 0;
            do
            {
              unint64_t v80 = v74 + 1;
              *((void *)this + 1) = v74 + 1;
              char v81 = *(unsigned char *)(v76 + v74);
              v79 |= (unint64_t)(v81 & 0x7F) << v77;
              if ((v81 & 0x80) == 0) {
                goto LABEL_341;
              }
              v77 += 7;
              unint64_t v74 = v80;
              BOOL v14 = v78++ > 8;
            }
            while (!v14);
LABEL_243:
            uint64_t v79 = 0;
            goto LABEL_341;
          }
          char v192 = 0;
          unsigned int v193 = 0;
          uint64_t v79 = 0;
          if (v75 <= v74) {
            unint64_t v75 = *((void *)this + 1);
          }
          while (2)
          {
            if (v75 == v74)
            {
              uint64_t v79 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v194 = v74 + 1;
              char v195 = *(unsigned char *)(v76 + v74);
              *((void *)this + 1) = v194;
              v79 |= (unint64_t)(v195 & 0x7F) << v192;
              if (v195 < 0)
              {
                v192 += 7;
                unint64_t v74 = v194;
                BOOL v14 = v193++ > 8;
                if (v14) {
                  goto LABEL_243;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v79 = 0;
              }
            }
            break;
          }
LABEL_341:
          *(void *)(a1 + 72) = v79;
          goto LABEL_313;
        case 0x14u:
          *(void *)(a1 + 212) |= 0x8000000uLL;
          unint64_t v82 = *((void *)this + 1);
          if (v82 > 0xFFFFFFFFFFFFFFFBLL || v82 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v82);
          goto LABEL_312;
        case 0x15u:
          *(void *)(a1 + 212) |= 0x100000000uLL;
          unint64_t v83 = *((void *)this + 1);
          if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(void *)this + v83);
          goto LABEL_312;
        case 0x16u:
          *(void *)(a1 + 212) |= 0x80000000uLL;
          unint64_t v84 = *((void *)this + 1);
          if (v84 > 0xFFFFFFFFFFFFFFFBLL || v84 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(void *)this + v84);
          goto LABEL_312;
        case 0x17u:
          *(void *)(a1 + 212) |= 0x400uLL;
          unint64_t v85 = *((void *)this + 1);
          unint64_t v86 = *((void *)this + 2);
          uint64_t v87 = *(void *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)this + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_345;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }
            while (!v14);
LABEL_250:
            uint64_t v90 = 0;
            goto LABEL_345;
          }
          char v196 = 0;
          unsigned int v197 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)this + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              uint64_t v90 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v198 = v85 + 1;
              char v199 = *(unsigned char *)(v87 + v85);
              *((void *)this + 1) = v198;
              v90 |= (unint64_t)(v199 & 0x7F) << v196;
              if (v199 < 0)
              {
                v196 += 7;
                unint64_t v85 = v198;
                BOOL v14 = v197++ > 8;
                if (v14) {
                  goto LABEL_250;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v90 = 0;
              }
            }
            break;
          }
LABEL_345:
          *(void *)(a1 + 88) = v90;
          goto LABEL_313;
        case 0x18u:
          *(void *)(a1 + 212) |= 0x4000000uLL;
          unint64_t v93 = *((void *)this + 1);
          if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)this + v93);
          goto LABEL_312;
        case 0x19u:
          *(void *)(a1 + 212) |= 0x10000000uLL;
          unint64_t v94 = *((void *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(void *)this + v94);
          goto LABEL_312;
        case 0x1Au:
          *(void *)(a1 + 212) |= 0x2000uLL;
          unint64_t v95 = *((void *)this + 1);
          if (v95 > 0xFFFFFFFFFFFFFFFBLL || v95 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v95);
          goto LABEL_312;
        case 0x1Bu:
          *(void *)(a1 + 212) |= 0x8000uLL;
          unint64_t v96 = *((void *)this + 1);
          unint64_t v97 = *((void *)this + 2);
          uint64_t v98 = *(void *)this;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            char v99 = 0;
            unsigned int v100 = 0;
            uint64_t v101 = 0;
            do
            {
              unint64_t v102 = v96 + 1;
              *((void *)this + 1) = v96 + 1;
              char v103 = *(unsigned char *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0) {
                goto LABEL_377;
              }
              v99 += 7;
              unint64_t v96 = v102;
              BOOL v14 = v100++ > 8;
            }
            while (!v14);
LABEL_257:
            LODWORD(v101) = 0;
            goto LABEL_377;
          }
          char v200 = 0;
          unsigned int v201 = 0;
          uint64_t v101 = 0;
          if (v97 <= v96) {
            unint64_t v97 = *((void *)this + 1);
          }
          while (2)
          {
            if (v97 == v96)
            {
              LODWORD(v101) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v202 = v96 + 1;
              char v203 = *(unsigned char *)(v98 + v96);
              *((void *)this + 1) = v202;
              v101 |= (unint64_t)(v203 & 0x7F) << v200;
              if (v203 < 0)
              {
                v200 += 7;
                unint64_t v96 = v202;
                BOOL v14 = v201++ > 8;
                if (v14) {
                  goto LABEL_257;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v101) = 0;
              }
            }
            break;
          }
LABEL_377:
          *(_DWORD *)(a1 + 116) = v101;
          goto LABEL_313;
        case 0x1Cu:
          *(void *)(a1 + 212) |= 0x4000uLL;
          unint64_t v104 = *((void *)this + 1);
          unint64_t v105 = *((void *)this + 2);
          uint64_t v106 = *(void *)this;
          if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
          {
            char v107 = 0;
            unsigned int v108 = 0;
            uint64_t v109 = 0;
            do
            {
              unint64_t v110 = v104 + 1;
              *((void *)this + 1) = v104 + 1;
              char v111 = *(unsigned char *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0) {
                goto LABEL_350;
              }
              v107 += 7;
              unint64_t v104 = v110;
              BOOL v14 = v108++ > 8;
            }
            while (!v14);
LABEL_264:
            LODWORD(v109) = 0;
            goto LABEL_350;
          }
          char v204 = 0;
          unsigned int v205 = 0;
          uint64_t v109 = 0;
          if (v105 <= v104) {
            unint64_t v105 = *((void *)this + 1);
          }
          while (2)
          {
            if (v105 == v104)
            {
              LODWORD(v109) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v206 = v104 + 1;
              char v207 = *(unsigned char *)(v106 + v104);
              *((void *)this + 1) = v206;
              v109 |= (unint64_t)(v207 & 0x7F) << v204;
              if (v207 < 0)
              {
                v204 += 7;
                unint64_t v104 = v206;
                BOOL v14 = v205++ > 8;
                if (v14) {
                  goto LABEL_264;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v109) = 0;
              }
            }
            break;
          }
LABEL_350:
          *(_DWORD *)(a1 + 112) = v109;
          goto LABEL_313;
        case 0x1Du:
          *(void *)(a1 + 212) |= 0x10uLL;
          unint64_t v112 = *((void *)this + 1);
          unint64_t v113 = *((void *)this + 2);
          uint64_t v114 = *(void *)this;
          if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
          {
            char v115 = 0;
            unsigned int v116 = 0;
            uint64_t v117 = 0;
            do
            {
              unint64_t v118 = v112 + 1;
              *((void *)this + 1) = v112 + 1;
              char v119 = *(unsigned char *)(v114 + v112);
              v117 |= (unint64_t)(v119 & 0x7F) << v115;
              if ((v119 & 0x80) == 0) {
                goto LABEL_354;
              }
              v115 += 7;
              unint64_t v112 = v118;
              BOOL v14 = v116++ > 8;
            }
            while (!v14);
LABEL_271:
            uint64_t v117 = 0;
            goto LABEL_354;
          }
          char v208 = 0;
          unsigned int v209 = 0;
          uint64_t v117 = 0;
          if (v113 <= v112) {
            unint64_t v113 = *((void *)this + 1);
          }
          while (2)
          {
            if (v113 == v112)
            {
              uint64_t v117 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v210 = v112 + 1;
              char v211 = *(unsigned char *)(v114 + v112);
              *((void *)this + 1) = v210;
              v117 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                unint64_t v112 = v210;
                BOOL v14 = v209++ > 8;
                if (v14) {
                  goto LABEL_271;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v117 = 0;
              }
            }
            break;
          }
LABEL_354:
          *(void *)(a1 + 40) = v117;
          goto LABEL_313;
        case 0x1Eu:
          *(void *)(a1 + 212) |= 8uLL;
          unint64_t v120 = *((void *)this + 1);
          unint64_t v121 = *((void *)this + 2);
          uint64_t v122 = *(void *)this;
          if (v120 <= 0xFFFFFFFFFFFFFFF5 && v120 + 10 <= v121)
          {
            char v123 = 0;
            unsigned int v124 = 0;
            uint64_t v125 = 0;
            do
            {
              unint64_t v126 = v120 + 1;
              *((void *)this + 1) = v120 + 1;
              char v127 = *(unsigned char *)(v122 + v120);
              v125 |= (unint64_t)(v127 & 0x7F) << v123;
              if ((v127 & 0x80) == 0) {
                goto LABEL_358;
              }
              v123 += 7;
              unint64_t v120 = v126;
              BOOL v14 = v124++ > 8;
            }
            while (!v14);
LABEL_278:
            uint64_t v125 = 0;
            goto LABEL_358;
          }
          char v212 = 0;
          unsigned int v213 = 0;
          uint64_t v125 = 0;
          if (v121 <= v120) {
            unint64_t v121 = *((void *)this + 1);
          }
          while (2)
          {
            if (v121 == v120)
            {
              uint64_t v125 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v214 = v120 + 1;
              char v215 = *(unsigned char *)(v122 + v120);
              *((void *)this + 1) = v214;
              v125 |= (unint64_t)(v215 & 0x7F) << v212;
              if (v215 < 0)
              {
                v212 += 7;
                unint64_t v120 = v214;
                BOOL v14 = v213++ > 8;
                if (v14) {
                  goto LABEL_278;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v125 = 0;
              }
            }
            break;
          }
LABEL_358:
          *(void *)(a1 + 32) = v125;
          goto LABEL_313;
        case 0x1Fu:
          *(void *)(a1 + 212) |= 0x800000000uLL;
          unint64_t v128 = *((void *)this + 1);
          if (v128 > 0xFFFFFFFFFFFFFFFBLL || v128 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 196) = *(_DWORD *)(*(void *)this + v128);
          goto LABEL_312;
        case 0x20u:
          *(void *)(a1 + 212) |= 0x2000000000uLL;
          unint64_t v129 = *((void *)this + 1);
          if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 204) = *(_DWORD *)(*(void *)this + v129);
          goto LABEL_312;
        case 0x21u:
          *(void *)(a1 + 212) |= 0x1000000000uLL;
          unint64_t v130 = *((void *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2)) {
            goto LABEL_169;
          }
          *(_DWORD *)(a1 + 200) = *(_DWORD *)(*(void *)this + v130);
          goto LABEL_312;
        case 0x22u:
          *(void *)(a1 + 212) |= 0x400000000uLL;
          unint64_t v131 = *((void *)this + 1);
          if (v131 <= 0xFFFFFFFFFFFFFFFBLL && v131 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 192) = *(_DWORD *)(*(void *)this + v131);
LABEL_312:
            *((void *)this + 1) += 4;
          }
          else
          {
LABEL_169:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_313;
        case 0x23u:
          *(void *)(a1 + 212) |= 0x4000000000uLL;
          unint64_t v132 = *((void *)this + 1);
          if (v132 >= *((void *)this + 2))
          {
            BOOL v135 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v133 = v132 + 1;
            int v134 = *(unsigned __int8 *)(*(void *)this + v132);
            *((void *)this + 1) = v133;
            BOOL v135 = v134 != 0;
          }
          *(unsigned char *)(a1 + 208) = v135;
          goto LABEL_313;
        case 0x24u:
          *(void *)(a1 + 212) |= 0x8000000000uLL;
          unint64_t v136 = *((void *)this + 1);
          if (v136 >= *((void *)this + 2))
          {
            BOOL v139 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v137 = v136 + 1;
            int v138 = *(unsigned __int8 *)(*(void *)this + v136);
            *((void *)this + 1) = v137;
            BOOL v139 = v138 != 0;
          }
          *(unsigned char *)(a1 + 209) = v139;
          goto LABEL_313;
        case 0x25u:
          *(void *)(a1 + 212) |= 0x1000uLL;
          unint64_t v140 = *((void *)this + 1);
          unint64_t v141 = *((void *)this + 2);
          uint64_t v142 = *(void *)this;
          if (v140 <= 0xFFFFFFFFFFFFFFF5 && v140 + 10 <= v141)
          {
            char v143 = 0;
            unsigned int v144 = 0;
            uint64_t v145 = 0;
            do
            {
              unint64_t v146 = v140 + 1;
              *((void *)this + 1) = v140 + 1;
              char v147 = *(unsigned char *)(v142 + v140);
              v145 |= (unint64_t)(v147 & 0x7F) << v143;
              if ((v147 & 0x80) == 0) {
                goto LABEL_362;
              }
              v143 += 7;
              unint64_t v140 = v146;
              BOOL v14 = v144++ > 8;
            }
            while (!v14);
LABEL_289:
            LODWORD(v145) = 0;
            goto LABEL_362;
          }
          char v216 = 0;
          unsigned int v217 = 0;
          uint64_t v145 = 0;
          if (v141 <= v140) {
            unint64_t v141 = *((void *)this + 1);
          }
          while (2)
          {
            if (v141 == v140)
            {
              LODWORD(v145) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v218 = v140 + 1;
              char v219 = *(unsigned char *)(v142 + v140);
              *((void *)this + 1) = v218;
              v145 |= (unint64_t)(v219 & 0x7F) << v216;
              if (v219 < 0)
              {
                v216 += 7;
                unint64_t v140 = v218;
                BOOL v14 = v217++ > 8;
                if (v14) {
                  goto LABEL_289;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v145) = 0;
              }
            }
            break;
          }
LABEL_362:
          *(_DWORD *)(a1 + 104) = v145;
          goto LABEL_313;
        case 0x26u:
          *(void *)(a1 + 212) |= 4uLL;
          unint64_t v148 = *((void *)this + 1);
          unint64_t v149 = *((void *)this + 2);
          uint64_t v150 = *(void *)this;
          if (v148 <= 0xFFFFFFFFFFFFFFF5 && v148 + 10 <= v149)
          {
            char v151 = 0;
            unsigned int v152 = 0;
            uint64_t v153 = 0;
            do
            {
              unint64_t v154 = v148 + 1;
              *((void *)this + 1) = v148 + 1;
              char v155 = *(unsigned char *)(v150 + v148);
              v153 |= (unint64_t)(v155 & 0x7F) << v151;
              if ((v155 & 0x80) == 0) {
                goto LABEL_366;
              }
              v151 += 7;
              unint64_t v148 = v154;
              BOOL v14 = v152++ > 8;
            }
            while (!v14);
LABEL_296:
            uint64_t v153 = 0;
            goto LABEL_366;
          }
          char v220 = 0;
          unsigned int v221 = 0;
          uint64_t v153 = 0;
          if (v149 <= v148) {
            unint64_t v149 = *((void *)this + 1);
          }
          while (2)
          {
            if (v149 == v148)
            {
              uint64_t v153 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v222 = v148 + 1;
              char v223 = *(unsigned char *)(v150 + v148);
              *((void *)this + 1) = v222;
              v153 |= (unint64_t)(v223 & 0x7F) << v220;
              if (v223 < 0)
              {
                v220 += 7;
                unint64_t v148 = v222;
                BOOL v14 = v221++ > 8;
                if (v14) {
                  goto LABEL_296;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v153 = 0;
              }
            }
            break;
          }
LABEL_366:
          *(void *)(a1 + 24) = v153;
          goto LABEL_313;
        case 0x27u:
          *(void *)(a1 + 212) |= 2uLL;
          unint64_t v156 = *((void *)this + 1);
          unint64_t v157 = *((void *)this + 2);
          uint64_t v158 = *(void *)this;
          if (v156 <= 0xFFFFFFFFFFFFFFF5 && v156 + 10 <= v157)
          {
            char v159 = 0;
            unsigned int v160 = 0;
            uint64_t v161 = 0;
            do
            {
              unint64_t v162 = v156 + 1;
              *((void *)this + 1) = v156 + 1;
              char v163 = *(unsigned char *)(v158 + v156);
              v161 |= (unint64_t)(v163 & 0x7F) << v159;
              if ((v163 & 0x80) == 0) {
                goto LABEL_370;
              }
              v159 += 7;
              unint64_t v156 = v162;
              BOOL v14 = v160++ > 8;
            }
            while (!v14);
LABEL_303:
            uint64_t v161 = 0;
            goto LABEL_370;
          }
          char v224 = 0;
          unsigned int v225 = 0;
          uint64_t v161 = 0;
          if (v157 <= v156) {
            unint64_t v157 = *((void *)this + 1);
          }
          while (2)
          {
            if (v157 == v156)
            {
              uint64_t v161 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v226 = v156 + 1;
              char v227 = *(unsigned char *)(v158 + v156);
              *((void *)this + 1) = v226;
              v161 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                unint64_t v156 = v226;
                BOOL v14 = v225++ > 8;
                if (v14) {
                  goto LABEL_303;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v161 = 0;
              }
            }
            break;
          }
LABEL_370:
          *(void *)(a1 + 16) = v161;
          goto LABEL_313;
        case 0x28u:
          *(void *)(a1 + 212) |= 1uLL;
          unint64_t v164 = *((void *)this + 1);
          unint64_t v165 = *((void *)this + 2);
          uint64_t v166 = *(void *)this;
          if (v164 <= 0xFFFFFFFFFFFFFFF5 && v164 + 10 <= v165)
          {
            char v167 = 0;
            unsigned int v168 = 0;
            uint64_t v169 = 0;
            do
            {
              unint64_t v170 = v164 + 1;
              *((void *)this + 1) = v164 + 1;
              char v171 = *(unsigned char *)(v166 + v164);
              v169 |= (unint64_t)(v171 & 0x7F) << v167;
              if ((v171 & 0x80) == 0) {
                goto LABEL_374;
              }
              v167 += 7;
              unint64_t v164 = v170;
              BOOL v14 = v168++ > 8;
            }
            while (!v14);
LABEL_310:
            uint64_t v169 = 0;
            goto LABEL_374;
          }
          char v228 = 0;
          unsigned int v229 = 0;
          uint64_t v169 = 0;
          if (v165 <= v164) {
            unint64_t v165 = *((void *)this + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_313;
      }
      while (1)
      {
        if (v165 == v164)
        {
          uint64_t v169 = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_374;
        }
        unint64_t v230 = v164 + 1;
        char v231 = *(unsigned char *)(v166 + v164);
        *((void *)this + 1) = v230;
        v169 |= (unint64_t)(v231 & 0x7F) << v228;
        if ((v231 & 0x80) == 0) {
          break;
        }
        v228 += 7;
        unint64_t v164 = v230;
        BOOL v14 = v229++ > 8;
        if (v14) {
          goto LABEL_310;
        }
      }
      if (*((unsigned char *)this + 24)) {
        uint64_t v169 = 0;
      }
LABEL_374:
      *(void *)(a1 + 8) = v169;
LABEL_313:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B3458(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 212);
  if ((v4 & 0x800) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    uint64_t v4 = *(void *)(v3 + 212);
    if ((v4 & 0x200000) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_44;
    }
  }
  else if ((v4 & 0x200000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 152));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 148));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 176));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_16:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 188));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 164));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 184));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 180));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_24:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x4000) == 0)
  {
LABEL_29:
    if ((v4 & 0x10) == 0) {
      goto LABEL_30;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_30:
    if ((v4 & 8) == 0) {
      goto LABEL_31;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_31:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 196));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 204));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 200));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 192));
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 0x1000) == 0)
  {
LABEL_38:
    if ((v4 & 4) == 0) {
      goto LABEL_39;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_39:
    if ((v4 & 2) == 0) {
      goto LABEL_40;
    }
LABEL_80:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(void *)(v3 + 212) & 1) == 0) {
      return result;
    }
    goto LABEL_81;
  }
LABEL_79:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 212);
  if ((v4 & 2) != 0) {
    goto LABEL_80;
  }
LABEL_40:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_81:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903B38F0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCBC48;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1903B3918(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B3950(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if (v5)
  {
    PB::TextFormatter::format(this, "azimuthDeg", *(float *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 20) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "elevationDeg", *(float *)(a1 + 12));
  if ((*(unsigned char *)(a1 + 20) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "l1Cn0", *(float *)(a1 + 16));
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B39F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 20) |= 4u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
      }
      else if (v20 == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          goto LABEL_37;
        }
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
        {
LABEL_32:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_37;
        }
        *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
      }
      unint64_t v2 = *((void *)this + 1) + 4;
      *((void *)this + 1) = v2;
LABEL_37:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1903B3C10(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if ((v4 & 2) == 0)
  {
    if ((*(unsigned char *)(result + 20) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 20) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(result + 12));
  char v4 = *(unsigned char *)(v3 + 20);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_7:
  float v5 = *(float *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903B3C9C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC540;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1903B3CC4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B3CFC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "sessionType");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B3D78(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B4008(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

void *sub_1903B4074(void *result)
{
  *uint64_t result = &unk_1EDFCCEE0;
  result[1] = 0;
  return result;
}

void sub_1903B4098(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B40D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "type");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B4130(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B4368(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

void *sub_1903B4388(void *result)
{
  *uint64_t result = &unk_1EDFCF170;
  result[2] = 0;
  return result;
}

void sub_1903B43B0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B43E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "type");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B4464(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v26 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v27 = *(void *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v39 = v26++;
            char v40 = *(unsigned char *)(v27 + v39);
            *((void *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0) {
              break;
            }
            v37 += 7;
            BOOL v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v39 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)this + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v35 = v20++;
            char v36 = *(unsigned char *)(v21 + v35);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0) {
              break;
            }
            v33 += 7;
            BOOL v14 = v34++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v24 = 0;
          }
LABEL_59:
          unint64_t v3 = v35 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v3 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v3;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(void *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B4790(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903B47FC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCA48;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1903B4820(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCCA48;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903B48A0(PB::Base *a1)
{
  sub_1903B4820(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B48D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "motionState");
  }
  if (*(unsigned char *)(a1 + 24)) {
    PB::TextFormatter::format(this, "timestamp");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B4970(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2) {
        operator new();
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)this + 1);
          }
          while (1)
          {
            if (v21 == v20)
            {
              uint64_t v25 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v31 = v20 + 1;
            char v32 = *(unsigned char *)(v22 + v20);
            *((void *)this + 1) = v31;
            v25 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v20 = v31;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
LABEL_39:
              uint64_t v25 = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v25 = 0;
          }
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v26 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *(void *)(a1 + 16) = v25;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B4C78(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 24)) {
    uint64_t result = PB::Writer::writeVarInt(this);
  }
  int v4 = *(const PB::Base **)(v3 + 8);
  if (v4)
  {
    return PB::Writer::writeSubmessage(this, v4);
  }
  return result;
}

void sub_1903B4CE4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B4D1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "type");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B4D7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B4FB4(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903B4FD4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCEB50;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1903B4FFC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B5034(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "magnitudeRangeInertialVertical", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "maxAngleBetweenThighAndShinDeg", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "minAngleBetweenThighAndShinDeg", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "motionPlanarity", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "timeToReachMaxThighAndShinAngleThreshold", *(float *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    if ((*(unsigned char *)(a1 + 44) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timeToReachMinThighAndShinAngleThreshold", *(float *)(a1 + 36));
  char v5 = *(unsigned char *)(a1 + 44);
  if (v5) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "vm", *(float *)(a1 + 40));
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B5178(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 44) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_50;
        case 2u:
          *(unsigned char *)(a1 + 44) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 3u:
          *(unsigned char *)(a1 + 44) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 4u:
          *(unsigned char *)(a1 + 44) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 5u:
          *(unsigned char *)(a1 + 44) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 6u:
          *(unsigned char *)(a1 + 44) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 7u:
          *(unsigned char *)(a1 + 44) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 8u:
          *(unsigned char *)(a1 + 44) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
          {
LABEL_47:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_49:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_50:
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B54E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 44);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(result + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
    if ((*(unsigned char *)(v3 + 44) & 0x20) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_17:
  float v5 = *(float *)(v3 + 32);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903B5600(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD01A0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1903B5628(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B5660(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "maxPosterior", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "meanPosterior", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "minPosterior", *(float *)(a1 + 24));
  if (*(unsigned char *)(a1 + 28)) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B5724(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 28) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 28) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(unsigned char *)(a1 + 28) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(unsigned char *)(a1 + 28) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_38:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B59A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903B5A4C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD01D8;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1903B5A74(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B5AAC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "maxPosterior", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "meanPosterior", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "minPosterior", *(float *)(a1 + 24));
  if (*(unsigned char *)(a1 + 28)) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B5B70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 28) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 28) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(unsigned char *)(a1 + 28) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(unsigned char *)(a1 + 28) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_38:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B5DF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 28) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(this, v5);
}

void *sub_1903B5E98(void *result)
{
  *uint64_t result = &unk_1EDFCF1A8;
  result[2] = 0;
  return result;
}

void sub_1903B5EC0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B5EF8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "transitionType");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B5F74(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B6204(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903B6270(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB190;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1903B629C(void **a1)
{
  *a1 = &unk_1EDFCB190;
  unint64_t v2 = a1 + 2;
  sub_190347828(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_1903B62F8(void **a1)
{
  *a1 = &unk_1EDFCB190;
  uint64_t v3 = a1 + 2;
  sub_190347828(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x192FCC980]();
}

uint64_t sub_1903B6368(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 48)) {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  }
  char v5 = *(uint64_t **)(a1 + 16);
  uint64_t v6 = *(uint64_t **)(a1 + 24);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "joint");
  }
  if ((*(unsigned char *)(a1 + 48) & 2) != 0) {
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B6440(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *(unsigned char *)(a1 + 48) |= 2u;
        unint64_t v22 = *((void *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
          goto LABEL_30;
        }
        *(void *)(a1 + 40) = *(void *)(*(void *)this + v22);
LABEL_34:
        *((void *)this + 1) += 8;
        goto LABEL_35;
      }
      if (v20 == 1) {
        sub_1903B669C();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
LABEL_35:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    *(unsigned char *)(a1 + 48) |= 1u;
    unint64_t v21 = *((void *)this + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)this + 2))
    {
LABEL_30:
      *((unsigned char *)this + 24) = 1;
      goto LABEL_35;
    }
    *(void *)(a1 + 8) = *(void *)(*(void *)this + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

void sub_1903B669C()
{
}

void sub_1903B67BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190347EEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1903B6800(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base ***)(result + 16);
  char v5 = *(const PB::Base ***)(result + 24);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6);
  }
  char v7 = *(unsigned char *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
    char v7 = *(unsigned char *)(v3 + 48);
  }
  if (v7)
  {
    double v8 = *(double *)(v3 + 8);
    return PB::Writer::write(this, v8);
  }
  return result;
}

uint64_t sub_1903B6898(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC578;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1903B68C4(PB::Base *this)
{
  *(void *)this = &unk_1EDFCC578;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903B6928(PB::Base *a1)
{
  sub_1903B68C4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B6960(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (char *)(a1 + 8);
  *(void *)a1 = &unk_1EDFCC578;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  if ((*(unsigned char *)(a2 + 44) & 2) != 0)
  {
    int v5 = *(_DWORD *)(a2 + 36);
    *(unsigned char *)(a1 + 44) = 2;
    *(_DWORD *)(a1 + 36) = v5;
  }
  if (a1 != a2) {
    sub_190347BB4(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  char v6 = *(unsigned char *)(a2 + 44);
  if (v6)
  {
    int v7 = *(_DWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 44) |= 1u;
    *(_DWORD *)(a1 + 32) = v7;
    char v6 = *(unsigned char *)(a2 + 44);
  }
  if ((v6 & 4) != 0)
  {
    char v8 = *(unsigned char *)(a2 + 40);
    *(unsigned char *)(a1 + 44) |= 4u;
    *(unsigned char *)(a1 + 40) = v8;
  }
  return a1;
}

uint64_t sub_1903B6A24(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 44);
  if (v5)
  {
    PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 32));
    char v5 = *(unsigned char *)(a1 + 44);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "joint");
  }
  char v6 = *(float **)(a1 + 8);
  int v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "position", v8);
  }
  if ((*(unsigned char *)(a1 + 44) & 4) != 0) {
    PB::TextFormatter::format(this, "visible");
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903B6AF8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 44) |= 2u;
          unint64_t v22 = *((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
          uint64_t v24 = *(void *)this;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v28 = v22 + 1;
              *((void *)this + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_83;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v16 = v26++ > 8;
            }
            while (!v16);
LABEL_67:
            LODWORD(v27) = 0;
            goto LABEL_83;
          }
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)this + 1);
          }
          while (2)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v51 = v22 + 1;
              char v52 = *(unsigned char *)(v24 + v22);
              *((void *)this + 1) = v51;
              v27 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                unint64_t v22 = v51;
                BOOL v16 = v50++ > 8;
                if (v16) {
                  goto LABEL_67;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v27) = 0;
              }
            }
            break;
          }
LABEL_83:
          *(_DWORD *)(a1 + 36) = v27;
          goto LABEL_97;
        case 2u:
          if ((v13 & 7) == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v30 = *((void *)this + 1);
            unint64_t v31 = *((void *)this + 2);
            while (v30 < v31 && !*((unsigned char *)this + 24))
            {
              char v33 = *(char **)(a1 + 16);
              unint64_t v32 = *(void *)(a1 + 24);
              if ((unint64_t)v33 >= v32)
              {
                unint64_t v35 = (char *)*v8;
                uint64_t v36 = (v33 - (unsigned char *)*v8) >> 2;
                unint64_t v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 62) {
                  goto LABEL_107;
                }
                uint64_t v38 = v32 - (void)v35;
                if (v38 >> 1 > v37) {
                  unint64_t v37 = v38 >> 1;
                }
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v39 = v37;
                }
                if (v39)
                {
                  char v40 = (char *)sub_190347D04(v9, v39);
                  unint64_t v35 = *(char **)(a1 + 8);
                  char v33 = *(char **)(a1 + 16);
                }
                else
                {
                  char v40 = 0;
                }
                unint64_t v41 = &v40[4 * v36];
                *(_DWORD *)unint64_t v41 = 0;
                unsigned int v34 = v41 + 4;
                while (v33 != v35)
                {
                  int v42 = *((_DWORD *)v33 - 1);
                  v33 -= 4;
                  *((_DWORD *)v41 - 1) = v42;
                  v41 -= 4;
                }
                *(void *)(a1 + 8) = v41;
                *(void *)(a1 + 16) = v34;
                *(void *)(a1 + 24) = &v40[4 * v39];
                if (v35) {
                  operator delete(v35);
                }
              }
              else
              {
                *(_DWORD *)char v33 = 0;
                unsigned int v34 = v33 + 4;
              }
              *(void *)(a1 + 16) = v34;
              unint64_t v43 = *((void *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v34 - 1) = *(_DWORD *)(*(void *)this + v43);
              unint64_t v31 = *((void *)this + 2);
              unint64_t v30 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v30;
            }
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v54 = *(char **)(a1 + 16);
            unint64_t v53 = *(void *)(a1 + 24);
            if ((unint64_t)v54 >= v53)
            {
              unsigned int v56 = (char *)*v8;
              uint64_t v57 = (v54 - (unsigned char *)*v8) >> 2;
              unint64_t v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 62) {
LABEL_107:
              }
                sub_1903479E8();
              uint64_t v59 = v53 - (void)v56;
              if (v59 >> 1 > v58) {
                unint64_t v58 = v59 >> 1;
              }
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v60 = v58;
              }
              if (v60)
              {
                unint64_t v61 = (char *)sub_190347D04(v9, v60);
                unsigned int v56 = *(char **)(a1 + 8);
                uint64_t v54 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v61 = 0;
              }
              unint64_t v62 = &v61[4 * v57];
              *(_DWORD *)unint64_t v62 = 0;
              char v55 = v62 + 4;
              while (v54 != v56)
              {
                int v63 = *((_DWORD *)v54 - 1);
                v54 -= 4;
                *((_DWORD *)v62 - 1) = v63;
                v62 -= 4;
              }
              *(void *)(a1 + 8) = v62;
              *(void *)(a1 + 16) = v55;
              *(void *)(a1 + 24) = &v61[4 * v60];
              if (v56) {
                operator delete(v56);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v54 = 0;
              char v55 = v54 + 4;
            }
            *(void *)(a1 + 16) = v55;
            unint64_t v64 = *((void *)this + 1);
            if (v64 <= 0xFFFFFFFFFFFFFFFBLL && v64 + 4 <= *((void *)this + 2))
            {
              *(v55 - 1) = *(_DWORD *)(*(void *)this + v64);
LABEL_96:
              *((void *)this + 1) += 4;
            }
            else
            {
LABEL_94:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_97:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 3u:
          *(unsigned char *)(a1 + 44) |= 1u;
          unint64_t v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2)) {
            goto LABEL_94;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v44);
          goto LABEL_96;
        case 4u:
          *(unsigned char *)(a1 + 44) |= 4u;
          unint64_t v45 = *((void *)this + 1);
          if (v45 >= *((void *)this + 2))
          {
            BOOL v48 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v46 = v45 + 1;
            int v47 = *(unsigned __int8 *)(*(void *)this + v45);
            *((void *)this + 1) = v46;
            BOOL v48 = v47 != 0;
          }
          *(unsigned char *)(a1 + 40) = v48;
          goto LABEL_97;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_97;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B7000(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if ((*(unsigned char *)(result + 44) & 2) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this);
  }
  int v4 = *(float **)(v3 + 8);
  char v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    uint64_t result = PB::Writer::write(this, v6);
  }
  char v7 = *(unsigned char *)(v3 + 44);
  if (v7)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
    char v7 = *(unsigned char *)(v3 + 44);
  }
  if ((v7 & 4) != 0)
  {
    return PB::Writer::write(this);
  }
  return result;
}

void *sub_1903B70B0(void *result)
{
  *uint64_t result = &unk_1EDFCB1C8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_1903B70D4(void **a1)
{
  *a1 = &unk_1EDFCB1C8;
  unint64_t v2 = a1 + 1;
  sub_190347828(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_1903B7130(void **a1)
{
  *a1 = &unk_1EDFCB1C8;
  uint64_t v3 = a1 + 1;
  sub_190347828(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x192FCC980]();
}

uint64_t sub_1903B71A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(uint64_t **)(a1 + 8);
  float v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "joint");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B7238(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_1903B73F4();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_1903B73F4()
{
}

void sub_1903B751C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190347EEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1903B7560(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5))
    char v5 = *v2++;
  return result;
}

uint64_t sub_1903B75AC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCA80;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1903B75D8(void **a1)
{
  *a1 = &unk_1EDFCCA80;
  unint64_t v2 = a1 + 2;
  sub_190347828(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_1903B7634(void **a1)
{
  *a1 = &unk_1EDFCCA80;
  unint64_t v3 = a1 + 2;
  sub_190347828(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x192FCC980]();
}

uint64_t sub_1903B76A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 48)) {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  }
  char v5 = *(uint64_t **)(a1 + 16);
  float v6 = *(uint64_t **)(a1 + 24);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "joint");
  }
  if ((*(unsigned char *)(a1 + 48) & 2) != 0) {
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B777C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *(unsigned char *)(a1 + 48) |= 2u;
        unint64_t v22 = *((void *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
          goto LABEL_30;
        }
        *(void *)(a1 + 40) = *(void *)(*(void *)this + v22);
LABEL_34:
        *((void *)this + 1) += 8;
        goto LABEL_35;
      }
      if (v20 == 1) {
        sub_1903B79D8();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
LABEL_35:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    *(unsigned char *)(a1 + 48) |= 1u;
    unint64_t v21 = *((void *)this + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)this + 2))
    {
LABEL_30:
      *((unsigned char *)this + 24) = 1;
      goto LABEL_35;
    }
    *(void *)(a1 + 8) = *(void *)(*(void *)this + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

void sub_1903B79D8()
{
}

void sub_1903B7AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190347EEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1903B7B3C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base ***)(result + 16);
  char v5 = *(const PB::Base ***)(result + 24);
  while (v4 != v5)
  {
    float v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6);
  }
  char v7 = *(unsigned char *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
    char v7 = *(unsigned char *)(v3 + 48);
  }
  if (v7)
  {
    double v8 = *(double *)(v3 + 8);
    return PB::Writer::write(this, v8);
  }
  return result;
}

double sub_1903B7BD4(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCE258;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_1903B7C00(PB::Base *this)
{
  *(void *)this = &unk_1EDFCE258;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903B7C64(PB::Base *a1)
{
  sub_1903B7C00(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B7C9C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDFCE258;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v3 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  if (*(unsigned char *)(a2 + 36))
  {
    int v4 = *(_DWORD *)(a2 + 32);
    *(unsigned char *)(a1 + 36) = 1;
    *(_DWORD *)(a1 + 32) = v4;
  }
  if (a1 != a2) {
    sub_190347BB4(v3, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t sub_1903B7D24(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 36)) {
    PB::TextFormatter::format(this, "joint");
  }
  char v5 = *(float **)(a1 + 8);
  float v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "position", v7);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903B7DB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2)
      {
        if ((v13 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v30 = *((void *)this + 1);
          unint64_t v31 = *((void *)this + 2);
          while (v30 < v31 && !*((unsigned char *)this + 24))
          {
            char v33 = *(char **)(a1 + 16);
            unint64_t v32 = *(void *)(a1 + 24);
            if ((unint64_t)v33 >= v32)
            {
              unint64_t v35 = (char *)*v8;
              uint64_t v36 = (v33 - (unsigned char *)*v8) >> 2;
              unint64_t v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 62) {
                goto LABEL_100;
              }
              uint64_t v38 = v32 - (void)v35;
              if (v38 >> 1 > v37) {
                unint64_t v37 = v38 >> 1;
              }
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v39 = v37;
              }
              if (v39)
              {
                char v40 = (char *)sub_190347D04(v9, v39);
                unint64_t v35 = *(char **)(a1 + 8);
                char v33 = *(char **)(a1 + 16);
              }
              else
              {
                char v40 = 0;
              }
              unint64_t v41 = &v40[4 * v36];
              *(_DWORD *)unint64_t v41 = 0;
              unsigned int v34 = v41 + 4;
              while (v33 != v35)
              {
                int v42 = *((_DWORD *)v33 - 1);
                v33 -= 4;
                *((_DWORD *)v41 - 1) = v42;
                v41 -= 4;
              }
              *(void *)(a1 + 8) = v41;
              *(void *)(a1 + 16) = v34;
              *(void *)(a1 + 24) = &v40[4 * v39];
              if (v35) {
                operator delete(v35);
              }
            }
            else
            {
              *(_DWORD *)char v33 = 0;
              unsigned int v34 = v33 + 4;
            }
            *(void *)(a1 + 16) = v34;
            unint64_t v43 = *((void *)this + 1);
            if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2))
            {
              *((unsigned char *)this + 24) = 1;
              break;
            }
            *(v34 - 1) = *(_DWORD *)(*(void *)this + v43);
            unint64_t v31 = *((void *)this + 2);
            unint64_t v30 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v30;
          }
          PB::Reader::recallMark();
        }
        else
        {
          char v49 = *(char **)(a1 + 16);
          unint64_t v48 = *(void *)(a1 + 24);
          if ((unint64_t)v49 >= v48)
          {
            unint64_t v51 = (char *)*v8;
            uint64_t v52 = (v49 - (unsigned char *)*v8) >> 2;
            unint64_t v53 = v52 + 1;
            if ((unint64_t)(v52 + 1) >> 62) {
LABEL_100:
            }
              sub_1903479E8();
            uint64_t v54 = v48 - (void)v51;
            if (v54 >> 1 > v53) {
              unint64_t v53 = v54 >> 1;
            }
            if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v55 = v53;
            }
            if (v55)
            {
              unsigned int v56 = (char *)sub_190347D04(v9, v55);
              unint64_t v51 = *(char **)(a1 + 8);
              char v49 = *(char **)(a1 + 16);
            }
            else
            {
              unsigned int v56 = 0;
            }
            uint64_t v57 = &v56[4 * v52];
            *(_DWORD *)uint64_t v57 = 0;
            unsigned int v50 = v57 + 4;
            while (v49 != v51)
            {
              int v58 = *((_DWORD *)v49 - 1);
              v49 -= 4;
              *((_DWORD *)v57 - 1) = v58;
              v57 -= 4;
            }
            *(void *)(a1 + 8) = v57;
            *(void *)(a1 + 16) = v50;
            *(void *)(a1 + 24) = &v56[4 * v55];
            if (v51) {
              operator delete(v51);
            }
          }
          else
          {
            *(_DWORD *)char v49 = 0;
            unsigned int v50 = v49 + 4;
          }
          *(void *)(a1 + 16) = v50;
          unint64_t v59 = *((void *)this + 1);
          if (v59 <= 0xFFFFFFFFFFFFFFFBLL && v59 + 4 <= *((void *)this + 2))
          {
            *(v50 - 1) = *(_DWORD *)(*(void *)this + v59);
            *((void *)this + 1) += 4;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
        }
      }
      else if ((v13 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 36) |= 1u;
        unint64_t v22 = *((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        uint64_t v24 = *(void *)this;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)this + 1);
          }
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_77;
            }
            unint64_t v46 = v22 + 1;
            char v47 = *(unsigned char *)(v24 + v22);
            *((void *)this + 1) = v46;
            v27 |= (unint64_t)(v47 & 0x7F) << v44;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v44 += 7;
            unint64_t v22 = v46;
            BOOL v16 = v45++ > 8;
            if (v16)
            {
LABEL_63:
              LODWORD(v27) = 0;
              goto LABEL_77;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v27) = 0;
          }
        }
        else
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          while (1)
          {
            unint64_t v28 = v22 + 1;
            *((void *)this + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v16 = v26++ > 8;
            if (v16) {
              goto LABEL_63;
            }
          }
        }
LABEL_77:
        *(_DWORD *)(a1 + 32) = v27;
      }
      else if ((PB::Reader::skip(this) & 1) == 0)
      {
        return 0;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B8218(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 36)) {
    double result = PB::Writer::writeVarInt(this);
  }
  char v5 = *(float **)(v3 + 8);
  int v4 = *(float **)(v3 + 16);
  while (v5 != v4)
  {
    float v6 = *v5++;
    double result = PB::Writer::write(this, v6);
  }
  return result;
}

uint64_t sub_1903B827C(uint64_t result)
{
  *(void *)double result = &unk_1EDFCDC70;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1903B82A8(void **a1)
{
  *a1 = &unk_1EDFCDC70;
  unint64_t v2 = a1 + 2;
  sub_190347828(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_1903B8304(void **a1)
{
  *a1 = &unk_1EDFCDC70;
  uint64_t v3 = a1 + 2;
  sub_190347828(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x192FCC980]();
}

uint64_t sub_1903B8374(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 48)) {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  }
  char v5 = *(uint64_t **)(a1 + 16);
  float v6 = *(uint64_t **)(a1 + 24);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "joint");
  }
  if ((*(unsigned char *)(a1 + 48) & 2) != 0) {
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 40));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B844C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *(unsigned char *)(a1 + 48) |= 2u;
        unint64_t v22 = *((void *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
          goto LABEL_30;
        }
        *(void *)(a1 + 40) = *(void *)(*(void *)this + v22);
LABEL_34:
        *((void *)this + 1) += 8;
        goto LABEL_35;
      }
      if (v20 == 1) {
        sub_1903B73F4();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
LABEL_35:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    *(unsigned char *)(a1 + 48) |= 1u;
    unint64_t v21 = *((void *)this + 1);
    if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)this + 2))
    {
LABEL_30:
      *((unsigned char *)this + 24) = 1;
      goto LABEL_35;
    }
    *(void *)(a1 + 8) = *(void *)(*(void *)this + v21);
    goto LABEL_34;
  }
  return v4 == 0;
}

uint64_t sub_1903B86A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base ***)(result + 16);
  char v5 = *(const PB::Base ***)(result + 24);
  while (v4 != v5)
  {
    float v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6);
  }
  char v7 = *(unsigned char *)(v3 + 48);
  if ((v7 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
    char v7 = *(unsigned char *)(v3 + 48);
  }
  if (v7)
  {
    double v8 = *(double *)(v3 + 8);
    return PB::Writer::write(this, v8);
  }
  return result;
}

double sub_1903B8740(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCBC80;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return result;
}

void sub_1903B8774(PB::Base *this)
{
  *(void *)this = &unk_1EDFCBC80;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1903B87E8(PB::Base *a1)
{
  sub_1903B8774(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B8820(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1EDFCBC80;
  *(_OWORD *)(a1 + 8) = 0u;
  int v4 = (char *)(a1 + 8);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  if (*(unsigned char *)(a2 + 60))
  {
    int v5 = *(_DWORD *)(a2 + 56);
    *(unsigned char *)(a1 + 60) = 1;
    *(_DWORD *)(a1 + 56) = v5;
  }
  if (a1 != a2)
  {
    sub_190347BB4(v4, *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
    sub_190347BB4((char *)(a1 + 32), *(char **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  }
  return a1;
}

uint64_t sub_1903B88C4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 60)) {
    PB::TextFormatter::format(this, "joint");
  }
  int v5 = *(float **)(a1 + 8);
  float v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "position", v7);
  }
  double v8 = *(float **)(a1 + 32);
  char v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "quaternion", v10);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903B898C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    float v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 != 2)
        {
          char v70 = *(char **)(a1 + 16);
          unint64_t v69 = *(void *)(a1 + 24);
          if ((unint64_t)v70 >= v69)
          {
            char v77 = (char *)*v10;
            uint64_t v78 = (v70 - (unsigned char *)*v10) >> 2;
            unint64_t v79 = v78 + 1;
            if ((unint64_t)(v78 + 1) >> 62) {
LABEL_144:
            }
              sub_1903479E8();
            uint64_t v80 = v69 - (void)v77;
            if (v80 >> 1 > v79) {
              unint64_t v79 = v80 >> 1;
            }
            if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v81 = v79;
            }
            if (v81)
            {
              unint64_t v82 = (char *)sub_190347D04(v11, v81);
              char v77 = *(char **)(a1 + 8);
              char v70 = *(char **)(a1 + 16);
            }
            else
            {
              unint64_t v82 = 0;
            }
            unint64_t v85 = &v82[4 * v78];
            *(_DWORD *)unint64_t v85 = 0;
            uint64_t v68 = v85 + 4;
            while (v70 != v77)
            {
              int v86 = *((_DWORD *)v70 - 1);
              v70 -= 4;
              *((_DWORD *)v85 - 1) = v86;
              v85 -= 4;
            }
            *(void *)(a1 + 8) = v85;
            *(void *)(a1 + 16) = v68;
            *(void *)(a1 + 24) = &v82[4 * v81];
            if (v77) {
              operator delete(v77);
            }
          }
          else
          {
            *(_DWORD *)char v70 = 0;
            uint64_t v68 = v70 + 4;
          }
          *(void *)(a1 + 16) = v68;
LABEL_129:
          unint64_t v87 = *((void *)this + 1);
          if (v87 <= 0xFFFFFFFFFFFFFFFBLL && v87 + 4 <= *((void *)this + 2))
          {
            *(v68 - 1) = *(_DWORD *)(*(void *)this + v87);
            *((void *)this + 1) += 4;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_133;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v48 = *((void *)this + 1);
        unint64_t v49 = *((void *)this + 2);
        while (v48 < v49 && !*((unsigned char *)this + 24))
        {
          unint64_t v51 = *(char **)(a1 + 16);
          unint64_t v50 = *(void *)(a1 + 24);
          if ((unint64_t)v51 >= v50)
          {
            unint64_t v53 = (char *)*v10;
            uint64_t v54 = (v51 - (unsigned char *)*v10) >> 2;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 62) {
              goto LABEL_144;
            }
            uint64_t v56 = v50 - (void)v53;
            if (v56 >> 1 > v55) {
              unint64_t v55 = v56 >> 1;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57)
            {
              int v58 = (char *)sub_190347D04(v11, v57);
              unint64_t v53 = *(char **)(a1 + 8);
              unint64_t v51 = *(char **)(a1 + 16);
            }
            else
            {
              int v58 = 0;
            }
            unint64_t v59 = &v58[4 * v54];
            *(_DWORD *)unint64_t v59 = 0;
            uint64_t v52 = v59 + 4;
            while (v51 != v53)
            {
              int v60 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *((_DWORD *)v59 - 1) = v60;
              v59 -= 4;
            }
            *(void *)(a1 + 8) = v59;
            *(void *)(a1 + 16) = v52;
            *(void *)(a1 + 24) = &v58[4 * v57];
            if (v53) {
              operator delete(v53);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v51 = 0;
            uint64_t v52 = v51 + 4;
          }
          *(void *)(a1 + 16) = v52;
          unint64_t v61 = *((void *)this + 1);
          if (v61 > 0xFFFFFFFFFFFFFFFBLL || v61 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(v52 - 1) = *(_DWORD *)(*(void *)this + v61);
          unint64_t v49 = *((void *)this + 2);
          unint64_t v48 = *((void *)this + 1) + 4;
          *((void *)this + 1) = v48;
        }
LABEL_94:
        PB::Reader::recallMark();
        goto LABEL_133;
      }
      if (v25 == 1)
      {
        *(unsigned char *)(a1 + 60) |= 1u;
        unint64_t v26 = *((void *)this + 1);
        unint64_t v27 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v27)
        {
          char v62 = 0;
          unsigned int v63 = 0;
          uint64_t v31 = 0;
          if (v27 <= v26) {
            unint64_t v27 = *((void *)this + 1);
          }
          while (1)
          {
            if (v27 == v26)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_114;
            }
            unint64_t v64 = v26 + 1;
            char v65 = *(unsigned char *)(v28 + v26);
            *((void *)this + 1) = v64;
            v31 |= (unint64_t)(v65 & 0x7F) << v62;
            if ((v65 & 0x80) == 0) {
              break;
            }
            v62 += 7;
            unint64_t v26 = v64;
            BOOL v18 = v63++ > 8;
            if (v18)
            {
LABEL_88:
              LODWORD(v31) = 0;
              goto LABEL_114;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v31) = 0;
          }
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v32 = v26 + 1;
            *((void *)this + 1) = v26 + 1;
            char v33 = *(unsigned char *)(v28 + v26);
            v31 |= (unint64_t)(v33 & 0x7F) << v29;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v26 = v32;
            BOOL v18 = v30++ > 8;
            if (v18) {
              goto LABEL_88;
            }
          }
        }
LABEL_114:
        *(_DWORD *)(a1 + 56) = v31;
      }
      else if ((PB::Reader::skip(this) & 1) == 0)
      {
        return 0;
      }
LABEL_133:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    if (v24 != 2)
    {
      unsigned int v67 = *(char **)(a1 + 40);
      unint64_t v66 = *(void *)(a1 + 48);
      if ((unint64_t)v67 >= v66)
      {
        unint64_t v71 = (char *)*v8;
        uint64_t v72 = (v67 - (unsigned char *)*v8) >> 2;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 62) {
LABEL_143:
        }
          sub_1903479E8();
        uint64_t v74 = v66 - (void)v71;
        if (v74 >> 1 > v73) {
          unint64_t v73 = v74 >> 1;
        }
        if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v75 = v73;
        }
        if (v75)
        {
          uint64_t v76 = (char *)sub_190347D04(v9, v75);
          unint64_t v71 = *(char **)(a1 + 32);
          unsigned int v67 = *(char **)(a1 + 40);
        }
        else
        {
          uint64_t v76 = 0;
        }
        unint64_t v83 = &v76[4 * v72];
        *(_DWORD *)unint64_t v83 = 0;
        uint64_t v68 = v83 + 4;
        while (v67 != v71)
        {
          int v84 = *((_DWORD *)v67 - 1);
          v67 -= 4;
          *((_DWORD *)v83 - 1) = v84;
          v83 -= 4;
        }
        *(void *)(a1 + 32) = v83;
        *(void *)(a1 + 40) = v68;
        *(void *)(a1 + 48) = &v76[4 * v75];
        if (v71) {
          operator delete(v71);
        }
      }
      else
      {
        *(_DWORD *)unsigned int v67 = 0;
        uint64_t v68 = v67 + 4;
      }
      *(void *)(a1 + 40) = v68;
      goto LABEL_129;
    }
    if (PB::Reader::placeMark()) {
      return 0;
    }
    unint64_t v34 = *((void *)this + 1);
    unint64_t v35 = *((void *)this + 2);
    while (v34 < v35 && !*((unsigned char *)this + 24))
    {
      unint64_t v37 = *(char **)(a1 + 40);
      unint64_t v36 = *(void *)(a1 + 48);
      if ((unint64_t)v37 >= v36)
      {
        unint64_t v39 = (char *)*v8;
        uint64_t v40 = (v37 - (unsigned char *)*v8) >> 2;
        unint64_t v41 = v40 + 1;
        if ((unint64_t)(v40 + 1) >> 62) {
          goto LABEL_143;
        }
        uint64_t v42 = v36 - (void)v39;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          char v44 = (char *)sub_190347D04(v9, v43);
          unint64_t v39 = *(char **)(a1 + 32);
          unint64_t v37 = *(char **)(a1 + 40);
        }
        else
        {
          char v44 = 0;
        }
        unsigned int v45 = &v44[4 * v40];
        *(_DWORD *)unsigned int v45 = 0;
        uint64_t v38 = v45 + 4;
        while (v37 != v39)
        {
          int v46 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        *(void *)(a1 + 32) = v45;
        *(void *)(a1 + 40) = v38;
        *(void *)(a1 + 48) = &v44[4 * v43];
        if (v39) {
          operator delete(v39);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v37 = 0;
        uint64_t v38 = v37 + 4;
      }
      *(void *)(a1 + 40) = v38;
      unint64_t v47 = *((void *)this + 1);
      if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)this + 2))
      {
LABEL_93:
        *((unsigned char *)this + 24) = 1;
        goto LABEL_94;
      }
      *(v38 - 1) = *(_DWORD *)(*(void *)this + v47);
      unint64_t v35 = *((void *)this + 2);
      unint64_t v34 = *((void *)this + 1) + 4;
      *((void *)this + 1) = v34;
    }
    goto LABEL_94;
  }
  return v4 == 0;
}

uint64_t sub_1903B8FAC(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if (*(unsigned char *)(result + 60)) {
    double result = PB::Writer::writeVarInt(this);
  }
  int v4 = (float *)v3[1];
  int v5 = (float *)v3[2];
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  double v8 = (float *)v3[4];
  float v7 = (float *)v3[5];
  while (v8 != v7)
  {
    float v9 = *v8++;
    double result = PB::Writer::write(this, v9);
  }
  return result;
}

uint64_t sub_1903B9030(uint64_t result)
{
  *(void *)double result = &unk_1EDFCD378;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1903B9058(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B9090(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "rms", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B910C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v24 = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(void *)(a1 + 8) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 4;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B939C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

void *sub_1903B9408(void *result)
{
  *uint64_t result = &unk_1EDFCB778;
  result[2] = 0;
  return result;
}

void sub_1903B9430(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B9468(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "event");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B94E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903B9774(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(this, v5);
  }
  return result;
}

uint64_t sub_1903B97E0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC5B0;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1903B9808(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903B9840(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "isBlockoutPeriodLow");
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isBlockoutPeriodVeryLow");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "isSampleRecent");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "percentLow", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "percentOK", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "percentVeryLow", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "totalValidDuration", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "userHasOnboarded");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "value");
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "writtenToHealthKit");
LABEL_13:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903B99E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_79;
                  }
                  unint64_t v39 = v21++;
                  char v40 = *(unsigned char *)(v22 + v39);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_78:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_78;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_79;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_79:
              *(_DWORD *)(a1 + 48) = v25;
LABEL_80:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 55) = v28;
              goto LABEL_80;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 56) = v30;
              goto LABEL_80;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v32 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v32 = v31 != 0;
              }
              *(unsigned char *)(a1 + 52) = v32;
              goto LABEL_80;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 53) = v34;
              goto LABEL_80;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *(unsigned char *)(a1 + 54) = v36;
              goto LABEL_80;
            case 8u:
              *(_WORD *)(a1 + 60) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 60) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
LABEL_74:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_55:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_80;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_80;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903B9EF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
    if ((*(_WORD *)(v3 + 60) & 0x10) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 40);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903BA05C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF988;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1903BA084(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903BA0BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if (v5)
  {
    PB::TextFormatter::format(this, "intermediateBoutsAsymmetryPercentageCv", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "intermediateBoutsAsymmetryPercentageMedian", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "intermediateBoutsDoubleSupportPercentageMedian", *(double *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "intermediateBoutsDoubleSupportPercentageStd", *(double *)(a1 + 32));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903BA180(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 40) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_37:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903BA3F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
      if ((*(unsigned char *)(v3 + 40) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 32);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903BA4A0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD00C0;
  *(_DWORD *)(result + 176) = 0;
  return result;
}

void sub_1903BA4C8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903BA500(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 176);
  if (v5)
  {
    PB::TextFormatter::format(this, "allBoutsBoutDurationSecCv", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 176);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_28;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "allBoutsBoutDurationSecMedian", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "allBoutsCycleTimeCv", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "intermediateBoutsCycleTimeCv", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "intermediateBoutsCycleTimeMedian", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "intermediateBoutsDoubleSupportPercentageMedian", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "intermediateBoutsStepLengthCv", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "intermediateBoutsStepLengthMedian", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "intermediateBoutsStepLengthMedianHeightnorm", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedCv", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedMedian", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedMedianSqrtheightnorm", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "longBoutsWalkingSpeedCountRatioLog", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "shortBoutsCycleTimeCv", *(double *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "shortBoutsCycleTimeMedian", *(double *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "shortBoutsDoubleSupportPercentageMedian", *(double *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "shortBoutsStepLengthCv", *(double *)(a1 + 136));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "shortBoutsStepLengthMedianHeightnorm", *(double *)(a1 + 144));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "shortBoutsWalkingSpeedCv", *(double *)(a1 + 152));
  int v5 = *(_DWORD *)(a1 + 176);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_45:
  PB::TextFormatter::format(this, "shortBoutsWalkingSpeedMedian", *(double *)(a1 + 160));
  if ((*(_DWORD *)(a1 + 176) & 0x100000) != 0) {
LABEL_22:
  }
    PB::TextFormatter::format(this, "shortBoutsWalkingSpeedMedianSqrtheightnorm", *(double *)(a1 + 168));
LABEL_23:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903BA7E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 176) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 2u:
          *(_DWORD *)(a1 + 176) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 3u:
          *(_DWORD *)(a1 + 176) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 4u:
          *(_DWORD *)(a1 + 176) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 5u:
          *(_DWORD *)(a1 + 176) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 6u:
          *(_DWORD *)(a1 + 176) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 7u:
          *(_DWORD *)(a1 + 176) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 8u:
          *(_DWORD *)(a1 + 176) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 9u:
          *(_DWORD *)(a1 + 176) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0xAu:
          *(_DWORD *)(a1 + 176) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0xBu:
          *(_DWORD *)(a1 + 176) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0xCu:
          *(_DWORD *)(a1 + 176) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0xDu:
          *(_DWORD *)(a1 + 176) |= 0x80000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0xEu:
          *(_DWORD *)(a1 + 176) |= 0x100000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0xFu:
          *(_DWORD *)(a1 + 176) |= 0x20000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0x10u:
          *(_DWORD *)(a1 + 176) |= 0x4000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0x11u:
          *(_DWORD *)(a1 + 176) |= 0x8000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0x12u:
          *(_DWORD *)(a1 + 176) |= 0x40000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0x13u:
          *(_DWORD *)(a1 + 176) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0x14u:
          *(_DWORD *)(a1 + 176) |= 0x10000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_86;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 0x15u:
          *(_DWORD *)(a1 + 176) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_86:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
LABEL_88:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903BAE58(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 176);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    int v4 = *(_DWORD *)(v3 + 176);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100) == 0)
  {
LABEL_13:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x80000) == 0)
  {
LABEL_14:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x100000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x8000) == 0)
  {
LABEL_18:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x40000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 152));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x2000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
LABEL_42:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136));
    if ((*(_DWORD *)(v3 + 176) & 0x1000) == 0) {
      return result;
    }
    goto LABEL_43;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 176);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_42;
  }
LABEL_21:
  if ((v4 & 0x1000) == 0) {
    return result;
  }
LABEL_43:
  double v5 = *(double *)(v3 + 104);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903BB0DC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCFD78;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_1903BB104(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903BB13C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 88);
  if (v5)
  {
    PB::TextFormatter::format(this, "asymmetryPercentageMedian", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "asymmetryPercentageStd", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "doubleSupportPercentageMedian", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "height", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "intermediateBoutsStepLengthQ95Heightnorm", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "intermediateBoutsWalkingSpeedQ95Sqrtheightnorm", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "modelOutputBalancePrior", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "stepLengthMedian", *(double *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(this, "stepLengthXWalkingSpeedMedian", *(double *)(a1 + 72));
  if ((*(_WORD *)(a1 + 88) & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "walkingSpeedMedian", *(double *)(a1 + 80));
LABEL_12:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903BB2C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 88) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 2u:
          *(_WORD *)(a1 + 88) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 3u:
          *(_WORD *)(a1 + 88) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 4u:
          *(_WORD *)(a1 + 88) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 5u:
          *(_WORD *)(a1 + 88) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 6u:
          *(_WORD *)(a1 + 88) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 7u:
          *(_WORD *)(a1 + 88) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 8u:
          *(_WORD *)(a1 + 88) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 9u:
          *(_WORD *)(a1 + 88) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_53;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 0xAu:
          *(_WORD *)(a1 + 88) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
LABEL_55:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_53:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903BB6A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 88);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x10) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
    if ((*(_WORD *)(v3 + 88) & 0x20) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x10) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_21:
  double v5 = *(double *)(v3 + 48);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903BB7F0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC31F0;
  *(_DWORD *)(result + 248) = 0;
  return result;
}

void sub_1903BB818(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903BB850(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 248);
  if (v5)
  {
    PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApCv", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 248);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApMean", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApMedian", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApQ5", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityApQ95", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlCv", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlMean", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlMedian", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlQ5", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityMlQ95", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtCv", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtMean", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtMedian", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtQ5", *(double *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "allBoutsStepIndexOfHarmonicityVtQ95", *(double *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApCv", *(double *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApMean", *(double *)(a1 + 136));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApMedian", *(double *)(a1 + 144));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApQ5", *(double *)(a1 + 152));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityApQ95", *(double *)(a1 + 160));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlCv", *(double *)(a1 + 168));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlMean", *(double *)(a1 + 176));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlMedian", *(double *)(a1 + 184));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlQ5", *(double *)(a1 + 192));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityMlQ95", *(double *)(a1 + 200));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtCv", *(double *)(a1 + 208));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtMean", *(double *)(a1 + 216));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtMedian", *(double *)(a1 + 224));
  int v5 = *(_DWORD *)(a1 + 248);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_63:
  PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtQ5", *(double *)(a1 + 232));
  if ((*(_DWORD *)(a1 + 248) & 0x20000000) != 0) {
LABEL_31:
  }
    PB::TextFormatter::format(this, "allBoutsSwingIndexOfHarmonicityVtQ95", *(double *)(a1 + 240));
LABEL_32:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903BBC54(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 248) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 2u:
          *(_DWORD *)(a1 + 248) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 3u:
          *(_DWORD *)(a1 + 248) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 4u:
          *(_DWORD *)(a1 + 248) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 5u:
          *(_DWORD *)(a1 + 248) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 6u:
          *(_DWORD *)(a1 + 248) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 7u:
          *(_DWORD *)(a1 + 248) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 8u:
          *(_DWORD *)(a1 + 248) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 9u:
          *(_DWORD *)(a1 + 248) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0xAu:
          *(_DWORD *)(a1 + 248) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0xBu:
          *(_DWORD *)(a1 + 248) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0xCu:
          *(_DWORD *)(a1 + 248) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0xDu:
          *(_DWORD *)(a1 + 248) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0xEu:
          *(_DWORD *)(a1 + 248) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0xFu:
          *(_DWORD *)(a1 + 248) |= 0x4000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x10u:
          *(_DWORD *)(a1 + 248) |= 0x8000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x11u:
          *(_DWORD *)(a1 + 248) |= 0x10000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x12u:
          *(_DWORD *)(a1 + 248) |= 0x20000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x13u:
          *(_DWORD *)(a1 + 248) |= 0x40000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x14u:
          *(_DWORD *)(a1 + 248) |= 0x80000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x15u:
          *(_DWORD *)(a1 + 248) |= 0x100000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x16u:
          *(_DWORD *)(a1 + 248) |= 0x200000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 176) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x17u:
          *(_DWORD *)(a1 + 248) |= 0x400000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 184) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x18u:
          *(_DWORD *)(a1 + 248) |= 0x800000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 192) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x19u:
          *(_DWORD *)(a1 + 248) |= 0x1000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 200) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x1Au:
          *(_DWORD *)(a1 + 248) |= 0x4000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 216) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x1Bu:
          *(_DWORD *)(a1 + 248) |= 0x8000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 224) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x1Cu:
          *(_DWORD *)(a1 + 248) |= 0x10000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 232) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x1Du:
          *(_DWORD *)(a1 + 248) |= 0x20000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 240) = *(void *)(*(void *)this + v2);
          goto LABEL_115;
        case 0x1Eu:
          *(_DWORD *)(a1 + 248) |= 0x2000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_113:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 208) = *(void *)(*(void *)this + v2);
LABEL_115:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903BC4DC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 248);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    int v4 = *(_DWORD *)(v3 + 248);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200) == 0)
  {
LABEL_11:
    if ((v4 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 152));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x80000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 184));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x800000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 192));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 200));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 216));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_28:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 224));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_30;
    }
LABEL_60:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 240));
    if ((*(_DWORD *)(v3 + 248) & 0x2000000) == 0) {
      return result;
    }
    goto LABEL_61;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 232));
  int v4 = *(_DWORD *)(v3 + 248);
  if ((v4 & 0x20000000) != 0) {
    goto LABEL_60;
  }
LABEL_30:
  if ((v4 & 0x2000000) == 0) {
    return result;
  }
LABEL_61:
  double v5 = *(double *)(v3 + 208);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903BC85C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCE290;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1903BC884(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903BC8BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 52);
  if (v5)
  {
    PB::TextFormatter::format(this, "likelihoodNotOK", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 52);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "likelihoodOK", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "numDaysWithDataLast30Days");
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "numDaysWithDataLast7Days");
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "numValidBouts28Days");
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(this, "rawSteadiness", *(double *)(a1 + 24));
    if ((*(unsigned char *)(a1 + 52) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(this, "numValidBouts7Days");
  char v5 = *(unsigned char *)(a1 + 52);
  if ((v5 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "rejectionStatus");
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903BCA00(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 52) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 2u:
              *(unsigned char *)(a1 + 52) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 3u:
              *(unsigned char *)(a1 + 52) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_104:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_130;
            case 4u:
              *(unsigned char *)(a1 + 52) |= 0x80u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  unint64_t v53 = v21++;
                  char v54 = *(unsigned char *)(v22 + v53);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_108;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_130;
            case 5u:
              *(unsigned char *)(a1 + 52) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  unint64_t v57 = v27++;
                  char v58 = *(unsigned char *)(v28 + v57);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_113:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_113;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_130;
            case 6u:
              *(unsigned char *)(a1 + 52) |= 8u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  unint64_t v61 = v33++;
                  char v62 = *(unsigned char *)(v34 + v61);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_118:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_118;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 32) = v37;
              goto LABEL_130;
            case 7u:
              *(unsigned char *)(a1 + 52) |= 0x40u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  unint64_t v65 = v39++;
                  char v66 = *(unsigned char *)(v40 + v65);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_123:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_123;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_124;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_124:
              *(_DWORD *)(a1 + 44) = v43;
              goto LABEL_130;
            case 8u:
              *(unsigned char *)(a1 + 52) |= 0x20u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_129;
                  }
                  unint64_t v69 = v45++;
                  char v70 = *(unsigned char *)(v46 + v69);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_128;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_129;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *(_DWORD *)(a1 + 40) = v49;
LABEL_130:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_130;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903BD0EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 52);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    char v4 = *(unsigned char *)(v3 + 52);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(result + 52) & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 52) & 0x20) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 52);
  if ((v4 & 0x40) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_17:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903BD204(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD00F8;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1903BD22C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903BD264(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if (v5)
  {
    PB::TextFormatter::format(this, "centroidSlopeHeightNormDoubleSupportPercentageCadence", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "centroidSlopeHeightNormWalkingSpeedStepLength", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "l2DispersionHeightNormDoubleSupportPercentageCadence", *(double *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "l2DispersionHeightNormWalkingSpeedStepLength", *(double *)(a1 + 32));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903BD328(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 40) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_37:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903BD5A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 40) & 1) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903BD648(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD0018;
  *(_DWORD *)(result + 216) = 0;
  return result;
}

void sub_1903BD670(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903BD6A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 216);
  if (v5)
  {
    PB::TextFormatter::format(this, "allBoutsCycleTimeEntropy5thTo95th", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 216);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "allBoutsCycleTimeEntropyMean", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd1Mean", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd1P5", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd1P95", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd2Mean", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd2P5", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "allBoutsCycleTimePoincareSd2P95", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimeEntropy5thTo95thLog", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimeEntropyMeanLog", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimeEntropyP5Log", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimePoincareSd1P5Log", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21CycleTimePoincareSd2P5Log", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthEntropyMeanLog", *(double *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P5Log", *(double *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd1P95Log", *(double *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd2MeanLog", *(double *)(a1 + 136));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "allBoutsMinGaitMetrics21StepLengthPoincareSd2P5Log", *(double *)(a1 + 144));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "allBoutsStepLengthEntropy5thTo95th", *(double *)(a1 + 152));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "allBoutsStepLengthEntropyMean", *(double *)(a1 + 160));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd1Mean", *(double *)(a1 + 168));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd1P5", *(double *)(a1 + 176));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x400000) == 0)
  {
LABEL_24:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd1P95", *(double *)(a1 + 184));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x800000) == 0)
  {
LABEL_25:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd2Mean", *(double *)(a1 + 192));
  int v5 = *(_DWORD *)(a1 + 216);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd2P5", *(double *)(a1 + 200));
  if ((*(_DWORD *)(a1 + 216) & 0x2000000) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(this, "allBoutsStepLengthPoincareSd2P95", *(double *)(a1 + 208));
LABEL_28:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903BDA2C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 216) |= 0x80000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 2u:
          *(_DWORD *)(a1 + 216) |= 0x40000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 3u:
          *(_DWORD *)(a1 + 216) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 4u:
          *(_DWORD *)(a1 + 216) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 5u:
          *(_DWORD *)(a1 + 216) |= 0x100000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 6u:
          *(_DWORD *)(a1 + 216) |= 0x400000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 184) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 7u:
          *(_DWORD *)(a1 + 216) |= 0x200000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 176) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 8u:
          *(_DWORD *)(a1 + 216) |= 0x800000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 192) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 9u:
          *(_DWORD *)(a1 + 216) |= 0x2000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 208) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0xAu:
          *(_DWORD *)(a1 + 216) |= 0x1000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 200) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0xBu:
          *(_DWORD *)(a1 + 216) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0xCu:
          *(_DWORD *)(a1 + 216) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0xDu:
          *(_DWORD *)(a1 + 216) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0xEu:
          *(_DWORD *)(a1 + 216) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0xFu:
          *(_DWORD *)(a1 + 216) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x10u:
          *(_DWORD *)(a1 + 216) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x11u:
          *(_DWORD *)(a1 + 216) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x12u:
          *(_DWORD *)(a1 + 216) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x13u:
          *(_DWORD *)(a1 + 216) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x14u:
          *(_DWORD *)(a1 + 216) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x15u:
          *(_DWORD *)(a1 + 216) |= 0x4000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x16u:
          *(_DWORD *)(a1 + 216) |= 0x8000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x17u:
          *(_DWORD *)(a1 + 216) |= 0x20000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x18u:
          *(_DWORD *)(a1 + 216) |= 0x10000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x19u:
          *(_DWORD *)(a1 + 216) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_101;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_103;
        case 0x1Au:
          *(_DWORD *)(a1 + 216) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_101:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
LABEL_103:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903BE1C4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 216);
  if ((v4 & 0x80000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 160));
    int v4 = *(_DWORD *)(v3 + 216);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 152));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400000) == 0)
  {
LABEL_7:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 184));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 192));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 208));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 200));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 8) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 8) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x2000) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x400) == 0)
  {
LABEL_21:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x4000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x20000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x800) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96));
    if ((*(_DWORD *)(v3 + 216) & 0x1000) == 0) {
      return result;
    }
    goto LABEL_53;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 216);
  if ((v4 & 0x800) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 0x1000) == 0) {
    return result;
  }
LABEL_53:
  double v5 = *(double *)(v3 + 104);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903BE4D4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF640;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1903BE4FC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903BE534(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if (v5)
  {
    PB::TextFormatter::format(this, "begin", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "bin");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "end", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "state");
  if ((*(unsigned char *)(a1 + 40) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 24));
LABEL_7:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903BE618(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 40) |= 8u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_67;
                  }
                  unint64_t v35 = v20++;
                  char v36 = *(unsigned char *)(v21 + v35);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_66;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_66:
                unint64_t v2 = v35 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_67;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_67:
              *(_DWORD *)(a1 + 32) = v24;
              goto LABEL_73;
            case 2u:
              *(unsigned char *)(a1 + 40) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_46;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_62;
            case 3u:
              *(unsigned char *)(a1 + 40) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_46;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_62;
            case 4u:
              *(unsigned char *)(a1 + 40) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_71;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 36) = v31;
LABEL_73:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(unsigned char *)(a1 + 40) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_62:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_46:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_73;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_73;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903BEA34(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 40) & 4) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903BEAF8(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCBFC8;
  *(void *)(result + 8) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 152) = 0;
  return result;
}

void sub_1903BEB24(PB::Base *this)
{
  *(void *)this = &unk_1EDFCBFC8;
  uint64_t v4 = *((void *)this + 9);
  unint64_t v2 = (void *)((char *)this + 72);
  uint64_t v3 = v4;
  *unint64_t v2 = 0;
  if (v4) {
    sub_1903478E8((uint64_t)v2, v3);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }

  PB::Base::~Base(this);
}

void sub_1903BEBE8(PB::Base *a1)
{
  sub_1903BEB24(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903BEC20(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "accelerometerPace");
  }
  int v6 = *(_DWORD *)(a1 + 152);
  if (v6)
  {
    PB::TextFormatter::format(this, "activeTime", *(double *)(a1 + 16));
    int v6 = *(_DWORD *)(a1 + 152);
    if ((v6 & 0x100) == 0)
    {
LABEL_5:
      if ((v6 & 2) == 0) {
        goto LABEL_6;
      }
      goto LABEL_38;
    }
  }
  else if ((v6 & 0x100) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "count");
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 2) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "currentCadence", *(double *)(a1 + 24));
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 32));
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 8) == 0)
  {
LABEL_8:
    if ((v6 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 40));
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x200) == 0)
  {
LABEL_9:
    if ((v6 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "distanceSource");
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x400) == 0)
  {
LABEL_10:
    if ((v6 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "elevationAscended");
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x800) == 0)
  {
LABEL_11:
    if ((v6 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "elevationDescended");
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x1000) == 0)
  {
LABEL_12:
    if ((v6 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "falseStepDetectorState");
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x2000) == 0)
  {
LABEL_13:
    if ((v6 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "falseStepsSuppressed");
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x10) == 0)
  {
LABEL_14:
    if ((v6 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "firstStepTime", *(double *)(a1 + 48));
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x4000) == 0)
  {
LABEL_15:
    if ((v6 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "floorsAscended");
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x8000) == 0)
  {
LABEL_16:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "floorsDescended");
  int v6 = *(_DWORD *)(a1 + 152);
  if ((v6 & 0x200000) == 0)
  {
LABEL_17:
    if ((v6 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_49:
  PB::TextFormatter::format(this, "isOdometerDistance");
  if ((*(_DWORD *)(a1 + 152) & 0x400000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(this, "isOdometerPace");
LABEL_19:
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "movementStats");
  }
  int v8 = *(_DWORD *)(a1 + 152);
  if ((v8 & 0x10000) != 0)
  {
    PB::TextFormatter::format(this, "paceSource");
    int v8 = *(_DWORD *)(a1 + 152);
    if ((v8 & 0x20000) == 0)
    {
LABEL_23:
      if ((v8 & 0x40000) == 0) {
        goto LABEL_24;
      }
      goto LABEL_53;
    }
  }
  else if ((v8 & 0x20000) == 0)
  {
    goto LABEL_23;
  }
  PB::TextFormatter::format(this, "pedometerArmConstrainedState");
  int v8 = *(_DWORD *)(a1 + 152);
  if ((v8 & 0x40000) == 0)
  {
LABEL_24:
    if ((v8 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "pushCount");
  int v8 = *(_DWORD *)(a1 + 152);
  if ((v8 & 0x20) == 0)
  {
LABEL_25:
    if ((v8 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_54:
  PB::TextFormatter::format(this, "rawDistance", *(double *)(a1 + 64));
  if ((*(_DWORD *)(a1 + 152) & 0x80000) != 0) {
LABEL_26:
  }
    PB::TextFormatter::format(this, "recordId");
LABEL_27:
  if (*(void *)(a1 + 72)) {
    PB::TextFormatter::format();
  }
  int v9 = *(_DWORD *)(a1 + 152);
  if ((v9 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 80));
    int v9 = *(_DWORD *)(a1 + 152);
    if ((v9 & 0x80) == 0)
    {
LABEL_31:
      if ((v9 & 0x100000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_32;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_31;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 88));
  if ((*(_DWORD *)(a1 + 152) & 0x100000) != 0) {
LABEL_32:
  }
    PB::TextFormatter::format(this, "workoutType");
LABEL_33:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903BEFCC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 152) |= 0x80u;
          unint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v20);
          goto LABEL_242;
        case 2u:
          *(_DWORD *)(a1 + 152) |= 0x40u;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v22);
          goto LABEL_242;
        case 3u:
          *(_DWORD *)(a1 + 152) |= 0x10u;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v23);
          goto LABEL_242;
        case 4u:
          *(_DWORD *)(a1 + 152) |= 0x100u;
          unint64_t v24 = *((void *)this + 1);
          unint64_t v25 = *((void *)this + 2);
          uint64_t v26 = *(void *)this;
          if (v24 <= 0xFFFFFFFFFFFFFFF5 && v24 + 10 <= v25)
          {
            char v27 = 0;
            unsigned int v28 = 0;
            uint64_t v29 = 0;
            do
            {
              unint64_t v30 = v24 + 1;
              *((void *)this + 1) = v24 + 1;
              char v31 = *(unsigned char *)(v26 + v24);
              v29 |= (unint64_t)(v31 & 0x7F) << v27;
              if ((v31 & 0x80) == 0) {
                goto LABEL_246;
              }
              v27 += 7;
              unint64_t v24 = v30;
              BOOL v14 = v28++ > 8;
            }
            while (!v14);
LABEL_152:
            LODWORD(v29) = 0;
            goto LABEL_246;
          }
          char v141 = 0;
          unsigned int v142 = 0;
          uint64_t v29 = 0;
          if (v25 <= v24) {
            unint64_t v25 = *((void *)this + 1);
          }
          while (2)
          {
            if (v25 == v24)
            {
              LODWORD(v29) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v143 = v24 + 1;
              char v144 = *(unsigned char *)(v26 + v24);
              *((void *)this + 1) = v143;
              v29 |= (unint64_t)(v144 & 0x7F) << v141;
              if (v144 < 0)
              {
                v141 += 7;
                unint64_t v24 = v143;
                BOOL v14 = v142++ > 8;
                if (v14) {
                  goto LABEL_152;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v29) = 0;
              }
            }
            break;
          }
LABEL_246:
          *(_DWORD *)(a1 + 96) = v29;
          goto LABEL_295;
        case 5u:
          *(_DWORD *)(a1 + 152) |= 8u;
          unint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFF7 || v32 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v32);
          goto LABEL_242;
        case 6u:
          *(_DWORD *)(a1 + 152) |= 0x20u;
          unint64_t v33 = *((void *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v33);
          goto LABEL_242;
        case 7u:
          *(_DWORD *)(a1 + 152) |= 0x4000u;
          unint64_t v34 = *((void *)this + 1);
          unint64_t v35 = *((void *)this + 2);
          uint64_t v36 = *(void *)this;
          if (v34 <= 0xFFFFFFFFFFFFFFF5 && v34 + 10 <= v35)
          {
            char v37 = 0;
            unsigned int v38 = 0;
            uint64_t v39 = 0;
            do
            {
              unint64_t v40 = v34 + 1;
              *((void *)this + 1) = v34 + 1;
              char v41 = *(unsigned char *)(v36 + v34);
              v39 |= (unint64_t)(v41 & 0x7F) << v37;
              if ((v41 & 0x80) == 0) {
                goto LABEL_250;
              }
              v37 += 7;
              unint64_t v34 = v40;
              BOOL v14 = v38++ > 8;
            }
            while (!v14);
LABEL_159:
            LODWORD(v39) = 0;
            goto LABEL_250;
          }
          char v145 = 0;
          unsigned int v146 = 0;
          uint64_t v39 = 0;
          if (v35 <= v34) {
            unint64_t v35 = *((void *)this + 1);
          }
          while (2)
          {
            if (v35 == v34)
            {
              LODWORD(v39) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v147 = v34 + 1;
              char v148 = *(unsigned char *)(v36 + v34);
              *((void *)this + 1) = v147;
              v39 |= (unint64_t)(v148 & 0x7F) << v145;
              if (v148 < 0)
              {
                v145 += 7;
                unint64_t v34 = v147;
                BOOL v14 = v146++ > 8;
                if (v14) {
                  goto LABEL_159;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v39) = 0;
              }
            }
            break;
          }
LABEL_250:
          *(_DWORD *)(a1 + 120) = v39;
          goto LABEL_295;
        case 8u:
          *(_DWORD *)(a1 + 152) |= 0x8000u;
          unint64_t v42 = *((void *)this + 1);
          unint64_t v43 = *((void *)this + 2);
          uint64_t v44 = *(void *)this;
          if (v42 <= 0xFFFFFFFFFFFFFFF5 && v42 + 10 <= v43)
          {
            char v45 = 0;
            unsigned int v46 = 0;
            uint64_t v47 = 0;
            do
            {
              unint64_t v48 = v42 + 1;
              *((void *)this + 1) = v42 + 1;
              char v49 = *(unsigned char *)(v44 + v42);
              v47 |= (unint64_t)(v49 & 0x7F) << v45;
              if ((v49 & 0x80) == 0) {
                goto LABEL_254;
              }
              v45 += 7;
              unint64_t v42 = v48;
              BOOL v14 = v46++ > 8;
            }
            while (!v14);
LABEL_166:
            LODWORD(v47) = 0;
            goto LABEL_254;
          }
          char v149 = 0;
          unsigned int v150 = 0;
          uint64_t v47 = 0;
          if (v43 <= v42) {
            unint64_t v43 = *((void *)this + 1);
          }
          while (2)
          {
            if (v43 == v42)
            {
              LODWORD(v47) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v151 = v42 + 1;
              char v152 = *(unsigned char *)(v44 + v42);
              *((void *)this + 1) = v151;
              v47 |= (unint64_t)(v152 & 0x7F) << v149;
              if (v152 < 0)
              {
                v149 += 7;
                unint64_t v42 = v151;
                BOOL v14 = v150++ > 8;
                if (v14) {
                  goto LABEL_166;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v47) = 0;
              }
            }
            break;
          }
LABEL_254:
          *(_DWORD *)(a1 + 124) = v47;
          goto LABEL_295;
        case 9u:
          *(_DWORD *)(a1 + 152) |= 4u;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v50);
          goto LABEL_242;
        case 0xAu:
          *(_DWORD *)(a1 + 152) |= 2u;
          unint64_t v51 = *((void *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFF7 || v51 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v51);
          goto LABEL_242;
        case 0xBu:
          *(_DWORD *)(a1 + 152) |= 1u;
          unint64_t v52 = *((void *)this + 1);
          if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v52);
LABEL_242:
            *((void *)this + 1) += 8;
          }
          else
          {
LABEL_68:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_295;
        case 0xCu:
          *(_DWORD *)(a1 + 152) |= 0x80000u;
          unint64_t v53 = *((void *)this + 1);
          unint64_t v54 = *((void *)this + 2);
          uint64_t v55 = *(void *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)this + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_258;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v14 = v57++ > 8;
            }
            while (!v14);
LABEL_173:
            LODWORD(v58) = 0;
            goto LABEL_258;
          }
          char v153 = 0;
          unsigned int v154 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)this + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v155 = v53 + 1;
              char v156 = *(unsigned char *)(v55 + v53);
              *((void *)this + 1) = v155;
              v58 |= (unint64_t)(v156 & 0x7F) << v153;
              if (v156 < 0)
              {
                v153 += 7;
                unint64_t v53 = v155;
                BOOL v14 = v154++ > 8;
                if (v14) {
                  goto LABEL_173;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v58) = 0;
              }
            }
            break;
          }
LABEL_258:
          *(_DWORD *)(a1 + 140) = v58;
          goto LABEL_295;
        case 0xDu:
          operator new();
        case 0xEu:
          *(_DWORD *)(a1 + 152) |= 0x200000u;
          unint64_t v61 = *((void *)this + 1);
          if (v61 >= *((void *)this + 2))
          {
            BOOL v64 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v62 = v61 + 1;
            int v63 = *(unsigned __int8 *)(*(void *)this + v61);
            *((void *)this + 1) = v62;
            BOOL v64 = v63 != 0;
          }
          *(unsigned char *)(a1 + 148) = v64;
          goto LABEL_295;
        case 0xFu:
          *(_DWORD *)(a1 + 152) |= 0x400000u;
          unint64_t v65 = *((void *)this + 1);
          if (v65 >= *((void *)this + 2))
          {
            BOOL v68 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v66 = v65 + 1;
            int v67 = *(unsigned __int8 *)(*(void *)this + v65);
            *((void *)this + 1) = v66;
            BOOL v68 = v67 != 0;
          }
          *(unsigned char *)(a1 + 149) = v68;
          goto LABEL_295;
        case 0x10u:
          operator new();
        case 0x11u:
          *(_DWORD *)(a1 + 152) |= 0x40000u;
          unint64_t v69 = *((void *)this + 1);
          unint64_t v70 = *((void *)this + 2);
          uint64_t v71 = *(void *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_262;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_184:
            LODWORD(v74) = 0;
            goto LABEL_262;
          }
          char v157 = 0;
          unsigned int v158 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)this + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v159 = v69 + 1;
              char v160 = *(unsigned char *)(v71 + v69);
              *((void *)this + 1) = v159;
              v74 |= (unint64_t)(v160 & 0x7F) << v157;
              if (v160 < 0)
              {
                v157 += 7;
                unint64_t v69 = v159;
                BOOL v14 = v158++ > 8;
                if (v14) {
                  goto LABEL_184;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_262:
          *(_DWORD *)(a1 + 136) = v74;
          goto LABEL_295;
        case 0x12u:
          *(_DWORD *)(a1 + 152) |= 0x100000u;
          unint64_t v77 = *((void *)this + 1);
          unint64_t v78 = *((void *)this + 2);
          uint64_t v79 = *(void *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)this + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_266;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }
            while (!v14);
LABEL_191:
            LODWORD(v82) = 0;
            goto LABEL_266;
          }
          char v161 = 0;
          unsigned int v162 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)this + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v163 = v77 + 1;
              char v164 = *(unsigned char *)(v79 + v77);
              *((void *)this + 1) = v163;
              v82 |= (unint64_t)(v164 & 0x7F) << v161;
              if (v164 < 0)
              {
                v161 += 7;
                unint64_t v77 = v163;
                BOOL v14 = v162++ > 8;
                if (v14) {
                  goto LABEL_191;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v82) = 0;
              }
            }
            break;
          }
LABEL_266:
          *(_DWORD *)(a1 + 144) = v82;
          goto LABEL_295;
        case 0x13u:
          *(_DWORD *)(a1 + 152) |= 0x20000u;
          unint64_t v85 = *((void *)this + 1);
          unint64_t v86 = *((void *)this + 2);
          uint64_t v87 = *(void *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)this + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_270;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }
            while (!v14);
LABEL_198:
            LODWORD(v90) = 0;
            goto LABEL_270;
          }
          char v165 = 0;
          unsigned int v166 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)this + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v167 = v85 + 1;
              char v168 = *(unsigned char *)(v87 + v85);
              *((void *)this + 1) = v167;
              v90 |= (unint64_t)(v168 & 0x7F) << v165;
              if (v168 < 0)
              {
                v165 += 7;
                unint64_t v85 = v167;
                BOOL v14 = v166++ > 8;
                if (v14) {
                  goto LABEL_198;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v90) = 0;
              }
            }
            break;
          }
LABEL_270:
          *(_DWORD *)(a1 + 132) = v90;
          goto LABEL_295;
        case 0x14u:
          *(_DWORD *)(a1 + 152) |= 0x400u;
          unint64_t v93 = *((void *)this + 1);
          unint64_t v94 = *((void *)this + 2);
          uint64_t v95 = *(void *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)this + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_274;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }
            while (!v14);
LABEL_205:
            LODWORD(v98) = 0;
            goto LABEL_274;
          }
          char v169 = 0;
          unsigned int v170 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)this + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v171 = v93 + 1;
              char v172 = *(unsigned char *)(v95 + v93);
              *((void *)this + 1) = v171;
              v98 |= (unint64_t)(v172 & 0x7F) << v169;
              if (v172 < 0)
              {
                v169 += 7;
                unint64_t v93 = v171;
                BOOL v14 = v170++ > 8;
                if (v14) {
                  goto LABEL_205;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v98) = 0;
              }
            }
            break;
          }
LABEL_274:
          *(_DWORD *)(a1 + 104) = v98;
          goto LABEL_295;
        case 0x15u:
          *(_DWORD *)(a1 + 152) |= 0x800u;
          unint64_t v101 = *((void *)this + 1);
          unint64_t v102 = *((void *)this + 2);
          uint64_t v103 = *(void *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)this + 1) = v101 + 1;
              char v108 = *(unsigned char *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_278;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v14 = v105++ > 8;
            }
            while (!v14);
LABEL_212:
            LODWORD(v106) = 0;
            goto LABEL_278;
          }
          char v173 = 0;
          unsigned int v174 = 0;
          uint64_t v106 = 0;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)this + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v175 = v101 + 1;
              char v176 = *(unsigned char *)(v103 + v101);
              *((void *)this + 1) = v175;
              v106 |= (unint64_t)(v176 & 0x7F) << v173;
              if (v176 < 0)
              {
                v173 += 7;
                unint64_t v101 = v175;
                BOOL v14 = v174++ > 8;
                if (v14) {
                  goto LABEL_212;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v106) = 0;
              }
            }
            break;
          }
LABEL_278:
          *(_DWORD *)(a1 + 108) = v106;
          goto LABEL_295;
        case 0x16u:
          *(_DWORD *)(a1 + 152) |= 0x2000u;
          unint64_t v109 = *((void *)this + 1);
          unint64_t v110 = *((void *)this + 2);
          uint64_t v111 = *(void *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)this + 1) = v109 + 1;
              char v116 = *(unsigned char *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_282;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }
            while (!v14);
LABEL_219:
            LODWORD(v114) = 0;
            goto LABEL_282;
          }
          char v177 = 0;
          unsigned int v178 = 0;
          uint64_t v114 = 0;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)this + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v179 = v109 + 1;
              char v180 = *(unsigned char *)(v111 + v109);
              *((void *)this + 1) = v179;
              v114 |= (unint64_t)(v180 & 0x7F) << v177;
              if (v180 < 0)
              {
                v177 += 7;
                unint64_t v109 = v179;
                BOOL v14 = v178++ > 8;
                if (v14) {
                  goto LABEL_219;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v114) = 0;
              }
            }
            break;
          }
LABEL_282:
          *(_DWORD *)(a1 + 116) = v114;
          goto LABEL_295;
        case 0x17u:
          *(_DWORD *)(a1 + 152) |= 0x200u;
          unint64_t v117 = *((void *)this + 1);
          unint64_t v118 = *((void *)this + 2);
          uint64_t v119 = *(void *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            char v120 = 0;
            unsigned int v121 = 0;
            uint64_t v122 = 0;
            do
            {
              unint64_t v123 = v117 + 1;
              *((void *)this + 1) = v117 + 1;
              char v124 = *(unsigned char *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0) {
                goto LABEL_286;
              }
              v120 += 7;
              unint64_t v117 = v123;
              BOOL v14 = v121++ > 8;
            }
            while (!v14);
LABEL_226:
            LODWORD(v122) = 0;
            goto LABEL_286;
          }
          char v181 = 0;
          unsigned int v182 = 0;
          uint64_t v122 = 0;
          if (v118 <= v117) {
            unint64_t v118 = *((void *)this + 1);
          }
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v183 = v117 + 1;
              char v184 = *(unsigned char *)(v119 + v117);
              *((void *)this + 1) = v183;
              v122 |= (unint64_t)(v184 & 0x7F) << v181;
              if (v184 < 0)
              {
                v181 += 7;
                unint64_t v117 = v183;
                BOOL v14 = v182++ > 8;
                if (v14) {
                  goto LABEL_226;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v122) = 0;
              }
            }
            break;
          }
LABEL_286:
          *(_DWORD *)(a1 + 100) = v122;
          goto LABEL_295;
        case 0x18u:
          *(_DWORD *)(a1 + 152) |= 0x1000u;
          unint64_t v125 = *((void *)this + 1);
          unint64_t v126 = *((void *)this + 2);
          uint64_t v127 = *(void *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)this + 1) = v125 + 1;
              char v132 = *(unsigned char *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_290;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }
            while (!v14);
LABEL_233:
            LODWORD(v130) = 0;
            goto LABEL_290;
          }
          char v185 = 0;
          unsigned int v186 = 0;
          uint64_t v130 = 0;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)this + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v187 = v125 + 1;
              char v188 = *(unsigned char *)(v127 + v125);
              *((void *)this + 1) = v187;
              v130 |= (unint64_t)(v188 & 0x7F) << v185;
              if (v188 < 0)
              {
                v185 += 7;
                unint64_t v125 = v187;
                BOOL v14 = v186++ > 8;
                if (v14) {
                  goto LABEL_233;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v130) = 0;
              }
            }
            break;
          }
LABEL_290:
          *(_DWORD *)(a1 + 112) = v130;
          goto LABEL_295;
        case 0x19u:
          operator new();
        case 0x1Au:
          *(_DWORD *)(a1 + 152) |= 0x10000u;
          unint64_t v133 = *((void *)this + 1);
          unint64_t v134 = *((void *)this + 2);
          uint64_t v135 = *(void *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)this + 1) = v133 + 1;
              char v140 = *(unsigned char *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_294;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }
            while (!v14);
LABEL_240:
            LODWORD(v138) = 0;
            goto LABEL_294;
          }
          char v189 = 0;
          unsigned int v190 = 0;
          uint64_t v138 = 0;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)this + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_295;
      }
      while (1)
      {
        if (v134 == v133)
        {
          LODWORD(v138) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_294;
        }
        unint64_t v191 = v133 + 1;
        char v192 = *(unsigned char *)(v135 + v133);
        *((void *)this + 1) = v191;
        v138 |= (unint64_t)(v192 & 0x7F) << v189;
        if ((v192 & 0x80) == 0) {
          break;
        }
        v189 += 7;
        unint64_t v133 = v191;
        BOOL v14 = v190++ > 8;
        if (v14) {
          goto LABEL_240;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v138) = 0;
      }
LABEL_294:
      *(_DWORD *)(a1 + 128) = v138;
LABEL_295:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903C013C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 152);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 88));
    int v4 = *(_DWORD *)(v3 + 152);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 4) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 152);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  if ((*(_DWORD *)(v3 + 152) & 0x80000) != 0) {
LABEL_13:
  }
    uint64_t result = PB::Writer::writeVarInt(this);
LABEL_14:
  if (*(void *)(v3 + 72)) {
    uint64_t result = PB::Writer::write();
  }
  int v5 = *(_DWORD *)(v3 + 152);
  if ((v5 & 0x200000) != 0)
  {
    uint64_t result = PB::Writer::write(this);
    int v5 = *(_DWORD *)(v3 + 152);
  }
  if ((v5 & 0x400000) != 0) {
    uint64_t result = PB::Writer::write(this);
  }
  int v6 = *(const PB::Base **)(v3 + 8);
  if (v6) {
    uint64_t result = PB::Writer::writeSubmessage(this, v6);
  }
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x40000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    int v7 = *(_DWORD *)(v3 + 152);
    if ((v7 & 0x100000) == 0)
    {
LABEL_24:
      if ((v7 & 0x20000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_49;
    }
  }
  else if ((v7 & 0x100000) == 0)
  {
    goto LABEL_24;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x20000) == 0)
  {
LABEL_25:
    if ((v7 & 0x400) == 0) {
      goto LABEL_26;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x400) == 0)
  {
LABEL_26:
    if ((v7 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x800) == 0)
  {
LABEL_27:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x2000) == 0)
  {
LABEL_28:
    if ((v7 & 0x200) == 0) {
      goto LABEL_29;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v7 = *(_DWORD *)(v3 + 152);
  if ((v7 & 0x200) == 0)
  {
LABEL_29:
    if ((v7 & 0x1000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_30;
  }
LABEL_53:
  uint64_t result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 152) & 0x1000) != 0) {
LABEL_30:
  }
    uint64_t result = PB::Writer::writeVarInt(this);
LABEL_31:
  uint64_t v8 = *(const PB::Base **)(v3 + 56);
  if (v8) {
    uint64_t result = PB::Writer::writeSubmessage(this, v8);
  }
  if (*(unsigned char *)(v3 + 154))
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903C042C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCE680;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_1903C0454(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C048C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 72);
  if (v5)
  {
    PB::TextFormatter::format(this, "calibratedDistance", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "energyDeltaDistance", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "energyIsCalibrated");
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "incrementalActiveTime", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "incrementalSteps");
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "lastStepTime", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "odometerSpeed", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "rawPace", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "rawPaceDidJump");
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "stepCadenceDeltaDistance", *(double *)(a1 + 56));
  if ((*(_WORD *)(a1 + 72) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "stepCadenceIsCalibrated");
LABEL_13:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C0630(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_72;
            case 2u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_77;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_76:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_77;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_76;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_77;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_77:
              *(_DWORD *)(a1 + 64) = v25;
LABEL_78:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 3u:
              *(_WORD *)(a1 + 72) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_72;
            case 4u:
              *(_WORD *)(a1 + 72) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_72;
            case 5u:
              *(_WORD *)(a1 + 72) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_72;
            case 6u:
              *(_WORD *)(a1 + 72) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 69) = v28;
              goto LABEL_78;
            case 7u:
              *(_WORD *)(a1 + 72) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_72;
            case 8u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_55;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_72;
            case 9u:
              *(_WORD *)(a1 + 72) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 70) = v30;
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 72) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_72:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_55:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_78;
            case 0xBu:
              *(_WORD *)(a1 + 72) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v32 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v32 = v31 != 0;
              }
              *(unsigned char *)(a1 + 68) = v32;
              goto LABEL_78;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_78;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903C0B24(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 72);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 48));
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
    if ((*(_WORD *)(v3 + 72) & 0x100) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 2) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x100) == 0) {
    return result;
  }
LABEL_23:

  return PB::Writer::write(this);
}

uint64_t sub_1903C0C90(uint64_t result)
{
  *(_DWORD *)(result + 100) = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_1EDFCEB88;
  return result;
}

void sub_1903C0CB8(PB::Base *this)
{
  *(void *)this = &unk_1EDFCEB88;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PB::Base::~Base(this);
}

void sub_1903C0D6C(PB::Base *a1)
{
  sub_1903C0CB8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C0DA4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "addition");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "fused");
  }
  __int16 v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x400) != 0)
  {
    PB::TextFormatter::format(this, "isVehicular");
    __int16 v7 = *(_WORD *)(a1 + 100);
    if ((v7 & 1) == 0)
    {
LABEL_7:
      if ((v7 & 0x100) == 0) {
        goto LABEL_8;
      }
      goto LABEL_22;
    }
  }
  else if ((v7 & 1) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "odometerDeltaDistance", *(double *)(a1 + 24));
  __int16 v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x100) == 0)
  {
LABEL_8:
    if ((v7 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "odometerQuality");
  __int16 v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 2) == 0)
  {
LABEL_9:
    if ((v7 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "odometerSmoothMeanPace", *(double *)(a1 + 32));
  __int16 v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x200) == 0)
  {
LABEL_10:
    if ((v7 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "pedometerDistanceSource");
  __int16 v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 4) == 0)
  {
LABEL_11:
    if ((v7 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "speedStdDevOdometer", *(double *)(a1 + 40));
  __int16 v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 8) == 0)
  {
LABEL_12:
    if ((v7 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "speedStdDevPedometer", *(double *)(a1 + 48));
  __int16 v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x10) == 0)
  {
LABEL_13:
    if ((v7 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "speedStdDevResidualTolerance", *(double *)(a1 + 56));
  __int16 v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x20) == 0)
  {
LABEL_14:
    if ((v7 & 0x40) == 0) {
      goto LABEL_15;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "totalDistanceCalibratedPedometer", *(double *)(a1 + 64));
  __int16 v7 = *(_WORD *)(a1 + 100);
  if ((v7 & 0x40) == 0)
  {
LABEL_15:
    if ((v7 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_29:
  PB::TextFormatter::format(this, "totalDistanceFused", *(double *)(a1 + 72));
  if ((*(_WORD *)(a1 + 100) & 0x80) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "totalDistanceOdometer", *(double *)(a1 + 80));
LABEL_17:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C0FB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          operator new();
        case 3u:
          *(_WORD *)(a1 + 100) |= 1u;
          unint64_t v21 = *((void *)this + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v21);
          goto LABEL_83;
        case 4u:
          *(_WORD *)(a1 + 100) |= 2u;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
          goto LABEL_83;
        case 5u:
          *(_WORD *)(a1 + 100) |= 0x80u;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v23);
          goto LABEL_83;
        case 6u:
          *(_WORD *)(a1 + 100) |= 0x20u;
          unint64_t v24 = *((void *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v24);
          goto LABEL_83;
        case 7u:
          *(_WORD *)(a1 + 100) |= 0x40u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v25);
          goto LABEL_83;
        case 8u:
          *(_WORD *)(a1 + 100) |= 4u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v26);
          goto LABEL_83;
        case 9u:
          *(_WORD *)(a1 + 100) |= 8u;
          unint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_49;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v27);
          goto LABEL_83;
        case 0xAu:
          *(_WORD *)(a1 + 100) |= 0x10u;
          unint64_t v28 = *((void *)this + 1);
          if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 56) = *(void *)(*(void *)this + v28);
LABEL_83:
            *((void *)this + 1) += 8;
          }
          else
          {
LABEL_49:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_92;
        case 0xBu:
          *(_WORD *)(a1 + 100) |= 0x400u;
          unint64_t v29 = *((void *)this + 1);
          if (v29 >= *((void *)this + 2))
          {
            BOOL v32 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v30 = v29 + 1;
            int v31 = *(unsigned __int8 *)(*(void *)this + v29);
            *((void *)this + 1) = v30;
            BOOL v32 = v31 != 0;
          }
          *(unsigned char *)(a1 + 96) = v32;
          goto LABEL_92;
        case 0xCu:
          *(_WORD *)(a1 + 100) |= 0x200u;
          unint64_t v33 = *((void *)this + 1);
          unint64_t v34 = *((void *)this + 2);
          uint64_t v35 = *(void *)this;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            char v36 = 0;
            unsigned int v37 = 0;
            uint64_t v38 = 0;
            do
            {
              unint64_t v39 = v33 + 1;
              *((void *)this + 1) = v33 + 1;
              char v40 = *(unsigned char *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0) {
                goto LABEL_87;
              }
              v36 += 7;
              unint64_t v33 = v39;
              BOOL v14 = v37++ > 8;
            }
            while (!v14);
LABEL_74:
            LODWORD(v38) = 0;
            goto LABEL_87;
          }
          char v49 = 0;
          unsigned int v50 = 0;
          uint64_t v38 = 0;
          if (v34 <= v33) {
            unint64_t v34 = *((void *)this + 1);
          }
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v51 = v33 + 1;
              char v52 = *(unsigned char *)(v35 + v33);
              *((void *)this + 1) = v51;
              v38 |= (unint64_t)(v52 & 0x7F) << v49;
              if (v52 < 0)
              {
                v49 += 7;
                unint64_t v33 = v51;
                BOOL v14 = v50++ > 8;
                if (v14) {
                  goto LABEL_74;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v38) = 0;
              }
            }
            break;
          }
LABEL_87:
          *(_DWORD *)(a1 + 92) = v38;
          goto LABEL_92;
        case 0xDu:
          *(_WORD *)(a1 + 100) |= 0x100u;
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          uint64_t v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_91;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v14 = v45++ > 8;
            }
            while (!v14);
LABEL_81:
            LODWORD(v46) = 0;
            goto LABEL_91;
          }
          char v53 = 0;
          unsigned int v54 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)this + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_92;
      }
      while (1)
      {
        if (v42 == v41)
        {
          LODWORD(v46) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_91;
        }
        unint64_t v55 = v41 + 1;
        char v56 = *(unsigned char *)(v43 + v41);
        *((void *)this + 1) = v55;
        v46 |= (unint64_t)(v56 & 0x7F) << v53;
        if ((v56 & 0x80) == 0) {
          break;
        }
        v53 += 7;
        unint64_t v41 = v55;
        BOOL v14 = v54++ > 8;
        if (v14) {
          goto LABEL_81;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v46) = 0;
      }
LABEL_91:
      *(_DWORD *)(a1 + 88) = v46;
LABEL_92:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903C1688(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 16);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5);
  }
  __int16 v6 = *(_WORD *)(v3 + 100);
  if (v6)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
    __int16 v6 = *(_WORD *)(v3 + 100);
    if ((v6 & 2) == 0)
    {
LABEL_7:
      if ((v6 & 0x80) == 0) {
        goto LABEL_8;
      }
      goto LABEL_19;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x80) == 0)
  {
LABEL_8:
    if ((v6 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x20) == 0)
  {
LABEL_9:
    if ((v6 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x40) == 0)
  {
LABEL_10:
    if ((v6 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 4) == 0)
  {
LABEL_11:
    if ((v6 & 8) == 0) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 8) == 0)
  {
LABEL_12:
    if ((v6 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x10) == 0)
  {
LABEL_13:
    if ((v6 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x400) == 0)
  {
LABEL_14:
    if ((v6 & 0x200) == 0) {
      goto LABEL_15;
    }
LABEL_26:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 100) & 0x100) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this);
  __int16 v6 = *(_WORD *)(v3 + 100);
  if ((v6 & 0x200) != 0) {
    goto LABEL_26;
  }
LABEL_15:
  if ((v6 & 0x100) == 0) {
    return result;
  }
LABEL_27:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903C181C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCE6B8;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_1903C1844(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C187C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 96);
  if (v5)
  {
    PB::TextFormatter::format(this, "bobbiness", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 96);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "bufferAvgSampleRateHz", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "concavityDeltaDeg", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "deltaInertialZVel", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "horizontalDisplacement", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "impulseDurationSec", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "likelihoodRatio", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "peakiness", *(double *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "thetaPitchFaceDeg", *(double *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "thetaRollFaceDeg", *(double *)(a1 + 80));
  if ((*(_WORD *)(a1 + 96) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "timeSinceLastStepSec", *(double *)(a1 + 88));
LABEL_13:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C1A20(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 96) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 2u:
          *(_WORD *)(a1 + 96) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 3u:
          *(_WORD *)(a1 + 96) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 4u:
          *(_WORD *)(a1 + 96) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 5u:
          *(_WORD *)(a1 + 96) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 6u:
          *(_WORD *)(a1 + 96) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 7u:
          *(_WORD *)(a1 + 96) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 8u:
          *(_WORD *)(a1 + 96) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 9u:
          *(_WORD *)(a1 + 96) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 0xAu:
          *(_WORD *)(a1 + 96) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_54;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_58;
        case 0xBu:
          *(_WORD *)(a1 + 96) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_58:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_54:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903C1E3C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 96);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56));
    __int16 v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x400) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(result + 96) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
    if ((*(_WORD *)(v3 + 96) & 1) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5);
}

void *sub_1903C1FA8(void *result)
{
  *uint64_t result = &unk_1EDFCE6F0;
  result[1] = 0;
  return result;
}

void sub_1903C1FC8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCE6F0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903C2048(PB::Base *a1)
{
  sub_1903C1FC8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C2080(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C20FC(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903C22F8(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903C2314(void *result)
{
  *uint64_t result = &unk_1EDFD4140;
  result[1] = 0;
  return result;
}

void sub_1903C2334(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFD4140;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903C23B4(PB::Base *a1)
{
  sub_1903C2334(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C23EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C2468(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903C2664(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_1903C2680(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB7B0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1903C26A8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C26E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if (v5)
  {
    PB::TextFormatter::format(this, "begin", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "bin");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "end", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "kValue", *(double *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 40) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "state");
LABEL_7:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C27C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 40) |= 8u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_67;
                  }
                  unint64_t v35 = v20++;
                  char v36 = *(unsigned char *)(v21 + v35);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_66;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_66:
                unint64_t v2 = v35 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_67;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_67:
              *(_DWORD *)(a1 + 32) = v24;
              goto LABEL_73;
            case 2u:
              *(unsigned char *)(a1 + 40) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_46;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_62;
            case 3u:
              *(unsigned char *)(a1 + 40) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_46;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_62;
            case 4u:
              *(unsigned char *)(a1 + 40) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_72;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_71:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_72;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_71;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_72;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_72:
              *(_DWORD *)(a1 + 36) = v31;
LABEL_73:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(unsigned char *)(a1 + 40) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_62:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_46:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_73;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_73;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903C2BE0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 40) & 4) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903C2CA4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC000;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_1903C2CCC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C2D04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 92);
  if (v5)
  {
    PB::TextFormatter::format(this, "distance", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "gpsSource", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "kvalue", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "kvalueTrack", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "percentGrade", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "runningFormStrideLength", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "runningFormStrideLengthMetrics");
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "session");
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 72));
  if ((*(_WORD *)(a1 + 92) & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "steps");
LABEL_14:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C2EC8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 2u:
              *(_WORD *)(a1 + 92) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 3u:
              *(_WORD *)(a1 + 92) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 4u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 5u:
              *(_WORD *)(a1 + 92) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x800u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_99;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_98:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_99;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_98;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_99;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_99:
              *(_DWORD *)(a1 + 88) = v25;
              goto LABEL_110;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x400u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_104;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_103:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_104;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_103;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_104;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_104:
              *(_DWORD *)(a1 + 84) = v31;
              goto LABEL_110;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 9u:
              *(_WORD *)(a1 + 92) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
LABEL_94:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_110;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x200u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_108:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_108;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 80) = v37;
LABEL_110:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_110;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903C353C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x100) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 72));
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
    if ((*(_WORD *)(v3 + 92) & 0x200) == 0) {
      return result;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x40) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 0x200) == 0) {
    return result;
  }
LABEL_25:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903C36C4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD0758;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_1903C36EC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C3724(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "classifierCall");
    __int16 v5 = *(_WORD *)(a1 + 56);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "featureSlope", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "maxAccel", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "maxMinPressure", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "model");
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "sCal", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "slopeNxCorr", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "state");
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 1) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "timestamp");
  __int16 v5 = *(_WORD *)(a1 + 56);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "xCorr", *(float *)(a1 + 48));
  if ((*(_WORD *)(a1 + 56) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "zoh");
LABEL_13:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C38C8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 56) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  unint64_t v49 = v20++;
                  char v50 = *(unsigned char *)(v21 + v49);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_107;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_107:
                unint64_t v2 = v49 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_108;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_108:
              *(void *)(a1 + 8) = v24;
              goto LABEL_124;
            case 2u:
              *(_WORD *)(a1 + 56) |= 0x20u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_113;
                  }
                  unint64_t v53 = v27++;
                  char v54 = *(unsigned char *)(v28 + v53);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_112:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_112;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_113;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 32) = v31;
              goto LABEL_124;
            case 3u:
              *(_WORD *)(a1 + 56) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_71;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_103;
            case 4u:
              *(_WORD *)(a1 + 56) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_71;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_103;
            case 5u:
              *(_WORD *)(a1 + 56) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_71;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_103;
            case 6u:
              *(_WORD *)(a1 + 56) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_71;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_103;
            case 7u:
              *(_WORD *)(a1 + 56) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_71;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_103;
            case 8u:
              *(_WORD *)(a1 + 56) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 52) = v34;
              goto LABEL_124;
            case 9u:
              *(_WORD *)(a1 + 56) |= 2u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_118;
                  }
                  unint64_t v57 = v35++;
                  char v58 = *(unsigned char *)(v36 + v57);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_117:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_117;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_118;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 16) = v39;
              goto LABEL_124;
            case 0xAu:
              *(_WORD *)(a1 + 56) |= 0x100u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_123;
                  }
                  unint64_t v61 = v41++;
                  char v62 = *(unsigned char *)(v42 + v61);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_122:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_123;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_122;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_123;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_123:
              *(_DWORD *)(a1 + 44) = v45;
LABEL_124:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 56) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_103:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_71:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_124;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_124;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903C3FC0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 56);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    __int16 v4 = *(_WORD *)(v3 + 56);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 56) & 0x40) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 56);
  if ((v4 & 0x100) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    return result;
  }
LABEL_23:
  float v5 = *(float *)(v3 + 36);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903C412C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCF18;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1903C4154(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C418C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dirAngleRad", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "extremaVal", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "peakTimestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "valleyTimestamp", *(double *)(a1 + 16));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C4250(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_30;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_30:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903C44D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 28));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if (v4) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903C4578(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD08E0;
  *(_DWORD *)(result + 36) = -1;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1903C45A8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C45E0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "location");
    char v5 = *(unsigned char *)(a1 + 44);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 44) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "peakHalfWidth", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "peakMagnitude", *(float *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "tapAcceptStatus");
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "tapCounter");
  if ((*(unsigned char *)(a1 + 44) & 2) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C4704(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 44) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 2u:
              *(unsigned char *)(a1 + 44) |= 4u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_85:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_85;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_97;
            case 3u:
              *(unsigned char *)(a1 + 44) |= 0x20u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_90:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_90;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_97;
            case 4u:
              *(unsigned char *)(a1 + 44) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_47;
            case 5u:
              *(unsigned char *)(a1 + 44) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_47:
              unint64_t v2 = *((void *)this + 1) + 4;
              goto LABEL_81;
            case 6u:
              *(unsigned char *)(a1 + 44) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_80:
                unint64_t v2 = *((void *)this + 1) + 8;
LABEL_81:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_50:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_97;
            case 7u:
              *(unsigned char *)(a1 + 44) |= 0x40u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_95:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_95;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_96;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_96:
              *(_DWORD *)(a1 + 40) = v37;
LABEL_97:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_97;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903C4C54(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 44);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 44) & 0x40) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 44);
  if (v4) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x40) == 0) {
    return result;
  }
LABEL_15:

  return PB::Writer::writeVarInt(this);
}

double sub_1903C4D50(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFD0918;
  *(_DWORD *)(a1 + 28) = -2;
  double result = NAN;
  *(_OWORD *)(a1 + 52) = xmmword_1906052B0;
  return result;
}

void sub_1903C4D88(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C4DC0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "axis");
    __int16 v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "clippedPeakType");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "direction");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "location");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "peakHalfWidth", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "peakMagnitude", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "peakValue", *(float *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "strideDirection");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "tapDetectStatus");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  if ((*(_WORD *)(a1 + 64) & 0x800) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "widthCalculationMethod");
LABEL_14:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C4F84(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_88;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_139;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x20u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_145;
                  }
                  unint64_t v65 = v21++;
                  char v66 = *(unsigned char *)(v22 + v65);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_144:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_145;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_144;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_145;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_145:
              *(_DWORD *)(a1 + 36) = v25;
              goto LABEL_176;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_150;
                  }
                  unint64_t v69 = v27++;
                  char v70 = *(unsigned char *)(v28 + v69);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_149:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_150;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_149;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_150;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_150:
              *(_DWORD *)(a1 + 56) = v31;
              goto LABEL_176;
            case 4u:
              *(_WORD *)(a1 + 64) |= 4u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_155;
                  }
                  unint64_t v73 = v33++;
                  char v74 = *(unsigned char *)(v34 + v73);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_154:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_155;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_154;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_155;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_155:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_176;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_160;
                  }
                  unint64_t v77 = v39++;
                  char v78 = *(unsigned char *)(v40 + v77);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_159:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_160;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_159;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_160;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_160:
              *(_DWORD *)(a1 + 32) = v43;
              goto LABEL_176;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_165;
                  }
                  unint64_t v81 = v45++;
                  char v82 = *(unsigned char *)(v46 + v81);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_164:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_165;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_164;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_165;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_165:
              *(_DWORD *)(a1 + 52) = v49;
              goto LABEL_176;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x800u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v83 = 0;
                unsigned int v84 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_170;
                  }
                  unint64_t v85 = v51++;
                  char v86 = *(unsigned char *)(v52 + v85);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v86 & 0x7F) << v83;
                  if ((v86 & 0x80) == 0) {
                    break;
                  }
                  v83 += 7;
                  BOOL v14 = v84++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_169:
                    unint64_t v2 = v85 + 1;
                    goto LABEL_170;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_169;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_170;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_170:
              *(_DWORD *)(a1 + 60) = v55;
              goto LABEL_176;
            case 8u:
              *(_WORD *)(a1 + 64) |= 8u;
              unint64_t v57 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v58 = *(void *)this;
              if (v57 > 0xFFFFFFFFFFFFFFF5 || v57 + 10 > v2)
              {
                char v87 = 0;
                unsigned int v88 = 0;
                uint64_t v61 = 0;
                if (v2 <= v57) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v57)
                  {
                    LODWORD(v61) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_175;
                  }
                  unint64_t v89 = v57++;
                  char v90 = *(unsigned char *)(v58 + v89);
                  *((void *)this + 1) = v57;
                  v61 |= (unint64_t)(v90 & 0x7F) << v87;
                  if ((v90 & 0x80) == 0) {
                    break;
                  }
                  v87 += 7;
                  BOOL v14 = v88++ > 8;
                  if (v14)
                  {
                    LODWORD(v61) = 0;
LABEL_174:
                    unint64_t v2 = v89 + 1;
                    goto LABEL_175;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v61) = 0;
                }
                goto LABEL_174;
              }
              char v59 = 0;
              unsigned int v60 = 0;
              uint64_t v61 = 0;
              do
              {
                unint64_t v2 = v57 + 1;
                *((void *)this + 1) = v57 + 1;
                char v62 = *(unsigned char *)(v58 + v57);
                v61 |= (unint64_t)(v62 & 0x7F) << v59;
                if ((v62 & 0x80) == 0) {
                  goto LABEL_175;
                }
                v59 += 7;
                unint64_t v57 = v2;
                BOOL v14 = v60++ > 8;
              }
              while (!v14);
              LODWORD(v61) = 0;
LABEL_175:
              *(_DWORD *)(a1 + 28) = v61;
LABEL_176:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_88;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_85;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_88;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_85;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_88;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
LABEL_85:
              unint64_t v2 = *((void *)this + 1) + 4;
              goto LABEL_140;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_139:
                unint64_t v2 = *((void *)this + 1) + 8;
LABEL_140:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_88:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_176;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_176;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903C58D0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 64);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x40) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
    if ((*(_WORD *)(v3 + 64) & 1) == 0) {
      return result;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_25:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903C5A58(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCFA68;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 80) = 0;
  *(_DWORD *)(result + 104) = 0;
  return result;
}

void sub_1903C5A84(PB::Base *this)
{
  *(void *)this = &unk_1EDFCFA68;
  uint64_t v2 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1903C5B18(PB::Base *a1)
{
  sub_1903C5A84(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C5B50(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(_WORD *)(a1 + 104)) {
    PB::TextFormatter::format(this, "auxiliaryIosTimeUncertainty", *(double *)(a1 + 32));
  }
  double v5 = *(float **)(a1 + 8);
  __int16 v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "filteredAcceleration", v7);
  }
  __int16 v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "quiescentMode");
    __int16 v8 = *(_WORD *)(a1 + 104);
    if ((v8 & 0x80) == 0)
    {
LABEL_7:
      if ((v8 & 2) == 0) {
        goto LABEL_8;
      }
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_7;
  }
  PB::TextFormatter::format(this, "quiescentNoise", *(float *)(a1 + 92));
  __int16 v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_8:
    if ((v8 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "sensorTimeBeforeAlignment", *(double *)(a1 + 40));
  __int16 v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_9:
    if ((v8 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "sentCftime", *(double *)(a1 + 48));
  __int16 v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_10:
    if ((v8 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "sequenceNumber");
  __int16 v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 8) == 0)
  {
LABEL_11:
    if ((v8 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "sourceIosTimeUncertainty", *(double *)(a1 + 56));
  __int16 v8 = *(_WORD *)(a1 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_12:
    if ((v8 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(this, "sourceReceiveCftime", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 104) & 0x20) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "sourceReceiveSensorTimestamp", *(double *)(a1 + 72));
LABEL_14:
  uint64_t v9 = *(void *)(a1 + 80);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, this, "super");
  }
  if ((*(_WORD *)(a1 + 104) & 0x200) != 0) {
    PB::TextFormatter::format(this, "version", *(float *)(a1 + 100));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903C5D40(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    __int16 v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if ((v13 & 7) == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v22 = *((void *)this + 1);
            unint64_t v23 = *((void *)this + 2);
            while (v22 < v23 && !*((unsigned char *)this + 24))
            {
              uint64_t v25 = *(char **)(a1 + 16);
              unint64_t v24 = *(void *)(a1 + 24);
              if ((unint64_t)v25 >= v24)
              {
                unint64_t v27 = (char *)*v8;
                uint64_t v28 = (v25 - (unsigned char *)*v8) >> 2;
                unint64_t v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62) {
                  goto LABEL_145;
                }
                uint64_t v30 = v24 - (void)v27;
                if (v30 >> 1 > v29) {
                  unint64_t v29 = v30 >> 1;
                }
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v29;
                }
                if (v31)
                {
                  char v32 = (char *)sub_190347D04(v9, v31);
                  unint64_t v27 = *(char **)(a1 + 8);
                  uint64_t v25 = *(char **)(a1 + 16);
                }
                else
                {
                  char v32 = 0;
                }
                unint64_t v33 = &v32[4 * v28];
                *(_DWORD *)unint64_t v33 = 0;
                char v26 = v33 + 4;
                while (v25 != v27)
                {
                  int v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *((_DWORD *)v33 - 1) = v34;
                  v33 -= 4;
                }
                *(void *)(a1 + 8) = v33;
                *(void *)(a1 + 16) = v26;
                *(void *)(a1 + 24) = &v32[4 * v31];
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v25 = 0;
                char v26 = v25 + 4;
              }
              *(void *)(a1 + 16) = v26;
              unint64_t v35 = *((void *)this + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v26 - 1) = *(_DWORD *)(*(void *)this + v35);
              unint64_t v23 = *((void *)this + 2);
              unint64_t v22 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v22;
            }
            PB::Reader::recallMark();
          }
          else
          {
            char v62 = *(char **)(a1 + 16);
            unint64_t v61 = *(void *)(a1 + 24);
            if ((unint64_t)v62 >= v61)
            {
              unsigned int v72 = (char *)*v8;
              uint64_t v73 = (v62 - (unsigned char *)*v8) >> 2;
              unint64_t v74 = v73 + 1;
              if ((unint64_t)(v73 + 1) >> 62) {
LABEL_145:
              }
                sub_1903479E8();
              uint64_t v75 = v61 - (void)v72;
              if (v75 >> 1 > v74) {
                unint64_t v74 = v75 >> 1;
              }
              if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v76 = v74;
              }
              if (v76)
              {
                unint64_t v77 = (char *)sub_190347D04(v9, v76);
                unsigned int v72 = *(char **)(a1 + 8);
                char v62 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v77 = 0;
              }
              char v78 = &v77[4 * v73];
              *(_DWORD *)char v78 = 0;
              char v63 = v78 + 4;
              while (v62 != v72)
              {
                int v79 = *((_DWORD *)v62 - 1);
                v62 -= 4;
                *((_DWORD *)v78 - 1) = v79;
                v78 -= 4;
              }
              *(void *)(a1 + 8) = v78;
              *(void *)(a1 + 16) = v63;
              *(void *)(a1 + 24) = &v77[4 * v76];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(_DWORD *)char v62 = 0;
              char v63 = v62 + 4;
            }
            *(void *)(a1 + 16) = v63;
            unint64_t v80 = *((void *)this + 1);
            if (v80 <= 0xFFFFFFFFFFFFFFFBLL && v80 + 4 <= *((void *)this + 2))
            {
              *(v63 - 1) = *(_DWORD *)(*(void *)this + v80);
LABEL_133:
              uint64_t v60 = *((void *)this + 1) + 4;
LABEL_134:
              *((void *)this + 1) = v60;
            }
            else
            {
LABEL_131:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_135:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 3u:
          *(_WORD *)(a1 + 104) |= 0x80u;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_133;
        case 4u:
          *(_WORD *)(a1 + 104) |= 0x40u;
          unint64_t v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          uint64_t v39 = *(void *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_118;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v16 = v41++ > 8;
            }
            while (!v16);
LABEL_98:
            LODWORD(v42) = 0;
            goto LABEL_118;
          }
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)this + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v66 = v37 + 1;
              char v67 = *(unsigned char *)(v39 + v37);
              *((void *)this + 1) = v66;
              v42 |= (unint64_t)(v67 & 0x7F) << v64;
              if (v67 < 0)
              {
                v64 += 7;
                unint64_t v37 = v66;
                BOOL v16 = v65++ > 8;
                if (v16) {
                  goto LABEL_98;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v42) = 0;
              }
            }
            break;
          }
LABEL_118:
          *(_DWORD *)(a1 + 88) = v42;
          goto LABEL_135;
        case 5u:
          *(_WORD *)(a1 + 104) |= 0x100u;
          unint64_t v45 = *((void *)this + 1);
          unint64_t v46 = *((void *)this + 2);
          uint64_t v47 = *(void *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_121;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v16 = v49++ > 8;
            }
            while (!v16);
LABEL_105:
            LODWORD(v50) = 0;
            goto LABEL_121;
          }
          char v68 = 0;
          unsigned int v69 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)this + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v70 = v45 + 1;
              char v71 = *(unsigned char *)(v47 + v45);
              *((void *)this + 1) = v70;
              v50 |= (unint64_t)(v71 & 0x7F) << v68;
              if (v71 < 0)
              {
                v68 += 7;
                unint64_t v45 = v70;
                BOOL v16 = v69++ > 8;
                if (v16) {
                  goto LABEL_105;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v50) = 0;
              }
            }
            break;
          }
LABEL_121:
          *(_DWORD *)(a1 + 96) = v50;
          goto LABEL_135;
        case 6u:
          *(_WORD *)(a1 + 104) |= 0x200u;
          unint64_t v53 = *((void *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v53);
          goto LABEL_133;
        case 7u:
          *(_WORD *)(a1 + 104) |= 2u;
          unint64_t v54 = *((void *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v54);
          goto LABEL_89;
        case 8u:
          *(_WORD *)(a1 + 104) |= 4u;
          unint64_t v55 = *((void *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFF7 || v55 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v55);
          goto LABEL_89;
        case 9u:
          *(_WORD *)(a1 + 104) |= 0x10u;
          unint64_t v56 = *((void *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFF7 || v56 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v56);
          goto LABEL_89;
        case 0xAu:
          *(_WORD *)(a1 + 104) |= 0x20u;
          unint64_t v57 = *((void *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFF7 || v57 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v57);
          goto LABEL_89;
        case 0xBu:
          *(_WORD *)(a1 + 104) |= 1u;
          unint64_t v58 = *((void *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v58);
          goto LABEL_89;
        case 0xCu:
          *(_WORD *)(a1 + 104) |= 8u;
          unint64_t v59 = *((void *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFF7 || v59 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v59);
LABEL_89:
          uint64_t v60 = *((void *)this + 1) + 8;
          goto LABEL_134;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_135;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903C6530(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 80);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  double v5 = *(float **)(v3 + 8);
  __int16 v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7);
  }
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
    __int16 v8 = *(_WORD *)(v3 + 104);
    if ((v8 & 0x40) == 0)
    {
LABEL_8:
      if ((v8 & 0x100) == 0) {
        goto LABEL_9;
      }
      goto LABEL_19;
    }
  }
  else if ((v8 & 0x40) == 0)
  {
    goto LABEL_8;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x100) == 0)
  {
LABEL_9:
    if ((v8 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x200) == 0)
  {
LABEL_10:
    if ((v8 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 2) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x10) == 0)
  {
LABEL_13:
    if ((v8 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v8 = *(_WORD *)(v3 + 104);
  if ((v8 & 0x20) == 0)
  {
LABEL_14:
    if ((v8 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
    if ((*(_WORD *)(v3 + 104) & 8) == 0) {
      return result;
    }
    goto LABEL_26;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  __int16 v8 = *(_WORD *)(v3 + 104);
  if (v8) {
    goto LABEL_25;
  }
LABEL_15:
  if ((v8 & 8) == 0) {
    return result;
  }
LABEL_26:
  double v9 = *(double *)(v3 + 56);

  return PB::Writer::write(this, v9);
}

uint64_t sub_1903C66C0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF800;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 96) = 0;
  return result;
}

void sub_1903C66E8(PB::Base *this)
{
  *(void *)this = &unk_1EDFCF800;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903C674C(PB::Base *a1)
{
  sub_1903C66E8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C6784(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "angularVelocityConstraintRps", *(float *)(a1 + 72));
    __int16 v5 = *(_WORD *)(a1 + 96);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "consumedAuxTimestamp", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "dthetaNormRad", *(float *)(a1 + 76));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x400) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "inBTZ");
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "listenerPitch", *(float *)(a1 + 80));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "listenerRoll", *(float *)(a1 + 84));
  __int16 v5 = *(_WORD *)(a1 + 96);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_25:
  PB::TextFormatter::format(this, "listenerYaw", *(float *)(a1 + 88));
  if ((*(_WORD *)(a1 + 96) & 2) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "machAbsTimestamp", *(double *)(a1 + 40));
LABEL_10:
  __int16 v6 = *(float **)(a1 + 8);
  float v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "quaternion", v8);
  }
  __int16 v9 = *(_WORD *)(a1 + 96);
  if ((v9 & 4) != 0)
  {
    PB::TextFormatter::format(this, "receivedAuxTimestamp", *(double *)(a1 + 48));
    __int16 v9 = *(_WORD *)(a1 + 96);
    if ((v9 & 8) == 0)
    {
LABEL_14:
      if ((v9 & 0x10) == 0) {
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  else if ((v9 & 8) == 0)
  {
    goto LABEL_14;
  }
  PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 56));
  if ((*(_WORD *)(a1 + 96) & 0x10) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
LABEL_16:

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903C6964(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 96) |= 0x10u;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v22);
          goto LABEL_81;
        case 2u:
          *(_WORD *)(a1 + 96) |= 0x200u;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v23);
          goto LABEL_106;
        case 3u:
          *(_WORD *)(a1 + 96) |= 0x80u;
          unint64_t v24 = *((void *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v24);
          goto LABEL_106;
        case 4u:
          *(_WORD *)(a1 + 96) |= 0x100u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v25);
          goto LABEL_106;
        case 5u:
          if ((v13 & 7) == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v26 = *((void *)this + 1);
            unint64_t v27 = *((void *)this + 2);
            while (v26 < v27 && !*((unsigned char *)this + 24))
            {
              unint64_t v29 = *(char **)(a1 + 16);
              unint64_t v28 = *(void *)(a1 + 24);
              if ((unint64_t)v29 >= v28)
              {
                unint64_t v31 = (char *)*v8;
                uint64_t v32 = (v29 - (unsigned char *)*v8) >> 2;
                unint64_t v33 = v32 + 1;
                if ((unint64_t)(v32 + 1) >> 62) {
                  goto LABEL_116;
                }
                uint64_t v34 = v28 - (void)v31;
                if (v34 >> 1 > v33) {
                  unint64_t v33 = v34 >> 1;
                }
                if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v35 = v33;
                }
                if (v35)
                {
                  unint64_t v36 = (char *)sub_190347D04(v9, v35);
                  unint64_t v31 = *(char **)(a1 + 8);
                  unint64_t v29 = *(char **)(a1 + 16);
                }
                else
                {
                  unint64_t v36 = 0;
                }
                unint64_t v37 = &v36[4 * v32];
                *(_DWORD *)unint64_t v37 = 0;
                uint64_t v30 = v37 + 4;
                while (v29 != v31)
                {
                  int v38 = *((_DWORD *)v29 - 1);
                  v29 -= 4;
                  *((_DWORD *)v37 - 1) = v38;
                  v37 -= 4;
                }
                *(void *)(a1 + 8) = v37;
                *(void *)(a1 + 16) = v30;
                *(void *)(a1 + 24) = &v36[4 * v35];
                if (v31) {
                  operator delete(v31);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v29 = 0;
                uint64_t v30 = v29 + 4;
              }
              *(void *)(a1 + 16) = v30;
              unint64_t v39 = *((void *)this + 1);
              if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v30 - 1) = *(_DWORD *)(*(void *)this + v39);
              unint64_t v27 = *((void *)this + 2);
              unint64_t v26 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v26;
            }
            PB::Reader::recallMark();
          }
          else
          {
            char v52 = *(char **)(a1 + 16);
            unint64_t v51 = *(void *)(a1 + 24);
            if ((unint64_t)v52 >= v51)
            {
              unint64_t v54 = (char *)*v8;
              uint64_t v55 = (v52 - (unsigned char *)*v8) >> 2;
              unint64_t v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62) {
LABEL_116:
              }
                sub_1903479E8();
              uint64_t v57 = v51 - (void)v54;
              if (v57 >> 1 > v56) {
                unint64_t v56 = v57 >> 1;
              }
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v56;
              }
              if (v58)
              {
                unint64_t v59 = (char *)sub_190347D04(v9, v58);
                unint64_t v54 = *(char **)(a1 + 8);
                char v52 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v59 = 0;
              }
              uint64_t v60 = &v59[4 * v55];
              *(_DWORD *)uint64_t v60 = 0;
              unint64_t v53 = v60 + 4;
              while (v52 != v54)
              {
                int v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *(void *)(a1 + 8) = v60;
              *(void *)(a1 + 16) = v53;
              *(void *)(a1 + 24) = &v59[4 * v58];
              if (v54) {
                operator delete(v54);
              }
            }
            else
            {
              *(_DWORD *)char v52 = 0;
              unint64_t v53 = v52 + 4;
            }
            *(void *)(a1 + 16) = v53;
            unint64_t v62 = *((void *)this + 1);
            if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *((void *)this + 2))
            {
              *(v53 - 1) = *(_DWORD *)(*(void *)this + v62);
LABEL_106:
              uint64_t v50 = *((void *)this + 1) + 4;
LABEL_107:
              *((void *)this + 1) = v50;
            }
            else
            {
LABEL_104:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_108:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 6u:
          *(_WORD *)(a1 + 96) |= 0x400u;
          unint64_t v40 = *((void *)this + 1);
          if (v40 >= *((void *)this + 2))
          {
            BOOL v43 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v41 = v40 + 1;
            int v42 = *(unsigned __int8 *)(*(void *)this + v40);
            *((void *)this + 1) = v41;
            BOOL v43 = v42 != 0;
          }
          *(unsigned char *)(a1 + 92) = v43;
          goto LABEL_108;
        case 7u:
          *(_WORD *)(a1 + 96) |= 0x20u;
          unint64_t v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v44);
          goto LABEL_106;
        case 8u:
          *(_WORD *)(a1 + 96) |= 0x40u;
          unint64_t v45 = *((void *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v45);
          goto LABEL_106;
        case 9u:
          *(_WORD *)(a1 + 96) |= 8u;
          unint64_t v46 = *((void *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFF7 || v46 + 8 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v46);
          goto LABEL_81;
        case 0xAu:
          *(_WORD *)(a1 + 96) |= 1u;
          unint64_t v47 = *((void *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFF7 || v47 + 8 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v47);
          goto LABEL_81;
        case 0xBu:
          *(_WORD *)(a1 + 96) |= 4u;
          unint64_t v48 = *((void *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v48);
          goto LABEL_81;
        case 0xCu:
          *(_WORD *)(a1 + 96) |= 2u;
          unint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((void *)this + 2)) {
            goto LABEL_104;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v49);
LABEL_81:
          uint64_t v50 = *((void *)this + 1) + 8;
          goto LABEL_107;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_108;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903C6FA8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 96);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64));
    __int16 v4 = *(_WORD *)(v3 + 96);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
LABEL_19:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
      if ((*(_WORD *)(v3 + 96) & 0x100) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(_WORD *)(result + 96) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  __int16 v4 = *(_WORD *)(v3 + 96);
  if ((v4 & 0x80) != 0) {
    goto LABEL_19;
  }
LABEL_4:
  if ((v4 & 0x100) != 0) {
LABEL_5:
  }
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
LABEL_6:
  __int16 v5 = *(float **)(v3 + 8);
  __int16 v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7);
  }
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x400) != 0)
  {
    uint64_t result = PB::Writer::write(this);
    __int16 v8 = *(_WORD *)(v3 + 96);
    if ((v8 & 0x20) == 0)
    {
LABEL_11:
      if ((v8 & 0x40) == 0) {
        goto LABEL_12;
      }
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x20) == 0)
  {
    goto LABEL_11;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 0x40) == 0)
  {
LABEL_12:
    if ((v8 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 8) == 0)
  {
LABEL_13:
    if ((v8 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 1) == 0)
  {
LABEL_14:
    if ((v8 & 4) == 0) {
      goto LABEL_15;
    }
LABEL_26:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
    if ((*(_WORD *)(v3 + 96) & 2) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v8 = *(_WORD *)(v3 + 96);
  if ((v8 & 4) != 0) {
    goto LABEL_26;
  }
LABEL_15:
  if ((v8 & 2) == 0) {
    return result;
  }
LABEL_27:
  double v9 = *(double *)(v3 + 40);

  return PB::Writer::write(this, v9);
}

void *sub_1903C7140(void *result)
{
  *uint64_t result = &unk_1EDFD0950;
  result[2] = 0;
  return result;
}

void sub_1903C7168(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C71A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "source");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C721C(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v26 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v27 = *(void *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              uint64_t v30 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v39 = v26++;
            char v40 = *(unsigned char *)(v27 + v39);
            *((void *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0) {
              break;
            }
            v37 += 7;
            BOOL v14 = v38++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v30 = 0;
          }
LABEL_63:
          unint64_t v3 = v39 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)this + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              uint64_t v30 = 0;
              break;
            }
          }
        }
LABEL_64:
        *(void *)(a1 + 8) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v35 = v20++;
            char v36 = *(unsigned char *)(v21 + v35);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0) {
              break;
            }
            v33 += 7;
            BOOL v14 = v34++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_59:
          unint64_t v3 = v35 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v3 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v3;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903C7548(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903C75B4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCBCB8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1903C75DC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C7614(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "touchDetected");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C7690(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *(unsigned char *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903C7878(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(this);
  }
  return result;
}

uint64_t sub_1903C78E4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB7E8;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1903C790C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C7944(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if (v5)
  {
    PB::TextFormatter::format(this, "distanceToTrackMeters", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "estimatedLaneConfidence");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "estimatedLaneNumber");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "laneCount");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "laneNumber");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "odometerHasBeenCorrected");
  if ((*(unsigned char *)(a1 + 40) & 0x20) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "trackProximity");
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C7A68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 40) |= 0x10u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  unint64_t v55 = v20++;
                  char v56 = *(unsigned char *)(v21 + v55);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_105;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_105:
                unint64_t v2 = v55 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_106;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_106:
              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_127;
            case 2u:
              *(unsigned char *)(a1 + 40) |= 4u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_111;
                  }
                  unint64_t v59 = v27++;
                  char v60 = *(unsigned char *)(v28 + v59);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_110:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_110;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_111;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 20) = v31;
              goto LABEL_127;
            case 3u:
              *(unsigned char *)(a1 + 40) |= 8u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_116;
                  }
                  unint64_t v63 = v33++;
                  char v64 = *(unsigned char *)(v34 + v63);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_115:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_115;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_116;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 24) = v37;
              goto LABEL_127;
            case 4u:
              *(unsigned char *)(a1 + 40) |= 2u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_121;
                  }
                  unint64_t v67 = v39++;
                  char v68 = *(unsigned char *)(v40 + v67);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_120:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_121;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_120;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_121;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_121:
              *(_DWORD *)(a1 + 16) = v43;
              goto LABEL_127;
            case 5u:
              *(unsigned char *)(a1 + 40) |= 0x20u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_126;
                  }
                  unint64_t v71 = v45++;
                  char v72 = *(unsigned char *)(v46 + v71);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_125:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_126;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_125;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_126;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_126:
              *(_DWORD *)(a1 + 32) = v49;
LABEL_127:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 6u:
              *(unsigned char *)(a1 + 40) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_127;
            case 7u:
              *(unsigned char *)(a1 + 40) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v52 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v51 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v52 = v51 != 0;
              }
              *(unsigned char *)(a1 + 36) = v52;
              goto LABEL_127;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_127;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903C8124(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 40) & 0x40) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x40) == 0) {
    return result;
  }
LABEL_15:

  return PB::Writer::write(this);
}

uint64_t sub_1903C8220(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD0790;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_1903C8248(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C8280(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 56);
  if (v5)
  {
    PB::TextFormatter::format(this, "cycleIndex");
    char v5 = *(unsigned char *)(a1 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "error");
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "machAbsoluteTimestamp", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "range", *(double *)(a1 + 40));
  if ((*(unsigned char *)(a1 + 56) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "rssi", *(double *)(a1 + 48));
LABEL_8:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C8384(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 56) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_49;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_65;
            case 2u:
              *(unsigned char *)(a1 + 56) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_49;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_65;
            case 3u:
              *(unsigned char *)(a1 + 56) |= 1u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_70;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_69:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_70;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_69;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_70;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_70:
              *(void *)(a1 + 8) = v25;
              goto LABEL_76;
            case 4u:
              *(unsigned char *)(a1 + 56) |= 2u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_75;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_74:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_75;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_74;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_75;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_75:
              *(void *)(a1 + 16) = v31;
LABEL_76:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(unsigned char *)(a1 + 56) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_49;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_65;
            case 6u:
              *(unsigned char *)(a1 + 56) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
LABEL_65:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_49:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_76;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_76;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903C87DC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 56);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
    if ((*(unsigned char *)(v3 + 56) & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 48);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903C88BC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC038;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1903C88E4(PB::Base *this)
{
  *(void *)this = &unk_1EDFCC038;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903C8968(PB::Base *a1)
{
  sub_1903C88E4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C89A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 24)) {
    PB::TextFormatter::format(this, "aopTimestamp");
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C8A38(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v21 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)this + 1);
          }
          while (1)
          {
            if (v21 == v20)
            {
              uint64_t v25 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v31 = v20 + 1;
            char v32 = *(unsigned char *)(v22 + v20);
            *((void *)this + 1) = v31;
            v25 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v20 = v31;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
LABEL_39:
              uint64_t v25 = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v25 = 0;
          }
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v26 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v27 = *(unsigned char *)(v22 + v20);
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if ((v27 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v20 = v26;
            BOOL v14 = v24++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *(void *)(a1 + 8) = v25;
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903C8D24(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 16);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  if (*(unsigned char *)(v3 + 24))
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903C8D8C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC070;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1903C8DB0(PB::Base *this)
{
  *(void *)this = &unk_1EDFCC070;
  uint64_t v4 = *((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *unint64_t v2 = 0;
  if (v4) {
    sub_1903478E8((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

void sub_1903C8E14(PB::Base *a1)
{
  sub_1903C8DB0(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C8E4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format();
  }
  if (*(unsigned char *)(a1 + 24)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903C8EC4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2) {
        operator new();
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v20);
          *((void *)this + 1) += 8;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903C90CC(uint64_t result, PB::Writer *this)
{
  uint64_t v2 = result;
  if (*(unsigned char *)(result + 24)) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
  }
  if (*(void *)(v2 + 8))
  {
    return PB::Writer::write();
  }
  return result;
}

double sub_1903C9134(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCBCF0;
  *(void *)(a1 + 336) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  return result;
}

void sub_1903C91A4(PB::Base *this)
{
  *(void *)this = &unk_1EDFCBCF0;
  uint64_t v2 = (void *)*((void *)this + 34);
  if (v2)
  {
    *((void *)this + 35) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 31);
  if (v3)
  {
    *((void *)this + 32) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 28);
  if (v4)
  {
    *((void *)this + 29) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 25);
  if (v5)
  {
    *((void *)this + 26) = v5;
    operator delete(v5);
  }
  __int16 v6 = (void *)*((void *)this + 22);
  if (v6)
  {
    *((void *)this + 23) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 19);
  if (v7)
  {
    *((void *)this + 20) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 16);
  if (v8)
  {
    *((void *)this + 17) = v8;
    operator delete(v8);
  }
  char v9 = (void *)*((void *)this + 13);
  if (v9)
  {
    *((void *)this + 14) = v9;
    operator delete(v9);
  }
  unsigned int v10 = (void *)*((void *)this + 10);
  if (v10)
  {
    *((void *)this + 11) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 7);
  if (v11)
  {
    *((void *)this + 8) = v11;
    operator delete(v11);
  }
  unint64_t v12 = (void *)*((void *)this + 4);
  if (v12)
  {
    *((void *)this + 5) = v12;
    operator delete(v12);
  }
  char v13 = (void *)*((void *)this + 1);
  if (v13)
  {
    *((void *)this + 2) = v13;
    operator delete(v13);
  }

  PB::Base::~Base(this);
}

void sub_1903C92B8(PB::Base *a1)
{
  sub_1903C91A4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903C92F0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(double **)(a1 + 8);
  __int16 v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "accelBias", v7);
  }
  uint64_t v8 = *(double **)(a1 + 32);
  char v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "accelBiasCov", v10);
  }
  char v11 = *(unsigned char *)(a1 + 340);
  if ((v11 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "cameraImageResolutionHeight", *(float *)(a1 + 328));
    char v11 = *(unsigned char *)(a1 + 340);
  }
  if ((v11 & 0x20) != 0) {
    PB::TextFormatter::format(this, "cameraImageResolutionWidth", *(float *)(a1 + 332));
  }
  unint64_t v12 = *(double **)(a1 + 56);
  char v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(this, "cameraIntrinsics", v14);
  }
  char v15 = *(double **)(a1 + 80);
  unsigned int v16 = *(double **)(a1 + 88);
  while (v15 != v16)
  {
    double v17 = *v15++;
    PB::TextFormatter::format(this, "cameraPose", v17);
  }
  char v18 = *(double **)(a1 + 104);
  unint64_t v19 = *(double **)(a1 + 112);
  while (v18 != v19)
  {
    double v20 = *v18++;
    PB::TextFormatter::format(this, "gyroBias", v20);
  }
  unint64_t v21 = *(double **)(a1 + 128);
  uint64_t v22 = *(double **)(a1 + 136);
  while (v21 != v22)
  {
    double v23 = *v21++;
    PB::TextFormatter::format(this, "gyroBiasCov", v23);
  }
  char v24 = *(unsigned char *)(a1 + 340);
  if (v24)
  {
    PB::TextFormatter::format(this, "machContinuousOriginTimestamp", *(double *)(a1 + 296));
    char v24 = *(unsigned char *)(a1 + 340);
  }
  if ((v24 & 2) != 0) {
    PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 304));
  }
  uint64_t v25 = *(double **)(a1 + 176);
  unint64_t v26 = *(double **)(a1 + 184);
  while (v25 != v26)
  {
    double v27 = *v25++;
    PB::TextFormatter::format(this, "orientation", v27);
  }
  uint64_t v28 = *(double **)(a1 + 152);
  char v29 = *(double **)(a1 + 160);
  while (v28 != v29)
  {
    double v30 = *v28++;
    PB::TextFormatter::format(this, "orientationCov", v30);
  }
  if ((*(unsigned char *)(a1 + 340) & 4) != 0) {
    PB::TextFormatter::format(this, "originTimestamp", *(double *)(a1 + 312));
  }
  unint64_t v31 = *(double **)(a1 + 224);
  char v32 = *(double **)(a1 + 232);
  while (v31 != v32)
  {
    double v33 = *v31++;
    PB::TextFormatter::format(this, "position", v33);
  }
  unsigned int v34 = *(double **)(a1 + 200);
  unint64_t v35 = *(double **)(a1 + 208);
  while (v34 != v35)
  {
    double v36 = *v34++;
    PB::TextFormatter::format(this, "positionCov", v36);
  }
  char v37 = *(unsigned char *)(a1 + 340);
  if ((v37 & 8) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 320));
    char v37 = *(unsigned char *)(a1 + 340);
  }
  if ((v37 & 0x40) != 0) {
    PB::TextFormatter::format(this, "trackingState");
  }
  unsigned int v38 = *(double **)(a1 + 272);
  unint64_t v39 = *(double **)(a1 + 280);
  while (v38 != v39)
  {
    double v40 = *v38++;
    PB::TextFormatter::format(this, "velocity", v40);
  }
  char v41 = *(double **)(a1 + 248);
  unsigned int v42 = *(double **)(a1 + 256);
  while (v41 != v42)
  {
    double v43 = *v41++;
    PB::TextFormatter::format(this, "velocityCov", v43);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903C9618(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v355 = (void **)(a1 + 56);
    uint64_t v347 = a1 + 72;
    uint64_t v354 = (void **)(a1 + 80);
    uint64_t v346 = a1 + 96;
    uint64_t v353 = (void **)(a1 + 200);
    uint64_t v352 = (void **)(a1 + 32);
    uint64_t v344 = a1 + 48;
    uint64_t v345 = a1 + 216;
    uint64_t v343 = a1 + 264;
    uint64_t v350 = (void **)(a1 + 128);
    uint64_t v351 = (void **)(a1 + 248);
    uint64_t v349 = (void **)(a1 + 152);
    uint64_t v341 = a1 + 168;
    uint64_t v342 = a1 + 144;
    uint64_t v348 = (void **)(a1 + 224);
    uint64_t v8 = (void **)(a1 + 8);
    uint64_t v339 = a1 + 24;
    uint64_t v340 = a1 + 240;
    char v9 = (void **)(a1 + 272);
    double v10 = (void **)(a1 + 104);
    uint64_t v337 = a1 + 120;
    uint64_t v338 = a1 + 288;
    char v11 = (void **)(a1 + 176);
    uint64_t v336 = a1 + 192;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 340) |= 0x40u;
          unint64_t v25 = *((void *)this + 1);
          unint64_t v26 = *((void *)this + 2);
          uint64_t v27 = *(void *)this;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            do
            {
              unint64_t v31 = v25 + 1;
              *((void *)this + 1) = v25 + 1;
              char v32 = *(unsigned char *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                goto LABEL_471;
              }
              v28 += 7;
              unint64_t v25 = v31;
              BOOL v18 = v29++ > 8;
            }
            while (!v18);
LABEL_347:
            LODWORD(v30) = 0;
            goto LABEL_471;
          }
          char v208 = 0;
          unsigned int v209 = 0;
          uint64_t v30 = 0;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)this + 1);
          }
          while (2)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v210 = v25 + 1;
              char v211 = *(unsigned char *)(v27 + v25);
              *((void *)this + 1) = v210;
              v30 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                unint64_t v25 = v210;
                BOOL v18 = v209++ > 8;
                if (v18) {
                  goto LABEL_347;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v30) = 0;
              }
            }
            break;
          }
LABEL_471:
          *(_DWORD *)(a1 + 336) = v30;
          goto LABEL_562;
        case 2u:
          *(unsigned char *)(a1 + 340) |= 4u;
          unint64_t v33 = *((void *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((void *)this + 2)) {
            goto LABEL_558;
          }
          *(void *)(a1 + 312) = *(void *)(*(void *)this + v33);
          goto LABEL_560;
        case 3u:
          *(unsigned char *)(a1 + 340) |= 1u;
          unint64_t v34 = *((void *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFF7 || v34 + 8 > *((void *)this + 2)) {
            goto LABEL_558;
          }
          *(void *)(a1 + 296) = *(void *)(*(void *)this + v34);
          goto LABEL_560;
        case 4u:
          *(unsigned char *)(a1 + 340) |= 8u;
          unint64_t v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFF7 || v35 + 8 > *((void *)this + 2)) {
            goto LABEL_558;
          }
          *(void *)(a1 + 320) = *(void *)(*(void *)this + v35);
          goto LABEL_560;
        case 5u:
          *(unsigned char *)(a1 + 340) |= 2u;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((void *)this + 2)) {
            goto LABEL_558;
          }
          *(void *)(a1 + 304) = *(void *)(*(void *)this + v36);
          goto LABEL_560;
        case 6u:
          if (v24 != 2)
          {
            unsigned int v213 = *(char **)(a1 + 184);
            unint64_t v212 = *(void *)(a1 + 192);
            if ((unint64_t)v213 >= v212)
            {
              uint64_t v237 = (char *)*v11;
              uint64_t v238 = (v213 - (unsigned char *)*v11) >> 3;
              unint64_t v239 = v238 + 1;
              if ((unint64_t)(v238 + 1) >> 61) {
LABEL_572:
              }
                sub_1903479E8();
              uint64_t v240 = v212 - (void)v237;
              if (v240 >> 2 > v239) {
                unint64_t v239 = v240 >> 2;
              }
              if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v241 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v241 = v239;
              }
              if (v241)
              {
                uint64_t v242 = (char *)sub_190347A00(v336, v241);
                uint64_t v237 = *(char **)(a1 + 176);
                unsigned int v213 = *(char **)(a1 + 184);
              }
              else
              {
                uint64_t v242 = 0;
              }
              uint64_t v309 = &v242[8 * v238];
              *(void *)uint64_t v309 = 0;
              unint64_t v214 = v309 + 8;
              while (v213 != v237)
              {
                uint64_t v310 = *((void *)v213 - 1);
                v213 -= 8;
                *((void *)v309 - 1) = v310;
                v309 -= 8;
              }
              *(void *)(a1 + 176) = v309;
              *(void *)(a1 + 184) = v214;
              *(void *)(a1 + 192) = &v242[8 * v241];
              if (v237) {
                operator delete(v237);
              }
            }
            else
            {
              *(void *)unsigned int v213 = 0;
              unint64_t v214 = v213 + 8;
            }
            *(void *)(a1 + 184) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          while (v37 < v38 && !*((unsigned char *)this + 24))
          {
            double v40 = *(char **)(a1 + 184);
            unint64_t v39 = *(void *)(a1 + 192);
            if ((unint64_t)v40 >= v39)
            {
              unsigned int v42 = (char *)*v11;
              uint64_t v43 = (v40 - (unsigned char *)*v11) >> 3;
              unint64_t v44 = v43 + 1;
              if ((unint64_t)(v43 + 1) >> 61) {
                goto LABEL_572;
              }
              uint64_t v45 = v39 - (void)v42;
              if (v45 >> 2 > v44) {
                unint64_t v44 = v45 >> 2;
              }
              if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v46 = v44;
              }
              if (v46)
              {
                char v47 = (char *)sub_190347A00(v336, v46);
                unsigned int v42 = *(char **)(a1 + 176);
                double v40 = *(char **)(a1 + 184);
              }
              else
              {
                char v47 = 0;
              }
              unsigned int v48 = &v47[8 * v43];
              *(void *)unsigned int v48 = 0;
              char v41 = v48 + 8;
              while (v40 != v42)
              {
                uint64_t v49 = *((void *)v40 - 1);
                v40 -= 8;
                *((void *)v48 - 1) = v49;
                v48 -= 8;
              }
              *(void *)(a1 + 176) = v48;
              *(void *)(a1 + 184) = v41;
              *(void *)(a1 + 192) = &v47[8 * v46];
              if (v42) {
                operator delete(v42);
              }
            }
            else
            {
              *(void *)double v40 = 0;
              char v41 = v40 + 8;
            }
            *(void *)(a1 + 184) = v41;
            unint64_t v50 = *((void *)this + 1);
            if (v50 > 0xFFFFFFFFFFFFFFF7 || v50 + 8 > *((void *)this + 2)) {
              goto LABEL_332;
            }
            *(v41 - 1) = *(void *)(*(void *)this + v50);
            unint64_t v38 = *((void *)this + 2);
            unint64_t v37 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v37;
          }
          goto LABEL_333;
        case 7u:
          if (v24 != 2)
          {
            char v216 = *(char **)(a1 + 112);
            unint64_t v215 = *(void *)(a1 + 120);
            if ((unint64_t)v216 >= v215)
            {
              uint64_t v243 = (char *)*v10;
              uint64_t v244 = (v216 - (unsigned char *)*v10) >> 3;
              unint64_t v245 = v244 + 1;
              if ((unint64_t)(v244 + 1) >> 61) {
LABEL_573:
              }
                sub_1903479E8();
              uint64_t v246 = v215 - (void)v243;
              if (v246 >> 2 > v245) {
                unint64_t v245 = v246 >> 2;
              }
              if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v247 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v247 = v245;
              }
              if (v247)
              {
                uint64_t v248 = (char *)sub_190347A00(v337, v247);
                uint64_t v243 = *(char **)(a1 + 104);
                char v216 = *(char **)(a1 + 112);
              }
              else
              {
                uint64_t v248 = 0;
              }
              uint64_t v311 = &v248[8 * v244];
              *(void *)uint64_t v311 = 0;
              unint64_t v214 = v311 + 8;
              while (v216 != v243)
              {
                uint64_t v312 = *((void *)v216 - 1);
                v216 -= 8;
                *((void *)v311 - 1) = v312;
                v311 -= 8;
              }
              *(void *)(a1 + 104) = v311;
              *(void *)(a1 + 112) = v214;
              *(void *)(a1 + 120) = &v248[8 * v247];
              if (v243) {
                operator delete(v243);
              }
            }
            else
            {
              *(void *)char v216 = 0;
              unint64_t v214 = v216 + 8;
            }
            *(void *)(a1 + 112) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v51 = *((void *)this + 1);
          unint64_t v52 = *((void *)this + 2);
          while (v51 < v52 && !*((unsigned char *)this + 24))
          {
            unsigned int v54 = *(char **)(a1 + 112);
            unint64_t v53 = *(void *)(a1 + 120);
            if ((unint64_t)v54 >= v53)
            {
              char v56 = (char *)*v10;
              uint64_t v57 = (v54 - (unsigned char *)*v10) >> 3;
              unint64_t v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 61) {
                goto LABEL_573;
              }
              uint64_t v59 = v53 - (void)v56;
              if (v59 >> 2 > v58) {
                unint64_t v58 = v59 >> 2;
              }
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v60 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v60 = v58;
              }
              if (v60)
              {
                char v61 = (char *)sub_190347A00(v337, v60);
                char v56 = *(char **)(a1 + 104);
                unsigned int v54 = *(char **)(a1 + 112);
              }
              else
              {
                char v61 = 0;
              }
              unsigned int v62 = &v61[8 * v57];
              *(void *)unsigned int v62 = 0;
              unint64_t v55 = v62 + 8;
              while (v54 != v56)
              {
                uint64_t v63 = *((void *)v54 - 1);
                v54 -= 8;
                *((void *)v62 - 1) = v63;
                v62 -= 8;
              }
              *(void *)(a1 + 104) = v62;
              *(void *)(a1 + 112) = v55;
              *(void *)(a1 + 120) = &v61[8 * v60];
              if (v56) {
                operator delete(v56);
              }
            }
            else
            {
              *(void *)unsigned int v54 = 0;
              unint64_t v55 = v54 + 8;
            }
            *(void *)(a1 + 112) = v55;
            unint64_t v64 = *((void *)this + 1);
            if (v64 > 0xFFFFFFFFFFFFFFF7 || v64 + 8 > *((void *)this + 2)) {
              goto LABEL_332;
            }
            *(v55 - 1) = *(void *)(*(void *)this + v64);
            unint64_t v52 = *((void *)this + 2);
            unint64_t v51 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v51;
          }
          goto LABEL_333;
        case 8u:
          if (v24 != 2)
          {
            unint64_t v218 = *(char **)(a1 + 280);
            unint64_t v217 = *(void *)(a1 + 288);
            if ((unint64_t)v218 >= v217)
            {
              uint64_t v249 = (char *)*v9;
              uint64_t v250 = (v218 - (unsigned char *)*v9) >> 3;
              unint64_t v251 = v250 + 1;
              if ((unint64_t)(v250 + 1) >> 61) {
LABEL_574:
              }
                sub_1903479E8();
              uint64_t v252 = v217 - (void)v249;
              if (v252 >> 2 > v251) {
                unint64_t v251 = v252 >> 2;
              }
              if ((unint64_t)v252 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v253 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v253 = v251;
              }
              if (v253)
              {
                uint64_t v254 = (char *)sub_190347A00(v338, v253);
                uint64_t v249 = *(char **)(a1 + 272);
                unint64_t v218 = *(char **)(a1 + 280);
              }
              else
              {
                uint64_t v254 = 0;
              }
              uint64_t v313 = &v254[8 * v250];
              *(void *)uint64_t v313 = 0;
              unint64_t v214 = v313 + 8;
              while (v218 != v249)
              {
                uint64_t v314 = *((void *)v218 - 1);
                v218 -= 8;
                *((void *)v313 - 1) = v314;
                v313 -= 8;
              }
              *(void *)(a1 + 272) = v313;
              *(void *)(a1 + 280) = v214;
              *(void *)(a1 + 288) = &v254[8 * v253];
              if (v249) {
                operator delete(v249);
              }
            }
            else
            {
              *(void *)unint64_t v218 = 0;
              unint64_t v214 = v218 + 8;
            }
            *(void *)(a1 + 280) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v65 = *((void *)this + 1);
          unint64_t v66 = *((void *)this + 2);
          while (v65 < v66 && !*((unsigned char *)this + 24))
          {
            char v68 = *(char **)(a1 + 280);
            unint64_t v67 = *(void *)(a1 + 288);
            if ((unint64_t)v68 >= v67)
            {
              unsigned int v70 = (char *)*v9;
              uint64_t v71 = (v68 - (unsigned char *)*v9) >> 3;
              unint64_t v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 61) {
                goto LABEL_574;
              }
              uint64_t v73 = v67 - (void)v70;
              if (v73 >> 2 > v72) {
                unint64_t v72 = v73 >> 2;
              }
              if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v74 = v72;
              }
              if (v74)
              {
                uint64_t v75 = (char *)sub_190347A00(v338, v74);
                unsigned int v70 = *(char **)(a1 + 272);
                char v68 = *(char **)(a1 + 280);
              }
              else
              {
                uint64_t v75 = 0;
              }
              unint64_t v76 = &v75[8 * v71];
              *(void *)unint64_t v76 = 0;
              char v69 = v76 + 8;
              while (v68 != v70)
              {
                uint64_t v77 = *((void *)v68 - 1);
                v68 -= 8;
                *((void *)v76 - 1) = v77;
                v76 -= 8;
              }
              *(void *)(a1 + 272) = v76;
              *(void *)(a1 + 280) = v69;
              *(void *)(a1 + 288) = &v75[8 * v74];
              if (v70) {
                operator delete(v70);
              }
            }
            else
            {
              *(void *)char v68 = 0;
              char v69 = v68 + 8;
            }
            *(void *)(a1 + 280) = v69;
            unint64_t v78 = *((void *)this + 1);
            if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((void *)this + 2)) {
              goto LABEL_332;
            }
            *(v69 - 1) = *(void *)(*(void *)this + v78);
            unint64_t v66 = *((void *)this + 2);
            unint64_t v65 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v65;
          }
          goto LABEL_333;
        case 9u:
          if (v24 != 2)
          {
            char v220 = *(char **)(a1 + 16);
            unint64_t v219 = *(void *)(a1 + 24);
            if ((unint64_t)v220 >= v219)
            {
              uint64_t v255 = (char *)*v8;
              uint64_t v256 = (v220 - (unsigned char *)*v8) >> 3;
              unint64_t v257 = v256 + 1;
              if ((unint64_t)(v256 + 1) >> 61) {
LABEL_575:
              }
                sub_1903479E8();
              uint64_t v258 = v219 - (void)v255;
              if (v258 >> 2 > v257) {
                unint64_t v257 = v258 >> 2;
              }
              if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v259 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v259 = v257;
              }
              if (v259)
              {
                uint64_t v260 = (char *)sub_190347A00(v339, v259);
                uint64_t v255 = *(char **)(a1 + 8);
                char v220 = *(char **)(a1 + 16);
              }
              else
              {
                uint64_t v260 = 0;
              }
              uint64_t v315 = &v260[8 * v256];
              *(void *)uint64_t v315 = 0;
              unint64_t v214 = v315 + 8;
              while (v220 != v255)
              {
                uint64_t v316 = *((void *)v220 - 1);
                v220 -= 8;
                *((void *)v315 - 1) = v316;
                v315 -= 8;
              }
              *(void *)(a1 + 8) = v315;
              *(void *)(a1 + 16) = v214;
              *(void *)(a1 + 24) = &v260[8 * v259];
              if (v255) {
                operator delete(v255);
              }
            }
            else
            {
              *(void *)char v220 = 0;
              unint64_t v214 = v220 + 8;
            }
            *(void *)(a1 + 16) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v79 = *((void *)this + 1);
          unint64_t v80 = *((void *)this + 2);
          while (v79 < v80 && !*((unsigned char *)this + 24))
          {
            char v82 = *(char **)(a1 + 16);
            unint64_t v81 = *(void *)(a1 + 24);
            if ((unint64_t)v82 >= v81)
            {
              unsigned int v84 = (char *)*v8;
              uint64_t v85 = (v82 - (unsigned char *)*v8) >> 3;
              unint64_t v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 61) {
                goto LABEL_575;
              }
              uint64_t v87 = v81 - (void)v84;
              if (v87 >> 2 > v86) {
                unint64_t v86 = v87 >> 2;
              }
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v88 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v86;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_190347A00(v339, v88);
                unsigned int v84 = *(char **)(a1 + 8);
                char v82 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v89 = 0;
              }
              char v90 = &v89[8 * v85];
              *(void *)char v90 = 0;
              char v83 = v90 + 8;
              while (v82 != v84)
              {
                uint64_t v91 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v90 - 1) = v91;
                v90 -= 8;
              }
              *(void *)(a1 + 8) = v90;
              *(void *)(a1 + 16) = v83;
              *(void *)(a1 + 24) = &v89[8 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *(void *)char v82 = 0;
              char v83 = v82 + 8;
            }
            *(void *)(a1 + 16) = v83;
            unint64_t v92 = *((void *)this + 1);
            if (v92 > 0xFFFFFFFFFFFFFFF7 || v92 + 8 > *((void *)this + 2)) {
              goto LABEL_332;
            }
            *(v83 - 1) = *(void *)(*(void *)this + v92);
            unint64_t v80 = *((void *)this + 2);
            unint64_t v79 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v79;
          }
          goto LABEL_333;
        case 0xAu:
          if (v24 != 2)
          {
            unint64_t v222 = *(char **)(a1 + 232);
            unint64_t v221 = *(void *)(a1 + 240);
            if ((unint64_t)v222 >= v221)
            {
              uint64_t v261 = (char *)*v348;
              uint64_t v262 = (v222 - (unsigned char *)*v348) >> 3;
              unint64_t v263 = v262 + 1;
              if ((unint64_t)(v262 + 1) >> 61) {
LABEL_576:
              }
                sub_1903479E8();
              uint64_t v264 = v221 - (void)v261;
              if (v264 >> 2 > v263) {
                unint64_t v263 = v264 >> 2;
              }
              if ((unint64_t)v264 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v265 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v265 = v263;
              }
              if (v265)
              {
                uint64_t v266 = (char *)sub_190347A00(v340, v265);
                uint64_t v261 = *(char **)(a1 + 224);
                unint64_t v222 = *(char **)(a1 + 232);
              }
              else
              {
                uint64_t v266 = 0;
              }
              uint64_t v317 = &v266[8 * v262];
              *(void *)uint64_t v317 = 0;
              unint64_t v214 = v317 + 8;
              while (v222 != v261)
              {
                uint64_t v318 = *((void *)v222 - 1);
                v222 -= 8;
                *((void *)v317 - 1) = v318;
                v317 -= 8;
              }
              *(void *)(a1 + 224) = v317;
              *(void *)(a1 + 232) = v214;
              *(void *)(a1 + 240) = &v266[8 * v265];
              if (v261) {
                operator delete(v261);
              }
            }
            else
            {
              *(void *)unint64_t v222 = 0;
              unint64_t v214 = v222 + 8;
            }
            *(void *)(a1 + 232) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v93 = *((void *)this + 1);
          unint64_t v94 = *((void *)this + 2);
          while (v93 < v94 && !*((unsigned char *)this + 24))
          {
            char v96 = *(char **)(a1 + 232);
            unint64_t v95 = *(void *)(a1 + 240);
            if ((unint64_t)v96 >= v95)
            {
              uint64_t v98 = (char *)*v348;
              uint64_t v99 = (v96 - (unsigned char *)*v348) >> 3;
              unint64_t v100 = v99 + 1;
              if ((unint64_t)(v99 + 1) >> 61) {
                goto LABEL_576;
              }
              uint64_t v101 = v95 - (void)v98;
              if (v101 >> 2 > v100) {
                unint64_t v100 = v101 >> 2;
              }
              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v100;
              }
              if (v102)
              {
                uint64_t v103 = (char *)sub_190347A00(v340, v102);
                uint64_t v98 = *(char **)(a1 + 224);
                char v96 = *(char **)(a1 + 232);
              }
              else
              {
                uint64_t v103 = 0;
              }
              char v104 = &v103[8 * v99];
              *(void *)char v104 = 0;
              unsigned int v97 = v104 + 8;
              while (v96 != v98)
              {
                uint64_t v105 = *((void *)v96 - 1);
                v96 -= 8;
                *((void *)v104 - 1) = v105;
                v104 -= 8;
              }
              *(void *)(a1 + 224) = v104;
              *(void *)(a1 + 232) = v97;
              *(void *)(a1 + 240) = &v103[8 * v102];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              *(void *)char v96 = 0;
              unsigned int v97 = v96 + 8;
            }
            *(void *)(a1 + 232) = v97;
            unint64_t v106 = *((void *)this + 1);
            if (v106 > 0xFFFFFFFFFFFFFFF7 || v106 + 8 > *((void *)this + 2)) {
              goto LABEL_332;
            }
            *(v97 - 1) = *(void *)(*(void *)this + v106);
            unint64_t v94 = *((void *)this + 2);
            unint64_t v93 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v93;
          }
          goto LABEL_333;
        case 0xBu:
          if (v24 != 2)
          {
            char v224 = *(char **)(a1 + 160);
            unint64_t v223 = *(void *)(a1 + 168);
            if ((unint64_t)v224 >= v223)
            {
              uint64_t v267 = (char *)*v349;
              uint64_t v268 = (v224 - (unsigned char *)*v349) >> 3;
              unint64_t v269 = v268 + 1;
              if ((unint64_t)(v268 + 1) >> 61) {
LABEL_577:
              }
                sub_1903479E8();
              uint64_t v270 = v223 - (void)v267;
              if (v270 >> 2 > v269) {
                unint64_t v269 = v270 >> 2;
              }
              if ((unint64_t)v270 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v271 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v271 = v269;
              }
              if (v271)
              {
                uint64_t v272 = (char *)sub_190347A00(v341, v271);
                uint64_t v267 = *(char **)(a1 + 152);
                char v224 = *(char **)(a1 + 160);
              }
              else
              {
                uint64_t v272 = 0;
              }
              uint64_t v319 = &v272[8 * v268];
              *(void *)uint64_t v319 = 0;
              unint64_t v214 = v319 + 8;
              while (v224 != v267)
              {
                uint64_t v320 = *((void *)v224 - 1);
                v224 -= 8;
                *((void *)v319 - 1) = v320;
                v319 -= 8;
              }
              *(void *)(a1 + 152) = v319;
              *(void *)(a1 + 160) = v214;
              *(void *)(a1 + 168) = &v272[8 * v271];
              if (v267) {
                operator delete(v267);
              }
            }
            else
            {
              *(void *)char v224 = 0;
              unint64_t v214 = v224 + 8;
            }
            *(void *)(a1 + 160) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v107 = *((void *)this + 1);
          unint64_t v108 = *((void *)this + 2);
          while (v107 < v108 && !*((unsigned char *)this + 24))
          {
            unint64_t v110 = *(char **)(a1 + 160);
            unint64_t v109 = *(void *)(a1 + 168);
            if ((unint64_t)v110 >= v109)
            {
              char v112 = (char *)*v349;
              uint64_t v113 = (v110 - (unsigned char *)*v349) >> 3;
              unint64_t v114 = v113 + 1;
              if ((unint64_t)(v113 + 1) >> 61) {
                goto LABEL_577;
              }
              uint64_t v115 = v109 - (void)v112;
              if (v115 >> 2 > v114) {
                unint64_t v114 = v115 >> 2;
              }
              if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v116 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v116 = v114;
              }
              if (v116)
              {
                unint64_t v117 = (char *)sub_190347A00(v341, v116);
                char v112 = *(char **)(a1 + 152);
                unint64_t v110 = *(char **)(a1 + 160);
              }
              else
              {
                unint64_t v117 = 0;
              }
              unint64_t v118 = &v117[8 * v113];
              *(void *)unint64_t v118 = 0;
              uint64_t v111 = v118 + 8;
              while (v110 != v112)
              {
                uint64_t v119 = *((void *)v110 - 1);
                v110 -= 8;
                *((void *)v118 - 1) = v119;
                v118 -= 8;
              }
              *(void *)(a1 + 152) = v118;
              *(void *)(a1 + 160) = v111;
              *(void *)(a1 + 168) = &v117[8 * v116];
              if (v112) {
                operator delete(v112);
              }
            }
            else
            {
              *(void *)unint64_t v110 = 0;
              uint64_t v111 = v110 + 8;
            }
            *(void *)(a1 + 160) = v111;
            unint64_t v120 = *((void *)this + 1);
            if (v120 > 0xFFFFFFFFFFFFFFF7 || v120 + 8 > *((void *)this + 2)) {
              goto LABEL_332;
            }
            *(v111 - 1) = *(void *)(*(void *)this + v120);
            unint64_t v108 = *((void *)this + 2);
            unint64_t v107 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v107;
          }
          goto LABEL_333;
        case 0xCu:
          if (v24 != 2)
          {
            unint64_t v226 = *(char **)(a1 + 136);
            unint64_t v225 = *(void *)(a1 + 144);
            if ((unint64_t)v226 >= v225)
            {
              uint64_t v273 = (char *)*v350;
              uint64_t v274 = (v226 - (unsigned char *)*v350) >> 3;
              unint64_t v275 = v274 + 1;
              if ((unint64_t)(v274 + 1) >> 61) {
LABEL_578:
              }
                sub_1903479E8();
              uint64_t v276 = v225 - (void)v273;
              if (v276 >> 2 > v275) {
                unint64_t v275 = v276 >> 2;
              }
              if ((unint64_t)v276 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v277 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v277 = v275;
              }
              if (v277)
              {
                uint64_t v278 = (char *)sub_190347A00(v342, v277);
                uint64_t v273 = *(char **)(a1 + 128);
                unint64_t v226 = *(char **)(a1 + 136);
              }
              else
              {
                uint64_t v278 = 0;
              }
              uint64_t v321 = &v278[8 * v274];
              *(void *)uint64_t v321 = 0;
              unint64_t v214 = v321 + 8;
              while (v226 != v273)
              {
                uint64_t v322 = *((void *)v226 - 1);
                v226 -= 8;
                *((void *)v321 - 1) = v322;
                v321 -= 8;
              }
              *(void *)(a1 + 128) = v321;
              *(void *)(a1 + 136) = v214;
              *(void *)(a1 + 144) = &v278[8 * v277];
              if (v273) {
                operator delete(v273);
              }
            }
            else
            {
              *(void *)unint64_t v226 = 0;
              unint64_t v214 = v226 + 8;
            }
            *(void *)(a1 + 136) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v121 = *((void *)this + 1);
          unint64_t v122 = *((void *)this + 2);
          while (v121 < v122 && !*((unsigned char *)this + 24))
          {
            char v124 = *(char **)(a1 + 136);
            unint64_t v123 = *(void *)(a1 + 144);
            if ((unint64_t)v124 >= v123)
            {
              unint64_t v126 = (char *)*v350;
              uint64_t v127 = (v124 - (unsigned char *)*v350) >> 3;
              unint64_t v128 = v127 + 1;
              if ((unint64_t)(v127 + 1) >> 61) {
                goto LABEL_578;
              }
              uint64_t v129 = v123 - (void)v126;
              if (v129 >> 2 > v128) {
                unint64_t v128 = v129 >> 2;
              }
              if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v130 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v130 = v128;
              }
              if (v130)
              {
                unint64_t v131 = (char *)sub_190347A00(v342, v130);
                unint64_t v126 = *(char **)(a1 + 128);
                char v124 = *(char **)(a1 + 136);
              }
              else
              {
                unint64_t v131 = 0;
              }
              char v132 = &v131[8 * v127];
              *(void *)char v132 = 0;
              unint64_t v125 = v132 + 8;
              while (v124 != v126)
              {
                uint64_t v133 = *((void *)v124 - 1);
                v124 -= 8;
                *((void *)v132 - 1) = v133;
                v132 -= 8;
              }
              *(void *)(a1 + 128) = v132;
              *(void *)(a1 + 136) = v125;
              *(void *)(a1 + 144) = &v131[8 * v130];
              if (v126) {
                operator delete(v126);
              }
            }
            else
            {
              *(void *)char v124 = 0;
              unint64_t v125 = v124 + 8;
            }
            *(void *)(a1 + 136) = v125;
            unint64_t v134 = *((void *)this + 1);
            if (v134 > 0xFFFFFFFFFFFFFFF7 || v134 + 8 > *((void *)this + 2)) {
              goto LABEL_332;
            }
            *(v125 - 1) = *(void *)(*(void *)this + v134);
            unint64_t v122 = *((void *)this + 2);
            unint64_t v121 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v121;
          }
          goto LABEL_333;
        case 0xDu:
          if (v24 != 2)
          {
            char v228 = *(char **)(a1 + 256);
            unint64_t v227 = *(void *)(a1 + 264);
            if ((unint64_t)v228 >= v227)
            {
              uint64_t v279 = (char *)*v351;
              uint64_t v280 = (v228 - (unsigned char *)*v351) >> 3;
              unint64_t v281 = v280 + 1;
              if ((unint64_t)(v280 + 1) >> 61) {
LABEL_579:
              }
                sub_1903479E8();
              uint64_t v282 = v227 - (void)v279;
              if (v282 >> 2 > v281) {
                unint64_t v281 = v282 >> 2;
              }
              if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v283 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v283 = v281;
              }
              if (v283)
              {
                uint64_t v284 = (char *)sub_190347A00(v343, v283);
                uint64_t v279 = *(char **)(a1 + 248);
                char v228 = *(char **)(a1 + 256);
              }
              else
              {
                uint64_t v284 = 0;
              }
              uint64_t v323 = &v284[8 * v280];
              *(void *)uint64_t v323 = 0;
              unint64_t v214 = v323 + 8;
              while (v228 != v279)
              {
                uint64_t v324 = *((void *)v228 - 1);
                v228 -= 8;
                *((void *)v323 - 1) = v324;
                v323 -= 8;
              }
              *(void *)(a1 + 248) = v323;
              *(void *)(a1 + 256) = v214;
              *(void *)(a1 + 264) = &v284[8 * v283];
              if (v279) {
                operator delete(v279);
              }
            }
            else
            {
              *(void *)char v228 = 0;
              unint64_t v214 = v228 + 8;
            }
            *(void *)(a1 + 256) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v135 = *((void *)this + 1);
          unint64_t v136 = *((void *)this + 2);
          while (v135 < v136 && !*((unsigned char *)this + 24))
          {
            uint64_t v138 = *(char **)(a1 + 256);
            unint64_t v137 = *(void *)(a1 + 264);
            if ((unint64_t)v138 >= v137)
            {
              char v140 = (char *)*v351;
              uint64_t v141 = (v138 - (unsigned char *)*v351) >> 3;
              unint64_t v142 = v141 + 1;
              if ((unint64_t)(v141 + 1) >> 61) {
                goto LABEL_579;
              }
              uint64_t v143 = v137 - (void)v140;
              if (v143 >> 2 > v142) {
                unint64_t v142 = v143 >> 2;
              }
              if ((unint64_t)v143 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v144 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v144 = v142;
              }
              if (v144)
              {
                char v145 = (char *)sub_190347A00(v343, v144);
                char v140 = *(char **)(a1 + 248);
                uint64_t v138 = *(char **)(a1 + 256);
              }
              else
              {
                char v145 = 0;
              }
              unsigned int v146 = &v145[8 * v141];
              *(void *)unsigned int v146 = 0;
              unint64_t v139 = v146 + 8;
              while (v138 != v140)
              {
                uint64_t v147 = *((void *)v138 - 1);
                v138 -= 8;
                *((void *)v146 - 1) = v147;
                v146 -= 8;
              }
              *(void *)(a1 + 248) = v146;
              *(void *)(a1 + 256) = v139;
              *(void *)(a1 + 264) = &v145[8 * v144];
              if (v140) {
                operator delete(v140);
              }
            }
            else
            {
              *(void *)uint64_t v138 = 0;
              unint64_t v139 = v138 + 8;
            }
            *(void *)(a1 + 256) = v139;
            unint64_t v148 = *((void *)this + 1);
            if (v148 > 0xFFFFFFFFFFFFFFF7 || v148 + 8 > *((void *)this + 2)) {
              goto LABEL_332;
            }
            *(v139 - 1) = *(void *)(*(void *)this + v148);
            unint64_t v136 = *((void *)this + 2);
            unint64_t v135 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v135;
          }
          goto LABEL_333;
        case 0xEu:
          if (v24 != 2)
          {
            unint64_t v230 = *(char **)(a1 + 40);
            unint64_t v229 = *(void *)(a1 + 48);
            if ((unint64_t)v230 >= v229)
            {
              uint64_t v285 = (char *)*v352;
              uint64_t v286 = (v230 - (unsigned char *)*v352) >> 3;
              unint64_t v287 = v286 + 1;
              if ((unint64_t)(v286 + 1) >> 61) {
LABEL_580:
              }
                sub_1903479E8();
              uint64_t v288 = v229 - (void)v285;
              if (v288 >> 2 > v287) {
                unint64_t v287 = v288 >> 2;
              }
              if ((unint64_t)v288 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v289 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v289 = v287;
              }
              if (v289)
              {
                uint64_t v290 = (char *)sub_190347A00(v344, v289);
                uint64_t v285 = *(char **)(a1 + 32);
                unint64_t v230 = *(char **)(a1 + 40);
              }
              else
              {
                uint64_t v290 = 0;
              }
              uint64_t v325 = &v290[8 * v286];
              *(void *)uint64_t v325 = 0;
              unint64_t v214 = v325 + 8;
              while (v230 != v285)
              {
                uint64_t v326 = *((void *)v230 - 1);
                v230 -= 8;
                *((void *)v325 - 1) = v326;
                v325 -= 8;
              }
              *(void *)(a1 + 32) = v325;
              *(void *)(a1 + 40) = v214;
              *(void *)(a1 + 48) = &v290[8 * v289];
              if (v285) {
                operator delete(v285);
              }
            }
            else
            {
              *(void *)unint64_t v230 = 0;
              unint64_t v214 = v230 + 8;
            }
            *(void *)(a1 + 40) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v149 = *((void *)this + 1);
          unint64_t v150 = *((void *)this + 2);
          while (v149 < v150 && !*((unsigned char *)this + 24))
          {
            char v152 = *(char **)(a1 + 40);
            unint64_t v151 = *(void *)(a1 + 48);
            if ((unint64_t)v152 >= v151)
            {
              unsigned int v154 = (char *)*v352;
              uint64_t v155 = (v152 - (unsigned char *)*v352) >> 3;
              unint64_t v156 = v155 + 1;
              if ((unint64_t)(v155 + 1) >> 61) {
                goto LABEL_580;
              }
              uint64_t v157 = v151 - (void)v154;
              if (v157 >> 2 > v156) {
                unint64_t v156 = v157 >> 2;
              }
              if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v158 = v156;
              }
              if (v158)
              {
                unint64_t v159 = (char *)sub_190347A00(v344, v158);
                unsigned int v154 = *(char **)(a1 + 32);
                char v152 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v159 = 0;
              }
              char v160 = &v159[8 * v155];
              *(void *)char v160 = 0;
              char v153 = v160 + 8;
              while (v152 != v154)
              {
                uint64_t v161 = *((void *)v152 - 1);
                v152 -= 8;
                *((void *)v160 - 1) = v161;
                v160 -= 8;
              }
              *(void *)(a1 + 32) = v160;
              *(void *)(a1 + 40) = v153;
              *(void *)(a1 + 48) = &v159[8 * v158];
              if (v154) {
                operator delete(v154);
              }
            }
            else
            {
              *(void *)char v152 = 0;
              char v153 = v152 + 8;
            }
            *(void *)(a1 + 40) = v153;
            unint64_t v162 = *((void *)this + 1);
            if (v162 > 0xFFFFFFFFFFFFFFF7 || v162 + 8 > *((void *)this + 2)) {
              goto LABEL_332;
            }
            *(v153 - 1) = *(void *)(*(void *)this + v162);
            unint64_t v150 = *((void *)this + 2);
            unint64_t v149 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v149;
          }
          goto LABEL_333;
        case 0xFu:
          if (v24 != 2)
          {
            uint64_t v232 = *(char **)(a1 + 208);
            unint64_t v231 = *(void *)(a1 + 216);
            if ((unint64_t)v232 >= v231)
            {
              uint64_t v291 = (char *)*v353;
              uint64_t v292 = (v232 - (unsigned char *)*v353) >> 3;
              unint64_t v293 = v292 + 1;
              if ((unint64_t)(v292 + 1) >> 61) {
LABEL_581:
              }
                sub_1903479E8();
              uint64_t v294 = v231 - (void)v291;
              if (v294 >> 2 > v293) {
                unint64_t v293 = v294 >> 2;
              }
              if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v295 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v295 = v293;
              }
              if (v295)
              {
                uint64_t v296 = (char *)sub_190347A00(v345, v295);
                uint64_t v291 = *(char **)(a1 + 200);
                uint64_t v232 = *(char **)(a1 + 208);
              }
              else
              {
                uint64_t v296 = 0;
              }
              uint64_t v327 = &v296[8 * v292];
              *(void *)uint64_t v327 = 0;
              unint64_t v214 = v327 + 8;
              while (v232 != v291)
              {
                uint64_t v328 = *((void *)v232 - 1);
                v232 -= 8;
                *((void *)v327 - 1) = v328;
                v327 -= 8;
              }
              *(void *)(a1 + 200) = v327;
              *(void *)(a1 + 208) = v214;
              *(void *)(a1 + 216) = &v296[8 * v295];
              if (v291) {
                operator delete(v291);
              }
            }
            else
            {
              *(void *)uint64_t v232 = 0;
              unint64_t v214 = v232 + 8;
            }
            *(void *)(a1 + 208) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v163 = *((void *)this + 1);
          unint64_t v164 = *((void *)this + 2);
          while (v163 < v164 && !*((unsigned char *)this + 24))
          {
            unsigned int v166 = *(char **)(a1 + 208);
            unint64_t v165 = *(void *)(a1 + 216);
            if ((unint64_t)v166 >= v165)
            {
              char v168 = (char *)*v353;
              uint64_t v169 = (v166 - (unsigned char *)*v353) >> 3;
              unint64_t v170 = v169 + 1;
              if ((unint64_t)(v169 + 1) >> 61) {
                goto LABEL_581;
              }
              uint64_t v171 = v165 - (void)v168;
              if (v171 >> 2 > v170) {
                unint64_t v170 = v171 >> 2;
              }
              if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v172 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v172 = v170;
              }
              if (v172)
              {
                char v173 = (char *)sub_190347A00(v345, v172);
                char v168 = *(char **)(a1 + 200);
                unsigned int v166 = *(char **)(a1 + 208);
              }
              else
              {
                char v173 = 0;
              }
              unsigned int v174 = &v173[8 * v169];
              *(void *)unsigned int v174 = 0;
              unint64_t v167 = v174 + 8;
              while (v166 != v168)
              {
                uint64_t v175 = *((void *)v166 - 1);
                v166 -= 8;
                *((void *)v174 - 1) = v175;
                v174 -= 8;
              }
              *(void *)(a1 + 200) = v174;
              *(void *)(a1 + 208) = v167;
              *(void *)(a1 + 216) = &v173[8 * v172];
              if (v168) {
                operator delete(v168);
              }
            }
            else
            {
              *(void *)unsigned int v166 = 0;
              unint64_t v167 = v166 + 8;
            }
            *(void *)(a1 + 208) = v167;
            unint64_t v176 = *((void *)this + 1);
            if (v176 > 0xFFFFFFFFFFFFFFF7 || v176 + 8 > *((void *)this + 2)) {
              goto LABEL_332;
            }
            *(v167 - 1) = *(void *)(*(void *)this + v176);
            unint64_t v164 = *((void *)this + 2);
            unint64_t v163 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v163;
          }
          goto LABEL_333;
        case 0x10u:
          if (v24 != 2)
          {
            uint64_t v234 = *(char **)(a1 + 88);
            unint64_t v233 = *(void *)(a1 + 96);
            if ((unint64_t)v234 >= v233)
            {
              uint64_t v297 = (char *)*v354;
              uint64_t v298 = (v234 - (unsigned char *)*v354) >> 3;
              unint64_t v299 = v298 + 1;
              if ((unint64_t)(v298 + 1) >> 61) {
LABEL_582:
              }
                sub_1903479E8();
              uint64_t v300 = v233 - (void)v297;
              if (v300 >> 2 > v299) {
                unint64_t v299 = v300 >> 2;
              }
              if ((unint64_t)v300 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v301 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v301 = v299;
              }
              if (v301)
              {
                uint64_t v302 = (char *)sub_190347A00(v346, v301);
                uint64_t v297 = *(char **)(a1 + 80);
                uint64_t v234 = *(char **)(a1 + 88);
              }
              else
              {
                uint64_t v302 = 0;
              }
              uint64_t v329 = &v302[8 * v298];
              *(void *)uint64_t v329 = 0;
              unint64_t v214 = v329 + 8;
              while (v234 != v297)
              {
                uint64_t v330 = *((void *)v234 - 1);
                v234 -= 8;
                *((void *)v329 - 1) = v330;
                v329 -= 8;
              }
              *(void *)(a1 + 80) = v329;
              *(void *)(a1 + 88) = v214;
              *(void *)(a1 + 96) = &v302[8 * v301];
              if (v297) {
                operator delete(v297);
              }
            }
            else
            {
              *(void *)uint64_t v234 = 0;
              unint64_t v214 = v234 + 8;
            }
            *(void *)(a1 + 88) = v214;
            goto LABEL_556;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v177 = *((void *)this + 1);
          unint64_t v178 = *((void *)this + 2);
          while (v177 < v178 && !*((unsigned char *)this + 24))
          {
            char v180 = *(char **)(a1 + 88);
            unint64_t v179 = *(void *)(a1 + 96);
            if ((unint64_t)v180 >= v179)
            {
              unsigned int v182 = (char *)*v354;
              uint64_t v183 = (v180 - (unsigned char *)*v354) >> 3;
              unint64_t v184 = v183 + 1;
              if ((unint64_t)(v183 + 1) >> 61) {
                goto LABEL_582;
              }
              uint64_t v185 = v179 - (void)v182;
              if (v185 >> 2 > v184) {
                unint64_t v184 = v185 >> 2;
              }
              if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v186 = v184;
              }
              if (v186)
              {
                unint64_t v187 = (char *)sub_190347A00(v346, v186);
                unsigned int v182 = *(char **)(a1 + 80);
                char v180 = *(char **)(a1 + 88);
              }
              else
              {
                unint64_t v187 = 0;
              }
              char v188 = &v187[8 * v183];
              *(void *)char v188 = 0;
              char v181 = v188 + 8;
              while (v180 != v182)
              {
                uint64_t v189 = *((void *)v180 - 1);
                v180 -= 8;
                *((void *)v188 - 1) = v189;
                v188 -= 8;
              }
              *(void *)(a1 + 80) = v188;
              *(void *)(a1 + 88) = v181;
              *(void *)(a1 + 96) = &v187[8 * v186];
              if (v182) {
                operator delete(v182);
              }
            }
            else
            {
              *(void *)char v180 = 0;
              char v181 = v180 + 8;
            }
            *(void *)(a1 + 88) = v181;
            unint64_t v190 = *((void *)this + 1);
            if (v190 > 0xFFFFFFFFFFFFFFF7 || v190 + 8 > *((void *)this + 2)) {
              goto LABEL_332;
            }
            *(v181 - 1) = *(void *)(*(void *)this + v190);
            unint64_t v178 = *((void *)this + 2);
            unint64_t v177 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v177;
          }
          goto LABEL_333;
        case 0x11u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v191 = *((void *)this + 1);
            unint64_t v192 = *((void *)this + 2);
            while (v191 < v192 && !*((unsigned char *)this + 24))
            {
              unint64_t v194 = *(char **)(a1 + 64);
              unint64_t v193 = *(void *)(a1 + 72);
              if ((unint64_t)v194 >= v193)
              {
                char v196 = (char *)*v355;
                uint64_t v197 = (v194 - (unsigned char *)*v355) >> 3;
                unint64_t v198 = v197 + 1;
                if ((unint64_t)(v197 + 1) >> 61) {
                  goto LABEL_583;
                }
                uint64_t v199 = v193 - (void)v196;
                if (v199 >> 2 > v198) {
                  unint64_t v198 = v199 >> 2;
                }
                if ((unint64_t)v199 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v200 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v200 = v198;
                }
                if (v200)
                {
                  unsigned int v201 = (char *)sub_190347A00(v347, v200);
                  char v196 = *(char **)(a1 + 56);
                  unint64_t v194 = *(char **)(a1 + 64);
                }
                else
                {
                  unsigned int v201 = 0;
                }
                unint64_t v202 = &v201[8 * v197];
                *(void *)unint64_t v202 = 0;
                char v195 = v202 + 8;
                while (v194 != v196)
                {
                  uint64_t v203 = *((void *)v194 - 1);
                  v194 -= 8;
                  *((void *)v202 - 1) = v203;
                  v202 -= 8;
                }
                *(void *)(a1 + 56) = v202;
                *(void *)(a1 + 64) = v195;
                *(void *)(a1 + 72) = &v201[8 * v200];
                if (v196) {
                  operator delete(v196);
                }
              }
              else
              {
                *(void *)unint64_t v194 = 0;
                char v195 = v194 + 8;
              }
              *(void *)(a1 + 64) = v195;
              unint64_t v204 = *((void *)this + 1);
              if (v204 > 0xFFFFFFFFFFFFFFF7 || v204 + 8 > *((void *)this + 2))
              {
LABEL_332:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v195 - 1) = *(void *)(*(void *)this + v204);
              unint64_t v192 = *((void *)this + 2);
              unint64_t v191 = *((void *)this + 1) + 8;
              *((void *)this + 1) = v191;
            }
LABEL_333:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v236 = *(char **)(a1 + 64);
            unint64_t v235 = *(void *)(a1 + 72);
            if ((unint64_t)v236 >= v235)
            {
              uint64_t v303 = (char *)*v355;
              uint64_t v304 = (v236 - (unsigned char *)*v355) >> 3;
              unint64_t v305 = v304 + 1;
              if ((unint64_t)(v304 + 1) >> 61) {
LABEL_583:
              }
                sub_1903479E8();
              uint64_t v306 = v235 - (void)v303;
              if (v306 >> 2 > v305) {
                unint64_t v305 = v306 >> 2;
              }
              if ((unint64_t)v306 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v307 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v307 = v305;
              }
              if (v307)
              {
                uint64_t v308 = (char *)sub_190347A00(v347, v307);
                uint64_t v303 = *(char **)(a1 + 56);
                uint64_t v236 = *(char **)(a1 + 64);
              }
              else
              {
                uint64_t v308 = 0;
              }
              uint64_t v331 = &v308[8 * v304];
              *(void *)uint64_t v331 = 0;
              unint64_t v214 = v331 + 8;
              while (v236 != v303)
              {
                uint64_t v332 = *((void *)v236 - 1);
                v236 -= 8;
                *((void *)v331 - 1) = v332;
                v331 -= 8;
              }
              *(void *)(a1 + 56) = v331;
              *(void *)(a1 + 64) = v214;
              *(void *)(a1 + 72) = &v308[8 * v307];
              if (v303) {
                operator delete(v303);
              }
            }
            else
            {
              *(void *)uint64_t v236 = 0;
              unint64_t v214 = v236 + 8;
            }
            *(void *)(a1 + 64) = v214;
LABEL_556:
            unint64_t v333 = *((void *)this + 1);
            if (v333 <= 0xFFFFFFFFFFFFFFF7 && v333 + 8 <= *((void *)this + 2))
            {
              *(v214 - 1) = *(void *)(*(void *)this + v333);
LABEL_560:
              uint64_t v207 = *((void *)this + 1) + 8;
LABEL_561:
              *((void *)this + 1) = v207;
            }
            else
            {
LABEL_558:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_562:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 0x12u:
          *(unsigned char *)(a1 + 340) |= 0x20u;
          unint64_t v205 = *((void *)this + 1);
          if (v205 > 0xFFFFFFFFFFFFFFFBLL || v205 + 4 > *((void *)this + 2)) {
            goto LABEL_558;
          }
          *(_DWORD *)(a1 + 332) = *(_DWORD *)(*(void *)this + v205);
          goto LABEL_340;
        case 0x13u:
          *(unsigned char *)(a1 + 340) |= 0x10u;
          unint64_t v206 = *((void *)this + 1);
          if (v206 > 0xFFFFFFFFFFFFFFFBLL || v206 + 4 > *((void *)this + 2)) {
            goto LABEL_558;
          }
          *(_DWORD *)(a1 + 328) = *(_DWORD *)(*(void *)this + v206);
LABEL_340:
          uint64_t v207 = *((void *)this + 1) + 4;
          goto LABEL_561;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_562;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903CAF4C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 340);
  if ((v4 & 0x40) != 0)
  {
    double result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 340);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }
  else if ((*(unsigned char *)(result + 340) & 4) == 0)
  {
    goto LABEL_3;
  }
  double result = PB::Writer::write(this, *(double *)(v3 + 312));
  char v4 = *(unsigned char *)(v3 + 340);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
LABEL_50:
    double result = PB::Writer::write(this, *(double *)(v3 + 320));
    if ((*(unsigned char *)(v3 + 340) & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_49:
  double result = PB::Writer::write(this, *(double *)(v3 + 296));
  char v4 = *(unsigned char *)(v3 + 340);
  if ((v4 & 8) != 0) {
    goto LABEL_50;
  }
LABEL_5:
  if ((v4 & 2) != 0) {
LABEL_6:
  }
    double result = PB::Writer::write(this, *(double *)(v3 + 304));
LABEL_7:
  uint64_t v5 = *(double **)(v3 + 176);
  __int16 v6 = *(double **)(v3 + 184);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  uint64_t v8 = *(double **)(v3 + 104);
  char v9 = *(double **)(v3 + 112);
  while (v8 != v9)
  {
    double v10 = *v8++;
    double result = PB::Writer::write(this, v10);
  }
  char v11 = *(double **)(v3 + 272);
  uint64_t v12 = *(double **)(v3 + 280);
  while (v11 != v12)
  {
    double v13 = *v11++;
    double result = PB::Writer::write(this, v13);
  }
  unsigned int v14 = *(double **)(v3 + 8);
  unint64_t v15 = *(double **)(v3 + 16);
  while (v14 != v15)
  {
    double v16 = *v14++;
    double result = PB::Writer::write(this, v16);
  }
  char v17 = *(double **)(v3 + 224);
  BOOL v18 = *(double **)(v3 + 232);
  while (v17 != v18)
  {
    double v19 = *v17++;
    double result = PB::Writer::write(this, v19);
  }
  unsigned int v20 = *(double **)(v3 + 152);
  unint64_t v21 = *(double **)(v3 + 160);
  while (v20 != v21)
  {
    double v22 = *v20++;
    double result = PB::Writer::write(this, v22);
  }
  double v23 = *(double **)(v3 + 128);
  int v24 = *(double **)(v3 + 136);
  while (v23 != v24)
  {
    double v25 = *v23++;
    double result = PB::Writer::write(this, v25);
  }
  unint64_t v26 = *(double **)(v3 + 248);
  uint64_t v27 = *(double **)(v3 + 256);
  while (v26 != v27)
  {
    double v28 = *v26++;
    double result = PB::Writer::write(this, v28);
  }
  unsigned int v29 = *(double **)(v3 + 32);
  uint64_t v30 = *(double **)(v3 + 40);
  while (v29 != v30)
  {
    double v31 = *v29++;
    double result = PB::Writer::write(this, v31);
  }
  char v32 = *(double **)(v3 + 200);
  unint64_t v33 = *(double **)(v3 + 208);
  while (v32 != v33)
  {
    double v34 = *v32++;
    double result = PB::Writer::write(this, v34);
  }
  unint64_t v35 = *(double **)(v3 + 80);
  unint64_t v36 = *(double **)(v3 + 88);
  while (v35 != v36)
  {
    double v37 = *v35++;
    double result = PB::Writer::write(this, v37);
  }
  unint64_t v38 = *(double **)(v3 + 56);
  unint64_t v39 = *(double **)(v3 + 64);
  while (v38 != v39)
  {
    double v40 = *v38++;
    double result = PB::Writer::write(this, v40);
  }
  char v41 = *(unsigned char *)(v3 + 340);
  if ((v41 & 0x20) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 332));
    char v41 = *(unsigned char *)(v3 + 340);
  }
  if ((v41 & 0x10) != 0)
  {
    float v42 = *(float *)(v3 + 328);
    return PB::Writer::write(this, v42);
  }
  return result;
}

uint64_t sub_1903CB1D0(uint64_t result)
{
  *(void *)double result = &unk_1EDFD0560;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 112) = 0;
  return result;
}

void sub_1903CB1F8(PB::Base *this)
{
  *(void *)this = &unk_1EDFD0560;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903CB25C(PB::Base *a1)
{
  sub_1903CB1F8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903CB294(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 112);
  if (v5)
  {
    PB::TextFormatter::format(this, "currentTimestamp", *(double *)(a1 + 32));
    __int16 v5 = *(_WORD *)(a1 + 112);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "latestInertialTimestamp", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "latestInertialTimestampMeta", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "positionX", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "positionY", *(double *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "positionZ", *(double *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "predictionComputeTimeMeta", *(double *)(a1 + 80));
  __int16 v5 = *(_WORD *)(a1 + 112);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_25:
  PB::TextFormatter::format(this, "predictionTimeMeta", *(double *)(a1 + 88));
  if ((*(_WORD *)(a1 + 112) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "propagationTimeMeta", *(double *)(a1 + 96));
LABEL_11:
  __int16 v6 = *(double **)(a1 + 8);
  double v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "rotationMatrixElement", v8);
  }
  if ((*(_WORD *)(a1 + 112) & 0x200) != 0) {
    PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 104));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903CB450(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 112) |= 1u;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
          goto LABEL_101;
        case 2u:
          *(_WORD *)(a1 + 112) |= 0x200u;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v23);
          goto LABEL_101;
        case 3u:
          *(_WORD *)(a1 + 112) |= 2u;
          unint64_t v24 = *((void *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v24);
          goto LABEL_101;
        case 4u:
          if ((v13 & 7) == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v25 = *((void *)this + 1);
            unint64_t v26 = *((void *)this + 2);
            while (v25 < v26 && !*((unsigned char *)this + 24))
            {
              double v28 = *(char **)(a1 + 16);
              unint64_t v27 = *(void *)(a1 + 24);
              if ((unint64_t)v28 >= v27)
              {
                uint64_t v30 = (char *)*v8;
                uint64_t v31 = (v28 - (unsigned char *)*v8) >> 3;
                unint64_t v32 = v31 + 1;
                if ((unint64_t)(v31 + 1) >> 61) {
                  goto LABEL_110;
                }
                uint64_t v33 = v27 - (void)v30;
                if (v33 >> 2 > v32) {
                  unint64_t v32 = v33 >> 2;
                }
                if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v34 = v32;
                }
                if (v34)
                {
                  unint64_t v35 = (char *)sub_190347A00(v9, v34);
                  uint64_t v30 = *(char **)(a1 + 8);
                  double v28 = *(char **)(a1 + 16);
                }
                else
                {
                  unint64_t v35 = 0;
                }
                unint64_t v36 = &v35[8 * v31];
                *(void *)unint64_t v36 = 0;
                unsigned int v29 = v36 + 8;
                while (v28 != v30)
                {
                  uint64_t v37 = *((void *)v28 - 1);
                  v28 -= 8;
                  *((void *)v36 - 1) = v37;
                  v36 -= 8;
                }
                *(void *)(a1 + 8) = v36;
                *(void *)(a1 + 16) = v29;
                *(void *)(a1 + 24) = &v35[8 * v34];
                if (v30) {
                  operator delete(v30);
                }
              }
              else
              {
                *(void *)double v28 = 0;
                unsigned int v29 = v28 + 8;
              }
              *(void *)(a1 + 16) = v29;
              unint64_t v38 = *((void *)this + 1);
              if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v29 - 1) = *(void *)(*(void *)this + v38);
              unint64_t v26 = *((void *)this + 2);
              unint64_t v25 = *((void *)this + 1) + 8;
              *((void *)this + 1) = v25;
            }
            PB::Reader::recallMark();
          }
          else
          {
            char v47 = *(char **)(a1 + 16);
            unint64_t v46 = *(void *)(a1 + 24);
            if ((unint64_t)v47 >= v46)
            {
              uint64_t v49 = (char *)*v8;
              uint64_t v50 = (v47 - (unsigned char *)*v8) >> 3;
              unint64_t v51 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 61) {
LABEL_110:
              }
                sub_1903479E8();
              uint64_t v52 = v46 - (void)v49;
              if (v52 >> 2 > v51) {
                unint64_t v51 = v52 >> 2;
              }
              if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v53 = v51;
              }
              if (v53)
              {
                unsigned int v54 = (char *)sub_190347A00(v9, v53);
                uint64_t v49 = *(char **)(a1 + 8);
                char v47 = *(char **)(a1 + 16);
              }
              else
              {
                unsigned int v54 = 0;
              }
              unint64_t v55 = &v54[8 * v50];
              *(void *)unint64_t v55 = 0;
              unsigned int v48 = v55 + 8;
              while (v47 != v49)
              {
                uint64_t v56 = *((void *)v47 - 1);
                v47 -= 8;
                *((void *)v55 - 1) = v56;
                v55 -= 8;
              }
              *(void *)(a1 + 8) = v55;
              *(void *)(a1 + 16) = v48;
              *(void *)(a1 + 24) = &v54[8 * v53];
              if (v49) {
                operator delete(v49);
              }
            }
            else
            {
              *(void *)char v47 = 0;
              unsigned int v48 = v47 + 8;
            }
            *(void *)(a1 + 16) = v48;
            unint64_t v57 = *((void *)this + 1);
            if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *((void *)this + 2))
            {
              *(v48 - 1) = *(void *)(*(void *)this + v57);
LABEL_101:
              *((void *)this + 1) += 8;
            }
            else
            {
LABEL_99:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_102:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 5u:
          *(_WORD *)(a1 + 112) |= 8u;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v39);
          goto LABEL_101;
        case 6u:
          *(_WORD *)(a1 + 112) |= 0x10u;
          unint64_t v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v40);
          goto LABEL_101;
        case 7u:
          *(_WORD *)(a1 + 112) |= 0x20u;
          unint64_t v41 = *((void *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v41);
          goto LABEL_101;
        case 8u:
          *(_WORD *)(a1 + 112) |= 4u;
          unint64_t v42 = *((void *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFF7 || v42 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v42);
          goto LABEL_101;
        case 9u:
          *(_WORD *)(a1 + 112) |= 0x80u;
          unint64_t v43 = *((void *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v43);
          goto LABEL_101;
        case 0xAu:
          *(_WORD *)(a1 + 112) |= 0x100u;
          unint64_t v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFF7 || v44 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v44);
          goto LABEL_101;
        case 0xBu:
          *(_WORD *)(a1 + 112) |= 0x40u;
          unint64_t v45 = *((void *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((void *)this + 2)) {
            goto LABEL_99;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v45);
          goto LABEL_101;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_102;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903CBA44(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 112);
  if ((v4 & 1) == 0)
  {
    if ((*(_WORD *)(result + 112) & 0x200) == 0) {
      goto LABEL_3;
    }
LABEL_17:
    double result = PB::Writer::write(this, *(double *)(v3 + 104));
    if ((*(_WORD *)(v3 + 112) & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  double result = PB::Writer::write(this, *(double *)(result + 32));
  __int16 v4 = *(_WORD *)(v3 + 112);
  if ((v4 & 0x200) != 0) {
    goto LABEL_17;
  }
LABEL_3:
  if ((v4 & 2) != 0) {
LABEL_4:
  }
    double result = PB::Writer::write(this, *(double *)(v3 + 40));
LABEL_5:
  __int16 v5 = *(double **)(v3 + 8);
  __int16 v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 8) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(v3 + 56));
    __int16 v8 = *(_WORD *)(v3 + 112);
    if ((v8 & 0x10) == 0)
    {
LABEL_10:
      if ((v8 & 0x20) == 0) {
        goto LABEL_11;
      }
      goto LABEL_21;
    }
  }
  else if ((v8 & 0x10) == 0)
  {
    goto LABEL_10;
  }
  double result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x20) == 0)
  {
LABEL_11:
    if ((v8 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_21:
  double result = PB::Writer::write(this, *(double *)(v3 + 72));
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 4) == 0)
  {
LABEL_12:
    if ((v8 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_23;
  }
LABEL_22:
  double result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x80) == 0)
  {
LABEL_13:
    if ((v8 & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_24:
    double result = PB::Writer::write(this, *(double *)(v3 + 96));
    if ((*(_WORD *)(v3 + 112) & 0x40) == 0) {
      return result;
    }
    goto LABEL_25;
  }
LABEL_23:
  double result = PB::Writer::write(this, *(double *)(v3 + 88));
  __int16 v8 = *(_WORD *)(v3 + 112);
  if ((v8 & 0x100) != 0) {
    goto LABEL_24;
  }
LABEL_14:
  if ((v8 & 0x40) == 0) {
    return result;
  }
LABEL_25:
  double v9 = *(double *)(v3 + 80);

  return PB::Writer::write(this, v9);
}

double sub_1903CBBC0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCBD28;
  *(_DWORD *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1903CBBF4(PB::Base *this)
{
  *(void *)this = &unk_1EDFCBD28;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1903CBC68(PB::Base *a1)
{
  sub_1903CBBF4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903CBCA0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(double **)(a1 + 8);
  __int16 v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "so3", v7);
  }
  if (*(unsigned char *)(a1 + 64)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }
  __int16 v8 = *(double **)(a1 + 32);
  double v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903CBD68(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    __int16 v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    double v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          while (v41 < v42 && !*((unsigned char *)this + 24))
          {
            unint64_t v44 = *(char **)(a1 + 16);
            unint64_t v43 = *(void *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              unint64_t v46 = (char *)*v10;
              uint64_t v47 = (v44 - (unsigned char *)*v10) >> 3;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61) {
                goto LABEL_128;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 2 > v48) {
                unint64_t v48 = v49 >> 2;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_190347A00(v11, v50);
                unint64_t v46 = *(char **)(a1 + 8);
                unint64_t v44 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v51 = 0;
              }
              uint64_t v52 = &v51[8 * v47];
              *(void *)uint64_t v52 = 0;
              unint64_t v45 = v52 + 8;
              while (v44 != v46)
              {
                uint64_t v53 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v52 - 1) = v53;
                v52 -= 8;
              }
              *(void *)(a1 + 8) = v52;
              *(void *)(a1 + 16) = v45;
              *(void *)(a1 + 24) = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(void *)unint64_t v44 = 0;
              unint64_t v45 = v44 + 8;
            }
            *(void *)(a1 + 16) = v45;
            unint64_t v54 = *((void *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)this + 2)) {
              goto LABEL_82;
            }
            *(v45 - 1) = *(void *)(*(void *)this + v54);
            unint64_t v42 = *((void *)this + 2);
            unint64_t v41 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v41;
          }
          goto LABEL_83;
        }
        uint64_t v59 = *(char **)(a1 + 16);
        unint64_t v58 = *(void *)(a1 + 24);
        if ((unint64_t)v59 >= v58)
        {
          unint64_t v66 = (char *)*v10;
          uint64_t v67 = (v59 - (unsigned char *)*v10) >> 3;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61) {
LABEL_128:
          }
            sub_1903479E8();
          uint64_t v69 = v58 - (void)v66;
          if (v69 >> 2 > v68) {
            unint64_t v68 = v69 >> 2;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v68;
          }
          if (v70)
          {
            uint64_t v71 = (char *)sub_190347A00(v11, v70);
            unint64_t v66 = *(char **)(a1 + 8);
            uint64_t v59 = *(char **)(a1 + 16);
          }
          else
          {
            uint64_t v71 = 0;
          }
          unint64_t v74 = &v71[8 * v67];
          *(void *)unint64_t v74 = 0;
          unint64_t v57 = v74 + 8;
          while (v59 != v66)
          {
            uint64_t v75 = *((void *)v59 - 1);
            v59 -= 8;
            *((void *)v74 - 1) = v75;
            v74 -= 8;
          }
          *(void *)(a1 + 8) = v74;
          *(void *)(a1 + 16) = v57;
          *(void *)(a1 + 24) = &v71[8 * v70];
          if (v66) {
            operator delete(v66);
          }
        }
        else
        {
          *(void *)uint64_t v59 = 0;
          unint64_t v57 = v59 + 8;
        }
        *(void *)(a1 + 16) = v57;
LABEL_114:
        unint64_t v76 = *((void *)this + 1);
        if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((void *)this + 2))
        {
LABEL_116:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v57 - 1) = *(void *)(*(void *)this + v76);
        goto LABEL_118;
      }
      if (v25 == 1)
      {
        *(unsigned char *)(a1 + 64) |= 1u;
        unint64_t v26 = *((void *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
          goto LABEL_116;
        }
        *(void *)(a1 + 56) = *(void *)(*(void *)this + v26);
LABEL_118:
        *((void *)this + 1) += 8;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this) & 1) == 0) {
        return 0;
      }
LABEL_119:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    if (v24 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v27 = *((void *)this + 1);
      unint64_t v28 = *((void *)this + 2);
      while (v27 < v28 && !*((unsigned char *)this + 24))
      {
        uint64_t v30 = *(char **)(a1 + 40);
        unint64_t v29 = *(void *)(a1 + 48);
        if ((unint64_t)v30 >= v29)
        {
          unint64_t v32 = (char *)*v8;
          uint64_t v33 = (v30 - (unsigned char *)*v8) >> 3;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61) {
            goto LABEL_127;
          }
          uint64_t v35 = v29 - (void)v32;
          if (v35 >> 2 > v34) {
            unint64_t v34 = v35 >> 2;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            uint64_t v37 = (char *)sub_190347A00(v9, v36);
            unint64_t v32 = *(char **)(a1 + 32);
            uint64_t v30 = *(char **)(a1 + 40);
          }
          else
          {
            uint64_t v37 = 0;
          }
          unint64_t v38 = &v37[8 * v33];
          *(void *)unint64_t v38 = 0;
          uint64_t v31 = v38 + 8;
          while (v30 != v32)
          {
            uint64_t v39 = *((void *)v30 - 1);
            v30 -= 8;
            *((void *)v38 - 1) = v39;
            v38 -= 8;
          }
          *(void *)(a1 + 32) = v38;
          *(void *)(a1 + 40) = v31;
          *(void *)(a1 + 48) = &v37[8 * v36];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *(void *)uint64_t v30 = 0;
          uint64_t v31 = v30 + 8;
        }
        *(void *)(a1 + 40) = v31;
        unint64_t v40 = *((void *)this + 1);
        if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((void *)this + 2))
        {
LABEL_82:
          *((unsigned char *)this + 24) = 1;
          break;
        }
        *(v31 - 1) = *(void *)(*(void *)this + v40);
        unint64_t v28 = *((void *)this + 2);
        unint64_t v27 = *((void *)this + 1) + 8;
        *((void *)this + 1) = v27;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    uint64_t v56 = *(char **)(a1 + 40);
    unint64_t v55 = *(void *)(a1 + 48);
    if ((unint64_t)v56 >= v55)
    {
      unint64_t v60 = (char *)*v8;
      uint64_t v61 = (v56 - (unsigned char *)*v8) >> 3;
      unint64_t v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61) {
LABEL_127:
      }
        sub_1903479E8();
      uint64_t v63 = v55 - (void)v60;
      if (v63 >> 2 > v62) {
        unint64_t v62 = v63 >> 2;
      }
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v62;
      }
      if (v64)
      {
        unint64_t v65 = (char *)sub_190347A00(v9, v64);
        unint64_t v60 = *(char **)(a1 + 32);
        uint64_t v56 = *(char **)(a1 + 40);
      }
      else
      {
        unint64_t v65 = 0;
      }
      unint64_t v72 = &v65[8 * v61];
      *(void *)unint64_t v72 = 0;
      unint64_t v57 = v72 + 8;
      while (v56 != v60)
      {
        uint64_t v73 = *((void *)v56 - 1);
        v56 -= 8;
        *((void *)v72 - 1) = v73;
        v72 -= 8;
      }
      *(void *)(a1 + 32) = v72;
      *(void *)(a1 + 40) = v57;
      *(void *)(a1 + 48) = &v65[8 * v64];
      if (v60) {
        operator delete(v60);
      }
    }
    else
    {
      *(void *)uint64_t v56 = 0;
      unint64_t v57 = v56 + 8;
    }
    *(void *)(a1 + 40) = v57;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t sub_1903CC2DC(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if (*(unsigned char *)(result + 64)) {
    double result = PB::Writer::write(this, *(double *)(result + 56));
  }
  int v4 = (double *)v3[1];
  __int16 v5 = (double *)v3[2];
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  __int16 v8 = (double *)v3[4];
  double v7 = (double *)v3[5];
  while (v8 != v7)
  {
    double v9 = *v8++;
    double result = PB::Writer::write(this, v9);
  }
  return result;
}

uint64_t sub_1903CC360(uint64_t result)
{
  *(void *)double result = &unk_1EDFCB4A0;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_1903CC388(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903CC3C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 88);
  if (v5)
  {
    PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "gradeType");
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_5:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "hasGps");
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "hasStrideCal");
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "heartRate", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "heartRateConfidence", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "hrTime", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isStroller");
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "metSource");
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_12:
    if ((v5 & 0x40) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_13:
    if ((v5 & 0x80) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "pace", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 88) & 0x400) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "workoutType");
LABEL_16:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903CC5C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 2u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 3u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  unint64_t v47 = v21++;
                  char v48 = *(unsigned char *)(v22 + v47);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_107:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_107;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_108;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 76) = v25;
              goto LABEL_119;
            case 4u:
              *(_WORD *)(a1 + 88) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 5u:
              *(_WORD *)(a1 + 88) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 6u:
              *(_WORD *)(a1 + 88) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x100u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_113;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_112:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_113;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_112;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_113;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_113:
              *(_DWORD *)(a1 + 72) = v31;
              goto LABEL_119;
            case 8u:
              *(_WORD *)(a1 + 88) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 9u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_74;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_103;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 84) = v34;
              goto LABEL_119;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *(unsigned char *)(a1 + 85) = v36;
              goto LABEL_119;
            case 0xCu:
              *(_WORD *)(a1 + 88) |= 0x400u;
              unint64_t v37 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v38 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v41 = 0;
                if (v2 <= v37) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_118;
                  }
                  unint64_t v55 = v37++;
                  char v56 = *(unsigned char *)(v38 + v55);
                  *((void *)this + 1) = v37;
                  v41 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_117:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_118;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_117;
              }
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v2 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                char v42 = *(unsigned char *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_118;
                }
                v39 += 7;
                unint64_t v37 = v2;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_118:
              *(_DWORD *)(a1 + 80) = v41;
LABEL_119:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xDu:
              *(_WORD *)(a1 + 88) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v44 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v43 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v44 = v43 != 0;
              }
              *(unsigned char *)(a1 + 86) = v44;
              goto LABEL_119;
            case 0xEu:
              *(_WORD *)(a1 + 88) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
LABEL_103:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_74:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_119;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_119;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903CCCD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64));
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    uint64_t result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 88) & 0x10) == 0) {
      return result;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x2000) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_29:
  double v5 = *(double *)(v3 + 40);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903CCE94(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCAB8;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1903CCEBC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903CCEF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if (v5)
  {
    PB::TextFormatter::format(this, "hr", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "hrTime", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "time", *(double *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "vo2", *(double *)(a1 + 32));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903CCFB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 40) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_37:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903CD230(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
      if ((*(unsigned char *)(v3 + 40) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 32);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903CD2D8(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB820;
  *(_DWORD *)(result + 72) = 0;
  return result;
}

void sub_1903CD300(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903CD338(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 72);
  if (v5)
  {
    PB::TextFormatter::format(this, "durationInSeconds", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 72);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "estimatedVo2Max", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "filteredVo2Max", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "hrMax", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "hrMin", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "sessionType");
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 72);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(this, "variance", *(double *)(a1 + 56));
  if ((*(_WORD *)(a1 + 72) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "workoutType");
LABEL_11:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903CD49C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 72) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 72) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 3u:
              *(_WORD *)(a1 + 72) |= 0x100u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_79;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_78:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_79;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_78;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_79;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_79:
              *(_DWORD *)(a1 + 68) = v25;
              goto LABEL_85;
            case 4u:
              *(_WORD *)(a1 + 72) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 5u:
              *(_WORD *)(a1 + 72) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 6u:
              *(_WORD *)(a1 + 72) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 7u:
              *(_WORD *)(a1 + 72) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_74;
            case 8u:
              *(_WORD *)(a1 + 72) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_74:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_51:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_85;
            case 9u:
              *(_WORD *)(a1 + 72) |= 0x80u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_84;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_83:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_84;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_83;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_84;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_84:
              *(_DWORD *)(a1 + 64) = v31;
LABEL_85:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_85;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903CD9A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 72);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 48));
    __int16 v4 = *(_WORD *)(v3 + 72);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
    if ((*(_WORD *)(v3 + 72) & 0x80) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 72);
  if ((v4 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_19:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903CDADC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD3B0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1903CDB04(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903CDB3C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "basebandHint");
    char v5 = *(unsigned char *)(a1 + 20);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 20) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "btHint");
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "gpsHint");
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "motionHint");
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "vehicularData");
  if ((*(unsigned char *)(a1 + 20) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "wifiHint");
LABEL_8:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903CDC40(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 20) |= 0x10u;
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                BOOL v21 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                BOOL v21 = v20 != 0;
              }
              *(unsigned char *)(a1 + 15) = v21;
              goto LABEL_64;
            case 2u:
              *(unsigned char *)(a1 + 20) |= 8u;
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                BOOL v24 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                BOOL v24 = v23 != 0;
              }
              *(unsigned char *)(a1 + 14) = v24;
              goto LABEL_64;
            case 3u:
              *(unsigned char *)(a1 + 20) |= 2u;
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                BOOL v26 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                BOOL v26 = v25 != 0;
              }
              *(unsigned char *)(a1 + 12) = v26;
              goto LABEL_64;
            case 4u:
              *(unsigned char *)(a1 + 20) |= 0x20u;
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 16) = v28;
              goto LABEL_64;
            case 5u:
              *(unsigned char *)(a1 + 20) |= 4u;
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 13) = v30;
              goto LABEL_64;
            case 6u:
              *(unsigned char *)(a1 + 20) |= 1u;
              unint64_t v31 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v32 = *(void *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v35 = 0;
                if (v2 <= v31) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_63;
                  }
                  unint64_t v39 = v31++;
                  char v40 = *(unsigned char *)(v32 + v39);
                  *((void *)this + 1) = v31;
                  v35 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_62:
                    unint64_t v3 = v39 + 1;
                    goto LABEL_63;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_62;
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              do
              {
                unint64_t v3 = v31 + 1;
                *((void *)this + 1) = v31 + 1;
                char v36 = *(unsigned char *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_63;
                }
                v33 += 7;
                unint64_t v31 = v3;
                BOOL v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_63:
              *(_DWORD *)(a1 + 8) = v35;
LABEL_64:
              int v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              goto LABEL_64;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903CE008(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this);
    char v4 = *(unsigned char *)(v3 + 20);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 20) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this);
  char v4 = *(unsigned char *)(v3 + 20);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::write(this);
  char v4 = *(unsigned char *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::write(this);
    if ((*(unsigned char *)(v3 + 20) & 1) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this);
  char v4 = *(unsigned char *)(v3 + 20);
  if ((v4 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_13:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903CE0E8(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF678;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1903CE110(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903CE148(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "sourceX");
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "sourceY");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "sourceZ");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 52));
  if ((*(_WORD *)(a1 + 60) & 0x400) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 56));
LABEL_13:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903CE2EC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_92;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_45;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_45;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_45;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_45;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_45;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_69;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
LABEL_45:
              unint64_t v2 = *((void *)this + 1) + 4;
              goto LABEL_93;
            case 8u:
              *(_WORD *)(a1 + 60) |= 4u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_97:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_97;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_109;
            case 9u:
              *(_WORD *)(a1 + 60) |= 8u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_102:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_102;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 28) = v31;
              goto LABEL_109;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 0x10u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_108;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_107:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_108;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_107;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_108;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_108:
              *(_DWORD *)(a1 + 32) = v37;
LABEL_109:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_92:
                unint64_t v2 = *((void *)this + 1) + 8;
LABEL_93:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_69:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_109;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_109;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903CE92C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(_WORD *)(result + 60) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 60) & 2) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x10) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903CEA98(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC0A8;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1903CEAC0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903CEAF8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "isDeviceVibrating");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903CEB58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *(unsigned char *)(a1 + 8) = v21;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903CECE8(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::write(this);
  }
  return result;
}

uint64_t sub_1903CED08(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCFF00;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1903CED30(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903CED68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "shouldSuppress");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903CEDE4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          BOOL v27 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v26 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v27 = v26 != 0;
        }
        *(unsigned char *)(a1 + 16) = v27;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_48;
            }
            unint64_t v31 = v20++;
            char v32 = *(unsigned char *)(v21 + v31);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_47;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v24 = 0;
          }
LABEL_47:
          unint64_t v2 = v31 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_48:
        *(void *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903CF068(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(this);
  }
  return result;
}

uint64_t sub_1903CF0D4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCFF38;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_1903CF0FC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903CF134(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "absMeanGravX", *(float *)(a1 + 16));
    int v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "accelFFTBin1", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "accelFFTBin2", *(float *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "accelFFTBin3", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "accelFFTBin4", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "accelFFTBin5", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "accelFFTBin6", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "accelFFTBinDotPressureFFTBin", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "fFTBin1", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "fFTBin2", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "fFTBin3", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "fFTBin4", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "fFTBin5", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "meanGravX", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "meanGravY", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "meanGravZ", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "medianLux", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "medianPocketProbability", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) == 0)
  {
LABEL_20:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "pressureFFTBin1", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_21:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "pressureFFTBin2", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200000) == 0)
  {
LABEL_22:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "pressureFFTBin3", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400000) == 0)
  {
LABEL_23:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "pressureFFTBin4", *(float *)(a1 + 100));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800000) == 0)
  {
LABEL_24:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "pressureFFTBin5", *(float *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "pressureFFTBin6", *(float *)(a1 + 108));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_26:
    if ((v5 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(this, "stdPressure", *(float *)(a1 + 112));
  if (*(_DWORD *)(a1 + 116)) {
LABEL_27:
  }
    PB::TextFormatter::format(this, "timestamp");
LABEL_28:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903CF4B8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 116) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  unint64_t v29 = v20++;
                  char v30 = *(unsigned char *)(v21 + v29);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_123;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_123:
                unint64_t v2 = v29 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_124;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_124:
              *(void *)(a1 + 8) = v24;
              goto LABEL_115;
            case 2u:
              *(_DWORD *)(a1 + 116) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 3u:
              *(_DWORD *)(a1 + 116) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 4u:
              *(_DWORD *)(a1 + 116) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 5u:
              *(_DWORD *)(a1 + 116) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 6u:
              *(_DWORD *)(a1 + 116) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 7u:
              *(_DWORD *)(a1 + 116) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 8u:
              *(_DWORD *)(a1 + 116) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 9u:
              *(_DWORD *)(a1 + 116) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0xAu:
              *(_DWORD *)(a1 + 116) |= 0x2000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0xBu:
              *(_DWORD *)(a1 + 116) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0xCu:
              *(_DWORD *)(a1 + 116) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0xDu:
              *(_DWORD *)(a1 + 116) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0xEu:
              *(_DWORD *)(a1 + 116) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0xFu:
              *(_DWORD *)(a1 + 116) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x10u:
              *(_DWORD *)(a1 + 116) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x11u:
              *(_DWORD *)(a1 + 116) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x12u:
              *(_DWORD *)(a1 + 116) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x13u:
              *(_DWORD *)(a1 + 116) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x14u:
              *(_DWORD *)(a1 + 116) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x15u:
              *(_DWORD *)(a1 + 116) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x16u:
              *(_DWORD *)(a1 + 116) |= 0x400000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x17u:
              *(_DWORD *)(a1 + 116) |= 0x800000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x18u:
              *(_DWORD *)(a1 + 116) |= 0x1000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x19u:
              *(_DWORD *)(a1 + 116) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_105;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_114;
            case 0x1Au:
              *(_DWORD *)(a1 + 116) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_114:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_105:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_115;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
LABEL_115:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903CFD08(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 116);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x8000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_12:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) == 0)
  {
LABEL_13:
    if ((v4 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_14:
    if ((v4 & 8) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_15:
    if ((v4 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_18:
    if ((v4 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_19:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_20:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
    if ((*(_DWORD *)(v3 + 116) & 2) == 0) {
      return result;
    }
    goto LABEL_53;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_53:
  float v5 = *(float *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903D0018(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD0130;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1903D0040(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D0078(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "bagObstructed", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "closeCoveredBagObstructed", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "closeCoveredObstructed", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "closeCoveredPocketObstructed", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "inHandObstructed", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "looseCoveredBagObstructed", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "looseCoveredObstructed", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "looseCoveredPocketObstructed", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "obstructed", *(float *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "otherObstructed", *(float *)(a1 + 52));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "pocketObstructed", *(float *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(this, "timestamp");
  if ((*(_WORD *)(a1 + 64) & 0x1000) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "visible", *(float *)(a1 + 60));
LABEL_15:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D025C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_80;
                  }
                  unint64_t v29 = v20++;
                  char v30 = *(unsigned char *)(v21 + v29);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_79;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_79:
                unint64_t v2 = v29 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_80;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_80:
              *(void *)(a1 + 8) = v24;
              goto LABEL_81;
            case 2u:
              *(_WORD *)(a1 + 64) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 4u:
              *(_WORD *)(a1 + 64) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 9u:
              *(_WORD *)(a1 + 64) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_75;
            case 0xDu:
              *(_WORD *)(a1 + 64) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
LABEL_75:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_66:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_81;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
LABEL_81:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903D07A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 64);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x800) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
    if ((*(_WORD *)(v3 + 64) & 0x80) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_27:
  float v5 = *(float *)(v3 + 40);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903D0948(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD8B8;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_1903D0970(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D09A8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "currentEventTag");
    int v5 = *(_DWORD *)(a1 + 84);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "currentState");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "filteredGravityX", *(float *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "filteredGravityY", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "filteredGravityZ", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "gravityAngle", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "gravityShift", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "isMovingFiltered", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "lux", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "luxBaseline", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "luxShift", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "motionType");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "orientation");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x4000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "pocketProbEnter", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "pocketProbExit", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10000) == 0)
  {
LABEL_17:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x20000) == 0)
  {
LABEL_18:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "shouldSuppress");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x40000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_41:
  PB::TextFormatter::format(this, "sufficientMotion");
  if (*(_DWORD *)(a1 + 84)) {
LABEL_20:
  }
    PB::TextFormatter::format(this, "timestamp");
LABEL_21:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D0C4C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 84) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_144;
                  }
                  unint64_t v57 = v20++;
                  char v58 = *(unsigned char *)(v21 + v57);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_143;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_143:
                unint64_t v2 = v57 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_144;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_144:
              *(void *)(a1 + 8) = v24;
              goto LABEL_165;
            case 2u:
              *(_DWORD *)(a1 + 84) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 80) = v28;
              goto LABEL_165;
            case 3u:
              *(_DWORD *)(a1 + 84) |= 4u;
              unint64_t v29 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_149;
                  }
                  unint64_t v61 = v29++;
                  char v62 = *(unsigned char *)(v30 + v61);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_148:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_149;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_148;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_149;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_149:
              *(_DWORD *)(a1 + 20) = v33;
              goto LABEL_165;
            case 4u:
              *(_DWORD *)(a1 + 84) |= 0x2000u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_154;
                  }
                  unint64_t v65 = v35++;
                  char v66 = *(unsigned char *)(v36 + v65);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_153:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_154;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_153;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_154;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_154:
              *(_DWORD *)(a1 + 64) = v39;
              goto LABEL_165;
            case 5u:
              *(_DWORD *)(a1 + 84) |= 0x1000u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_159;
                  }
                  unint64_t v69 = v41++;
                  char v70 = *(unsigned char *)(v42 + v69);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_158:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_159;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_158;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_159;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_159:
              *(_DWORD *)(a1 + 60) = v45;
              goto LABEL_165;
            case 6u:
              *(_DWORD *)(a1 + 84) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 7u:
              *(_DWORD *)(a1 + 84) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 8u:
              *(_DWORD *)(a1 + 84) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 9u:
              *(_DWORD *)(a1 + 84) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0xAu:
              *(_DWORD *)(a1 + 84) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0xBu:
              *(_DWORD *)(a1 + 84) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0xCu:
              *(_DWORD *)(a1 + 84) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0xDu:
              *(_DWORD *)(a1 + 84) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0xEu:
              *(_DWORD *)(a1 + 84) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0xFu:
              *(_DWORD *)(a1 + 84) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0x10u:
              *(_DWORD *)(a1 + 84) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_89;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_139;
            case 0x11u:
              *(_DWORD *)(a1 + 84) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
LABEL_139:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_89:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_165;
            case 0x12u:
              *(_DWORD *)(a1 + 84) |= 2u;
              unint64_t v47 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_164;
                  }
                  unint64_t v73 = v47++;
                  char v74 = *(unsigned char *)(v48 + v73);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_163:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_164;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v51) = 0;
                }
                goto LABEL_163;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_164;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_164:
              *(_DWORD *)(a1 + 16) = v51;
LABEL_165:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x13u:
              *(_DWORD *)(a1 + 84) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v54 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v53 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v54 = v53 != 0;
              }
              *(unsigned char *)(a1 + 81) = v54;
              goto LABEL_165;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_165;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903D15E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 84);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    int v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x20000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x40) == 0)
  {
LABEL_11:
    if ((v4 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_16:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 2) == 0) {
      goto LABEL_19;
    }
LABEL_38:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_DWORD *)(v3 + 84) & 0x40000) == 0) {
      return result;
    }
    goto LABEL_39;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) != 0) {
    goto LABEL_38;
  }
LABEL_19:
  if ((v4 & 0x40000) == 0) {
    return result;
  }
LABEL_39:

  return PB::Writer::write(this);
}

uint64_t sub_1903D1830(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCF50;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

void sub_1903D1858(PB::Base *this)
{
  *(void *)this = &unk_1EDFCCF50;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903D18BC(PB::Base *a1)
{
  sub_1903D1858(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D18F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "compassBias", *(float *)(a1 + 48));
    __int16 v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "estimatedBiasUncertainty", *(float *)(a1 + 52));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_19:
  PB::TextFormatter::format(this, "estimatedHeading", *(float *)(a1 + 56));
  if ((*(_WORD *)(a1 + 76) & 0x20) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "globalReferenceFrame");
LABEL_6:
  double v6 = *(float **)(a1 + 8);
  double v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "lslGlobalToDeviceFrameRotationMatrix", v8);
  }
  __int16 v9 = *(_WORD *)(a1 + 76);
  if ((v9 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "lslHeadingAccuracy", *(float *)(a1 + 64));
    __int16 v9 = *(_WORD *)(a1 + 76);
    if ((v9 & 0x80) == 0)
    {
LABEL_10:
      if ((v9 & 1) == 0) {
        goto LABEL_11;
      }
      goto LABEL_23;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_10;
  }
  PB::TextFormatter::format(this, "lslHeadingConfidence", *(float *)(a1 + 68));
  __int16 v9 = *(_WORD *)(a1 + 76);
  if ((v9 & 1) == 0)
  {
LABEL_11:
    if ((v9 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "machContinuousTimestamp", *(double *)(a1 + 32));
  __int16 v9 = *(_WORD *)(a1 + 76);
  if ((v9 & 0x100) == 0)
  {
LABEL_12:
    if ((v9 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_24:
  PB::TextFormatter::format(this, "roadID");
  if ((*(_WORD *)(a1 + 76) & 2) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
LABEL_14:

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903D1A94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 76) |= 1u;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_127;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
          goto LABEL_31;
        case 2u:
          *(_WORD *)(a1 + 76) |= 2u;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
            goto LABEL_127;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v23);
LABEL_31:
          uint64_t v24 = *((void *)this + 1) + 8;
          goto LABEL_130;
        case 3u:
          *(_WORD *)(a1 + 76) |= 4u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)this + 2)) {
            goto LABEL_127;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v25);
          goto LABEL_129;
        case 4u:
          *(_WORD *)(a1 + 76) |= 0x10u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_127;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_129;
        case 5u:
          *(_WORD *)(a1 + 76) |= 8u;
          unint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)this + 2)) {
            goto LABEL_127;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v27);
          goto LABEL_129;
        case 6u:
          if ((v13 & 7) == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v28 = *((void *)this + 1);
            unint64_t v29 = *((void *)this + 2);
            while (v28 < v29 && !*((unsigned char *)this + 24))
            {
              char v31 = *(char **)(a1 + 16);
              unint64_t v30 = *(void *)(a1 + 24);
              if ((unint64_t)v31 >= v30)
              {
                uint64_t v33 = (char *)*v8;
                uint64_t v34 = (v31 - (unsigned char *)*v8) >> 2;
                unint64_t v35 = v34 + 1;
                if ((unint64_t)(v34 + 1) >> 62) {
                  goto LABEL_141;
                }
                uint64_t v36 = v30 - (void)v33;
                if (v36 >> 1 > v35) {
                  unint64_t v35 = v36 >> 1;
                }
                if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v37 = v35;
                }
                if (v37)
                {
                  unsigned int v38 = (char *)sub_190347D04(v9, v37);
                  uint64_t v33 = *(char **)(a1 + 8);
                  char v31 = *(char **)(a1 + 16);
                }
                else
                {
                  unsigned int v38 = 0;
                }
                uint64_t v39 = &v38[4 * v34];
                *(_DWORD *)uint64_t v39 = 0;
                unsigned int v32 = v39 + 4;
                while (v31 != v33)
                {
                  int v40 = *((_DWORD *)v31 - 1);
                  v31 -= 4;
                  *((_DWORD *)v39 - 1) = v40;
                  v39 -= 4;
                }
                *(void *)(a1 + 8) = v39;
                *(void *)(a1 + 16) = v32;
                *(void *)(a1 + 24) = &v38[4 * v37];
                if (v33) {
                  operator delete(v33);
                }
              }
              else
              {
                *(_DWORD *)char v31 = 0;
                unsigned int v32 = v31 + 4;
              }
              *(void *)(a1 + 16) = v32;
              unint64_t v41 = *((void *)this + 1);
              if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
              unint64_t v29 = *((void *)this + 2);
              unint64_t v28 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v28;
            }
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v61 = *(char **)(a1 + 16);
            unint64_t v60 = *(void *)(a1 + 24);
            if ((unint64_t)v61 >= v60)
            {
              char v71 = (char *)*v8;
              uint64_t v72 = (v61 - (unsigned char *)*v8) >> 2;
              unint64_t v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62) {
LABEL_141:
              }
                sub_1903479E8();
              uint64_t v74 = v60 - (void)v71;
              if (v74 >> 1 > v73) {
                unint64_t v73 = v74 >> 1;
              }
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v73;
              }
              if (v75)
              {
                unint64_t v76 = (char *)sub_190347D04(v9, v75);
                char v71 = *(char **)(a1 + 8);
                unint64_t v61 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v76 = 0;
              }
              uint64_t v77 = &v76[4 * v72];
              *(_DWORD *)uint64_t v77 = 0;
              char v62 = v77 + 4;
              while (v61 != v71)
              {
                int v78 = *((_DWORD *)v61 - 1);
                v61 -= 4;
                *((_DWORD *)v77 - 1) = v78;
                v77 -= 4;
              }
              *(void *)(a1 + 8) = v77;
              *(void *)(a1 + 16) = v62;
              *(void *)(a1 + 24) = &v76[4 * v75];
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v61 = 0;
              char v62 = v61 + 4;
            }
            *(void *)(a1 + 16) = v62;
            unint64_t v79 = *((void *)this + 1);
            if (v79 <= 0xFFFFFFFFFFFFFFFBLL && v79 + 4 <= *((void *)this + 2))
            {
              *(v62 - 1) = *(_DWORD *)(*(void *)this + v79);
LABEL_129:
              uint64_t v24 = *((void *)this + 1) + 4;
LABEL_130:
              *((void *)this + 1) = v24;
            }
            else
            {
LABEL_127:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_131:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 7u:
          *(_WORD *)(a1 + 76) |= 0x40u;
          unint64_t v42 = *((void *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2)) {
            goto LABEL_127;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v42);
          goto LABEL_129;
        case 8u:
          *(_WORD *)(a1 + 76) |= 0x80u;
          unint64_t v43 = *((void *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2)) {
            goto LABEL_127;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v43);
          goto LABEL_129;
        case 9u:
          *(_WORD *)(a1 + 76) |= 0x100u;
          unint64_t v44 = *((void *)this + 1);
          unint64_t v45 = *((void *)this + 2);
          uint64_t v46 = *(void *)this;
          if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
          {
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0;
            do
            {
              unint64_t v50 = v44 + 1;
              *((void *)this + 1) = v44 + 1;
              char v51 = *(unsigned char *)(v46 + v44);
              v49 |= (unint64_t)(v51 & 0x7F) << v47;
              if ((v51 & 0x80) == 0) {
                goto LABEL_113;
              }
              v47 += 7;
              unint64_t v44 = v50;
              BOOL v16 = v48++ > 8;
            }
            while (!v16);
LABEL_93:
            LODWORD(v49) = 0;
            goto LABEL_113;
          }
          char v63 = 0;
          unsigned int v64 = 0;
          uint64_t v49 = 0;
          if (v45 <= v44) {
            unint64_t v45 = *((void *)this + 1);
          }
          while (2)
          {
            if (v45 == v44)
            {
              LODWORD(v49) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v65 = v44 + 1;
              char v66 = *(unsigned char *)(v46 + v44);
              *((void *)this + 1) = v65;
              v49 |= (unint64_t)(v66 & 0x7F) << v63;
              if (v66 < 0)
              {
                v63 += 7;
                unint64_t v44 = v65;
                BOOL v16 = v64++ > 8;
                if (v16) {
                  goto LABEL_93;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v49) = 0;
              }
            }
            break;
          }
LABEL_113:
          *(_DWORD *)(a1 + 72) = v49;
          goto LABEL_131;
        case 0xAu:
          *(_WORD *)(a1 + 76) |= 0x20u;
          unint64_t v52 = *((void *)this + 1);
          unint64_t v53 = *((void *)this + 2);
          uint64_t v54 = *(void *)this;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            char v55 = 0;
            unsigned int v56 = 0;
            uint64_t v57 = 0;
            do
            {
              unint64_t v58 = v52 + 1;
              *((void *)this + 1) = v52 + 1;
              char v59 = *(unsigned char *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0) {
                goto LABEL_116;
              }
              v55 += 7;
              unint64_t v52 = v58;
              BOOL v16 = v56++ > 8;
            }
            while (!v16);
LABEL_100:
            LODWORD(v57) = 0;
            goto LABEL_116;
          }
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v57 = 0;
          if (v53 <= v52) {
            unint64_t v53 = *((void *)this + 1);
          }
          while (2)
          {
            if (v53 == v52)
            {
              LODWORD(v57) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v69 = v52 + 1;
              char v70 = *(unsigned char *)(v54 + v52);
              *((void *)this + 1) = v69;
              v57 |= (unint64_t)(v70 & 0x7F) << v67;
              if (v70 < 0)
              {
                v67 += 7;
                unint64_t v52 = v69;
                BOOL v16 = v68++ > 8;
                if (v16) {
                  goto LABEL_100;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v57) = 0;
              }
            }
            break;
          }
LABEL_116:
          *(_DWORD *)(a1 + 60) = v57;
          goto LABEL_131;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_131;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903D21AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 76);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
    if ((*(_WORD *)(v3 + 76) & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x10) != 0) {
    goto LABEL_18;
  }
LABEL_5:
  if ((v4 & 8) != 0) {
LABEL_6:
  }
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
LABEL_7:
  __int16 v5 = *(float **)(v3 + 8);
  double v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7);
  }
  __int16 v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
    __int16 v8 = *(_WORD *)(v3 + 76);
    if ((v8 & 0x80) == 0)
    {
LABEL_12:
      if ((v8 & 0x100) == 0) {
        goto LABEL_13;
      }
LABEL_22:
      uint64_t result = PB::Writer::writeVarInt(this);
      if ((*(_WORD *)(v3 + 76) & 0x20) == 0) {
        return result;
      }
      goto LABEL_23;
    }
  }
  else if ((v8 & 0x80) == 0)
  {
    goto LABEL_12;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  __int16 v8 = *(_WORD *)(v3 + 76);
  if ((v8 & 0x100) != 0) {
    goto LABEL_22;
  }
LABEL_13:
  if ((v8 & 0x20) == 0) {
    return result;
  }
LABEL_23:

  return PB::Writer::writeVarInt(this);
}

double sub_1903D230C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCD3E8;
  *(_DWORD *)(a1 + 100) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1903D2340(PB::Base *this)
{
  *(void *)this = &unk_1EDFCD3E8;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1903D23B4(PB::Base *a1)
{
  sub_1903D2340(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D23EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 100);
  if (v5)
  {
    PB::TextFormatter::format(this, "altitudeOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 56));
    char v5 = *(unsigned char *)(a1 + 100);
  }
  if ((v5 & 0x20) != 0) {
    PB::TextFormatter::format(this, "confidence", *(float *)(a1 + 96));
  }
  double v6 = *(float **)(a1 + 8);
  float v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "covariance", v8);
  }
  char v9 = *(unsigned char *)(a1 + 100);
  if ((v9 & 2) != 0)
  {
    PB::TextFormatter::format(this, "horizontalAccuracyOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 64));
    char v9 = *(unsigned char *)(a1 + 100);
    if ((v9 & 4) == 0)
    {
LABEL_9:
      if ((v9 & 8) == 0) {
        goto LABEL_10;
      }
      goto LABEL_19;
    }
  }
  else if ((*(unsigned char *)(a1 + 100) & 4) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "latitudeOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 72));
  char v9 = *(unsigned char *)(a1 + 100);
  if ((v9 & 8) == 0)
  {
LABEL_10:
    if ((v9 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_19:
  PB::TextFormatter::format(this, "longitudeOfLocalizedPoseInEcefCoordinate", *(double *)(a1 + 80));
  if ((*(unsigned char *)(a1 + 100) & 0x10) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 88));
LABEL_12:
  uint64_t v10 = *(double **)(a1 + 32);
  char v11 = *(double **)(a1 + 40);
  while (v10 != v11)
  {
    double v12 = *v10++;
    PB::TextFormatter::format(this, "transformMatrixFromCameraToEcefCoordinate", v12);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903D2550(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    uint64_t v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 100) |= 0x10u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v25);
          goto LABEL_122;
        case 2u:
          *(unsigned char *)(a1 + 100) |= 4u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v26);
          goto LABEL_122;
        case 3u:
          *(unsigned char *)(a1 + 100) |= 8u;
          unint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v27);
          goto LABEL_122;
        case 4u:
          *(unsigned char *)(a1 + 100) |= 1u;
          unint64_t v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v28);
          goto LABEL_122;
        case 5u:
          *(unsigned char *)(a1 + 100) |= 2u;
          unint64_t v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v29);
          goto LABEL_122;
        case 6u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v30 = *((void *)this + 1);
            unint64_t v31 = *((void *)this + 2);
            while (v30 < v31 && !*((unsigned char *)this + 24))
            {
              uint64_t v33 = *(char **)(a1 + 40);
              unint64_t v32 = *(void *)(a1 + 48);
              if ((unint64_t)v33 >= v32)
              {
                unint64_t v35 = (char *)*v10;
                uint64_t v36 = (v33 - (unsigned char *)*v10) >> 3;
                unint64_t v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 61) {
                  goto LABEL_143;
                }
                uint64_t v38 = v32 - (void)v35;
                if (v38 >> 2 > v37) {
                  unint64_t v37 = v38 >> 2;
                }
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v39 = v37;
                }
                if (v39)
                {
                  int v40 = (char *)sub_190347A00(v11, v39);
                  unint64_t v35 = *(char **)(a1 + 32);
                  uint64_t v33 = *(char **)(a1 + 40);
                }
                else
                {
                  int v40 = 0;
                }
                unint64_t v41 = &v40[8 * v36];
                *(void *)unint64_t v41 = 0;
                uint64_t v34 = v41 + 8;
                while (v33 != v35)
                {
                  uint64_t v42 = *((void *)v33 - 1);
                  v33 -= 8;
                  *((void *)v41 - 1) = v42;
                  v41 -= 8;
                }
                *(void *)(a1 + 32) = v41;
                *(void *)(a1 + 40) = v34;
                *(void *)(a1 + 48) = &v40[8 * v39];
                if (v35) {
                  operator delete(v35);
                }
              }
              else
              {
                *(void *)uint64_t v33 = 0;
                uint64_t v34 = v33 + 8;
              }
              *(void *)(a1 + 40) = v34;
              unint64_t v43 = *((void *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((void *)this + 2)) {
                goto LABEL_95;
              }
              *(v34 - 1) = *(void *)(*(void *)this + v43);
              unint64_t v31 = *((void *)this + 2);
              unint64_t v30 = *((void *)this + 1) + 8;
              *((void *)this + 1) = v30;
            }
            goto LABEL_96;
          }
          unint64_t v60 = *(char **)(a1 + 40);
          unint64_t v59 = *(void *)(a1 + 48);
          if ((unint64_t)v60 >= v59)
          {
            unint64_t v65 = (char *)*v10;
            uint64_t v66 = (v60 - (unsigned char *)*v10) >> 3;
            unint64_t v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 61) {
LABEL_143:
            }
              sub_1903479E8();
            uint64_t v68 = v59 - (void)v65;
            if (v68 >> 2 > v67) {
              unint64_t v67 = v68 >> 2;
            }
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v69 = v67;
            }
            if (v69)
            {
              char v70 = (char *)sub_190347A00(v11, v69);
              unint64_t v65 = *(char **)(a1 + 32);
              unint64_t v60 = *(char **)(a1 + 40);
            }
            else
            {
              char v70 = 0;
            }
            uint64_t v77 = &v70[8 * v66];
            *(void *)uint64_t v77 = 0;
            unint64_t v61 = v77 + 8;
            while (v60 != v65)
            {
              uint64_t v78 = *((void *)v60 - 1);
              v60 -= 8;
              *((void *)v77 - 1) = v78;
              v77 -= 8;
            }
            *(void *)(a1 + 32) = v77;
            *(void *)(a1 + 40) = v61;
            *(void *)(a1 + 48) = &v70[8 * v69];
            if (v65) {
              operator delete(v65);
            }
          }
          else
          {
            *(void *)unint64_t v60 = 0;
            unint64_t v61 = v60 + 8;
          }
          *(void *)(a1 + 40) = v61;
          unint64_t v79 = *((void *)this + 1);
          if (v79 <= 0xFFFFFFFFFFFFFFF7 && v79 + 8 <= *((void *)this + 2))
          {
            *(v61 - 1) = *(void *)(*(void *)this + v79);
LABEL_122:
            uint64_t v80 = *((void *)this + 1) + 8;
            goto LABEL_134;
          }
          goto LABEL_131;
        case 7u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v44 = *((void *)this + 1);
            unint64_t v45 = *((void *)this + 2);
            while (v44 < v45 && !*((unsigned char *)this + 24))
            {
              char v47 = *(char **)(a1 + 16);
              unint64_t v46 = *(void *)(a1 + 24);
              if ((unint64_t)v47 >= v46)
              {
                uint64_t v49 = (char *)*v8;
                uint64_t v50 = (v47 - (unsigned char *)*v8) >> 2;
                unint64_t v51 = v50 + 1;
                if ((unint64_t)(v50 + 1) >> 62) {
                  goto LABEL_144;
                }
                uint64_t v52 = v46 - (void)v49;
                if (v52 >> 1 > v51) {
                  unint64_t v51 = v52 >> 1;
                }
                if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v53 = v51;
                }
                if (v53)
                {
                  uint64_t v54 = (char *)sub_190347D04(v9, v53);
                  uint64_t v49 = *(char **)(a1 + 8);
                  char v47 = *(char **)(a1 + 16);
                }
                else
                {
                  uint64_t v54 = 0;
                }
                char v55 = &v54[4 * v50];
                *(_DWORD *)char v55 = 0;
                unsigned int v48 = v55 + 4;
                while (v47 != v49)
                {
                  int v56 = *((_DWORD *)v47 - 1);
                  v47 -= 4;
                  *((_DWORD *)v55 - 1) = v56;
                  v55 -= 4;
                }
                *(void *)(a1 + 8) = v55;
                *(void *)(a1 + 16) = v48;
                *(void *)(a1 + 24) = &v54[4 * v53];
                if (v49) {
                  operator delete(v49);
                }
              }
              else
              {
                *(_DWORD *)char v47 = 0;
                unsigned int v48 = v47 + 4;
              }
              *(void *)(a1 + 16) = v48;
              unint64_t v57 = *((void *)this + 1);
              if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)this + 2))
              {
LABEL_95:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v48 - 1) = *(_DWORD *)(*(void *)this + v57);
              unint64_t v45 = *((void *)this + 2);
              unint64_t v44 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v44;
            }
LABEL_96:
            PB::Reader::recallMark();
          }
          else
          {
            char v63 = *(char **)(a1 + 16);
            unint64_t v62 = *(void *)(a1 + 24);
            if ((unint64_t)v63 >= v62)
            {
              char v71 = (char *)*v8;
              uint64_t v72 = (v63 - (unsigned char *)*v8) >> 2;
              unint64_t v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62) {
LABEL_144:
              }
                sub_1903479E8();
              uint64_t v74 = v62 - (void)v71;
              if (v74 >> 1 > v73) {
                unint64_t v73 = v74 >> 1;
              }
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v73;
              }
              if (v75)
              {
                unint64_t v76 = (char *)sub_190347D04(v9, v75);
                char v71 = *(char **)(a1 + 8);
                char v63 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v76 = 0;
              }
              unint64_t v81 = &v76[4 * v72];
              *(_DWORD *)unint64_t v81 = 0;
              unsigned int v64 = v81 + 4;
              while (v63 != v71)
              {
                int v82 = *((_DWORD *)v63 - 1);
                v63 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *(void *)(a1 + 8) = v81;
              *(void *)(a1 + 16) = v64;
              *(void *)(a1 + 24) = &v76[4 * v75];
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *(_DWORD *)char v63 = 0;
              unsigned int v64 = v63 + 4;
            }
            *(void *)(a1 + 16) = v64;
            unint64_t v83 = *((void *)this + 1);
            if (v83 <= 0xFFFFFFFFFFFFFFFBLL && v83 + 4 <= *((void *)this + 2))
            {
              *(v64 - 1) = *(_DWORD *)(*(void *)this + v83);
LABEL_133:
              uint64_t v80 = *((void *)this + 1) + 4;
LABEL_134:
              *((void *)this + 1) = v80;
            }
            else
            {
LABEL_131:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_135:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 8u:
          *(unsigned char *)(a1 + 100) |= 0x20u;
          unint64_t v58 = *((void *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFFBLL || v58 + 4 > *((void *)this + 2)) {
            goto LABEL_131;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v58);
          goto LABEL_133;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_135;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903D2C50(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 100);
  if ((v4 & 0x10) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 88));
    char v4 = *(unsigned char *)(v3 + 100);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(unsigned char *)(result + 100) & 4) == 0)
  {
    goto LABEL_3;
  }
  double result = PB::Writer::write(this, *(double *)(v3 + 72));
  char v4 = *(unsigned char *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_18:
    double result = PB::Writer::write(this, *(double *)(v3 + 56));
    if ((*(unsigned char *)(v3 + 100) & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  double result = PB::Writer::write(this, *(double *)(v3 + 80));
  char v4 = *(unsigned char *)(v3 + 100);
  if (v4) {
    goto LABEL_18;
  }
LABEL_5:
  if ((v4 & 2) != 0) {
LABEL_6:
  }
    double result = PB::Writer::write(this, *(double *)(v3 + 64));
LABEL_7:
  char v5 = *(double **)(v3 + 32);
  double v6 = *(double **)(v3 + 40);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  float v8 = *(float **)(v3 + 8);
  uint64_t v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    double result = PB::Writer::write(this, v10);
  }
  if ((*(unsigned char *)(v3 + 100) & 0x20) != 0)
  {
    float v11 = *(float *)(v3 + 96);
    return PB::Writer::write(this, v11);
  }
  return result;
}

uint64_t sub_1903D2D7C(uint64_t result)
{
  *(void *)double result = &unk_1EDFCFF70;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1903D2DA4(PB::Base *this)
{
  *(void *)this = &unk_1EDFCFF70;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903D2E08(PB::Base *a1)
{
  sub_1903D2DA4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D2E40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 60);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "deltaHeading", *(float *)(a1 + 48));
    char v5 = *(unsigned char *)(a1 + 60);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(unsigned char *)(a1 + 60) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gravityZ", *(float *)(a1 + 52));
  char v5 = *(unsigned char *)(a1 + 60);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_15:
  PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 60) & 0x10) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "meanRotRate", *(float *)(a1 + 56));
LABEL_6:
  double v6 = *(float **)(a1 + 8);
  double v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "quaternion", v8);
  }
  if ((*(unsigned char *)(a1 + 60) & 2) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903D2F5C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 60) |= 2u;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_85;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v22);
          goto LABEL_31;
        case 2u:
          *(unsigned char *)(a1 + 60) |= 1u;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
            goto LABEL_85;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v23);
LABEL_31:
          uint64_t v24 = *((void *)this + 1) + 8;
          goto LABEL_88;
        case 3u:
          *(unsigned char *)(a1 + 60) |= 0x10u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)this + 2)) {
            goto LABEL_85;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v25);
          goto LABEL_87;
        case 4u:
          *(unsigned char *)(a1 + 60) |= 8u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_85;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_87;
        case 5u:
          if ((v13 & 7) == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v27 = *((void *)this + 1);
            unint64_t v28 = *((void *)this + 2);
            while (v27 < v28 && !*((unsigned char *)this + 24))
            {
              unint64_t v30 = *(char **)(a1 + 16);
              unint64_t v29 = *(void *)(a1 + 24);
              if ((unint64_t)v30 >= v29)
              {
                unint64_t v32 = (char *)*v8;
                uint64_t v33 = (v30 - (unsigned char *)*v8) >> 2;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62) {
                  goto LABEL_97;
                }
                uint64_t v35 = v29 - (void)v32;
                if (v35 >> 1 > v34) {
                  unint64_t v34 = v35 >> 1;
                }
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36)
                {
                  unint64_t v37 = (char *)sub_190347D04(v9, v36);
                  unint64_t v32 = *(char **)(a1 + 8);
                  unint64_t v30 = *(char **)(a1 + 16);
                }
                else
                {
                  unint64_t v37 = 0;
                }
                uint64_t v38 = &v37[4 * v33];
                *(_DWORD *)uint64_t v38 = 0;
                unint64_t v31 = v38 + 4;
                while (v30 != v32)
                {
                  int v39 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *((_DWORD *)v38 - 1) = v39;
                  v38 -= 4;
                }
                *(void *)(a1 + 8) = v38;
                *(void *)(a1 + 16) = v31;
                *(void *)(a1 + 24) = &v37[4 * v36];
                if (v32) {
                  operator delete(v32);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v30 = 0;
                unint64_t v31 = v30 + 4;
              }
              *(void *)(a1 + 16) = v31;
              unint64_t v40 = *((void *)this + 1);
              if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v31 - 1) = *(_DWORD *)(*(void *)this + v40);
              unint64_t v28 = *((void *)this + 2);
              unint64_t v27 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v27;
            }
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v43 = *(char **)(a1 + 16);
            unint64_t v42 = *(void *)(a1 + 24);
            if ((unint64_t)v43 >= v42)
            {
              unint64_t v45 = (char *)*v8;
              uint64_t v46 = (v43 - (unsigned char *)*v8) >> 2;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62) {
LABEL_97:
              }
                sub_1903479E8();
              uint64_t v48 = v42 - (void)v45;
              if (v48 >> 1 > v47) {
                unint64_t v47 = v48 >> 1;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                uint64_t v50 = (char *)sub_190347D04(v9, v49);
                unint64_t v45 = *(char **)(a1 + 8);
                unint64_t v43 = *(char **)(a1 + 16);
              }
              else
              {
                uint64_t v50 = 0;
              }
              unint64_t v51 = &v50[4 * v46];
              *(_DWORD *)unint64_t v51 = 0;
              unint64_t v44 = v51 + 4;
              while (v43 != v45)
              {
                int v52 = *((_DWORD *)v43 - 1);
                v43 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }
              *(void *)(a1 + 8) = v51;
              *(void *)(a1 + 16) = v44;
              *(void *)(a1 + 24) = &v50[4 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v43 = 0;
              unint64_t v44 = v43 + 4;
            }
            *(void *)(a1 + 16) = v44;
            unint64_t v53 = *((void *)this + 1);
            if (v53 <= 0xFFFFFFFFFFFFFFFBLL && v53 + 4 <= *((void *)this + 2))
            {
              *(v44 - 1) = *(_DWORD *)(*(void *)this + v53);
LABEL_87:
              uint64_t v24 = *((void *)this + 1) + 4;
LABEL_88:
              *((void *)this + 1) = v24;
            }
            else
            {
LABEL_85:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_89:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 6u:
          *(unsigned char *)(a1 + 60) |= 4u;
          unint64_t v41 = *((void *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
            goto LABEL_85;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v41);
          goto LABEL_87;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_89;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903D342C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 60);
  if ((v4 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 40));
    char v4 = *(unsigned char *)(v3 + 60);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
LABEL_13:
      double result = PB::Writer::write(this, *(float *)(v3 + 56));
      if ((*(unsigned char *)(v3 + 60) & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(result + 60) & 1) == 0)
  {
    goto LABEL_3;
  }
  double result = PB::Writer::write(this, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 60);
  if ((v4 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_4:
  if ((v4 & 8) != 0) {
LABEL_5:
  }
    double result = PB::Writer::write(this, *(float *)(v3 + 52));
LABEL_6:
  char v5 = *(float **)(v3 + 8);
  double v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  if ((*(unsigned char *)(v3 + 60) & 4) != 0)
  {
    float v8 = *(float *)(v3 + 48);
    return PB::Writer::write(this, v8);
  }
  return result;
}

void *sub_1903D351C(void *result)
{
  *double result = &unk_1EDFCFE58;
  result[1] = 0;
  return result;
}

void sub_1903D353C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCFE58;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903D35BC(PB::Base *a1)
{
  sub_1903D353C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D35F4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "correction");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D3670(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903D386C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

double sub_1903D3888(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCE728;
  *(_DWORD *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  return result;
}

void sub_1903D38C4(PB::Base *this)
{
  *(void *)this = &unk_1EDFCE728;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_1903D3948(PB::Base *a1)
{
  sub_1903D38C4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D3980(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(double **)(a1 + 8);
  double v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }
  char v8 = *(unsigned char *)(a1 + 96);
  if ((v8 & 4) != 0)
  {
    PB::TextFormatter::format(this, "isInitFinished");
    char v8 = *(unsigned char *)(a1 + 96);
    if ((v8 & 1) == 0)
    {
LABEL_5:
      if ((v8 & 2) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((*(unsigned char *)(a1 + 96) & 1) == 0)
  {
    goto LABEL_5;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  if ((*(unsigned char *)(a1 + 96) & 2) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "trackingState");
LABEL_7:
  unsigned int v9 = *(double **)(a1 + 32);
  unint64_t v10 = *(double **)(a1 + 40);
  while (v9 != v10)
  {
    double v11 = *v9++;
    PB::TextFormatter::format(this, "translation", v11);
  }
  char v12 = *(double **)(a1 + 56);
  unint64_t v13 = *(double **)(a1 + 64);
  while (v12 != v13)
  {
    double v14 = *v12++;
    PB::TextFormatter::format(this, "velocity", v14);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903D3AB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)(a1 + 56);
    uint64_t v119 = a1 + 72;
    unsigned int v9 = (void **)(a1 + 32);
    uint64_t v10 = a1 + 48;
    double v11 = (void **)(a1 + 8);
    uint64_t v12 = a1 + 24;
    while (1)
    {
      uint64_t v13 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        BOOL v19 = v15++ > 8;
        if (v19) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 96) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_177;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v26);
          goto LABEL_179;
        case 2u:
          if (v25 != 2)
          {
            int v82 = *(char **)(a1 + 16);
            unint64_t v81 = *(void *)(a1 + 24);
            if ((unint64_t)v82 >= v81)
            {
              unint64_t v92 = (char *)*v11;
              uint64_t v93 = (v82 - (unsigned char *)*v11) >> 3;
              unint64_t v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 61) {
LABEL_190:
              }
                sub_1903479E8();
              uint64_t v95 = v81 - (void)v92;
              if (v95 >> 2 > v94) {
                unint64_t v94 = v95 >> 2;
              }
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v96 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v96 = v94;
              }
              if (v96)
              {
                unsigned int v97 = (char *)sub_190347A00(v12, v96);
                unint64_t v92 = *(char **)(a1 + 8);
                int v82 = *(char **)(a1 + 16);
              }
              else
              {
                unsigned int v97 = 0;
              }
              unint64_t v110 = &v97[8 * v93];
              *(void *)unint64_t v110 = 0;
              unint64_t v83 = v110 + 8;
              while (v82 != v92)
              {
                uint64_t v111 = *((void *)v82 - 1);
                v82 -= 8;
                *((void *)v110 - 1) = v111;
                v110 -= 8;
              }
              *(void *)(a1 + 8) = v110;
              *(void *)(a1 + 16) = v83;
              *(void *)(a1 + 24) = &v97[8 * v96];
              if (v92) {
                operator delete(v92);
              }
            }
            else
            {
              *(void *)int v82 = 0;
              unint64_t v83 = v82 + 8;
            }
            *(void *)(a1 + 16) = v83;
            goto LABEL_175;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v27 = *((void *)this + 1);
          unint64_t v28 = *((void *)this + 2);
          while (v27 < v28 && !*((unsigned char *)this + 24))
          {
            unint64_t v30 = *(char **)(a1 + 16);
            unint64_t v29 = *(void *)(a1 + 24);
            if ((unint64_t)v30 >= v29)
            {
              unint64_t v32 = (char *)*v11;
              uint64_t v33 = (v30 - (unsigned char *)*v11) >> 3;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 61) {
                goto LABEL_190;
              }
              uint64_t v35 = v29 - (void)v32;
              if (v35 >> 2 > v34) {
                unint64_t v34 = v35 >> 2;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                unint64_t v37 = (char *)sub_190347A00(v12, v36);
                unint64_t v32 = *(char **)(a1 + 8);
                unint64_t v30 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v37 = 0;
              }
              uint64_t v38 = &v37[8 * v33];
              *(void *)uint64_t v38 = 0;
              unint64_t v31 = v38 + 8;
              while (v30 != v32)
              {
                uint64_t v39 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v38 - 1) = v39;
                v38 -= 8;
              }
              *(void *)(a1 + 8) = v38;
              *(void *)(a1 + 16) = v31;
              *(void *)(a1 + 24) = &v37[8 * v36];
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(void *)unint64_t v30 = 0;
              unint64_t v31 = v30 + 8;
            }
            *(void *)(a1 + 16) = v31;
            unint64_t v40 = *((void *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((void *)this + 2)) {
              goto LABEL_124;
            }
            *(v31 - 1) = *(void *)(*(void *)this + v40);
            unint64_t v28 = *((void *)this + 2);
            unint64_t v27 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v27;
          }
          goto LABEL_125;
        case 3u:
          if (v25 != 2)
          {
            uint64_t v85 = *(char **)(a1 + 40);
            unint64_t v84 = *(void *)(a1 + 48);
            if ((unint64_t)v85 >= v84)
            {
              uint64_t v98 = (char *)*v9;
              uint64_t v99 = (v85 - (unsigned char *)*v9) >> 3;
              unint64_t v100 = v99 + 1;
              if ((unint64_t)(v99 + 1) >> 61) {
LABEL_191:
              }
                sub_1903479E8();
              uint64_t v101 = v84 - (void)v98;
              if (v101 >> 2 > v100) {
                unint64_t v100 = v101 >> 2;
              }
              if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v102 = v100;
              }
              if (v102)
              {
                uint64_t v103 = (char *)sub_190347A00(v10, v102);
                uint64_t v98 = *(char **)(a1 + 32);
                uint64_t v85 = *(char **)(a1 + 40);
              }
              else
              {
                uint64_t v103 = 0;
              }
              char v112 = &v103[8 * v99];
              *(void *)char v112 = 0;
              unint64_t v83 = v112 + 8;
              while (v85 != v98)
              {
                uint64_t v113 = *((void *)v85 - 1);
                v85 -= 8;
                *((void *)v112 - 1) = v113;
                v112 -= 8;
              }
              *(void *)(a1 + 32) = v112;
              *(void *)(a1 + 40) = v83;
              *(void *)(a1 + 48) = &v103[8 * v102];
              if (v98) {
                operator delete(v98);
              }
            }
            else
            {
              *(void *)uint64_t v85 = 0;
              unint64_t v83 = v85 + 8;
            }
            *(void *)(a1 + 40) = v83;
            goto LABEL_175;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          while (v41 < v42 && !*((unsigned char *)this + 24))
          {
            unint64_t v44 = *(char **)(a1 + 40);
            unint64_t v43 = *(void *)(a1 + 48);
            if ((unint64_t)v44 >= v43)
            {
              uint64_t v46 = (char *)*v9;
              uint64_t v47 = (v44 - (unsigned char *)*v9) >> 3;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61) {
                goto LABEL_191;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 2 > v48) {
                unint64_t v48 = v49 >> 2;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_190347A00(v10, v50);
                uint64_t v46 = *(char **)(a1 + 32);
                unint64_t v44 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v51 = 0;
              }
              int v52 = &v51[8 * v47];
              *(void *)int v52 = 0;
              unint64_t v45 = v52 + 8;
              while (v44 != v46)
              {
                uint64_t v53 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v52 - 1) = v53;
                v52 -= 8;
              }
              *(void *)(a1 + 32) = v52;
              *(void *)(a1 + 40) = v45;
              *(void *)(a1 + 48) = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(void *)unint64_t v44 = 0;
              unint64_t v45 = v44 + 8;
            }
            *(void *)(a1 + 40) = v45;
            unint64_t v54 = *((void *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)this + 2)) {
              goto LABEL_124;
            }
            *(v45 - 1) = *(void *)(*(void *)this + v54);
            unint64_t v42 = *((void *)this + 2);
            unint64_t v41 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v41;
          }
          goto LABEL_125;
        case 4u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v55 = *((void *)this + 1);
            unint64_t v56 = *((void *)this + 2);
            while (v55 < v56 && !*((unsigned char *)this + 24))
            {
              unint64_t v58 = *(char **)(a1 + 64);
              unint64_t v57 = *(void *)(a1 + 72);
              if ((unint64_t)v58 >= v57)
              {
                unint64_t v60 = (char *)*v8;
                uint64_t v61 = (v58 - (unsigned char *)*v8) >> 3;
                unint64_t v62 = v61 + 1;
                if ((unint64_t)(v61 + 1) >> 61) {
                  goto LABEL_192;
                }
                uint64_t v63 = v57 - (void)v60;
                if (v63 >> 2 > v62) {
                  unint64_t v62 = v63 >> 2;
                }
                if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v64 = v62;
                }
                if (v64)
                {
                  unint64_t v65 = (char *)sub_190347A00(v119, v64);
                  unint64_t v60 = *(char **)(a1 + 56);
                  unint64_t v58 = *(char **)(a1 + 64);
                }
                else
                {
                  unint64_t v65 = 0;
                }
                uint64_t v66 = &v65[8 * v61];
                *(void *)uint64_t v66 = 0;
                unint64_t v59 = v66 + 8;
                while (v58 != v60)
                {
                  uint64_t v67 = *((void *)v58 - 1);
                  v58 -= 8;
                  *((void *)v66 - 1) = v67;
                  v66 -= 8;
                }
                *(void *)(a1 + 56) = v66;
                *(void *)(a1 + 64) = v59;
                *(void *)(a1 + 72) = &v65[8 * v64];
                if (v60) {
                  operator delete(v60);
                }
              }
              else
              {
                *(void *)unint64_t v58 = 0;
                unint64_t v59 = v58 + 8;
              }
              *(void *)(a1 + 64) = v59;
              unint64_t v68 = *((void *)this + 1);
              if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((void *)this + 2))
              {
LABEL_124:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v59 - 1) = *(void *)(*(void *)this + v68);
              unint64_t v56 = *((void *)this + 2);
              unint64_t v55 = *((void *)this + 1) + 8;
              *((void *)this + 1) = v55;
            }
LABEL_125:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v87 = *(char **)(a1 + 64);
            unint64_t v86 = *(void *)(a1 + 72);
            if ((unint64_t)v87 >= v86)
            {
              char v104 = (char *)*v8;
              uint64_t v105 = (v87 - (unsigned char *)*v8) >> 3;
              unint64_t v106 = v105 + 1;
              if ((unint64_t)(v105 + 1) >> 61) {
LABEL_192:
              }
                sub_1903479E8();
              uint64_t v107 = v86 - (void)v104;
              if (v107 >> 2 > v106) {
                unint64_t v106 = v107 >> 2;
              }
              if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v108 = v106;
              }
              if (v108)
              {
                unint64_t v109 = (char *)sub_190347A00(v119, v108);
                char v104 = *(char **)(a1 + 56);
                uint64_t v87 = *(char **)(a1 + 64);
              }
              else
              {
                unint64_t v109 = 0;
              }
              unint64_t v114 = &v109[8 * v105];
              *(void *)unint64_t v114 = 0;
              unint64_t v83 = v114 + 8;
              while (v87 != v104)
              {
                uint64_t v115 = *((void *)v87 - 1);
                v87 -= 8;
                *((void *)v114 - 1) = v115;
                v114 -= 8;
              }
              *(void *)(a1 + 56) = v114;
              *(void *)(a1 + 64) = v83;
              *(void *)(a1 + 72) = &v109[8 * v108];
              if (v104) {
                operator delete(v104);
              }
            }
            else
            {
              *(void *)uint64_t v87 = 0;
              unint64_t v83 = v87 + 8;
            }
            *(void *)(a1 + 64) = v83;
LABEL_175:
            unint64_t v116 = *((void *)this + 1);
            if (v116 <= 0xFFFFFFFFFFFFFFF7 && v116 + 8 <= *((void *)this + 2))
            {
              *(v83 - 1) = *(void *)(*(void *)this + v116);
LABEL_179:
              *((void *)this + 1) += 8;
            }
            else
            {
LABEL_177:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_180:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 5u:
          *(unsigned char *)(a1 + 96) |= 4u;
          unint64_t v69 = *((void *)this + 1);
          if (v69 >= *((void *)this + 2))
          {
            BOOL v72 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v70 = v69 + 1;
            int v71 = *(unsigned __int8 *)(*(void *)this + v69);
            *((void *)this + 1) = v70;
            BOOL v72 = v71 != 0;
          }
          *(unsigned char *)(a1 + 92) = v72;
          goto LABEL_180;
        case 6u:
          *(unsigned char *)(a1 + 96) |= 2u;
          unint64_t v73 = *((void *)this + 1);
          unint64_t v74 = *((void *)this + 2);
          uint64_t v75 = *(void *)this;
          if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
          {
            char v76 = 0;
            unsigned int v77 = 0;
            uint64_t v78 = 0;
            do
            {
              unint64_t v79 = v73 + 1;
              *((void *)this + 1) = v73 + 1;
              char v80 = *(unsigned char *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0) {
                goto LABEL_153;
              }
              v76 += 7;
              unint64_t v73 = v79;
              BOOL v19 = v77++ > 8;
            }
            while (!v19);
LABEL_123:
            LODWORD(v78) = 0;
            goto LABEL_153;
          }
          char v88 = 0;
          unsigned int v89 = 0;
          uint64_t v78 = 0;
          if (v74 <= v73) {
            unint64_t v74 = *((void *)this + 1);
          }
          while (2)
          {
            if (v74 == v73)
            {
              LODWORD(v78) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v90 = v73 + 1;
              char v91 = *(unsigned char *)(v75 + v73);
              *((void *)this + 1) = v90;
              v78 |= (unint64_t)(v91 & 0x7F) << v88;
              if (v91 < 0)
              {
                v88 += 7;
                unint64_t v73 = v90;
                BOOL v19 = v89++ > 8;
                if (v19) {
                  goto LABEL_123;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v78) = 0;
              }
            }
            break;
          }
LABEL_153:
          *(_DWORD *)(a1 + 88) = v78;
          goto LABEL_180;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_180;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903D4340(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 96)) {
    double result = PB::Writer::write(this, *(double *)(result + 80));
  }
  int v4 = *(double **)(v3 + 8);
  uint64_t v5 = *(double **)(v3 + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  double v7 = *(double **)(v3 + 32);
  char v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  uint64_t v10 = *(double **)(v3 + 56);
  double v11 = *(double **)(v3 + 64);
  while (v10 != v11)
  {
    double v12 = *v10++;
    double result = PB::Writer::write(this, v12);
  }
  char v13 = *(unsigned char *)(v3 + 96);
  if ((v13 & 4) != 0)
  {
    double result = PB::Writer::write(this);
    char v13 = *(unsigned char *)(v3 + 96);
  }
  if ((v13 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903D4430(uint64_t result)
{
  *(void *)double result = &unk_1EDFC2F50;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1903D4458(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D4490(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "gestureType");
    char v5 = *(unsigned char *)(a1 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "hostPowerState");
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "machContinuousTime", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "receivedTime", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "state");
  if ((*(unsigned char *)(a1 + 44) & 4) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "timestampPossible");
LABEL_8:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D4594(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 44) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_52;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 2u:
              *(unsigned char *)(a1 + 44) |= 4u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_82;
                  }
                  unint64_t v43 = v21++;
                  char v44 = *(unsigned char *)(v22 + v43);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  BOOL v14 = v42++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_81:
                    unint64_t v2 = v43 + 1;
                    goto LABEL_82;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_81;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_82;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_82:
              *(void *)(a1 + 24) = v25;
              goto LABEL_93;
            case 3u:
              *(unsigned char *)(a1 + 44) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_87;
                  }
                  unint64_t v47 = v27++;
                  char v48 = *(unsigned char *)(v28 + v47);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_86:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_86;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_87;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_87:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_93;
            case 4u:
              *(unsigned char *)(a1 + 44) |= 8u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_92;
                  }
                  unint64_t v51 = v33++;
                  char v52 = *(unsigned char *)(v34 + v51);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_91:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_92;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_91;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_92;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_92:
              *(_DWORD *)(a1 + 32) = v37;
LABEL_93:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(unsigned char *)(a1 + 44) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *(unsigned char *)(a1 + 40) = v40;
              goto LABEL_93;
            case 6u:
              *(unsigned char *)(a1 + 44) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_77:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_52:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_93;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_93;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903D4AAC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 44);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::write(this);
    if ((*(unsigned char *)(v3 + 44) & 1) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903D4B8C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCF88;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_1903D4BB4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D4BEC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "detectionMode");
    int v5 = *(_DWORD *)(a1 + 84);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v5 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "detectorRunning");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "enableStateDetected");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "fireAll");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "gestureDetectionDelay", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "gyroInUse");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "hostAwake");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "hostWakeCount");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 2) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "hostWakeDelay", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "invertSensors");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 4) == 0)
  {
LABEL_12:
    if ((v5 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "runningModeDuration", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "runningModeStartTime", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "runningSwitchCount");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x10) == 0) {
      goto LABEL_16;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "state");
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x400) == 0) {
      goto LABEL_18;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "timestampPossible", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 84);
  if ((v5 & 0x400) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_39:
  PB::TextFormatter::format(this, "type");
  if ((*(_DWORD *)(a1 + 84) & 0x20000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "wakePending");
LABEL_20:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D4E70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 84) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 2u:
              *(_DWORD *)(a1 + 84) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 3u:
              *(_DWORD *)(a1 + 84) |= 0x200u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  unint64_t v67 = v21++;
                  char v68 = *(unsigned char *)(v22 + v67);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_145:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_145;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_146;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 68) = v25;
              goto LABEL_167;
            case 4u:
              *(_DWORD *)(a1 + 84) |= 0x400u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_151;
                  }
                  unint64_t v71 = v27++;
                  char v72 = *(unsigned char *)(v28 + v71);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_150:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_150;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_151;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_151:
              *(_DWORD *)(a1 + 72) = v31;
              goto LABEL_167;
            case 5u:
              *(_DWORD *)(a1 + 84) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 76) = v34;
              goto LABEL_167;
            case 6u:
              *(_DWORD *)(a1 + 84) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *(unsigned char *)(a1 + 81) = v36;
              goto LABEL_167;
            case 7u:
              *(_DWORD *)(a1 + 84) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v38 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v37 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v38 = v37 != 0;
              }
              *(unsigned char *)(a1 + 79) = v38;
              goto LABEL_167;
            case 8u:
              *(_DWORD *)(a1 + 84) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *(unsigned char *)(a1 + 80) = v40;
              goto LABEL_167;
            case 9u:
              *(_DWORD *)(a1 + 84) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v42 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v42 = v41 != 0;
              }
              *(unsigned char *)(a1 + 78) = v42;
              goto LABEL_167;
            case 0xAu:
              *(_DWORD *)(a1 + 84) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v44 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v43 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v44 = v43 != 0;
              }
              *(unsigned char *)(a1 + 82) = v44;
              goto LABEL_167;
            case 0xBu:
              *(_DWORD *)(a1 + 84) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *(unsigned char *)(a1 + 77) = v46;
              goto LABEL_167;
            case 0xCu:
              *(_DWORD *)(a1 + 84) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xDu:
              *(_DWORD *)(a1 + 84) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xEu:
              *(_DWORD *)(a1 + 84) |= 0x80u;
              unint64_t v47 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_156;
                  }
                  unint64_t v75 = v47++;
                  char v76 = *(unsigned char *)(v48 + v75);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_155:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v51) = 0;
                }
                goto LABEL_155;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_156;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_156:
              *(_DWORD *)(a1 + 60) = v51;
              goto LABEL_167;
            case 0xFu:
              *(_DWORD *)(a1 + 84) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0x10u:
              *(_DWORD *)(a1 + 84) |= 0x100u;
              unint64_t v53 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  unint64_t v79 = v53++;
                  char v80 = *(unsigned char *)(v54 + v79);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_160:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v57) = 0;
                }
                goto LABEL_160;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 64) = v57;
              goto LABEL_167;
            case 0x11u:
              *(_DWORD *)(a1 + 84) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_141:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_83:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_167;
            case 0x12u:
              *(_DWORD *)(a1 + 84) |= 0x40u;
              unint64_t v59 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v60 = *(void *)this;
              if (v59 > 0xFFFFFFFFFFFFFFF5 || v59 + 10 > v2)
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v63 = 0;
                if (v2 <= v59) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v59)
                  {
                    LODWORD(v63) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_166;
                  }
                  unint64_t v83 = v59++;
                  char v84 = *(unsigned char *)(v60 + v83);
                  *((void *)this + 1) = v59;
                  v63 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  BOOL v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v63) = 0;
LABEL_165:
                    unint64_t v2 = v83 + 1;
                    goto LABEL_166;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v63) = 0;
                }
                goto LABEL_165;
              }
              char v61 = 0;
              unsigned int v62 = 0;
              uint64_t v63 = 0;
              do
              {
                unint64_t v2 = v59 + 1;
                *((void *)this + 1) = v59 + 1;
                char v64 = *(unsigned char *)(v60 + v59);
                v63 |= (unint64_t)(v64 & 0x7F) << v61;
                if ((v64 & 0x80) == 0) {
                  goto LABEL_166;
                }
                v61 += 7;
                unint64_t v59 = v2;
                BOOL v14 = v62++ > 8;
              }
              while (!v14);
              LODWORD(v63) = 0;
LABEL_166:
              *(_DWORD *)(a1 + 56) = v63;
LABEL_167:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_167;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903D5808(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 84);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40));
    int v4 = *(_DWORD *)(v3 + 84);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x4000) == 0)
  {
LABEL_8:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x8000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x1000) == 0)
  {
LABEL_12:
    if ((v4 & 2) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 0x100) == 0)
  {
LABEL_17:
    if ((v4 & 4) == 0) {
      goto LABEL_18;
    }
LABEL_36:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
    if ((*(_DWORD *)(v3 + 84) & 0x40) == 0) {
      return result;
    }
    goto LABEL_37;
  }
LABEL_35:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 84);
  if ((v4 & 4) != 0) {
    goto LABEL_36;
  }
LABEL_18:
  if ((v4 & 0x40) == 0) {
    return result;
  }
LABEL_37:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903D5A38(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCE760;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_1903D5A60(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D5A98(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dataRate", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 0x800) == 0)
    {
LABEL_3:
      if ((v5 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((*(_WORD *)(a1 + 60) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isInterpolated");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x1000) == 0)
  {
LABEL_4:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isMissingSamples");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x2000) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "isWalkingFiltered");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "isWalkingRaw");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "maxSampleDeltaInSecond", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "pedEnergyPlane", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "pedEnergyZ", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "pedEnergyZByPlane", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "pedEnergyZPeak", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "reversedTimestampCounts");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "thetaPitchFaceDeg", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x200) == 0)
  {
LABEL_14:
    if ((v5 & 0x400) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "thetaRollFaceDeg", *(float *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x400) == 0)
  {
LABEL_15:
    if ((v5 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_33:
  PB::TextFormatter::format(this, "thetaYawFaceDeg", *(float *)(a1 + 52));
  if (*(_WORD *)(a1 + 60)) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "timestamp");
LABEL_17:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D5CBC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 60) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 2u:
              *(_WORD *)(a1 + 60) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 3u:
              *(_WORD *)(a1 + 60) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 4u:
              *(_WORD *)(a1 + 60) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 5u:
              *(_WORD *)(a1 + 60) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 6u:
              *(_WORD *)(a1 + 60) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 7u:
              *(_WORD *)(a1 + 60) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 8u:
              *(_WORD *)(a1 + 60) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 59) = v22;
              goto LABEL_107;
            case 9u:
              *(_WORD *)(a1 + 60) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *(unsigned char *)(a1 + 58) = v24;
              goto LABEL_107;
            case 0xAu:
              *(_WORD *)(a1 + 60) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *(unsigned char *)(a1 + 57) = v26;
              goto LABEL_107;
            case 0xBu:
              *(_WORD *)(a1 + 60) |= 1u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_101;
                  }
                  unint64_t v43 = v27++;
                  char v44 = *(unsigned char *)(v28 + v43);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  BOOL v14 = v42++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_100:
                    unint64_t v2 = v43 + 1;
                    goto LABEL_101;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_100;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_101;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_101:
              *(void *)(a1 + 8) = v31;
              goto LABEL_107;
            case 0xCu:
              *(_WORD *)(a1 + 60) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 56) = v34;
              goto LABEL_107;
            case 0xDu:
              *(_WORD *)(a1 + 60) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_65;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_96;
            case 0xEu:
              *(_WORD *)(a1 + 60) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_96:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_65:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_107;
            case 0xFu:
              *(_WORD *)(a1 + 60) |= 0x80u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  unint64_t v47 = v35++;
                  char v48 = *(unsigned char *)(v36 + v47);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_105:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_105;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_106;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_106:
              *(_DWORD *)(a1 + 40) = v39;
LABEL_107:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_107;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903D6360(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 24));
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x4000) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x800) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 4) == 0) {
      goto LABEL_15;
    }
LABEL_30:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
    if ((*(_WORD *)(v3 + 60) & 0x80) == 0) {
      return result;
    }
    goto LABEL_31;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) != 0) {
    goto LABEL_30;
  }
LABEL_15:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_31:

  return PB::Writer::writeVarInt(this);
}

double sub_1903D653C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCFAA0;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 244) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  return result;
}

void sub_1903D6580(PB::Base *this)
{
  *(void *)this = &unk_1EDFCFAA0;
  uint64_t v2 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 20);
  *((void *)this + 20) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 19);
  *((void *)this + 19) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 18);
  *((void *)this + 18) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 17);
  *((void *)this + 17) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  uint64_t v8 = *((void *)this + 15);
  *((void *)this + 15) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  uint64_t v9 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  uint64_t v10 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 12);
  *((void *)this + 12) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  uint64_t v13 = *((void *)this + 8);
  *((void *)this + 8) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }

  PB::Base::~Base(this);
}

void sub_1903D6814(PB::Base *a1)
{
  sub_1903D6580(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D684C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x100000) != 0)
  {
    PB::TextFormatter::format(this, "appliedBoutMetricCorrections");
    int v5 = *(_DWORD *)(a1 + 244);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_60;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dailyFlights30daysMax", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "dailyFlights30daysMean", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "dailySteps30DaysTotal", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "dailySteps30daysMax", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "dailySteps30daysMean", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "dailySteps7DaysTotal", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "dailySteps7daysMean", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "daysWithSteps30Days");
  int v5 = *(_DWORD *)(a1 + 244);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_67:
  PB::TextFormatter::format(this, "daysWithSteps7Days");
  if ((*(_DWORD *)(a1 + 244) & 0x8000) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "errorStatus");
LABEL_13:
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "eventResult");
  }
  int v7 = *(_DWORD *)(a1 + 244);
  if ((v7 & 0x200000) != 0)
  {
    PB::TextFormatter::format(this, "fusionSuccess");
    int v7 = *(_DWORD *)(a1 + 244);
    if ((v7 & 0x80) == 0)
    {
LABEL_17:
      if ((v7 & 0x100) == 0) {
        goto LABEL_18;
      }
      goto LABEL_71;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_17;
  }
  PB::TextFormatter::format(this, "hkEndTime", *(double *)(a1 + 72));
  int v7 = *(_DWORD *)(a1 + 244);
  if ((v7 & 0x100) == 0)
  {
LABEL_18:
    if ((v7 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_71:
  PB::TextFormatter::format(this, "hkStartTime", *(double *)(a1 + 80));
  if ((*(_DWORD *)(a1 + 244) & 0x400000) != 0) {
LABEL_19:
  }
    PB::TextFormatter::format(this, "isHistoricalCompute");
LABEL_20:
  uint64_t v8 = *(void *)(a1 + 88);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, this, "modelBalanceFeatures");
  }
  uint64_t v9 = *(void *)(a1 + 96);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, this, "modelContinuousWalkingFeatures");
  }
  uint64_t v10 = *(void *)(a1 + 104);
  if (v10) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v10 + 32))(v10, this, "modelContinuousWalkingResult");
  }
  uint64_t v11 = *(void *)(a1 + 112);
  if (v11) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v11 + 32))(v11, this, "modelGaitBaselineFeatures");
  }
  uint64_t v12 = *(void *)(a1 + 120);
  if (v12) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v12 + 32))(v12, this, "modelGaitBaselineResult");
  }
  uint64_t v13 = *(void *)(a1 + 128);
  if (v13) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v13 + 32))(v13, this, "modelHarmonicFeatures");
  }
  uint64_t v14 = *(void *)(a1 + 136);
  if (v14) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v14 + 32))(v14, this, "modelHarmonicResult");
  }
  uint64_t v15 = *(void *)(a1 + 144);
  if (v15) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v15 + 32))(v15, this, "modelTemporalDispersionFeatures");
  }
  uint64_t v16 = *(void *)(a1 + 152);
  if (v16) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v16 + 32))(v16, this, "modelTemporalDispersionResult");
  }
  uint64_t v17 = *(void *)(a1 + 160);
  if (v17) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v17 + 32))(v17, this, "modelTemporalEntropyFeatures");
  }
  uint64_t v18 = *(void *)(a1 + 168);
  if (v18) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v18 + 32))(v18, this, "modelTemporalEntropyResult");
  }
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "nextClassificationTime", *(double *)(a1 + 176));
    int v19 = *(_DWORD *)(a1 + 244);
    if ((v19 & 0x400) == 0)
    {
LABEL_44:
      if ((v19 & 0x10000) == 0) {
        goto LABEL_45;
      }
      goto LABEL_75;
    }
  }
  else if ((v19 & 0x400) == 0)
  {
    goto LABEL_44;
  }
  PB::TextFormatter::format(this, "rawSteadiness", *(double *)(a1 + 184));
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x10000) == 0)
  {
LABEL_45:
    if ((v19 & 0x800) == 0) {
      goto LABEL_46;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "rejectionStatus");
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x800) == 0)
  {
LABEL_46:
    if ((v19 & 0x800000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "steadinessScore", *(double *)(a1 + 192));
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x800000) == 0)
  {
LABEL_47:
    if ((v19 & 0x1000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "steadinessScoreIsValid");
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x1000) == 0)
  {
LABEL_48:
    if ((v19 & 0x20000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "unadjustedScore", *(double *)(a1 + 200));
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x20000) == 0)
  {
LABEL_49:
    if ((v19 & 0x40000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "userAge", *(float *)(a1 + 224));
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x40000) == 0)
  {
LABEL_50:
    if ((v19 & 0x1000000) == 0) {
      goto LABEL_51;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "userHeight", *(float *)(a1 + 228));
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x1000000) == 0)
  {
LABEL_51:
    if ((v19 & 0x2000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "userIsAgeSet");
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x2000000) == 0)
  {
LABEL_52:
    if ((v19 & 0x4000000) == 0) {
      goto LABEL_53;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "userIsHeightSet");
  int v19 = *(_DWORD *)(a1 + 244);
  if ((v19 & 0x4000000) == 0)
  {
LABEL_53:
    if ((v19 & 0x80000) == 0) {
      goto LABEL_55;
    }
    goto LABEL_54;
  }
LABEL_83:
  PB::TextFormatter::format(this, "userIsWeightSet");
  if ((*(_DWORD *)(a1 + 244) & 0x80000) != 0) {
LABEL_54:
  }
    PB::TextFormatter::format(this, "userWeight", *(float *)(a1 + 232));
LABEL_55:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D6E90(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 244) |= 0x100u;
          unint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v20);
          goto LABEL_170;
        case 2u:
          *(_DWORD *)(a1 + 244) |= 0x80u;
          unint64_t v21 = *((void *)this + 1);
          if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v21);
          goto LABEL_170;
        case 4u:
          *(_DWORD *)(a1 + 244) |= 0x10000u;
          unint64_t v23 = *((void *)this + 1);
          unint64_t v24 = *((void *)this + 2);
          uint64_t v25 = *(void *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v28 = 0;
            do
            {
              unint64_t v29 = v23 + 1;
              *((void *)this + 1) = v23 + 1;
              char v30 = *(unsigned char *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0) {
                goto LABEL_175;
              }
              v26 += 7;
              unint64_t v23 = v29;
              BOOL v14 = v27++ > 8;
            }
            while (!v14);
LABEL_133:
            LODWORD(v28) = 0;
            goto LABEL_175;
          }
          char v98 = 0;
          unsigned int v99 = 0;
          uint64_t v28 = 0;
          if (v24 <= v23) {
            unint64_t v24 = *((void *)this + 1);
          }
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v100 = v23 + 1;
              char v101 = *(unsigned char *)(v25 + v23);
              *((void *)this + 1) = v100;
              v28 |= (unint64_t)(v101 & 0x7F) << v98;
              if (v101 < 0)
              {
                v98 += 7;
                unint64_t v23 = v100;
                BOOL v14 = v99++ > 8;
                if (v14) {
                  goto LABEL_133;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v28) = 0;
              }
            }
            break;
          }
LABEL_175:
          *(_DWORD *)(a1 + 220) = v28;
          goto LABEL_188;
        case 5u:
          *(_DWORD *)(a1 + 244) |= 0x8000u;
          unint64_t v31 = *((void *)this + 1);
          unint64_t v32 = *((void *)this + 2);
          uint64_t v33 = *(void *)this;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v36 = 0;
            do
            {
              unint64_t v37 = v31 + 1;
              *((void *)this + 1) = v31 + 1;
              char v38 = *(unsigned char *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0) {
                goto LABEL_179;
              }
              v34 += 7;
              unint64_t v31 = v37;
              BOOL v14 = v35++ > 8;
            }
            while (!v14);
LABEL_140:
            LODWORD(v36) = 0;
            goto LABEL_179;
          }
          char v102 = 0;
          unsigned int v103 = 0;
          uint64_t v36 = 0;
          if (v32 <= v31) {
            unint64_t v32 = *((void *)this + 1);
          }
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v104 = v31 + 1;
              char v105 = *(unsigned char *)(v33 + v31);
              *((void *)this + 1) = v104;
              v36 |= (unint64_t)(v105 & 0x7F) << v102;
              if (v105 < 0)
              {
                v102 += 7;
                unint64_t v31 = v104;
                BOOL v14 = v103++ > 8;
                if (v14) {
                  goto LABEL_140;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v36) = 0;
              }
            }
            break;
          }
LABEL_179:
          *(_DWORD *)(a1 + 216) = v36;
          goto LABEL_188;
        case 6u:
          *(_DWORD *)(a1 + 244) |= 0x40000u;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(_DWORD *)(a1 + 228) = *(_DWORD *)(*(void *)this + v39);
          goto LABEL_90;
        case 7u:
          *(_DWORD *)(a1 + 244) |= 0x2000000u;
          unint64_t v40 = *((void *)this + 1);
          if (v40 >= *((void *)this + 2))
          {
            BOOL v43 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v41 = v40 + 1;
            int v42 = *(unsigned __int8 *)(*(void *)this + v40);
            *((void *)this + 1) = v41;
            BOOL v43 = v42 != 0;
          }
          *(unsigned char *)(a1 + 241) = v43;
          goto LABEL_188;
        case 8u:
          *(_DWORD *)(a1 + 244) |= 0x80000u;
          unint64_t v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(_DWORD *)(a1 + 232) = *(_DWORD *)(*(void *)this + v44);
          goto LABEL_90;
        case 9u:
          *(_DWORD *)(a1 + 244) |= 0x4000000u;
          unint64_t v45 = *((void *)this + 1);
          if (v45 >= *((void *)this + 2))
          {
            BOOL v48 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v46 = v45 + 1;
            int v47 = *(unsigned __int8 *)(*(void *)this + v45);
            *((void *)this + 1) = v46;
            BOOL v48 = v47 != 0;
          }
          *(unsigned char *)(a1 + 242) = v48;
          goto LABEL_188;
        case 0xAu:
          *(_DWORD *)(a1 + 244) |= 0x200u;
          unint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(void *)(a1 + 176) = *(void *)(*(void *)this + v49);
          goto LABEL_170;
        case 0xBu:
          *(_DWORD *)(a1 + 244) |= 0x400000u;
          unint64_t v50 = *((void *)this + 1);
          if (v50 >= *((void *)this + 2))
          {
            BOOL v53 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v51 = v50 + 1;
            int v52 = *(unsigned __int8 *)(*(void *)this + v50);
            *((void *)this + 1) = v51;
            BOOL v53 = v52 != 0;
          }
          *(unsigned char *)(a1 + 238) = v53;
          goto LABEL_188;
        case 0xCu:
          operator new();
        case 0xDu:
          *(_DWORD *)(a1 + 244) |= 0x800u;
          unint64_t v54 = *((void *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(void *)(a1 + 192) = *(void *)(*(void *)this + v54);
          goto LABEL_170;
        case 0xEu:
          *(_DWORD *)(a1 + 244) |= 0x800000u;
          unint64_t v55 = *((void *)this + 1);
          if (v55 >= *((void *)this + 2))
          {
            BOOL v58 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v56 = v55 + 1;
            int v57 = *(unsigned __int8 *)(*(void *)this + v55);
            *((void *)this + 1) = v56;
            BOOL v58 = v57 != 0;
          }
          *(unsigned char *)(a1 + 239) = v58;
          goto LABEL_188;
        case 0xFu:
          *(_DWORD *)(a1 + 244) |= 0x400u;
          unint64_t v59 = *((void *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFF7 || v59 + 8 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(void *)(a1 + 184) = *(void *)(*(void *)this + v59);
          goto LABEL_170;
        case 0x10u:
          *(_DWORD *)(a1 + 244) |= 0x200000u;
          unint64_t v60 = *((void *)this + 1);
          if (v60 >= *((void *)this + 2))
          {
            BOOL v63 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v61 = v60 + 1;
            int v62 = *(unsigned __int8 *)(*(void *)this + v60);
            *((void *)this + 1) = v61;
            BOOL v63 = v62 != 0;
          }
          *(unsigned char *)(a1 + 237) = v63;
          goto LABEL_188;
        case 0x11u:
          operator new();
        case 0x12u:
          operator new();
        case 0x13u:
          operator new();
        case 0x14u:
          operator new();
        case 0x15u:
          operator new();
        case 0x16u:
          operator new();
        case 0x17u:
          operator new();
        case 0x18u:
          operator new();
        case 0x19u:
          *(_DWORD *)(a1 + 244) |= 0x100000u;
          unint64_t v64 = *((void *)this + 1);
          if (v64 >= *((void *)this + 2))
          {
            BOOL v67 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v65 = v64 + 1;
            int v66 = *(unsigned __int8 *)(*(void *)this + v64);
            *((void *)this + 1) = v65;
            BOOL v67 = v66 != 0;
          }
          *(unsigned char *)(a1 + 236) = v67;
          goto LABEL_188;
        case 0x1Au:
          operator new();
        case 0x1Bu:
          *(_DWORD *)(a1 + 244) |= 1u;
          unint64_t v68 = *((void *)this + 1);
          if (v68 > 0xFFFFFFFFFFFFFFF7 || v68 + 8 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v68);
          goto LABEL_170;
        case 0x1Cu:
          *(_DWORD *)(a1 + 244) |= 8u;
          unint64_t v69 = *((void *)this + 1);
          if (v69 > 0xFFFFFFFFFFFFFFF7 || v69 + 8 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v69);
          goto LABEL_170;
        case 0x1Du:
          *(_DWORD *)(a1 + 244) |= 0x20000u;
          unint64_t v70 = *((void *)this + 1);
          if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(_DWORD *)(a1 + 224) = *(_DWORD *)(*(void *)this + v70);
LABEL_90:
          uint64_t v71 = *((void *)this + 1) + 4;
          goto LABEL_171;
        case 0x1Eu:
          *(_DWORD *)(a1 + 244) |= 0x1000000u;
          unint64_t v72 = *((void *)this + 1);
          if (v72 >= *((void *)this + 2))
          {
            BOOL v75 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v73 = v72 + 1;
            int v74 = *(unsigned __int8 *)(*(void *)this + v72);
            *((void *)this + 1) = v73;
            BOOL v75 = v74 != 0;
          }
          *(unsigned char *)(a1 + 240) = v75;
          goto LABEL_188;
        case 0x1Fu:
          *(_DWORD *)(a1 + 244) |= 0x1000u;
          unint64_t v76 = *((void *)this + 1);
          if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(void *)(a1 + 200) = *(void *)(*(void *)this + v76);
          goto LABEL_170;
        case 0x20u:
          *(_DWORD *)(a1 + 244) |= 0x40u;
          unint64_t v77 = *((void *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFF7 || v77 + 8 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v77);
          goto LABEL_170;
        case 0x21u:
          *(_DWORD *)(a1 + 244) |= 2u;
          unint64_t v78 = *((void *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFF7 || v78 + 8 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v78);
          goto LABEL_170;
        case 0x22u:
          *(_DWORD *)(a1 + 244) |= 0x10u;
          unint64_t v79 = *((void *)this + 1);
          if (v79 > 0xFFFFFFFFFFFFFFF7 || v79 + 8 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v79);
          goto LABEL_170;
        case 0x23u:
          *(_DWORD *)(a1 + 244) |= 0x4000u;
          unint64_t v80 = *((void *)this + 1);
          unint64_t v81 = *((void *)this + 2);
          uint64_t v82 = *(void *)this;
          if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
          {
            char v83 = 0;
            unsigned int v84 = 0;
            uint64_t v85 = 0;
            do
            {
              unint64_t v86 = v80 + 1;
              *((void *)this + 1) = v80 + 1;
              char v87 = *(unsigned char *)(v82 + v80);
              v85 |= (unint64_t)(v87 & 0x7F) << v83;
              if ((v87 & 0x80) == 0) {
                goto LABEL_183;
              }
              v83 += 7;
              unint64_t v80 = v86;
              BOOL v14 = v84++ > 8;
            }
            while (!v14);
LABEL_161:
            LODWORD(v85) = 0;
            goto LABEL_183;
          }
          char v106 = 0;
          unsigned int v107 = 0;
          uint64_t v85 = 0;
          if (v81 <= v80) {
            unint64_t v81 = *((void *)this + 1);
          }
          while (2)
          {
            if (v81 == v80)
            {
              LODWORD(v85) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v108 = v80 + 1;
              char v109 = *(unsigned char *)(v82 + v80);
              *((void *)this + 1) = v108;
              v85 |= (unint64_t)(v109 & 0x7F) << v106;
              if (v109 < 0)
              {
                v106 += 7;
                unint64_t v80 = v108;
                BOOL v14 = v107++ > 8;
                if (v14) {
                  goto LABEL_161;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v85) = 0;
              }
            }
            break;
          }
LABEL_183:
          *(_DWORD *)(a1 + 212) = v85;
          goto LABEL_188;
        case 0x24u:
          *(_DWORD *)(a1 + 244) |= 0x2000u;
          unint64_t v88 = *((void *)this + 1);
          unint64_t v89 = *((void *)this + 2);
          uint64_t v90 = *(void *)this;
          if (v88 <= 0xFFFFFFFFFFFFFFF5 && v88 + 10 <= v89)
          {
            char v91 = 0;
            unsigned int v92 = 0;
            uint64_t v93 = 0;
            do
            {
              unint64_t v94 = v88 + 1;
              *((void *)this + 1) = v88 + 1;
              char v95 = *(unsigned char *)(v90 + v88);
              v93 |= (unint64_t)(v95 & 0x7F) << v91;
              if ((v95 & 0x80) == 0) {
                goto LABEL_187;
              }
              v91 += 7;
              unint64_t v88 = v94;
              BOOL v14 = v92++ > 8;
            }
            while (!v14);
LABEL_168:
            LODWORD(v93) = 0;
            goto LABEL_187;
          }
          char v110 = 0;
          unsigned int v111 = 0;
          uint64_t v93 = 0;
          if (v89 <= v88) {
            unint64_t v89 = *((void *)this + 1);
          }
          break;
        case 0x25u:
          *(_DWORD *)(a1 + 244) |= 0x20u;
          unint64_t v96 = *((void *)this + 1);
          if (v96 > 0xFFFFFFFFFFFFFFF7 || v96 + 8 > *((void *)this + 2)) {
            goto LABEL_124;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v96);
          goto LABEL_170;
        case 0x26u:
          *(_DWORD *)(a1 + 244) |= 4u;
          unint64_t v97 = *((void *)this + 1);
          if (v97 <= 0xFFFFFFFFFFFFFFF7 && v97 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v97);
LABEL_170:
            uint64_t v71 = *((void *)this + 1) + 8;
LABEL_171:
            *((void *)this + 1) = v71;
          }
          else
          {
LABEL_124:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_188;
        case 0x27u:
          operator new();
        case 0x28u:
          operator new();
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_188;
      }
      while (1)
      {
        if (v89 == v88)
        {
          LODWORD(v93) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_187;
        }
        unint64_t v112 = v88 + 1;
        char v113 = *(unsigned char *)(v90 + v88);
        *((void *)this + 1) = v112;
        v93 |= (unint64_t)(v113 & 0x7F) << v110;
        if ((v113 & 0x80) == 0) {
          break;
        }
        v110 += 7;
        unint64_t v88 = v112;
        BOOL v14 = v111++ > 8;
        if (v14) {
          goto LABEL_168;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v93) = 0;
      }
LABEL_187:
      *(_DWORD *)(a1 + 208) = v93;
LABEL_188:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903D7FA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 244);
  if ((v4 & 0x100) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 80));
    int v4 = *(_DWORD *)(v3 + 244);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_60;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x8000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x40000) == 0)
  {
LABEL_6:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 228));
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x80000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 232));
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 244);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_66:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176));
  if ((*(_DWORD *)(v3 + 244) & 0x400000) != 0) {
LABEL_11:
  }
    uint64_t result = PB::Writer::write(this);
LABEL_12:
  int v5 = *(const PB::Base **)(v3 + 64);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5);
  }
  int v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x800) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 192));
    int v6 = *(_DWORD *)(v3 + 244);
    if ((v6 & 0x800000) == 0)
    {
LABEL_16:
      if ((v6 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_70;
    }
  }
  else if ((v6 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  uint64_t result = PB::Writer::write(this);
  int v6 = *(_DWORD *)(v3 + 244);
  if ((v6 & 0x400) == 0)
  {
LABEL_17:
    if ((v6 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_70:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 184));
  if ((*(_DWORD *)(v3 + 244) & 0x200000) != 0) {
LABEL_18:
  }
    uint64_t result = PB::Writer::write(this);
LABEL_19:
  int v7 = *(const PB::Base **)(v3 + 120);
  if (v7) {
    uint64_t result = PB::Writer::writeSubmessage(this, v7);
  }
  uint64_t v8 = *(const PB::Base **)(v3 + 112);
  if (v8) {
    uint64_t result = PB::Writer::writeSubmessage(this, v8);
  }
  char v9 = *(const PB::Base **)(v3 + 104);
  if (v9) {
    uint64_t result = PB::Writer::writeSubmessage(this, v9);
  }
  unsigned int v10 = *(const PB::Base **)(v3 + 96);
  if (v10) {
    uint64_t result = PB::Writer::writeSubmessage(this, v10);
  }
  unint64_t v11 = *(const PB::Base **)(v3 + 152);
  if (v11) {
    uint64_t result = PB::Writer::writeSubmessage(this, v11);
  }
  unint64_t v12 = *(const PB::Base **)(v3 + 144);
  if (v12) {
    uint64_t result = PB::Writer::writeSubmessage(this, v12);
  }
  char v13 = *(const PB::Base **)(v3 + 168);
  if (v13) {
    uint64_t result = PB::Writer::writeSubmessage(this, v13);
  }
  BOOL v14 = *(const PB::Base **)(v3 + 160);
  if (v14) {
    uint64_t result = PB::Writer::writeSubmessage(this, v14);
  }
  if ((*(unsigned char *)(v3 + 246) & 0x10) != 0) {
    uint64_t result = PB::Writer::write(this);
  }
  char v15 = *(const PB::Base **)(v3 + 88);
  if (v15) {
    uint64_t result = PB::Writer::writeSubmessage(this, v15);
  }
  int v16 = *(_DWORD *)(v3 + 244);
  if (v16)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
    int v16 = *(_DWORD *)(v3 + 244);
    if ((v16 & 8) == 0)
    {
LABEL_41:
      if ((v16 & 0x20000) == 0) {
        goto LABEL_42;
      }
      goto LABEL_74;
    }
  }
  else if ((v16 & 8) == 0)
  {
    goto LABEL_41;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20000) == 0)
  {
LABEL_42:
    if ((v16 & 0x1000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 224));
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v16 & 0x1000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t result = PB::Writer::write(this);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x1000) == 0)
  {
LABEL_44:
    if ((v16 & 0x40) == 0) {
      goto LABEL_45;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 200));
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x40) == 0)
  {
LABEL_45:
    if ((v16 & 2) == 0) {
      goto LABEL_46;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 2) == 0)
  {
LABEL_46:
    if ((v16 & 0x10) == 0) {
      goto LABEL_47;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x10) == 0)
  {
LABEL_47:
    if ((v16 & 0x4000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x4000) == 0)
  {
LABEL_48:
    if ((v16 & 0x2000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x2000) == 0)
  {
LABEL_49:
    if ((v16 & 0x20) == 0) {
      goto LABEL_50;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v16 = *(_DWORD *)(v3 + 244);
  if ((v16 & 0x20) == 0)
  {
LABEL_50:
    if ((v16 & 4) == 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_82:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  if ((*(_DWORD *)(v3 + 244) & 4) != 0) {
LABEL_51:
  }
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
LABEL_52:
  unint64_t v17 = *(const PB::Base **)(v3 + 136);
  if (v17) {
    uint64_t result = PB::Writer::writeSubmessage(this, v17);
  }
  char v18 = *(const PB::Base **)(v3 + 128);
  if (v18)
  {
    return PB::Writer::writeSubmessage(this, v18);
  }
  return result;
}

uint64_t sub_1903D83BC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD8F0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1903D83E4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D841C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "calories_kCal", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D84C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *(unsigned char *)(a1 + 28) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_36:
        unint64_t v2 = *((void *)this + 1) + 8;
        goto LABEL_37;
      }
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        goto LABEL_38;
      }
      *(unsigned char *)(a1 + 28) |= 4u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
      {
LABEL_32:
        *((unsigned char *)this + 24) = 1;
        goto LABEL_38;
      }
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
      unint64_t v2 = *((void *)this + 1) + 4;
LABEL_37:
      *((void *)this + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    *(unsigned char *)(a1 + 28) |= 1u;
    unint64_t v2 = *((void *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
      goto LABEL_32;
    }
    *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_1903D86E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(result + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 28) & 1) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(result + 24));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903D8770(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD420;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1903D8798(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D87D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "calories_kCal", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D8874(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *(unsigned char *)(a1 + 28) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_36:
        unint64_t v2 = *((void *)this + 1) + 8;
        goto LABEL_37;
      }
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        goto LABEL_38;
      }
      *(unsigned char *)(a1 + 28) |= 4u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
      {
LABEL_32:
        *((unsigned char *)this + 24) = 1;
        goto LABEL_38;
      }
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
      unint64_t v2 = *((void *)this + 1) + 4;
LABEL_37:
      *((void *)this + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    *(unsigned char *)(a1 + 28) |= 1u;
    unint64_t v2 = *((void *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
      goto LABEL_32;
    }
    *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_1903D8A98(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(result + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 28) & 1) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(result + 24));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903D8B24(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2F18;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1903D8B4C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D8B84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if (v5)
  {
    PB::TextFormatter::format(this, "enclosureMaterial");
    char v5 = *(unsigned char *)(a1 + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D8C00(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v24 = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(void *)(a1 + 8) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 24) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903D8E90(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903D8EFC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD458;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1903D8F24(PB::Base *this)
{
  *(void *)this = &unk_1EDFCD458;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903D8FA8(PB::Base *a1)
{
  sub_1903D8F24(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D8FE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if (v5)
  {
    PB::TextFormatter::format(this, "globalMachtime", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 32);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "localMachtime", *(double *)(a1 + 16));
  }
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D9094(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v20 == 2)
      {
        *(unsigned char *)(a1 + 32) |= 1u;
        unint64_t v22 = *((void *)this + 1);
        if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
          goto LABEL_30;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v22);
      }
      else
      {
        if (v20 != 1)
        {
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_35;
        }
        *(unsigned char *)(a1 + 32) |= 2u;
        unint64_t v21 = *((void *)this + 1);
        if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)this + 2))
        {
LABEL_30:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_35;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v21);
      }
      *((void *)this + 1) += 8;
LABEL_35:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1903D9328(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 32);
  }
  if (v4) {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  }
  char v5 = *(const PB::Base **)(v3 + 24);
  if (v5)
  {
    return PB::Writer::writeSubmessage(this, v5);
  }
  return result;
}

uint64_t sub_1903D93A8(uint64_t result)
{
  if (!*(void *)(result + 24)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903D9438(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCFC0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1903D9460(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D9498(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if (v5)
  {
    PB::TextFormatter::format(this, "date", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isForcedOnWristEnabled");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "isOnCharger");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isWristDetectionEnabled");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "onWrist");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "onWristConfidence");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "onWristSensor");
  if ((*(unsigned char *)(a1 + 40) & 2) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "timestamp");
LABEL_10:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D95DC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 40) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_116;
            case 2u:
              *(unsigned char *)(a1 + 40) |= 4u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_100;
                  }
                  unint64_t v53 = v21++;
                  char v54 = *(unsigned char *)(v22 + v53);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_99:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_100;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_99;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_100;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_100:
              *(_DWORD *)(a1 + 24) = v25;
              goto LABEL_116;
            case 3u:
              *(unsigned char *)(a1 + 40) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_105;
                  }
                  unint64_t v57 = v27++;
                  char v58 = *(unsigned char *)(v28 + v57);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_104:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_105;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_104;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_105;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_105:
              *(_DWORD *)(a1 + 32) = v31;
              goto LABEL_116;
            case 4u:
              *(unsigned char *)(a1 + 40) |= 8u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_110;
                  }
                  unint64_t v61 = v33++;
                  char v62 = *(unsigned char *)(v34 + v61);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_109:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_109;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_110;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 28) = v37;
              goto LABEL_116;
            case 5u:
              *(unsigned char *)(a1 + 40) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *(unsigned char *)(a1 + 37) = v40;
              goto LABEL_116;
            case 6u:
              *(unsigned char *)(a1 + 40) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v42 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v42 = v41 != 0;
              }
              *(unsigned char *)(a1 + 36) = v42;
              goto LABEL_116;
            case 7u:
              *(unsigned char *)(a1 + 40) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v44 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v43 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v44 = v43 != 0;
              }
              *(unsigned char *)(a1 + 38) = v44;
              goto LABEL_116;
            case 8u:
              *(unsigned char *)(a1 + 40) |= 2u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    uint64_t v49 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  unint64_t v65 = v45++;
                  char v66 = *(unsigned char *)(v46 + v65);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v49 = 0;
LABEL_114:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v49 = 0;
                }
                goto LABEL_114;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_115;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              uint64_t v49 = 0;
LABEL_115:
              *(void *)(a1 + 16) = v49;
LABEL_116:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_116;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903D9C38(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = PB::Writer::write(this);
    if ((*(unsigned char *)(v3 + 40) & 2) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this);
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4 < 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_17:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903D9D50(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCEBC0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_1903D9D78(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903D9DB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 16);
  if (v5)
  {
    PB::TextFormatter::format(this, "crown");
    char v5 = *(unsigned char *)(a1 + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "wrist");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903D9E2C(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        unint64_t v26 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v27 = *(void *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v39 = v26++;
            char v40 = *(unsigned char *)(v27 + v39);
            *((void *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0) {
              break;
            }
            v37 += 7;
            BOOL v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v39 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)this + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 8) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 2u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v35 = v20++;
            char v36 = *(unsigned char *)(v21 + v35);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0) {
              break;
            }
            v33 += 7;
            BOOL v14 = v34++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_59:
          unint64_t v3 = v35 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v3 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v3;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_DWORD *)(a1 + 12) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DA158(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 16);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

void sub_1903DA1C8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DA200(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if (v5)
  {
    PB::TextFormatter::format(this, "entryId");
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isMoving");
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "rssi");
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DA2C4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 32) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v35 = 0;
                unsigned int v36 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_64;
                  }
                  unint64_t v37 = v20++;
                  char v38 = *(unsigned char *)(v21 + v37);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  BOOL v14 = v36++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_63;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_63:
                unint64_t v2 = v37 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_64;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_64:
              *(void *)(a1 + 8) = v24;
              goto LABEL_70;
            case 2u:
              *(unsigned char *)(a1 + 32) |= 4u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  unint64_t v41 = v27++;
                  char v42 = *(unsigned char *)(v28 + v41);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_68:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_68;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_69:
              *(_DWORD *)(a1 + 24) = -(v31 & 1) ^ ((int)v31 >> 1);
LABEL_70:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 3u:
              *(unsigned char *)(a1 + 32) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_70;
            case 4u:
              *(unsigned char *)(a1 + 32) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 28) = v34;
              goto LABEL_70;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_70;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903DA6BC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
      if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeSInt(this);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_9:

  return PB::Writer::write(this);
}

void *sub_1903DA764(void *result)
{
  *uint64_t result = &unk_1EDFCC5E8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_1903DA788(void **a1)
{
  *a1 = &unk_1EDFCC5E8;
  unint64_t v2 = a1 + 1;
  sub_190347828(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_1903DA7E4(void **a1)
{
  *a1 = &unk_1EDFCC5E8;
  uint64_t v3 = a1 + 1;
  sub_190347828(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x192FCC980]();
}

uint64_t sub_1903DA854(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "entries");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DA8EC(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_1903DAAA8();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_1903DAAA8()
{
}

void sub_1903DABC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190347EEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1903DAC04(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5))
    char v5 = *v2++;
  return result;
}

uint64_t sub_1903DAC50(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2AF0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_1903DAC78(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DACB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 16);
  if (v5)
  {
    PB::TextFormatter::format(this, "activityType");
    char v5 = *(unsigned char *)(a1 + 16);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "motionNotification");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DAD2C(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        unint64_t v26 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v27 = *(void *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v39 = v26++;
            char v40 = *(unsigned char *)(v27 + v39);
            *((void *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0) {
              break;
            }
            v37 += 7;
            BOOL v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v39 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)this + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 8) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 2u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v35 = v20++;
            char v36 = *(unsigned char *)(v21 + v35);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0) {
              break;
            }
            v33 += 7;
            BOOL v14 = v34++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_59:
          unint64_t v3 = v35 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v3 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v3;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_60:
        *(_DWORD *)(a1 + 12) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DB058(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 16);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 16);
  }
  if (v4)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903DB0C4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB858;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1903DB0EC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DB124(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 64);
  if (v5)
  {
    PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "eventTime", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "eventType");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "genericWorkoutLabel");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "poolLength", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "swimLocation");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "workoutLocationType");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(this, "workoutMode");
  if ((*(_WORD *)(a1 + 64) & 0x200) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "workoutType");
LABEL_12:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DB2A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 0x200u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_126;
                  }
                  unint64_t v59 = v20++;
                  char v60 = *(unsigned char *)(v21 + v59);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_125;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_125:
                unint64_t v2 = v59 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_126;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_126:
              *(_DWORD *)(a1 + 60) = v24;
              goto LABEL_152;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_131;
                  }
                  unint64_t v63 = v27++;
                  char v64 = *(unsigned char *)(v28 + v63);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_130:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_131;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_130;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_131;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_131:
              *(_DWORD *)(a1 + 40) = v31;
              goto LABEL_152;
            case 3u:
              *(_WORD *)(a1 + 64) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_70;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_121;
            case 4u:
              *(_WORD *)(a1 + 64) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_70;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_121;
            case 5u:
              *(_WORD *)(a1 + 64) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_70;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_121;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_136;
                  }
                  unint64_t v67 = v33++;
                  char v68 = *(unsigned char *)(v34 + v67);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_135:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_136;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_135;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_136;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_136:
              *(_DWORD *)(a1 + 52) = v37;
              goto LABEL_152;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_141;
                  }
                  unint64_t v71 = v39++;
                  char v72 = *(unsigned char *)(v40 + v71);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_140:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_141;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_140;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_141;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_141:
              *(_DWORD *)(a1 + 56) = v43;
              goto LABEL_152;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  unint64_t v75 = v45++;
                  char v76 = *(unsigned char *)(v46 + v75);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_145:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_145;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_146;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 48) = v49;
              goto LABEL_152;
            case 9u:
              *(_WORD *)(a1 + 64) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_121:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_70:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_152;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x20u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_151;
                  }
                  unint64_t v79 = v51++;
                  char v80 = *(unsigned char *)(v52 + v79);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_150:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_150;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_151;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_151:
              *(_DWORD *)(a1 + 44) = v55;
LABEL_152:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_152;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903DBAC0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 64);
  if ((v4 & 0x200) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 4) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
    if ((*(_WORD *)(v3 + 64) & 0x20) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_21:

  return PB::Writer::writeVarInt(this);
}

void sub_1903DBC14(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DBC4C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "genericWorkoutLabel");
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "poolLength", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "swimLocation");
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "workoutLocationType");
  if ((*(unsigned char *)(a1 + 32) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "workoutType");
LABEL_7:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DBD30(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 32) |= 0x10u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_88;
                  }
                  unint64_t v47 = v20++;
                  char v48 = *(unsigned char *)(v21 + v47);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_87;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_87:
                unint64_t v2 = v47 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_88;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_88:
              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_104;
            case 2u:
              *(unsigned char *)(a1 + 32) |= 8u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_92:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_92;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 24) = v31;
              goto LABEL_104;
            case 3u:
              *(unsigned char *)(a1 + 32) |= 4u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_98;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_97:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_98;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_97;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_98;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_98:
              *(_DWORD *)(a1 + 20) = v37;
              goto LABEL_104;
            case 4u:
              *(unsigned char *)(a1 + 32) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_104;
            case 5u:
              *(unsigned char *)(a1 + 32) |= 2u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_103;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_102:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_102;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_103;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_103:
              *(_DWORD *)(a1 + 16) = v43;
LABEL_104:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_104;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903DC2B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 32);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_11:

  return PB::Writer::writeVarInt(this);
}

void *sub_1903DC378(void *result)
{
  *uint64_t result = &unk_1EDFCE798;
  result[1] = 0;
  return result;
}

void sub_1903DC398(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCE798;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DC418(PB::Base *a1)
{
  sub_1903DC398(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DC450(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DC4CC(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DC6C8(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DC6E4(void *result)
{
  *uint64_t result = &unk_1EDFCDCA8;
  result[1] = 0;
  return result;
}

void sub_1903DC704(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCDCA8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DC784(PB::Base *a1)
{
  sub_1903DC704(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DC7BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DC838(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DCA34(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DCA50(void *result)
{
  *uint64_t result = &unk_1EDFCE990;
  result[1] = 0;
  return result;
}

void sub_1903DCA70(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCE990;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DCAF0(PB::Base *a1)
{
  sub_1903DCA70(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DCB28(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DCBA4(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DCDA0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DCDBC(void *result)
{
  *uint64_t result = &unk_1EDFCF9C0;
  result[1] = 0;
  return result;
}

void sub_1903DCDDC(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCF9C0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DCE5C(PB::Base *a1)
{
  sub_1903DCDDC(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DCE94(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DCF10(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DD10C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DD128(void *result)
{
  *uint64_t result = &unk_1EDFCF1E0;
  result[1] = 0;
  return result;
}

void sub_1903DD148(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCF1E0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DD1C8(PB::Base *a1)
{
  sub_1903DD148(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DD200(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DD27C(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DD478(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DD494(void *result)
{
  *uint64_t result = &unk_1EDFCFC60;
  result[1] = 0;
  return result;
}

void sub_1903DD4B4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCFC60;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DD534(PB::Base *a1)
{
  sub_1903DD4B4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DD56C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DD5E8(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DD7E4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DD800(void *result)
{
  *uint64_t result = &unk_1EDFCEBF8;
  result[1] = 0;
  return result;
}

void sub_1903DD820(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCEBF8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DD8A0(PB::Base *a1)
{
  sub_1903DD820(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DD8D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DD954(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DDB50(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DDB6C(void *result)
{
  *uint64_t result = &unk_1EDFC1E48;
  result[1] = 0;
  return result;
}

void sub_1903DDB8C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFC1E48;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DDC0C(PB::Base *a1)
{
  sub_1903DDB8C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DDC44(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DDCC0(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DDEBC(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DDED8(void *result)
{
  *uint64_t result = &unk_1EDFCFC98;
  result[1] = 0;
  return result;
}

void sub_1903DDEF8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCFC98;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DDF78(PB::Base *a1)
{
  sub_1903DDEF8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DDFB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DE02C(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DE228(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_1903DE244(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF6B0;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1903DE26C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DE2A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if (v5)
  {
    PB::TextFormatter::format(this, "restingHeartRate", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "walkingHeartRateAverage", *(double *)(a1 + 16));
  if ((*(unsigned char *)(a1 + 28) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "workoutActivityType");
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DE348(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  for (int i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)this + 24))
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0;
          goto LABEL_20;
        }
      }
      int i = 1;
      *((unsigned char *)this + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(unsigned char *)(a1 + 28) |= 2u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_47:
        unint64_t v2 = *((void *)this + 1) + 8;
        *((void *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    else
    {
      if (v20 != 2)
      {
        if (v20 == 1)
        {
          *(unsigned char *)(a1 + 28) |= 4u;
          unint64_t v21 = *((void *)this + 1);
          unint64_t v2 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v25 = 0;
            if (v2 <= v21) {
              unint64_t v2 = *((void *)this + 1);
            }
            while (1)
            {
              if (v2 == v21)
              {
                LODWORD(v25) = 0;
                *((unsigned char *)this + 24) = 1;
                goto LABEL_52;
              }
              unint64_t v30 = v21++;
              char v31 = *(unsigned char *)(v22 + v30);
              *((void *)this + 1) = v21;
              v25 |= (unint64_t)(v31 & 0x7F) << v28;
              if ((v31 & 0x80) == 0) {
                break;
              }
              v28 += 7;
              BOOL v14 = v29++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                goto LABEL_51;
              }
            }
            if (*((unsigned char *)this + 24)) {
              LODWORD(v25) = 0;
            }
LABEL_51:
            unint64_t v2 = v30 + 1;
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              unint64_t v2 = v21 + 1;
              *((void *)this + 1) = v21 + 1;
              char v26 = *(unsigned char *)(v22 + v21);
              v25 |= (unint64_t)(v26 & 0x7F) << v23;
              if ((v26 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              unint64_t v21 = v2;
              BOOL v14 = v24++ > 8;
              if (v14)
              {
                LODWORD(v25) = 0;
                break;
              }
            }
          }
LABEL_52:
          *(_DWORD *)(a1 + 24) = v25;
        }
        else
        {
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
        }
        goto LABEL_53;
      }
      *(unsigned char *)(a1 + 28) |= 1u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
        goto LABEL_47;
      }
    }
    *((unsigned char *)this + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)this + 2);
  }
  return i == 0;
}

uint64_t sub_1903DE618(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if ((v4 & 4) == 0)
  {
    if ((*(unsigned char *)(result + 28) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
    if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 28);
  if (v4) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

void *sub_1903DE6A4(void *result)
{
  *uint64_t result = &unk_1EDFCEC30;
  result[1] = 0;
  return result;
}

void sub_1903DE6C4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCEC30;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DE744(PB::Base *a1)
{
  sub_1903DE6C4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DE77C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DE7F8(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DE9F4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DEA10(void *result)
{
  *uint64_t result = &unk_1EDFCF448;
  result[1] = 0;
  return result;
}

void sub_1903DEA30(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCF448;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DEAB0(PB::Base *a1)
{
  sub_1903DEA30(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DEAE8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DEB64(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DED60(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DED7C(void *result)
{
  *uint64_t result = &unk_1EDFCE9C8;
  result[1] = 0;
  return result;
}

void sub_1903DED9C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCE9C8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DEE1C(PB::Base *a1)
{
  sub_1903DED9C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DEE54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DEED0(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DF0CC(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DF0E8(void *result)
{
  *uint64_t result = &unk_1EDFCEA00;
  result[1] = 0;
  return result;
}

void sub_1903DF108(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCEA00;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DF188(PB::Base *a1)
{
  sub_1903DF108(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DF1C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DF23C(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DF438(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DF454(void *result)
{
  *uint64_t result = &unk_1EDFCF480;
  result[1] = 0;
  return result;
}

void sub_1903DF474(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCF480;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DF4F4(PB::Base *a1)
{
  sub_1903DF474(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DF52C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DF5A8(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DF7A4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DF7C0(void *result)
{
  *uint64_t result = &unk_1EDFCFCD0;
  result[1] = 0;
  return result;
}

void sub_1903DF7E0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCFCD0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DF860(PB::Base *a1)
{
  sub_1903DF7E0(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DF898(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DF914(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DFB2C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DFB48(void *result)
{
  *uint64_t result = &unk_1EDFD0088;
  result[1] = 0;
  return result;
}

void sub_1903DFB68(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFD0088;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DFBE8(PB::Base *a1)
{
  sub_1903DFB68(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DFC20(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903DFC9C(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903DFEB4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903DFED0(void *result)
{
  *uint64_t result = &unk_1EDFCF9F8;
  result[1] = 0;
  return result;
}

void sub_1903DFEF0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCF9F8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903DFF70(PB::Base *a1)
{
  sub_1903DFEF0(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903DFFA8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E0024(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903E023C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903E0258(void *result)
{
  *uint64_t result = &unk_1EDFCF4B8;
  result[1] = 0;
  return result;
}

void sub_1903E0278(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCF4B8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903E02F8(PB::Base *a1)
{
  sub_1903E0278(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E0330(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E03AC(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}