uint64_t sub_1903E05C4(uint64_t result, PB::Writer *this)
{
  const PB::Base *v2;

  v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1903E05E0(void *result)
{
  *result = &unk_1EDFCFDB0;
  result[1] = 0;
  return result;
}

void sub_1903E0600(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCFDB0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903E0680(PB::Base *a1)
{
  sub_1903E0600(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E06B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E0734(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

void *sub_1903E094C(void *result)
{
  *uint64_t result = &unk_1EDFCDCE0;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t sub_1903E0970(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void sub_1903E098C(void **a1)
{
  *a1 = &unk_1EDFCDCE0;
  unint64_t v2 = a1 + 1;
  sub_190347828(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_1903E09E8(void **a1)
{
  *a1 = &unk_1EDFCDCE0;
  unint64_t v3 = a1 + 1;
  sub_190347828(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x192FCC980]();
}

uint64_t sub_1903E0A58(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "workoutPriors");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E0AF0(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        sub_1903E0CAC();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_1903E0CAC()
{
}

void sub_1903E0DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190347EEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1903E0E08(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5))
    uint64_t v5 = *v2++;
  return result;
}

void *sub_1903E0E54(void *result)
{
  *uint64_t result = &unk_1EDFCE7D0;
  result[1] = 0;
  return result;
}

void sub_1903E0E74(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCE7D0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903E0EF4(PB::Base *a1)
{
  sub_1903E0E74(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E0F2C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "correction");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E0FA8(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903E11A4(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_1903E11C0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1903E1238((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1903E1238(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unsigned int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1903E12D0((uint64_t)v13);
  return v11;
}

uint64_t sub_1903E12D0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_190347E84((void *)a1);
  }
  return a1;
}

uint64_t sub_1903E1308(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1903E1380((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1903E1380(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unsigned int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1903E1418((uint64_t)v13);
  return v11;
}

uint64_t sub_1903E1418(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_190347E84((void *)a1);
  }
  return a1;
}

uint64_t sub_1903E1450(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1903E14C8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1903E14C8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unsigned int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1903E1560((uint64_t)v13);
  return v11;
}

uint64_t sub_1903E1560(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_190347E84((void *)a1);
  }
  return a1;
}

uint64_t sub_1903E1598(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1903E1610((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1903E1610(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unsigned int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1903E16A8((uint64_t)v13);
  return v11;
}

uint64_t sub_1903E16A8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_190347E84((void *)a1);
  }
  return a1;
}

uint64_t sub_1903E16E0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1903E1758((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1903E1758(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unsigned int v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1903E17F0((uint64_t)v13);
  return v11;
}

uint64_t sub_1903E17F0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_190347E84((void *)a1);
  }
  return a1;
}

uint64_t sub_1903E1828(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], a2, a3);
  if (*(char *)(a1 + 23) >= 0) {
    objc_msgSend_stringWithUTF8String_(NSString, v4, a1);
  }
  else {
  uint64_t v6 = objc_msgSend_stringWithUTF8String_(NSString, v4, *(void *)a1);
  }
  char v16 = 0;
  if (objc_msgSend_fileExistsAtPath_isDirectory_(v5, v7, (uint64_t)v6, &v16))
  {
    if (!v16)
    {
LABEL_15:
      uint64_t v12 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    id v15 = 0;
    char v9 = objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v5, v8, (uint64_t)v6, 1, 0, &v15);
    id v10 = v15;
    uint64_t v11 = v10;
    if ((v9 & 1) == 0)
    {
      if (qword_1E929E7F0 != -1) {
        dispatch_once(&qword_1E929E7F0, &unk_1EDFD1360);
      }
      v13 = qword_1E929E7E8;
      if (os_log_type_enabled((os_log_t)qword_1E929E7E8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138543618;
        v18 = v6;
        __int16 v19 = 2114;
        v20 = v11;
        _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_INFO, "Unable to create directory at path: %{public}@, error, %{public}@", buf, 0x16u);
      }

      goto LABEL_15;
    }
  }
  uint64_t v12 = 1;
LABEL_16:

  return v12;
}

void sub_1903E19B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1903E19D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], (const char *)a2, a3);
  char v9 = (void *)MEMORY[0x1E4F1CB10];
  if (*(char *)(a1 + 23) >= 0) {
    objc_msgSend_stringWithUTF8String_(NSString, v7, a1);
  }
  else {
  id v10 = objc_msgSend_stringWithUTF8String_(NSString, v7, *(void *)a1);
  }
  uint64_t v12 = objc_msgSend_fileURLWithPath_(v9, v11, (uint64_t)v10);
  id v44 = 0;
  v39 = objc_msgSend_contentsOfDirectoryAtURL_includingPropertiesForKeys_options_error_(v8, v13, (uint64_t)v12, 0, 4, &v44);
  id v14 = v44;

  if (v14)
  {
    if (qword_1E929E7F0 != -1) {
      dispatch_once(&qword_1E929E7F0, &unk_1EDFD1360);
    }
    char v16 = qword_1E929E7E8;
    if (os_log_type_enabled((os_log_t)qword_1E929E7E8, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v17 = a1;
      }
      else {
        uint64_t v17 = *(void *)a1;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = v17;
      __int16 v48 = 2114;
      id v49 = v14;
      _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_INFO, "Unable to list files at path: %{public}s, error, %{public}@", buf, 0x16u);
    }
  }
  else
  {
    if (*(char *)(a2 + 23) >= 0) {
      objc_msgSend_stringWithUTF8String_(NSString, v15, a2);
    }
    else {
    v18 = objc_msgSend_stringWithUTF8String_(NSString, v15, *(void *)a2);
    }
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    id v19 = v39;
    uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v40, v46, 16);
    if (v23)
    {
      uint64_t v24 = *(void *)v41;
      do
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          if (*(void *)v41 != v24) {
            objc_enumerationMutation(v19);
          }
          v26 = *(void **)(*((void *)&v40 + 1) + 8 * i);
          v27 = objc_msgSend_pathExtension(v26, v21, v22);
          BOOL v29 = objc_msgSend_compare_options_(v27, v28, (uint64_t)v18, 1) == 0;

          if (v29)
          {
            id v30 = v26;
            v33 = (char *)objc_msgSend_fileSystemRepresentation(v30, v31, v32);
            *(void *)buf = v33;
            unint64_t v34 = a4[1];
            if (v34 >= a4[2])
            {
              uint64_t v35 = sub_1903E1F40(a4, (char **)buf);
            }
            else
            {
              sub_1902C3F54((void *)a4[1], v33);
              uint64_t v35 = v34 + 24;
              a4[1] = v34 + 24;
            }
            a4[1] = v35;
          }
        }
        uint64_t v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v21, (uint64_t)&v40, v46, 16);
      }
      while (v23);
    }

    v36 = (long long *)a4[1];
    unint64_t v37 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v36 - *a4) >> 3));
    if (v36 == (long long *)*a4) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = v37;
    }
    sub_1903E2048(*a4, v36, (uint64_t)&v45, v38, 1);
  }
}

void sub_1903E1CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  *(void *)(v12 - 128) = v10;
  sub_190387A4C((void ***)(v12 - 128));
  _Unwind_Resume(a1);
}

void sub_1903E1D78(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = objc_msgSend_defaultManager(MEMORY[0x1E4F28CB8], a2, a3);
  if (*(char *)(a1 + 23) >= 0) {
    objc_msgSend_stringWithUTF8String_(NSString, v4, a1);
  }
  else {
  uint64_t v6 = objc_msgSend_stringWithUTF8String_(NSString, v4, *(void *)a1);
  }
  id v12 = 0;
  char v8 = objc_msgSend_removeItemAtPath_error_(v5, v7, (uint64_t)v6, &v12);
  id v9 = v12;

  if ((v8 & 1) == 0)
  {
    if (qword_1E929E7F0 != -1) {
      dispatch_once(&qword_1E929E7F0, &unk_1EDFD1360);
    }
    uint64_t v10 = qword_1E929E7E8;
    if (os_log_type_enabled((os_log_t)qword_1E929E7E8, OS_LOG_TYPE_INFO))
    {
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = *(void *)a1;
      }
      *(_DWORD *)buf = 136446466;
      uint64_t v14 = v11;
      __int16 v15 = 2114;
      id v16 = v9;
      _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_INFO, "Unable to delete file %{public}s, error, %{public}@", buf, 0x16u);
    }
  }
}

void sub_1903E1ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1903E1EFC()
{
  qword_1E929E7E8 = (uint64_t)os_log_create("com.apple.MotionSensorLogging", "MSL");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1903E1F40(uint64_t *a1, char **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1903479E8();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_19038A2C8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  v13 = v10;
  uint64_t v14 = &v10[24 * v4];
  __int16 v15 = v14;
  id v16 = &v10[24 * v9];
  sub_1902C3F54(v14, *a2);
  __int16 v15 = v14 + 24;
  sub_19038EF50(a1, &v13);
  uint64_t v11 = a1[1];
  sub_19038F0E8((uint64_t)&v13);
  return v11;
}

void sub_1903E2034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19038F0E8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1903E2048(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = (long long *)((char *)a2 - 24);
  id v12 = (const void **)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (sub_1903928E8(a3, (const void **)a2 - 3, v12))
          {
            v31 = v12[2];
            long long v29 = *(_OWORD *)v12;
            long long v27 = *v11;
            v12[2] = (const void *)*((void *)a2 - 1);
            *(_OWORD *)id v12 = v27;
            *uint64_t v11 = v29;
            *((void *)a2 - 1) = v31;
          }
          break;
        case 3uLL:
          sub_1903E26A4(v12, v12 + 3, (const void **)a2 - 3, a3);
          break;
        case 4uLL:
          sub_1903E2D68((uint64_t)v12, v12 + 3, v12 + 6, (long long *)((char *)a2 - 24), a3);
          break;
        case 5uLL:
          sub_1903E2E54((uint64_t)v12, v12 + 3, v12 + 6, (long long *)(v12 + 9), (long long *)((char *)a2 - 24), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (const void **)a2)
      {
        sub_1903E2F78((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0xC01)
    {
      sub_1903E26A4(v12, &v12[3 * (v16 >> 1)], (const void **)a2 - 3, a3);
      uint64_t v19 = 3 * v17;
      v20 = &v12[3 * v17 - 3];
      sub_1903E26A4(v12 + 3, v20, (const void **)a2 - 6, a3);
      uint64_t v21 = v12 + 6;
      uint64_t v22 = &v12[v19 + 3];
      sub_1903E26A4(v21, v22, (const void **)a2 - 9, a3);
      sub_1903E26A4(v20, v18, v22, a3);
      id v30 = *(const void **)(a1 + 16);
      long long v28 = *(_OWORD *)a1;
      long long v23 = *(_OWORD *)v18;
      *(void *)(a1 + 16) = v18[2];
      *(_OWORD *)a1 = v23;
      v18[2] = v30;
      *(_OWORD *)v18 = v28;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_1903E26A4(&v12[3 * (v16 >> 1)], v12, (const void **)a2 - 3, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!sub_1903928E8(a3, (const void **)(a1 - 24), (const void **)a1))
    {
      id v12 = sub_1903E27F0((const void **)a1, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v24 = sub_1903E2984((long long *)a1, (const void **)a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = sub_1903E2B14(a1, v24, a3);
    id v12 = (const void **)(v24 + 24);
    if (sub_1903E2B14(v24 + 24, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      sub_1903E2048(a1, v24, a3, -v14, a5 & 1);
      id v12 = (const void **)(v24 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    sub_1903E2470((uint64_t)v12, (const void **)a2, a3);
  }
  else
  {
    sub_1903E2598(v12, (const void **)a2, a3);
  }
}

void sub_1903E2470(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    uint64_t v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (const void **)a1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        if (sub_1903928E8(a3, v7, v11))
        {
          long long v17 = *(_OWORD *)v10;
          v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *uint64_t v10 = 0;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            uint64_t v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0) {
              operator delete(*v14);
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 40) = *(void *)(v13 + 16);
            *(unsigned char *)(v13 + 23) = 0;
            *(unsigned char *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_1903928E8(a3, (const void **)&v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }
        uint64_t v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_1903E2598(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = a1;
    uint64_t v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        uint64_t v10 = v6;
        char v6 = v7;
        if (sub_1903928E8(a3, v7, v10))
        {
          long long v16 = *(_OWORD *)v6;
          long long v17 = v6[2];
          v6[1] = 0;
          v6[2] = 0;
          void *v6 = 0;
          uint64_t v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((unsigned char *)v11 + 47) = 0;
            *((unsigned char *)v11 + 24) = 0;
            BOOL v13 = sub_1903928E8(a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = v11 + 6;
          if (v14 < 0) {
            operator delete((void *)*v15);
          }
          *(_OWORD *)int v15 = v16;
          v15[2] = v17;
        }
        uint64_t v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_1903E26A4(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = sub_1903928E8(a4, a2, a1);
  uint64_t result = sub_1903928E8(a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    BOOL v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    int v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_1903928E8(a4, a2, a1)) {
      return 1;
    }
    long long v16 = a1[2];
    long long v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = a1[2];
    long long v20 = *(_OWORD *)a1;
    uint64_t v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_1903928E8(a4, a3, a2)) {
      return 1;
    }
    uint64_t v22 = a2[2];
    long long v23 = *(_OWORD *)a2;
    unint64_t v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  uint64_t v10 = a1[2];
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_1903E27F0(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v16 = *(_OWORD *)a1;
  long long v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_1903928E8(a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    char v6 = a1;
    do
      v6 += 3;
    while (!sub_1903928E8(a3, (const void **)&v16, v6));
  }
  else
  {
    uint64_t v7 = a1 + 3;
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      BOOL v8 = sub_1903928E8(a3, (const void **)&v16, v7);
      uint64_t v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_1903928E8(a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    long long v18 = v9;
    long long v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)char v6 = v10;
    long long v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!sub_1903928E8(a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (sub_1903928E8(a3, (const void **)&v16, (const void **)v4));
  }
  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0) {
      operator delete(*v12);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((unsigned char *)v6 - 1) = 0;
    *((unsigned char *)v6 - 24) = 0;
  }
  long long v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

unint64_t sub_1903E2984(long long *a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  do
    v6 += 24;
  while (sub_1903928E8(a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while (!sub_1903928E8(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_1903928E8(a3, a2, (const void **)&v17));
  }
  unint64_t v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    long long v9 = a2;
    do
    {
      long long v19 = *(_OWORD *)v8;
      long long v10 = v19;
      long long v20 = *(const void **)(v8 + 16);
      long long v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = v12;
      v9[2] = v11;
      *(_OWORD *)long long v9 = v10;
      do
        v8 += 24;
      while (sub_1903928E8(a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_1903928E8(a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  long long v13 = (void **)(v8 - 24);
  if ((long long *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0) {
      operator delete(*v13);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(void *)(v8 - 8);
    *a1 = v14;
    *(unsigned char *)(v8 - 1) = 0;
    *(unsigned char *)(v8 - 24) = 0;
  }
  long long v15 = v17;
  *(void *)(v8 - 8) = v18;
  *(_OWORD *)long long v13 = v15;
  return v8 - 24;
}

BOOL sub_1903E2B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      if (sub_1903928E8(a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(void *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      sub_1903E26A4((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_1903E2D68(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_1903E2E54(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a1 + 72), (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      sub_1903E26A4((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_1903928E8(a3, (const void **)v13, v12))
    {
      long long v22 = *(_OWORD *)v13;
      uint64_t v23 = *(void *)(v13 + 16);
      *(void *)(v13 + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 88) = *(void *)(v17 + 64);
        *(unsigned char *)(v17 + 71) = 0;
        *(unsigned char *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }
        BOOL v19 = sub_1903928E8(a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 sub_1903E2D68(uint64_t a1, const void **a2, const void **a3, long long *a4, uint64_t a5)
{
  sub_1903E26A4((const void **)a1, a2, a3, a5);
  if (sub_1903928E8(a5, (const void **)a4, a3))
  {
    uint64_t v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    if (sub_1903928E8(a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_1903928E8(a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_1903E2E54(uint64_t a1, const void **a2, const void **a3, long long *a4, long long *a5, uint64_t a6)
{
  sub_1903E2D68(a1, a2, a3, a4, a6);
  if (sub_1903928E8(a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    if (sub_1903928E8(a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((void *)a4 + 2) = v16;
      if (sub_1903928E8(a6, a3, a2))
      {
        BOOL v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_1903928E8(a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

long long *sub_1903E2F78(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_1903E31C4(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (sub_1903928E8(a4, (const void **)v14, (const void **)a1))
        {
          uint64_t v15 = *((void *)v14 + 2);
          long long v16 = *v14;
          uint64_t v17 = *(void *)(a1 + 16);
          *long long v14 = *(_OWORD *)a1;
          *((void *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          sub_1903E31C4(a1, a4, v9, (__n128 *)a1);
        }
        long long v14 = (long long *)((char *)v14 + 24);
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = (long long *)((char *)a2 - 24);
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)long long v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = sub_1903E3360(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (long long *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(unsigned char *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          long long v25 = *v19;
          *(void *)(v23 + 16) = *((void *)v19 + 2);
          *(_OWORD *)uint64_t v23 = v25;
          *(void *)BOOL v19 = v20;
          *((void *)v19 + 1) = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((unsigned char *)v19 + 23) = v21;
          sub_1903E343C(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        BOOL v19 = (long long *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_1903E31AC(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_1903E31C4(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_1903928E8(a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        uint64_t v12 = v14;
      }
      if (!sub_1903928E8(a2, (const void **)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          long long v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *unint64_t v7 = v17;
          *(unsigned char *)(v13 + 23) = 0;
          *(unsigned char *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_1903928E8(a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            uint64_t v18 = v19;
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (sub_1903928E8(a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        *long long v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_1903E3360(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_1903928E8(a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      uint64_t v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(v9 + 23) = 0;
    *(unsigned char *)uint64_t v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_1903E343C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * v8);
    uint64_t v10 = (long long *)(a2 - 24);
    if (sub_1903928E8(a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      long long v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        long long v12 = v9;
        if (*((char *)v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        long long v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        *uint64_t v10 = v13;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!sub_1903928E8(a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0) {
            operator delete(*(void **)v12);
          }
          break;
        }
      }
      double result = *(double *)&v14;
      *long long v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }
  return result;
}

uint64_t sub_1903E3540(uint64_t result)
{
  *(void *)double result = &unk_1EDFCC498;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1903E3568(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E35A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "state");
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestampGestureBegin", *(double *)(a1 + 16));
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E3644(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  for (int i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)this + 24))
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0;
          goto LABEL_20;
        }
      }
      int i = 1;
      *((unsigned char *)this + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(unsigned char *)(a1 + 28) |= 2u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if (v20 == 2)
      {
        *(unsigned char *)(a1 + 28) |= 4u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_52;
            }
            unint64_t v30 = v21++;
            char v31 = *(unsigned char *)(v22 + v30);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_51;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_51:
          unint64_t v2 = v30 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_52:
        *(_DWORD *)(a1 + 24) = v25;
        goto LABEL_53;
      }
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        goto LABEL_53;
      }
      *(unsigned char *)(a1 + 28) |= 1u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_47:
        unint64_t v2 = *((void *)this + 1) + 8;
        *((void *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    *((unsigned char *)this + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)this + 2);
  }
  return i == 0;
}

uint64_t sub_1903E3914(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(result + 28) & 4) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_7:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903E39A0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD6C0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1903E39C8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E3A00(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "classificationType");
    __int16 v5 = *(_WORD *)(a1 + 64);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "intervalSleepBeginToSleepDetected", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "intervalSleepDetectedToGazeDetected", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "intervalSleepDetectedToWakeDetected", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "intervalWakeBeginToWakeDetected", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "intervalWakeDetectedToGazeDetected", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "intervalWakeDetectedToSleepDetected", *(float *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "shouldNotify");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x1000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "shouldNotifyStats");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "sleepType");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "state");
  __int16 v5 = *(_WORD *)(a1 + 64);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(_WORD *)(a1 + 64) & 2) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "timestampGestureBegin", *(double *)(a1 + 16));
LABEL_15:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E3BE4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 64) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_39;
            case 2u:
              *(_WORD *)(a1 + 64) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 60) = v22;
              goto LABEL_117;
            case 3u:
              *(_WORD *)(a1 + 64) |= 0x400u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_106;
                  }
                  unint64_t v45 = v23++;
                  char v46 = *(unsigned char *)(v24 + v45);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_105:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_106;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_105;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_106;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_106:
              *(_DWORD *)(a1 + 56) = v27;
              goto LABEL_117;
            case 4u:
              *(_WORD *)(a1 + 64) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_39:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_101;
            case 5u:
              *(_WORD *)(a1 + 64) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 61) = v30;
              goto LABEL_117;
            case 6u:
              *(_WORD *)(a1 + 64) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_100;
            case 7u:
              *(_WORD *)(a1 + 64) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_100;
            case 8u:
              *(_WORD *)(a1 + 64) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_100;
            case 9u:
              *(_WORD *)(a1 + 64) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_100;
            case 0xAu:
              *(_WORD *)(a1 + 64) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_100;
            case 0xBu:
              *(_WORD *)(a1 + 64) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_100:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_101:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_117;
            case 0xCu:
              *(_WORD *)(a1 + 64) |= 4u;
              unint64_t v31 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v32 = *(void *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v35 = 0;
                if (v2 <= v31) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_111;
                  }
                  unint64_t v49 = v31++;
                  char v50 = *(unsigned char *)(v32 + v49);
                  *((void *)this + 1) = v31;
                  v35 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_110:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_111;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_110;
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              do
              {
                unint64_t v2 = v31 + 1;
                *((void *)this + 1) = v31 + 1;
                char v36 = *(unsigned char *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_111;
                }
                v33 += 7;
                unint64_t v31 = v2;
                BOOL v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_111:
              *(_DWORD *)(a1 + 24) = v35;
              goto LABEL_117;
            case 0xDu:
              *(_WORD *)(a1 + 64) |= 0x200u;
              unint64_t v37 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v38 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v41 = 0;
                if (v2 <= v37) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_116;
                  }
                  unint64_t v53 = v37++;
                  char v54 = *(unsigned char *)(v38 + v53);
                  *((void *)this + 1) = v37;
                  v41 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_115:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_116;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_115;
              }
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v2 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                char v42 = *(unsigned char *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_116;
                }
                v39 += 7;
                unint64_t v37 = v2;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_116:
              *(_DWORD *)(a1 + 52) = v41;
LABEL_117:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_117;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903E42B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 64);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    __int16 v4 = *(_WORD *)(v3 + 64);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 64) & 0x800) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 64) & 0x200) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 64);
  if ((v4 & 4) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x200) == 0) {
    return result;
  }
LABEL_27:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903E4458(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC8C0;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_1903E4480(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E44B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 100);
  if (v5)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 100);
    if ((v5 & 0x400) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(a1 + 100) & 0x400) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence");
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x800) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "locationLoggingEnabled");
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(this, "type");
  if ((*(_WORD *)(a1 + 100) & 0x200) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 80));
LABEL_15:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E469C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 100) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_WORD *)(a1 + 100) |= 0x1000u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_102;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_101;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_102;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *(_DWORD *)(a1 + 96) = v25;
              goto LABEL_113;
            case 3u:
              *(_WORD *)(a1 + 100) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 4u:
              *(_WORD *)(a1 + 100) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 5u:
              *(_WORD *)(a1 + 100) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 6u:
              *(_WORD *)(a1 + 100) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 7u:
              *(_WORD *)(a1 + 100) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 8u:
              *(_WORD *)(a1 + 100) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 9u:
              *(_WORD *)(a1 + 100) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xAu:
              *(_WORD *)(a1 + 100) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_60;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xBu:
              *(_WORD *)(a1 + 100) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_97:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_60:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_113;
            case 0xCu:
              *(_WORD *)(a1 + 100) |= 0x400u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_107;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_106:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_106;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_107;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_107:
              *(_DWORD *)(a1 + 88) = v31;
              goto LABEL_113;
            case 0xDu:
              *(_WORD *)(a1 + 100) |= 0x800u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_112;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_111:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_112;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_111;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_112;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_112:
              *(_DWORD *)(a1 + 92) = v37;
LABEL_113:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_113;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903E4D4C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 100);
  if ((v4 & 0x100) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 72));
    __int16 v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 0x1000) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 100) & 0x1000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 2) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 2) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 100) & 0x800) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x800) == 0) {
    return result;
  }
LABEL_27:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903E4EF0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC8F8;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1903E4F18(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E4F50(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "lockScreen");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E4FB0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *(unsigned char *)(a1 + 8) = v21;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903E5140(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::write(this);
  }
  return result;
}

void *sub_1903E5160(void *result)
{
  *uint64_t result = &unk_1EDFCF8A8;
  result[1] = 0;
  return result;
}

void sub_1903E5180(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCF8A8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903E5200(PB::Base *a1)
{
  sub_1903E5180(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E5238(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E52B4(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903E54B0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_1903E54CC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC4D0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1903E54F4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E552C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E55A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v3 + 1;
        *((void *)this + 1) = v3 + 1;
        char v13 = *(unsigned char *)(v8 + v3);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v3 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v26 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v27 = *(void *)this;
        if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
        {
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v30 = 0;
          if (v2 <= v26) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v26)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_64;
            }
            unint64_t v39 = v26++;
            char v40 = *(unsigned char *)(v27 + v39);
            *((void *)this + 1) = v26;
            v30 |= (unint64_t)(v40 & 0x7F) << v37;
            if ((v40 & 0x80) == 0) {
              break;
            }
            v37 += 7;
            BOOL v14 = v38++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              goto LABEL_63;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v30) = 0;
          }
LABEL_63:
          unint64_t v3 = v39 + 1;
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v3 = v26 + 1;
            *((void *)this + 1) = v26 + 1;
            char v31 = *(unsigned char *)(v27 + v26);
            v30 |= (unint64_t)(v31 & 0x7F) << v28;
            if ((v31 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v26 = v3;
            BOOL v14 = v29++ > 8;
            if (v14)
            {
              LODWORD(v30) = 0;
              break;
            }
          }
        }
LABEL_64:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v33 = 0;
          unsigned int v34 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v3 = *((void *)this + 1);
          }
          else {
            unint64_t v3 = *((void *)this + 2);
          }
          while (1)
          {
            if (v3 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_60;
            }
            unint64_t v35 = v20++;
            char v36 = *(unsigned char *)(v21 + v35);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v36 & 0x7F) << v33;
            if ((v36 & 0x80) == 0) {
              break;
            }
            v33 += 7;
            BOOL v14 = v34++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_59;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v24 = 0;
          }
LABEL_59:
          unint64_t v3 = v35 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v3 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v3;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_60:
        *(void *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v3 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v3 >= v2 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v3 > v2) {
      unint64_t v2 = v3;
    }
    while (v2 != v3)
    {
      unint64_t v17 = v3 + 1;
      char v18 = *(unsigned char *)(v8 + v3);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v3 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903E58D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903E5940(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCE5A0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1903E5964(PB::Base *this)
{
  *(void *)this = &unk_1EDFCE5A0;
  uint64_t v4 = *((void *)this + 1);
  unint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *unint64_t v2 = 0;
  if (v4) {
    sub_1903478E8((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

void sub_1903E59C8(PB::Base *a1)
{
  sub_1903E5964(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E5A00(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if (v5)
  {
    PB::TextFormatter::format(this, "accessoryType");
    char v5 = *(unsigned char *)(a1 + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "isAttached");
  }
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format();
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E5A94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 24) |= 2u;
        unint64_t v21 = *((void *)this + 1);
        if (v21 >= *((void *)this + 2))
        {
          BOOL v24 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          unint64_t v22 = v21 + 1;
          int v23 = *(unsigned __int8 *)(*(void *)this + v21);
          *((void *)this + 1) = v22;
          BOOL v24 = v23 != 0;
        }
        *(unsigned char *)(a1 + 20) = v24;
      }
      else if (v20 == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v25 = *((void *)this + 1);
        unint64_t v26 = *((void *)this + 2);
        uint64_t v27 = *(void *)this;
        if (v25 > 0xFFFFFFFFFFFFFFF5 || v25 + 10 > v26)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v30 = 0;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)this + 1);
          }
          while (1)
          {
            if (v26 == v25)
            {
              LODWORD(v30) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_48;
            }
            unint64_t v36 = v25 + 1;
            char v37 = *(unsigned char *)(v27 + v25);
            *((void *)this + 1) = v36;
            v30 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            unint64_t v25 = v36;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
LABEL_44:
              LODWORD(v30) = 0;
              goto LABEL_48;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v30) = 0;
          }
        }
        else
        {
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          while (1)
          {
            unint64_t v31 = v25 + 1;
            *((void *)this + 1) = v25 + 1;
            char v32 = *(unsigned char *)(v27 + v25);
            v30 |= (unint64_t)(v32 & 0x7F) << v28;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v28 += 7;
            unint64_t v25 = v31;
            BOOL v14 = v29++ > 8;
            if (v14) {
              goto LABEL_44;
            }
          }
        }
LABEL_48:
        *(_DWORD *)(a1 + 16) = v30;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903E5D80(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(void *)(result + 8)) {
    uint64_t result = PB::Writer::write();
  }
  char v4 = *(unsigned char *)(v3 + 24);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(this);
  }
  return result;
}

uint64_t sub_1903E5E00(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCE5D8;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1903E5E28(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E5E60(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "isCharging");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E5EC0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *(unsigned char *)(a1 + 8) = v21;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903E6050(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::write(this);
  }
  return result;
}

uint64_t sub_1903E6070(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB6D0;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_1903E6098(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E60D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "location");
    char v5 = *(unsigned char *)(a1 + 36);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 36) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 36);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "y", *(float *)(a1 + 28));
  if ((*(unsigned char *)(a1 + 36) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 32));
LABEL_8:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E61D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 36) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_55;
            case 2u:
              *(unsigned char *)(a1 + 36) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_54;
            case 3u:
              *(unsigned char *)(a1 + 36) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_54;
            case 4u:
              *(unsigned char *)(a1 + 36) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_54;
            case 5u:
              *(unsigned char *)(a1 + 36) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_54:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_55:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_61;
            case 6u:
              *(unsigned char *)(a1 + 36) |= 2u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_60;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_59:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_60;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_59;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_60;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_60:
              *(_DWORD *)(a1 + 16) = v25;
LABEL_61:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_61;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903E6580(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 36);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 36);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 36) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
    if ((*(unsigned char *)(v3 + 36) & 2) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 36);
  if ((v4 & 4) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_13:

  return PB::Writer::writeVarInt(this);
}

double sub_1903E6660(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC33B0;
  *(_DWORD *)(a1 + 112) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

void sub_1903E66A0(PB::Base *this)
{
  *(void *)this = &unk_1EDFC33B0;
  unint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  char v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  char v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    *((void *)this + 2) = v5;
    operator delete(v5);
  }

  PB::Base::~Base(this);
}

void sub_1903E6734(PB::Base *a1)
{
  sub_1903E66A0(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E676C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(float **)(a1 + 32);
  uint64_t v6 = *(float **)(a1 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "biasEst", v7);
  }
  uint64_t v8 = *(float **)(a1 + 8);
  char v9 = *(float **)(a1 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "biasEstVar", v10);
  }
  unint64_t v11 = *(float **)(a1 + 56);
  unint64_t v12 = *(float **)(a1 + 64);
  while (v11 != v12)
  {
    float v13 = *v11++;
    PB::TextFormatter::format(this, "residual", v13);
  }
  BOOL v14 = *(float **)(a1 + 80);
  char v15 = *(float **)(a1 + 88);
  while (v14 != v15)
  {
    float v16 = *v14++;
    PB::TextFormatter::format(this, "temperature", v16);
  }
  if (*(unsigned char *)(a1 + 112)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 104));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903E688C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 56);
    char v9 = (void **)(a1 + 80);
    uint64_t v128 = a1 + 96;
    uint64_t v129 = a1 + 72;
    float v10 = (void **)(a1 + 8);
    uint64_t v127 = a1 + 24;
    unint64_t v11 = (void **)(a1 + 32);
    uint64_t v12 = a1 + 48;
    while (1)
    {
      uint64_t v13 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        if (v15++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v25 = v16 & 7;
      if (v25 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 112) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_196;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v26);
          uint64_t v27 = *((void *)this + 1) + 8;
          goto LABEL_198;
        case 2u:
          if (v25 != 2)
          {
            v85 = *(char **)(a1 + 40);
            unint64_t v84 = *(void *)(a1 + 48);
            if ((unint64_t)v85 >= v84)
            {
              v93 = (char *)*v11;
              uint64_t v94 = (v85 - (unsigned char *)*v11) >> 2;
              unint64_t v95 = v94 + 1;
              if ((unint64_t)(v94 + 1) >> 62) {
LABEL_207:
              }
                sub_1903479E8();
              uint64_t v96 = v84 - (void)v93;
              if (v96 >> 1 > v95) {
                unint64_t v95 = v96 >> 1;
              }
              if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v97 = v95;
              }
              if (v97)
              {
                v98 = (char *)sub_190347D04(v12, v97);
                v93 = *(char **)(a1 + 32);
                v85 = *(char **)(a1 + 40);
              }
              else
              {
                v98 = 0;
              }
              v117 = &v98[4 * v94];
              *(_DWORD *)v117 = 0;
              v86 = v117 + 4;
              while (v85 != v93)
              {
                int v118 = *((_DWORD *)v85 - 1);
                v85 -= 4;
                *((_DWORD *)v117 - 1) = v118;
                v117 -= 4;
              }
              *(void *)(a1 + 32) = v117;
              *(void *)(a1 + 40) = v86;
              *(void *)(a1 + 48) = &v98[4 * v97];
              if (v93) {
                operator delete(v93);
              }
            }
            else
            {
              *(_DWORD *)v85 = 0;
              v86 = v85 + 4;
            }
            *(void *)(a1 + 40) = v86;
            goto LABEL_194;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v28 = *((void *)this + 1);
          unint64_t v29 = *((void *)this + 2);
          while (v28 < v29 && !*((unsigned char *)this + 24))
          {
            unint64_t v31 = *(char **)(a1 + 40);
            unint64_t v30 = *(void *)(a1 + 48);
            if ((unint64_t)v31 >= v30)
            {
              char v33 = (char *)*v11;
              uint64_t v34 = (v31 - (unsigned char *)*v11) >> 2;
              unint64_t v35 = v34 + 1;
              if ((unint64_t)(v34 + 1) >> 62) {
                goto LABEL_207;
              }
              uint64_t v36 = v30 - (void)v33;
              if (v36 >> 1 > v35) {
                unint64_t v35 = v36 >> 1;
              }
              if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v37 = v35;
              }
              if (v37)
              {
                unsigned int v38 = (char *)sub_190347D04(v12, v37);
                char v33 = *(char **)(a1 + 32);
                unint64_t v31 = *(char **)(a1 + 40);
              }
              else
              {
                unsigned int v38 = 0;
              }
              unint64_t v39 = &v38[4 * v34];
              *(_DWORD *)unint64_t v39 = 0;
              char v32 = v39 + 4;
              while (v31 != v33)
              {
                int v40 = *((_DWORD *)v31 - 1);
                v31 -= 4;
                *((_DWORD *)v39 - 1) = v40;
                v39 -= 4;
              }
              *(void *)(a1 + 32) = v39;
              *(void *)(a1 + 40) = v32;
              *(void *)(a1 + 48) = &v38[4 * v37];
              if (v33) {
                operator delete(v33);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v31 = 0;
              char v32 = v31 + 4;
            }
            *(void *)(a1 + 40) = v32;
            unint64_t v41 = *((void *)this + 1);
            if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
              goto LABEL_124;
            }
            *(v32 - 1) = *(_DWORD *)(*(void *)this + v41);
            unint64_t v29 = *((void *)this + 2);
            unint64_t v28 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v28;
          }
          goto LABEL_125;
        case 3u:
          if (v25 != 2)
          {
            v88 = *(char **)(a1 + 16);
            unint64_t v87 = *(void *)(a1 + 24);
            if ((unint64_t)v88 >= v87)
            {
              v99 = (char *)*v10;
              uint64_t v100 = (v88 - (unsigned char *)*v10) >> 2;
              unint64_t v101 = v100 + 1;
              if ((unint64_t)(v100 + 1) >> 62) {
LABEL_208:
              }
                sub_1903479E8();
              uint64_t v102 = v87 - (void)v99;
              if (v102 >> 1 > v101) {
                unint64_t v101 = v102 >> 1;
              }
              if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v103 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v103 = v101;
              }
              if (v103)
              {
                v104 = (char *)sub_190347D04(v127, v103);
                v99 = *(char **)(a1 + 8);
                v88 = *(char **)(a1 + 16);
              }
              else
              {
                v104 = 0;
              }
              v119 = &v104[4 * v100];
              *(_DWORD *)v119 = 0;
              v86 = v119 + 4;
              while (v88 != v99)
              {
                int v120 = *((_DWORD *)v88 - 1);
                v88 -= 4;
                *((_DWORD *)v119 - 1) = v120;
                v119 -= 4;
              }
              *(void *)(a1 + 8) = v119;
              *(void *)(a1 + 16) = v86;
              *(void *)(a1 + 24) = &v104[4 * v103];
              if (v99) {
                operator delete(v99);
              }
            }
            else
            {
              *(_DWORD *)v88 = 0;
              v86 = v88 + 4;
            }
            *(void *)(a1 + 16) = v86;
            goto LABEL_194;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v42 = *((void *)this + 1);
          unint64_t v43 = *((void *)this + 2);
          while (v42 < v43 && !*((unsigned char *)this + 24))
          {
            unint64_t v45 = *(char **)(a1 + 16);
            unint64_t v44 = *(void *)(a1 + 24);
            if ((unint64_t)v45 >= v44)
            {
              char v47 = (char *)*v10;
              uint64_t v48 = (v45 - (unsigned char *)*v10) >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
                goto LABEL_208;
              }
              uint64_t v50 = v44 - (void)v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                unsigned int v52 = (char *)sub_190347D04(v127, v51);
                char v47 = *(char **)(a1 + 8);
                unint64_t v45 = *(char **)(a1 + 16);
              }
              else
              {
                unsigned int v52 = 0;
              }
              unint64_t v53 = &v52[4 * v48];
              *(_DWORD *)unint64_t v53 = 0;
              char v46 = v53 + 4;
              while (v45 != v47)
              {
                int v54 = *((_DWORD *)v45 - 1);
                v45 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *(void *)(a1 + 8) = v53;
              *(void *)(a1 + 16) = v46;
              *(void *)(a1 + 24) = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v45 = 0;
              char v46 = v45 + 4;
            }
            *(void *)(a1 + 16) = v46;
            unint64_t v55 = *((void *)this + 1);
            if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
              goto LABEL_124;
            }
            *(v46 - 1) = *(_DWORD *)(*(void *)this + v55);
            unint64_t v43 = *((void *)this + 2);
            unint64_t v42 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v42;
          }
          goto LABEL_125;
        case 4u:
          if (v25 != 2)
          {
            v90 = *(char **)(a1 + 88);
            unint64_t v89 = *(void *)(a1 + 96);
            if ((unint64_t)v90 >= v89)
            {
              v105 = (char *)*v9;
              uint64_t v106 = (v90 - (unsigned char *)*v9) >> 2;
              unint64_t v107 = v106 + 1;
              if ((unint64_t)(v106 + 1) >> 62) {
LABEL_209:
              }
                sub_1903479E8();
              uint64_t v108 = v89 - (void)v105;
              if (v108 >> 1 > v107) {
                unint64_t v107 = v108 >> 1;
              }
              if ((unint64_t)v108 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v109 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v109 = v107;
              }
              if (v109)
              {
                v110 = (char *)sub_190347D04(v128, v109);
                v105 = *(char **)(a1 + 80);
                v90 = *(char **)(a1 + 88);
              }
              else
              {
                v110 = 0;
              }
              v121 = &v110[4 * v106];
              *(_DWORD *)v121 = 0;
              v86 = v121 + 4;
              while (v90 != v105)
              {
                int v122 = *((_DWORD *)v90 - 1);
                v90 -= 4;
                *((_DWORD *)v121 - 1) = v122;
                v121 -= 4;
              }
              *(void *)(a1 + 80) = v121;
              *(void *)(a1 + 88) = v86;
              *(void *)(a1 + 96) = &v110[4 * v109];
              if (v105) {
                operator delete(v105);
              }
            }
            else
            {
              *(_DWORD *)v90 = 0;
              v86 = v90 + 4;
            }
            *(void *)(a1 + 88) = v86;
            goto LABEL_194;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v56 = *((void *)this + 1);
          unint64_t v57 = *((void *)this + 2);
          while (v56 < v57 && !*((unsigned char *)this + 24))
          {
            v59 = *(char **)(a1 + 88);
            unint64_t v58 = *(void *)(a1 + 96);
            if ((unint64_t)v59 >= v58)
            {
              v61 = (char *)*v9;
              uint64_t v62 = (v59 - (unsigned char *)*v9) >> 2;
              unint64_t v63 = v62 + 1;
              if ((unint64_t)(v62 + 1) >> 62) {
                goto LABEL_209;
              }
              uint64_t v64 = v58 - (void)v61;
              if (v64 >> 1 > v63) {
                unint64_t v63 = v64 >> 1;
              }
              if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v65 = v63;
              }
              if (v65)
              {
                v66 = (char *)sub_190347D04(v128, v65);
                v61 = *(char **)(a1 + 80);
                v59 = *(char **)(a1 + 88);
              }
              else
              {
                v66 = 0;
              }
              v67 = &v66[4 * v62];
              *(_DWORD *)v67 = 0;
              v60 = v67 + 4;
              while (v59 != v61)
              {
                int v68 = *((_DWORD *)v59 - 1);
                v59 -= 4;
                *((_DWORD *)v67 - 1) = v68;
                v67 -= 4;
              }
              *(void *)(a1 + 80) = v67;
              *(void *)(a1 + 88) = v60;
              *(void *)(a1 + 96) = &v66[4 * v65];
              if (v61) {
                operator delete(v61);
              }
            }
            else
            {
              *(_DWORD *)v59 = 0;
              v60 = v59 + 4;
            }
            *(void *)(a1 + 88) = v60;
            unint64_t v69 = *((void *)this + 1);
            if (v69 > 0xFFFFFFFFFFFFFFFBLL || v69 + 4 > *((void *)this + 2)) {
              goto LABEL_124;
            }
            *(v60 - 1) = *(_DWORD *)(*(void *)this + v69);
            unint64_t v57 = *((void *)this + 2);
            unint64_t v56 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v56;
          }
          goto LABEL_125;
        case 5u:
          if (v25 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v70 = *((void *)this + 1);
            unint64_t v71 = *((void *)this + 2);
            while (v70 < v71 && !*((unsigned char *)this + 24))
            {
              v73 = *(char **)(a1 + 64);
              unint64_t v72 = *(void *)(a1 + 72);
              if ((unint64_t)v73 >= v72)
              {
                v75 = (char *)*v8;
                uint64_t v76 = (v73 - (unsigned char *)*v8) >> 2;
                unint64_t v77 = v76 + 1;
                if ((unint64_t)(v76 + 1) >> 62) {
                  goto LABEL_210;
                }
                uint64_t v78 = v72 - (void)v75;
                if (v78 >> 1 > v77) {
                  unint64_t v77 = v78 >> 1;
                }
                if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v79 = v77;
                }
                if (v79)
                {
                  v80 = (char *)sub_190347D04(v129, v79);
                  v75 = *(char **)(a1 + 56);
                  v73 = *(char **)(a1 + 64);
                }
                else
                {
                  v80 = 0;
                }
                v81 = &v80[4 * v76];
                *(_DWORD *)v81 = 0;
                v74 = v81 + 4;
                while (v73 != v75)
                {
                  int v82 = *((_DWORD *)v73 - 1);
                  v73 -= 4;
                  *((_DWORD *)v81 - 1) = v82;
                  v81 -= 4;
                }
                *(void *)(a1 + 56) = v81;
                *(void *)(a1 + 64) = v74;
                *(void *)(a1 + 72) = &v80[4 * v79];
                if (v75) {
                  operator delete(v75);
                }
              }
              else
              {
                *(_DWORD *)v73 = 0;
                v74 = v73 + 4;
              }
              *(void *)(a1 + 64) = v74;
              unint64_t v83 = *((void *)this + 1);
              if (v83 > 0xFFFFFFFFFFFFFFFBLL || v83 + 4 > *((void *)this + 2))
              {
LABEL_124:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v74 - 1) = *(_DWORD *)(*(void *)this + v83);
              unint64_t v71 = *((void *)this + 2);
              unint64_t v70 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v70;
            }
LABEL_125:
            PB::Reader::recallMark();
          }
          else
          {
            v92 = *(char **)(a1 + 64);
            unint64_t v91 = *(void *)(a1 + 72);
            if ((unint64_t)v92 >= v91)
            {
              v111 = (char *)*v8;
              uint64_t v112 = (v92 - (unsigned char *)*v8) >> 2;
              unint64_t v113 = v112 + 1;
              if ((unint64_t)(v112 + 1) >> 62) {
LABEL_210:
              }
                sub_1903479E8();
              uint64_t v114 = v91 - (void)v111;
              if (v114 >> 1 > v113) {
                unint64_t v113 = v114 >> 1;
              }
              if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v115 = v113;
              }
              if (v115)
              {
                v116 = (char *)sub_190347D04(v129, v115);
                v111 = *(char **)(a1 + 56);
                v92 = *(char **)(a1 + 64);
              }
              else
              {
                v116 = 0;
              }
              v123 = &v116[4 * v112];
              *(_DWORD *)v123 = 0;
              v86 = v123 + 4;
              while (v92 != v111)
              {
                int v124 = *((_DWORD *)v92 - 1);
                v92 -= 4;
                *((_DWORD *)v123 - 1) = v124;
                v123 -= 4;
              }
              *(void *)(a1 + 56) = v123;
              *(void *)(a1 + 64) = v86;
              *(void *)(a1 + 72) = &v116[4 * v115];
              if (v111) {
                operator delete(v111);
              }
            }
            else
            {
              *(_DWORD *)v92 = 0;
              v86 = v92 + 4;
            }
            *(void *)(a1 + 64) = v86;
LABEL_194:
            unint64_t v125 = *((void *)this + 1);
            if (v125 <= 0xFFFFFFFFFFFFFFFBLL && v125 + 4 <= *((void *)this + 2))
            {
              *(v86 - 1) = *(_DWORD *)(*(void *)this + v125);
              uint64_t v27 = *((void *)this + 1) + 4;
LABEL_198:
              *((void *)this + 1) = v27;
            }
            else
            {
LABEL_196:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_199:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_199;
      }
    }
    char v20 = 0;
    unsigned int v21 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v22 = v2 + 1;
      char v23 = *(unsigned char *)(v13 + v2);
      *((void *)this + 1) = v22;
      v16 |= (unint64_t)(v23 & 0x7F) << v20;
      if ((v23 & 0x80) == 0) {
        goto LABEL_21;
      }
      v20 += 7;
      unint64_t v2 = v22;
      if (v21++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903E719C(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if (*(unsigned char *)(result + 112)) {
    double result = PB::Writer::write(this, *(double *)(result + 104));
  }
  int v4 = (float *)v3[4];
  char v5 = (float *)v3[5];
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  float v7 = (float *)v3[1];
  uint64_t v8 = (float *)v3[2];
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  float v10 = (float *)v3[10];
  unint64_t v11 = (float *)v3[11];
  while (v10 != v11)
  {
    float v12 = *v10++;
    double result = PB::Writer::write(this, v12);
  }
  char v14 = (float *)v3[7];
  uint64_t v13 = (float *)v3[8];
  while (v14 != v13)
  {
    float v15 = *v14++;
    double result = PB::Writer::write(this, v15);
  }
  return result;
}

uint64_t sub_1903E7260(uint64_t result)
{
  *(void *)double result = &unk_1EDFCCDC8;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_1903E7288(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E72C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x10) != 0)
  {
    PB::TextFormatter::format(this, "exitingSaturation");
    char v5 = *(unsigned char *)(a1 + 44);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 44) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "extendedSaturation");
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "shiftInSaturation");
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "timeSinceLastRemag");
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "timeSinceLastRemagTrigger");
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 44) & 8) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "triggerCount");
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E73E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 44) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_97;
            case 2u:
              *(unsigned char *)(a1 + 44) |= 2u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v45 = 0;
                unsigned int v46 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  unint64_t v47 = v21++;
                  char v48 = *(unsigned char *)(v22 + v47);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v48 & 0x7F) << v45;
                  if ((v48 & 0x80) == 0) {
                    break;
                  }
                  v45 += 7;
                  BOOL v14 = v46++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_85:
                    unint64_t v2 = v47 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_85;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_86:
              *(void *)(a1 + 16) = v25;
              goto LABEL_97;
            case 3u:
              *(unsigned char *)(a1 + 44) |= 1u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_90:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_90;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_91:
              *(void *)(a1 + 8) = v31;
              goto LABEL_97;
            case 4u:
              *(unsigned char *)(a1 + 44) |= 8u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_96;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_95:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_96;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_95;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_96;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_96:
              *(void *)(a1 + 32) = v37;
LABEL_97:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(unsigned char *)(a1 + 44) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *(unsigned char *)(a1 + 42) = v40;
              goto LABEL_97;
            case 6u:
              *(unsigned char *)(a1 + 44) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v42 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v42 = v41 != 0;
              }
              *(unsigned char *)(a1 + 40) = v42;
              goto LABEL_97;
            case 7u:
              *(unsigned char *)(a1 + 44) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v44 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v43 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v44 = v43 != 0;
              }
              *(unsigned char *)(a1 + 41) = v44;
              goto LABEL_97;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_97;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903E7950(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 44);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 44) & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this);
    if ((*(unsigned char *)(v3 + 44) & 0x20) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_15:

  return PB::Writer::write(this);
}

uint64_t sub_1903E7A4C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCE00;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1903E7A74(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E7AAC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 20);
  if (v5)
  {
    PB::TextFormatter::format(this, "isAppleMapsRoutingActive");
    __int16 v5 = *(_WORD *)(a1 + 20);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isBicycleRouting");
  __int16 v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isBicycleRoutingActive");
  __int16 v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "isPedestrianRouting");
  __int16 v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "isPedestrianRoutingActive");
  __int16 v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "isStepTypeBicycle");
  __int16 v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "isStepTypePedestrian");
  __int16 v5 = *(_WORD *)(a1 + 20);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(this, "isVehicularRouting");
  if ((*(_WORD *)(a1 + 20) & 0x100) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "isVehicularRoutingActive");
LABEL_11:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E7C10(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 20) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                BOOL v21 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v21 = v20 != 0;
              }
              *(unsigned char *)(a1 + 15) = v21;
              goto LABEL_60;
            case 2u:
              *(_WORD *)(a1 + 20) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                BOOL v24 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *(unsigned char *)(a1 + 9) = v24;
              goto LABEL_60;
            case 3u:
              *(_WORD *)(a1 + 20) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                BOOL v26 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *(unsigned char *)(a1 + 11) = v26;
              goto LABEL_60;
            case 4u:
              *(_WORD *)(a1 + 20) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 13) = v28;
              goto LABEL_60;
            case 5u:
              *(_WORD *)(a1 + 20) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 14) = v30;
              goto LABEL_60;
            case 6u:
              *(_WORD *)(a1 + 20) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                BOOL v32 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v31 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v32 = v31 != 0;
              }
              *(unsigned char *)(a1 + 12) = v32;
              goto LABEL_60;
            case 7u:
              *(_WORD *)(a1 + 20) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 16) = v34;
              goto LABEL_60;
            case 8u:
              *(_WORD *)(a1 + 20) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                BOOL v36 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *(unsigned char *)(a1 + 10) = v36;
              goto LABEL_60;
            case 9u:
              *(_WORD *)(a1 + 20) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              if (v2 >= v3)
              {
                BOOL v38 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v37 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v38 = v37 != 0;
              }
              *(unsigned char *)(a1 + 8) = v38;
              goto LABEL_60;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
LABEL_60:
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903E8008(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 20);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this);
    __int16 v4 = *(_WORD *)(v3 + 20);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 20) & 1) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 20);
  if ((v4 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_19:

  return PB::Writer::write(this);
}

uint64_t sub_1903E813C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD0678;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1903E8164(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E819C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if (v5)
  {
    PB::TextFormatter::format(this, "mets", *(float *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "metsDiff", *(float *)(a1 + 12));
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "metsHR", *(float *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "metsWR", *(float *)(a1 + 20));
  if ((*(unsigned char *)(a1 + 28) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "source");
LABEL_7:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E8280(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 28) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_42;
              }
              *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_51;
            case 2u:
              *(unsigned char *)(a1 + 28) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_42;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_51;
            case 3u:
              *(unsigned char *)(a1 + 28) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_42;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_51;
            case 4u:
              *(unsigned char *)(a1 + 28) |= 0x10u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_56;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_55:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_56;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_55;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_56;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_56:
              *(_DWORD *)(a1 + 24) = v25;
LABEL_57:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(unsigned char *)(a1 + 28) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
LABEL_51:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_42:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_57;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_57;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903E85E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 28) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 28) & 2) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 0x10) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_11:
  float v5 = *(float *)(v3 + 12);

  return PB::Writer::write(this, v5);
}

void *sub_1903E86AC(void *result)
{
  *uint64_t result = &unk_1EDFCD6F8;
  result[23] = 0;
  return result;
}

void sub_1903E86D4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903E870C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryPercentage", *(float *)(a1 + 32));
    uint64_t v5 = *(void *)(a1 + 184);
    if ((v5 & 0x8000000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_52;
    }
  }
  else if ((v5 & 0x8000000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "asymmetryPercentageIsValid");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "asymmetryPercentageRejectionStatus");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "boundaryType");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "cycleTimeEntropy", *(float *)(a1 + 44));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "cycleTimeMean", *(float *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "cycleTimePoincareSD1", *(float *)(a1 + 52));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "cycleTimePoincareSD2", *(float *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "deviceSide");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "doubleSupportPercentage", *(float *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "doubleSupportPercentageIsValid");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "doubleSupportPercentageRejectionStatus");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "invalidGradePercentage", *(double *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "isHeightSet");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_17:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "isWeightSet");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x2000) == 0)
  {
LABEL_18:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "numGaitMetrics");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x4000) == 0)
  {
LABEL_19:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "rejectionStatus");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x8000) == 0)
  {
LABEL_20:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "segmentsRejectedByIsCadenceConcordant");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x10000) == 0)
  {
LABEL_21:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "segmentsRejectedByIsFeasibleWalkingSpeed");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x20000) == 0)
  {
LABEL_22:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "segmentsRejectedByIsNotRunning");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x40000) == 0)
  {
LABEL_23:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "segmentsRejectedByIsPendular");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x80000) == 0)
  {
LABEL_24:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "segmentsRejectedByIsSufficientVerticalTwist");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x100000) == 0)
  {
LABEL_25:
    if ((v5 & 4) == 0) {
      goto LABEL_26;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "segmentsRejectedByIsSwingStanceCycle");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 4) == 0)
  {
LABEL_26:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x200000) == 0)
  {
LABEL_27:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "stepCount");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x400000) == 0)
  {
LABEL_28:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityAP", *(float *)(a1 + 108));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x800000) == 0)
  {
LABEL_29:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityML", *(float *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "stepIndexOfHarmonicityVT", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "stepLength", *(float *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "stepLengthEntropy", *(float *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "stepLengthIsValid");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "stepLengthPoincareSD1", *(float *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "stepLengthPoincareSD2", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "stepLengthRejectionStatus");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityAP", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityML", *(float *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "swingIndexOfHarmonicityVT", *(float *)(a1 + 148));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "terminationReason");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_41:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "userHeight", *(float *)(a1 + 156));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_42:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "userWeight", *(float *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "walkingSpeed", *(float *)(a1 + 164));
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "walkingSpeedIsValid");
  uint64_t v5 = *(void *)(a1 + 184);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
LABEL_93:
  PB::TextFormatter::format(this, "walkingSpeedRejectionStatus");
  if ((*(void *)(a1 + 184) & 0x4000000000) != 0) {
LABEL_46:
  }
    PB::TextFormatter::format(this, "workoutType");
LABEL_47:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903E8CF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 184) |= 4uLL;
          unint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v20);
          goto LABEL_62;
        case 2u:
          *(void *)(a1 + 184) |= 1uLL;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v22);
          goto LABEL_62;
        case 3u:
          *(void *)(a1 + 184) |= 0x200000uLL;
          unint64_t v23 = *((void *)this + 1);
          unint64_t v24 = *((void *)this + 2);
          uint64_t v25 = *(void *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v28 = 0;
            do
            {
              unint64_t v29 = v23 + 1;
              *((void *)this + 1) = v23 + 1;
              char v30 = *(unsigned char *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0) {
                goto LABEL_364;
              }
              v26 += 7;
              unint64_t v23 = v29;
              BOOL v14 = v27++ > 8;
            }
            while (!v14);
LABEL_228:
            LODWORD(v28) = 0;
            goto LABEL_364;
          }
          char v204 = 0;
          unsigned int v205 = 0;
          uint64_t v28 = 0;
          if (v24 <= v23) {
            unint64_t v24 = *((void *)this + 1);
          }
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v206 = v23 + 1;
              char v207 = *(unsigned char *)(v25 + v23);
              *((void *)this + 1) = v206;
              v28 |= (unint64_t)(v207 & 0x7F) << v204;
              if (v207 < 0)
              {
                v204 += 7;
                unint64_t v23 = v206;
                BOOL v14 = v205++ > 8;
                if (v14) {
                  goto LABEL_228;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v28) = 0;
              }
            }
            break;
          }
LABEL_364:
          *(_DWORD *)(a1 + 104) = v28;
          goto LABEL_356;
        case 4u:
          *(void *)(a1 + 184) |= 0x1000000000uLL;
          unint64_t v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_354;
        case 5u:
          *(void *)(a1 + 184) |= 0x100000000000uLL;
          unint64_t v32 = *((void *)this + 1);
          if (v32 >= *((void *)this + 2))
          {
            BOOL v35 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v33 = v32 + 1;
            int v34 = *(unsigned __int8 *)(*(void *)this + v32);
            *((void *)this + 1) = v33;
            BOOL v35 = v34 != 0;
          }
          *(unsigned char *)(a1 + 181) = v35;
          goto LABEL_356;
        case 6u:
          *(void *)(a1 + 184) |= 0x800uLL;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_354;
        case 7u:
          *(void *)(a1 + 184) |= 0x10000000000uLL;
          unint64_t v37 = *((void *)this + 1);
          if (v37 >= *((void *)this + 2))
          {
            BOOL v40 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v38 = v37 + 1;
            int v39 = *(unsigned __int8 *)(*(void *)this + v37);
            *((void *)this + 1) = v38;
            BOOL v40 = v39 != 0;
          }
          *(unsigned char *)(a1 + 177) = v40;
          goto LABEL_356;
        case 8u:
          *(void *)(a1 + 184) |= 0x2000000uLL;
          unint64_t v41 = *((void *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v41);
          goto LABEL_354;
        case 9u:
          *(void *)(a1 + 184) |= 0x80000000000uLL;
          unint64_t v42 = *((void *)this + 1);
          if (v42 >= *((void *)this + 2))
          {
            BOOL v45 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v43 = v42 + 1;
            int v44 = *(unsigned __int8 *)(*(void *)this + v42);
            *((void *)this + 1) = v43;
            BOOL v45 = v44 != 0;
          }
          *(unsigned char *)(a1 + 180) = v45;
          goto LABEL_356;
        case 0xAu:
          *(void *)(a1 + 184) |= 0x4000uLL;
          unint64_t v46 = *((void *)this + 1);
          unint64_t v47 = *((void *)this + 2);
          uint64_t v48 = *(void *)this;
          if (v46 <= 0xFFFFFFFFFFFFFFF5 && v46 + 10 <= v47)
          {
            char v49 = 0;
            unsigned int v50 = 0;
            uint64_t v51 = 0;
            do
            {
              unint64_t v52 = v46 + 1;
              *((void *)this + 1) = v46 + 1;
              char v53 = *(unsigned char *)(v48 + v46);
              v51 |= (unint64_t)(v53 & 0x7F) << v49;
              if ((v53 & 0x80) == 0) {
                goto LABEL_368;
              }
              v49 += 7;
              unint64_t v46 = v52;
              BOOL v14 = v50++ > 8;
            }
            while (!v14);
LABEL_241:
            LODWORD(v51) = 0;
            goto LABEL_368;
          }
          char v208 = 0;
          unsigned int v209 = 0;
          uint64_t v51 = 0;
          if (v47 <= v46) {
            unint64_t v47 = *((void *)this + 1);
          }
          while (2)
          {
            if (v47 == v46)
            {
              LODWORD(v51) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v210 = v46 + 1;
              char v211 = *(unsigned char *)(v48 + v46);
              *((void *)this + 1) = v210;
              v51 |= (unint64_t)(v211 & 0x7F) << v208;
              if (v211 < 0)
              {
                v208 += 7;
                unint64_t v46 = v210;
                BOOL v14 = v209++ > 8;
                if (v14) {
                  goto LABEL_241;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v51) = 0;
              }
            }
            break;
          }
LABEL_368:
          *(_DWORD *)(a1 + 76) = v51;
          goto LABEL_356;
        case 0xBu:
          *(void *)(a1 + 184) |= 2uLL;
          unint64_t v54 = *((void *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v54);
LABEL_62:
          uint64_t v55 = *((void *)this + 1) + 8;
          goto LABEL_355;
        case 0xCu:
          *(void *)(a1 + 184) |= 8uLL;
          unint64_t v56 = *((void *)this + 1);
          if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v56);
          goto LABEL_354;
        case 0xDu:
          *(void *)(a1 + 184) |= 0x8000000000uLL;
          unint64_t v57 = *((void *)this + 1);
          if (v57 >= *((void *)this + 2))
          {
            BOOL v60 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v58 = v57 + 1;
            int v59 = *(unsigned __int8 *)(*(void *)this + v57);
            *((void *)this + 1) = v58;
            BOOL v60 = v59 != 0;
          }
          *(unsigned char *)(a1 + 176) = v60;
          goto LABEL_356;
        case 0xEu:
          *(void *)(a1 + 184) |= 0x2000uLL;
          unint64_t v61 = *((void *)this + 1);
          unint64_t v62 = *((void *)this + 2);
          uint64_t v63 = *(void *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)this + 1) = v61 + 1;
              char v68 = *(unsigned char *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_372;
              }
              v64 += 7;
              unint64_t v61 = v67;
              BOOL v14 = v65++ > 8;
            }
            while (!v14);
LABEL_250:
            LODWORD(v66) = 0;
            goto LABEL_372;
          }
          char v212 = 0;
          unsigned int v213 = 0;
          uint64_t v66 = 0;
          if (v62 <= v61) {
            unint64_t v62 = *((void *)this + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v214 = v61 + 1;
              char v215 = *(unsigned char *)(v63 + v61);
              *((void *)this + 1) = v214;
              v66 |= (unint64_t)(v215 & 0x7F) << v212;
              if (v215 < 0)
              {
                v212 += 7;
                unint64_t v61 = v214;
                BOOL v14 = v213++ > 8;
                if (v14) {
                  goto LABEL_250;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v66) = 0;
              }
            }
            break;
          }
LABEL_372:
          *(_DWORD *)(a1 + 72) = v66;
          goto LABEL_356;
        case 0xFu:
          *(void *)(a1 + 184) |= 0x200000000uLL;
          unint64_t v69 = *((void *)this + 1);
          unint64_t v70 = *((void *)this + 2);
          uint64_t v71 = *(void *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_376;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_257:
            LODWORD(v74) = 0;
            goto LABEL_376;
          }
          char v216 = 0;
          unsigned int v217 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)this + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v218 = v69 + 1;
              char v219 = *(unsigned char *)(v71 + v69);
              *((void *)this + 1) = v218;
              v74 |= (unint64_t)(v219 & 0x7F) << v216;
              if (v219 < 0)
              {
                v216 += 7;
                unint64_t v69 = v218;
                BOOL v14 = v217++ > 8;
                if (v14) {
                  goto LABEL_257;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_376:
          *(_DWORD *)(a1 + 152) = v74;
          goto LABEL_356;
        case 0x10u:
          *(void *)(a1 + 184) |= 0x4000000000uLL;
          unint64_t v77 = *((void *)this + 1);
          unint64_t v78 = *((void *)this + 2);
          uint64_t v79 = *(void *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)this + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_380;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }
            while (!v14);
LABEL_264:
            LODWORD(v82) = 0;
            goto LABEL_380;
          }
          char v220 = 0;
          unsigned int v221 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)this + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v222 = v77 + 1;
              char v223 = *(unsigned char *)(v79 + v77);
              *((void *)this + 1) = v222;
              v82 |= (unint64_t)(v223 & 0x7F) << v220;
              if (v223 < 0)
              {
                v220 += 7;
                unint64_t v77 = v222;
                BOOL v14 = v221++ > 8;
                if (v14) {
                  goto LABEL_264;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v82) = 0;
              }
            }
            break;
          }
LABEL_380:
          *(_DWORD *)(a1 + 172) = v82;
          goto LABEL_356;
        case 0x11u:
          *(void *)(a1 + 184) |= 0x100000uLL;
          unint64_t v85 = *((void *)this + 1);
          unint64_t v86 = *((void *)this + 2);
          uint64_t v87 = *(void *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)this + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_384;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }
            while (!v14);
LABEL_271:
            LODWORD(v90) = 0;
            goto LABEL_384;
          }
          char v224 = 0;
          unsigned int v225 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)this + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v226 = v85 + 1;
              char v227 = *(unsigned char *)(v87 + v85);
              *((void *)this + 1) = v226;
              v90 |= (unint64_t)(v227 & 0x7F) << v224;
              if (v227 < 0)
              {
                v224 += 7;
                unint64_t v85 = v226;
                BOOL v14 = v225++ > 8;
                if (v14) {
                  goto LABEL_271;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v90) = 0;
              }
            }
            break;
          }
LABEL_384:
          *(_DWORD *)(a1 + 100) = v90;
          goto LABEL_356;
        case 0x12u:
          *(void *)(a1 + 184) |= 0x20000uLL;
          unint64_t v93 = *((void *)this + 1);
          unint64_t v94 = *((void *)this + 2);
          uint64_t v95 = *(void *)this;
          if (v93 <= 0xFFFFFFFFFFFFFFF5 && v93 + 10 <= v94)
          {
            char v96 = 0;
            unsigned int v97 = 0;
            uint64_t v98 = 0;
            do
            {
              unint64_t v99 = v93 + 1;
              *((void *)this + 1) = v93 + 1;
              char v100 = *(unsigned char *)(v95 + v93);
              v98 |= (unint64_t)(v100 & 0x7F) << v96;
              if ((v100 & 0x80) == 0) {
                goto LABEL_388;
              }
              v96 += 7;
              unint64_t v93 = v99;
              BOOL v14 = v97++ > 8;
            }
            while (!v14);
LABEL_278:
            LODWORD(v98) = 0;
            goto LABEL_388;
          }
          char v228 = 0;
          unsigned int v229 = 0;
          uint64_t v98 = 0;
          if (v94 <= v93) {
            unint64_t v94 = *((void *)this + 1);
          }
          while (2)
          {
            if (v94 == v93)
            {
              LODWORD(v98) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v230 = v93 + 1;
              char v231 = *(unsigned char *)(v95 + v93);
              *((void *)this + 1) = v230;
              v98 |= (unint64_t)(v231 & 0x7F) << v228;
              if (v231 < 0)
              {
                v228 += 7;
                unint64_t v93 = v230;
                BOOL v14 = v229++ > 8;
                if (v14) {
                  goto LABEL_278;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v98) = 0;
              }
            }
            break;
          }
LABEL_388:
          *(_DWORD *)(a1 + 88) = v98;
          goto LABEL_356;
        case 0x13u:
          *(void *)(a1 + 184) |= 0x10000uLL;
          unint64_t v101 = *((void *)this + 1);
          unint64_t v102 = *((void *)this + 2);
          uint64_t v103 = *(void *)this;
          if (v101 <= 0xFFFFFFFFFFFFFFF5 && v101 + 10 <= v102)
          {
            char v104 = 0;
            unsigned int v105 = 0;
            uint64_t v106 = 0;
            do
            {
              unint64_t v107 = v101 + 1;
              *((void *)this + 1) = v101 + 1;
              char v108 = *(unsigned char *)(v103 + v101);
              v106 |= (unint64_t)(v108 & 0x7F) << v104;
              if ((v108 & 0x80) == 0) {
                goto LABEL_392;
              }
              v104 += 7;
              unint64_t v101 = v107;
              BOOL v14 = v105++ > 8;
            }
            while (!v14);
LABEL_285:
            LODWORD(v106) = 0;
            goto LABEL_392;
          }
          char v232 = 0;
          unsigned int v233 = 0;
          uint64_t v106 = 0;
          if (v102 <= v101) {
            unint64_t v102 = *((void *)this + 1);
          }
          while (2)
          {
            if (v102 == v101)
            {
              LODWORD(v106) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v234 = v101 + 1;
              char v235 = *(unsigned char *)(v103 + v101);
              *((void *)this + 1) = v234;
              v106 |= (unint64_t)(v235 & 0x7F) << v232;
              if (v235 < 0)
              {
                v232 += 7;
                unint64_t v101 = v234;
                BOOL v14 = v233++ > 8;
                if (v14) {
                  goto LABEL_285;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v106) = 0;
              }
            }
            break;
          }
LABEL_392:
          *(_DWORD *)(a1 + 84) = v106;
          goto LABEL_356;
        case 0x14u:
          *(void *)(a1 + 184) |= 0x40000uLL;
          unint64_t v109 = *((void *)this + 1);
          unint64_t v110 = *((void *)this + 2);
          uint64_t v111 = *(void *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)this + 1) = v109 + 1;
              char v116 = *(unsigned char *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_396;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }
            while (!v14);
LABEL_292:
            LODWORD(v114) = 0;
            goto LABEL_396;
          }
          char v236 = 0;
          unsigned int v237 = 0;
          uint64_t v114 = 0;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)this + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v238 = v109 + 1;
              char v239 = *(unsigned char *)(v111 + v109);
              *((void *)this + 1) = v238;
              v114 |= (unint64_t)(v239 & 0x7F) << v236;
              if (v239 < 0)
              {
                v236 += 7;
                unint64_t v109 = v238;
                BOOL v14 = v237++ > 8;
                if (v14) {
                  goto LABEL_292;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v114) = 0;
              }
            }
            break;
          }
LABEL_396:
          *(_DWORD *)(a1 + 92) = v114;
          goto LABEL_356;
        case 0x15u:
          *(void *)(a1 + 184) |= 0x80000uLL;
          unint64_t v117 = *((void *)this + 1);
          unint64_t v118 = *((void *)this + 2);
          uint64_t v119 = *(void *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            char v120 = 0;
            unsigned int v121 = 0;
            uint64_t v122 = 0;
            do
            {
              unint64_t v123 = v117 + 1;
              *((void *)this + 1) = v117 + 1;
              char v124 = *(unsigned char *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0) {
                goto LABEL_400;
              }
              v120 += 7;
              unint64_t v117 = v123;
              BOOL v14 = v121++ > 8;
            }
            while (!v14);
LABEL_299:
            LODWORD(v122) = 0;
            goto LABEL_400;
          }
          char v240 = 0;
          unsigned int v241 = 0;
          uint64_t v122 = 0;
          if (v118 <= v117) {
            unint64_t v118 = *((void *)this + 1);
          }
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v242 = v117 + 1;
              char v243 = *(unsigned char *)(v119 + v117);
              *((void *)this + 1) = v242;
              v122 |= (unint64_t)(v243 & 0x7F) << v240;
              if (v243 < 0)
              {
                v240 += 7;
                unint64_t v117 = v242;
                BOOL v14 = v241++ > 8;
                if (v14) {
                  goto LABEL_299;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v122) = 0;
              }
            }
            break;
          }
LABEL_400:
          *(_DWORD *)(a1 + 96) = v122;
          goto LABEL_356;
        case 0x16u:
          *(void *)(a1 + 184) |= 0x8000uLL;
          unint64_t v125 = *((void *)this + 1);
          unint64_t v126 = *((void *)this + 2);
          uint64_t v127 = *(void *)this;
          if (v125 <= 0xFFFFFFFFFFFFFFF5 && v125 + 10 <= v126)
          {
            char v128 = 0;
            unsigned int v129 = 0;
            uint64_t v130 = 0;
            do
            {
              unint64_t v131 = v125 + 1;
              *((void *)this + 1) = v125 + 1;
              char v132 = *(unsigned char *)(v127 + v125);
              v130 |= (unint64_t)(v132 & 0x7F) << v128;
              if ((v132 & 0x80) == 0) {
                goto LABEL_404;
              }
              v128 += 7;
              unint64_t v125 = v131;
              BOOL v14 = v129++ > 8;
            }
            while (!v14);
LABEL_306:
            LODWORD(v130) = 0;
            goto LABEL_404;
          }
          char v244 = 0;
          unsigned int v245 = 0;
          uint64_t v130 = 0;
          if (v126 <= v125) {
            unint64_t v126 = *((void *)this + 1);
          }
          while (2)
          {
            if (v126 == v125)
            {
              LODWORD(v130) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v246 = v125 + 1;
              char v247 = *(unsigned char *)(v127 + v125);
              *((void *)this + 1) = v246;
              v130 |= (unint64_t)(v247 & 0x7F) << v244;
              if (v247 < 0)
              {
                v244 += 7;
                unint64_t v125 = v246;
                BOOL v14 = v245++ > 8;
                if (v14) {
                  goto LABEL_306;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v130) = 0;
              }
            }
            break;
          }
LABEL_404:
          *(_DWORD *)(a1 + 80) = v130;
          goto LABEL_356;
        case 0x17u:
          *(void *)(a1 + 184) |= 0x400uLL;
          unint64_t v133 = *((void *)this + 1);
          unint64_t v134 = *((void *)this + 2);
          uint64_t v135 = *(void *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)this + 1) = v133 + 1;
              char v140 = *(unsigned char *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_408;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }
            while (!v14);
LABEL_313:
            LODWORD(v138) = 0;
            goto LABEL_408;
          }
          char v248 = 0;
          unsigned int v249 = 0;
          uint64_t v138 = 0;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)this + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              LODWORD(v138) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v250 = v133 + 1;
              char v251 = *(unsigned char *)(v135 + v133);
              *((void *)this + 1) = v250;
              v138 |= (unint64_t)(v251 & 0x7F) << v248;
              if (v251 < 0)
              {
                v248 += 7;
                unint64_t v133 = v250;
                BOOL v14 = v249++ > 8;
                if (v14) {
                  goto LABEL_313;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v138) = 0;
              }
            }
            break;
          }
LABEL_408:
          *(_DWORD *)(a1 + 60) = v138;
          goto LABEL_356;
        case 0x18u:
          *(void *)(a1 + 184) |= 0x2000000000uLL;
          unint64_t v141 = *((void *)this + 1);
          unint64_t v142 = *((void *)this + 2);
          uint64_t v143 = *(void *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            char v144 = 0;
            unsigned int v145 = 0;
            uint64_t v146 = 0;
            do
            {
              unint64_t v147 = v141 + 1;
              *((void *)this + 1) = v141 + 1;
              char v148 = *(unsigned char *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0) {
                goto LABEL_412;
              }
              v144 += 7;
              unint64_t v141 = v147;
              BOOL v14 = v145++ > 8;
            }
            while (!v14);
LABEL_320:
            LODWORD(v146) = 0;
            goto LABEL_412;
          }
          char v252 = 0;
          unsigned int v253 = 0;
          uint64_t v146 = 0;
          if (v142 <= v141) {
            unint64_t v142 = *((void *)this + 1);
          }
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v254 = v141 + 1;
              char v255 = *(unsigned char *)(v143 + v141);
              *((void *)this + 1) = v254;
              v146 |= (unint64_t)(v255 & 0x7F) << v252;
              if (v255 < 0)
              {
                v252 += 7;
                unint64_t v141 = v254;
                BOOL v14 = v253++ > 8;
                if (v14) {
                  goto LABEL_320;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v146) = 0;
              }
            }
            break;
          }
LABEL_412:
          *(_DWORD *)(a1 + 168) = v146;
          goto LABEL_356;
        case 0x19u:
          *(void *)(a1 + 184) |= 0x1000uLL;
          unint64_t v149 = *((void *)this + 1);
          unint64_t v150 = *((void *)this + 2);
          uint64_t v151 = *(void *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)this + 1) = v149 + 1;
              char v156 = *(unsigned char *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_416;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v14 = v153++ > 8;
            }
            while (!v14);
LABEL_327:
            LODWORD(v154) = 0;
            goto LABEL_416;
          }
          char v256 = 0;
          unsigned int v257 = 0;
          uint64_t v154 = 0;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)this + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v258 = v149 + 1;
              char v259 = *(unsigned char *)(v151 + v149);
              *((void *)this + 1) = v258;
              v154 |= (unint64_t)(v259 & 0x7F) << v256;
              if (v259 < 0)
              {
                v256 += 7;
                unint64_t v149 = v258;
                BOOL v14 = v257++ > 8;
                if (v14) {
                  goto LABEL_327;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v154) = 0;
              }
            }
            break;
          }
LABEL_416:
          *(_DWORD *)(a1 + 68) = v154;
          goto LABEL_356;
        case 0x1Au:
          *(void *)(a1 + 184) |= 0x20000000uLL;
          unint64_t v157 = *((void *)this + 1);
          unint64_t v158 = *((void *)this + 2);
          uint64_t v159 = *(void *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            char v160 = 0;
            unsigned int v161 = 0;
            uint64_t v162 = 0;
            do
            {
              unint64_t v163 = v157 + 1;
              *((void *)this + 1) = v157 + 1;
              char v164 = *(unsigned char *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0) {
                goto LABEL_420;
              }
              v160 += 7;
              unint64_t v157 = v163;
              BOOL v14 = v161++ > 8;
            }
            while (!v14);
LABEL_334:
            LODWORD(v162) = 0;
            goto LABEL_420;
          }
          char v260 = 0;
          unsigned int v261 = 0;
          uint64_t v162 = 0;
          if (v158 <= v157) {
            unint64_t v158 = *((void *)this + 1);
          }
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v262 = v157 + 1;
              char v263 = *(unsigned char *)(v159 + v157);
              *((void *)this + 1) = v262;
              v162 |= (unint64_t)(v263 & 0x7F) << v260;
              if (v263 < 0)
              {
                v260 += 7;
                unint64_t v157 = v262;
                BOOL v14 = v261++ > 8;
                if (v14) {
                  goto LABEL_334;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v162) = 0;
              }
            }
            break;
          }
LABEL_420:
          *(_DWORD *)(a1 + 136) = v162;
          goto LABEL_356;
        case 0x1Bu:
          *(void *)(a1 + 184) |= 0x10uLL;
          unint64_t v165 = *((void *)this + 1);
          unint64_t v166 = *((void *)this + 2);
          uint64_t v167 = *(void *)this;
          if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
          {
            char v168 = 0;
            unsigned int v169 = 0;
            uint64_t v170 = 0;
            do
            {
              unint64_t v171 = v165 + 1;
              *((void *)this + 1) = v165 + 1;
              char v172 = *(unsigned char *)(v167 + v165);
              v170 |= (unint64_t)(v172 & 0x7F) << v168;
              if ((v172 & 0x80) == 0) {
                goto LABEL_424;
              }
              v168 += 7;
              unint64_t v165 = v171;
              BOOL v14 = v169++ > 8;
            }
            while (!v14);
LABEL_341:
            LODWORD(v170) = 0;
            goto LABEL_424;
          }
          char v264 = 0;
          unsigned int v265 = 0;
          uint64_t v170 = 0;
          if (v166 <= v165) {
            unint64_t v166 = *((void *)this + 1);
          }
          while (2)
          {
            if (v166 == v165)
            {
              LODWORD(v170) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v266 = v165 + 1;
              char v267 = *(unsigned char *)(v167 + v165);
              *((void *)this + 1) = v266;
              v170 |= (unint64_t)(v267 & 0x7F) << v264;
              if (v267 < 0)
              {
                v264 += 7;
                unint64_t v165 = v266;
                BOOL v14 = v265++ > 8;
                if (v14) {
                  goto LABEL_341;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v170) = 0;
              }
            }
            break;
          }
LABEL_424:
          *(_DWORD *)(a1 + 36) = v170;
          goto LABEL_356;
        case 0x1Cu:
          *(void *)(a1 + 184) |= 0x400000000uLL;
          unint64_t v173 = *((void *)this + 1);
          if (v173 > 0xFFFFFFFFFFFFFFFBLL || v173 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v173);
          goto LABEL_354;
        case 0x1Du:
          *(void *)(a1 + 184) |= 0x20000000000uLL;
          unint64_t v174 = *((void *)this + 1);
          if (v174 >= *((void *)this + 2))
          {
            BOOL v177 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v175 = v174 + 1;
            int v176 = *(unsigned __int8 *)(*(void *)this + v174);
            *((void *)this + 1) = v175;
            BOOL v177 = v176 != 0;
          }
          *(unsigned char *)(a1 + 178) = v177;
          goto LABEL_356;
        case 0x1Eu:
          *(void *)(a1 + 184) |= 0x800000000uLL;
          unint64_t v178 = *((void *)this + 1);
          if (v178 > 0xFFFFFFFFFFFFFFFBLL || v178 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)this + v178);
          goto LABEL_354;
        case 0x1Fu:
          *(void *)(a1 + 184) |= 0x40000000000uLL;
          unint64_t v179 = *((void *)this + 1);
          if (v179 >= *((void *)this + 2))
          {
            BOOL v182 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v180 = v179 + 1;
            int v181 = *(unsigned __int8 *)(*(void *)this + v179);
            *((void *)this + 1) = v180;
            BOOL v182 = v181 != 0;
          }
          *(unsigned char *)(a1 + 179) = v182;
          goto LABEL_356;
        case 0x20u:
          *(void *)(a1 + 184) |= 0x20uLL;
          unint64_t v183 = *((void *)this + 1);
          unint64_t v184 = *((void *)this + 2);
          uint64_t v185 = *(void *)this;
          if (v183 <= 0xFFFFFFFFFFFFFFF5 && v183 + 10 <= v184)
          {
            char v186 = 0;
            unsigned int v187 = 0;
            uint64_t v188 = 0;
            do
            {
              unint64_t v189 = v183 + 1;
              *((void *)this + 1) = v183 + 1;
              char v190 = *(unsigned char *)(v185 + v183);
              v188 |= (unint64_t)(v190 & 0x7F) << v186;
              if ((v190 & 0x80) == 0) {
                goto LABEL_428;
              }
              v186 += 7;
              unint64_t v183 = v189;
              BOOL v14 = v187++ > 8;
            }
            while (!v14);
LABEL_352:
            LODWORD(v188) = 0;
            goto LABEL_428;
          }
          char v268 = 0;
          unsigned int v269 = 0;
          uint64_t v188 = 0;
          if (v184 <= v183) {
            unint64_t v184 = *((void *)this + 1);
          }
          break;
        case 0x21u:
          *(void *)(a1 + 184) |= 0x80uLL;
          unint64_t v191 = *((void *)this + 1);
          if (v191 > 0xFFFFFFFFFFFFFFFBLL || v191 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v191);
          goto LABEL_354;
        case 0x22u:
          *(void *)(a1 + 184) |= 0x4000000uLL;
          unint64_t v192 = *((void *)this + 1);
          if (v192 > 0xFFFFFFFFFFFFFFFBLL || v192 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v192);
          goto LABEL_354;
        case 0x23u:
          *(void *)(a1 + 184) |= 0x8000000uLL;
          unint64_t v193 = *((void *)this + 1);
          if (v193 > 0xFFFFFFFFFFFFFFFBLL || v193 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v193);
          goto LABEL_354;
        case 0x24u:
          *(void *)(a1 + 184) |= 0x10000000uLL;
          unint64_t v194 = *((void *)this + 1);
          if (v194 > 0xFFFFFFFFFFFFFFFBLL || v194 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v194);
          goto LABEL_354;
        case 0x25u:
          *(void *)(a1 + 184) |= 0x40uLL;
          unint64_t v195 = *((void *)this + 1);
          if (v195 > 0xFFFFFFFFFFFFFFFBLL || v195 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v195);
          goto LABEL_354;
        case 0x26u:
          *(void *)(a1 + 184) |= 0x100uLL;
          unint64_t v196 = *((void *)this + 1);
          if (v196 > 0xFFFFFFFFFFFFFFFBLL || v196 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v196);
          goto LABEL_354;
        case 0x27u:
          *(void *)(a1 + 184) |= 0x200uLL;
          unint64_t v197 = *((void *)this + 1);
          if (v197 > 0xFFFFFFFFFFFFFFFBLL || v197 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v197);
          goto LABEL_354;
        case 0x28u:
          *(void *)(a1 + 184) |= 0x400000uLL;
          unint64_t v198 = *((void *)this + 1);
          if (v198 > 0xFFFFFFFFFFFFFFFBLL || v198 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v198);
          goto LABEL_354;
        case 0x29u:
          *(void *)(a1 + 184) |= 0x800000uLL;
          unint64_t v199 = *((void *)this + 1);
          if (v199 > 0xFFFFFFFFFFFFFFFBLL || v199 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v199);
          goto LABEL_354;
        case 0x2Au:
          *(void *)(a1 + 184) |= 0x1000000uLL;
          unint64_t v200 = *((void *)this + 1);
          if (v200 > 0xFFFFFFFFFFFFFFFBLL || v200 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v200);
          goto LABEL_354;
        case 0x2Bu:
          *(void *)(a1 + 184) |= 0x40000000uLL;
          unint64_t v201 = *((void *)this + 1);
          if (v201 > 0xFFFFFFFFFFFFFFFBLL || v201 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v201);
          goto LABEL_354;
        case 0x2Cu:
          *(void *)(a1 + 184) |= 0x80000000uLL;
          unint64_t v202 = *((void *)this + 1);
          if (v202 > 0xFFFFFFFFFFFFFFFBLL || v202 + 4 > *((void *)this + 2)) {
            goto LABEL_221;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v202);
          goto LABEL_354;
        case 0x2Du:
          *(void *)(a1 + 184) |= 0x100000000uLL;
          unint64_t v203 = *((void *)this + 1);
          if (v203 <= 0xFFFFFFFFFFFFFFFBLL && v203 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v203);
LABEL_354:
            uint64_t v55 = *((void *)this + 1) + 4;
LABEL_355:
            *((void *)this + 1) = v55;
          }
          else
          {
LABEL_221:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_356;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_356;
      }
      while (1)
      {
        if (v184 == v183)
        {
          LODWORD(v188) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_428;
        }
        unint64_t v270 = v183 + 1;
        char v271 = *(unsigned char *)(v185 + v183);
        *((void *)this + 1) = v270;
        v188 |= (unint64_t)(v271 & 0x7F) << v268;
        if ((v271 & 0x80) == 0) {
          break;
        }
        v268 += 7;
        unint64_t v183 = v270;
        BOOL v14 = v269++ > 8;
        if (v14) {
          goto LABEL_352;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v188) = 0;
      }
LABEL_428:
      *(_DWORD *)(a1 + 40) = v188;
LABEL_356:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903EA510(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 184);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    uint64_t v4 = *(void *)(v3 + 184);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_49;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x200000) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 164));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x800) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x4000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x2000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x100000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x10000) == 0)
  {
LABEL_20:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x40000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x80000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x8000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400) == 0) {
      goto LABEL_24;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x400) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x1000) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x10) == 0) {
      goto LABEL_28;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x10) == 0)
  {
LABEL_28:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_30:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_32:
    if ((v4 & 0x20) == 0) {
      goto LABEL_33;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x20) == 0)
  {
LABEL_33:
    if ((v4 & 0x80) == 0) {
      goto LABEL_34;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x80) == 0)
  {
LABEL_34:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_36:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_37:
    if ((v4 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x40) == 0)
  {
LABEL_38:
    if ((v4 & 0x100) == 0) {
      goto LABEL_39;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x100) == 0)
  {
LABEL_39:
    if ((v4 & 0x200) == 0) {
      goto LABEL_40;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x200) == 0)
  {
LABEL_40:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x400000) == 0)
  {
LABEL_41:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x800000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_45;
    }
LABEL_90:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144));
    if ((*(void *)(v3 + 184) & 0x100000000) == 0) {
      return result;
    }
    goto LABEL_91;
  }
LABEL_89:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140));
  uint64_t v4 = *(void *)(v3 + 184);
  if ((v4 & 0x80000000) != 0) {
    goto LABEL_90;
  }
LABEL_45:
  if ((v4 & 0x100000000) == 0) {
    return result;
  }
LABEL_91:
  float v5 = *(float *)(v3 + 148);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903EAA34(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC3068;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1903EAA5C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903EAA94(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "asymmetryProbability", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "cycleTime", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "distance", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "doubleSupportPercentage", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "stepLength", *(float *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 40) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "walkingSpeed", *(float *)(a1 + 36));
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903EABB8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 5u:
          *(unsigned char *)(a1 + 40) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 6u:
          *(unsigned char *)(a1 + 40) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 7u:
          *(unsigned char *)(a1 + 40) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_46:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_47:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903EAEEC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
    if ((*(unsigned char *)(v3 + 40) & 2) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_15:
  float v5 = *(float *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

void *sub_1903EAFE8(void *result)
{
  *uint64_t result = &unk_1EDFCFBF0;
  result[1] = 0;
  return result;
}

void sub_1903EB008(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCFBF0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903EB088(PB::Base *a1)
{
  sub_1903EB008(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903EB0C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903EB13C(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903EB338(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_1903EB354(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCBEE8;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_1903EB37C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903EB3B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "confidence");
    int v5 = *(_DWORD *)(a1 + 116);
    if ((v5 & 0x40) == 0)
    {
LABEL_3:
      if ((v5 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_34;
    }
  }
  else if ((v5 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "drivingArmLikelihoodSum", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "drivingStowedLikelihoodSum", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "estExitTime", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "exitState");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x100000) == 0)
  {
LABEL_7:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "isStanding");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200000) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "isVehicleConnected");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "mountedConfidence");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "mountedState");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "rawConfidence");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "rawType");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "source");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "ssLikelihoodSum", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_16:
    if ((v5 & 4) == 0) {
      goto LABEL_17;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "tilt", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "type");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "typeYouth");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "vehicularBasebandHint");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "vehicularBtHint");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x40000) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "vehicularConfidence");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "vehicularGpsHint");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "vehicularMotionHint");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_25:
    if ((v5 & 8) == 0) {
      goto LABEL_26;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "vehicularWifiHint");
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_26:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "workoutDetectionTime", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 116);
  if ((v5 & 0x80000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10) == 0) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
LABEL_57:
  PB::TextFormatter::format(this, "workoutDetectionType");
  if ((*(_DWORD *)(a1 + 116) & 0x10) != 0) {
LABEL_28:
  }
    PB::TextFormatter::format(this, "workoutEscalationTime");
LABEL_29:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903EB758(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 116) |= 0x10000u;
          unint64_t v20 = *((void *)this + 1);
          unint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v21)
          {
            char v154 = 0;
            unsigned int v155 = 0;
            uint64_t v25 = 0;
            if (v21 <= v20) {
              unint64_t v21 = *((void *)this + 1);
            }
            do
            {
              if (v21 == v20)
              {
                LODWORD(v25) = 0;
                *((unsigned char *)this + 24) = 1;
                goto LABEL_251;
              }
              unint64_t v156 = v20 + 1;
              char v157 = *(unsigned char *)(v22 + v20);
              *((void *)this + 1) = v156;
              v25 |= (unint64_t)(v157 & 0x7F) << v154;
              if ((v157 & 0x80) == 0)
              {
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_251;
              }
              v154 += 7;
              unint64_t v20 = v156;
              BOOL v14 = v155++ > 8;
            }
            while (!v14);
LABEL_153:
            LODWORD(v25) = 0;
          }
          else
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            while (1)
            {
              unint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                break;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
              if (v14) {
                goto LABEL_153;
              }
            }
          }
LABEL_251:
          *(_DWORD *)(a1 + 92) = v25;
          goto LABEL_296;
        case 2u:
          *(_DWORD *)(a1 + 116) |= 0x200u;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_255;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_160:
            LODWORD(v34) = 0;
            goto LABEL_255;
          }
          char v158 = 0;
          unsigned int v159 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v160 = v29 + 1;
              char v161 = *(unsigned char *)(v31 + v29);
              *((void *)this + 1) = v160;
              v34 |= (unint64_t)(v161 & 0x7F) << v158;
              if (v161 < 0)
              {
                v158 += 7;
                unint64_t v29 = v160;
                BOOL v14 = v159++ > 8;
                if (v14) {
                  goto LABEL_160;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_255:
          *(_DWORD *)(a1 + 64) = v34;
          goto LABEL_296;
        case 3u:
          *(_DWORD *)(a1 + 116) |= 0x20u;
          unint64_t v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          uint64_t v39 = *(void *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_259;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_167:
            LODWORD(v42) = 0;
            goto LABEL_259;
          }
          char v162 = 0;
          unsigned int v163 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)this + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v164 = v37 + 1;
              char v165 = *(unsigned char *)(v39 + v37);
              *((void *)this + 1) = v164;
              v42 |= (unint64_t)(v165 & 0x7F) << v162;
              if (v165 < 0)
              {
                v162 += 7;
                unint64_t v37 = v164;
                BOOL v14 = v163++ > 8;
                if (v14) {
                  goto LABEL_167;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v42) = 0;
              }
            }
            break;
          }
LABEL_259:
          *(_DWORD *)(a1 + 48) = v42;
          goto LABEL_296;
        case 4u:
          *(_DWORD *)(a1 + 116) |= 0x400u;
          unint64_t v45 = *((void *)this + 1);
          unint64_t v46 = *((void *)this + 2);
          uint64_t v47 = *(void *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_263;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v14 = v49++ > 8;
            }
            while (!v14);
LABEL_174:
            LODWORD(v50) = 0;
            goto LABEL_263;
          }
          char v166 = 0;
          unsigned int v167 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)this + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v168 = v45 + 1;
              char v169 = *(unsigned char *)(v47 + v45);
              *((void *)this + 1) = v168;
              v50 |= (unint64_t)(v169 & 0x7F) << v166;
              if (v169 < 0)
              {
                v166 += 7;
                unint64_t v45 = v168;
                BOOL v14 = v167++ > 8;
                if (v14) {
                  goto LABEL_174;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v50) = 0;
              }
            }
            break;
          }
LABEL_263:
          *(_DWORD *)(a1 + 68) = v50;
          goto LABEL_296;
        case 5u:
          *(_DWORD *)(a1 + 116) |= 0x100000u;
          unint64_t v53 = *((void *)this + 1);
          if (v53 >= *((void *)this + 2))
          {
            BOOL v56 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v54 = v53 + 1;
            int v55 = *(unsigned __int8 *)(*(void *)this + v53);
            *((void *)this + 1) = v54;
            BOOL v56 = v55 != 0;
          }
          *(unsigned char *)(a1 + 108) = v56;
          goto LABEL_296;
        case 6u:
          *(_DWORD *)(a1 + 116) |= 0x8000u;
          unint64_t v57 = *((void *)this + 1);
          if (v57 > 0xFFFFFFFFFFFFFFFBLL || v57 + 4 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v57);
          goto LABEL_115;
        case 7u:
          *(_DWORD *)(a1 + 116) |= 4u;
          unint64_t v58 = *((void *)this + 1);
          if (v58 > 0xFFFFFFFFFFFFFFF7 || v58 + 8 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v58);
          goto LABEL_246;
        case 8u:
          *(_DWORD *)(a1 + 116) |= 0x200000u;
          unint64_t v59 = *((void *)this + 1);
          if (v59 >= *((void *)this + 2))
          {
            BOOL v62 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v60 = v59 + 1;
            int v61 = *(unsigned __int8 *)(*(void *)this + v59);
            *((void *)this + 1) = v60;
            BOOL v62 = v61 != 0;
          }
          *(unsigned char *)(a1 + 109) = v62;
          goto LABEL_296;
        case 9u:
          *(_DWORD *)(a1 + 116) |= 0x100u;
          unint64_t v63 = *((void *)this + 1);
          unint64_t v64 = *((void *)this + 2);
          uint64_t v65 = *(void *)this;
          if (v63 <= 0xFFFFFFFFFFFFFFF5 && v63 + 10 <= v64)
          {
            char v66 = 0;
            unsigned int v67 = 0;
            uint64_t v68 = 0;
            do
            {
              unint64_t v69 = v63 + 1;
              *((void *)this + 1) = v63 + 1;
              char v70 = *(unsigned char *)(v65 + v63);
              v68 |= (unint64_t)(v70 & 0x7F) << v66;
              if ((v70 & 0x80) == 0) {
                goto LABEL_267;
              }
              v66 += 7;
              unint64_t v63 = v69;
              BOOL v14 = v67++ > 8;
            }
            while (!v14);
LABEL_185:
            LODWORD(v68) = 0;
            goto LABEL_267;
          }
          char v170 = 0;
          unsigned int v171 = 0;
          uint64_t v68 = 0;
          if (v64 <= v63) {
            unint64_t v64 = *((void *)this + 1);
          }
          while (2)
          {
            if (v64 == v63)
            {
              LODWORD(v68) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v172 = v63 + 1;
              char v173 = *(unsigned char *)(v65 + v63);
              *((void *)this + 1) = v172;
              v68 |= (unint64_t)(v173 & 0x7F) << v170;
              if (v173 < 0)
              {
                v170 += 7;
                unint64_t v63 = v172;
                BOOL v14 = v171++ > 8;
                if (v14) {
                  goto LABEL_185;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v68) = 0;
              }
            }
            break;
          }
LABEL_267:
          *(_DWORD *)(a1 + 60) = v68;
          goto LABEL_296;
        case 0xAu:
          *(_DWORD *)(a1 + 116) |= 1u;
          unint64_t v71 = *((void *)this + 1);
          if (v71 > 0xFFFFFFFFFFFFFFF7 || v71 + 8 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v71);
          goto LABEL_246;
        case 0xBu:
          *(_DWORD *)(a1 + 116) |= 2u;
          unint64_t v72 = *((void *)this + 1);
          if (v72 > 0xFFFFFFFFFFFFFFF7 || v72 + 8 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v72);
          goto LABEL_246;
        case 0xCu:
          *(_DWORD *)(a1 + 116) |= 0x1000u;
          unint64_t v73 = *((void *)this + 1);
          unint64_t v74 = *((void *)this + 2);
          uint64_t v75 = *(void *)this;
          if (v73 <= 0xFFFFFFFFFFFFFFF5 && v73 + 10 <= v74)
          {
            char v76 = 0;
            unsigned int v77 = 0;
            uint64_t v78 = 0;
            do
            {
              unint64_t v79 = v73 + 1;
              *((void *)this + 1) = v73 + 1;
              char v80 = *(unsigned char *)(v75 + v73);
              v78 |= (unint64_t)(v80 & 0x7F) << v76;
              if ((v80 & 0x80) == 0) {
                goto LABEL_271;
              }
              v76 += 7;
              unint64_t v73 = v79;
              BOOL v14 = v77++ > 8;
            }
            while (!v14);
LABEL_192:
            LODWORD(v78) = 0;
            goto LABEL_271;
          }
          char v174 = 0;
          unsigned int v175 = 0;
          uint64_t v78 = 0;
          if (v74 <= v73) {
            unint64_t v74 = *((void *)this + 1);
          }
          while (2)
          {
            if (v74 == v73)
            {
              LODWORD(v78) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v176 = v73 + 1;
              char v177 = *(unsigned char *)(v75 + v73);
              *((void *)this + 1) = v176;
              v78 |= (unint64_t)(v177 & 0x7F) << v174;
              if (v177 < 0)
              {
                v174 += 7;
                unint64_t v73 = v176;
                BOOL v14 = v175++ > 8;
                if (v14) {
                  goto LABEL_192;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v78) = 0;
              }
            }
            break;
          }
LABEL_271:
          *(_DWORD *)(a1 + 76) = v78;
          goto LABEL_296;
        case 0xDu:
          *(_DWORD *)(a1 + 116) |= 0x800u;
          unint64_t v81 = *((void *)this + 1);
          unint64_t v82 = *((void *)this + 2);
          uint64_t v83 = *(void *)this;
          if (v81 <= 0xFFFFFFFFFFFFFFF5 && v81 + 10 <= v82)
          {
            char v84 = 0;
            unsigned int v85 = 0;
            uint64_t v86 = 0;
            do
            {
              unint64_t v87 = v81 + 1;
              *((void *)this + 1) = v81 + 1;
              char v88 = *(unsigned char *)(v83 + v81);
              v86 |= (unint64_t)(v88 & 0x7F) << v84;
              if ((v88 & 0x80) == 0) {
                goto LABEL_275;
              }
              v84 += 7;
              unint64_t v81 = v87;
              BOOL v14 = v85++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v86) = 0;
            goto LABEL_275;
          }
          char v178 = 0;
          unsigned int v179 = 0;
          uint64_t v86 = 0;
          if (v82 <= v81) {
            unint64_t v82 = *((void *)this + 1);
          }
          while (2)
          {
            if (v82 == v81)
            {
              LODWORD(v86) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v180 = v81 + 1;
              char v181 = *(unsigned char *)(v83 + v81);
              *((void *)this + 1) = v180;
              v86 |= (unint64_t)(v181 & 0x7F) << v178;
              if (v181 < 0)
              {
                v178 += 7;
                unint64_t v81 = v180;
                BOOL v14 = v179++ > 8;
                if (v14) {
                  goto LABEL_199;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v86) = 0;
              }
            }
            break;
          }
LABEL_275:
          *(_DWORD *)(a1 + 72) = v86;
          goto LABEL_296;
        case 0xEu:
          *(_DWORD *)(a1 + 116) |= 0x2000000u;
          unint64_t v89 = *((void *)this + 1);
          if (v89 >= *((void *)this + 2))
          {
            BOOL v92 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v90 = v89 + 1;
            int v91 = *(unsigned __int8 *)(*(void *)this + v89);
            *((void *)this + 1) = v90;
            BOOL v92 = v91 != 0;
          }
          *(unsigned char *)(a1 + 113) = v92;
          goto LABEL_296;
        case 0xFu:
          *(_DWORD *)(a1 + 116) |= 0x1000000u;
          unint64_t v93 = *((void *)this + 1);
          if (v93 >= *((void *)this + 2))
          {
            BOOL v96 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v94 = v93 + 1;
            int v95 = *(unsigned __int8 *)(*(void *)this + v93);
            *((void *)this + 1) = v94;
            BOOL v96 = v95 != 0;
          }
          *(unsigned char *)(a1 + 112) = v96;
          goto LABEL_296;
        case 0x10u:
          *(_DWORD *)(a1 + 116) |= 0x400000u;
          unint64_t v97 = *((void *)this + 1);
          if (v97 >= *((void *)this + 2))
          {
            BOOL v100 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v98 = v97 + 1;
            int v99 = *(unsigned __int8 *)(*(void *)this + v97);
            *((void *)this + 1) = v98;
            BOOL v100 = v99 != 0;
          }
          *(unsigned char *)(a1 + 110) = v100;
          goto LABEL_296;
        case 0x11u:
          *(_DWORD *)(a1 + 116) |= 0x4000000u;
          unint64_t v101 = *((void *)this + 1);
          if (v101 >= *((void *)this + 2))
          {
            BOOL v104 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v102 = v101 + 1;
            int v103 = *(unsigned __int8 *)(*(void *)this + v101);
            *((void *)this + 1) = v102;
            BOOL v104 = v103 != 0;
          }
          *(unsigned char *)(a1 + 114) = v104;
          goto LABEL_296;
        case 0x12u:
          *(_DWORD *)(a1 + 116) |= 0x800000u;
          unint64_t v105 = *((void *)this + 1);
          if (v105 >= *((void *)this + 2))
          {
            BOOL v108 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v106 = v105 + 1;
            int v107 = *(unsigned __int8 *)(*(void *)this + v105);
            *((void *)this + 1) = v106;
            BOOL v108 = v107 != 0;
          }
          *(unsigned char *)(a1 + 111) = v108;
          goto LABEL_296;
        case 0x13u:
          *(_DWORD *)(a1 + 116) |= 0x40000u;
          unint64_t v109 = *((void *)this + 1);
          unint64_t v110 = *((void *)this + 2);
          uint64_t v111 = *(void *)this;
          if (v109 <= 0xFFFFFFFFFFFFFFF5 && v109 + 10 <= v110)
          {
            char v112 = 0;
            unsigned int v113 = 0;
            uint64_t v114 = 0;
            do
            {
              unint64_t v115 = v109 + 1;
              *((void *)this + 1) = v109 + 1;
              char v116 = *(unsigned char *)(v111 + v109);
              v114 |= (unint64_t)(v116 & 0x7F) << v112;
              if ((v116 & 0x80) == 0) {
                goto LABEL_279;
              }
              v112 += 7;
              unint64_t v109 = v115;
              BOOL v14 = v113++ > 8;
            }
            while (!v14);
LABEL_216:
            LODWORD(v114) = 0;
            goto LABEL_279;
          }
          char v182 = 0;
          unsigned int v183 = 0;
          uint64_t v114 = 0;
          if (v110 <= v109) {
            unint64_t v110 = *((void *)this + 1);
          }
          while (2)
          {
            if (v110 == v109)
            {
              LODWORD(v114) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v184 = v109 + 1;
              char v185 = *(unsigned char *)(v111 + v109);
              *((void *)this + 1) = v184;
              v114 |= (unint64_t)(v185 & 0x7F) << v182;
              if (v185 < 0)
              {
                v182 += 7;
                unint64_t v109 = v184;
                BOOL v14 = v183++ > 8;
                if (v14) {
                  goto LABEL_216;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v114) = 0;
              }
            }
            break;
          }
LABEL_279:
          *(_DWORD *)(a1 + 100) = v114;
          goto LABEL_296;
        case 0x14u:
          *(_DWORD *)(a1 + 116) |= 0x80u;
          unint64_t v117 = *((void *)this + 1);
          if (v117 > 0xFFFFFFFFFFFFFFFBLL || v117 + 4 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v117);
          goto LABEL_115;
        case 0x15u:
          *(_DWORD *)(a1 + 116) |= 0x40u;
          unint64_t v118 = *((void *)this + 1);
          if (v118 > 0xFFFFFFFFFFFFFFFBLL || v118 + 4 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v118);
          goto LABEL_115;
        case 0x16u:
          *(_DWORD *)(a1 + 116) |= 0x4000u;
          unint64_t v119 = *((void *)this + 1);
          if (v119 > 0xFFFFFFFFFFFFFFFBLL || v119 + 4 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v119);
LABEL_115:
          uint64_t v120 = *((void *)this + 1) + 4;
          goto LABEL_247;
        case 0x17u:
          *(_DWORD *)(a1 + 116) |= 0x80000u;
          unint64_t v121 = *((void *)this + 1);
          unint64_t v122 = *((void *)this + 2);
          uint64_t v123 = *(void *)this;
          if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
          {
            char v124 = 0;
            unsigned int v125 = 0;
            uint64_t v126 = 0;
            do
            {
              unint64_t v127 = v121 + 1;
              *((void *)this + 1) = v121 + 1;
              char v128 = *(unsigned char *)(v123 + v121);
              v126 |= (unint64_t)(v128 & 0x7F) << v124;
              if ((v128 & 0x80) == 0) {
                goto LABEL_283;
              }
              v124 += 7;
              unint64_t v121 = v127;
              BOOL v14 = v125++ > 8;
            }
            while (!v14);
LABEL_223:
            LODWORD(v126) = 0;
            goto LABEL_283;
          }
          char v186 = 0;
          unsigned int v187 = 0;
          uint64_t v126 = 0;
          if (v122 <= v121) {
            unint64_t v122 = *((void *)this + 1);
          }
          while (2)
          {
            if (v122 == v121)
            {
              LODWORD(v126) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v188 = v121 + 1;
              char v189 = *(unsigned char *)(v123 + v121);
              *((void *)this + 1) = v188;
              v126 |= (unint64_t)(v189 & 0x7F) << v186;
              if (v189 < 0)
              {
                v186 += 7;
                unint64_t v121 = v188;
                BOOL v14 = v187++ > 8;
                if (v14) {
                  goto LABEL_223;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v126) = 0;
              }
            }
            break;
          }
LABEL_283:
          *(_DWORD *)(a1 + 104) = v126;
          goto LABEL_296;
        case 0x18u:
          *(_DWORD *)(a1 + 116) |= 8u;
          unint64_t v129 = *((void *)this + 1);
          if (v129 <= 0xFFFFFFFFFFFFFFF7 && v129 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 32) = *(void *)(*(void *)this + v129);
LABEL_246:
            uint64_t v120 = *((void *)this + 1) + 8;
LABEL_247:
            *((void *)this + 1) = v120;
          }
          else
          {
LABEL_125:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_296;
        case 0x19u:
          *(_DWORD *)(a1 + 116) |= 0x10u;
          unint64_t v130 = *((void *)this + 1);
          unint64_t v131 = *((void *)this + 2);
          uint64_t v132 = *(void *)this;
          if (v130 <= 0xFFFFFFFFFFFFFFF5 && v130 + 10 <= v131)
          {
            char v133 = 0;
            unsigned int v134 = 0;
            uint64_t v135 = 0;
            do
            {
              unint64_t v136 = v130 + 1;
              *((void *)this + 1) = v130 + 1;
              char v137 = *(unsigned char *)(v132 + v130);
              v135 |= (unint64_t)(v137 & 0x7F) << v133;
              if ((v137 & 0x80) == 0) {
                goto LABEL_287;
              }
              v133 += 7;
              unint64_t v130 = v136;
              BOOL v14 = v134++ > 8;
            }
            while (!v14);
LABEL_230:
            uint64_t v135 = 0;
            goto LABEL_287;
          }
          char v190 = 0;
          unsigned int v191 = 0;
          uint64_t v135 = 0;
          if (v131 <= v130) {
            unint64_t v131 = *((void *)this + 1);
          }
          while (2)
          {
            if (v131 == v130)
            {
              uint64_t v135 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v192 = v130 + 1;
              char v193 = *(unsigned char *)(v132 + v130);
              *((void *)this + 1) = v192;
              v135 |= (unint64_t)(v193 & 0x7F) << v190;
              if (v193 < 0)
              {
                v190 += 7;
                unint64_t v130 = v192;
                BOOL v14 = v191++ > 8;
                if (v14) {
                  goto LABEL_230;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v135 = 0;
              }
            }
            break;
          }
LABEL_287:
          *(void *)(a1 + 40) = v135;
          goto LABEL_296;
        case 0x1Au:
          *(_DWORD *)(a1 + 116) |= 0x20000u;
          unint64_t v138 = *((void *)this + 1);
          unint64_t v139 = *((void *)this + 2);
          uint64_t v140 = *(void *)this;
          if (v138 <= 0xFFFFFFFFFFFFFFF5 && v138 + 10 <= v139)
          {
            char v141 = 0;
            unsigned int v142 = 0;
            uint64_t v143 = 0;
            do
            {
              unint64_t v144 = v138 + 1;
              *((void *)this + 1) = v138 + 1;
              char v145 = *(unsigned char *)(v140 + v138);
              v143 |= (unint64_t)(v145 & 0x7F) << v141;
              if ((v145 & 0x80) == 0) {
                goto LABEL_291;
              }
              v141 += 7;
              unint64_t v138 = v144;
              BOOL v14 = v142++ > 8;
            }
            while (!v14);
LABEL_237:
            LODWORD(v143) = 0;
            goto LABEL_291;
          }
          char v194 = 0;
          unsigned int v195 = 0;
          uint64_t v143 = 0;
          if (v139 <= v138) {
            unint64_t v139 = *((void *)this + 1);
          }
          while (2)
          {
            if (v139 == v138)
            {
              LODWORD(v143) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v196 = v138 + 1;
              char v197 = *(unsigned char *)(v140 + v138);
              *((void *)this + 1) = v196;
              v143 |= (unint64_t)(v197 & 0x7F) << v194;
              if (v197 < 0)
              {
                v194 += 7;
                unint64_t v138 = v196;
                BOOL v14 = v195++ > 8;
                if (v14) {
                  goto LABEL_237;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v143) = 0;
              }
            }
            break;
          }
LABEL_291:
          *(_DWORD *)(a1 + 96) = v143;
          goto LABEL_296;
        case 0x1Bu:
          *(_DWORD *)(a1 + 116) |= 0x2000u;
          unint64_t v146 = *((void *)this + 1);
          unint64_t v147 = *((void *)this + 2);
          uint64_t v148 = *(void *)this;
          if (v146 <= 0xFFFFFFFFFFFFFFF5 && v146 + 10 <= v147)
          {
            char v149 = 0;
            unsigned int v150 = 0;
            uint64_t v151 = 0;
            do
            {
              unint64_t v152 = v146 + 1;
              *((void *)this + 1) = v146 + 1;
              char v153 = *(unsigned char *)(v148 + v146);
              v151 |= (unint64_t)(v153 & 0x7F) << v149;
              if ((v153 & 0x80) == 0) {
                goto LABEL_295;
              }
              v149 += 7;
              unint64_t v146 = v152;
              BOOL v14 = v150++ > 8;
            }
            while (!v14);
LABEL_244:
            LODWORD(v151) = 0;
            goto LABEL_295;
          }
          char v198 = 0;
          unsigned int v199 = 0;
          uint64_t v151 = 0;
          if (v147 <= v146) {
            unint64_t v147 = *((void *)this + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_296;
      }
      while (1)
      {
        if (v147 == v146)
        {
          LODWORD(v151) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_295;
        }
        unint64_t v200 = v146 + 1;
        char v201 = *(unsigned char *)(v148 + v146);
        *((void *)this + 1) = v200;
        v151 |= (unint64_t)(v201 & 0x7F) << v198;
        if ((v201 & 0x80) == 0) {
          break;
        }
        v198 += 7;
        unint64_t v146 = v200;
        BOOL v14 = v199++ > 8;
        if (v14) {
          goto LABEL_244;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v151) = 0;
      }
LABEL_295:
      *(_DWORD *)(a1 + 80) = v151;
LABEL_296:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903EC7E0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 116);
  if ((v4 & 0x10000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    int v4 = *(_DWORD *)(v3 + 116);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_31;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x800) == 0) {
      goto LABEL_14;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x400000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x800000) == 0)
  {
LABEL_19:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40000) == 0)
  {
LABEL_20:
    if ((v4 & 0x80) == 0) {
      goto LABEL_21;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80) == 0)
  {
LABEL_21:
    if ((v4 & 0x40) == 0) {
      goto LABEL_22;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x4000) == 0)
  {
LABEL_23:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x80000) == 0)
  {
LABEL_24:
    if ((v4 & 8) == 0) {
      goto LABEL_25;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_25:
    if ((v4 & 0x10) == 0) {
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_26:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_27;
    }
LABEL_54:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_DWORD *)(v3 + 116) & 0x2000) == 0) {
      return result;
    }
    goto LABEL_55;
  }
LABEL_53:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 116);
  if ((v4 & 0x20000) != 0) {
    goto LABEL_54;
  }
LABEL_27:
  if ((v4 & 0x2000) == 0) {
    return result;
  }
LABEL_55:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903ECB0C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCDB90;
  *(_DWORD *)(result + 36) = 0;
  return result;
}

void sub_1903ECB34(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903ECB6C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 36);
  if (v5)
  {
    PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 36);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "outdoorCyclingStateMachineFrom");
  __int16 v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "outdoorCyclingStateMachineTo");
  __int16 v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "workoutLocationType");
  __int16 v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "workoutPause");
  __int16 v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "workoutResume");
  __int16 v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "workoutStart");
  __int16 v5 = *(_WORD *)(a1 + 36);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(this, "workoutStop");
  if ((*(_WORD *)(a1 + 36) & 0x10) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "workoutType");
LABEL_11:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903ECCD0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 36) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_120;
            case 2u:
              *(_WORD *)(a1 + 36) |= 0x10u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_104;
                  }
                  unint64_t v55 = v20++;
                  char v56 = *(unsigned char *)(v21 + v55);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
LABEL_103:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_104;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
                goto LABEL_103;
              }
              char v22 = 0;
              unsigned int v23 = 0;
              uint64_t v24 = 0;
              do
              {
                unint64_t v2 = v20 + 1;
                *((void *)this + 1) = v20 + 1;
                char v25 = *(unsigned char *)(v21 + v20);
                v24 |= (unint64_t)(v25 & 0x7F) << v22;
                if ((v25 & 0x80) == 0) {
                  goto LABEL_104;
                }
                v22 += 7;
                unint64_t v20 = v2;
                BOOL v14 = v23++ > 8;
              }
              while (!v14);
              LODWORD(v24) = 0;
LABEL_104:
              *(_DWORD *)(a1 + 28) = v24;
              goto LABEL_120;
            case 3u:
              *(_WORD *)(a1 + 36) |= 8u;
              unint64_t v26 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v27 = *(void *)this;
              if (v26 > 0xFFFFFFFFFFFFFFF5 || v26 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v30 = 0;
                if (v2 <= v26) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v26)
                  {
                    LODWORD(v30) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  unint64_t v59 = v26++;
                  char v60 = *(unsigned char *)(v27 + v59);
                  *((void *)this + 1) = v26;
                  v30 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v30) = 0;
LABEL_108:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v30) = 0;
                }
                goto LABEL_108;
              }
              char v28 = 0;
              unsigned int v29 = 0;
              uint64_t v30 = 0;
              do
              {
                unint64_t v2 = v26 + 1;
                *((void *)this + 1) = v26 + 1;
                char v31 = *(unsigned char *)(v27 + v26);
                v30 |= (unint64_t)(v31 & 0x7F) << v28;
                if ((v31 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v28 += 7;
                unint64_t v26 = v2;
                BOOL v14 = v29++ > 8;
              }
              while (!v14);
              LODWORD(v30) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 24) = v30;
              goto LABEL_120;
            case 0xAu:
              *(_WORD *)(a1 + 36) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 34) = v34;
              goto LABEL_120;
            case 0xBu:
              *(_WORD *)(a1 + 36) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *(unsigned char *)(a1 + 35) = v36;
              goto LABEL_120;
            case 0xCu:
              *(_WORD *)(a1 + 36) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v38 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v37 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v38 = v37 != 0;
              }
              *(unsigned char *)(a1 + 32) = v38;
              goto LABEL_120;
            case 0xDu:
              *(_WORD *)(a1 + 36) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *(unsigned char *)(a1 + 33) = v40;
              goto LABEL_120;
            case 0x15u:
              *(_WORD *)(a1 + 36) |= 2u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  unint64_t v63 = v41++;
                  char v64 = *(unsigned char *)(v42 + v63);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_113:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_113;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 16) = v45;
              goto LABEL_120;
            case 0x16u:
              *(_WORD *)(a1 + 36) |= 4u;
              unint64_t v47 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v48 = *(void *)this;
              if (v47 > 0xFFFFFFFFFFFFFFF5 || v47 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v51 = 0;
                if (v2 <= v47) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v47)
                  {
                    LODWORD(v51) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  unint64_t v67 = v47++;
                  char v68 = *(unsigned char *)(v48 + v67);
                  *((void *)this + 1) = v47;
                  v51 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v51) = 0;
LABEL_118:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v51) = 0;
                }
                goto LABEL_118;
              }
              char v49 = 0;
              unsigned int v50 = 0;
              uint64_t v51 = 0;
              do
              {
                unint64_t v2 = v47 + 1;
                *((void *)this + 1) = v47 + 1;
                char v52 = *(unsigned char *)(v48 + v47);
                v51 |= (unint64_t)(v52 & 0x7F) << v49;
                if ((v52 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v49 += 7;
                unint64_t v47 = v2;
                BOOL v14 = v50++ > 8;
              }
              while (!v14);
              LODWORD(v51) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 20) = v51;
LABEL_120:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_120;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903ED3A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 36);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    __int16 v4 = *(_WORD *)(v3 + 36);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x100) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 0x40) == 0)
  {
LABEL_8:
    if ((v4 & 2) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 36) & 4) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 36);
  if ((v4 & 2) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_19:

  return PB::Writer::writeVarInt(this);
}

void *sub_1903ED4DC(void *result)
{
  *uint64_t result = &unk_1EDFCE1B0;
  result[1] = 0;
  result[3] = 0;
  return result;
}

void sub_1903ED500(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCE1B0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903ED580(PB::Base *a1)
{
  sub_1903ED500(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903ED5B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "impulse");
  }
  char v6 = *(unsigned char *)(a1 + 28);
  if ((v6 & 2) != 0)
  {
    PB::TextFormatter::format(this, "state");
    char v6 = *(unsigned char *)(a1 + 28);
  }
  if (v6) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903ED66C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        operator new();
      }
      if (v20 == 2)
      {
        *(unsigned char *)(a1 + 28) |= 1u;
        unint64_t v29 = *((void *)this + 1);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v29);
          *((void *)this + 1) += 8;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else if (v20 == 1)
      {
        *(unsigned char *)(a1 + 28) |= 2u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v22 = *((void *)this + 2);
        uint64_t v23 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v22)
        {
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v26 = 0;
          if (v22 <= v21) {
            unint64_t v22 = *((void *)this + 1);
          }
          while (1)
          {
            if (v22 == v21)
            {
              LODWORD(v26) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_48;
            }
            unint64_t v33 = v21 + 1;
            char v34 = *(unsigned char *)(v23 + v21);
            *((void *)this + 1) = v33;
            v26 |= (unint64_t)(v34 & 0x7F) << v31;
            if ((v34 & 0x80) == 0) {
              break;
            }
            v31 += 7;
            unint64_t v21 = v33;
            BOOL v14 = v32++ > 8;
            if (v14)
            {
LABEL_43:
              LODWORD(v26) = 0;
              goto LABEL_48;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v26) = 0;
          }
        }
        else
        {
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          while (1)
          {
            unint64_t v27 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v28 = *(unsigned char *)(v23 + v21);
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if ((v28 & 0x80) == 0) {
              break;
            }
            v24 += 7;
            unint64_t v21 = v27;
            BOOL v14 = v25++ > 8;
            if (v14) {
              goto LABEL_43;
            }
          }
        }
LABEL_48:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903ED9C8(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB158;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_1903ED9EC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 28);
  }
  if (v4) {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(this, v5);
  }
  return result;
}

uint64_t sub_1903EDA6C(uint64_t result)
{
  if (!*(void *)(result + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_1903EDB18(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCE38;
  *(void *)(result + 112) = 0;
  *(_DWORD *)(result + 180) = 0;
  return result;
}

void sub_1903EDB40(PB::Base *this)
{
  *(void *)this = &unk_1EDFCCE38;
  uint64_t v2 = *((void *)this + 14);
  *((void *)this + 14) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903EDBC4(PB::Base *a1)
{
  sub_1903EDB40(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903EDBFC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 180);
  if (v5)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 180);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_37;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "deltaDistance", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "deltaDistanceAccuracy", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x4000) == 0)
  {
LABEL_7:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "demConfidence", *(float *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x8000) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "demNumContiguousFlatPoints");
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "gnssModesOfOperation");
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x20000) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "horzUncSemiMaj", *(float *)(a1 + 140));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x40000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "horzUncSemiMajAz", *(float *)(a1 + 144));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x80000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "horzUncSemiMin", *(float *)(a1 + 148));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x80) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x100000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "notificationType");
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x200000) == 0)
  {
LABEL_18:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "originDevice");
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x400000) == 0)
  {
LABEL_19:
    if ((v5 & 0x200) == 0) {
      goto LABEL_20;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "roadClass");
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x200) == 0)
  {
LABEL_20:
    if ((v5 & 0x400) == 0) {
      goto LABEL_21;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x400) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 180);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_55:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 96));
  if ((*(_DWORD *)(a1 + 180) & 0x1000) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 104));
LABEL_24:
  uint64_t v6 = *(void *)(a1 + 112);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "trackRunData");
  }
  int v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x800000) != 0)
  {
    PB::TextFormatter::format(this, "type");
    int v7 = *(_DWORD *)(a1 + 180);
    if ((v7 & 0x1000000) == 0)
    {
LABEL_28:
      if ((v7 & 0x2000000) == 0) {
        goto LABEL_29;
      }
      goto LABEL_59;
    }
  }
  else if ((v7 & 0x1000000) == 0)
  {
    goto LABEL_28;
  }
  PB::TextFormatter::format(this, "undulation", *(float *)(a1 + 168));
  int v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x2000000) == 0)
  {
LABEL_29:
    if ((v7 & 0x2000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "undulationModel");
  int v7 = *(_DWORD *)(a1 + 180);
  if ((v7 & 0x2000) == 0)
  {
LABEL_30:
    if ((v7 & 0x4000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_60:
  PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 120));
  if ((*(_DWORD *)(a1 + 180) & 0x4000000) != 0) {
LABEL_31:
  }
    PB::TextFormatter::format(this, "wayForm");
LABEL_32:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903EDFD8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 180) |= 0x800u;
          unint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v20);
          goto LABEL_92;
        case 2u:
          *(_DWORD *)(a1 + 180) |= 0x40u;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v22);
          goto LABEL_92;
        case 3u:
          *(_DWORD *)(a1 + 180) |= 0x80u;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v23);
          goto LABEL_92;
        case 4u:
          *(_DWORD *)(a1 + 180) |= 0x200u;
          unint64_t v24 = *((void *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v24);
          goto LABEL_92;
        case 5u:
          *(_DWORD *)(a1 + 180) |= 0x400u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v25);
          goto LABEL_92;
        case 6u:
          *(_DWORD *)(a1 + 180) |= 0x20u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v26);
          goto LABEL_92;
        case 7u:
          *(_DWORD *)(a1 + 180) |= 2u;
          unint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v27);
          goto LABEL_92;
        case 8u:
          *(_DWORD *)(a1 + 180) |= 4u;
          unint64_t v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFF7 || v28 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v28);
          goto LABEL_92;
        case 9u:
          *(_DWORD *)(a1 + 180) |= 1u;
          unint64_t v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFF7 || v29 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v29);
          goto LABEL_92;
        case 0xAu:
          *(_DWORD *)(a1 + 180) |= 0x2000u;
          unint64_t v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFF7 || v30 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v30);
          goto LABEL_92;
        case 0xBu:
          *(_DWORD *)(a1 + 180) |= 0x800000u;
          unint64_t v31 = *((void *)this + 1);
          unint64_t v32 = *((void *)this + 2);
          uint64_t v33 = *(void *)this;
          if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
          {
            char v34 = 0;
            unsigned int v35 = 0;
            uint64_t v36 = 0;
            do
            {
              unint64_t v37 = v31 + 1;
              *((void *)this + 1) = v31 + 1;
              char v38 = *(unsigned char *)(v33 + v31);
              v36 |= (unint64_t)(v38 & 0x7F) << v34;
              if ((v38 & 0x80) == 0) {
                goto LABEL_213;
              }
              v34 += 7;
              unint64_t v31 = v37;
              BOOL v14 = v35++ > 8;
            }
            while (!v14);
LABEL_145:
            LODWORD(v36) = 0;
            goto LABEL_213;
          }
          char v105 = 0;
          unsigned int v106 = 0;
          uint64_t v36 = 0;
          if (v32 <= v31) {
            unint64_t v32 = *((void *)this + 1);
          }
          while (2)
          {
            if (v32 == v31)
            {
              LODWORD(v36) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v107 = v31 + 1;
              char v108 = *(unsigned char *)(v33 + v31);
              *((void *)this + 1) = v107;
              v36 |= (unint64_t)(v108 & 0x7F) << v105;
              if (v108 < 0)
              {
                v105 += 7;
                unint64_t v31 = v107;
                BOOL v14 = v106++ > 8;
                if (v14) {
                  goto LABEL_145;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v36) = 0;
              }
            }
            break;
          }
LABEL_213:
          *(_DWORD *)(a1 + 164) = v36;
          goto LABEL_198;
        case 0xCu:
          *(_DWORD *)(a1 + 180) |= 0x1000u;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v39);
          goto LABEL_92;
        case 0xDu:
          *(_DWORD *)(a1 + 180) |= 0x1000000u;
          unint64_t v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(void *)this + v40);
          goto LABEL_196;
        case 0xEu:
          *(_DWORD *)(a1 + 180) |= 0x2000000u;
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          uint64_t v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_216;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v14 = v45++ > 8;
            }
            while (!v14);
LABEL_152:
            LODWORD(v46) = 0;
            goto LABEL_216;
          }
          char v109 = 0;
          unsigned int v110 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)this + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v111 = v41 + 1;
              char v112 = *(unsigned char *)(v43 + v41);
              *((void *)this + 1) = v111;
              v46 |= (unint64_t)(v112 & 0x7F) << v109;
              if (v112 < 0)
              {
                v109 += 7;
                unint64_t v41 = v111;
                BOOL v14 = v110++ > 8;
                if (v14) {
                  goto LABEL_152;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v46) = 0;
              }
            }
            break;
          }
LABEL_216:
          *(_DWORD *)(a1 + 172) = v46;
          goto LABEL_198;
        case 0xFu:
          *(_DWORD *)(a1 + 180) |= 0x20000u;
          unint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v49);
          goto LABEL_196;
        case 0x10u:
          *(_DWORD *)(a1 + 180) |= 0x80000u;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v50);
          goto LABEL_196;
        case 0x11u:
          *(_DWORD *)(a1 + 180) |= 0x40000u;
          unint64_t v51 = *((void *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v51);
          goto LABEL_196;
        case 0x12u:
          *(_DWORD *)(a1 + 180) |= 0x100u;
          unint64_t v52 = *((void *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v52);
          goto LABEL_92;
        case 0x13u:
          *(_DWORD *)(a1 + 180) |= 8u;
          unint64_t v53 = *((void *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFF7 || v53 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v53);
          goto LABEL_92;
        case 0x14u:
          *(_DWORD *)(a1 + 180) |= 0x10u;
          unint64_t v54 = *((void *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)this + 2)) {
            goto LABEL_138;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v54);
LABEL_92:
          uint64_t v55 = *((void *)this + 1) + 8;
          goto LABEL_197;
        case 0x15u:
          *(_DWORD *)(a1 + 180) |= 0x200000u;
          unint64_t v56 = *((void *)this + 1);
          unint64_t v57 = *((void *)this + 2);
          uint64_t v58 = *(void *)this;
          if (v56 <= 0xFFFFFFFFFFFFFFF5 && v56 + 10 <= v57)
          {
            char v59 = 0;
            unsigned int v60 = 0;
            uint64_t v61 = 0;
            do
            {
              unint64_t v62 = v56 + 1;
              *((void *)this + 1) = v56 + 1;
              char v63 = *(unsigned char *)(v58 + v56);
              v61 |= (unint64_t)(v63 & 0x7F) << v59;
              if ((v63 & 0x80) == 0) {
                goto LABEL_219;
              }
              v59 += 7;
              unint64_t v56 = v62;
              BOOL v14 = v60++ > 8;
            }
            while (!v14);
LABEL_159:
            LODWORD(v61) = 0;
            goto LABEL_219;
          }
          char v113 = 0;
          unsigned int v114 = 0;
          uint64_t v61 = 0;
          if (v57 <= v56) {
            unint64_t v57 = *((void *)this + 1);
          }
          while (2)
          {
            if (v57 == v56)
            {
              LODWORD(v61) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v115 = v56 + 1;
              char v116 = *(unsigned char *)(v58 + v56);
              *((void *)this + 1) = v115;
              v61 |= (unint64_t)(v116 & 0x7F) << v113;
              if (v116 < 0)
              {
                v113 += 7;
                unint64_t v56 = v115;
                BOOL v14 = v114++ > 8;
                if (v14) {
                  goto LABEL_159;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v61) = 0;
              }
            }
            break;
          }
LABEL_219:
          *(_DWORD *)(a1 + 156) = v61;
          goto LABEL_198;
        case 0x16u:
          *(_DWORD *)(a1 + 180) |= 0x4000000u;
          unint64_t v64 = *((void *)this + 1);
          unint64_t v65 = *((void *)this + 2);
          uint64_t v66 = *(void *)this;
          if (v64 <= 0xFFFFFFFFFFFFFFF5 && v64 + 10 <= v65)
          {
            char v67 = 0;
            unsigned int v68 = 0;
            uint64_t v69 = 0;
            do
            {
              unint64_t v70 = v64 + 1;
              *((void *)this + 1) = v64 + 1;
              char v71 = *(unsigned char *)(v66 + v64);
              v69 |= (unint64_t)(v71 & 0x7F) << v67;
              if ((v71 & 0x80) == 0) {
                goto LABEL_222;
              }
              v67 += 7;
              unint64_t v64 = v70;
              BOOL v14 = v68++ > 8;
            }
            while (!v14);
LABEL_166:
            LODWORD(v69) = 0;
            goto LABEL_222;
          }
          char v117 = 0;
          unsigned int v118 = 0;
          uint64_t v69 = 0;
          if (v65 <= v64) {
            unint64_t v65 = *((void *)this + 1);
          }
          while (2)
          {
            if (v65 == v64)
            {
              LODWORD(v69) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v119 = v64 + 1;
              char v120 = *(unsigned char *)(v66 + v64);
              *((void *)this + 1) = v119;
              v69 |= (unint64_t)(v120 & 0x7F) << v117;
              if (v120 < 0)
              {
                v117 += 7;
                unint64_t v64 = v119;
                BOOL v14 = v118++ > 8;
                if (v14) {
                  goto LABEL_166;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v69) = 0;
              }
            }
            break;
          }
LABEL_222:
          *(_DWORD *)(a1 + 176) = v69;
          goto LABEL_198;
        case 0x17u:
          *(_DWORD *)(a1 + 180) |= 0x400000u;
          unint64_t v72 = *((void *)this + 1);
          unint64_t v73 = *((void *)this + 2);
          uint64_t v74 = *(void *)this;
          if (v72 <= 0xFFFFFFFFFFFFFFF5 && v72 + 10 <= v73)
          {
            char v75 = 0;
            unsigned int v76 = 0;
            uint64_t v77 = 0;
            do
            {
              unint64_t v78 = v72 + 1;
              *((void *)this + 1) = v72 + 1;
              char v79 = *(unsigned char *)(v74 + v72);
              v77 |= (unint64_t)(v79 & 0x7F) << v75;
              if ((v79 & 0x80) == 0) {
                goto LABEL_225;
              }
              v75 += 7;
              unint64_t v72 = v78;
              BOOL v14 = v76++ > 8;
            }
            while (!v14);
LABEL_173:
            LODWORD(v77) = 0;
            goto LABEL_225;
          }
          char v121 = 0;
          unsigned int v122 = 0;
          uint64_t v77 = 0;
          if (v73 <= v72) {
            unint64_t v73 = *((void *)this + 1);
          }
          while (2)
          {
            if (v73 == v72)
            {
              LODWORD(v77) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v123 = v72 + 1;
              char v124 = *(unsigned char *)(v74 + v72);
              *((void *)this + 1) = v123;
              v77 |= (unint64_t)(v124 & 0x7F) << v121;
              if (v124 < 0)
              {
                v121 += 7;
                unint64_t v72 = v123;
                BOOL v14 = v122++ > 8;
                if (v14) {
                  goto LABEL_173;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v77) = 0;
              }
            }
            break;
          }
LABEL_225:
          *(_DWORD *)(a1 + 160) = v77;
          goto LABEL_198;
        case 0x18u:
          *(_DWORD *)(a1 + 180) |= 0x10000u;
          unint64_t v80 = *((void *)this + 1);
          unint64_t v81 = *((void *)this + 2);
          uint64_t v82 = *(void *)this;
          if (v80 <= 0xFFFFFFFFFFFFFFF5 && v80 + 10 <= v81)
          {
            char v83 = 0;
            unsigned int v84 = 0;
            uint64_t v85 = 0;
            do
            {
              unint64_t v86 = v80 + 1;
              *((void *)this + 1) = v80 + 1;
              char v87 = *(unsigned char *)(v82 + v80);
              v85 |= (unint64_t)(v87 & 0x7F) << v83;
              if ((v87 & 0x80) == 0) {
                goto LABEL_228;
              }
              v83 += 7;
              unint64_t v80 = v86;
              BOOL v14 = v84++ > 8;
            }
            while (!v14);
LABEL_180:
            LODWORD(v85) = 0;
            goto LABEL_228;
          }
          char v125 = 0;
          unsigned int v126 = 0;
          uint64_t v85 = 0;
          if (v81 <= v80) {
            unint64_t v81 = *((void *)this + 1);
          }
          while (2)
          {
            if (v81 == v80)
            {
              LODWORD(v85) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v127 = v80 + 1;
              char v128 = *(unsigned char *)(v82 + v80);
              *((void *)this + 1) = v127;
              v85 |= (unint64_t)(v128 & 0x7F) << v125;
              if (v128 < 0)
              {
                v125 += 7;
                unint64_t v80 = v127;
                BOOL v14 = v126++ > 8;
                if (v14) {
                  goto LABEL_180;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v85) = 0;
              }
            }
            break;
          }
LABEL_228:
          *(_DWORD *)(a1 + 136) = v85;
          goto LABEL_198;
        case 0x19u:
          *(_DWORD *)(a1 + 180) |= 0x100000u;
          unint64_t v88 = *((void *)this + 1);
          unint64_t v89 = *((void *)this + 2);
          uint64_t v90 = *(void *)this;
          if (v88 <= 0xFFFFFFFFFFFFFFF5 && v88 + 10 <= v89)
          {
            char v91 = 0;
            unsigned int v92 = 0;
            uint64_t v93 = 0;
            do
            {
              unint64_t v94 = v88 + 1;
              *((void *)this + 1) = v88 + 1;
              char v95 = *(unsigned char *)(v90 + v88);
              v93 |= (unint64_t)(v95 & 0x7F) << v91;
              if ((v95 & 0x80) == 0) {
                goto LABEL_231;
              }
              v91 += 7;
              unint64_t v88 = v94;
              BOOL v14 = v92++ > 8;
            }
            while (!v14);
LABEL_187:
            LODWORD(v93) = 0;
            goto LABEL_231;
          }
          char v129 = 0;
          unsigned int v130 = 0;
          uint64_t v93 = 0;
          if (v89 <= v88) {
            unint64_t v89 = *((void *)this + 1);
          }
          while (2)
          {
            if (v89 == v88)
            {
              LODWORD(v93) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v131 = v88 + 1;
              char v132 = *(unsigned char *)(v90 + v88);
              *((void *)this + 1) = v131;
              v93 |= (unint64_t)(v132 & 0x7F) << v129;
              if (v132 < 0)
              {
                v129 += 7;
                unint64_t v88 = v131;
                BOOL v14 = v130++ > 8;
                if (v14) {
                  goto LABEL_187;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v93) = 0;
              }
            }
            break;
          }
LABEL_231:
          *(_DWORD *)(a1 + 152) = v93;
          goto LABEL_198;
        case 0x1Au:
          operator new();
        case 0x1Bu:
          *(_DWORD *)(a1 + 180) |= 0x8000u;
          unint64_t v96 = *((void *)this + 1);
          unint64_t v97 = *((void *)this + 2);
          uint64_t v98 = *(void *)this;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            char v99 = 0;
            unsigned int v100 = 0;
            uint64_t v101 = 0;
            do
            {
              unint64_t v102 = v96 + 1;
              *((void *)this + 1) = v96 + 1;
              char v103 = *(unsigned char *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0) {
                goto LABEL_234;
              }
              v99 += 7;
              unint64_t v96 = v102;
              BOOL v14 = v100++ > 8;
            }
            while (!v14);
LABEL_194:
            LODWORD(v101) = 0;
            goto LABEL_234;
          }
          char v133 = 0;
          unsigned int v134 = 0;
          uint64_t v101 = 0;
          if (v97 <= v96) {
            unint64_t v97 = *((void *)this + 1);
          }
          break;
        case 0x1Cu:
          *(_DWORD *)(a1 + 180) |= 0x4000u;
          unint64_t v104 = *((void *)this + 1);
          if (v104 <= 0xFFFFFFFFFFFFFFFBLL && v104 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v104);
LABEL_196:
            uint64_t v55 = *((void *)this + 1) + 4;
LABEL_197:
            *((void *)this + 1) = v55;
          }
          else
          {
LABEL_138:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_198;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_198;
      }
      while (1)
      {
        if (v97 == v96)
        {
          LODWORD(v101) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_234;
        }
        unint64_t v135 = v96 + 1;
        char v136 = *(unsigned char *)(v98 + v96);
        *((void *)this + 1) = v135;
        v101 |= (unint64_t)(v136 & 0x7F) << v133;
        if ((v136 & 0x80) == 0) {
          break;
        }
        v133 += 7;
        unint64_t v96 = v135;
        BOOL v14 = v134++ > 8;
        if (v14) {
          goto LABEL_194;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v101) = 0;
      }
LABEL_234:
      *(_DWORD *)(a1 + 132) = v101;
LABEL_198:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903EEDF0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 180);
  if ((v4 & 0x800) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 96));
    int v4 = *(_DWORD *)(v3 + 180);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x800000) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x20000) == 0)
  {
LABEL_16:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x80000) == 0)
  {
LABEL_17:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 148));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x40000) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x200000) == 0)
  {
LABEL_22:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x400000) == 0)
  {
LABEL_24:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 180);
  if ((v4 & 0x10000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
LABEL_56:
  uint64_t result = PB::Writer::writeVarInt(this);
  if ((*(_DWORD *)(v3 + 180) & 0x100000) != 0) {
LABEL_26:
  }
    uint64_t result = PB::Writer::writeVarInt(this);
LABEL_27:
  int v5 = *(const PB::Base **)(v3 + 112);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5);
  }
  int v6 = *(_DWORD *)(v3 + 180);
  if ((v6 & 0x8000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    int v6 = *(_DWORD *)(v3 + 180);
  }
  if ((v6 & 0x4000) != 0)
  {
    float v7 = *(float *)(v3 + 128);
    return PB::Writer::write(this, v7);
  }
  return result;
}

uint64_t sub_1903EF12C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB0E8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1903EF154(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903EF18C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "event");
    char v5 = *(unsigned char *)(a1 + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 24) & 4) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "value");
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903EF230(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 24) |= 4u;
        unint64_t v21 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v22 = *(void *)this;
        if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v25 = 0;
          if (v2 <= v21) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v21)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_62;
            }
            unint64_t v36 = v21++;
            char v37 = *(unsigned char *)(v22 + v36);
            *((void *)this + 1) = v21;
            v25 |= (unint64_t)(v37 & 0x7F) << v34;
            if ((v37 & 0x80) == 0) {
              break;
            }
            v34 += 7;
            BOOL v14 = v35++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              goto LABEL_61;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v25) = 0;
          }
LABEL_61:
          unint64_t v2 = v36 + 1;
        }
        else
        {
          char v23 = 0;
          unsigned int v24 = 0;
          uint64_t v25 = 0;
          while (1)
          {
            unint64_t v2 = v21 + 1;
            *((void *)this + 1) = v21 + 1;
            char v26 = *(unsigned char *)(v22 + v21);
            v25 |= (unint64_t)(v26 & 0x7F) << v23;
            if ((v26 & 0x80) == 0) {
              break;
            }
            v23 += 7;
            unint64_t v21 = v2;
            BOOL v14 = v24++ > 8;
            if (v14)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
        }
LABEL_62:
        *(_DWORD *)(a1 + 20) = v25;
      }
      else if (v20 == 2)
      {
        *(unsigned char *)(a1 + 24) |= 2u;
        unint64_t v27 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v28 = *(void *)this;
        if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
        {
          char v38 = 0;
          unsigned int v39 = 0;
          uint64_t v31 = 0;
          if (v2 <= v27) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v27)
            {
              LODWORD(v31) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_67;
            }
            unint64_t v40 = v27++;
            char v41 = *(unsigned char *)(v28 + v40);
            *((void *)this + 1) = v27;
            v31 |= (unint64_t)(v41 & 0x7F) << v38;
            if ((v41 & 0x80) == 0) {
              break;
            }
            v38 += 7;
            BOOL v14 = v39++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              goto LABEL_66;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v31) = 0;
          }
LABEL_66:
          unint64_t v2 = v40 + 1;
        }
        else
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v31 = 0;
          while (1)
          {
            unint64_t v2 = v27 + 1;
            *((void *)this + 1) = v27 + 1;
            char v32 = *(unsigned char *)(v28 + v27);
            v31 |= (unint64_t)(v32 & 0x7F) << v29;
            if ((v32 & 0x80) == 0) {
              break;
            }
            v29 += 7;
            unint64_t v27 = v2;
            BOOL v14 = v30++ > 8;
            if (v14)
            {
              LODWORD(v31) = 0;
              break;
            }
          }
        }
LABEL_67:
        *(_DWORD *)(a1 + 16) = v31;
      }
      else if (v20 == 1)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903EF5B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(result + 24) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 24) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_7:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903EF640(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCBF20;
  *(_DWORD *)(result + 220) = 0;
  return result;
}

void sub_1903EF668(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903EF6A0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 220);
  if (v5)
  {
    PB::TextFormatter::format(this, "altitude", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 220);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "course", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "deltaDistance", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "deltaDistanceAccuracy", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "groundAltitude", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "groundAltitudeUncertainty", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x200000) == 0)
  {
LABEL_10:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "horzUncSemiMaj", *(float *)(a1 + 176));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x400000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "horzUncSemiMajAz", *(float *)(a1 + 180));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "horzUncSemiMin", *(float *)(a1 + 184));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "isPrefilteredLocation");
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x400) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "matchQuality");
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x400) == 0)
  {
LABEL_17:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "maxAbsSlope", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x800) == 0)
  {
LABEL_18:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_19:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "originDevice");
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x1000) == 0)
  {
LABEL_20:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "rawAltitude", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x2000) == 0)
  {
LABEL_21:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "rawUndulation", *(double *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "rawUndulationModel");
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "rawVerticalAccuracy", *(double *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "signalEnvironment");
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x8000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "slope", *(double *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 136));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "speedAccuracy", *(double *)(a1 + 144));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40000) == 0)
  {
LABEL_28:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 152));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x80000) == 0)
  {
LABEL_29:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 160));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "type");
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "undulation", *(float *)(a1 + 208));
  int v5 = *(_DWORD *)(a1 + 220);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_67:
  PB::TextFormatter::format(this, "undulationModel");
  if ((*(_DWORD *)(a1 + 220) & 0x100000) != 0) {
LABEL_33:
  }
    PB::TextFormatter::format(this, "verticalAccuracy", *(double *)(a1 + 168));
LABEL_34:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903EFAE4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 220) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 2u:
              *(_DWORD *)(a1 + 220) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 3u:
              *(_DWORD *)(a1 + 220) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 4u:
              *(_DWORD *)(a1 + 220) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 5u:
              *(_DWORD *)(a1 + 220) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 6u:
              *(_DWORD *)(a1 + 220) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 7u:
              *(_DWORD *)(a1 + 220) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 8u:
              *(_DWORD *)(a1 + 220) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 9u:
              *(_DWORD *)(a1 + 220) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0xAu:
              *(_DWORD *)(a1 + 220) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0xBu:
              *(_DWORD *)(a1 + 220) |= 0x10000000u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_200;
                  }
                  unint64_t v61 = v21++;
                  char v62 = *(unsigned char *)(v22 + v61);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_199:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_200;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_199;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_200;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_200:
              *(_DWORD *)(a1 + 204) = v25;
              goto LABEL_191;
            case 0xCu:
              *(_DWORD *)(a1 + 220) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0xDu:
              *(_DWORD *)(a1 + 220) |= 0x20000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(_DWORD *)(a1 + 208) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_83;
            case 0xEu:
              *(_DWORD *)(a1 + 220) |= 0x40000000u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_205;
                  }
                  unint64_t v65 = v27++;
                  char v66 = *(unsigned char *)(v28 + v65);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_204:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_205;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_204;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_205;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_205:
              *(_DWORD *)(a1 + 212) = v31;
              goto LABEL_191;
            case 0xFu:
              *(_DWORD *)(a1 + 220) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_83;
            case 0x10u:
              *(_DWORD *)(a1 + 220) |= 0x800000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(_DWORD *)(a1 + 184) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_83;
            case 0x11u:
              *(_DWORD *)(a1 + 220) |= 0x400000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(_DWORD *)(a1 + 180) = *(_DWORD *)(*(void *)this + v2);
LABEL_83:
              unint64_t v2 = *((void *)this + 1) + 4;
              goto LABEL_190;
            case 0x12u:
              *(_DWORD *)(a1 + 220) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x13u:
              *(_DWORD *)(a1 + 220) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x14u:
              *(_DWORD *)(a1 + 220) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x15u:
              *(_DWORD *)(a1 + 220) |= 0x2000000u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_210;
                  }
                  unint64_t v69 = v33++;
                  char v70 = *(unsigned char *)(v34 + v69);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_209:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_210;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_209;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_210;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_210:
              *(_DWORD *)(a1 + 192) = v37;
              goto LABEL_191;
            case 0x16u:
              *(_DWORD *)(a1 + 220) |= 0x8000000u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v71 = 0;
                unsigned int v72 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_215;
                  }
                  unint64_t v73 = v39++;
                  char v74 = *(unsigned char *)(v40 + v73);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v74 & 0x7F) << v71;
                  if ((v74 & 0x80) == 0) {
                    break;
                  }
                  v71 += 7;
                  BOOL v14 = v72++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_214:
                    unint64_t v2 = v73 + 1;
                    goto LABEL_215;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_214;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_215;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_215:
              *(_DWORD *)(a1 + 200) = v43;
              goto LABEL_191;
            case 0x17u:
              *(_DWORD *)(a1 + 220) |= 0x1000000u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v75 = 0;
                unsigned int v76 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_220;
                  }
                  unint64_t v77 = v45++;
                  char v78 = *(unsigned char *)(v46 + v77);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v78 & 0x7F) << v75;
                  if ((v78 & 0x80) == 0) {
                    break;
                  }
                  v75 += 7;
                  BOOL v14 = v76++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_219:
                    unint64_t v2 = v77 + 1;
                    goto LABEL_220;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_219;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_220;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_220:
              *(_DWORD *)(a1 + 188) = v49;
              goto LABEL_191;
            case 0x18u:
              *(_DWORD *)(a1 + 220) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x19u:
              *(_DWORD *)(a1 + 220) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x1Au:
              *(_DWORD *)(a1 + 220) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x1Bu:
              *(_DWORD *)(a1 + 220) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x1Cu:
              *(_DWORD *)(a1 + 220) |= 0x80000000;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v52 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v51 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v52 = v51 != 0;
              }
              *(unsigned char *)(a1 + 216) = v52;
              goto LABEL_191;
            case 0x1Du:
              *(_DWORD *)(a1 + 220) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x1Eu:
              *(_DWORD *)(a1 + 220) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_136;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_189;
            case 0x1Fu:
              *(_DWORD *)(a1 + 220) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
LABEL_189:
                unint64_t v2 = *((void *)this + 1) + 8;
LABEL_190:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_136:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_191;
            case 0x20u:
              *(_DWORD *)(a1 + 220) |= 0x4000000u;
              unint64_t v53 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v54 = *(void *)this;
              if (v53 > 0xFFFFFFFFFFFFFFF5 || v53 + 10 > v2)
              {
                char v79 = 0;
                unsigned int v80 = 0;
                uint64_t v57 = 0;
                if (v2 <= v53) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v53)
                  {
                    LODWORD(v57) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_225;
                  }
                  unint64_t v81 = v53++;
                  char v82 = *(unsigned char *)(v54 + v81);
                  *((void *)this + 1) = v53;
                  v57 |= (unint64_t)(v82 & 0x7F) << v79;
                  if ((v82 & 0x80) == 0) {
                    break;
                  }
                  v79 += 7;
                  BOOL v14 = v80++ > 8;
                  if (v14)
                  {
                    LODWORD(v57) = 0;
LABEL_224:
                    unint64_t v2 = v81 + 1;
                    goto LABEL_225;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v57) = 0;
                }
                goto LABEL_224;
              }
              char v55 = 0;
              unsigned int v56 = 0;
              uint64_t v57 = 0;
              do
              {
                unint64_t v2 = v53 + 1;
                *((void *)this + 1) = v53 + 1;
                char v58 = *(unsigned char *)(v54 + v53);
                v57 |= (unint64_t)(v58 & 0x7F) << v55;
                if ((v58 & 0x80) == 0) {
                  goto LABEL_225;
                }
                v55 += 7;
                unint64_t v53 = v2;
                BOOL v14 = v56++ > 8;
              }
              while (!v14);
              LODWORD(v57) = 0;
LABEL_225:
              *(_DWORD *)(a1 + 196) = v57;
LABEL_191:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_191;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903F084C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 220);
  if ((v4 & 0x40000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 152));
    int v4 = *(_DWORD *)(v3 + 220);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200) == 0)
  {
LABEL_4:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 1) == 0)
  {
LABEL_10:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x100000) == 0)
  {
LABEL_11:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 208));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x200000) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 176));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 184));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400000) == 0)
  {
LABEL_18:
    if ((v4 & 0x800) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 180));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x800) == 0)
  {
LABEL_19:
    if ((v4 & 8) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 8) == 0)
  {
LABEL_20:
    if ((v4 & 0x10) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x10) == 0)
  {
LABEL_21:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x20) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x20) == 0)
  {
LABEL_25:
    if ((v4 & 0x40) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x40) == 0)
  {
LABEL_26:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x8000) == 0)
  {
LABEL_27:
    if ((v4 & 0x400) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x400) == 0)
  {
LABEL_28:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x1000) == 0)
  {
LABEL_30:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x4000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_32;
    }
LABEL_64:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112));
    if ((*(_DWORD *)(v3 + 220) & 0x4000000) == 0) {
      return result;
    }
    goto LABEL_65;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 220);
  if ((v4 & 0x2000) != 0) {
    goto LABEL_64;
  }
LABEL_32:
  if ((v4 & 0x4000000) == 0) {
    return result;
  }
LABEL_65:

  return PB::Writer::writeVarInt(this);
}

double sub_1903F0C04(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC2E00;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1903F0C34(PB::Base *this)
{
  *(void *)this = &unk_1EDFC2E00;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1903F0CA8(PB::Base *a1)
{
  sub_1903F0C34(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F0CE0(void *a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = (double *)a1[1];
  int v6 = (double *)a1[2];
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "loiAltitude", v7);
  }
  uint64_t v8 = (double *)a1[4];
  char v9 = (double *)a1[5];
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "loiVerticalUncertainty", v10);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903F0D8C(void *a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 4);
    uint64_t v9 = (uint64_t)(a1 + 6);
    double v10 = (void **)(a1 + 1);
    uint64_t v11 = (uint64_t)(a1 + 3);
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v15 >> 3) == 2) {
        break;
      }
      if ((v15 >> 3) == 1)
      {
        if (v24 != 2)
        {
          uint64_t v54 = (char *)a1[2];
          unint64_t v53 = a1[3];
          if ((unint64_t)v54 >= v53)
          {
            char v58 = (char *)*v10;
            uint64_t v59 = (v54 - (unsigned char *)*v10) >> 3;
            unint64_t v60 = v59 + 1;
            if ((unint64_t)(v59 + 1) >> 61) {
LABEL_122:
            }
              sub_1903479E8();
            uint64_t v61 = v53 - (void)v58;
            if (v61 >> 2 > v60) {
              unint64_t v60 = v61 >> 2;
            }
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v62 = v60;
            }
            if (v62)
            {
              char v63 = (char *)sub_190347A00(v11, v62);
              char v58 = (char *)a1[1];
              uint64_t v54 = (char *)a1[2];
            }
            else
            {
              char v63 = 0;
            }
            char v70 = &v63[8 * v59];
            *(void *)char v70 = 0;
            char v55 = v70 + 8;
            while (v54 != v58)
            {
              uint64_t v71 = *((void *)v54 - 1);
              v54 -= 8;
              *((void *)v70 - 1) = v71;
              v70 -= 8;
            }
            a1[1] = v70;
            a1[2] = v55;
            a1[3] = &v63[8 * v62];
            if (v58) {
              operator delete(v58);
            }
          }
          else
          {
            *(void *)uint64_t v54 = 0;
            char v55 = v54 + 8;
          }
          a1[2] = v55;
LABEL_110:
          unint64_t v74 = *((void *)this + 1);
          if (v74 <= 0xFFFFFFFFFFFFFFF7 && v74 + 8 <= *((void *)this + 2))
          {
            *(v55 - 1) = *(void *)(*(void *)this + v74);
            *((void *)this + 1) += 8;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_114;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v25 = *((void *)this + 1);
        unint64_t v26 = *((void *)this + 2);
        while (v25 < v26 && !*((unsigned char *)this + 24))
        {
          uint64_t v28 = (char *)a1[2];
          unint64_t v27 = a1[3];
          if ((unint64_t)v28 >= v27)
          {
            unsigned int v30 = (char *)*v10;
            uint64_t v31 = (v28 - (unsigned char *)*v10) >> 3;
            unint64_t v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 61) {
              goto LABEL_122;
            }
            uint64_t v33 = v27 - (void)v30;
            if (v33 >> 2 > v32) {
              unint64_t v32 = v33 >> 2;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v34 = v32;
            }
            if (v34)
            {
              char v35 = (char *)sub_190347A00(v11, v34);
              unsigned int v30 = (char *)a1[1];
              uint64_t v28 = (char *)a1[2];
            }
            else
            {
              char v35 = 0;
            }
            unsigned int v36 = &v35[8 * v31];
            *(void *)unsigned int v36 = 0;
            char v29 = v36 + 8;
            while (v28 != v30)
            {
              uint64_t v37 = *((void *)v28 - 1);
              v28 -= 8;
              *((void *)v36 - 1) = v37;
              v36 -= 8;
            }
            a1[1] = v36;
            a1[2] = v29;
            a1[3] = &v35[8 * v34];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *(void *)uint64_t v28 = 0;
            char v29 = v28 + 8;
          }
          a1[2] = v29;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFF7 || v38 + 8 > *((void *)this + 2)) {
            goto LABEL_78;
          }
          *(v29 - 1) = *(void *)(*(void *)this + v38);
          unint64_t v26 = *((void *)this + 2);
          unint64_t v25 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v25;
        }
LABEL_79:
        PB::Reader::recallMark();
        goto LABEL_114;
      }
      if ((PB::Reader::skip(this) & 1) == 0) {
        return 0;
      }
LABEL_114:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    if (v24 != 2)
    {
      uint64_t v57 = (char *)a1[5];
      unint64_t v56 = a1[6];
      if ((unint64_t)v57 >= v56)
      {
        unsigned int v64 = (char *)*v8;
        uint64_t v65 = (v57 - (unsigned char *)*v8) >> 3;
        unint64_t v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 61) {
LABEL_123:
        }
          sub_1903479E8();
        uint64_t v67 = v56 - (void)v64;
        if (v67 >> 2 > v66) {
          unint64_t v66 = v67 >> 2;
        }
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v68 = v66;
        }
        if (v68)
        {
          unint64_t v69 = (char *)sub_190347A00(v9, v68);
          unsigned int v64 = (char *)a1[4];
          uint64_t v57 = (char *)a1[5];
        }
        else
        {
          unint64_t v69 = 0;
        }
        unsigned int v72 = &v69[8 * v65];
        *(void *)unsigned int v72 = 0;
        char v55 = v72 + 8;
        while (v57 != v64)
        {
          uint64_t v73 = *((void *)v57 - 1);
          v57 -= 8;
          *((void *)v72 - 1) = v73;
          v72 -= 8;
        }
        a1[4] = v72;
        a1[5] = v55;
        a1[6] = &v69[8 * v68];
        if (v64) {
          operator delete(v64);
        }
      }
      else
      {
        *(void *)uint64_t v57 = 0;
        char v55 = v57 + 8;
      }
      a1[5] = v55;
      goto LABEL_110;
    }
    if (PB::Reader::placeMark()) {
      return 0;
    }
    unint64_t v39 = *((void *)this + 1);
    unint64_t v40 = *((void *)this + 2);
    while (v39 < v40 && !*((unsigned char *)this + 24))
    {
      unsigned int v42 = (char *)a1[5];
      unint64_t v41 = a1[6];
      if ((unint64_t)v42 >= v41)
      {
        char v44 = (char *)*v8;
        uint64_t v45 = (v42 - (unsigned char *)*v8) >> 3;
        unint64_t v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 61) {
          goto LABEL_123;
        }
        uint64_t v47 = v41 - (void)v44;
        if (v47 >> 2 > v46) {
          unint64_t v46 = v47 >> 2;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v46;
        }
        if (v48)
        {
          uint64_t v49 = (char *)sub_190347A00(v9, v48);
          char v44 = (char *)a1[4];
          unsigned int v42 = (char *)a1[5];
        }
        else
        {
          uint64_t v49 = 0;
        }
        char v50 = &v49[8 * v45];
        *(void *)char v50 = 0;
        uint64_t v43 = v50 + 8;
        while (v42 != v44)
        {
          uint64_t v51 = *((void *)v42 - 1);
          v42 -= 8;
          *((void *)v50 - 1) = v51;
          v50 -= 8;
        }
        a1[4] = v50;
        a1[5] = v43;
        a1[6] = &v49[8 * v48];
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        *(void *)unsigned int v42 = 0;
        uint64_t v43 = v42 + 8;
      }
      a1[5] = v43;
      unint64_t v52 = *((void *)this + 1);
      if (v52 > 0xFFFFFFFFFFFFFFF7 || v52 + 8 > *((void *)this + 2))
      {
LABEL_78:
        *((unsigned char *)this + 24) = 1;
        goto LABEL_79;
      }
      *(v43 - 1) = *(void *)(*(void *)this + v52);
      unint64_t v40 = *((void *)this + 2);
      unint64_t v39 = *((void *)this + 1) + 8;
      *((void *)this + 1) = v39;
    }
    goto LABEL_79;
  }
  return v4 == 0;
}

uint64_t sub_1903F12C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(double **)(result + 8);
  int v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  uint64_t v8 = *(double **)(v3 + 32);
  double v7 = *(double **)(v3 + 40);
  while (v8 != v7)
  {
    double v9 = *v8++;
    double result = PB::Writer::write(this, v9);
  }
  return result;
}

uint64_t sub_1903F132C(uint64_t result)
{
  *(void *)double result = &unk_1EDFCBB68;
  *(_DWORD *)(result + 84) = -1;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_1903F135C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F1394(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 92);
  if (v5)
  {
    PB::TextFormatter::format(this, "arrivalDate", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((*(_WORD *)(a1 + 92) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence");
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "confidenceOfGeoLocation", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "departureDate", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "distanceToLoi", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "hashedLatLong");
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "type");
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
LABEL_27:
  PB::TextFormatter::format(this, "uncertaintyOfGeoLocation", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 92) & 0x100) != 0) {
LABEL_13:
  }
    PB::TextFormatter::format(this, "withinDistance", *(double *)(a1 + 72));
LABEL_14:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903F1558(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 2u:
              *(_WORD *)(a1 + 92) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 3u:
              *(_WORD *)(a1 + 92) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 4u:
              *(_WORD *)(a1 + 92) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 5u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x200u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v35 = 0;
                unsigned int v36 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_89;
                  }
                  unint64_t v37 = v21++;
                  char v38 = *(unsigned char *)(v22 + v37);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v38 & 0x7F) << v35;
                  if ((v38 & 0x80) == 0) {
                    break;
                  }
                  v35 += 7;
                  BOOL v14 = v36++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_88:
                    unint64_t v2 = v37 + 1;
                    goto LABEL_89;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_88;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_89;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_89:
              *(_DWORD *)(a1 + 80) = v25;
              goto LABEL_95;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 92) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 0x400u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_94;
                  }
                  unint64_t v41 = v27++;
                  char v42 = *(unsigned char *)(v28 + v41);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_93:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_94;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_93;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_94;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_94:
              *(_DWORD *)(a1 + 84) = v31;
LABEL_95:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_84:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_95;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 88) = v34;
              goto LABEL_95;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_95;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903F1B24(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56));
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x200) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 8) == 0) {
      goto LABEL_12;
    }
LABEL_24:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
    if ((*(_WORD *)(v3 + 92) & 0x800) == 0) {
      return result;
    }
    goto LABEL_25;
  }
LABEL_23:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) != 0) {
    goto LABEL_24;
  }
LABEL_12:
  if ((v4 & 0x800) == 0) {
    return result;
  }
LABEL_25:

  return PB::Writer::write(this);
}

void *sub_1903F1CAC(void *result)
{
  *uint64_t result = &unk_1EDFCCE70;
  result[4] = 0;
  result[24] = 0;
  return result;
}

void sub_1903F1CD4(PB::Base *this)
{
  *(void *)this = &unk_1EDFCCE70;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903F1D58(PB::Base *a1)
{
  sub_1903F1CD4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F1D90(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "alsLux");
    uint64_t v5 = *(void *)(a1 + 192);
    if ((v5 & 0x80) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_48;
    }
  }
  else if ((v5 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "caltype");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "confidence");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 0x400) == 0) {
      goto LABEL_6;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "drivingArmLikelihoodSum", *(float *)(a1 + 76));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x400) == 0)
  {
LABEL_6:
    if ((v5 & 0x800) == 0) {
      goto LABEL_7;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "drivingStowedLikelihoodSum", *(float *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x800) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "exitState");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 1) == 0)
  {
LABEL_8:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "hidTimestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x1000) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "isMoving");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x2000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "isVehicular");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x4000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "machineFrequency", *(float *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x8000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "motionType");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x10000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "mounted");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x20000) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "mountedConfidence");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "now");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x40000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "rawConfidence");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x80000) == 0)
  {
LABEL_17:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "rawIsVehicular");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x100000) == 0)
  {
LABEL_18:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "rawMotionType");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x200000) == 0)
  {
LABEL_19:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "rowStrokeAmplitude", *(float *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x400000) == 0)
  {
LABEL_20:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "rowStrokeFrequency", *(float *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x800000) == 0)
  {
LABEL_21:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "rowStrokePower", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_22:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "seq");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "ssLikelihoodSum", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_24:
    if ((v5 & 4) == 0) {
      goto LABEL_25;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "standing");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 4) == 0)
  {
LABEL_25:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "startTime");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_26:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "turn");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "typeYouth");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "vectorMagnitude", *(float *)(a1 + 156));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_29:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "vehicleExitState");
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean0", *(float *)(a1 + 164));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean1", *(float *)(a1 + 168));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "vehicleProbabilityLongTermMean2", *(float *)(a1 + 172));
  uint64_t v5 = *(void *)(a1 + 192);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
LABEL_77:
  PB::TextFormatter::format(this, "vehicleType");
  if ((*(void *)(a1 + 192) & 0x800000000) != 0) {
LABEL_34:
  }
    PB::TextFormatter::format(this, "vehicularConfidence");
LABEL_35:
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "vehicularFlags");
  }
  uint64_t v7 = *(void *)(a1 + 192);
  if ((v7 & 8) != 0)
  {
    PB::TextFormatter::format(this, "wallStartTime", *(double *)(a1 + 40));
    uint64_t v7 = *(void *)(a1 + 192);
    if ((v7 & 0x10) == 0)
    {
LABEL_39:
      if ((v7 & 0x1000000000) == 0) {
        goto LABEL_40;
      }
      goto LABEL_81;
    }
  }
  else if ((v7 & 0x10) == 0)
  {
    goto LABEL_39;
  }
  PB::TextFormatter::format(this, "workoutDetectionTime");
  uint64_t v7 = *(void *)(a1 + 192);
  if ((v7 & 0x1000000000) == 0)
  {
LABEL_40:
    if ((v7 & 0x20) == 0) {
      goto LABEL_41;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "workoutDetectionType");
  uint64_t v7 = *(void *)(a1 + 192);
  if ((v7 & 0x20) == 0)
  {
LABEL_41:
    if ((v7 & 0x2000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
LABEL_82:
  PB::TextFormatter::format(this, "workoutEscalationTime");
  if ((*(void *)(a1 + 192) & 0x2000000000) != 0) {
LABEL_42:
  }
    PB::TextFormatter::format(this, "youthClassificationReason");
LABEL_43:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903F22CC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 192) |= 0x8000uLL;
          unint64_t v20 = *((void *)this + 1);
          unint64_t v21 = *((void *)this + 2);
          uint64_t v22 = *(void *)this;
          if (v20 <= 0xFFFFFFFFFFFFFFF5 && v20 + 10 <= v21)
          {
            char v23 = 0;
            unsigned int v24 = 0;
            uint64_t v25 = 0;
            do
            {
              unint64_t v26 = v20 + 1;
              *((void *)this + 1) = v20 + 1;
              char v27 = *(unsigned char *)(v22 + v20);
              v25 |= (unint64_t)(v27 & 0x7F) << v23;
              if ((v27 & 0x80) == 0) {
                goto LABEL_445;
              }
              v23 += 7;
              unint64_t v20 = v26;
              BOOL v14 = v24++ > 8;
            }
            while (!v14);
LABEL_246:
            LODWORD(v25) = 0;
            goto LABEL_445;
          }
          char v235 = 0;
          unsigned int v236 = 0;
          uint64_t v25 = 0;
          if (v21 <= v20) {
            unint64_t v21 = *((void *)this + 1);
          }
          while (2)
          {
            if (v21 == v20)
            {
              LODWORD(v25) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v237 = v20 + 1;
              char v238 = *(unsigned char *)(v22 + v20);
              *((void *)this + 1) = v237;
              v25 |= (unint64_t)(v238 & 0x7F) << v235;
              if (v238 < 0)
              {
                v235 += 7;
                unint64_t v20 = v237;
                BOOL v14 = v236++ > 8;
                if (v14) {
                  goto LABEL_246;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v25) = 0;
              }
            }
            break;
          }
LABEL_445:
          *(_DWORD *)(a1 + 100) = v25;
          goto LABEL_518;
        case 2u:
          *(void *)(a1 + 192) |= 0x100uLL;
          unint64_t v29 = *((void *)this + 1);
          unint64_t v30 = *((void *)this + 2);
          uint64_t v31 = *(void *)this;
          if (v29 <= 0xFFFFFFFFFFFFFFF5 && v29 + 10 <= v30)
          {
            char v32 = 0;
            unsigned int v33 = 0;
            uint64_t v34 = 0;
            do
            {
              unint64_t v35 = v29 + 1;
              *((void *)this + 1) = v29 + 1;
              char v36 = *(unsigned char *)(v31 + v29);
              v34 |= (unint64_t)(v36 & 0x7F) << v32;
              if ((v36 & 0x80) == 0) {
                goto LABEL_448;
              }
              v32 += 7;
              unint64_t v29 = v35;
              BOOL v14 = v33++ > 8;
            }
            while (!v14);
LABEL_253:
            LODWORD(v34) = 0;
            goto LABEL_448;
          }
          char v239 = 0;
          unsigned int v240 = 0;
          uint64_t v34 = 0;
          if (v30 <= v29) {
            unint64_t v30 = *((void *)this + 1);
          }
          while (2)
          {
            if (v30 == v29)
            {
              LODWORD(v34) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v241 = v29 + 1;
              char v242 = *(unsigned char *)(v31 + v29);
              *((void *)this + 1) = v241;
              v34 |= (unint64_t)(v242 & 0x7F) << v239;
              if (v242 < 0)
              {
                v239 += 7;
                unint64_t v29 = v241;
                BOOL v14 = v240++ > 8;
                if (v14) {
                  goto LABEL_253;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v34) = 0;
              }
            }
            break;
          }
LABEL_448:
          *(_DWORD *)(a1 + 72) = v34;
          goto LABEL_518;
        case 3u:
          *(void *)(a1 + 192) |= 0x10000uLL;
          unint64_t v37 = *((void *)this + 1);
          unint64_t v38 = *((void *)this + 2);
          uint64_t v39 = *(void *)this;
          if (v37 <= 0xFFFFFFFFFFFFFFF5 && v37 + 10 <= v38)
          {
            char v40 = 0;
            unsigned int v41 = 0;
            uint64_t v42 = 0;
            do
            {
              unint64_t v43 = v37 + 1;
              *((void *)this + 1) = v37 + 1;
              char v44 = *(unsigned char *)(v39 + v37);
              v42 |= (unint64_t)(v44 & 0x7F) << v40;
              if ((v44 & 0x80) == 0) {
                goto LABEL_451;
              }
              v40 += 7;
              unint64_t v37 = v43;
              BOOL v14 = v41++ > 8;
            }
            while (!v14);
LABEL_260:
            LODWORD(v42) = 0;
            goto LABEL_451;
          }
          char v243 = 0;
          unsigned int v244 = 0;
          uint64_t v42 = 0;
          if (v38 <= v37) {
            unint64_t v38 = *((void *)this + 1);
          }
          while (2)
          {
            if (v38 == v37)
            {
              LODWORD(v42) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v245 = v37 + 1;
              char v246 = *(unsigned char *)(v39 + v37);
              *((void *)this + 1) = v245;
              v42 |= (unint64_t)(v246 & 0x7F) << v243;
              if (v246 < 0)
              {
                v243 += 7;
                unint64_t v37 = v245;
                BOOL v14 = v244++ > 8;
                if (v14) {
                  goto LABEL_260;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v42) = 0;
              }
            }
            break;
          }
LABEL_451:
          *(_DWORD *)(a1 + 104) = v42;
          goto LABEL_518;
        case 4u:
          *(void *)(a1 + 192) |= 0x20000uLL;
          unint64_t v45 = *((void *)this + 1);
          unint64_t v46 = *((void *)this + 2);
          uint64_t v47 = *(void *)this;
          if (v45 <= 0xFFFFFFFFFFFFFFF5 && v45 + 10 <= v46)
          {
            char v48 = 0;
            unsigned int v49 = 0;
            uint64_t v50 = 0;
            do
            {
              unint64_t v51 = v45 + 1;
              *((void *)this + 1) = v45 + 1;
              char v52 = *(unsigned char *)(v47 + v45);
              v50 |= (unint64_t)(v52 & 0x7F) << v48;
              if ((v52 & 0x80) == 0) {
                goto LABEL_454;
              }
              v48 += 7;
              unint64_t v45 = v51;
              BOOL v14 = v49++ > 8;
            }
            while (!v14);
LABEL_267:
            LODWORD(v50) = 0;
            goto LABEL_454;
          }
          char v247 = 0;
          unsigned int v248 = 0;
          uint64_t v50 = 0;
          if (v46 <= v45) {
            unint64_t v46 = *((void *)this + 1);
          }
          while (2)
          {
            if (v46 == v45)
            {
              LODWORD(v50) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v249 = v45 + 1;
              char v250 = *(unsigned char *)(v47 + v45);
              *((void *)this + 1) = v249;
              v50 |= (unint64_t)(v250 & 0x7F) << v247;
              if (v250 < 0)
              {
                v247 += 7;
                unint64_t v45 = v249;
                BOOL v14 = v248++ > 8;
                if (v14) {
                  goto LABEL_267;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v50) = 0;
              }
            }
            break;
          }
LABEL_454:
          *(_DWORD *)(a1 + 108) = v50;
          goto LABEL_518;
        case 5u:
          *(void *)(a1 + 192) |= 0x800uLL;
          unint64_t v53 = *((void *)this + 1);
          unint64_t v54 = *((void *)this + 2);
          uint64_t v55 = *(void *)this;
          if (v53 <= 0xFFFFFFFFFFFFFFF5 && v53 + 10 <= v54)
          {
            char v56 = 0;
            unsigned int v57 = 0;
            uint64_t v58 = 0;
            do
            {
              unint64_t v59 = v53 + 1;
              *((void *)this + 1) = v53 + 1;
              char v60 = *(unsigned char *)(v55 + v53);
              v58 |= (unint64_t)(v60 & 0x7F) << v56;
              if ((v60 & 0x80) == 0) {
                goto LABEL_457;
              }
              v56 += 7;
              unint64_t v53 = v59;
              BOOL v14 = v57++ > 8;
            }
            while (!v14);
LABEL_274:
            LODWORD(v58) = 0;
            goto LABEL_457;
          }
          char v251 = 0;
          unsigned int v252 = 0;
          uint64_t v58 = 0;
          if (v54 <= v53) {
            unint64_t v54 = *((void *)this + 1);
          }
          while (2)
          {
            if (v54 == v53)
            {
              LODWORD(v58) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v253 = v53 + 1;
              char v254 = *(unsigned char *)(v55 + v53);
              *((void *)this + 1) = v253;
              v58 |= (unint64_t)(v254 & 0x7F) << v251;
              if (v254 < 0)
              {
                v251 += 7;
                unint64_t v53 = v253;
                BOOL v14 = v252++ > 8;
                if (v14) {
                  goto LABEL_274;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v58) = 0;
              }
            }
            break;
          }
LABEL_457:
          *(_DWORD *)(a1 + 84) = v58;
          goto LABEL_518;
        case 6u:
          *(void *)(a1 + 192) |= 0x8000000uLL;
          unint64_t v61 = *((void *)this + 1);
          unint64_t v62 = *((void *)this + 2);
          uint64_t v63 = *(void *)this;
          if (v61 <= 0xFFFFFFFFFFFFFFF5 && v61 + 10 <= v62)
          {
            char v64 = 0;
            unsigned int v65 = 0;
            uint64_t v66 = 0;
            do
            {
              unint64_t v67 = v61 + 1;
              *((void *)this + 1) = v61 + 1;
              char v68 = *(unsigned char *)(v63 + v61);
              v66 |= (unint64_t)(v68 & 0x7F) << v64;
              if ((v68 & 0x80) == 0) {
                goto LABEL_460;
              }
              v64 += 7;
              unint64_t v61 = v67;
              BOOL v14 = v65++ > 8;
            }
            while (!v14);
LABEL_281:
            LODWORD(v66) = 0;
            goto LABEL_460;
          }
          char v255 = 0;
          unsigned int v256 = 0;
          uint64_t v66 = 0;
          if (v62 <= v61) {
            unint64_t v62 = *((void *)this + 1);
          }
          while (2)
          {
            if (v62 == v61)
            {
              LODWORD(v66) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v257 = v61 + 1;
              char v258 = *(unsigned char *)(v63 + v61);
              *((void *)this + 1) = v257;
              v66 |= (unint64_t)(v258 & 0x7F) << v255;
              if (v258 < 0)
              {
                v255 += 7;
                unint64_t v61 = v257;
                BOOL v14 = v256++ > 8;
                if (v14) {
                  goto LABEL_281;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v66) = 0;
              }
            }
            break;
          }
LABEL_460:
          *(_DWORD *)(a1 + 148) = v66;
          goto LABEL_518;
        case 7u:
          *(void *)(a1 + 192) |= 0x2000uLL;
          unint64_t v69 = *((void *)this + 1);
          unint64_t v70 = *((void *)this + 2);
          uint64_t v71 = *(void *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_463;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_288:
            LODWORD(v74) = 0;
            goto LABEL_463;
          }
          char v259 = 0;
          unsigned int v260 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)this + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v261 = v69 + 1;
              char v262 = *(unsigned char *)(v71 + v69);
              *((void *)this + 1) = v261;
              v74 |= (unint64_t)(v262 & 0x7F) << v259;
              if (v262 < 0)
              {
                v259 += 7;
                unint64_t v69 = v261;
                BOOL v14 = v260++ > 8;
                if (v14) {
                  goto LABEL_288;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_463:
          *(_DWORD *)(a1 + 92) = v74;
          goto LABEL_518;
        case 8u:
          *(void *)(a1 + 192) |= 0x1000uLL;
          unint64_t v77 = *((void *)this + 1);
          unint64_t v78 = *((void *)this + 2);
          uint64_t v79 = *(void *)this;
          if (v77 <= 0xFFFFFFFFFFFFFFF5 && v77 + 10 <= v78)
          {
            char v80 = 0;
            unsigned int v81 = 0;
            uint64_t v82 = 0;
            do
            {
              unint64_t v83 = v77 + 1;
              *((void *)this + 1) = v77 + 1;
              char v84 = *(unsigned char *)(v79 + v77);
              v82 |= (unint64_t)(v84 & 0x7F) << v80;
              if ((v84 & 0x80) == 0) {
                goto LABEL_466;
              }
              v80 += 7;
              unint64_t v77 = v83;
              BOOL v14 = v81++ > 8;
            }
            while (!v14);
LABEL_295:
            LODWORD(v82) = 0;
            goto LABEL_466;
          }
          char v263 = 0;
          unsigned int v264 = 0;
          uint64_t v82 = 0;
          if (v78 <= v77) {
            unint64_t v78 = *((void *)this + 1);
          }
          while (2)
          {
            if (v78 == v77)
            {
              LODWORD(v82) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v265 = v77 + 1;
              char v266 = *(unsigned char *)(v79 + v77);
              *((void *)this + 1) = v265;
              v82 |= (unint64_t)(v266 & 0x7F) << v263;
              if (v266 < 0)
              {
                v263 += 7;
                unint64_t v77 = v265;
                BOOL v14 = v264++ > 8;
                if (v14) {
                  goto LABEL_295;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v82) = 0;
              }
            }
            break;
          }
LABEL_466:
          *(_DWORD *)(a1 + 88) = v82;
          goto LABEL_518;
        case 9u:
          *(void *)(a1 + 192) |= 0x1000000uLL;
          unint64_t v85 = *((void *)this + 1);
          unint64_t v86 = *((void *)this + 2);
          uint64_t v87 = *(void *)this;
          if (v85 <= 0xFFFFFFFFFFFFFFF5 && v85 + 10 <= v86)
          {
            char v88 = 0;
            unsigned int v89 = 0;
            uint64_t v90 = 0;
            do
            {
              unint64_t v91 = v85 + 1;
              *((void *)this + 1) = v85 + 1;
              char v92 = *(unsigned char *)(v87 + v85);
              v90 |= (unint64_t)(v92 & 0x7F) << v88;
              if ((v92 & 0x80) == 0) {
                goto LABEL_469;
              }
              v88 += 7;
              unint64_t v85 = v91;
              BOOL v14 = v89++ > 8;
            }
            while (!v14);
LABEL_302:
            LODWORD(v90) = 0;
            goto LABEL_469;
          }
          char v267 = 0;
          unsigned int v268 = 0;
          uint64_t v90 = 0;
          if (v86 <= v85) {
            unint64_t v86 = *((void *)this + 1);
          }
          while (2)
          {
            if (v86 == v85)
            {
              LODWORD(v90) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v269 = v85 + 1;
              char v270 = *(unsigned char *)(v87 + v85);
              *((void *)this + 1) = v269;
              v90 |= (unint64_t)(v270 & 0x7F) << v267;
              if (v270 < 0)
              {
                v267 += 7;
                unint64_t v85 = v269;
                BOOL v14 = v268++ > 8;
                if (v14) {
                  goto LABEL_302;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v90) = 0;
              }
            }
            break;
          }
LABEL_469:
          *(_DWORD *)(a1 + 136) = v90;
          goto LABEL_518;
        case 0xAu:
          *(void *)(a1 + 192) |= 8uLL;
          unint64_t v93 = *((void *)this + 1);
          if (v93 > 0xFFFFFFFFFFFFFFF7 || v93 + 8 > *((void *)this + 2)) {
            goto LABEL_232;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v93);
          goto LABEL_93;
        case 0xBu:
          *(void *)(a1 + 192) |= 1uLL;
          unint64_t v94 = *((void *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFF7 || v94 + 8 > *((void *)this + 2)) {
            goto LABEL_232;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v94);
LABEL_93:
          uint64_t v95 = *((void *)this + 1) + 8;
          goto LABEL_417;
        case 0xCu:
          *(void *)(a1 + 192) |= 4uLL;
          unint64_t v96 = *((void *)this + 1);
          unint64_t v97 = *((void *)this + 2);
          uint64_t v98 = *(void *)this;
          if (v96 <= 0xFFFFFFFFFFFFFFF5 && v96 + 10 <= v97)
          {
            char v99 = 0;
            unsigned int v100 = 0;
            uint64_t v101 = 0;
            do
            {
              unint64_t v102 = v96 + 1;
              *((void *)this + 1) = v96 + 1;
              char v103 = *(unsigned char *)(v98 + v96);
              v101 |= (unint64_t)(v103 & 0x7F) << v99;
              if ((v103 & 0x80) == 0) {
                goto LABEL_472;
              }
              v99 += 7;
              unint64_t v96 = v102;
              BOOL v14 = v100++ > 8;
            }
            while (!v14);
LABEL_309:
            uint64_t v101 = 0;
            goto LABEL_472;
          }
          char v271 = 0;
          unsigned int v272 = 0;
          uint64_t v101 = 0;
          if (v97 <= v96) {
            unint64_t v97 = *((void *)this + 1);
          }
          while (2)
          {
            if (v97 == v96)
            {
              uint64_t v101 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v273 = v96 + 1;
              char v274 = *(unsigned char *)(v98 + v96);
              *((void *)this + 1) = v273;
              v101 |= (unint64_t)(v274 & 0x7F) << v271;
              if (v274 < 0)
              {
                v271 += 7;
                unint64_t v96 = v273;
                BOOL v14 = v272++ > 8;
                if (v14) {
                  goto LABEL_309;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v101 = 0;
              }
            }
            break;
          }
LABEL_472:
          *(void *)(a1 + 24) = v101;
          goto LABEL_518;
        case 0xDu:
          *(void *)(a1 + 192) |= 2uLL;
          unint64_t v104 = *((void *)this + 1);
          unint64_t v105 = *((void *)this + 2);
          uint64_t v106 = *(void *)this;
          if (v104 <= 0xFFFFFFFFFFFFFFF5 && v104 + 10 <= v105)
          {
            char v107 = 0;
            unsigned int v108 = 0;
            uint64_t v109 = 0;
            do
            {
              unint64_t v110 = v104 + 1;
              *((void *)this + 1) = v104 + 1;
              char v111 = *(unsigned char *)(v106 + v104);
              v109 |= (unint64_t)(v111 & 0x7F) << v107;
              if ((v111 & 0x80) == 0) {
                goto LABEL_475;
              }
              v107 += 7;
              unint64_t v104 = v110;
              BOOL v14 = v108++ > 8;
            }
            while (!v14);
LABEL_316:
            uint64_t v109 = 0;
            goto LABEL_475;
          }
          char v275 = 0;
          unsigned int v276 = 0;
          uint64_t v109 = 0;
          if (v105 <= v104) {
            unint64_t v105 = *((void *)this + 1);
          }
          while (2)
          {
            if (v105 == v104)
            {
              uint64_t v109 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v277 = v104 + 1;
              char v278 = *(unsigned char *)(v106 + v104);
              *((void *)this + 1) = v277;
              v109 |= (unint64_t)(v278 & 0x7F) << v275;
              if (v278 < 0)
              {
                v275 += 7;
                unint64_t v104 = v277;
                BOOL v14 = v276++ > 8;
                if (v14) {
                  goto LABEL_316;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v109 = 0;
              }
            }
            break;
          }
LABEL_475:
          *(void *)(a1 + 16) = v109;
          goto LABEL_518;
        case 0xEu:
          *(void *)(a1 + 192) |= 0x80uLL;
          unint64_t v112 = *((void *)this + 1);
          unint64_t v113 = *((void *)this + 2);
          uint64_t v114 = *(void *)this;
          if (v112 <= 0xFFFFFFFFFFFFFFF5 && v112 + 10 <= v113)
          {
            char v115 = 0;
            unsigned int v116 = 0;
            uint64_t v117 = 0;
            do
            {
              unint64_t v118 = v112 + 1;
              *((void *)this + 1) = v112 + 1;
              char v119 = *(unsigned char *)(v114 + v112);
              v117 |= (unint64_t)(v119 & 0x7F) << v115;
              if ((v119 & 0x80) == 0) {
                goto LABEL_478;
              }
              v115 += 7;
              unint64_t v112 = v118;
              BOOL v14 = v116++ > 8;
            }
            while (!v14);
LABEL_323:
            LODWORD(v117) = 0;
            goto LABEL_478;
          }
          char v279 = 0;
          unsigned int v280 = 0;
          uint64_t v117 = 0;
          if (v113 <= v112) {
            unint64_t v113 = *((void *)this + 1);
          }
          while (2)
          {
            if (v113 == v112)
            {
              LODWORD(v117) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v281 = v112 + 1;
              char v282 = *(unsigned char *)(v114 + v112);
              *((void *)this + 1) = v281;
              v117 |= (unint64_t)(v282 & 0x7F) << v279;
              if (v282 < 0)
              {
                v279 += 7;
                unint64_t v112 = v281;
                BOOL v14 = v280++ > 8;
                if (v14) {
                  goto LABEL_323;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v117) = 0;
              }
            }
            break;
          }
LABEL_478:
          *(_DWORD *)(a1 + 68) = v117;
          goto LABEL_518;
        case 0xFu:
          *(void *)(a1 + 192) |= 0x20000000uLL;
          unint64_t v120 = *((void *)this + 1);
          if (v120 > 0xFFFFFFFFFFFFFFFBLL || v120 + 4 > *((void *)this + 2)) {
            goto LABEL_232;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v120);
          goto LABEL_416;
        case 0x10u:
          *(void *)(a1 + 192) |= 0x4000000uLL;
          unint64_t v121 = *((void *)this + 1);
          unint64_t v122 = *((void *)this + 2);
          uint64_t v123 = *(void *)this;
          if (v121 <= 0xFFFFFFFFFFFFFFF5 && v121 + 10 <= v122)
          {
            char v124 = 0;
            unsigned int v125 = 0;
            uint64_t v126 = 0;
            do
            {
              unint64_t v127 = v121 + 1;
              *((void *)this + 1) = v121 + 1;
              char v128 = *(unsigned char *)(v123 + v121);
              v126 |= (unint64_t)(v128 & 0x7F) << v124;
              if ((v128 & 0x80) == 0) {
                goto LABEL_481;
              }
              v124 += 7;
              unint64_t v121 = v127;
              BOOL v14 = v125++ > 8;
            }
            while (!v14);
LABEL_330:
            LODWORD(v126) = 0;
            goto LABEL_481;
          }
          char v283 = 0;
          unsigned int v284 = 0;
          uint64_t v126 = 0;
          if (v122 <= v121) {
            unint64_t v122 = *((void *)this + 1);
          }
          while (2)
          {
            if (v122 == v121)
            {
              LODWORD(v126) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v285 = v121 + 1;
              char v286 = *(unsigned char *)(v123 + v121);
              *((void *)this + 1) = v285;
              v126 |= (unint64_t)(v286 & 0x7F) << v283;
              if (v286 < 0)
              {
                v283 += 7;
                unint64_t v121 = v285;
                BOOL v14 = v284++ > 8;
                if (v14) {
                  goto LABEL_330;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v126) = 0;
              }
            }
            break;
          }
LABEL_481:
          *(_DWORD *)(a1 + 144) = v126;
          goto LABEL_518;
        case 0x11u:
          *(void *)(a1 + 192) |= 0x4000uLL;
          unint64_t v129 = *((void *)this + 1);
          if (v129 > 0xFFFFFFFFFFFFFFFBLL || v129 + 4 > *((void *)this + 2)) {
            goto LABEL_232;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v129);
          goto LABEL_416;
        case 0x12u:
          *(void *)(a1 + 192) |= 0x400000uLL;
          unint64_t v130 = *((void *)this + 1);
          if (v130 > 0xFFFFFFFFFFFFFFFBLL || v130 + 4 > *((void *)this + 2)) {
            goto LABEL_232;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v130);
          goto LABEL_416;
        case 0x13u:
          *(void *)(a1 + 192) |= 0x200000uLL;
          unint64_t v131 = *((void *)this + 1);
          if (v131 > 0xFFFFFFFFFFFFFFFBLL || v131 + 4 > *((void *)this + 2)) {
            goto LABEL_232;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v131);
          goto LABEL_416;
        case 0x14u:
          *(void *)(a1 + 192) |= 0x800000uLL;
          unint64_t v132 = *((void *)this + 1);
          if (v132 > 0xFFFFFFFFFFFFFFFBLL || v132 + 4 > *((void *)this + 2)) {
            goto LABEL_232;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v132);
          goto LABEL_416;
        case 0x15u:
          *(void *)(a1 + 192) |= 0x10uLL;
          unint64_t v133 = *((void *)this + 1);
          unint64_t v134 = *((void *)this + 2);
          uint64_t v135 = *(void *)this;
          if (v133 <= 0xFFFFFFFFFFFFFFF5 && v133 + 10 <= v134)
          {
            char v136 = 0;
            unsigned int v137 = 0;
            uint64_t v138 = 0;
            do
            {
              unint64_t v139 = v133 + 1;
              *((void *)this + 1) = v133 + 1;
              char v140 = *(unsigned char *)(v135 + v133);
              v138 |= (unint64_t)(v140 & 0x7F) << v136;
              if ((v140 & 0x80) == 0) {
                goto LABEL_484;
              }
              v136 += 7;
              unint64_t v133 = v139;
              BOOL v14 = v137++ > 8;
            }
            while (!v14);
LABEL_337:
            uint64_t v138 = 0;
            goto LABEL_484;
          }
          char v287 = 0;
          unsigned int v288 = 0;
          uint64_t v138 = 0;
          if (v134 <= v133) {
            unint64_t v134 = *((void *)this + 1);
          }
          while (2)
          {
            if (v134 == v133)
            {
              uint64_t v138 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v289 = v133 + 1;
              char v290 = *(unsigned char *)(v135 + v133);
              *((void *)this + 1) = v289;
              v138 |= (unint64_t)(v290 & 0x7F) << v287;
              if (v290 < 0)
              {
                v287 += 7;
                unint64_t v133 = v289;
                BOOL v14 = v288++ > 8;
                if (v14) {
                  goto LABEL_337;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v138 = 0;
              }
            }
            break;
          }
LABEL_484:
          *(void *)(a1 + 48) = v138;
          goto LABEL_518;
        case 0x16u:
          *(void *)(a1 + 192) |= 0x800000000uLL;
          unint64_t v141 = *((void *)this + 1);
          unint64_t v142 = *((void *)this + 2);
          uint64_t v143 = *(void *)this;
          if (v141 <= 0xFFFFFFFFFFFFFFF5 && v141 + 10 <= v142)
          {
            char v144 = 0;
            unsigned int v145 = 0;
            uint64_t v146 = 0;
            do
            {
              unint64_t v147 = v141 + 1;
              *((void *)this + 1) = v141 + 1;
              char v148 = *(unsigned char *)(v143 + v141);
              v146 |= (unint64_t)(v148 & 0x7F) << v144;
              if ((v148 & 0x80) == 0) {
                goto LABEL_487;
              }
              v144 += 7;
              unint64_t v141 = v147;
              BOOL v14 = v145++ > 8;
            }
            while (!v14);
LABEL_344:
            LODWORD(v146) = 0;
            goto LABEL_487;
          }
          char v291 = 0;
          unsigned int v292 = 0;
          uint64_t v146 = 0;
          if (v142 <= v141) {
            unint64_t v142 = *((void *)this + 1);
          }
          while (2)
          {
            if (v142 == v141)
            {
              LODWORD(v146) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v293 = v141 + 1;
              char v294 = *(unsigned char *)(v143 + v141);
              *((void *)this + 1) = v293;
              v146 |= (unint64_t)(v294 & 0x7F) << v291;
              if (v294 < 0)
              {
                v291 += 7;
                unint64_t v141 = v293;
                BOOL v14 = v292++ > 8;
                if (v14) {
                  goto LABEL_344;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v146) = 0;
              }
            }
            break;
          }
LABEL_487:
          *(_DWORD *)(a1 + 180) = v146;
          goto LABEL_518;
        case 0x17u:
          *(void *)(a1 + 192) |= 0x40000000uLL;
          unint64_t v149 = *((void *)this + 1);
          unint64_t v150 = *((void *)this + 2);
          uint64_t v151 = *(void *)this;
          if (v149 <= 0xFFFFFFFFFFFFFFF5 && v149 + 10 <= v150)
          {
            char v152 = 0;
            unsigned int v153 = 0;
            uint64_t v154 = 0;
            do
            {
              unint64_t v155 = v149 + 1;
              *((void *)this + 1) = v149 + 1;
              char v156 = *(unsigned char *)(v151 + v149);
              v154 |= (unint64_t)(v156 & 0x7F) << v152;
              if ((v156 & 0x80) == 0) {
                goto LABEL_490;
              }
              v152 += 7;
              unint64_t v149 = v155;
              BOOL v14 = v153++ > 8;
            }
            while (!v14);
LABEL_351:
            LODWORD(v154) = 0;
            goto LABEL_490;
          }
          char v295 = 0;
          unsigned int v296 = 0;
          uint64_t v154 = 0;
          if (v150 <= v149) {
            unint64_t v150 = *((void *)this + 1);
          }
          while (2)
          {
            if (v150 == v149)
            {
              LODWORD(v154) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v297 = v149 + 1;
              char v298 = *(unsigned char *)(v151 + v149);
              *((void *)this + 1) = v297;
              v154 |= (unint64_t)(v298 & 0x7F) << v295;
              if (v298 < 0)
              {
                v295 += 7;
                unint64_t v149 = v297;
                BOOL v14 = v296++ > 8;
                if (v14) {
                  goto LABEL_351;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v154) = 0;
              }
            }
            break;
          }
LABEL_490:
          *(_DWORD *)(a1 + 160) = v154;
          goto LABEL_518;
        case 0x18u:
          *(void *)(a1 + 192) |= 0x100000uLL;
          unint64_t v157 = *((void *)this + 1);
          unint64_t v158 = *((void *)this + 2);
          uint64_t v159 = *(void *)this;
          if (v157 <= 0xFFFFFFFFFFFFFFF5 && v157 + 10 <= v158)
          {
            char v160 = 0;
            unsigned int v161 = 0;
            uint64_t v162 = 0;
            do
            {
              unint64_t v163 = v157 + 1;
              *((void *)this + 1) = v157 + 1;
              char v164 = *(unsigned char *)(v159 + v157);
              v162 |= (unint64_t)(v164 & 0x7F) << v160;
              if ((v164 & 0x80) == 0) {
                goto LABEL_493;
              }
              v160 += 7;
              unint64_t v157 = v163;
              BOOL v14 = v161++ > 8;
            }
            while (!v14);
LABEL_358:
            LODWORD(v162) = 0;
            goto LABEL_493;
          }
          char v299 = 0;
          unsigned int v300 = 0;
          uint64_t v162 = 0;
          if (v158 <= v157) {
            unint64_t v158 = *((void *)this + 1);
          }
          while (2)
          {
            if (v158 == v157)
            {
              LODWORD(v162) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v301 = v157 + 1;
              char v302 = *(unsigned char *)(v159 + v157);
              *((void *)this + 1) = v301;
              v162 |= (unint64_t)(v302 & 0x7F) << v299;
              if (v302 < 0)
              {
                v299 += 7;
                unint64_t v157 = v301;
                BOOL v14 = v300++ > 8;
                if (v14) {
                  goto LABEL_358;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v162) = 0;
              }
            }
            break;
          }
LABEL_493:
          *(_DWORD *)(a1 + 120) = v162;
          goto LABEL_518;
        case 0x19u:
          *(void *)(a1 + 192) |= 0x80000uLL;
          unint64_t v165 = *((void *)this + 1);
          unint64_t v166 = *((void *)this + 2);
          uint64_t v167 = *(void *)this;
          if (v165 <= 0xFFFFFFFFFFFFFFF5 && v165 + 10 <= v166)
          {
            char v168 = 0;
            unsigned int v169 = 0;
            uint64_t v170 = 0;
            do
            {
              unint64_t v171 = v165 + 1;
              *((void *)this + 1) = v165 + 1;
              char v172 = *(unsigned char *)(v167 + v165);
              v170 |= (unint64_t)(v172 & 0x7F) << v168;
              if ((v172 & 0x80) == 0) {
                goto LABEL_496;
              }
              v168 += 7;
              unint64_t v165 = v171;
              BOOL v14 = v169++ > 8;
            }
            while (!v14);
LABEL_365:
            LODWORD(v170) = 0;
            goto LABEL_496;
          }
          char v303 = 0;
          unsigned int v304 = 0;
          uint64_t v170 = 0;
          if (v166 <= v165) {
            unint64_t v166 = *((void *)this + 1);
          }
          while (2)
          {
            if (v166 == v165)
            {
              LODWORD(v170) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v305 = v165 + 1;
              char v306 = *(unsigned char *)(v167 + v165);
              *((void *)this + 1) = v305;
              v170 |= (unint64_t)(v306 & 0x7F) << v303;
              if (v306 < 0)
              {
                v303 += 7;
                unint64_t v165 = v305;
                BOOL v14 = v304++ > 8;
                if (v14) {
                  goto LABEL_365;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v170) = 0;
              }
            }
            break;
          }
LABEL_496:
          *(_DWORD *)(a1 + 116) = v170;
          goto LABEL_518;
        case 0x1Au:
          *(void *)(a1 + 192) |= 0x40000uLL;
          unint64_t v173 = *((void *)this + 1);
          unint64_t v174 = *((void *)this + 2);
          uint64_t v175 = *(void *)this;
          if (v173 <= 0xFFFFFFFFFFFFFFF5 && v173 + 10 <= v174)
          {
            char v176 = 0;
            unsigned int v177 = 0;
            uint64_t v178 = 0;
            do
            {
              unint64_t v179 = v173 + 1;
              *((void *)this + 1) = v173 + 1;
              char v180 = *(unsigned char *)(v175 + v173);
              v178 |= (unint64_t)(v180 & 0x7F) << v176;
              if ((v180 & 0x80) == 0) {
                goto LABEL_499;
              }
              v176 += 7;
              unint64_t v173 = v179;
              BOOL v14 = v177++ > 8;
            }
            while (!v14);
LABEL_372:
            LODWORD(v178) = 0;
            goto LABEL_499;
          }
          char v307 = 0;
          unsigned int v308 = 0;
          uint64_t v178 = 0;
          if (v174 <= v173) {
            unint64_t v174 = *((void *)this + 1);
          }
          while (2)
          {
            if (v174 == v173)
            {
              LODWORD(v178) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v309 = v173 + 1;
              char v310 = *(unsigned char *)(v175 + v173);
              *((void *)this + 1) = v309;
              v178 |= (unint64_t)(v310 & 0x7F) << v307;
              if (v310 < 0)
              {
                v307 += 7;
                unint64_t v173 = v309;
                BOOL v14 = v308++ > 8;
                if (v14) {
                  goto LABEL_372;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v178) = 0;
              }
            }
            break;
          }
LABEL_499:
          *(_DWORD *)(a1 + 112) = v178;
          goto LABEL_518;
        case 0x1Bu:
          operator new();
        case 0x1Cu:
          *(void *)(a1 + 192) |= 0x400uLL;
          unint64_t v181 = *((void *)this + 1);
          if (v181 > 0xFFFFFFFFFFFFFFFBLL || v181 + 4 > *((void *)this + 2)) {
            goto LABEL_232;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v181);
          goto LABEL_416;
        case 0x1Du:
          *(void *)(a1 + 192) |= 0x200uLL;
          unint64_t v182 = *((void *)this + 1);
          if (v182 > 0xFFFFFFFFFFFFFFFBLL || v182 + 4 > *((void *)this + 2)) {
            goto LABEL_232;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v182);
          goto LABEL_416;
        case 0x1Eu:
          *(void *)(a1 + 192) |= 0x2000000uLL;
          unint64_t v183 = *((void *)this + 1);
          if (v183 > 0xFFFFFFFFFFFFFFFBLL || v183 + 4 > *((void *)this + 2)) {
            goto LABEL_232;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v183);
          goto LABEL_416;
        case 0x1Fu:
          *(void *)(a1 + 192) |= 0x1000000000uLL;
          unint64_t v184 = *((void *)this + 1);
          unint64_t v185 = *((void *)this + 2);
          uint64_t v186 = *(void *)this;
          if (v184 <= 0xFFFFFFFFFFFFFFF5 && v184 + 10 <= v185)
          {
            char v187 = 0;
            unsigned int v188 = 0;
            uint64_t v189 = 0;
            do
            {
              unint64_t v190 = v184 + 1;
              *((void *)this + 1) = v184 + 1;
              char v191 = *(unsigned char *)(v186 + v184);
              v189 |= (unint64_t)(v191 & 0x7F) << v187;
              if ((v191 & 0x80) == 0) {
                goto LABEL_502;
              }
              v187 += 7;
              unint64_t v184 = v190;
              BOOL v14 = v188++ > 8;
            }
            while (!v14);
LABEL_379:
            LODWORD(v189) = 0;
            goto LABEL_502;
          }
          char v311 = 0;
          unsigned int v312 = 0;
          uint64_t v189 = 0;
          if (v185 <= v184) {
            unint64_t v185 = *((void *)this + 1);
          }
          while (2)
          {
            if (v185 == v184)
            {
              LODWORD(v189) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v313 = v184 + 1;
              char v314 = *(unsigned char *)(v186 + v184);
              *((void *)this + 1) = v313;
              v189 |= (unint64_t)(v314 & 0x7F) << v311;
              if (v314 < 0)
              {
                v311 += 7;
                unint64_t v184 = v313;
                BOOL v14 = v312++ > 8;
                if (v14) {
                  goto LABEL_379;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v189) = 0;
              }
            }
            break;
          }
LABEL_502:
          *(_DWORD *)(a1 + 184) = v189;
          goto LABEL_518;
        case 0x20u:
          *(void *)(a1 + 192) |= 0x20uLL;
          unint64_t v192 = *((void *)this + 1);
          unint64_t v193 = *((void *)this + 2);
          uint64_t v194 = *(void *)this;
          if (v192 <= 0xFFFFFFFFFFFFFFF5 && v192 + 10 <= v193)
          {
            char v195 = 0;
            unsigned int v196 = 0;
            uint64_t v197 = 0;
            do
            {
              unint64_t v198 = v192 + 1;
              *((void *)this + 1) = v192 + 1;
              char v199 = *(unsigned char *)(v194 + v192);
              v197 |= (unint64_t)(v199 & 0x7F) << v195;
              if ((v199 & 0x80) == 0) {
                goto LABEL_505;
              }
              v195 += 7;
              unint64_t v192 = v198;
              BOOL v14 = v196++ > 8;
            }
            while (!v14);
LABEL_386:
            uint64_t v197 = 0;
            goto LABEL_505;
          }
          char v315 = 0;
          unsigned int v316 = 0;
          uint64_t v197 = 0;
          if (v193 <= v192) {
            unint64_t v193 = *((void *)this + 1);
          }
          while (2)
          {
            if (v193 == v192)
            {
              uint64_t v197 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v317 = v192 + 1;
              char v318 = *(unsigned char *)(v194 + v192);
              *((void *)this + 1) = v317;
              v197 |= (unint64_t)(v318 & 0x7F) << v315;
              if (v318 < 0)
              {
                v315 += 7;
                unint64_t v192 = v317;
                BOOL v14 = v316++ > 8;
                if (v14) {
                  goto LABEL_386;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v197 = 0;
              }
            }
            break;
          }
LABEL_505:
          *(void *)(a1 + 56) = v197;
          goto LABEL_518;
        case 0x21u:
          *(void *)(a1 + 192) |= 0x10000000uLL;
          unint64_t v200 = *((void *)this + 1);
          unint64_t v201 = *((void *)this + 2);
          uint64_t v202 = *(void *)this;
          if (v200 <= 0xFFFFFFFFFFFFFFF5 && v200 + 10 <= v201)
          {
            char v203 = 0;
            unsigned int v204 = 0;
            uint64_t v205 = 0;
            do
            {
              unint64_t v206 = v200 + 1;
              *((void *)this + 1) = v200 + 1;
              char v207 = *(unsigned char *)(v202 + v200);
              v205 |= (unint64_t)(v207 & 0x7F) << v203;
              if ((v207 & 0x80) == 0) {
                goto LABEL_508;
              }
              v203 += 7;
              unint64_t v200 = v206;
              BOOL v14 = v204++ > 8;
            }
            while (!v14);
LABEL_393:
            LODWORD(v205) = 0;
            goto LABEL_508;
          }
          char v319 = 0;
          unsigned int v320 = 0;
          uint64_t v205 = 0;
          if (v201 <= v200) {
            unint64_t v201 = *((void *)this + 1);
          }
          while (2)
          {
            if (v201 == v200)
            {
              LODWORD(v205) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v321 = v200 + 1;
              char v322 = *(unsigned char *)(v202 + v200);
              *((void *)this + 1) = v321;
              v205 |= (unint64_t)(v322 & 0x7F) << v319;
              if (v322 < 0)
              {
                v319 += 7;
                unint64_t v200 = v321;
                BOOL v14 = v320++ > 8;
                if (v14) {
                  goto LABEL_393;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v205) = 0;
              }
            }
            break;
          }
LABEL_508:
          *(_DWORD *)(a1 + 152) = v205;
          goto LABEL_518;
        case 0x22u:
          *(void *)(a1 + 192) |= 0x2000000000uLL;
          unint64_t v208 = *((void *)this + 1);
          unint64_t v209 = *((void *)this + 2);
          uint64_t v210 = *(void *)this;
          if (v208 <= 0xFFFFFFFFFFFFFFF5 && v208 + 10 <= v209)
          {
            char v211 = 0;
            unsigned int v212 = 0;
            uint64_t v213 = 0;
            do
            {
              unint64_t v214 = v208 + 1;
              *((void *)this + 1) = v208 + 1;
              char v215 = *(unsigned char *)(v210 + v208);
              v213 |= (unint64_t)(v215 & 0x7F) << v211;
              if ((v215 & 0x80) == 0) {
                goto LABEL_511;
              }
              v211 += 7;
              unint64_t v208 = v214;
              BOOL v14 = v212++ > 8;
            }
            while (!v14);
LABEL_400:
            LODWORD(v213) = 0;
            goto LABEL_511;
          }
          char v323 = 0;
          unsigned int v324 = 0;
          uint64_t v213 = 0;
          if (v209 <= v208) {
            unint64_t v209 = *((void *)this + 1);
          }
          while (2)
          {
            if (v209 == v208)
            {
              LODWORD(v213) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v325 = v208 + 1;
              char v326 = *(unsigned char *)(v210 + v208);
              *((void *)this + 1) = v325;
              v213 |= (unint64_t)(v326 & 0x7F) << v323;
              if (v326 < 0)
              {
                v323 += 7;
                unint64_t v208 = v325;
                BOOL v14 = v324++ > 8;
                if (v14) {
                  goto LABEL_400;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v213) = 0;
              }
            }
            break;
          }
LABEL_511:
          *(_DWORD *)(a1 + 188) = v213;
          goto LABEL_518;
        case 0x23u:
          *(void *)(a1 + 192) |= 0x40uLL;
          unint64_t v216 = *((void *)this + 1);
          unint64_t v217 = *((void *)this + 2);
          uint64_t v218 = *(void *)this;
          if (v216 <= 0xFFFFFFFFFFFFFFF5 && v216 + 10 <= v217)
          {
            char v219 = 0;
            unsigned int v220 = 0;
            uint64_t v221 = 0;
            do
            {
              unint64_t v222 = v216 + 1;
              *((void *)this + 1) = v216 + 1;
              char v223 = *(unsigned char *)(v218 + v216);
              v221 |= (unint64_t)(v223 & 0x7F) << v219;
              if ((v223 & 0x80) == 0) {
                goto LABEL_514;
              }
              v219 += 7;
              unint64_t v216 = v222;
              BOOL v14 = v220++ > 8;
            }
            while (!v14);
LABEL_407:
            LODWORD(v221) = 0;
            goto LABEL_514;
          }
          char v327 = 0;
          unsigned int v328 = 0;
          uint64_t v221 = 0;
          if (v217 <= v216) {
            unint64_t v217 = *((void *)this + 1);
          }
          while (2)
          {
            if (v217 == v216)
            {
              LODWORD(v221) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v329 = v216 + 1;
              char v330 = *(unsigned char *)(v218 + v216);
              *((void *)this + 1) = v329;
              v221 |= (unint64_t)(v330 & 0x7F) << v327;
              if (v330 < 0)
              {
                v327 += 7;
                unint64_t v216 = v329;
                BOOL v14 = v328++ > 8;
                if (v14) {
                  goto LABEL_407;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v221) = 0;
              }
            }
            break;
          }
LABEL_514:
          *(_DWORD *)(a1 + 64) = v221;
          goto LABEL_518;
        case 0x24u:
          *(void *)(a1 + 192) |= 0x80000000uLL;
          unint64_t v224 = *((void *)this + 1);
          if (v224 > 0xFFFFFFFFFFFFFFFBLL || v224 + 4 > *((void *)this + 2)) {
            goto LABEL_232;
          }
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v224);
          goto LABEL_416;
        case 0x25u:
          *(void *)(a1 + 192) |= 0x100000000uLL;
          unint64_t v225 = *((void *)this + 1);
          if (v225 > 0xFFFFFFFFFFFFFFFBLL || v225 + 4 > *((void *)this + 2)) {
            goto LABEL_232;
          }
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(void *)this + v225);
          goto LABEL_416;
        case 0x26u:
          *(void *)(a1 + 192) |= 0x200000000uLL;
          unint64_t v226 = *((void *)this + 1);
          if (v226 <= 0xFFFFFFFFFFFFFFFBLL && v226 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(void *)this + v226);
LABEL_416:
            uint64_t v95 = *((void *)this + 1) + 4;
LABEL_417:
            *((void *)this + 1) = v95;
          }
          else
          {
LABEL_232:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_518;
        case 0x27u:
          *(void *)(a1 + 192) |= 0x400000000uLL;
          unint64_t v227 = *((void *)this + 1);
          unint64_t v228 = *((void *)this + 2);
          uint64_t v229 = *(void *)this;
          if (v227 <= 0xFFFFFFFFFFFFFFF5 && v227 + 10 <= v228)
          {
            char v230 = 0;
            unsigned int v231 = 0;
            uint64_t v232 = 0;
            do
            {
              unint64_t v233 = v227 + 1;
              *((void *)this + 1) = v227 + 1;
              char v234 = *(unsigned char *)(v229 + v227);
              v232 |= (unint64_t)(v234 & 0x7F) << v230;
              if ((v234 & 0x80) == 0) {
                goto LABEL_517;
              }
              v230 += 7;
              unint64_t v227 = v233;
              BOOL v14 = v231++ > 8;
            }
            while (!v14);
LABEL_414:
            LODWORD(v232) = 0;
            goto LABEL_517;
          }
          char v331 = 0;
          unsigned int v332 = 0;
          uint64_t v232 = 0;
          if (v228 <= v227) {
            unint64_t v228 = *((void *)this + 1);
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_518;
      }
      while (1)
      {
        if (v228 == v227)
        {
          LODWORD(v232) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_517;
        }
        unint64_t v333 = v227 + 1;
        char v334 = *(unsigned char *)(v229 + v227);
        *((void *)this + 1) = v333;
        v232 |= (unint64_t)(v334 & 0x7F) << v331;
        if ((v334 & 0x80) == 0) {
          break;
        }
        v331 += 7;
        unint64_t v227 = v333;
        BOOL v14 = v332++ > 8;
        if (v14) {
          goto LABEL_414;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v232) = 0;
      }
LABEL_517:
      *(_DWORD *)(a1 + 176) = v232;
LABEL_518:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903F3F28(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 192);
  if ((v4 & 0x8000) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    uint64_t v4 = *(void *)(v3 + 192);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x10000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x10000) == 0)
  {
LABEL_4:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x20000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 1) == 0)
  {
LABEL_12:
    if ((v4 & 4) == 0) {
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 4) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 2) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x4000) == 0)
  {
LABEL_18:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x400000) == 0)
  {
LABEL_19:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x200000) == 0)
  {
LABEL_20:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x800000) == 0)
  {
LABEL_21:
    if ((v4 & 0x10) == 0) {
      goto LABEL_22;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x10) == 0)
  {
LABEL_22:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x100000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 192);
  if ((v4 & 0x80000) == 0)
  {
LABEL_26:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_67:
  uint64_t result = PB::Writer::writeVarInt(this);
  if ((*(void *)(v3 + 192) & 0x40000) != 0) {
LABEL_27:
  }
    uint64_t result = PB::Writer::writeVarInt(this);
LABEL_28:
  uint64_t v5 = *(const PB::Base **)(v3 + 32);
  if (v5) {
    uint64_t result = PB::Writer::writeSubmessage(this, v5);
  }
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x400) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
    uint64_t v6 = *(void *)(v3 + 192);
    if ((v6 & 0x200) == 0)
    {
LABEL_32:
      if ((v6 & 0x2000000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_71;
    }
  }
  else if ((v6 & 0x200) == 0)
  {
    goto LABEL_32;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v6 & 0x1000000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140));
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x1000000000) == 0)
  {
LABEL_34:
    if ((v6 & 0x20) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x20) == 0)
  {
LABEL_35:
    if ((v6 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v6 & 0x2000000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x2000000000) == 0)
  {
LABEL_37:
    if ((v6 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x40) == 0)
  {
LABEL_38:
    if ((v6 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v6 & 0x100000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 164));
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v6 & 0x200000000) == 0) {
      goto LABEL_41;
    }
LABEL_79:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172));
    if ((*(void *)(v3 + 192) & 0x400000000) == 0) {
      return result;
    }
    goto LABEL_80;
  }
LABEL_78:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168));
  uint64_t v6 = *(void *)(v3 + 192);
  if ((v6 & 0x200000000) != 0) {
    goto LABEL_79;
  }
LABEL_41:
  if ((v6 & 0x400000000) == 0) {
    return result;
  }
LABEL_80:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903F439C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCE1E8;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1903F43C4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F43FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "isWifiAssociated");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903F445C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        if (v2 >= v3)
        {
          BOOL v21 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *(unsigned char *)(a1 + 8) = v21;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903F45EC(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::write(this);
  }
  return result;
}

void *sub_1903F460C(void *result)
{
  *uint64_t result = &unk_1EDFCD2D0;
  result[1] = 0;
  return result;
}

void sub_1903F462C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCD2D0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903F46AC(PB::Base *a1)
{
  sub_1903F462C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F46E4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903F4760(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903F497C(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_1903F4998(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCBBA0;
  *(_DWORD *)(result + 12) = 0;
  return result;
}

void sub_1903F49C0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F49F8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "walkingVariable01", *(float *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903F4A58(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 4;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903F4BF4(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::write(this, *(float *)(result + 8));
  }
  return result;
}

double sub_1903F4C10(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCF8E0;
  *(_DWORD *)(a1 + 76) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1903F4C44(PB::Base *this)
{
  *(void *)this = &unk_1EDFCF8E0;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1903F4CB8(PB::Base *a1)
{
  sub_1903F4C44(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F4CF0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(float **)(a1 + 8);
  uint64_t v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "accel", v7);
  }
  if (*(unsigned char *)(a1 + 76)) {
    PB::TextFormatter::format(this, "adjustedTimestamp", *(double *)(a1 + 56));
  }
  uint64_t v8 = *(float **)(a1 + 32);
  char v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "gravity", v10);
  }
  char v11 = *(unsigned char *)(a1 + 76);
  if ((v11 & 4) != 0)
  {
    PB::TextFormatter::format(this, "rawProjectedSignal", *(float *)(a1 + 72));
    char v11 = *(unsigned char *)(a1 + 76);
  }
  if ((v11 & 2) != 0) {
    PB::TextFormatter::format(this, "timestamp");
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903F4DF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    float v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 76) |= 2u;
          unint64_t v25 = *((void *)this + 1);
          unint64_t v26 = *((void *)this + 2);
          uint64_t v27 = *(void *)this;
          if (v25 <= 0xFFFFFFFFFFFFFFF5 && v25 + 10 <= v26)
          {
            char v28 = 0;
            unsigned int v29 = 0;
            uint64_t v30 = 0;
            do
            {
              unint64_t v31 = v25 + 1;
              *((void *)this + 1) = v25 + 1;
              char v32 = *(unsigned char *)(v27 + v25);
              v30 |= (unint64_t)(v32 & 0x7F) << v28;
              if ((v32 & 0x80) == 0) {
                goto LABEL_118;
              }
              v28 += 7;
              unint64_t v25 = v31;
              BOOL v18 = v29++ > 8;
            }
            while (!v18);
LABEL_92:
            uint64_t v30 = 0;
            goto LABEL_118;
          }
          char v64 = 0;
          unsigned int v65 = 0;
          uint64_t v30 = 0;
          if (v26 <= v25) {
            unint64_t v26 = *((void *)this + 1);
          }
          while (2)
          {
            if (v26 == v25)
            {
              uint64_t v30 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v66 = v25 + 1;
              char v67 = *(unsigned char *)(v27 + v25);
              *((void *)this + 1) = v66;
              v30 |= (unint64_t)(v67 & 0x7F) << v64;
              if (v67 < 0)
              {
                v64 += 7;
                unint64_t v25 = v66;
                BOOL v18 = v65++ > 8;
                if (v18) {
                  goto LABEL_92;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v30 = 0;
              }
            }
            break;
          }
LABEL_118:
          *(void *)(a1 + 64) = v30;
          goto LABEL_139;
        case 2u:
          *(unsigned char *)(a1 + 76) |= 1u;
          unint64_t v33 = *((void *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFF7 || v33 + 8 > *((void *)this + 2)) {
            goto LABEL_135;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v33);
          uint64_t v34 = *((void *)this + 1) + 8;
          goto LABEL_138;
        case 3u:
          *(unsigned char *)(a1 + 76) |= 4u;
          unint64_t v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
            goto LABEL_135;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v35);
          goto LABEL_137;
        case 4u:
          if (v24 != 2)
          {
            unint64_t v69 = *(char **)(a1 + 40);
            unint64_t v68 = *(void *)(a1 + 48);
            if ((unint64_t)v69 >= v68)
            {
              unsigned int v73 = (char *)*v10;
              uint64_t v74 = (v69 - (unsigned char *)*v10) >> 2;
              unint64_t v75 = v74 + 1;
              if ((unint64_t)(v74 + 1) >> 62) {
LABEL_149:
              }
                sub_1903479E8();
              uint64_t v76 = v68 - (void)v73;
              if (v76 >> 1 > v75) {
                unint64_t v75 = v76 >> 1;
              }
              if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v77 = v75;
              }
              if (v77)
              {
                unint64_t v78 = (char *)sub_190347D04(v11, v77);
                unsigned int v73 = *(char **)(a1 + 32);
                unint64_t v69 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v78 = 0;
              }
              unint64_t v85 = &v78[4 * v74];
              *(_DWORD *)unint64_t v85 = 0;
              unint64_t v70 = v85 + 4;
              while (v69 != v73)
              {
                int v86 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *((_DWORD *)v85 - 1) = v86;
                v85 -= 4;
              }
              *(void *)(a1 + 32) = v85;
              *(void *)(a1 + 40) = v70;
              *(void *)(a1 + 48) = &v78[4 * v77];
              if (v73) {
                operator delete(v73);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v69 = 0;
              unint64_t v70 = v69 + 4;
            }
            *(void *)(a1 + 40) = v70;
            goto LABEL_133;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v36 = *((void *)this + 1);
          unint64_t v37 = *((void *)this + 2);
          while (v36 < v37 && !*((unsigned char *)this + 24))
          {
            uint64_t v39 = *(char **)(a1 + 40);
            unint64_t v38 = *(void *)(a1 + 48);
            if ((unint64_t)v39 >= v38)
            {
              unsigned int v41 = (char *)*v10;
              uint64_t v42 = (v39 - (unsigned char *)*v10) >> 2;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62) {
                goto LABEL_149;
              }
              uint64_t v44 = v38 - (void)v41;
              if (v44 >> 1 > v43) {
                unint64_t v43 = v44 >> 1;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                unint64_t v46 = (char *)sub_190347D04(v11, v45);
                unsigned int v41 = *(char **)(a1 + 32);
                uint64_t v39 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v46 = 0;
              }
              uint64_t v47 = &v46[4 * v42];
              *(_DWORD *)uint64_t v47 = 0;
              char v40 = v47 + 4;
              while (v39 != v41)
              {
                int v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              *(void *)(a1 + 32) = v47;
              *(void *)(a1 + 40) = v40;
              *(void *)(a1 + 48) = &v46[4 * v45];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v39 = 0;
              char v40 = v39 + 4;
            }
            *(void *)(a1 + 40) = v40;
            unint64_t v49 = *((void *)this + 1);
            if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
              goto LABEL_97;
            }
            *(v40 - 1) = *(_DWORD *)(*(void *)this + v49);
            unint64_t v37 = *((void *)this + 2);
            unint64_t v36 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v36;
          }
          goto LABEL_98;
        case 5u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v50 = *((void *)this + 1);
            unint64_t v51 = *((void *)this + 2);
            while (v50 < v51 && !*((unsigned char *)this + 24))
            {
              unint64_t v53 = *(char **)(a1 + 16);
              unint64_t v52 = *(void *)(a1 + 24);
              if ((unint64_t)v53 >= v52)
              {
                uint64_t v55 = (char *)*v8;
                uint64_t v56 = (v53 - (unsigned char *)*v8) >> 2;
                unint64_t v57 = v56 + 1;
                if ((unint64_t)(v56 + 1) >> 62) {
                  goto LABEL_150;
                }
                uint64_t v58 = v52 - (void)v55;
                if (v58 >> 1 > v57) {
                  unint64_t v57 = v58 >> 1;
                }
                if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v59 = v57;
                }
                if (v59)
                {
                  char v60 = (char *)sub_190347D04(v9, v59);
                  uint64_t v55 = *(char **)(a1 + 8);
                  unint64_t v53 = *(char **)(a1 + 16);
                }
                else
                {
                  char v60 = 0;
                }
                unint64_t v61 = &v60[4 * v56];
                *(_DWORD *)unint64_t v61 = 0;
                unint64_t v54 = v61 + 4;
                while (v53 != v55)
                {
                  int v62 = *((_DWORD *)v53 - 1);
                  v53 -= 4;
                  *((_DWORD *)v61 - 1) = v62;
                  v61 -= 4;
                }
                *(void *)(a1 + 8) = v61;
                *(void *)(a1 + 16) = v54;
                *(void *)(a1 + 24) = &v60[4 * v59];
                if (v55) {
                  operator delete(v55);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v53 = 0;
                unint64_t v54 = v53 + 4;
              }
              *(void *)(a1 + 16) = v54;
              unint64_t v63 = *((void *)this + 1);
              if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)this + 2))
              {
LABEL_97:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v54 - 1) = *(_DWORD *)(*(void *)this + v63);
              unint64_t v51 = *((void *)this + 2);
              unint64_t v50 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v50;
            }
LABEL_98:
            PB::Reader::recallMark();
          }
          else
          {
            char v72 = *(char **)(a1 + 16);
            unint64_t v71 = *(void *)(a1 + 24);
            if ((unint64_t)v72 >= v71)
            {
              uint64_t v79 = (char *)*v8;
              uint64_t v80 = (v72 - (unsigned char *)*v8) >> 2;
              unint64_t v81 = v80 + 1;
              if ((unint64_t)(v80 + 1) >> 62) {
LABEL_150:
              }
                sub_1903479E8();
              uint64_t v82 = v71 - (void)v79;
              if (v82 >> 1 > v81) {
                unint64_t v81 = v82 >> 1;
              }
              if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v83 = v81;
              }
              if (v83)
              {
                char v84 = (char *)sub_190347D04(v9, v83);
                uint64_t v79 = *(char **)(a1 + 8);
                char v72 = *(char **)(a1 + 16);
              }
              else
              {
                char v84 = 0;
              }
              uint64_t v87 = &v84[4 * v80];
              *(_DWORD *)uint64_t v87 = 0;
              unint64_t v70 = v87 + 4;
              while (v72 != v79)
              {
                int v88 = *((_DWORD *)v72 - 1);
                v72 -= 4;
                *((_DWORD *)v87 - 1) = v88;
                v87 -= 4;
              }
              *(void *)(a1 + 8) = v87;
              *(void *)(a1 + 16) = v70;
              *(void *)(a1 + 24) = &v84[4 * v83];
              if (v79) {
                operator delete(v79);
              }
            }
            else
            {
              *(_DWORD *)char v72 = 0;
              unint64_t v70 = v72 + 4;
            }
            *(void *)(a1 + 16) = v70;
LABEL_133:
            unint64_t v89 = *((void *)this + 1);
            if (v89 <= 0xFFFFFFFFFFFFFFFBLL && v89 + 4 <= *((void *)this + 2))
            {
              *(v70 - 1) = *(_DWORD *)(*(void *)this + v89);
LABEL_137:
              uint64_t v34 = *((void *)this + 1) + 4;
LABEL_138:
              *((void *)this + 1) = v34;
            }
            else
            {
LABEL_135:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_139:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_139;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903F54B0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 76);
  if ((v4 & 2) == 0)
  {
    if ((*(unsigned char *)(result + 76) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_13:
    double result = PB::Writer::write(this, *(double *)(v3 + 56));
    if ((*(unsigned char *)(v3 + 76) & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  double result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 76);
  if (v4) {
    goto LABEL_13;
  }
LABEL_3:
  if ((v4 & 4) != 0) {
LABEL_4:
  }
    double result = PB::Writer::write(this, *(float *)(v3 + 72));
LABEL_5:
  uint64_t v5 = *(float **)(v3 + 32);
  uint64_t v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  uint64_t v9 = *(float **)(v3 + 8);
  uint64_t v8 = *(float **)(v3 + 16);
  while (v9 != v8)
  {
    float v10 = *v9++;
    double result = PB::Writer::write(this, v10);
  }
  return result;
}

uint64_t sub_1903F5570(uint64_t result)
{
  *(void *)double result = &unk_1EDFCD730;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1903F5598(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F55D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "cadence", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalRotationRateFiltered", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "sample", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "verticalRotationRateFiltered", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "verticalUserAcceleration", *(float *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 40) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "walkSpeedFilteredSample", *(float *)(a1 + 36));
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903F56F4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 5u:
          *(unsigned char *)(a1 + 40) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 6u:
          *(unsigned char *)(a1 + 40) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 7u:
          *(unsigned char *)(a1 + 40) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_46:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_47:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903F5A28(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
    if ((*(unsigned char *)(v3 + 40) & 0x10) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_15:
  float v5 = *(float *)(v3 + 28);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903F5B24(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB388;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_1903F5B4C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F5B84(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "activityType");
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 0x200) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "duration", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "fGpsAvailability");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "fractionalGrade", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "gradeType");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "hrmin", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isStanding");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "metSource");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_11:
    if ((v5 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "rawGradeType");
  if ((*(_WORD *)(a1 + 68) & 0x10) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 40));
LABEL_13:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903F5D28(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_68;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x20u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  unint64_t v51 = v21++;
                  char v52 = *(unsigned char *)(v22 + v51);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_108;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 48) = v25;
              goto LABEL_125;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 65) = v28;
              goto LABEL_125;
            case 4u:
              *(_WORD *)(a1 + 68) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_68;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              unint64_t v29 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  unint64_t v55 = v29++;
                  char v56 = *(unsigned char *)(v30 + v55);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_113:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_113;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_114:
              *(_DWORD *)(a1 + 52) = v33;
              goto LABEL_125;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  unint64_t v59 = v35++;
                  char v60 = *(unsigned char *)(v36 + v59);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_118:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_118;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_119:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_125;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  unint64_t v63 = v41++;
                  char v64 = *(unsigned char *)(v42 + v63);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_123:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_123;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_124;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_124:
              *(_DWORD *)(a1 + 56) = v45;
LABEL_125:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_68;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 9u:
              *(_WORD *)(a1 + 68) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_68;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_104:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_68:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_125;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 64) = v48;
              goto LABEL_125;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_125;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903F642C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40));
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 1) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
    if ((*(_WORD *)(v3 + 68) & 0x200) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if (v4) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x200) == 0) {
    return result;
  }
LABEL_23:

  return PB::Writer::write(this);
}

double sub_1903F6598(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCC930;
  *(_DWORD *)(a1 + 180) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  return result;
}

void sub_1903F65EC(PB::Base *this)
{
  *(void *)this = &unk_1EDFCC930;
  unint64_t v2 = (void *)*((void *)this + 19);
  if (v2)
  {
    *((void *)this + 20) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  __int16 v4 = (void *)*((void *)this + 13);
  if (v4)
  {
    *((void *)this + 14) = v4;
    operator delete(v4);
  }
  __int16 v5 = (void *)*((void *)this + 10);
  if (v5)
  {
    *((void *)this + 11) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 7);
  if (v6)
  {
    *((void *)this + 8) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 4);
  if (v7)
  {
    *((void *)this + 5) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }

  PB::Base::~Base(this);
}

void sub_1903F66B0(PB::Base *a1)
{
  sub_1903F65EC(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F66E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(this, "error");
  }
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  while (v7 != v8)
  {
    v7 += 4;
    PB::TextFormatter::format(this, "errorX");
  }
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  while (v9 != v10)
  {
    v9 += 4;
    PB::TextFormatter::format(this, "errorY");
  }
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  while (v11 != v12)
  {
    v11 += 4;
    PB::TextFormatter::format(this, "errorZ");
  }
  char v13 = *(float **)(a1 + 104);
  BOOL v14 = *(float **)(a1 + 112);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(this, "intercept", v15);
  }
  if (*(unsigned char *)(a1 + 180)) {
    PB::TextFormatter::format(this, "overlap", *(float *)(a1 + 176));
  }
  unsigned int v16 = *(float **)(a1 + 128);
  unint64_t v17 = *(float **)(a1 + 136);
  while (v16 != v17)
  {
    float v18 = *v16++;
    PB::TextFormatter::format(this, "slope", v18);
  }
  char v19 = *(float **)(a1 + 152);
  unsigned int v20 = *(float **)(a1 + 160);
  while (v19 != v20)
  {
    float v21 = *v19++;
    PB::TextFormatter::format(this, "temperature", v21);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903F688C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void *)(a1 + 72);
    char v278 = (void **)(a1 + 32);
    char v279 = (void **)(a1 + 56);
    uint64_t v9 = (void *)(a1 + 48);
    unint64_t v277 = (void **)(a1 + 8);
    uint64_t v10 = (void *)(a1 + 24);
    uint64_t v11 = (void *)(a1 + 96);
    unint64_t v285 = (void **)(a1 + 152);
    uint64_t v283 = a1 + 168;
    unsigned int v284 = (void **)(a1 + 104);
    uint64_t v282 = a1 + 120;
    uint64_t v12 = (void **)(a1 + 128);
    unsigned int v280 = (void **)(a1 + 80);
    uint64_t v281 = a1 + 144;
    while (1)
    {
      uint64_t v13 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v14 = 0;
      unsigned int v15 = 0;
      unint64_t v16 = 0;
      while (1)
      {
        unint64_t v17 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v18 = *(unsigned char *)(v13 + v2);
        v16 |= (unint64_t)(v18 & 0x7F) << v14;
        if ((v18 & 0x80) == 0) {
          break;
        }
        v14 += 7;
        unint64_t v2 = v17;
        BOOL v81 = v15++ > 8;
        if (v81) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v16 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v16 >> 3))
      {
        case 1u:
          if (v24 != 2)
          {
            uint64_t v162 = *(char **)(a1 + 136);
            unint64_t v161 = *(void *)(a1 + 144);
            if ((unint64_t)v162 >= v161)
            {
              unsigned int v177 = (char *)*v12;
              uint64_t v178 = (v162 - (unsigned char *)*v12) >> 2;
              unint64_t v179 = v178 + 1;
              if ((unint64_t)(v178 + 1) >> 62) {
LABEL_482:
              }
                sub_1903479E8();
              uint64_t v180 = v161 - (void)v177;
              if (v180 >> 1 > v179) {
                unint64_t v179 = v180 >> 1;
              }
              if ((unint64_t)v180 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v181 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v181 = v179;
              }
              if (v181)
              {
                unint64_t v182 = (char *)sub_190347D04(v281, v181);
                unsigned int v177 = *(char **)(a1 + 128);
                uint64_t v162 = *(char **)(a1 + 136);
              }
              else
              {
                unint64_t v182 = 0;
              }
              char v219 = &v182[4 * v178];
              *(_DWORD *)char v219 = 0;
              unint64_t v163 = v219 + 4;
              while (v162 != v177)
              {
                int v220 = *((_DWORD *)v162 - 1);
                v162 -= 4;
                *((_DWORD *)v219 - 1) = v220;
                v219 -= 4;
              }
              *(void *)(a1 + 128) = v219;
              *(void *)(a1 + 136) = v163;
              *(void *)(a1 + 144) = &v182[4 * v181];
              if (v177) {
                operator delete(v177);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v162 = 0;
              unint64_t v163 = v162 + 4;
            }
            *(void *)(a1 + 136) = v163;
            goto LABEL_374;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v25 = *((void *)this + 1);
          unint64_t v26 = *((void *)this + 2);
          while (v25 < v26 && !*((unsigned char *)this + 24))
          {
            BOOL v28 = *(char **)(a1 + 136);
            unint64_t v27 = *(void *)(a1 + 144);
            if ((unint64_t)v28 >= v27)
            {
              uint64_t v30 = (char *)*v12;
              uint64_t v31 = (v28 - (unsigned char *)*v12) >> 2;
              unint64_t v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 62) {
                goto LABEL_482;
              }
              uint64_t v33 = v27 - (void)v30;
              if (v33 >> 1 > v32) {
                unint64_t v32 = v33 >> 1;
              }
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v34 = v32;
              }
              if (v34)
              {
                unint64_t v35 = (char *)sub_190347D04(v281, v34);
                uint64_t v30 = *(char **)(a1 + 128);
                BOOL v28 = *(char **)(a1 + 136);
              }
              else
              {
                unint64_t v35 = 0;
              }
              uint64_t v36 = &v35[4 * v31];
              *(_DWORD *)uint64_t v36 = 0;
              unint64_t v29 = v36 + 4;
              while (v28 != v30)
              {
                int v37 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *((_DWORD *)v36 - 1) = v37;
                v36 -= 4;
              }
              *(void *)(a1 + 128) = v36;
              *(void *)(a1 + 136) = v29;
              *(void *)(a1 + 144) = &v35[4 * v34];
              if (v30) {
                operator delete(v30);
              }
            }
            else
            {
              *(_DWORD *)BOOL v28 = 0;
              unint64_t v29 = v28 + 4;
            }
            *(void *)(a1 + 136) = v29;
            unint64_t v38 = *((void *)this + 1);
            if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
              goto LABEL_295;
            }
            *(v29 - 1) = *(_DWORD *)(*(void *)this + v38);
            unint64_t v26 = *((void *)this + 2);
            unint64_t v25 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v25;
          }
          goto LABEL_296;
        case 2u:
          if (v24 != 2)
          {
            unint64_t v165 = *(char **)(a1 + 112);
            unint64_t v164 = *(void *)(a1 + 120);
            if ((unint64_t)v165 >= v164)
            {
              unint64_t v183 = (char *)*v284;
              uint64_t v184 = (v165 - (unsigned char *)*v284) >> 2;
              unint64_t v185 = v184 + 1;
              if ((unint64_t)(v184 + 1) >> 62) {
LABEL_483:
              }
                sub_1903479E8();
              uint64_t v186 = v164 - (void)v183;
              if (v186 >> 1 > v185) {
                unint64_t v185 = v186 >> 1;
              }
              if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v187 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v187 = v185;
              }
              if (v187)
              {
                unsigned int v188 = (char *)sub_190347D04(v282, v187);
                unint64_t v183 = *(char **)(a1 + 104);
                unint64_t v165 = *(char **)(a1 + 112);
              }
              else
              {
                unsigned int v188 = 0;
              }
              uint64_t v221 = &v188[4 * v184];
              *(_DWORD *)uint64_t v221 = 0;
              unint64_t v163 = v221 + 4;
              while (v165 != v183)
              {
                int v222 = *((_DWORD *)v165 - 1);
                v165 -= 4;
                *((_DWORD *)v221 - 1) = v222;
                v221 -= 4;
              }
              *(void *)(a1 + 104) = v221;
              *(void *)(a1 + 112) = v163;
              *(void *)(a1 + 120) = &v188[4 * v187];
              if (v183) {
                operator delete(v183);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v165 = 0;
              unint64_t v163 = v165 + 4;
            }
            *(void *)(a1 + 112) = v163;
            goto LABEL_374;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v39 = *((void *)this + 1);
          unint64_t v40 = *((void *)this + 2);
          while (v39 < v40 && !*((unsigned char *)this + 24))
          {
            uint64_t v42 = *(char **)(a1 + 112);
            unint64_t v41 = *(void *)(a1 + 120);
            if ((unint64_t)v42 >= v41)
            {
              unsigned int v44 = (char *)*v284;
              uint64_t v45 = (v42 - (unsigned char *)*v284) >> 2;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62) {
                goto LABEL_483;
              }
              uint64_t v47 = v41 - (void)v44;
              if (v47 >> 1 > v46) {
                unint64_t v46 = v47 >> 1;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                char v49 = (char *)sub_190347D04(v282, v48);
                unsigned int v44 = *(char **)(a1 + 104);
                uint64_t v42 = *(char **)(a1 + 112);
              }
              else
              {
                char v49 = 0;
              }
              unsigned int v50 = &v49[4 * v45];
              *(_DWORD *)unsigned int v50 = 0;
              char v43 = v50 + 4;
              while (v42 != v44)
              {
                int v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *(void *)(a1 + 104) = v50;
              *(void *)(a1 + 112) = v43;
              *(void *)(a1 + 120) = &v49[4 * v48];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v42 = 0;
              char v43 = v42 + 4;
            }
            *(void *)(a1 + 112) = v43;
            unint64_t v52 = *((void *)this + 1);
            if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)this + 2)) {
              goto LABEL_295;
            }
            *(v43 - 1) = *(_DWORD *)(*(void *)this + v52);
            unint64_t v40 = *((void *)this + 2);
            unint64_t v39 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v39;
          }
          goto LABEL_296;
        case 3u:
          if (v24 != 2)
          {
            uint64_t v167 = *(char **)(a1 + 160);
            unint64_t v166 = *(void *)(a1 + 168);
            if ((unint64_t)v167 >= v166)
            {
              uint64_t v189 = (char *)*v285;
              uint64_t v190 = (v167 - (unsigned char *)*v285) >> 2;
              unint64_t v191 = v190 + 1;
              if ((unint64_t)(v190 + 1) >> 62) {
LABEL_484:
              }
                sub_1903479E8();
              uint64_t v192 = v166 - (void)v189;
              if (v192 >> 1 > v191) {
                unint64_t v191 = v192 >> 1;
              }
              if ((unint64_t)v192 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v193 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v193 = v191;
              }
              if (v193)
              {
                uint64_t v194 = (char *)sub_190347D04(v283, v193);
                uint64_t v189 = *(char **)(a1 + 152);
                uint64_t v167 = *(char **)(a1 + 160);
              }
              else
              {
                uint64_t v194 = 0;
              }
              char v223 = &v194[4 * v190];
              *(_DWORD *)char v223 = 0;
              unint64_t v163 = v223 + 4;
              while (v167 != v189)
              {
                int v224 = *((_DWORD *)v167 - 1);
                v167 -= 4;
                *((_DWORD *)v223 - 1) = v224;
                v223 -= 4;
              }
              *(void *)(a1 + 152) = v223;
              *(void *)(a1 + 160) = v163;
              *(void *)(a1 + 168) = &v194[4 * v193];
              if (v189) {
                operator delete(v189);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v167 = 0;
              unint64_t v163 = v167 + 4;
            }
            *(void *)(a1 + 160) = v163;
LABEL_374:
            unint64_t v225 = *((void *)this + 1);
            if (v225 <= 0xFFFFFFFFFFFFFFFBLL && v225 + 4 <= *((void *)this + 2))
            {
              *(v163 - 1) = *(_DWORD *)(*(void *)this + v225);
LABEL_378:
              *((void *)this + 1) += 4;
            }
            else
            {
LABEL_376:
              *((unsigned char *)this + 24) = 1;
            }
            goto LABEL_472;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v53 = *((void *)this + 1);
          unint64_t v54 = *((void *)this + 2);
          while (v53 < v54 && !*((unsigned char *)this + 24))
          {
            char v56 = *(char **)(a1 + 160);
            unint64_t v55 = *(void *)(a1 + 168);
            if ((unint64_t)v56 >= v55)
            {
              unsigned int v58 = (char *)*v285;
              uint64_t v59 = (v56 - (unsigned char *)*v285) >> 2;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62) {
                goto LABEL_484;
              }
              uint64_t v61 = v55 - (void)v58;
              if (v61 >> 1 > v60) {
                unint64_t v60 = v61 >> 1;
              }
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v62 = v60;
              }
              if (v62)
              {
                unint64_t v63 = (char *)sub_190347D04(v283, v62);
                unsigned int v58 = *(char **)(a1 + 152);
                char v56 = *(char **)(a1 + 160);
              }
              else
              {
                unint64_t v63 = 0;
              }
              char v64 = &v63[4 * v59];
              *(_DWORD *)char v64 = 0;
              char v57 = v64 + 4;
              while (v56 != v58)
              {
                int v65 = *((_DWORD *)v56 - 1);
                v56 -= 4;
                *((_DWORD *)v64 - 1) = v65;
                v64 -= 4;
              }
              *(void *)(a1 + 152) = v64;
              *(void *)(a1 + 160) = v57;
              *(void *)(a1 + 168) = &v63[4 * v62];
              if (v58) {
                operator delete(v58);
              }
            }
            else
            {
              *(_DWORD *)char v56 = 0;
              char v57 = v56 + 4;
            }
            *(void *)(a1 + 160) = v57;
            unint64_t v66 = *((void *)this + 1);
            if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)this + 2))
            {
LABEL_295:
              *((unsigned char *)this + 24) = 1;
              goto LABEL_296;
            }
            *(v57 - 1) = *(_DWORD *)(*(void *)this + v66);
            unint64_t v54 = *((void *)this + 2);
            unint64_t v53 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v53;
          }
          goto LABEL_296;
        case 4u:
          *(unsigned char *)(a1 + 180) |= 1u;
          unint64_t v67 = *((void *)this + 1);
          if (v67 > 0xFFFFFFFFFFFFFFFBLL || v67 + 4 > *((void *)this + 2)) {
            goto LABEL_376;
          }
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v67);
          goto LABEL_378;
        case 5u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
            {
              unint64_t v68 = *(char **)(a1 + 88);
              do
              {
                if ((unint64_t)v68 >= *v11)
                {
                  unint64_t v69 = (char *)*v280;
                  uint64_t v70 = (v68 - (unsigned char *)*v280) >> 2;
                  unint64_t v71 = v70 + 1;
                  if ((unint64_t)(v70 + 1) >> 62) {
                    goto LABEL_485;
                  }
                  uint64_t v72 = *v11 - (void)v69;
                  if (v72 >> 1 > v71) {
                    unint64_t v71 = v72 >> 1;
                  }
                  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v73 = v71;
                  }
                  if (v73)
                  {
                    uint64_t v74 = (char *)sub_190347D04((uint64_t)v11, v73);
                    unint64_t v69 = *(char **)(a1 + 80);
                    unint64_t v68 = *(char **)(a1 + 88);
                  }
                  else
                  {
                    uint64_t v74 = 0;
                  }
                  unint64_t v75 = &v74[4 * v70];
                  *(_DWORD *)unint64_t v75 = 0;
                  uint64_t v76 = v75 + 4;
                  while (v68 != v69)
                  {
                    int v77 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v75 - 1) = v77;
                    v75 -= 4;
                  }
                  *(void *)(a1 + 80) = v75;
                  *(void *)(a1 + 88) = v76;
                  *(void *)(a1 + 96) = &v74[4 * v73];
                  if (v69) {
                    operator delete(v69);
                  }
                  unint64_t v68 = v76;
                }
                else
                {
                  *(_DWORD *)unint64_t v68 = 0;
                  v68 += 4;
                }
                *(void *)(a1 + 88) = v68;
                unint64_t v79 = *((void *)this + 1);
                unint64_t v78 = *((void *)this + 2);
                uint64_t v80 = *(void *)this;
                BOOL v81 = v79 > 0xFFFFFFFFFFFFFFF5 || v79 + 10 > v78;
                if (v81)
                {
                  char v82 = 0;
                  unsigned int v83 = 0;
                  uint64_t v89 = 0;
                  if (v78 <= v79) {
                    uint64_t v84 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v84 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v84 == v79) {
                      goto LABEL_280;
                    }
                    unint64_t v85 = v79++;
                    char v86 = *(unsigned char *)(v80 + v85);
                    *((void *)this + 1) = v79;
                    v89 |= (unint64_t)(v86 & 0x7F) << v82;
                    if ((v86 & 0x80) == 0) {
                      break;
                    }
                    v82 += 7;
                    BOOL v81 = v83++ > 8;
                    if (v81)
                    {
                      LODWORD(v89) = 0;
                      goto LABEL_141;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    LODWORD(v89) = 0;
                  }
LABEL_141:
                  unint64_t v90 = v85 + 1;
                }
                else
                {
                  char v87 = 0;
                  unsigned int v88 = 0;
                  uint64_t v89 = 0;
                  while (1)
                  {
                    unint64_t v90 = v79 + 1;
                    *((void *)this + 1) = v79 + 1;
                    char v91 = *(unsigned char *)(v80 + v79);
                    v89 |= (unint64_t)(v91 & 0x7F) << v87;
                    if ((v91 & 0x80) == 0) {
                      break;
                    }
                    v87 += 7;
                    unint64_t v79 = v90;
                    BOOL v81 = v88++ > 8;
                    if (v81)
                    {
                      LODWORD(v89) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v68 - 1) = v89;
              }
              while (v90 < v78 && !*((unsigned char *)this + 24));
            }
            goto LABEL_296;
          }
          unsigned int v169 = *(char **)(a1 + 88);
          unint64_t v168 = *(void *)(a1 + 96);
          if ((unint64_t)v169 >= v168)
          {
            char v195 = (char *)*v280;
            uint64_t v196 = (v169 - (unsigned char *)*v280) >> 2;
            unint64_t v197 = v196 + 1;
            if ((unint64_t)(v196 + 1) >> 62) {
LABEL_485:
            }
              sub_1903479E8();
            uint64_t v198 = v168 - (void)v195;
            if (v198 >> 1 > v197) {
              unint64_t v197 = v198 >> 1;
            }
            if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v199 = v197;
            }
            if (v199)
            {
              unint64_t v200 = (char *)sub_190347D04((uint64_t)v11, v199);
              char v195 = *(char **)(a1 + 80);
              unsigned int v169 = *(char **)(a1 + 88);
            }
            else
            {
              unint64_t v200 = 0;
            }
            unint64_t v226 = &v200[4 * v196];
            *(_DWORD *)unint64_t v226 = 0;
            uint64_t v170 = v226 + 4;
            while (v169 != v195)
            {
              int v227 = *((_DWORD *)v169 - 1);
              v169 -= 4;
              *((_DWORD *)v226 - 1) = v227;
              v226 -= 4;
            }
            *(void *)(a1 + 80) = v226;
            *(void *)(a1 + 88) = v170;
            *(void *)(a1 + 96) = &v200[4 * v199];
            if (v195) {
              operator delete(v195);
            }
          }
          else
          {
            *(_DWORD *)unsigned int v169 = 0;
            uint64_t v170 = v169 + 4;
          }
          *(void *)(a1 + 88) = v170;
          unint64_t v228 = *((void *)this + 1);
          unint64_t v229 = *((void *)this + 2);
          uint64_t v230 = *(void *)this;
          char v231 = 0;
          unsigned int v232 = 0;
          if (v228 <= 0xFFFFFFFFFFFFFFF5 && v228 + 10 <= v229)
          {
            uint64_t v236 = 0;
            while (1)
            {
              unint64_t v237 = v228 + 1;
              *((void *)this + 1) = v228 + 1;
              char v238 = *(unsigned char *)(v230 + v228);
              v236 |= (unint64_t)(v238 & 0x7F) << v231;
              if ((v238 & 0x80) == 0) {
                goto LABEL_471;
              }
              v231 += 7;
              unint64_t v228 = v237;
              BOOL v81 = v232++ > 8;
              if (v81) {
                goto LABEL_470;
              }
            }
          }
          uint64_t v236 = 0;
          if (v229 <= v228) {
            unint64_t v229 = *((void *)this + 1);
          }
          while (v229 != v228)
          {
            unint64_t v234 = v228 + 1;
            char v235 = *(unsigned char *)(v230 + v228);
            *((void *)this + 1) = v234;
            v236 |= (unint64_t)(v235 & 0x7F) << v231;
            if ((v235 & 0x80) == 0) {
              goto LABEL_464;
            }
            v231 += 7;
            unint64_t v228 = v234;
            BOOL v81 = v232++ > 8;
            if (v81) {
              goto LABEL_470;
            }
          }
          goto LABEL_463;
        case 6u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
            {
              unint64_t v68 = *(char **)(a1 + 16);
              do
              {
                if ((unint64_t)v68 >= *v10)
                {
                  char v92 = (char *)*v277;
                  uint64_t v93 = (v68 - (unsigned char *)*v277) >> 2;
                  unint64_t v94 = v93 + 1;
                  if ((unint64_t)(v93 + 1) >> 62) {
                    goto LABEL_486;
                  }
                  uint64_t v95 = *v10 - (void)v92;
                  if (v95 >> 1 > v94) {
                    unint64_t v94 = v95 >> 1;
                  }
                  if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v96 = v94;
                  }
                  if (v96)
                  {
                    unint64_t v97 = (char *)sub_190347D04((uint64_t)v10, v96);
                    char v92 = *(char **)(a1 + 8);
                    unint64_t v68 = *(char **)(a1 + 16);
                  }
                  else
                  {
                    unint64_t v97 = 0;
                  }
                  uint64_t v98 = &v97[4 * v93];
                  *(_DWORD *)uint64_t v98 = 0;
                  char v99 = v98 + 4;
                  while (v68 != v92)
                  {
                    int v100 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v98 - 1) = v100;
                    v98 -= 4;
                  }
                  *(void *)(a1 + 8) = v98;
                  *(void *)(a1 + 16) = v99;
                  *(void *)(a1 + 24) = &v97[4 * v96];
                  if (v92) {
                    operator delete(v92);
                  }
                  unint64_t v68 = v99;
                }
                else
                {
                  *(_DWORD *)unint64_t v68 = 0;
                  v68 += 4;
                }
                *(void *)(a1 + 16) = v68;
                unint64_t v102 = *((void *)this + 1);
                unint64_t v101 = *((void *)this + 2);
                uint64_t v103 = *(void *)this;
                if (v102 > 0xFFFFFFFFFFFFFFF5 || v102 + 10 > v101)
                {
                  char v105 = 0;
                  unsigned int v106 = 0;
                  uint64_t v112 = 0;
                  if (v101 <= v102) {
                    uint64_t v107 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v107 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v107 == v102) {
                      goto LABEL_280;
                    }
                    unint64_t v108 = v102++;
                    char v109 = *(unsigned char *)(v103 + v108);
                    *((void *)this + 1) = v102;
                    v112 |= (unint64_t)(v109 & 0x7F) << v105;
                    if ((v109 & 0x80) == 0) {
                      break;
                    }
                    v105 += 7;
                    BOOL v81 = v106++ > 8;
                    if (v81)
                    {
                      LODWORD(v112) = 0;
                      goto LABEL_186;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    LODWORD(v112) = 0;
                  }
LABEL_186:
                  unint64_t v113 = v108 + 1;
                }
                else
                {
                  char v110 = 0;
                  unsigned int v111 = 0;
                  uint64_t v112 = 0;
                  while (1)
                  {
                    unint64_t v113 = v102 + 1;
                    *((void *)this + 1) = v102 + 1;
                    char v114 = *(unsigned char *)(v103 + v102);
                    v112 |= (unint64_t)(v114 & 0x7F) << v110;
                    if ((v114 & 0x80) == 0) {
                      break;
                    }
                    v110 += 7;
                    unint64_t v102 = v113;
                    BOOL v81 = v111++ > 8;
                    if (v81)
                    {
                      LODWORD(v112) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v68 - 1) = v112;
              }
              while (v113 < v101 && !*((unsigned char *)this + 24));
            }
            goto LABEL_296;
          }
          char v172 = *(char **)(a1 + 16);
          unint64_t v171 = *(void *)(a1 + 24);
          if ((unint64_t)v172 >= v171)
          {
            unint64_t v201 = (char *)*v277;
            uint64_t v202 = (v172 - (unsigned char *)*v277) >> 2;
            unint64_t v203 = v202 + 1;
            if ((unint64_t)(v202 + 1) >> 62) {
LABEL_486:
            }
              sub_1903479E8();
            uint64_t v204 = v171 - (void)v201;
            if (v204 >> 1 > v203) {
              unint64_t v203 = v204 >> 1;
            }
            if ((unint64_t)v204 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v205 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v205 = v203;
            }
            if (v205)
            {
              unint64_t v206 = (char *)sub_190347D04((uint64_t)v10, v205);
              unint64_t v201 = *(char **)(a1 + 8);
              char v172 = *(char **)(a1 + 16);
            }
            else
            {
              unint64_t v206 = 0;
            }
            char v239 = &v206[4 * v202];
            *(_DWORD *)char v239 = 0;
            uint64_t v170 = v239 + 4;
            while (v172 != v201)
            {
              int v240 = *((_DWORD *)v172 - 1);
              v172 -= 4;
              *((_DWORD *)v239 - 1) = v240;
              v239 -= 4;
            }
            *(void *)(a1 + 8) = v239;
            *(void *)(a1 + 16) = v170;
            *(void *)(a1 + 24) = &v206[4 * v205];
            if (v201) {
              operator delete(v201);
            }
          }
          else
          {
            *(_DWORD *)char v172 = 0;
            uint64_t v170 = v172 + 4;
          }
          *(void *)(a1 + 16) = v170;
          unint64_t v241 = *((void *)this + 1);
          unint64_t v242 = *((void *)this + 2);
          uint64_t v243 = *(void *)this;
          char v244 = 0;
          unsigned int v245 = 0;
          if (v241 <= 0xFFFFFFFFFFFFFFF5 && v241 + 10 <= v242)
          {
            uint64_t v236 = 0;
            while (1)
            {
              unint64_t v249 = v241 + 1;
              *((void *)this + 1) = v241 + 1;
              char v250 = *(unsigned char *)(v243 + v241);
              v236 |= (unint64_t)(v250 & 0x7F) << v244;
              if ((v250 & 0x80) == 0) {
                goto LABEL_471;
              }
              v244 += 7;
              unint64_t v241 = v249;
              BOOL v81 = v245++ > 8;
              if (v81) {
                goto LABEL_470;
              }
            }
          }
          uint64_t v236 = 0;
          if (v242 <= v241) {
            unint64_t v242 = *((void *)this + 1);
          }
          while (v242 != v241)
          {
            unint64_t v247 = v241 + 1;
            char v248 = *(unsigned char *)(v243 + v241);
            *((void *)this + 1) = v247;
            v236 |= (unint64_t)(v248 & 0x7F) << v244;
            if ((v248 & 0x80) == 0) {
              goto LABEL_464;
            }
            v244 += 7;
            unint64_t v241 = v247;
            BOOL v81 = v245++ > 8;
            if (v81) {
              goto LABEL_470;
            }
          }
          goto LABEL_463;
        case 7u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
            {
              unint64_t v68 = *(char **)(a1 + 40);
              do
              {
                if ((unint64_t)v68 >= *v9)
                {
                  char v115 = (char *)*v278;
                  uint64_t v116 = (v68 - (unsigned char *)*v278) >> 2;
                  unint64_t v117 = v116 + 1;
                  if ((unint64_t)(v116 + 1) >> 62) {
                    goto LABEL_487;
                  }
                  uint64_t v118 = *v9 - (void)v115;
                  if (v118 >> 1 > v117) {
                    unint64_t v117 = v118 >> 1;
                  }
                  if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v119 = v117;
                  }
                  if (v119)
                  {
                    unint64_t v120 = (char *)sub_190347D04((uint64_t)v9, v119);
                    char v115 = *(char **)(a1 + 32);
                    unint64_t v68 = *(char **)(a1 + 40);
                  }
                  else
                  {
                    unint64_t v120 = 0;
                  }
                  unint64_t v121 = &v120[4 * v116];
                  *(_DWORD *)unint64_t v121 = 0;
                  unint64_t v122 = v121 + 4;
                  while (v68 != v115)
                  {
                    int v123 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v121 - 1) = v123;
                    v121 -= 4;
                  }
                  *(void *)(a1 + 32) = v121;
                  *(void *)(a1 + 40) = v122;
                  *(void *)(a1 + 48) = &v120[4 * v119];
                  if (v115) {
                    operator delete(v115);
                  }
                  unint64_t v68 = v122;
                }
                else
                {
                  *(_DWORD *)unint64_t v68 = 0;
                  v68 += 4;
                }
                *(void *)(a1 + 40) = v68;
                unint64_t v125 = *((void *)this + 1);
                unint64_t v124 = *((void *)this + 2);
                uint64_t v126 = *(void *)this;
                if (v125 > 0xFFFFFFFFFFFFFFF5 || v125 + 10 > v124)
                {
                  char v128 = 0;
                  unsigned int v129 = 0;
                  uint64_t v135 = 0;
                  if (v124 <= v125) {
                    uint64_t v130 = *((void *)this + 1);
                  }
                  else {
                    uint64_t v130 = *((void *)this + 2);
                  }
                  while (1)
                  {
                    if (v130 == v125) {
                      goto LABEL_280;
                    }
                    unint64_t v131 = v125++;
                    char v132 = *(unsigned char *)(v126 + v131);
                    *((void *)this + 1) = v125;
                    v135 |= (unint64_t)(v132 & 0x7F) << v128;
                    if ((v132 & 0x80) == 0) {
                      break;
                    }
                    v128 += 7;
                    BOOL v81 = v129++ > 8;
                    if (v81)
                    {
                      LODWORD(v135) = 0;
                      goto LABEL_231;
                    }
                  }
                  if (*((unsigned char *)this + 24)) {
                    LODWORD(v135) = 0;
                  }
LABEL_231:
                  unint64_t v136 = v131 + 1;
                }
                else
                {
                  char v133 = 0;
                  unsigned int v134 = 0;
                  uint64_t v135 = 0;
                  while (1)
                  {
                    unint64_t v136 = v125 + 1;
                    *((void *)this + 1) = v125 + 1;
                    char v137 = *(unsigned char *)(v126 + v125);
                    v135 |= (unint64_t)(v137 & 0x7F) << v133;
                    if ((v137 & 0x80) == 0) {
                      break;
                    }
                    v133 += 7;
                    unint64_t v125 = v136;
                    BOOL v81 = v134++ > 8;
                    if (v81)
                    {
                      LODWORD(v135) = 0;
                      break;
                    }
                  }
                }
                *((_DWORD *)v68 - 1) = v135;
              }
              while (v136 < v124 && !*((unsigned char *)this + 24));
            }
            goto LABEL_296;
          }
          unint64_t v174 = *(char **)(a1 + 40);
          unint64_t v173 = *(void *)(a1 + 48);
          if ((unint64_t)v174 >= v173)
          {
            char v207 = (char *)*v278;
            uint64_t v208 = (v174 - (unsigned char *)*v278) >> 2;
            unint64_t v209 = v208 + 1;
            if ((unint64_t)(v208 + 1) >> 62) {
LABEL_487:
            }
              sub_1903479E8();
            uint64_t v210 = v173 - (void)v207;
            if (v210 >> 1 > v209) {
              unint64_t v209 = v210 >> 1;
            }
            if ((unint64_t)v210 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v211 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v211 = v209;
            }
            if (v211)
            {
              unsigned int v212 = (char *)sub_190347D04((uint64_t)v9, v211);
              char v207 = *(char **)(a1 + 32);
              unint64_t v174 = *(char **)(a1 + 40);
            }
            else
            {
              unsigned int v212 = 0;
            }
            char v251 = &v212[4 * v208];
            *(_DWORD *)char v251 = 0;
            uint64_t v170 = v251 + 4;
            while (v174 != v207)
            {
              int v252 = *((_DWORD *)v174 - 1);
              v174 -= 4;
              *((_DWORD *)v251 - 1) = v252;
              v251 -= 4;
            }
            *(void *)(a1 + 32) = v251;
            *(void *)(a1 + 40) = v170;
            *(void *)(a1 + 48) = &v212[4 * v211];
            if (v207) {
              operator delete(v207);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v174 = 0;
            uint64_t v170 = v174 + 4;
          }
          *(void *)(a1 + 40) = v170;
          unint64_t v253 = *((void *)this + 1);
          unint64_t v254 = *((void *)this + 2);
          uint64_t v255 = *(void *)this;
          char v256 = 0;
          unsigned int v257 = 0;
          if (v253 <= 0xFFFFFFFFFFFFFFF5 && v253 + 10 <= v254)
          {
            uint64_t v236 = 0;
            while (1)
            {
              unint64_t v261 = v253 + 1;
              *((void *)this + 1) = v253 + 1;
              char v262 = *(unsigned char *)(v255 + v253);
              v236 |= (unint64_t)(v262 & 0x7F) << v256;
              if ((v262 & 0x80) == 0) {
                goto LABEL_471;
              }
              v256 += 7;
              unint64_t v253 = v261;
              BOOL v81 = v257++ > 8;
              if (v81) {
                goto LABEL_470;
              }
            }
          }
          uint64_t v236 = 0;
          if (v254 <= v253) {
            unint64_t v254 = *((void *)this + 1);
          }
          while (v254 != v253)
          {
            unint64_t v259 = v253 + 1;
            char v260 = *(unsigned char *)(v255 + v253);
            *((void *)this + 1) = v259;
            v236 |= (unint64_t)(v260 & 0x7F) << v256;
            if ((v260 & 0x80) == 0) {
              goto LABEL_464;
            }
            v256 += 7;
            unint64_t v253 = v259;
            BOOL v81 = v257++ > 8;
            if (v81) {
              goto LABEL_470;
            }
          }
          goto LABEL_463;
        case 8u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
            {
              unint64_t v68 = *(char **)(a1 + 64);
              do
              {
                if ((unint64_t)v68 >= *v8)
                {
                  uint64_t v138 = (char *)*v279;
                  uint64_t v139 = (v68 - (unsigned char *)*v279) >> 2;
                  unint64_t v140 = v139 + 1;
                  if ((unint64_t)(v139 + 1) >> 62) {
                    goto LABEL_488;
                  }
                  uint64_t v141 = *v8 - (void)v138;
                  if (v141 >> 1 > v140) {
                    unint64_t v140 = v141 >> 1;
                  }
                  if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v142 = v140;
                  }
                  if (v142)
                  {
                    uint64_t v143 = (char *)sub_190347D04((uint64_t)v8, v142);
                    uint64_t v138 = *(char **)(a1 + 56);
                    unint64_t v68 = *(char **)(a1 + 64);
                  }
                  else
                  {
                    uint64_t v143 = 0;
                  }
                  char v144 = &v143[4 * v139];
                  *(_DWORD *)char v144 = 0;
                  unsigned int v145 = v144 + 4;
                  while (v68 != v138)
                  {
                    int v146 = *((_DWORD *)v68 - 1);
                    v68 -= 4;
                    *((_DWORD *)v144 - 1) = v146;
                    v144 -= 4;
                  }
                  *(void *)(a1 + 56) = v144;
                  *(void *)(a1 + 64) = v145;
                  *(void *)(a1 + 72) = &v143[4 * v142];
                  if (v138) {
                    operator delete(v138);
                  }
                  unint64_t v68 = v145;
                }
                else
                {
                  *(_DWORD *)unint64_t v68 = 0;
                  v68 += 4;
                }
                *(void *)(a1 + 64) = v68;
                unint64_t v148 = *((void *)this + 1);
                unint64_t v147 = *((void *)this + 2);
                uint64_t v149 = *(void *)this;
                if (v148 <= 0xFFFFFFFFFFFFFFF5 && v148 + 10 <= v147)
                {
                  char v156 = 0;
                  unsigned int v157 = 0;
                  uint64_t v158 = 0;
                  while (1)
                  {
                    unint64_t v159 = v148 + 1;
                    *((void *)this + 1) = v148 + 1;
                    char v160 = *(unsigned char *)(v149 + v148);
                    v158 |= (unint64_t)(v160 & 0x7F) << v156;
                    if ((v160 & 0x80) == 0) {
                      goto LABEL_277;
                    }
                    v156 += 7;
                    unint64_t v148 = v159;
                    BOOL v81 = v157++ > 8;
                    if (v81)
                    {
                      LODWORD(v158) = 0;
                      goto LABEL_277;
                    }
                  }
                }
                char v151 = 0;
                unsigned int v152 = 0;
                uint64_t v158 = 0;
                if (v147 <= v148) {
                  uint64_t v153 = *((void *)this + 1);
                }
                else {
                  uint64_t v153 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v153 == v148)
                  {
LABEL_280:
                    *((unsigned char *)this + 24) = 1;
                    *((_DWORD *)v68 - 1) = 0;
                    goto LABEL_296;
                  }
                  unint64_t v154 = v148++;
                  char v155 = *(unsigned char *)(v149 + v154);
                  *((void *)this + 1) = v148;
                  v158 |= (unint64_t)(v155 & 0x7F) << v151;
                  if ((v155 & 0x80) == 0) {
                    break;
                  }
                  v151 += 7;
                  BOOL v81 = v152++ > 8;
                  if (v81)
                  {
                    LODWORD(v158) = 0;
                    goto LABEL_276;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v158) = 0;
                }
LABEL_276:
                unint64_t v159 = v154 + 1;
LABEL_277:
                *((_DWORD *)v68 - 1) = v158;
              }
              while (v159 < v147 && !*((unsigned char *)this + 24));
            }
LABEL_296:
            PB::Reader::recallMark();
          }
          else
          {
            char v176 = *(char **)(a1 + 64);
            unint64_t v175 = *(void *)(a1 + 72);
            if ((unint64_t)v176 >= v175)
            {
              uint64_t v213 = (char *)*v279;
              uint64_t v214 = (v176 - (unsigned char *)*v279) >> 2;
              unint64_t v215 = v214 + 1;
              if ((unint64_t)(v214 + 1) >> 62) {
LABEL_488:
              }
                sub_1903479E8();
              uint64_t v216 = v175 - (void)v213;
              if (v216 >> 1 > v215) {
                unint64_t v215 = v216 >> 1;
              }
              if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v217 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v217 = v215;
              }
              if (v217)
              {
                uint64_t v218 = (char *)sub_190347D04((uint64_t)v8, v217);
                uint64_t v213 = *(char **)(a1 + 56);
                char v176 = *(char **)(a1 + 64);
              }
              else
              {
                uint64_t v218 = 0;
              }
              char v263 = &v218[4 * v214];
              *(_DWORD *)char v263 = 0;
              uint64_t v170 = v263 + 4;
              while (v176 != v213)
              {
                int v264 = *((_DWORD *)v176 - 1);
                v176 -= 4;
                *((_DWORD *)v263 - 1) = v264;
                v263 -= 4;
              }
              *(void *)(a1 + 56) = v263;
              *(void *)(a1 + 64) = v170;
              *(void *)(a1 + 72) = &v218[4 * v217];
              if (v213) {
                operator delete(v213);
              }
            }
            else
            {
              *(_DWORD *)char v176 = 0;
              uint64_t v170 = v176 + 4;
            }
            *(void *)(a1 + 64) = v170;
            unint64_t v265 = *((void *)this + 1);
            unint64_t v266 = *((void *)this + 2);
            uint64_t v267 = *(void *)this;
            char v268 = 0;
            unsigned int v269 = 0;
            if (v265 > 0xFFFFFFFFFFFFFFF5 || v265 + 10 > v266)
            {
              uint64_t v236 = 0;
              if (v266 <= v265) {
                unint64_t v266 = *((void *)this + 1);
              }
              while (v266 != v265)
              {
                unint64_t v271 = v265 + 1;
                char v272 = *(unsigned char *)(v267 + v265);
                *((void *)this + 1) = v271;
                v236 |= (unint64_t)(v272 & 0x7F) << v268;
                if ((v272 & 0x80) == 0)
                {
LABEL_464:
                  if (*((unsigned char *)this + 24)) {
                    LODWORD(v236) = 0;
                  }
                  goto LABEL_471;
                }
                v268 += 7;
                unint64_t v265 = v271;
                BOOL v81 = v269++ > 8;
                if (v81)
                {
LABEL_470:
                  LODWORD(v236) = 0;
                  goto LABEL_471;
                }
              }
LABEL_463:
              LODWORD(v236) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              uint64_t v236 = 0;
              while (1)
              {
                unint64_t v273 = v265 + 1;
                *((void *)this + 1) = v265 + 1;
                char v274 = *(unsigned char *)(v267 + v265);
                v236 |= (unint64_t)(v274 & 0x7F) << v268;
                if ((v274 & 0x80) == 0) {
                  break;
                }
                v268 += 7;
                unint64_t v265 = v273;
                BOOL v81 = v269++ > 8;
                if (v81) {
                  goto LABEL_470;
                }
              }
            }
LABEL_471:
            *(v170 - 1) = v236;
          }
LABEL_472:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_472;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v16 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v13 + v2);
      *((void *)this + 1) = v21;
      v16 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v16 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903F7C6C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(float **)(result + 128);
  uint64_t v5 = *(float **)(result + 136);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  uint64_t v7 = *(float **)(v3 + 104);
  uint64_t v8 = *(float **)(v3 + 112);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  uint64_t v10 = *(float **)(v3 + 152);
  uint64_t v11 = *(float **)(v3 + 160);
  while (v10 != v11)
  {
    float v12 = *v10++;
    double result = PB::Writer::write(this, v12);
  }
  if (*(unsigned char *)(v3 + 180)) {
    double result = PB::Writer::write(this, *(float *)(v3 + 176));
  }
  uint64_t v13 = *(void *)(v3 + 80);
  uint64_t v14 = *(void *)(v3 + 88);
  while (v13 != v14)
  {
    v13 += 4;
    double result = PB::Writer::writeVarInt(this);
  }
  uint64_t v15 = *(void *)(v3 + 8);
  uint64_t v16 = *(void *)(v3 + 16);
  while (v15 != v16)
  {
    v15 += 4;
    double result = PB::Writer::writeVarInt(this);
  }
  uint64_t v17 = *(void *)(v3 + 32);
  uint64_t v18 = *(void *)(v3 + 40);
  while (v17 != v18)
  {
    v17 += 4;
    double result = PB::Writer::writeVarInt(this);
  }
  uint64_t v20 = *(void *)(v3 + 56);
  uint64_t v19 = *(void *)(v3 + 64);
  while (v20 != v19)
  {
    v20 += 4;
    double result = PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903F7D90(uint64_t result)
{
  *(void *)double result = &unk_1EDFD04F0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1903F7DB8(PB::Base *this)
{
  *(void *)this = &unk_1EDFD04F0;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903F7E1C(PB::Base *a1)
{
  sub_1903F7DB8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F7E54(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(double **)(a1 + 8);
  float v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "pose", v7);
  }
  if (*(unsigned char *)(a1 + 40)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903F7EF0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    do
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        unint64_t v13 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v19 = v2 + 1;
          char v20 = *(unsigned char *)(v10 + v2);
          *((void *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0) {
            goto LABEL_21;
          }
          v17 += 7;
          unint64_t v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            unint64_t v13 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2)
      {
        if ((v13 & 7) != 2)
        {
          unint64_t v38 = *(char **)(a1 + 16);
          unint64_t v37 = *(void *)(a1 + 24);
          if ((unint64_t)v38 >= v37)
          {
            unint64_t v40 = (char *)*v8;
            uint64_t v41 = (v38 - (unsigned char *)*v8) >> 3;
            unint64_t v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 61) {
LABEL_84:
            }
              sub_1903479E8();
            uint64_t v43 = v37 - (void)v40;
            if (v43 >> 2 > v42) {
              unint64_t v42 = v43 >> 2;
            }
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v44 = v42;
            }
            if (v44)
            {
              uint64_t v45 = (char *)sub_190347A00(v9, v44);
              unint64_t v40 = *(char **)(a1 + 8);
              unint64_t v38 = *(char **)(a1 + 16);
            }
            else
            {
              uint64_t v45 = 0;
            }
            unint64_t v46 = &v45[8 * v41];
            *(void *)unint64_t v46 = 0;
            unint64_t v39 = v46 + 8;
            while (v38 != v40)
            {
              uint64_t v47 = *((void *)v38 - 1);
              v38 -= 8;
              *((void *)v46 - 1) = v47;
              v46 -= 8;
            }
            *(void *)(a1 + 8) = v46;
            *(void *)(a1 + 16) = v39;
            *(void *)(a1 + 24) = &v45[8 * v44];
            if (v40) {
              operator delete(v40);
            }
          }
          else
          {
            *(void *)unint64_t v38 = 0;
            unint64_t v39 = v38 + 8;
          }
          *(void *)(a1 + 16) = v39;
          unint64_t v48 = *((void *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((void *)this + 2))
          {
LABEL_73:
            *((unsigned char *)this + 24) = 1;
            goto LABEL_76;
          }
          *(v39 - 1) = *(void *)(*(void *)this + v48);
          goto LABEL_75;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v23 = *((void *)this + 1);
        unint64_t v24 = *((void *)this + 2);
        while (v23 < v24 && !*((unsigned char *)this + 24))
        {
          unint64_t v26 = *(char **)(a1 + 16);
          unint64_t v25 = *(void *)(a1 + 24);
          if ((unint64_t)v26 >= v25)
          {
            BOOL v28 = (char *)*v8;
            uint64_t v29 = (v26 - (unsigned char *)*v8) >> 3;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61) {
              goto LABEL_84;
            }
            uint64_t v31 = v25 - (void)v28;
            if (v31 >> 2 > v30) {
              unint64_t v30 = v31 >> 2;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v30;
            }
            if (v32)
            {
              uint64_t v33 = (char *)sub_190347A00(v9, v32);
              BOOL v28 = *(char **)(a1 + 8);
              unint64_t v26 = *(char **)(a1 + 16);
            }
            else
            {
              uint64_t v33 = 0;
            }
            unint64_t v34 = &v33[8 * v29];
            *(void *)unint64_t v34 = 0;
            unint64_t v27 = v34 + 8;
            while (v26 != v28)
            {
              uint64_t v35 = *((void *)v26 - 1);
              v26 -= 8;
              *((void *)v34 - 1) = v35;
              v34 -= 8;
            }
            *(void *)(a1 + 8) = v34;
            *(void *)(a1 + 16) = v27;
            *(void *)(a1 + 24) = &v33[8 * v32];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            *(void *)unint64_t v26 = 0;
            unint64_t v27 = v26 + 8;
          }
          *(void *)(a1 + 16) = v27;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((void *)this + 2))
          {
            *((unsigned char *)this + 24) = 1;
            break;
          }
          *(v27 - 1) = *(void *)(*(void *)this + v36);
          unint64_t v24 = *((void *)this + 2);
          unint64_t v23 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v23;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((v13 >> 3) == 1)
        {
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_73;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
LABEL_75:
          *((void *)this + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(this) & 1) == 0) {
          return 0;
        }
      }
LABEL_76:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1903F82A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 40)) {
    double result = PB::Writer::write(this, *(double *)(result + 32));
  }
  uint64_t v5 = *(double **)(v3 + 8);
  int v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    double v6 = *v5++;
    double result = PB::Writer::write(this, v6);
  }
  return result;
}

uint64_t sub_1903F8308(uint64_t result)
{
  *(void *)double result = &unk_1EDFD06B0;
  *(_DWORD *)(result + 100) = 0;
  return result;
}

void sub_1903F8330(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F8368(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 100);
  if (v5)
  {
    PB::TextFormatter::format(this, "accuracy", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 100);
    if ((v5 & 0x200) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((*(_WORD *)(a1 + 100) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "batchedLocationFixType");
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "gpsAltitude", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "gpsSpeedAccuracy", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "odometer", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x400) == 0)
  {
LABEL_8:
    if ((v5 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "originDevice");
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x800) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "quality");
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "rawSpeed", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x100) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "timestampGps", *(double *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 100);
  if ((v5 & 0x2000) == 0)
  {
LABEL_14:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(this, "trackRunOdometerHasBeenCorrected");
  if ((*(_WORD *)(a1 + 100) & 0x1000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "type");
LABEL_16:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903F856C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 100) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 2u:
              *(_WORD *)(a1 + 100) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 3u:
              *(_WORD *)(a1 + 100) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 4u:
              *(_WORD *)(a1 + 100) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 5u:
              *(_WORD *)(a1 + 100) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 6u:
              *(_WORD *)(a1 + 100) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 7u:
              *(_WORD *)(a1 + 100) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 8u:
              *(_WORD *)(a1 + 100) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_50;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_112;
            case 9u:
              *(_WORD *)(a1 + 100) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
LABEL_112:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_50:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_133;
            case 0xAu:
              *(_WORD *)(a1 + 100) |= 0x400u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_117;
                  }
                  unint64_t v49 = v21++;
                  char v50 = *(unsigned char *)(v22 + v49);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_116:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_117;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_116;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_117;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_117:
              *(_DWORD *)(a1 + 84) = v25;
              goto LABEL_133;
            case 0xBu:
              *(_WORD *)(a1 + 100) |= 0x800u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_122;
                  }
                  unint64_t v53 = v27++;
                  char v54 = *(unsigned char *)(v28 + v53);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_121:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_122;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_121;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_122;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_122:
              *(_DWORD *)(a1 + 88) = v31;
              goto LABEL_133;
            case 0xCu:
              *(_WORD *)(a1 + 100) |= 0x1000u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_127;
                  }
                  unint64_t v57 = v33++;
                  char v58 = *(unsigned char *)(v34 + v57);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_126:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_127;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_126;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_127;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_127:
              *(_DWORD *)(a1 + 92) = v37;
              goto LABEL_133;
            case 0xDu:
              *(_WORD *)(a1 + 100) |= 0x200u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_132;
                  }
                  unint64_t v61 = v39++;
                  char v62 = *(unsigned char *)(v40 + v61);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_131:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_132;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_131;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_132;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_132:
              *(_DWORD *)(a1 + 80) = v43;
LABEL_133:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xEu:
              *(_WORD *)(a1 + 100) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *(unsigned char *)(a1 + 96) = v46;
              goto LABEL_133;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_133;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903F8D18(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 100);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64));
    __int16 v4 = *(_WORD *)(v3 + 100);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x10) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 8) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x100) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 100) & 0x2000) == 0) {
      return result;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 100);
  if ((v4 & 0x200) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 0x2000) == 0) {
    return result;
  }
LABEL_29:

  return PB::Writer::write(this);
}

uint64_t sub_1903F8ED8(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCDBC8;
  *(void *)(result + 72) = 0;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_1903F8F00(PB::Base *this)
{
  *(void *)this = &unk_1EDFCDBC8;
  uint64_t v2 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903F8F84(PB::Base *a1)
{
  sub_1903F8F00(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F8FBC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 80);
  if (v5)
  {
    PB::TextFormatter::format(this, "gpsCourseAccuracy", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 80);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(unsigned char *)(a1 + 80) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "gpsCourseRadians", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "groundAltitude", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 80);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "groundAltitudeUncertainty", *(double *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "maxAbsSlope", *(double *)(a1 + 40));
  char v5 = *(unsigned char *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_20:
    PB::TextFormatter::format(this, "smoothedGPSAltitude", *(double *)(a1 + 56));
    if ((*(unsigned char *)(a1 + 80) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_19:
  PB::TextFormatter::format(this, "slope", *(double *)(a1 + 48));
  char v5 = *(unsigned char *)(a1 + 80);
  if ((v5 & 0x40) != 0) {
    goto LABEL_20;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_21:
  PB::TextFormatter::format(this, "smoothedGPSAltitudeUncertainty", *(double *)(a1 + 64));
LABEL_9:
  uint64_t v6 = *(void *)(a1 + 72);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903F9138(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              operator new();
            case 2u:
              *(unsigned char *)(a1 + 80) |= 4u;
              unint64_t v21 = *((void *)this + 1);
              if (v21 > 0xFFFFFFFFFFFFFFF7 || v21 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v21);
              goto LABEL_50;
            case 3u:
              *(unsigned char *)(a1 + 80) |= 8u;
              unint64_t v22 = *((void *)this + 1);
              if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
              goto LABEL_50;
            case 4u:
              *(unsigned char *)(a1 + 80) |= 0x40u;
              unint64_t v23 = *((void *)this + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v23);
              goto LABEL_50;
            case 5u:
              *(unsigned char *)(a1 + 80) |= 0x80u;
              unint64_t v24 = *((void *)this + 1);
              if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v24);
              goto LABEL_50;
            case 6u:
              *(unsigned char *)(a1 + 80) |= 2u;
              unint64_t v25 = *((void *)this + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v25);
              goto LABEL_50;
            case 7u:
              *(unsigned char *)(a1 + 80) |= 1u;
              unint64_t v26 = *((void *)this + 1);
              if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v26);
              goto LABEL_50;
            case 8u:
              *(unsigned char *)(a1 + 80) |= 0x20u;
              unint64_t v27 = *((void *)this + 1);
              if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)this + 2)) {
                goto LABEL_48;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v27);
              goto LABEL_50;
            case 9u:
              *(unsigned char *)(a1 + 80) |= 0x10u;
              unint64_t v28 = *((void *)this + 1);
              if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v28);
LABEL_50:
                *((void *)this + 1) += 8;
              }
              else
              {
LABEL_48:
                *((unsigned char *)this + 24) = 1;
              }
LABEL_51:
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              goto LABEL_51;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903F9570(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 72);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
    char v5 = *(unsigned char *)(v3 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_5:
      if ((v5 & 0x40) == 0) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(v3 + 80) & 8) == 0)
  {
    goto LABEL_5;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_8:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 1) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
    if ((*(unsigned char *)(v3 + 80) & 0x10) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  char v5 = *(unsigned char *)(v3 + 80);
  if ((v5 & 0x20) != 0) {
    goto LABEL_18;
  }
LABEL_10:
  if ((v5 & 0x10) == 0) {
    return result;
  }
LABEL_19:
  double v6 = *(double *)(v3 + 40);

  return PB::Writer::write(this, v6);
}

uint64_t sub_1903F969C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD308;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_1903F96C4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903F96FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 68);
  if (v5)
  {
    PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "context");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "dataSource");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "error");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 2) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "heartRate", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "interpolation");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "mode");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 4) == 0)
  {
LABEL_9:
    if ((v5 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "sinceLastGood", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  if ((*(_WORD *)(a1 + 68) & 0x10) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
LABEL_12:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903F9880(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_105;
                  }
                  unint64_t v49 = v20++;
                  char v50 = *(unsigned char *)(v21 + v49);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_104;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_104:
                unint64_t v2 = v49 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_105;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_105:
              *(_DWORD *)(a1 + 52) = v24;
              goto LABEL_121;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_110;
                  }
                  unint64_t v53 = v27++;
                  char v54 = *(unsigned char *)(v28 + v53);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_109:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_110;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_109;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_110;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_110:
              *(_DWORD *)(a1 + 56) = v31;
              goto LABEL_121;
            case 3u:
              *(_WORD *)(a1 + 68) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_54;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_100;
            case 4u:
              *(_WORD *)(a1 + 68) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_54;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_100;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v34 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v34 = v33 != 0;
              }
              *(unsigned char *)(a1 + 64) = v34;
              goto LABEL_121;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_54;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_100;
            case 7u:
              *(_WORD *)(a1 + 68) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_54;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_100;
            case 8u:
              *(_WORD *)(a1 + 68) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_100:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_54:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_121;
            case 9u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_115;
                  }
                  unint64_t v57 = v35++;
                  char v58 = *(unsigned char *)(v36 + v57);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_114:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_115;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_114;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v2 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_115;
                }
                v37 += 7;
                unint64_t v35 = v2;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_115:
              *(_DWORD *)(a1 + 60) = v39;
              goto LABEL_121;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_120;
                  }
                  unint64_t v61 = v41++;
                  char v62 = *(unsigned char *)(v42 + v61);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_119:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_120;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_119;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_120;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_120:
              *(_DWORD *)(a1 + 48) = v45;
LABEL_121:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_121;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903F9F3C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x200) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 4) == 0)
  {
LABEL_9:
    if ((v4 & 0x100) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 68) & 0x20) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_21:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1903FA08C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB3C0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1903FA0B4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FA0EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "orientation");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FA168(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FA3F8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

void *sub_1903FA464(void *result)
{
  *uint64_t result = &unk_1EDFCB120;
  result[1] = 0;
  return result;
}

void sub_1903FA488(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FA4C0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 12)) {
    PB::TextFormatter::format(this, "type");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FA520(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 12) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FA758(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 12)) {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_1903FA778(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCDC00;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1903FA7A0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FA7D8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FA89C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FAB1C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903FABC4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF598;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1903FABEC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FAC24(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FACE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FAF68(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903FB010(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCEB18;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1903FB038(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FB070(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FB134(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FB3B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

double sub_1903FB45C(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC3110;
  *(_DWORD *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_1903FB490(PB::Base *this)
{
  *(void *)this = &unk_1EDFC3110;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_1903FB504(PB::Base *a1)
{
  sub_1903FB490(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FB53C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  double v5 = *(float **)(a1 + 8);
  double v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "dotVector", v7);
  }
  if ((*(unsigned char *)(a1 + 72) & 4) != 0) {
    PB::TextFormatter::format(this, "hasValidTNBFrame");
  }
  uint64_t v8 = *(float **)(a1 + 32);
  char v9 = *(float **)(a1 + 40);
  while (v8 != v9)
  {
    float v10 = *v8++;
    PB::TextFormatter::format(this, "headingVector", v10);
  }
  char v11 = *(unsigned char *)(a1 + 72);
  if ((v11 & 8) != 0)
  {
    PB::TextFormatter::format(this, "isPedestrian");
    char v11 = *(unsigned char *)(a1 + 72);
    if ((v11 & 1) == 0)
    {
LABEL_9:
      if ((v11 & 2) == 0) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(a1 + 72) & 1) == 0)
  {
    goto LABEL_9;
  }
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  if ((*(unsigned char *)(a1 + 72) & 2) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "uncertainty", *(float *)(a1 + 64));
LABEL_11:

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903FB664(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    float v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 72) |= 1u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v25);
          uint64_t v26 = *((void *)this + 1) + 8;
          goto LABEL_128;
        case 2u:
          if (v24 != 2)
          {
            int v65 = *(char **)(a1 + 16);
            unint64_t v64 = *(void *)(a1 + 24);
            if ((unint64_t)v65 >= v64)
            {
              unint64_t v69 = (char *)*v10;
              uint64_t v70 = (v65 - (unsigned char *)*v10) >> 2;
              unint64_t v71 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 62) {
LABEL_137:
              }
                sub_1903479E8();
              uint64_t v72 = v64 - (void)v69;
              if (v72 >> 1 > v71) {
                unint64_t v71 = v72 >> 1;
              }
              if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v71;
              }
              if (v73)
              {
                uint64_t v74 = (char *)sub_190347D04(v11, v73);
                unint64_t v69 = *(char **)(a1 + 8);
                int v65 = *(char **)(a1 + 16);
              }
              else
              {
                uint64_t v74 = 0;
              }
              BOOL v81 = &v74[4 * v70];
              *(_DWORD *)BOOL v81 = 0;
              unint64_t v66 = v81 + 4;
              while (v65 != v69)
              {
                int v82 = *((_DWORD *)v65 - 1);
                v65 -= 4;
                *((_DWORD *)v81 - 1) = v82;
                v81 -= 4;
              }
              *(void *)(a1 + 8) = v81;
              *(void *)(a1 + 16) = v66;
              *(void *)(a1 + 24) = &v74[4 * v73];
              if (v69) {
                operator delete(v69);
              }
            }
            else
            {
              *(_DWORD *)int v65 = 0;
              unint64_t v66 = v65 + 4;
            }
            *(void *)(a1 + 16) = v66;
            goto LABEL_123;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v27 = *((void *)this + 1);
          unint64_t v28 = *((void *)this + 2);
          while (v27 < v28 && !*((unsigned char *)this + 24))
          {
            char v30 = *(char **)(a1 + 16);
            unint64_t v29 = *(void *)(a1 + 24);
            if ((unint64_t)v30 >= v29)
            {
              char v32 = (char *)*v10;
              uint64_t v33 = (v30 - (unsigned char *)*v10) >> 2;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 62) {
                goto LABEL_137;
              }
              uint64_t v35 = v29 - (void)v32;
              if (v35 >> 1 > v34) {
                unint64_t v34 = v35 >> 1;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                char v37 = (char *)sub_190347D04(v11, v36);
                char v32 = *(char **)(a1 + 8);
                char v30 = *(char **)(a1 + 16);
              }
              else
              {
                char v37 = 0;
              }
              unsigned int v38 = &v37[4 * v33];
              *(_DWORD *)unsigned int v38 = 0;
              uint64_t v31 = v38 + 4;
              while (v30 != v32)
              {
                int v39 = *((_DWORD *)v30 - 1);
                v30 -= 4;
                *((_DWORD *)v38 - 1) = v39;
                v38 -= 4;
              }
              *(void *)(a1 + 8) = v38;
              *(void *)(a1 + 16) = v31;
              *(void *)(a1 + 24) = &v37[4 * v36];
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(_DWORD *)char v30 = 0;
              uint64_t v31 = v30 + 4;
            }
            *(void *)(a1 + 16) = v31;
            unint64_t v40 = *((void *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
              goto LABEL_91;
            }
            *(v31 - 1) = *(_DWORD *)(*(void *)this + v40);
            unint64_t v28 = *((void *)this + 2);
            unint64_t v27 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v27;
          }
          goto LABEL_92;
        case 3u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v41 = *((void *)this + 1);
            unint64_t v42 = *((void *)this + 2);
            while (v41 < v42 && !*((unsigned char *)this + 24))
            {
              unsigned int v44 = *(char **)(a1 + 40);
              unint64_t v43 = *(void *)(a1 + 48);
              if ((unint64_t)v44 >= v43)
              {
                char v46 = (char *)*v8;
                uint64_t v47 = (v44 - (unsigned char *)*v8) >> 2;
                unint64_t v48 = v47 + 1;
                if ((unint64_t)(v47 + 1) >> 62) {
                  goto LABEL_138;
                }
                uint64_t v49 = v43 - (void)v46;
                if (v49 >> 1 > v48) {
                  unint64_t v48 = v49 >> 1;
                }
                if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v50 = v48;
                }
                if (v50)
                {
                  char v51 = (char *)sub_190347D04(v9, v50);
                  char v46 = *(char **)(a1 + 32);
                  unsigned int v44 = *(char **)(a1 + 40);
                }
                else
                {
                  char v51 = 0;
                }
                unsigned int v52 = &v51[4 * v47];
                *(_DWORD *)unsigned int v52 = 0;
                uint64_t v45 = v52 + 4;
                while (v44 != v46)
                {
                  int v53 = *((_DWORD *)v44 - 1);
                  v44 -= 4;
                  *((_DWORD *)v52 - 1) = v53;
                  v52 -= 4;
                }
                *(void *)(a1 + 32) = v52;
                *(void *)(a1 + 40) = v45;
                *(void *)(a1 + 48) = &v51[4 * v50];
                if (v46) {
                  operator delete(v46);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v44 = 0;
                uint64_t v45 = v44 + 4;
              }
              *(void *)(a1 + 40) = v45;
              unint64_t v54 = *((void *)this + 1);
              if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)this + 2))
              {
LABEL_91:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v45 - 1) = *(_DWORD *)(*(void *)this + v54);
              unint64_t v42 = *((void *)this + 2);
              unint64_t v41 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v41;
            }
LABEL_92:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v68 = *(char **)(a1 + 40);
            unint64_t v67 = *(void *)(a1 + 48);
            if ((unint64_t)v68 >= v67)
            {
              unint64_t v75 = (char *)*v8;
              uint64_t v76 = (v68 - (unsigned char *)*v8) >> 2;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 62) {
LABEL_138:
              }
                sub_1903479E8();
              uint64_t v78 = v67 - (void)v75;
              if (v78 >> 1 > v77) {
                unint64_t v77 = v78 >> 1;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v77;
              }
              if (v79)
              {
                uint64_t v80 = (char *)sub_190347D04(v9, v79);
                unint64_t v75 = *(char **)(a1 + 32);
                unint64_t v68 = *(char **)(a1 + 40);
              }
              else
              {
                uint64_t v80 = 0;
              }
              unsigned int v83 = &v80[4 * v76];
              *(_DWORD *)unsigned int v83 = 0;
              unint64_t v66 = v83 + 4;
              while (v68 != v75)
              {
                int v84 = *((_DWORD *)v68 - 1);
                v68 -= 4;
                *((_DWORD *)v83 - 1) = v84;
                v83 -= 4;
              }
              *(void *)(a1 + 32) = v83;
              *(void *)(a1 + 40) = v66;
              *(void *)(a1 + 48) = &v80[4 * v79];
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v68 = 0;
              unint64_t v66 = v68 + 4;
            }
            *(void *)(a1 + 40) = v66;
LABEL_123:
            unint64_t v85 = *((void *)this + 1);
            if (v85 <= 0xFFFFFFFFFFFFFFFBLL && v85 + 4 <= *((void *)this + 2))
            {
              *(v66 - 1) = *(_DWORD *)(*(void *)this + v85);
LABEL_127:
              uint64_t v26 = *((void *)this + 1) + 4;
LABEL_128:
              *((void *)this + 1) = v26;
            }
            else
            {
LABEL_125:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_129:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(unsigned char *)(a1 + 72) |= 2u;
          unint64_t v55 = *((void *)this + 1);
          if (v55 > 0xFFFFFFFFFFFFFFFBLL || v55 + 4 > *((void *)this + 2)) {
            goto LABEL_125;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v55);
          goto LABEL_127;
        case 5u:
          *(unsigned char *)(a1 + 72) |= 8u;
          unint64_t v56 = *((void *)this + 1);
          if (v56 >= *((void *)this + 2))
          {
            BOOL v59 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v57 = v56 + 1;
            int v58 = *(unsigned __int8 *)(*(void *)this + v56);
            *((void *)this + 1) = v57;
            BOOL v59 = v58 != 0;
          }
          *(unsigned char *)(a1 + 69) = v59;
          goto LABEL_129;
        case 6u:
          *(unsigned char *)(a1 + 72) |= 4u;
          unint64_t v60 = *((void *)this + 1);
          if (v60 >= *((void *)this + 2))
          {
            BOOL v63 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v61 = v60 + 1;
            int v62 = *(unsigned __int8 *)(*(void *)this + v60);
            *((void *)this + 1) = v61;
            BOOL v63 = v62 != 0;
          }
          *(unsigned char *)(a1 + 68) = v63;
          goto LABEL_129;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_129;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FBCCC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 72)) {
    double result = PB::Writer::write(this, *(double *)(result + 56));
  }
  int v4 = *(float **)(v3 + 8);
  double v5 = *(float **)(v3 + 16);
  while (v4 != v5)
  {
    float v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  float v7 = *(float **)(v3 + 32);
  uint64_t v8 = *(float **)(v3 + 40);
  while (v7 != v8)
  {
    float v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  char v10 = *(unsigned char *)(v3 + 72);
  if ((v10 & 2) == 0)
  {
    if ((*(unsigned char *)(v3 + 72) & 8) == 0) {
      goto LABEL_11;
    }
LABEL_14:
    double result = PB::Writer::write(this);
    if ((*(unsigned char *)(v3 + 72) & 4) == 0) {
      return result;
    }
    goto LABEL_15;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 64));
  char v10 = *(unsigned char *)(v3 + 72);
  if ((v10 & 8) != 0) {
    goto LABEL_14;
  }
LABEL_11:
  if ((v10 & 4) == 0) {
    return result;
  }
LABEL_15:

  return PB::Writer::write(this);
}

uint64_t sub_1903FBDBC(uint64_t result)
{
  *(void *)double result = &unk_1EDFC2FF8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1903FBDE4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FBE1C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dotMeasurement", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotMeasurementUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FBEE0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FC160(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903FC208(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF368;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1903FC230(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FC268(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FC32C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FC5AC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903FC654(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC3378;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_1903FC67C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FC6B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dotDeltaBufferMaxAbs", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "dotDeltaBufferVar", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "dotErrorEstimate", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "dotRelativeChangeOverBuffer", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "headingDeltaBufferVar", *(float *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "headingRelativeChangeOverBuffer", *(float *)(a1 + 36));
  if (*(unsigned char *)(a1 + 40)) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FC7D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_47;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 5u:
          *(unsigned char *)(a1 + 40) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 6u:
          *(unsigned char *)(a1 + 40) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_46;
        case 7u:
          *(unsigned char *)(a1 + 40) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_46:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_47:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_44:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FCB0C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
    if ((*(unsigned char *)(v3 + 40) & 8) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_15:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903FCC08(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC3180;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1903FCC30(PB::Base *this)
{
  *(void *)this = &unk_1EDFC3180;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903FCC94(PB::Base *a1)
{
  sub_1903FCC30(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FCCCC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(unsigned char *)(a1 + 52) & 4) != 0) {
    PB::TextFormatter::format(this, "placementFiltered");
  }
  float v5 = *(float **)(a1 + 8);
  float v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "placementProbabilityFiltered", v7);
  }
  char v8 = *(unsigned char *)(a1 + 52);
  if (v8)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    char v8 = *(unsigned char *)(a1 + 52);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903FCDA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 52) |= 1u;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_95;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
          goto LABEL_60;
        case 2u:
          *(unsigned char *)(a1 + 52) |= 4u;
          unint64_t v23 = *((void *)this + 1);
          unint64_t v24 = *((void *)this + 2);
          uint64_t v25 = *(void *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v28 = 0;
            do
            {
              unint64_t v29 = v23 + 1;
              *((void *)this + 1) = v23 + 1;
              char v30 = *(unsigned char *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0) {
                goto LABEL_84;
              }
              v26 += 7;
              unint64_t v23 = v29;
              BOOL v16 = v27++ > 8;
            }
            while (!v16);
LABEL_70:
            LODWORD(v28) = 0;
            goto LABEL_84;
          }
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v28 = 0;
          if (v24 <= v23) {
            unint64_t v24 = *((void *)this + 1);
          }
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v49 = v23 + 1;
              char v50 = *(unsigned char *)(v25 + v23);
              *((void *)this + 1) = v49;
              v28 |= (unint64_t)(v50 & 0x7F) << v47;
              if (v50 < 0)
              {
                v47 += 7;
                unint64_t v23 = v49;
                BOOL v16 = v48++ > 8;
                if (v16) {
                  goto LABEL_70;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v28) = 0;
              }
            }
            break;
          }
LABEL_84:
          *(_DWORD *)(a1 + 48) = v28;
          goto LABEL_96;
        case 3u:
          if ((v13 & 7) == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v31 = *((void *)this + 1);
            unint64_t v32 = *((void *)this + 2);
            while (v31 < v32 && !*((unsigned char *)this + 24))
            {
              unint64_t v34 = *(char **)(a1 + 16);
              unint64_t v33 = *(void *)(a1 + 24);
              if ((unint64_t)v34 >= v33)
              {
                unint64_t v36 = (char *)*v8;
                uint64_t v37 = (v34 - (unsigned char *)*v8) >> 2;
                unint64_t v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62) {
                  goto LABEL_107;
                }
                uint64_t v39 = v33 - (void)v36;
                if (v39 >> 1 > v38) {
                  unint64_t v38 = v39 >> 1;
                }
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v40 = v38;
                }
                if (v40)
                {
                  unint64_t v41 = (char *)sub_190347D04(v9, v40);
                  unint64_t v36 = *(char **)(a1 + 8);
                  unint64_t v34 = *(char **)(a1 + 16);
                }
                else
                {
                  unint64_t v41 = 0;
                }
                unint64_t v42 = &v41[4 * v37];
                *(_DWORD *)unint64_t v42 = 0;
                uint64_t v35 = v42 + 4;
                while (v34 != v36)
                {
                  int v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *((_DWORD *)v42 - 1) = v43;
                  v42 -= 4;
                }
                *(void *)(a1 + 8) = v42;
                *(void *)(a1 + 16) = v35;
                *(void *)(a1 + 24) = &v41[4 * v40];
                if (v36) {
                  operator delete(v36);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v34 = 0;
                uint64_t v35 = v34 + 4;
              }
              *(void *)(a1 + 16) = v35;
              unint64_t v44 = *((void *)this + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v35 - 1) = *(_DWORD *)(*(void *)this + v44);
              unint64_t v32 = *((void *)this + 2);
              unint64_t v31 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v31;
            }
            PB::Reader::recallMark();
          }
          else
          {
            unsigned int v52 = *(char **)(a1 + 16);
            unint64_t v51 = *(void *)(a1 + 24);
            if ((unint64_t)v52 >= v51)
            {
              unint64_t v54 = (char *)*v8;
              uint64_t v55 = (v52 - (unsigned char *)*v8) >> 2;
              unint64_t v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62) {
LABEL_107:
              }
                sub_1903479E8();
              uint64_t v57 = v51 - (void)v54;
              if (v57 >> 1 > v56) {
                unint64_t v56 = v57 >> 1;
              }
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v56;
              }
              if (v58)
              {
                BOOL v59 = (char *)sub_190347D04(v9, v58);
                unint64_t v54 = *(char **)(a1 + 8);
                unsigned int v52 = *(char **)(a1 + 16);
              }
              else
              {
                BOOL v59 = 0;
              }
              unint64_t v60 = &v59[4 * v55];
              *(_DWORD *)unint64_t v60 = 0;
              int v53 = v60 + 4;
              while (v52 != v54)
              {
                int v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *(void *)(a1 + 8) = v60;
              *(void *)(a1 + 16) = v53;
              *(void *)(a1 + 24) = &v59[4 * v58];
              if (v54) {
                operator delete(v54);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v52 = 0;
              int v53 = v52 + 4;
            }
            *(void *)(a1 + 16) = v53;
            unint64_t v62 = *((void *)this + 1);
            if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *((void *)this + 2))
            {
              *(v53 - 1) = *(_DWORD *)(*(void *)this + v62);
              uint64_t v46 = *((void *)this + 1) + 4;
LABEL_61:
              *((void *)this + 1) = v46;
            }
            else
            {
LABEL_95:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_96:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(unsigned char *)(a1 + 52) |= 2u;
          unint64_t v45 = *((void *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((void *)this + 2)) {
            goto LABEL_95;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v45);
LABEL_60:
          uint64_t v46 = *((void *)this + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_96;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FD2A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 52);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    char v4 = *(unsigned char *)(v3 + 52);
  }
  if ((v4 & 4) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this);
  }
  float v5 = *(float **)(v3 + 8);
  float v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7);
  }
  if ((*(unsigned char *)(v3 + 52) & 2) != 0)
  {
    double v8 = *(double *)(v3 + 40);
    return PB::Writer::write(this, v8);
  }
  return result;
}

uint64_t sub_1903FD354(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB3F8;
  *(_DWORD *)(result + 108) = 0;
  return result;
}

void sub_1903FD37C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FD3B4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "pitchMean", *(float *)(a1 + 24));
    int v5 = *(_DWORD *)(a1 + 108);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "pitchStd", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "rollMeanAbs", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "rollStd", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpXYHigh", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpXYPed", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpZHigh", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "rotRateInerFFTAmpZPed", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "rotRateInerXYMean", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "rotRateInerXYStd", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "rotRateInerZMean", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "rotRateInerZStd", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 1) == 0)
  {
LABEL_14:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 2) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpXYHigh", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpXYPed", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpZHigh", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "userAccelInerFFTAmpZPed", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x40000) == 0)
  {
LABEL_20:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "userAccelInerXYMean", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x80000) == 0)
  {
LABEL_21:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "userAccelInerXYStd", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x100000) == 0)
  {
LABEL_22:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "userAccelInerZMean", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 108);
  if ((v5 & 0x200000) == 0)
  {
LABEL_23:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
LABEL_49:
  PB::TextFormatter::format(this, "userAccelInerZStd", *(float *)(a1 + 100));
  if ((*(_DWORD *)(a1 + 108) & 0x400000) != 0) {
LABEL_24:
  }
    PB::TextFormatter::format(this, "yawStd", *(float *)(a1 + 104));
LABEL_25:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FD6D8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 108) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_88;
        case 2u:
          *(_DWORD *)(a1 + 108) |= 0x40000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 3u:
          *(_DWORD *)(a1 + 108) |= 0x100000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 4u:
          *(_DWORD *)(a1 + 108) |= 0x80000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 5u:
          *(_DWORD *)(a1 + 108) |= 0x200000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 6u:
          *(_DWORD *)(a1 + 108) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 7u:
          *(_DWORD *)(a1 + 108) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 8u:
          *(_DWORD *)(a1 + 108) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 9u:
          *(_DWORD *)(a1 + 108) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xAu:
          *(_DWORD *)(a1 + 108) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xBu:
          *(_DWORD *)(a1 + 108) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xCu:
          *(_DWORD *)(a1 + 108) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xDu:
          *(_DWORD *)(a1 + 108) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xEu:
          *(_DWORD *)(a1 + 108) |= 0x400000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0xFu:
          *(_DWORD *)(a1 + 108) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x10u:
          *(_DWORD *)(a1 + 108) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x11u:
          *(_DWORD *)(a1 + 108) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x12u:
          *(_DWORD *)(a1 + 108) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x13u:
          *(_DWORD *)(a1 + 108) |= 0x8000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x14u:
          *(_DWORD *)(a1 + 108) |= 0x4000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x15u:
          *(_DWORD *)(a1 + 108) |= 0x20000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_95;
        case 0x16u:
          *(_DWORD *)(a1 + 108) |= 0x10000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
LABEL_95:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_96;
        case 0x17u:
          *(_DWORD *)(a1 + 108) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_93:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_88:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_96:
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FDDCC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 108);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    int v4 = *(_DWORD *)(v3 + 108);
    if ((v4 & 0x40000) == 0)
    {
LABEL_3:
      if ((v4 & 0x100000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v4 & 0x40000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100000) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200000) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x1000) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x2000) == 0)
  {
LABEL_10:
    if ((v4 & 4) == 0) {
      goto LABEL_11;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 4) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 8) == 0) {
      goto LABEL_13;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 8) == 0)
  {
LABEL_13:
    if ((v4 & 0x20) == 0) {
      goto LABEL_14;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20) == 0)
  {
LABEL_14:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x400000) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 0x40) == 0) {
      goto LABEL_17;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x40) == 0)
  {
LABEL_17:
    if ((v4 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x200) == 0)
  {
LABEL_18:
    if ((v4 & 0x100) == 0) {
      goto LABEL_19;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x100) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x4000) == 0)
  {
LABEL_21:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x20000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_23;
    }
LABEL_46:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
    if ((*(_DWORD *)(v3 + 108) & 2) == 0) {
      return result;
    }
    goto LABEL_47;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 108);
  if ((v4 & 0x10000) != 0) {
    goto LABEL_46;
  }
LABEL_23:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_47:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1903FE088(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCEA8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1903FE0B0(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FE0E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "radius", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FE164(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
        unint64_t v2 = *((void *)this + 1) + 4;
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
        {
LABEL_28:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_33;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
        unint64_t v2 = *((void *)this + 1) + 8;
      }
      *((void *)this + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1903FE348(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(this, v5);
  }
  return result;
}

uint64_t sub_1903FE3B4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCBBD8;
  *(_DWORD *)(result + 68) = 0;
  return result;
}

void sub_1903FE3DC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FE414(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(this, "didExceedRadius");
    __int16 v5 = *(_WORD *)(a1 + 68);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "fenceID");
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "positionRefX", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "positionRefY", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "positionRefZ", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "positionUncX", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "positionUncY", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "positionUncZ", *(float *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "positionX", *(float *)(a1 + 52));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "positionY", *(float *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "positionZ", *(float *)(a1 + 60));
  __int16 v5 = *(_WORD *)(a1 + 68);
  if ((v5 & 1) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(_WORD *)(a1 + 68) & 2) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_15:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FE5F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 68) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_50;
            case 2u:
              *(_WORD *)(a1 + 68) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 3u:
              *(_WORD *)(a1 + 68) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 4u:
              *(_WORD *)(a1 + 68) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 5u:
              *(_WORD *)(a1 + 68) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 6u:
              *(_WORD *)(a1 + 68) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 7u:
              *(_WORD *)(a1 + 68) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 8u:
              *(_WORD *)(a1 + 68) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 64) = v22;
              goto LABEL_84;
            case 9u:
              *(_WORD *)(a1 + 68) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_50:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_78;
            case 0xAu:
              *(_WORD *)(a1 + 68) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 0xBu:
              *(_WORD *)(a1 + 68) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_77;
            case 0xCu:
              *(_WORD *)(a1 + 68) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
LABEL_77:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_78:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_84;
            case 0xDu:
              *(_WORD *)(a1 + 68) |= 4u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_83;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_82;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_83;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *(_DWORD *)(a1 + 24) = v27;
LABEL_84:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_84;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1903FEB54(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 68);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    __int16 v4 = *(_WORD *)(v3 + 68);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((*(_WORD *)(result + 68) & 0x200) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x10) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x10) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
    if ((*(_WORD *)(v3 + 68) & 4) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 68);
  if ((v4 & 0x20) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_27:

  return PB::Writer::writeVarInt(this);
}

void sub_1903FECFC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FED34(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "type");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FEDB0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FF040(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(this, v5);
  }
  return result;
}

uint64_t sub_1903FF0AC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF5D0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1903FF0D4(PB::Base *this)
{
  *(void *)this = &unk_1EDFCF5D0;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903FF138(PB::Base *a1)
{
  sub_1903FF0D4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FF170(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(unsigned char *)(a1 + 52) & 4) != 0) {
    PB::TextFormatter::format(this, "isPedestrian");
  }
  double v5 = *(float **)(a1 + 8);
  float v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "pedestrianClassProbability", v7);
  }
  char v8 = *(unsigned char *)(a1 + 52);
  if (v8)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    char v8 = *(unsigned char *)(a1 + 52);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903FF244(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 52) |= 1u;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_81;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
          goto LABEL_55;
        case 2u:
          *(unsigned char *)(a1 + 52) |= 4u;
          unint64_t v23 = *((void *)this + 1);
          if (v23 >= *((void *)this + 2))
          {
            BOOL v26 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v24 = v23 + 1;
            int v25 = *(unsigned __int8 *)(*(void *)this + v23);
            *((void *)this + 1) = v24;
            BOOL v26 = v25 != 0;
          }
          *(unsigned char *)(a1 + 48) = v26;
          goto LABEL_82;
        case 3u:
          if ((v13 & 7) == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v27 = *((void *)this + 1);
            unint64_t v28 = *((void *)this + 2);
            while (v27 < v28 && !*((unsigned char *)this + 24))
            {
              char v30 = *(char **)(a1 + 16);
              unint64_t v29 = *(void *)(a1 + 24);
              if ((unint64_t)v30 >= v29)
              {
                char v32 = (char *)*v8;
                uint64_t v33 = (v30 - (unsigned char *)*v8) >> 2;
                unint64_t v34 = v33 + 1;
                if ((unint64_t)(v33 + 1) >> 62) {
                  goto LABEL_91;
                }
                uint64_t v35 = v29 - (void)v32;
                if (v35 >> 1 > v34) {
                  unint64_t v34 = v35 >> 1;
                }
                if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v36 = v34;
                }
                if (v36)
                {
                  uint64_t v37 = (char *)sub_190347D04(v9, v36);
                  char v32 = *(char **)(a1 + 8);
                  char v30 = *(char **)(a1 + 16);
                }
                else
                {
                  uint64_t v37 = 0;
                }
                unint64_t v38 = &v37[4 * v33];
                *(_DWORD *)unint64_t v38 = 0;
                unint64_t v31 = v38 + 4;
                while (v30 != v32)
                {
                  int v39 = *((_DWORD *)v30 - 1);
                  v30 -= 4;
                  *((_DWORD *)v38 - 1) = v39;
                  v38 -= 4;
                }
                *(void *)(a1 + 8) = v38;
                *(void *)(a1 + 16) = v31;
                *(void *)(a1 + 24) = &v37[4 * v36];
                if (v32) {
                  operator delete(v32);
                }
              }
              else
              {
                *(_DWORD *)char v30 = 0;
                unint64_t v31 = v30 + 4;
              }
              *(void *)(a1 + 16) = v31;
              unint64_t v40 = *((void *)this + 1);
              if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v31 - 1) = *(_DWORD *)(*(void *)this + v40);
              unint64_t v28 = *((void *)this + 2);
              unint64_t v27 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v27;
            }
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v44 = *(char **)(a1 + 16);
            unint64_t v43 = *(void *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              uint64_t v46 = (char *)*v8;
              uint64_t v47 = (v44 - (unsigned char *)*v8) >> 2;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 62) {
LABEL_91:
              }
                sub_1903479E8();
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 1 > v48) {
                unint64_t v48 = v49 >> 1;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                unint64_t v51 = (char *)sub_190347D04(v9, v50);
                uint64_t v46 = *(char **)(a1 + 8);
                unint64_t v44 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v51 = 0;
              }
              unsigned int v52 = &v51[4 * v47];
              *(_DWORD *)unsigned int v52 = 0;
              unint64_t v45 = v52 + 4;
              while (v44 != v46)
              {
                int v53 = *((_DWORD *)v44 - 1);
                v44 -= 4;
                *((_DWORD *)v52 - 1) = v53;
                v52 -= 4;
              }
              *(void *)(a1 + 8) = v52;
              *(void *)(a1 + 16) = v45;
              *(void *)(a1 + 24) = &v51[4 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v44 = 0;
              unint64_t v45 = v44 + 4;
            }
            *(void *)(a1 + 16) = v45;
            unint64_t v54 = *((void *)this + 1);
            if (v54 <= 0xFFFFFFFFFFFFFFFBLL && v54 + 4 <= *((void *)this + 2))
            {
              *(v45 - 1) = *(_DWORD *)(*(void *)this + v54);
              uint64_t v42 = *((void *)this + 1) + 4;
LABEL_56:
              *((void *)this + 1) = v42;
            }
            else
            {
LABEL_81:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_82:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(unsigned char *)(a1 + 52) |= 2u;
          unint64_t v41 = *((void *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFF7 || v41 + 8 > *((void *)this + 2)) {
            goto LABEL_81;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v41);
LABEL_55:
          uint64_t v42 = *((void *)this + 1) + 8;
          goto LABEL_56;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_82;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FF6A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 52);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    char v4 = *(unsigned char *)(v3 + 52);
  }
  if ((v4 & 4) != 0) {
    uint64_t result = PB::Writer::write(this);
  }
  double v5 = *(float **)(v3 + 8);
  float v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7);
  }
  if ((*(unsigned char *)(v3 + 52) & 2) != 0)
  {
    double v8 = *(double *)(v3 + 40);
    return PB::Writer::write(this, v8);
  }
  return result;
}

uint64_t sub_1903FF758(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF3A0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 52) = 0;
  return result;
}

void sub_1903FF780(PB::Base *this)
{
  *(void *)this = &unk_1EDFCF3A0;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_1903FF7E4(PB::Base *a1)
{
  sub_1903FF780(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FF81C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if ((*(unsigned char *)(a1 + 52) & 4) != 0) {
    PB::TextFormatter::format(this, "placement");
  }
  double v5 = *(float **)(a1 + 8);
  float v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "placementProbability", v7);
  }
  char v8 = *(unsigned char *)(a1 + 52);
  if (v8)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
    char v8 = *(unsigned char *)(a1 + 52);
  }
  if ((v8 & 2) != 0) {
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 40));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1903FF8F0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 52) |= 1u;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_95;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
          goto LABEL_60;
        case 2u:
          *(unsigned char *)(a1 + 52) |= 4u;
          unint64_t v23 = *((void *)this + 1);
          unint64_t v24 = *((void *)this + 2);
          uint64_t v25 = *(void *)this;
          if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
          {
            char v26 = 0;
            unsigned int v27 = 0;
            uint64_t v28 = 0;
            do
            {
              unint64_t v29 = v23 + 1;
              *((void *)this + 1) = v23 + 1;
              char v30 = *(unsigned char *)(v25 + v23);
              v28 |= (unint64_t)(v30 & 0x7F) << v26;
              if ((v30 & 0x80) == 0) {
                goto LABEL_84;
              }
              v26 += 7;
              unint64_t v23 = v29;
              BOOL v16 = v27++ > 8;
            }
            while (!v16);
LABEL_70:
            LODWORD(v28) = 0;
            goto LABEL_84;
          }
          char v47 = 0;
          unsigned int v48 = 0;
          uint64_t v28 = 0;
          if (v24 <= v23) {
            unint64_t v24 = *((void *)this + 1);
          }
          while (2)
          {
            if (v24 == v23)
            {
              LODWORD(v28) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v49 = v23 + 1;
              char v50 = *(unsigned char *)(v25 + v23);
              *((void *)this + 1) = v49;
              v28 |= (unint64_t)(v50 & 0x7F) << v47;
              if (v50 < 0)
              {
                v47 += 7;
                unint64_t v23 = v49;
                BOOL v16 = v48++ > 8;
                if (v16) {
                  goto LABEL_70;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v28) = 0;
              }
            }
            break;
          }
LABEL_84:
          *(_DWORD *)(a1 + 48) = v28;
          goto LABEL_96;
        case 3u:
          if ((v13 & 7) == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v31 = *((void *)this + 1);
            unint64_t v32 = *((void *)this + 2);
            while (v31 < v32 && !*((unsigned char *)this + 24))
            {
              unint64_t v34 = *(char **)(a1 + 16);
              unint64_t v33 = *(void *)(a1 + 24);
              if ((unint64_t)v34 >= v33)
              {
                unint64_t v36 = (char *)*v8;
                uint64_t v37 = (v34 - (unsigned char *)*v8) >> 2;
                unint64_t v38 = v37 + 1;
                if ((unint64_t)(v37 + 1) >> 62) {
                  goto LABEL_107;
                }
                uint64_t v39 = v33 - (void)v36;
                if (v39 >> 1 > v38) {
                  unint64_t v38 = v39 >> 1;
                }
                if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v40 = v38;
                }
                if (v40)
                {
                  unint64_t v41 = (char *)sub_190347D04(v9, v40);
                  unint64_t v36 = *(char **)(a1 + 8);
                  unint64_t v34 = *(char **)(a1 + 16);
                }
                else
                {
                  unint64_t v41 = 0;
                }
                uint64_t v42 = &v41[4 * v37];
                *(_DWORD *)uint64_t v42 = 0;
                uint64_t v35 = v42 + 4;
                while (v34 != v36)
                {
                  int v43 = *((_DWORD *)v34 - 1);
                  v34 -= 4;
                  *((_DWORD *)v42 - 1) = v43;
                  v42 -= 4;
                }
                *(void *)(a1 + 8) = v42;
                *(void *)(a1 + 16) = v35;
                *(void *)(a1 + 24) = &v41[4 * v40];
                if (v36) {
                  operator delete(v36);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v34 = 0;
                uint64_t v35 = v34 + 4;
              }
              *(void *)(a1 + 16) = v35;
              unint64_t v44 = *((void *)this + 1);
              if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v35 - 1) = *(_DWORD *)(*(void *)this + v44);
              unint64_t v32 = *((void *)this + 2);
              unint64_t v31 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v31;
            }
            PB::Reader::recallMark();
          }
          else
          {
            unsigned int v52 = *(char **)(a1 + 16);
            unint64_t v51 = *(void *)(a1 + 24);
            if ((unint64_t)v52 >= v51)
            {
              unint64_t v54 = (char *)*v8;
              uint64_t v55 = (v52 - (unsigned char *)*v8) >> 2;
              unint64_t v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62) {
LABEL_107:
              }
                sub_1903479E8();
              uint64_t v57 = v51 - (void)v54;
              if (v57 >> 1 > v56) {
                unint64_t v56 = v57 >> 1;
              }
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v56;
              }
              if (v58)
              {
                BOOL v59 = (char *)sub_190347D04(v9, v58);
                unint64_t v54 = *(char **)(a1 + 8);
                unsigned int v52 = *(char **)(a1 + 16);
              }
              else
              {
                BOOL v59 = 0;
              }
              unint64_t v60 = &v59[4 * v55];
              *(_DWORD *)unint64_t v60 = 0;
              int v53 = v60 + 4;
              while (v52 != v54)
              {
                int v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *(void *)(a1 + 8) = v60;
              *(void *)(a1 + 16) = v53;
              *(void *)(a1 + 24) = &v59[4 * v58];
              if (v54) {
                operator delete(v54);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v52 = 0;
              int v53 = v52 + 4;
            }
            *(void *)(a1 + 16) = v53;
            unint64_t v62 = *((void *)this + 1);
            if (v62 <= 0xFFFFFFFFFFFFFFFBLL && v62 + 4 <= *((void *)this + 2))
            {
              *(v53 - 1) = *(_DWORD *)(*(void *)this + v62);
              uint64_t v46 = *((void *)this + 1) + 4;
LABEL_61:
              *((void *)this + 1) = v46;
            }
            else
            {
LABEL_95:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_96:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(unsigned char *)(a1 + 52) |= 2u;
          unint64_t v45 = *((void *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFF7 || v45 + 8 > *((void *)this + 2)) {
            goto LABEL_95;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v45);
LABEL_60:
          uint64_t v46 = *((void *)this + 1) + 8;
          goto LABEL_61;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_96;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1903FFDF4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 52);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    char v4 = *(unsigned char *)(v3 + 52);
  }
  if ((v4 & 4) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this);
  }
  double v5 = *(float **)(v3 + 8);
  float v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7);
  }
  if ((*(unsigned char *)(v3 + 52) & 2) != 0)
  {
    double v8 = *(double *)(v3 + 40);
    return PB::Writer::write(this, v8);
  }
  return result;
}

uint64_t sub_1903FFEA4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCE610;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_1903FFECC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1903FFF04(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "speedUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1903FFFC8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190400248(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1904002F0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF3D8;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_190400318(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190400350(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "speed", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "speedUnc", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 32) & 2) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190400414(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_33;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_36;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_33:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_39;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_38:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_39:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_36:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190400694(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
      if ((*(unsigned char *)(v3 + 32) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19040073C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCEDB8;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_190400764(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040079C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 48);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampPast", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "velocityUncX", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "velocityUncY", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "velocityUncZ", *(float *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
    if ((*(unsigned char *)(a1 + 48) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "velocityZ", *(float *)(a1 + 44));
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1904008E0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 48) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 2u:
          *(unsigned char *)(a1 + 48) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 3u:
          *(unsigned char *)(a1 + 48) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 4u:
          *(unsigned char *)(a1 + 48) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 5u:
          *(unsigned char *)(a1 + 48) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 6u:
          *(unsigned char *)(a1 + 48) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_50;
        case 7u:
          *(unsigned char *)(a1 + 48) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_48;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
LABEL_50:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_51;
        case 8u:
          *(unsigned char *)(a1 + 48) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_48:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_43:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_51:
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190400C50(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 48);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(result + 48) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x10) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
    if ((*(unsigned char *)(v3 + 48) & 2) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 0x10) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_17:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

void *sub_190400D68(void *result)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_1EDFC2A80;
  return result;
}

void sub_190400D8C(PB::Base *this)
{
  *(void *)this = &unk_1EDFC2A80;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  PB::Base::~Base(this);
}

void sub_190400E40(PB::Base *a1)
{
  sub_190400D8C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190400E78(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "signalEnvironment");
  }
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190400F2C(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 2) {
        operator new();
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1904011A4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 16);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  uint64_t v5 = *(const PB::Base **)(v3 + 8);
  if (v5)
  {
    return PB::Writer::writeSubmessage(this, v5);
  }
  return result;
}

uint64_t sub_190401208(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2E38;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_190401230(PB::Base *this)
{
  *(void *)this = &unk_1EDFC2E38;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_1904012B4(PB::Base *a1)
{
  sub_190401230(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1904012EC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 64);
  if (v5)
  {
    PB::TextFormatter::format(this, "course", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((*(unsigned char *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "courseAccuracy", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "horizontalAccuracy", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_17:
  PB::TextFormatter::format(this, "latitude", *(double *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 64) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "longitude", *(double *)(a1 + 40));
LABEL_7:
  uint64_t v6 = *(void *)(a1 + 48);
  if (v6) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v6 + 32))(v6, this, "signalEnvironment");
  }
  if ((*(unsigned char *)(a1 + 64) & 0x20) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190401424(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          if (v10++ > 8) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 64) |= 0x20u;
              unint64_t v20 = *((void *)this + 1);
              if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v20);
              goto LABEL_44;
            case 2u:
              *(unsigned char *)(a1 + 64) |= 8u;
              unint64_t v22 = *((void *)this + 1);
              if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
              goto LABEL_44;
            case 3u:
              *(unsigned char *)(a1 + 64) |= 0x10u;
              unint64_t v23 = *((void *)this + 1);
              if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v23);
              goto LABEL_44;
            case 4u:
              *(unsigned char *)(a1 + 64) |= 4u;
              unint64_t v24 = *((void *)this + 1);
              if (v24 > 0xFFFFFFFFFFFFFFF7 || v24 + 8 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v24);
              goto LABEL_44;
            case 5u:
              *(unsigned char *)(a1 + 64) |= 1u;
              unint64_t v25 = *((void *)this + 1);
              if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
                goto LABEL_41;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v25);
              goto LABEL_44;
            case 6u:
              *(unsigned char *)(a1 + 64) |= 2u;
              unint64_t v26 = *((void *)this + 1);
              if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v26);
LABEL_44:
                *((void *)this + 1) += 8;
              }
              else
              {
LABEL_41:
                *((unsigned char *)this + 24) = 1;
              }
LABEL_45:
              unint64_t v2 = *((void *)this + 1);
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
            case 7u:
              operator new();
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              goto LABEL_45;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1904017C8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 64);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56));
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(result + 64) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  if ((*(unsigned char *)(v3 + 64) & 2) != 0) {
LABEL_7:
  }
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
LABEL_8:
  char v5 = *(const PB::Base **)(v3 + 48);
  if (v5)
  {
    return PB::Writer::writeSubmessage(this, v5);
  }
  return result;
}

void *sub_1904018C0(void *result)
{
  *uint64_t result = &unk_1EDFC2CE8;
  result[1] = 0;
  return result;
}

void sub_1904018E0(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFC2CE8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_190401960(PB::Base *a1)
{
  sub_1904018E0(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190401998(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190401A14(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190401C30(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_190401C4C(void *result)
{
  *uint64_t result = &unk_1EDFC2E70;
  result[1] = 0;
  return result;
}

void sub_190401C6C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFC2E70;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_190401CEC(PB::Base *a1)
{
  sub_190401C6C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190401D24(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190401DA0(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190401FBC(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_190401FD8(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCC968;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_190402000(PB::Base *this)
{
  *(void *)this = &unk_1EDFCC968;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_190402064(PB::Base *a1)
{
  sub_190402000(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040209C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 40)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
  }
  uint64_t v5 = *(double **)(a1 + 8);
  uint64_t v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "velocity", v7);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190402130(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    char v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    do
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        unint64_t v13 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v19 = v2 + 1;
          char v20 = *(unsigned char *)(v10 + v2);
          *((void *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0) {
            goto LABEL_21;
          }
          v17 += 7;
          unint64_t v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            unint64_t v13 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 2)
      {
        if ((v13 & 7) != 2)
        {
          unint64_t v38 = *(char **)(a1 + 16);
          unint64_t v37 = *(void *)(a1 + 24);
          if ((unint64_t)v38 >= v37)
          {
            unint64_t v40 = (char *)*v8;
            uint64_t v41 = (v38 - (unsigned char *)*v8) >> 3;
            unint64_t v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 61) {
LABEL_84:
            }
              sub_1903479E8();
            uint64_t v43 = v37 - (void)v40;
            if (v43 >> 2 > v42) {
              unint64_t v42 = v43 >> 2;
            }
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v44 = v42;
            }
            if (v44)
            {
              unint64_t v45 = (char *)sub_190347A00(v9, v44);
              unint64_t v40 = *(char **)(a1 + 8);
              unint64_t v38 = *(char **)(a1 + 16);
            }
            else
            {
              unint64_t v45 = 0;
            }
            uint64_t v46 = &v45[8 * v41];
            *(void *)uint64_t v46 = 0;
            uint64_t v39 = v46 + 8;
            while (v38 != v40)
            {
              uint64_t v47 = *((void *)v38 - 1);
              v38 -= 8;
              *((void *)v46 - 1) = v47;
              v46 -= 8;
            }
            *(void *)(a1 + 8) = v46;
            *(void *)(a1 + 16) = v39;
            *(void *)(a1 + 24) = &v45[8 * v44];
            if (v40) {
              operator delete(v40);
            }
          }
          else
          {
            *(void *)unint64_t v38 = 0;
            uint64_t v39 = v38 + 8;
          }
          *(void *)(a1 + 16) = v39;
          unint64_t v48 = *((void *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFF7 || v48 + 8 > *((void *)this + 2))
          {
LABEL_73:
            *((unsigned char *)this + 24) = 1;
            goto LABEL_76;
          }
          *(v39 - 1) = *(void *)(*(void *)this + v48);
          goto LABEL_75;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v23 = *((void *)this + 1);
        unint64_t v24 = *((void *)this + 2);
        while (v23 < v24 && !*((unsigned char *)this + 24))
        {
          unint64_t v26 = *(char **)(a1 + 16);
          unint64_t v25 = *(void *)(a1 + 24);
          if ((unint64_t)v26 >= v25)
          {
            uint64_t v28 = (char *)*v8;
            uint64_t v29 = (v26 - (unsigned char *)*v8) >> 3;
            unint64_t v30 = v29 + 1;
            if ((unint64_t)(v29 + 1) >> 61) {
              goto LABEL_84;
            }
            uint64_t v31 = v25 - (void)v28;
            if (v31 >> 2 > v30) {
              unint64_t v30 = v31 >> 2;
            }
            if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v32 = v30;
            }
            if (v32)
            {
              unint64_t v33 = (char *)sub_190347A00(v9, v32);
              uint64_t v28 = *(char **)(a1 + 8);
              unint64_t v26 = *(char **)(a1 + 16);
            }
            else
            {
              unint64_t v33 = 0;
            }
            unint64_t v34 = &v33[8 * v29];
            *(void *)unint64_t v34 = 0;
            unsigned int v27 = v34 + 8;
            while (v26 != v28)
            {
              uint64_t v35 = *((void *)v26 - 1);
              v26 -= 8;
              *((void *)v34 - 1) = v35;
              v34 -= 8;
            }
            *(void *)(a1 + 8) = v34;
            *(void *)(a1 + 16) = v27;
            *(void *)(a1 + 24) = &v33[8 * v32];
            if (v28) {
              operator delete(v28);
            }
          }
          else
          {
            *(void *)unint64_t v26 = 0;
            unsigned int v27 = v26 + 8;
          }
          *(void *)(a1 + 16) = v27;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFF7 || v36 + 8 > *((void *)this + 2))
          {
            *((unsigned char *)this + 24) = 1;
            break;
          }
          *(v27 - 1) = *(void *)(*(void *)this + v36);
          unint64_t v24 = *((void *)this + 2);
          unint64_t v23 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v23;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if ((v13 >> 3) == 1)
        {
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v22 = *((void *)this + 1);
          if (v22 > 0xFFFFFFFFFFFFFFF7 || v22 + 8 > *((void *)this + 2)) {
            goto LABEL_73;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v22);
LABEL_75:
          *((void *)this + 1) += 8;
          goto LABEL_76;
        }
        if ((PB::Reader::skip(this) & 1) == 0) {
          return 0;
        }
      }
LABEL_76:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_1904024E4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 40)) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
  }
  uint64_t v5 = *(double **)(v3 + 8);
  int v4 = *(double **)(v3 + 16);
  while (v5 != v4)
  {
    double v6 = *v5++;
    uint64_t result = PB::Writer::write(this, v6);
  }
  return result;
}

double sub_190402548(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCBC10;
  *(_DWORD *)(a1 + 124) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  return result;
}

void sub_190402584(PB::Base *this)
{
  *(void *)this = &unk_1EDFCBC10;
  unint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }

  PB::Base::~Base(this);
}

void sub_190402608(PB::Base *a1)
{
  sub_190402584(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190402640(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 124);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "distance", *(float *)(a1 + 88));
    __int16 v5 = *(_WORD *)(a1 + 124);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "focalLength", *(float *)(a1 + 92));
  __int16 v5 = *(_WORD *)(a1 + 124);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_27:
  PB::TextFormatter::format(this, "height", *(float *)(a1 + 96));
  if ((*(_WORD *)(a1 + 124) & 0x10) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "orientation");
LABEL_6:
  double v6 = *(float **)(a1 + 8);
  double v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "origin", v8);
  }
  if ((*(_WORD *)(a1 + 124) & 0x20) != 0) {
    PB::TextFormatter::format(this, "pitch", *(float *)(a1 + 104));
  }
  uint64_t v9 = *(float **)(a1 + 32);
  uint64_t v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(this, "principlePoint", v11);
  }
  __int16 v12 = *(_WORD *)(a1 + 124);
  if ((v12 & 0x40) != 0)
  {
    PB::TextFormatter::format(this, "roll", *(float *)(a1 + 108));
    __int16 v12 = *(_WORD *)(a1 + 124);
  }
  if (v12) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 80));
  }
  unint64_t v13 = *(float **)(a1 + 56);
  unint64_t v14 = *(float **)(a1 + 64);
  while (v13 != v14)
  {
    float v15 = *v13++;
    PB::TextFormatter::format(this, "transform", v15);
  }
  __int16 v16 = *(_WORD *)(a1 + 124);
  if ((v16 & 0x80) != 0)
  {
    PB::TextFormatter::format(this, "type");
    __int16 v16 = *(_WORD *)(a1 + 124);
    if ((v16 & 0x100) == 0)
    {
LABEL_20:
      if ((v16 & 0x200) == 0) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
  }
  else if ((*(_WORD *)(a1 + 124) & 0x100) == 0)
  {
    goto LABEL_20;
  }
  PB::TextFormatter::format(this, "width", *(float *)(a1 + 116));
  if ((*(_WORD *)(a1 + 124) & 0x200) != 0) {
LABEL_21:
  }
    PB::TextFormatter::format(this, "yaw", *(float *)(a1 + 120));
LABEL_22:

  return MEMORY[0x1F4147498](this);
}

BOOL sub_19040284C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 56);
    uint64_t v9 = a1 + 72;
    uint64_t v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    __int16 v12 = (void **)(a1 + 8);
    uint64_t v13 = a1 + 24;
    while (1)
    {
      uint64_t v14 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v17 = 0;
      while (1)
      {
        unint64_t v18 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v19 = *(unsigned char *)(v14 + v2);
        v17 |= (unint64_t)(v19 & 0x7F) << v15;
        if ((v19 & 0x80) == 0) {
          break;
        }
        v15 += 7;
        unint64_t v2 = v18;
        BOOL v20 = v16++ > 8;
        if (v20) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v26 = v17 & 7;
      if (v26 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v17 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 124) |= 1u;
          unint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFF7 || v27 + 8 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v27);
          uint64_t v28 = *((void *)this + 1) + 8;
          goto LABEL_215;
        case 2u:
          *(_WORD *)(a1 + 124) |= 0x40u;
          unint64_t v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v29);
          goto LABEL_214;
        case 3u:
          *(_WORD *)(a1 + 124) |= 0x20u;
          unint64_t v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v30);
          goto LABEL_214;
        case 4u:
          *(_WORD *)(a1 + 124) |= 0x200u;
          unint64_t v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_214;
        case 5u:
          *(_WORD *)(a1 + 124) |= 2u;
          unint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v32);
          goto LABEL_214;
        case 6u:
          *(_WORD *)(a1 + 124) |= 0x80u;
          unint64_t v33 = *((void *)this + 1);
          unint64_t v34 = *((void *)this + 2);
          uint64_t v35 = *(void *)this;
          if (v33 <= 0xFFFFFFFFFFFFFFF5 && v33 + 10 <= v34)
          {
            char v36 = 0;
            unsigned int v37 = 0;
            uint64_t v38 = 0;
            do
            {
              unint64_t v39 = v33 + 1;
              *((void *)this + 1) = v33 + 1;
              char v40 = *(unsigned char *)(v35 + v33);
              v38 |= (unint64_t)(v40 & 0x7F) << v36;
              if ((v40 & 0x80) == 0) {
                goto LABEL_185;
              }
              v36 += 7;
              unint64_t v33 = v39;
              BOOL v20 = v37++ > 8;
            }
            while (!v20);
LABEL_141:
            LODWORD(v38) = 0;
            goto LABEL_185;
          }
          char v94 = 0;
          unsigned int v95 = 0;
          uint64_t v38 = 0;
          if (v34 <= v33) {
            unint64_t v34 = *((void *)this + 1);
          }
          while (2)
          {
            if (v34 == v33)
            {
              LODWORD(v38) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v96 = v33 + 1;
              char v97 = *(unsigned char *)(v35 + v33);
              *((void *)this + 1) = v96;
              v38 |= (unint64_t)(v97 & 0x7F) << v94;
              if (v97 < 0)
              {
                v94 += 7;
                unint64_t v33 = v96;
                BOOL v20 = v95++ > 8;
                if (v20) {
                  goto LABEL_141;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v38) = 0;
              }
            }
            break;
          }
LABEL_185:
          *(_DWORD *)(a1 + 112) = v38;
          goto LABEL_216;
        case 7u:
          *(_WORD *)(a1 + 124) |= 0x10u;
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          uint64_t v43 = *(void *)this;
          if (v41 <= 0xFFFFFFFFFFFFFFF5 && v41 + 10 <= v42)
          {
            char v44 = 0;
            unsigned int v45 = 0;
            uint64_t v46 = 0;
            do
            {
              unint64_t v47 = v41 + 1;
              *((void *)this + 1) = v41 + 1;
              char v48 = *(unsigned char *)(v43 + v41);
              v46 |= (unint64_t)(v48 & 0x7F) << v44;
              if ((v48 & 0x80) == 0) {
                goto LABEL_188;
              }
              v44 += 7;
              unint64_t v41 = v47;
              BOOL v20 = v45++ > 8;
            }
            while (!v20);
LABEL_148:
            LODWORD(v46) = 0;
            goto LABEL_188;
          }
          char v98 = 0;
          unsigned int v99 = 0;
          uint64_t v46 = 0;
          if (v42 <= v41) {
            unint64_t v42 = *((void *)this + 1);
          }
          while (2)
          {
            if (v42 == v41)
            {
              LODWORD(v46) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v100 = v41 + 1;
              char v101 = *(unsigned char *)(v43 + v41);
              *((void *)this + 1) = v100;
              v46 |= (unint64_t)(v101 & 0x7F) << v98;
              if (v101 < 0)
              {
                v98 += 7;
                unint64_t v41 = v100;
                BOOL v20 = v99++ > 8;
                if (v20) {
                  goto LABEL_148;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v46) = 0;
              }
            }
            break;
          }
LABEL_188:
          *(_DWORD *)(a1 + 100) = v46;
          goto LABEL_216;
        case 8u:
          if (v26 != 2)
          {
            uint64_t v103 = *(char **)(a1 + 16);
            unint64_t v102 = *(void *)(a1 + 24);
            if ((unint64_t)v103 >= v102)
            {
              char v109 = (char *)*v12;
              uint64_t v110 = (v103 - (unsigned char *)*v12) >> 2;
              unint64_t v111 = v110 + 1;
              if ((unint64_t)(v110 + 1) >> 62) {
LABEL_226:
              }
                sub_1903479E8();
              uint64_t v112 = v102 - (void)v109;
              if (v112 >> 1 > v111) {
                unint64_t v111 = v112 >> 1;
              }
              if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v113 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v113 = v111;
              }
              if (v113)
              {
                char v114 = (char *)sub_190347D04(v13, v113);
                char v109 = *(char **)(a1 + 8);
                uint64_t v103 = *(char **)(a1 + 16);
              }
              else
              {
                char v114 = 0;
              }
              unint64_t v127 = &v114[4 * v110];
              *(_DWORD *)unint64_t v127 = 0;
              unint64_t v104 = v127 + 4;
              while (v103 != v109)
              {
                int v128 = *((_DWORD *)v103 - 1);
                v103 -= 4;
                *((_DWORD *)v127 - 1) = v128;
                v127 -= 4;
              }
              *(void *)(a1 + 8) = v127;
              *(void *)(a1 + 16) = v104;
              *(void *)(a1 + 24) = &v114[4 * v113];
              if (v109) {
                operator delete(v109);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v103 = 0;
              unint64_t v104 = v103 + 4;
            }
            *(void *)(a1 + 16) = v104;
            goto LABEL_210;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v49 = *((void *)this + 1);
          unint64_t v50 = *((void *)this + 2);
          while (v49 < v50 && !*((unsigned char *)this + 24))
          {
            unsigned int v52 = *(char **)(a1 + 16);
            unint64_t v51 = *(void *)(a1 + 24);
            if ((unint64_t)v52 >= v51)
            {
              unint64_t v54 = (char *)*v12;
              uint64_t v55 = (v52 - (unsigned char *)*v12) >> 2;
              unint64_t v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 62) {
                goto LABEL_226;
              }
              uint64_t v57 = v51 - (void)v54;
              if (v57 >> 1 > v56) {
                unint64_t v56 = v57 >> 1;
              }
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v56;
              }
              if (v58)
              {
                BOOL v59 = (char *)sub_190347D04(v13, v58);
                unint64_t v54 = *(char **)(a1 + 8);
                unsigned int v52 = *(char **)(a1 + 16);
              }
              else
              {
                BOOL v59 = 0;
              }
              unint64_t v60 = &v59[4 * v55];
              *(_DWORD *)unint64_t v60 = 0;
              int v53 = v60 + 4;
              while (v52 != v54)
              {
                int v61 = *((_DWORD *)v52 - 1);
                v52 -= 4;
                *((_DWORD *)v60 - 1) = v61;
                v60 -= 4;
              }
              *(void *)(a1 + 8) = v60;
              *(void *)(a1 + 16) = v53;
              *(void *)(a1 + 24) = &v59[4 * v58];
              if (v54) {
                operator delete(v54);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v52 = 0;
              int v53 = v52 + 4;
            }
            *(void *)(a1 + 16) = v53;
            unint64_t v62 = *((void *)this + 1);
            if (v62 > 0xFFFFFFFFFFFFFFFBLL || v62 + 4 > *((void *)this + 2)) {
              goto LABEL_155;
            }
            *(v53 - 1) = *(_DWORD *)(*(void *)this + v62);
            unint64_t v50 = *((void *)this + 2);
            unint64_t v49 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v49;
          }
          goto LABEL_156;
        case 9u:
          *(_WORD *)(a1 + 124) |= 8u;
          unint64_t v63 = *((void *)this + 1);
          if (v63 > 0xFFFFFFFFFFFFFFFBLL || v63 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v63);
          goto LABEL_214;
        case 0xAu:
          *(_WORD *)(a1 + 124) |= 0x100u;
          unint64_t v64 = *((void *)this + 1);
          if (v64 > 0xFFFFFFFFFFFFFFFBLL || v64 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v64);
          goto LABEL_214;
        case 0xBu:
          *(_WORD *)(a1 + 124) |= 4u;
          unint64_t v65 = *((void *)this + 1);
          if (v65 > 0xFFFFFFFFFFFFFFFBLL || v65 + 4 > *((void *)this + 2)) {
            goto LABEL_212;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v65);
          goto LABEL_214;
        case 0xCu:
          if (v26 != 2)
          {
            unsigned int v106 = *(char **)(a1 + 40);
            unint64_t v105 = *(void *)(a1 + 48);
            if ((unint64_t)v106 >= v105)
            {
              char v115 = (char *)*v10;
              uint64_t v116 = (v106 - (unsigned char *)*v10) >> 2;
              unint64_t v117 = v116 + 1;
              if ((unint64_t)(v116 + 1) >> 62) {
LABEL_227:
              }
                sub_1903479E8();
              uint64_t v118 = v105 - (void)v115;
              if (v118 >> 1 > v117) {
                unint64_t v117 = v118 >> 1;
              }
              if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v119 = v117;
              }
              if (v119)
              {
                unint64_t v120 = (char *)sub_190347D04(v11, v119);
                char v115 = *(char **)(a1 + 32);
                unsigned int v106 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v120 = 0;
              }
              unsigned int v129 = &v120[4 * v116];
              *(_DWORD *)unsigned int v129 = 0;
              unint64_t v104 = v129 + 4;
              while (v106 != v115)
              {
                int v130 = *((_DWORD *)v106 - 1);
                v106 -= 4;
                *((_DWORD *)v129 - 1) = v130;
                v129 -= 4;
              }
              *(void *)(a1 + 32) = v129;
              *(void *)(a1 + 40) = v104;
              *(void *)(a1 + 48) = &v120[4 * v119];
              if (v115) {
                operator delete(v115);
              }
            }
            else
            {
              *(_DWORD *)unsigned int v106 = 0;
              unint64_t v104 = v106 + 4;
            }
            *(void *)(a1 + 40) = v104;
            goto LABEL_210;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v66 = *((void *)this + 1);
          unint64_t v67 = *((void *)this + 2);
          while (v66 < v67 && !*((unsigned char *)this + 24))
          {
            unint64_t v69 = *(char **)(a1 + 40);
            unint64_t v68 = *(void *)(a1 + 48);
            if ((unint64_t)v69 >= v68)
            {
              unint64_t v71 = (char *)*v10;
              uint64_t v72 = (v69 - (unsigned char *)*v10) >> 2;
              unint64_t v73 = v72 + 1;
              if ((unint64_t)(v72 + 1) >> 62) {
                goto LABEL_227;
              }
              uint64_t v74 = v68 - (void)v71;
              if (v74 >> 1 > v73) {
                unint64_t v73 = v74 >> 1;
              }
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v75 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v73;
              }
              if (v75)
              {
                uint64_t v76 = (char *)sub_190347D04(v11, v75);
                unint64_t v71 = *(char **)(a1 + 32);
                unint64_t v69 = *(char **)(a1 + 40);
              }
              else
              {
                uint64_t v76 = 0;
              }
              unint64_t v77 = &v76[4 * v72];
              *(_DWORD *)unint64_t v77 = 0;
              uint64_t v70 = v77 + 4;
              while (v69 != v71)
              {
                int v78 = *((_DWORD *)v69 - 1);
                v69 -= 4;
                *((_DWORD *)v77 - 1) = v78;
                v77 -= 4;
              }
              *(void *)(a1 + 32) = v77;
              *(void *)(a1 + 40) = v70;
              *(void *)(a1 + 48) = &v76[4 * v75];
              if (v71) {
                operator delete(v71);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v69 = 0;
              uint64_t v70 = v69 + 4;
            }
            *(void *)(a1 + 40) = v70;
            unint64_t v79 = *((void *)this + 1);
            if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)this + 2)) {
              goto LABEL_155;
            }
            *(v70 - 1) = *(_DWORD *)(*(void *)this + v79);
            unint64_t v67 = *((void *)this + 2);
            unint64_t v66 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v66;
          }
          goto LABEL_156;
        case 0xDu:
          if (v26 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v80 = *((void *)this + 1);
            unint64_t v81 = *((void *)this + 2);
            while (v80 < v81 && !*((unsigned char *)this + 24))
            {
              unsigned int v83 = *(char **)(a1 + 64);
              unint64_t v82 = *(void *)(a1 + 72);
              if ((unint64_t)v83 >= v82)
              {
                unint64_t v85 = (char *)*v8;
                uint64_t v86 = (v83 - (unsigned char *)*v8) >> 2;
                unint64_t v87 = v86 + 1;
                if ((unint64_t)(v86 + 1) >> 62) {
                  goto LABEL_228;
                }
                uint64_t v88 = v82 - (void)v85;
                if (v88 >> 1 > v87) {
                  unint64_t v87 = v88 >> 1;
                }
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v89 = v87;
                }
                if (v89)
                {
                  unint64_t v90 = (char *)sub_190347D04(v9, v89);
                  unint64_t v85 = *(char **)(a1 + 56);
                  unsigned int v83 = *(char **)(a1 + 64);
                }
                else
                {
                  unint64_t v90 = 0;
                }
                char v91 = &v90[4 * v86];
                *(_DWORD *)char v91 = 0;
                int v84 = v91 + 4;
                while (v83 != v85)
                {
                  int v92 = *((_DWORD *)v83 - 1);
                  v83 -= 4;
                  *((_DWORD *)v91 - 1) = v92;
                  v91 -= 4;
                }
                *(void *)(a1 + 56) = v91;
                *(void *)(a1 + 64) = v84;
                *(void *)(a1 + 72) = &v90[4 * v89];
                if (v85) {
                  operator delete(v85);
                }
              }
              else
              {
                *(_DWORD *)unsigned int v83 = 0;
                int v84 = v83 + 4;
              }
              *(void *)(a1 + 64) = v84;
              unint64_t v93 = *((void *)this + 1);
              if (v93 > 0xFFFFFFFFFFFFFFFBLL || v93 + 4 > *((void *)this + 2))
              {
LABEL_155:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v84 - 1) = *(_DWORD *)(*(void *)this + v93);
              unint64_t v81 = *((void *)this + 2);
              unint64_t v80 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v80;
            }
LABEL_156:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v108 = *(char **)(a1 + 64);
            unint64_t v107 = *(void *)(a1 + 72);
            if ((unint64_t)v108 >= v107)
            {
              unint64_t v121 = (char *)*v8;
              uint64_t v122 = (v108 - (unsigned char *)*v8) >> 2;
              unint64_t v123 = v122 + 1;
              if ((unint64_t)(v122 + 1) >> 62) {
LABEL_228:
              }
                sub_1903479E8();
              uint64_t v124 = v107 - (void)v121;
              if (v124 >> 1 > v123) {
                unint64_t v123 = v124 >> 1;
              }
              if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v125 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v125 = v123;
              }
              if (v125)
              {
                uint64_t v126 = (char *)sub_190347D04(v9, v125);
                unint64_t v121 = *(char **)(a1 + 56);
                unint64_t v108 = *(char **)(a1 + 64);
              }
              else
              {
                uint64_t v126 = 0;
              }
              unint64_t v131 = &v126[4 * v122];
              *(_DWORD *)unint64_t v131 = 0;
              unint64_t v104 = v131 + 4;
              while (v108 != v121)
              {
                int v132 = *((_DWORD *)v108 - 1);
                v108 -= 4;
                *((_DWORD *)v131 - 1) = v132;
                v131 -= 4;
              }
              *(void *)(a1 + 56) = v131;
              *(void *)(a1 + 64) = v104;
              *(void *)(a1 + 72) = &v126[4 * v125];
              if (v121) {
                operator delete(v121);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v108 = 0;
              unint64_t v104 = v108 + 4;
            }
            *(void *)(a1 + 64) = v104;
LABEL_210:
            unint64_t v133 = *((void *)this + 1);
            if (v133 <= 0xFFFFFFFFFFFFFFFBLL && v133 + 4 <= *((void *)this + 2))
            {
              *(v104 - 1) = *(_DWORD *)(*(void *)this + v133);
LABEL_214:
              uint64_t v28 = *((void *)this + 1) + 4;
LABEL_215:
              *((void *)this + 1) = v28;
            }
            else
            {
LABEL_212:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_216:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_216;
      }
    }
    char v21 = 0;
    unsigned int v22 = 0;
    unint64_t v17 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v23 = v2 + 1;
      char v24 = *(unsigned char *)(v14 + v2);
      *((void *)this + 1) = v23;
      v17 |= (unint64_t)(v24 & 0x7F) << v21;
      if ((v24 & 0x80) == 0) {
        goto LABEL_21;
      }
      v21 += 7;
      unint64_t v2 = v23;
      if (v22++ >= 9)
      {
LABEL_20:
        unint64_t v17 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190403338(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 124);
  if (v4)
  {
    double result = PB::Writer::write(this, *(double *)(result + 80));
    __int16 v4 = *(_WORD *)(v3 + 124);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 108));
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_26;
  }
LABEL_25:
  double result = PB::Writer::write(this, *(float *)(v3 + 104));
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x200) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_27;
  }
LABEL_26:
  double result = PB::Writer::write(this, *(float *)(v3 + 120));
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
LABEL_28:
    double result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 124) & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_27:
  double result = PB::Writer::write(this, *(float *)(v3 + 88));
  __int16 v4 = *(_WORD *)(v3 + 124);
  if ((v4 & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_7:
  if ((v4 & 0x10) != 0) {
LABEL_8:
  }
    double result = PB::Writer::writeVarInt(this);
LABEL_9:
  __int16 v5 = *(float **)(v3 + 8);
  double v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  __int16 v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 8) == 0)
  {
    if ((*(_WORD *)(v3 + 124) & 0x100) == 0) {
      goto LABEL_14;
    }
LABEL_31:
    double result = PB::Writer::write(this, *(float *)(v3 + 116));
    if ((*(_WORD *)(v3 + 124) & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 96));
  __int16 v8 = *(_WORD *)(v3 + 124);
  if ((v8 & 0x100) != 0) {
    goto LABEL_31;
  }
LABEL_14:
  if ((v8 & 4) != 0) {
LABEL_15:
  }
    double result = PB::Writer::write(this, *(float *)(v3 + 92));
LABEL_16:
  uint64_t v9 = *(float **)(v3 + 32);
  uint64_t v10 = *(float **)(v3 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    double result = PB::Writer::write(this, v11);
  }
  uint64_t v13 = *(float **)(v3 + 56);
  __int16 v12 = *(float **)(v3 + 64);
  while (v13 != v12)
  {
    float v14 = *v13++;
    double result = PB::Writer::write(this, v14);
  }
  return result;
}

uint64_t sub_1904034DC(uint64_t result)
{
  *(void *)double result = &unk_1EDFCFB48;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_190403504(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040353C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 0x20) != 0)
  {
    PB::TextFormatter::format(this, "batchedLocationFixType");
    char v5 = *(unsigned char *)(a1 + 56);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 56) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "distOdom", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "distPed", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "isValid");
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "timeStart", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timeStop", *(double *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 56) & 0x10) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "uncOdom", *(double *)(a1 + 40));
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190403660(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 56) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_58;
            case 2u:
              *(unsigned char *)(a1 + 56) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_58;
            case 3u:
              *(unsigned char *)(a1 + 56) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_58;
            case 4u:
              *(unsigned char *)(a1 + 56) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_58;
            case 5u:
              *(unsigned char *)(a1 + 56) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
LABEL_58:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_64;
            case 6u:
              *(unsigned char *)(a1 + 56) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 52) = v22;
              goto LABEL_64;
            case 7u:
              *(unsigned char *)(a1 + 56) |= 0x20u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_63;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_62:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_63;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_62;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_63;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_63:
              *(_DWORD *)(a1 + 48) = v27;
LABEL_64:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_64;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190403A4C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 56);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 56) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this);
    if ((*(unsigned char *)(v3 + 56) & 0x20) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x40) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_15:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_190403B48(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC31B8;
  *(_DWORD *)(result + 116) = 0;
  return result;
}

void sub_190403B70(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190403BA8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 116);
  if (v5)
  {
    PB::TextFormatter::format(this, "activeTime", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 116);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "distance", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "duration", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "firstStepTime", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "gradeType");
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x4000) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "isIndoor");
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "isMotionOverrideSet");
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "metsWR", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "rawDistance", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x80) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "steps");
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x100) == 0)
  {
LABEL_14:
    if ((v5 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "stepsDuration", *(double *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x200) == 0)
  {
LABEL_15:
    if ((v5 & 0x400) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "truthMetsGradeCorrected", *(double *)(a1 + 80));
  __int16 v5 = *(_WORD *)(a1 + 116);
  if ((v5 & 0x400) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_35:
  PB::TextFormatter::format(this, "truthMetsStrollerCorrected", *(double *)(a1 + 88));
  if ((*(_WORD *)(a1 + 116) & 0x800) != 0) {
LABEL_17:
  }
    PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 96));
LABEL_18:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190403DEC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 116) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 2u:
              *(_WORD *)(a1 + 116) |= 0x2000u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_102;
                  }
                  unint64_t v39 = v21++;
                  char v40 = *(unsigned char *)(v22 + v39);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_101:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_102;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_101;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_102;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_102:
              *(_DWORD *)(a1 + 108) = v25;
              goto LABEL_108;
            case 3u:
              *(_WORD *)(a1 + 116) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 4u:
              *(_WORD *)(a1 + 116) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 5u:
              *(_WORD *)(a1 + 116) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 6u:
              *(_WORD *)(a1 + 116) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 7u:
              *(_WORD *)(a1 + 116) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 8u:
              *(_WORD *)(a1 + 116) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 9u:
              *(_WORD *)(a1 + 116) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xAu:
              *(_WORD *)(a1 + 116) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xBu:
              *(_WORD *)(a1 + 116) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xCu:
              *(_WORD *)(a1 + 116) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_66;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_97;
            case 0xDu:
              *(_WORD *)(a1 + 116) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
LABEL_97:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_66:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_108;
            case 0xEu:
              *(_WORD *)(a1 + 116) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 113) = v28;
              goto LABEL_108;
            case 0xFu:
              *(_WORD *)(a1 + 116) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 112) = v30;
              goto LABEL_108;
            case 0x10u:
              *(_WORD *)(a1 + 116) |= 0x1000u;
              unint64_t v31 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v32 = *(void *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                char v41 = 0;
                unsigned int v42 = 0;
                uint64_t v35 = 0;
                if (v2 <= v31) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_107;
                  }
                  unint64_t v43 = v31++;
                  char v44 = *(unsigned char *)(v32 + v43);
                  *((void *)this + 1) = v31;
                  v35 |= (unint64_t)(v44 & 0x7F) << v41;
                  if ((v44 & 0x80) == 0) {
                    break;
                  }
                  v41 += 7;
                  BOOL v14 = v42++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_106:
                    unint64_t v2 = v43 + 1;
                    goto LABEL_107;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_106;
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              do
              {
                unint64_t v2 = v31 + 1;
                *((void *)this + 1) = v31 + 1;
                char v36 = *(unsigned char *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_107;
                }
                v33 += 7;
                unint64_t v31 = v2;
                BOOL v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_107:
              *(_DWORD *)(a1 + 104) = v35;
LABEL_108:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_108;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1904044B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 116);
  if ((v4 & 0x80) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 64));
    __int16 v4 = *(_WORD *)(v3 + 116);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((*(_WORD *)(result + 116) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 2) == 0)
  {
LABEL_8:
    if ((v4 & 0x800) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x800) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x100) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x200) == 0) {
      goto LABEL_14;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x200) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_16;
    }
LABEL_32:
    uint64_t result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 116) & 0x1000) == 0) {
      return result;
    }
    goto LABEL_33;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 116);
  if ((v4 & 0x4000) != 0) {
    goto LABEL_32;
  }
LABEL_16:
  if ((v4 & 0x1000) == 0) {
    return result;
  }
LABEL_33:

  return PB::Writer::writeVarInt(this);
}

double sub_1904046AC(void *a1)
{
  *a1 = &unk_1EDFCD768;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)((char *)a1 + 28) = 0xFFFFFFFFLL;
  return result;
}

void sub_1904046D8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190404710(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "radius", *(float *)(a1 + 24));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "timestampExit", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestampSet", *(double *)(a1 + 16));
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "userResponse");
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1904047D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 32) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_33;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_30;
            case 2u:
              *(unsigned char *)(a1 + 32) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_33;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_30:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_49;
            case 3u:
              *(unsigned char *)(a1 + 32) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_49:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_33:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_55;
            case 4u:
              *(unsigned char *)(a1 + 32) |= 8u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v27 = 0;
                unsigned int v28 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_54;
                  }
                  unint64_t v29 = v21++;
                  char v30 = *(unsigned char *)(v22 + v29);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v30 & 0x7F) << v27;
                  if ((v30 & 0x80) == 0) {
                    break;
                  }
                  v27 += 7;
                  BOOL v14 = v28++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_53:
                    unint64_t v2 = v29 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_53;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_54;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_54:
              *(_DWORD *)(a1 + 28) = v25;
LABEL_55:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_55;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190404B08(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
      if ((*(unsigned char *)(v3 + 32) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_9:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_190404BB0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCEDF0;
  *(_DWORD *)(result + 56) = 0;
  return result;
}

void sub_190404BD8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190404C10(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 56);
  if (v5)
  {
    PB::TextFormatter::format(this, "complexHandMotionPercentage", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 56);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 56) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "confidence", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 56);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "straightnessMetric", *(double *)(a1 + 40));
  if ((*(unsigned char *)(a1 + 56) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "walkPercentage", *(double *)(a1 + 48));
LABEL_8:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190404D14(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 56) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 2u:
          *(unsigned char *)(a1 + 56) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 3u:
          *(unsigned char *)(a1 + 56) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 4u:
          *(unsigned char *)(a1 + 56) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 5u:
          *(unsigned char *)(a1 + 56) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_43;
        case 6u:
          *(unsigned char *)(a1 + 56) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_43:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_41:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190405004(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 56);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    char v4 = *(unsigned char *)(v3 + 56);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 56) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x20) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
    if ((*(unsigned char *)(v3 + 56) & 1) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 56);
  if ((v4 & 0x20) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_13:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1904050E4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC3490;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_19040510C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190405144(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "motionState");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1904051C0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190405450(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

double sub_1904054BC(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC2D20;
  *(_DWORD *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_1904054EC(PB::Base *this)
{
  *(void *)this = &unk_1EDFC2D20;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_190405580(PB::Base *a1)
{
  sub_1904054EC(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1904055B8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(float **)(a1 + 8);
  double v6 = *(float **)(a1 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    PB::TextFormatter::format(this, "gyroBias", v7);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v8 + 32))(v8, this, "super");
  }
  char v9 = *(unsigned char *)(a1 + 48);
  if (v9)
  {
    PB::TextFormatter::format(this, "temperatureGyro", *(float *)(a1 + 40));
    char v9 = *(unsigned char *)(a1 + 48);
  }
  if ((v9 & 2) != 0) {
    PB::TextFormatter::format(this, "temperatureGyroBias", *(float *)(a1 + 44));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1904056A8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          if ((v13 & 7) == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v22 = *((void *)this + 1);
            unint64_t v23 = *((void *)this + 2);
            while (v22 < v23 && !*((unsigned char *)this + 24))
            {
              char v25 = *(char **)(a1 + 16);
              unint64_t v24 = *(void *)(a1 + 24);
              if ((unint64_t)v25 >= v24)
              {
                char v27 = (char *)*v8;
                uint64_t v28 = (v25 - (unsigned char *)*v8) >> 2;
                unint64_t v29 = v28 + 1;
                if ((unint64_t)(v28 + 1) >> 62) {
                  goto LABEL_87;
                }
                uint64_t v30 = v24 - (void)v27;
                if (v30 >> 1 > v29) {
                  unint64_t v29 = v30 >> 1;
                }
                if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v31 = v29;
                }
                if (v31)
                {
                  uint64_t v32 = (char *)sub_190347D04(v9, v31);
                  char v27 = *(char **)(a1 + 8);
                  char v25 = *(char **)(a1 + 16);
                }
                else
                {
                  uint64_t v32 = 0;
                }
                char v33 = &v32[4 * v28];
                *(_DWORD *)char v33 = 0;
                char v26 = v33 + 4;
                while (v25 != v27)
                {
                  int v34 = *((_DWORD *)v25 - 1);
                  v25 -= 4;
                  *((_DWORD *)v33 - 1) = v34;
                  v33 -= 4;
                }
                *(void *)(a1 + 8) = v33;
                *(void *)(a1 + 16) = v26;
                *(void *)(a1 + 24) = &v32[4 * v31];
                if (v27) {
                  operator delete(v27);
                }
              }
              else
              {
                *(_DWORD *)char v25 = 0;
                char v26 = v25 + 4;
              }
              *(void *)(a1 + 16) = v26;
              unint64_t v35 = *((void *)this + 1);
              if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v26 - 1) = *(_DWORD *)(*(void *)this + v35);
              unint64_t v23 = *((void *)this + 2);
              unint64_t v22 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v22;
            }
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v39 = *(char **)(a1 + 16);
            unint64_t v38 = *(void *)(a1 + 24);
            if ((unint64_t)v39 >= v38)
            {
              char v41 = (char *)*v8;
              uint64_t v42 = (v39 - (unsigned char *)*v8) >> 2;
              unint64_t v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62) {
LABEL_87:
              }
                sub_1903479E8();
              uint64_t v44 = v38 - (void)v41;
              if (v44 >> 1 > v43) {
                unint64_t v43 = v44 >> 1;
              }
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v45 = v43;
              }
              if (v45)
              {
                uint64_t v46 = (char *)sub_190347D04(v9, v45);
                char v41 = *(char **)(a1 + 8);
                unint64_t v39 = *(char **)(a1 + 16);
              }
              else
              {
                uint64_t v46 = 0;
              }
              unint64_t v47 = &v46[4 * v42];
              *(_DWORD *)unint64_t v47 = 0;
              char v40 = v47 + 4;
              while (v39 != v41)
              {
                int v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              *(void *)(a1 + 8) = v47;
              *(void *)(a1 + 16) = v40;
              *(void *)(a1 + 24) = &v46[4 * v45];
              if (v41) {
                operator delete(v41);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v39 = 0;
              char v40 = v39 + 4;
            }
            *(void *)(a1 + 16) = v40;
            unint64_t v49 = *((void *)this + 1);
            if (v49 <= 0xFFFFFFFFFFFFFFFBLL && v49 + 4 <= *((void *)this + 2))
            {
              *(v40 - 1) = *(_DWORD *)(*(void *)this + v49);
LABEL_78:
              *((void *)this + 1) += 4;
            }
            else
            {
LABEL_76:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_79:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || *((unsigned char *)this + 24)) {
            return v4 == 0;
          }
          break;
        case 3u:
          *(unsigned char *)(a1 + 48) |= 2u;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_76;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_78;
        case 4u:
          *(unsigned char *)(a1 + 48) |= 1u;
          unint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)this + 2)) {
            goto LABEL_76;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v37);
          goto LABEL_78;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_79;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190405B58(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 32);
  if (v4) {
    double result = PB::Writer::writeSubmessage(this, v4);
  }
  char v5 = *(float **)(v3 + 8);
  double v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  char v8 = *(unsigned char *)(v3 + 48);
  if ((v8 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(v3 + 44));
    char v8 = *(unsigned char *)(v3 + 48);
  }
  if (v8)
  {
    float v9 = *(float *)(v3 + 40);
    return PB::Writer::write(this, v9);
  }
  return result;
}

uint64_t sub_190405C04(uint64_t result)
{
  *(void *)double result = &unk_1EDFC3228;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_190405C2C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190405C64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 64);
  if (v5)
  {
    PB::TextFormatter::format(this, "firstRingSensorTimeStampMicroSeconds");
    char v5 = *(unsigned char *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((*(unsigned char *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "lastRingSensorTimeStampMicroSeconds");
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "medianBufferNumSamples");
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "medianNorthAlignmentEstimateRad", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "newNorthAlignmentEstimateRad", *(double *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "numRingSensorSamples");
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "timeElapsedSinceLastUpdateMicroSeconds");
  if ((*(unsigned char *)(a1 + 64) & 0x20) != 0) {
LABEL_9:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 48));
LABEL_10:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190405DA8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 64) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 2u:
              *(unsigned char *)(a1 + 64) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_104;
            case 3u:
              *(unsigned char *)(a1 + 64) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_104:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_130;
            case 4u:
              *(unsigned char *)(a1 + 64) |= 0x40u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_109;
                  }
                  unint64_t v53 = v21++;
                  char v54 = *(unsigned char *)(v22 + v53);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_108:
                    unint64_t v2 = v53 + 1;
                    goto LABEL_109;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_108;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_109;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_109:
              *(_DWORD *)(a1 + 56) = v25;
              goto LABEL_130;
            case 5u:
              *(unsigned char *)(a1 + 64) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v55 = 0;
                unsigned int v56 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    uint64_t v31 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_114;
                  }
                  unint64_t v57 = v27++;
                  char v58 = *(unsigned char *)(v28 + v57);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v58 & 0x7F) << v55;
                  if ((v58 & 0x80) == 0) {
                    break;
                  }
                  v55 += 7;
                  BOOL v14 = v56++ > 8;
                  if (v14)
                  {
                    uint64_t v31 = 0;
LABEL_113:
                    unint64_t v2 = v57 + 1;
                    goto LABEL_114;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v31 = 0;
                }
                goto LABEL_113;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_114;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              uint64_t v31 = 0;
LABEL_114:
              *(void *)(a1 + 40) = v31;
              goto LABEL_130;
            case 6u:
              *(unsigned char *)(a1 + 64) |= 1u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v59 = 0;
                unsigned int v60 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    uint64_t v37 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_119;
                  }
                  unint64_t v61 = v33++;
                  char v62 = *(unsigned char *)(v34 + v61);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v62 & 0x7F) << v59;
                  if ((v62 & 0x80) == 0) {
                    break;
                  }
                  v59 += 7;
                  BOOL v14 = v60++ > 8;
                  if (v14)
                  {
                    uint64_t v37 = 0;
LABEL_118:
                    unint64_t v2 = v61 + 1;
                    goto LABEL_119;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v37 = 0;
                }
                goto LABEL_118;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_119;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              uint64_t v37 = 0;
LABEL_119:
              *(void *)(a1 + 8) = v37;
              goto LABEL_130;
            case 7u:
              *(unsigned char *)(a1 + 64) |= 2u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v63 = 0;
                unsigned int v64 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    uint64_t v43 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_124;
                  }
                  unint64_t v65 = v39++;
                  char v66 = *(unsigned char *)(v40 + v65);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v66 & 0x7F) << v63;
                  if ((v66 & 0x80) == 0) {
                    break;
                  }
                  v63 += 7;
                  BOOL v14 = v64++ > 8;
                  if (v14)
                  {
                    uint64_t v43 = 0;
LABEL_123:
                    unint64_t v2 = v65 + 1;
                    goto LABEL_124;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v43 = 0;
                }
                goto LABEL_123;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_124;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              uint64_t v43 = 0;
LABEL_124:
              *(void *)(a1 + 16) = v43;
              goto LABEL_130;
            case 8u:
              *(unsigned char *)(a1 + 64) |= 0x80u;
              unint64_t v45 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v46 = *(void *)this;
              if (v45 > 0xFFFFFFFFFFFFFFF5 || v45 + 10 > v2)
              {
                char v67 = 0;
                unsigned int v68 = 0;
                uint64_t v49 = 0;
                if (v2 <= v45) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v45)
                  {
                    LODWORD(v49) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_129;
                  }
                  unint64_t v69 = v45++;
                  char v70 = *(unsigned char *)(v46 + v69);
                  *((void *)this + 1) = v45;
                  v49 |= (unint64_t)(v70 & 0x7F) << v67;
                  if ((v70 & 0x80) == 0) {
                    break;
                  }
                  v67 += 7;
                  BOOL v14 = v68++ > 8;
                  if (v14)
                  {
                    LODWORD(v49) = 0;
LABEL_128:
                    unint64_t v2 = v69 + 1;
                    goto LABEL_129;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v49) = 0;
                }
                goto LABEL_128;
              }
              char v47 = 0;
              unsigned int v48 = 0;
              uint64_t v49 = 0;
              do
              {
                unint64_t v2 = v45 + 1;
                *((void *)this + 1) = v45 + 1;
                char v50 = *(unsigned char *)(v46 + v45);
                v49 |= (unint64_t)(v50 & 0x7F) << v47;
                if ((v50 & 0x80) == 0) {
                  goto LABEL_129;
                }
                v47 += 7;
                unint64_t v45 = v2;
                BOOL v14 = v48++ > 8;
              }
              while (!v14);
              LODWORD(v49) = 0;
LABEL_129:
              *(_DWORD *)(a1 + 60) = v49;
LABEL_130:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_130;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190406494(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 64);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 48));
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(result + 64) & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x40) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_7:
    if ((v4 & 2) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 64) & 0x80) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 2) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_17:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1904065AC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2F88;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_1904065D8(PB::Base *this)
{
  *(void *)this = &unk_1EDFC2F88;
  uint64_t v2 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_19040666C(PB::Base *a1)
{
  sub_1904065D8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1904066A4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 64);
  if (v5)
  {
    PB::TextFormatter::format(this, "lastAuxTimeStampMicroSeconds");
    char v5 = *(unsigned char *)(a1 + 64);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "lastRingSensorTimeStampMicroSeconds");
  }
  double v6 = *(double **)(a1 + 8);
  float v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "qSP", v8);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, this, "super");
  }
  if ((*(unsigned char *)(a1 + 64) & 4) != 0) {
    PB::TextFormatter::format(this, "timeStampMicroSeconds");
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1904067B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v16 = v12++ > 8;
        if (v16) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          operator new();
        case 2u:
          *(unsigned char *)(a1 + 64) |= 4u;
          unint64_t v22 = *((void *)this + 1);
          unint64_t v23 = *((void *)this + 2);
          uint64_t v24 = *(void *)this;
          if (v22 <= 0xFFFFFFFFFFFFFFF5 && v22 + 10 <= v23)
          {
            char v25 = 0;
            unsigned int v26 = 0;
            uint64_t v27 = 0;
            do
            {
              unint64_t v28 = v22 + 1;
              *((void *)this + 1) = v22 + 1;
              char v29 = *(unsigned char *)(v24 + v22);
              v27 |= (unint64_t)(v29 & 0x7F) << v25;
              if ((v29 & 0x80) == 0) {
                goto LABEL_108;
              }
              v25 += 7;
              unint64_t v22 = v28;
              BOOL v16 = v26++ > 8;
            }
            while (!v16);
LABEL_78:
            uint64_t v27 = 0;
            goto LABEL_108;
          }
          char v60 = 0;
          unsigned int v61 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)this + 1);
          }
          while (2)
          {
            if (v23 == v22)
            {
              uint64_t v27 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v62 = v22 + 1;
              char v63 = *(unsigned char *)(v24 + v22);
              *((void *)this + 1) = v62;
              v27 |= (unint64_t)(v63 & 0x7F) << v60;
              if (v63 < 0)
              {
                v60 += 7;
                unint64_t v22 = v62;
                BOOL v16 = v61++ > 8;
                if (v16) {
                  goto LABEL_78;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v27 = 0;
              }
            }
            break;
          }
LABEL_108:
          *(void *)(a1 + 56) = v27;
          goto LABEL_126;
        case 3u:
          if ((v13 & 7) == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v30 = *((void *)this + 1);
            unint64_t v31 = *((void *)this + 2);
            while (v30 < v31 && !*((unsigned char *)this + 24))
            {
              unint64_t v33 = *(char **)(a1 + 16);
              unint64_t v32 = *(void *)(a1 + 24);
              if ((unint64_t)v33 >= v32)
              {
                char v35 = (char *)*v8;
                uint64_t v36 = (v33 - (unsigned char *)*v8) >> 3;
                unint64_t v37 = v36 + 1;
                if ((unint64_t)(v36 + 1) >> 61) {
                  goto LABEL_136;
                }
                uint64_t v38 = v32 - (void)v35;
                if (v38 >> 2 > v37) {
                  unint64_t v37 = v38 >> 2;
                }
                if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v39 = v37;
                }
                if (v39)
                {
                  uint64_t v40 = (char *)sub_190347A00(v9, v39);
                  char v35 = *(char **)(a1 + 8);
                  unint64_t v33 = *(char **)(a1 + 16);
                }
                else
                {
                  uint64_t v40 = 0;
                }
                char v41 = &v40[8 * v36];
                *(void *)char v41 = 0;
                uint64_t v34 = v41 + 8;
                while (v33 != v35)
                {
                  uint64_t v42 = *((void *)v33 - 1);
                  v33 -= 8;
                  *((void *)v41 - 1) = v42;
                  v41 -= 8;
                }
                *(void *)(a1 + 8) = v41;
                *(void *)(a1 + 16) = v34;
                *(void *)(a1 + 24) = &v40[8 * v39];
                if (v35) {
                  operator delete(v35);
                }
              }
              else
              {
                *(void *)unint64_t v33 = 0;
                uint64_t v34 = v33 + 8;
              }
              *(void *)(a1 + 16) = v34;
              unint64_t v43 = *((void *)this + 1);
              if (v43 > 0xFFFFFFFFFFFFFFF7 || v43 + 8 > *((void *)this + 2))
              {
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v34 - 1) = *(void *)(*(void *)this + v43);
              unint64_t v31 = *((void *)this + 2);
              unint64_t v30 = *((void *)this + 1) + 8;
              *((void *)this + 1) = v30;
            }
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v65 = *(char **)(a1 + 16);
            unint64_t v64 = *(void *)(a1 + 24);
            if ((unint64_t)v65 >= v64)
            {
              unint64_t v75 = (char *)*v8;
              uint64_t v76 = (v65 - (unsigned char *)*v8) >> 3;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 61) {
LABEL_136:
              }
                sub_1903479E8();
              uint64_t v78 = v64 - (void)v75;
              if (v78 >> 2 > v77) {
                unint64_t v77 = v78 >> 2;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v77;
              }
              if (v79)
              {
                unint64_t v80 = (char *)sub_190347A00(v9, v79);
                unint64_t v75 = *(char **)(a1 + 8);
                unint64_t v65 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v80 = 0;
              }
              unint64_t v81 = &v80[8 * v76];
              *(void *)unint64_t v81 = 0;
              char v66 = v81 + 8;
              while (v65 != v75)
              {
                uint64_t v82 = *((void *)v65 - 1);
                v65 -= 8;
                *((void *)v81 - 1) = v82;
                v81 -= 8;
              }
              *(void *)(a1 + 8) = v81;
              *(void *)(a1 + 16) = v66;
              *(void *)(a1 + 24) = &v80[8 * v79];
              if (v75) {
                operator delete(v75);
              }
            }
            else
            {
              *(void *)unint64_t v65 = 0;
              char v66 = v65 + 8;
            }
            *(void *)(a1 + 16) = v66;
            unint64_t v83 = *((void *)this + 1);
            if (v83 <= 0xFFFFFFFFFFFFFFF7 && v83 + 8 <= *((void *)this + 2))
            {
              *(v66 - 1) = *(void *)(*(void *)this + v83);
              *((void *)this + 1) += 8;
            }
            else
            {
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_126:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 4u:
          *(unsigned char *)(a1 + 64) |= 1u;
          unint64_t v44 = *((void *)this + 1);
          unint64_t v45 = *((void *)this + 2);
          uint64_t v46 = *(void *)this;
          if (v44 <= 0xFFFFFFFFFFFFFFF5 && v44 + 10 <= v45)
          {
            char v47 = 0;
            unsigned int v48 = 0;
            uint64_t v49 = 0;
            do
            {
              unint64_t v50 = v44 + 1;
              *((void *)this + 1) = v44 + 1;
              char v51 = *(unsigned char *)(v46 + v44);
              v49 |= (unint64_t)(v51 & 0x7F) << v47;
              if ((v51 & 0x80) == 0) {
                goto LABEL_111;
              }
              v47 += 7;
              unint64_t v44 = v50;
              BOOL v16 = v48++ > 8;
            }
            while (!v16);
LABEL_87:
            uint64_t v49 = 0;
            goto LABEL_111;
          }
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v49 = 0;
          if (v45 <= v44) {
            unint64_t v45 = *((void *)this + 1);
          }
          while (2)
          {
            if (v45 == v44)
            {
              uint64_t v49 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v69 = v44 + 1;
              char v70 = *(unsigned char *)(v46 + v44);
              *((void *)this + 1) = v69;
              v49 |= (unint64_t)(v70 & 0x7F) << v67;
              if (v70 < 0)
              {
                v67 += 7;
                unint64_t v44 = v69;
                BOOL v16 = v68++ > 8;
                if (v16) {
                  goto LABEL_87;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v49 = 0;
              }
            }
            break;
          }
LABEL_111:
          *(void *)(a1 + 32) = v49;
          goto LABEL_126;
        case 5u:
          *(unsigned char *)(a1 + 64) |= 2u;
          unint64_t v52 = *((void *)this + 1);
          unint64_t v53 = *((void *)this + 2);
          uint64_t v54 = *(void *)this;
          if (v52 <= 0xFFFFFFFFFFFFFFF5 && v52 + 10 <= v53)
          {
            char v55 = 0;
            unsigned int v56 = 0;
            uint64_t v57 = 0;
            do
            {
              unint64_t v58 = v52 + 1;
              *((void *)this + 1) = v52 + 1;
              char v59 = *(unsigned char *)(v54 + v52);
              v57 |= (unint64_t)(v59 & 0x7F) << v55;
              if ((v59 & 0x80) == 0) {
                goto LABEL_114;
              }
              v55 += 7;
              unint64_t v52 = v58;
              BOOL v16 = v56++ > 8;
            }
            while (!v16);
LABEL_94:
            uint64_t v57 = 0;
            goto LABEL_114;
          }
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v57 = 0;
          if (v53 <= v52) {
            unint64_t v53 = *((void *)this + 1);
          }
          while (2)
          {
            if (v53 == v52)
            {
              uint64_t v57 = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v73 = v52 + 1;
              char v74 = *(unsigned char *)(v54 + v52);
              *((void *)this + 1) = v73;
              v57 |= (unint64_t)(v74 & 0x7F) << v71;
              if (v74 < 0)
              {
                v71 += 7;
                unint64_t v52 = v73;
                BOOL v16 = v72++ > 8;
                if (v16) {
                  goto LABEL_94;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                uint64_t v57 = 0;
              }
            }
            break;
          }
LABEL_114:
          *(void *)(a1 + 40) = v57;
          goto LABEL_126;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_126;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190406EBC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2D58;
  *(_DWORD *)(result + 76) = 0;
  return result;
}

uint64_t sub_190406EE0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 48);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  if ((*(unsigned char *)(v3 + 64) & 4) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this);
  }
  char v5 = *(double **)(v3 + 8);
  double v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7);
  }
  char v8 = *(unsigned char *)(v3 + 64);
  if (v8)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v8 = *(unsigned char *)(v3 + 64);
  }
  if ((v8 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

void sub_190406FA8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190406FE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 76);
  if (v5)
  {
    PB::TextFormatter::format(this, "altitudeAngle", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 76);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "azimuthAngle", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x100) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "estimated");
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "estimationUpdateIndex");
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "rollAngle", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "x", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 76);
  if ((v5 & 0x40) == 0)
  {
LABEL_9:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(this, "y", *(double *)(a1 + 56));
  if ((*(_WORD *)(a1 + 76) & 0x80) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "z", *(double *)(a1 + 64));
LABEL_11:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190407144(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 76) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 2u:
              *(_WORD *)(a1 + 76) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 3u:
              *(_WORD *)(a1 + 76) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 4u:
              *(_WORD *)(a1 + 76) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 5u:
              *(_WORD *)(a1 + 76) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 6u:
              *(_WORD *)(a1 + 76) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_44;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_64;
            case 7u:
              *(_WORD *)(a1 + 76) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_64:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_44:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_70;
            case 8u:
              *(_WORD *)(a1 + 76) |= 4u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    uint64_t v25 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_69;
                  }
                  unint64_t v31 = v21++;
                  char v32 = *(unsigned char *)(v22 + v31);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    uint64_t v25 = 0;
LABEL_68:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_69;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v25 = 0;
                }
                goto LABEL_68;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_69;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              uint64_t v25 = 0;
LABEL_69:
              *(void *)(a1 + 24) = v25;
LABEL_70:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *(_WORD *)(a1 + 76) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 72) = v28;
              goto LABEL_70;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_70;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1904075A8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 76);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40));
    __int16 v4 = *(_WORD *)(v3 + 76);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x40) == 0)
  {
LABEL_4:
    if ((v4 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 0x80) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 8) == 0)
  {
LABEL_8:
    if ((v4 & 4) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(_WORD *)(v3 + 76) & 0x100) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 76);
  if ((v4 & 4) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 0x100) == 0) {
    return result;
  }
LABEL_19:

  return PB::Writer::write(this);
}

uint64_t sub_1904076DC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC33E8;
  *(_DWORD *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_190407708(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190407740(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if (v5)
  {
    PB::TextFormatter::format(this, "avgRelOmegaRps", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "ringSensorTrustModelMode");
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  if ((*(unsigned char *)(a1 + 32) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "trustPencilRingSensorBool");
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190407804(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 32) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_38;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_49;
            case 2u:
              *(unsigned char *)(a1 + 32) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 28) = v22;
              goto LABEL_55;
            case 3u:
              *(unsigned char *)(a1 + 32) |= 4u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_54;
                  }
                  unint64_t v31 = v23++;
                  char v32 = *(unsigned char *)(v24 + v31);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_53:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_54;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_53;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_54;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_54:
              *(_DWORD *)(a1 + 24) = v27;
LABEL_55:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *(unsigned char *)(a1 + 32) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_49:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_38:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_55;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_55;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190407B3C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::writeVarInt(this);
      if ((*(unsigned char *)(v3 + 32) & 1) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this);
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 1) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 8);

  return PB::Writer::write(this, v5);
}

uint64_t sub_190407BE4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCBF58;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_190407C0C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190407C44(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "tipForce", *(double *)(a1 + 16));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190407CC0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
        {
LABEL_28:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_33;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
      }
      unint64_t v2 = *((void *)this + 1) + 8;
      *((void *)this + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_190407E9C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if ((v4 & 2) != 0)
  {
    double v5 = *(double *)(v3 + 16);
    return PB::Writer::write(this, v5);
  }
  return result;
}

uint64_t sub_190407F08(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB430;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_190407F30(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190407F68(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 88);
  if (v5)
  {
    PB::TextFormatter::format(this, "altitudeAngle", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 88);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "altitudeAngleConfidence", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "azimuthAngle", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x200) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "azimuthAngleConfidence", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_6:
    if ((v5 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "pathFlags");
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x400) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "pathStage");
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x20) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "positionConfidence", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "x", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "y", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 88) & 0x100) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "z", *(double *)(a1 + 72));
LABEL_13:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040810C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 88) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 2u:
              *(_WORD *)(a1 + 88) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 3u:
              *(_WORD *)(a1 + 88) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 4u:
              *(_WORD *)(a1 + 88) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 5u:
              *(_WORD *)(a1 + 88) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 6u:
              *(_WORD *)(a1 + 88) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 7u:
              *(_WORD *)(a1 + 88) |= 0x400u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v33 = 0;
                unsigned int v34 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_85;
                  }
                  unint64_t v35 = v21++;
                  char v36 = *(unsigned char *)(v22 + v35);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v36 & 0x7F) << v33;
                  if ((v36 & 0x80) == 0) {
                    break;
                  }
                  v33 += 7;
                  BOOL v14 = v34++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_84:
                    unint64_t v2 = v35 + 1;
                    goto LABEL_85;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_84;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_85;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_85:
              *(_DWORD *)(a1 + 84) = v25;
              goto LABEL_91;
            case 8u:
              *(_WORD *)(a1 + 88) |= 0x200u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v37 = 0;
                unsigned int v38 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_90;
                  }
                  unint64_t v39 = v27++;
                  char v40 = *(unsigned char *)(v28 + v39);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v40 & 0x7F) << v37;
                  if ((v40 & 0x80) == 0) {
                    break;
                  }
                  v37 += 7;
                  BOOL v14 = v38++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_89:
                    unint64_t v2 = v39 + 1;
                    goto LABEL_90;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_89;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_90;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_90:
              *(_DWORD *)(a1 + 80) = v31;
LABEL_91:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 9u:
              *(_WORD *)(a1 + 88) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 0xAu:
              *(_WORD *)(a1 + 88) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_80;
            case 0xBu:
              *(_WORD *)(a1 + 88) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
LABEL_80:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_91;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_91;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190408690(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 88);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 48));
    __int16 v4 = *(_WORD *)(v3 + 88);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x40) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x100) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x100) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
    if ((*(_WORD *)(v3 + 88) & 0x10) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 88);
  if ((v4 & 8) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 40);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1904087FC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2D90;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_190408824(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040885C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "activityType");
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "sampleTime", *(double *)(a1 + 8));
  if ((*(unsigned char *)(a1 + 28) & 2) != 0) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "wrMets", *(double *)(a1 + 16));
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190408900(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  for (int i = *((unsigned __int8 *)this + 24); v2 < v3 && i == 0; int i = *((unsigned __int8 *)this + 24))
  {
    uint64_t v8 = *(void *)this;
    if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
    {
      char v15 = 0;
      unsigned int v16 = 0;
      unint64_t v11 = 0;
      if (v2 > v3) {
        unint64_t v3 = v2;
      }
      while (v3 != v2)
      {
        unint64_t v17 = v2 + 1;
        char v18 = *(unsigned char *)(v8 + v2);
        *((void *)this + 1) = v17;
        v11 |= (unint64_t)(v18 & 0x7F) << v15;
        if ((v18 & 0x80) == 0) {
          goto LABEL_20;
        }
        v15 += 7;
        unint64_t v2 = v17;
        if (v16++ >= 9)
        {
LABEL_19:
          unint64_t v11 = 0;
          goto LABEL_20;
        }
      }
      int i = 1;
      *((unsigned char *)this + 24) = 1;
      return i == 0;
    }
    char v9 = 0;
    unsigned int v10 = 0;
    unint64_t v11 = 0;
    while (1)
    {
      unint64_t v12 = v2 + 1;
      *((void *)this + 1) = v2 + 1;
      char v13 = *(unsigned char *)(v8 + v2);
      v11 |= (unint64_t)(v13 & 0x7F) << v9;
      if ((v13 & 0x80) == 0) {
        break;
      }
      v9 += 7;
      unint64_t v2 = v12;
      BOOL v14 = v10++ > 8;
      if (v14) {
        goto LABEL_19;
      }
    }
LABEL_20:
    if ((v11 & 7) == 4)
    {
      int i = 0;
      return i == 0;
    }
    unint64_t v20 = v11 >> 3;
    if ((v11 >> 3) == 3)
    {
      *(unsigned char *)(a1 + 28) |= 4u;
      unint64_t v21 = *((void *)this + 1);
      unint64_t v2 = *((void *)this + 2);
      uint64_t v22 = *(void *)this;
      if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
      {
        char v28 = 0;
        unsigned int v29 = 0;
        uint64_t v25 = 0;
        if (v2 <= v21) {
          unint64_t v2 = *((void *)this + 1);
        }
        while (1)
        {
          if (v2 == v21)
          {
            LODWORD(v25) = 0;
            *((unsigned char *)this + 24) = 1;
            goto LABEL_52;
          }
          unint64_t v30 = v21++;
          char v31 = *(unsigned char *)(v22 + v30);
          *((void *)this + 1) = v21;
          v25 |= (unint64_t)(v31 & 0x7F) << v28;
          if ((v31 & 0x80) == 0) {
            break;
          }
          v28 += 7;
          BOOL v14 = v29++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_51;
          }
        }
        if (*((unsigned char *)this + 24)) {
          LODWORD(v25) = 0;
        }
LABEL_51:
        unint64_t v2 = v30 + 1;
      }
      else
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        while (1)
        {
          unint64_t v2 = v21 + 1;
          *((void *)this + 1) = v21 + 1;
          char v26 = *(unsigned char *)(v22 + v21);
          v25 |= (unint64_t)(v26 & 0x7F) << v23;
          if ((v26 & 0x80) == 0) {
            break;
          }
          v23 += 7;
          unint64_t v21 = v2;
          BOOL v14 = v24++ > 8;
          if (v14)
          {
            LODWORD(v25) = 0;
            break;
          }
        }
      }
LABEL_52:
      *(_DWORD *)(a1 + 24) = v25;
      goto LABEL_53;
    }
    if (v20 == 2)
    {
      *(unsigned char *)(a1 + 28) |= 2u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
        goto LABEL_47;
      }
    }
    else
    {
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        goto LABEL_53;
      }
      *(unsigned char *)(a1 + 28) |= 1u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
      {
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_47:
        unint64_t v2 = *((void *)this + 1) + 8;
        *((void *)this + 1) = v2;
        goto LABEL_53;
      }
    }
    *((unsigned char *)this + 24) = 1;
LABEL_53:
    unint64_t v3 = *((void *)this + 2);
  }
  return i == 0;
}

uint64_t sub_190408BD0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(result + 28) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 28) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_7:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_190408C5C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2DC8;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_190408C84(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190408CBC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activityType");
    char v5 = *(unsigned char *)(a1 + 44);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "algorithmVersion");
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "endDate", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "mets", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "sampleStopReason");
  if ((*(unsigned char *)(a1 + 44) & 4) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "startDate", *(double *)(a1 + 24));
LABEL_8:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190408DC0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 44) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_76;
            case 2u:
              *(unsigned char *)(a1 + 44) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_32;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_76;
            case 3u:
              *(unsigned char *)(a1 + 44) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_76:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_32:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_92;
            case 4u:
              *(unsigned char *)(a1 + 44) |= 8u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v39 = 0;
                unsigned int v40 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_81;
                  }
                  unint64_t v41 = v21++;
                  char v42 = *(unsigned char *)(v22 + v41);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v42 & 0x7F) << v39;
                  if ((v42 & 0x80) == 0) {
                    break;
                  }
                  v39 += 7;
                  BOOL v14 = v40++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_80:
                    unint64_t v2 = v41 + 1;
                    goto LABEL_81;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_80;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_81;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_81:
              *(_DWORD *)(a1 + 32) = v25;
              goto LABEL_92;
            case 5u:
              *(unsigned char *)(a1 + 44) |= 0x10u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  unint64_t v45 = v27++;
                  char v46 = *(unsigned char *)(v28 + v45);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_85:
                    unint64_t v2 = v45 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_85;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 36) = v31;
              goto LABEL_92;
            case 6u:
              *(unsigned char *)(a1 + 44) |= 0x20u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  unint64_t v49 = v33++;
                  char v50 = *(unsigned char *)(v34 + v49);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_90:
                    unint64_t v2 = v49 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_90;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 40) = v37;
LABEL_92:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_92;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_1904092CC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 44);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 44) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 44) & 0x20) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x10) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_13:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_1904093AC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCE220;
  *(_DWORD *)(result + 84) = 0;
  return result;
}

void sub_1904093D4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040940C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 84);
  if (v5)
  {
    PB::TextFormatter::format(this, "ambient", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 84);
    if ((v5 & 0x100) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(a1 + 84) & 0x100) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "baselineAccuracy", *(float *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x200) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "flags", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x200) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "header");
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "intensity", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x10) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "intensityBaselineDelta", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x10) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "intensityCalDelta", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "pocketFlag");
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x40) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "pocketProbability", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 84);
  if ((v5 & 0x40) == 0)
  {
LABEL_11:
    if ((v5 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_25:
  PB::TextFormatter::format(this, "temperature", *(double *)(a1 + 56));
  if ((*(_WORD *)(a1 + 84) & 0x80) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "ts", *(double *)(a1 + 64));
LABEL_13:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1904095B0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 84) |= 0x200u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_76;
                  }
                  unint64_t v31 = v20++;
                  char v32 = *(unsigned char *)(v21 + v31);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_75;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_75:
                unint64_t v2 = v31 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_76;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_76:
              *(_DWORD *)(a1 + 76) = v24;
              goto LABEL_77;
            case 2u:
              *(_WORD *)(a1 + 84) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 3u:
              *(_WORD *)(a1 + 84) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 4u:
              *(_WORD *)(a1 + 84) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 5u:
              *(_WORD *)(a1 + 84) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 6u:
              *(_WORD *)(a1 + 84) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 7u:
              *(_WORD *)(a1 + 84) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 8u:
              *(_WORD *)(a1 + 84) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 80) = v28;
              goto LABEL_77;
            case 9u:
              *(_WORD *)(a1 + 84) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_70;
            case 0xAu:
              *(_WORD *)(a1 + 84) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_59;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 4;
              goto LABEL_71;
            case 0xBu:
              *(_WORD *)(a1 + 84) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
LABEL_70:
                unint64_t v2 = *((void *)this + 1) + 8;
LABEL_71:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_59:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_77;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
LABEL_77:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190409A94(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 84);
  if ((v4 & 0x200) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    __int16 v4 = *(_WORD *)(v3 + 84);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_15;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 1) == 0)
  {
LABEL_8:
    if ((v4 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x400) == 0)
  {
LABEL_9:
    if ((v4 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x20) == 0)
  {
LABEL_10:
    if ((v4 & 0x100) == 0) {
      goto LABEL_11;
    }
LABEL_22:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
    if ((*(_WORD *)(v3 + 84) & 0x40) == 0) {
      return result;
    }
    goto LABEL_23;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 84);
  if ((v4 & 0x100) != 0) {
    goto LABEL_22;
  }
LABEL_11:
  if ((v4 & 0x40) == 0) {
    return result;
  }
LABEL_23:
  double v5 = *(double *)(v3 + 56);

  return PB::Writer::write(this, v5);
}

double sub_190409C00(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFD0280;
  *(_DWORD *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_190409C34(PB::Base *this)
{
  *(void *)this = &unk_1EDFD0280;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_190409CA8(PB::Base *a1)
{
  sub_190409C34(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190409CE0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  double v5 = *(double **)(a1 + 8);
  double v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "attitude", v7);
  }
  uint64_t v8 = *(double **)(a1 + 32);
  char v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "position", v10);
  }
  if (*(unsigned char *)(a1 + 64)) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190409DA8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    double v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        if (v14++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3) {
        break;
      }
      if (v25 == 2)
      {
        if (v24 == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v41 = *((void *)this + 1);
          unint64_t v42 = *((void *)this + 2);
          while (v41 < v42 && !*((unsigned char *)this + 24))
          {
            unsigned int v44 = *(char **)(a1 + 16);
            unint64_t v43 = *(void *)(a1 + 24);
            if ((unint64_t)v44 >= v43)
            {
              char v46 = (char *)*v10;
              uint64_t v47 = (v44 - (unsigned char *)*v10) >> 3;
              unint64_t v48 = v47 + 1;
              if ((unint64_t)(v47 + 1) >> 61) {
                goto LABEL_128;
              }
              uint64_t v49 = v43 - (void)v46;
              if (v49 >> 2 > v48) {
                unint64_t v48 = v49 >> 2;
              }
              if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v50 = v48;
              }
              if (v50)
              {
                char v51 = (char *)sub_190347A00(v11, v50);
                char v46 = *(char **)(a1 + 8);
                unsigned int v44 = *(char **)(a1 + 16);
              }
              else
              {
                char v51 = 0;
              }
              unint64_t v52 = &v51[8 * v47];
              *(void *)unint64_t v52 = 0;
              unint64_t v45 = v52 + 8;
              while (v44 != v46)
              {
                uint64_t v53 = *((void *)v44 - 1);
                v44 -= 8;
                *((void *)v52 - 1) = v53;
                v52 -= 8;
              }
              *(void *)(a1 + 8) = v52;
              *(void *)(a1 + 16) = v45;
              *(void *)(a1 + 24) = &v51[8 * v50];
              if (v46) {
                operator delete(v46);
              }
            }
            else
            {
              *(void *)unsigned int v44 = 0;
              unint64_t v45 = v44 + 8;
            }
            *(void *)(a1 + 16) = v45;
            unint64_t v54 = *((void *)this + 1);
            if (v54 > 0xFFFFFFFFFFFFFFF7 || v54 + 8 > *((void *)this + 2)) {
              goto LABEL_82;
            }
            *(v45 - 1) = *(void *)(*(void *)this + v54);
            unint64_t v42 = *((void *)this + 2);
            unint64_t v41 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v41;
          }
          goto LABEL_83;
        }
        char v59 = *(char **)(a1 + 16);
        unint64_t v58 = *(void *)(a1 + 24);
        if ((unint64_t)v59 >= v58)
        {
          char v66 = (char *)*v10;
          uint64_t v67 = (v59 - (unsigned char *)*v10) >> 3;
          unint64_t v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61) {
LABEL_128:
          }
            sub_1903479E8();
          uint64_t v69 = v58 - (void)v66;
          if (v69 >> 2 > v68) {
            unint64_t v68 = v69 >> 2;
          }
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v70 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v70 = v68;
          }
          if (v70)
          {
            char v71 = (char *)sub_190347A00(v11, v70);
            char v66 = *(char **)(a1 + 8);
            char v59 = *(char **)(a1 + 16);
          }
          else
          {
            char v71 = 0;
          }
          char v74 = &v71[8 * v67];
          *(void *)char v74 = 0;
          uint64_t v57 = v74 + 8;
          while (v59 != v66)
          {
            uint64_t v75 = *((void *)v59 - 1);
            v59 -= 8;
            *((void *)v74 - 1) = v75;
            v74 -= 8;
          }
          *(void *)(a1 + 8) = v74;
          *(void *)(a1 + 16) = v57;
          *(void *)(a1 + 24) = &v71[8 * v70];
          if (v66) {
            operator delete(v66);
          }
        }
        else
        {
          *(void *)char v59 = 0;
          uint64_t v57 = v59 + 8;
        }
        *(void *)(a1 + 16) = v57;
LABEL_114:
        unint64_t v76 = *((void *)this + 1);
        if (v76 > 0xFFFFFFFFFFFFFFF7 || v76 + 8 > *((void *)this + 2))
        {
LABEL_116:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_119;
        }
        *(v57 - 1) = *(void *)(*(void *)this + v76);
        goto LABEL_118;
      }
      if (v25 == 1)
      {
        *(unsigned char *)(a1 + 64) |= 1u;
        unint64_t v26 = *((void *)this + 1);
        if (v26 > 0xFFFFFFFFFFFFFFF7 || v26 + 8 > *((void *)this + 2)) {
          goto LABEL_116;
        }
        *(void *)(a1 + 56) = *(void *)(*(void *)this + v26);
LABEL_118:
        *((void *)this + 1) += 8;
        goto LABEL_119;
      }
      if ((PB::Reader::skip(this) & 1) == 0) {
        return 0;
      }
LABEL_119:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    if (v24 == 2)
    {
      if (PB::Reader::placeMark()) {
        return 0;
      }
      unint64_t v27 = *((void *)this + 1);
      unint64_t v28 = *((void *)this + 2);
      while (v27 < v28 && !*((unsigned char *)this + 24))
      {
        unsigned int v30 = *(char **)(a1 + 40);
        unint64_t v29 = *(void *)(a1 + 48);
        if ((unint64_t)v30 >= v29)
        {
          char v32 = (char *)*v8;
          uint64_t v33 = (v30 - (unsigned char *)*v8) >> 3;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61) {
            goto LABEL_127;
          }
          uint64_t v35 = v29 - (void)v32;
          if (v35 >> 2 > v34) {
            unint64_t v34 = v35 >> 2;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            uint64_t v37 = (char *)sub_190347A00(v9, v36);
            char v32 = *(char **)(a1 + 32);
            unsigned int v30 = *(char **)(a1 + 40);
          }
          else
          {
            uint64_t v37 = 0;
          }
          char v38 = &v37[8 * v33];
          *(void *)char v38 = 0;
          unint64_t v31 = v38 + 8;
          while (v30 != v32)
          {
            uint64_t v39 = *((void *)v30 - 1);
            v30 -= 8;
            *((void *)v38 - 1) = v39;
            v38 -= 8;
          }
          *(void *)(a1 + 32) = v38;
          *(void *)(a1 + 40) = v31;
          *(void *)(a1 + 48) = &v37[8 * v36];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *(void *)unsigned int v30 = 0;
          unint64_t v31 = v30 + 8;
        }
        *(void *)(a1 + 40) = v31;
        unint64_t v40 = *((void *)this + 1);
        if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((void *)this + 2))
        {
LABEL_82:
          *((unsigned char *)this + 24) = 1;
          break;
        }
        *(v31 - 1) = *(void *)(*(void *)this + v40);
        unint64_t v28 = *((void *)this + 2);
        unint64_t v27 = *((void *)this + 1) + 8;
        *((void *)this + 1) = v27;
      }
LABEL_83:
      PB::Reader::recallMark();
      goto LABEL_119;
    }
    unsigned int v56 = *(char **)(a1 + 40);
    unint64_t v55 = *(void *)(a1 + 48);
    if ((unint64_t)v56 >= v55)
    {
      char v60 = (char *)*v8;
      uint64_t v61 = (v56 - (unsigned char *)*v8) >> 3;
      unint64_t v62 = v61 + 1;
      if ((unint64_t)(v61 + 1) >> 61) {
LABEL_127:
      }
        sub_1903479E8();
      uint64_t v63 = v55 - (void)v60;
      if (v63 >> 2 > v62) {
        unint64_t v62 = v63 >> 2;
      }
      if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v64 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v64 = v62;
      }
      if (v64)
      {
        unint64_t v65 = (char *)sub_190347A00(v9, v64);
        char v60 = *(char **)(a1 + 32);
        unsigned int v56 = *(char **)(a1 + 40);
      }
      else
      {
        unint64_t v65 = 0;
      }
      unsigned int v72 = &v65[8 * v61];
      *(void *)unsigned int v72 = 0;
      uint64_t v57 = v72 + 8;
      while (v56 != v60)
      {
        uint64_t v73 = *((void *)v56 - 1);
        v56 -= 8;
        *((void *)v72 - 1) = v73;
        v72 -= 8;
      }
      *(void *)(a1 + 32) = v72;
      *(void *)(a1 + 40) = v57;
      *(void *)(a1 + 48) = &v65[8 * v64];
      if (v60) {
        operator delete(v60);
      }
    }
    else
    {
      *(void *)unsigned int v56 = 0;
      uint64_t v57 = v56 + 8;
    }
    *(void *)(a1 + 40) = v57;
    goto LABEL_114;
  }
  return v4 == 0;
}

uint64_t sub_19040A31C(uint64_t result, PB::Writer *this)
{
  unint64_t v3 = (void *)result;
  if (*(unsigned char *)(result + 64)) {
    double result = PB::Writer::write(this, *(double *)(result + 56));
  }
  int v4 = (double *)v3[1];
  double v5 = (double *)v3[2];
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  uint64_t v8 = (double *)v3[4];
  double v7 = (double *)v3[5];
  while (v8 != v7)
  {
    double v9 = *v8++;
    double result = PB::Writer::write(this, v9);
  }
  return result;
}

double sub_19040A3A0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFD08A8;
  *(_DWORD *)(a1 + 44) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void sub_19040A3D0(PB::Base *this)
{
  *(void *)this = &unk_1EDFD08A8;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_19040A464(PB::Base *a1)
{
  sub_19040A3D0(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040A49C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "pose");
  }
  double v6 = *(double **)(a1 + 8);
  double v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }
  if (*(unsigned char *)(a1 + 44)) {
    PB::TextFormatter::format(this, "wasCorrected");
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_19040A570(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v22 = v13 >> 3;
      if ((v13 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 44) |= 1u;
        unint64_t v23 = *((void *)this + 1);
        if (v23 >= *((void *)this + 2))
        {
          BOOL v26 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          unint64_t v24 = v23 + 1;
          int v25 = *(unsigned __int8 *)(*(void *)this + v23);
          *((void *)this + 1) = v24;
          BOOL v26 = v25 != 0;
        }
        *(unsigned char *)(a1 + 40) = v26;
      }
      else if (v22 == 2)
      {
        if ((v13 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v27 = *((void *)this + 1);
          unint64_t v28 = *((void *)this + 2);
          while (v27 < v28 && !*((unsigned char *)this + 24))
          {
            unsigned int v30 = *(char **)(a1 + 16);
            unint64_t v29 = *(void *)(a1 + 24);
            if ((unint64_t)v30 >= v29)
            {
              char v32 = (char *)*v8;
              uint64_t v33 = (v30 - (unsigned char *)*v8) >> 3;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 61) {
                goto LABEL_86;
              }
              uint64_t v35 = v29 - (void)v32;
              if (v35 >> 2 > v34) {
                unint64_t v34 = v35 >> 2;
              }
              if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v36 = v34;
              }
              if (v36)
              {
                uint64_t v37 = (char *)sub_190347A00(v9, v36);
                char v32 = *(char **)(a1 + 8);
                unsigned int v30 = *(char **)(a1 + 16);
              }
              else
              {
                uint64_t v37 = 0;
              }
              char v38 = &v37[8 * v33];
              *(void *)char v38 = 0;
              unint64_t v31 = v38 + 8;
              while (v30 != v32)
              {
                uint64_t v39 = *((void *)v30 - 1);
                v30 -= 8;
                *((void *)v38 - 1) = v39;
                v38 -= 8;
              }
              *(void *)(a1 + 8) = v38;
              *(void *)(a1 + 16) = v31;
              *(void *)(a1 + 24) = &v37[8 * v36];
              if (v32) {
                operator delete(v32);
              }
            }
            else
            {
              *(void *)unsigned int v30 = 0;
              unint64_t v31 = v30 + 8;
            }
            *(void *)(a1 + 16) = v31;
            unint64_t v40 = *((void *)this + 1);
            if (v40 > 0xFFFFFFFFFFFFFFF7 || v40 + 8 > *((void *)this + 2))
            {
              *((unsigned char *)this + 24) = 1;
              break;
            }
            *(v31 - 1) = *(void *)(*(void *)this + v40);
            unint64_t v28 = *((void *)this + 2);
            unint64_t v27 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v27;
          }
          PB::Reader::recallMark();
        }
        else
        {
          unint64_t v42 = *(char **)(a1 + 16);
          unint64_t v41 = *(void *)(a1 + 24);
          if ((unint64_t)v42 >= v41)
          {
            unsigned int v44 = (char *)*v8;
            uint64_t v45 = (v42 - (unsigned char *)*v8) >> 3;
            unint64_t v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 61) {
LABEL_86:
            }
              sub_1903479E8();
            uint64_t v47 = v41 - (void)v44;
            if (v47 >> 2 > v46) {
              unint64_t v46 = v47 >> 2;
            }
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v48 = v46;
            }
            if (v48)
            {
              uint64_t v49 = (char *)sub_190347A00(v9, v48);
              unsigned int v44 = *(char **)(a1 + 8);
              unint64_t v42 = *(char **)(a1 + 16);
            }
            else
            {
              uint64_t v49 = 0;
            }
            unint64_t v50 = &v49[8 * v45];
            *(void *)unint64_t v50 = 0;
            unint64_t v43 = v50 + 8;
            while (v42 != v44)
            {
              uint64_t v51 = *((void *)v42 - 1);
              v42 -= 8;
              *((void *)v50 - 1) = v51;
              v50 -= 8;
            }
            *(void *)(a1 + 8) = v50;
            *(void *)(a1 + 16) = v43;
            *(void *)(a1 + 24) = &v49[8 * v48];
            if (v44) {
              operator delete(v44);
            }
          }
          else
          {
            *(void *)unint64_t v42 = 0;
            unint64_t v43 = v42 + 8;
          }
          *(void *)(a1 + 16) = v43;
          unint64_t v52 = *((void *)this + 1);
          if (v52 <= 0xFFFFFFFFFFFFFFF7 && v52 + 8 <= *((void *)this + 2))
          {
            *(v43 - 1) = *(void *)(*(void *)this + v52);
            *((void *)this + 1) += 8;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
        }
      }
      else
      {
        if (v22 == 1) {
          operator new();
        }
        if ((PB::Reader::skip(this) & 1) == 0) {
          return 0;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v17 = 0;
    unsigned int v18 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v19 = v2 + 1;
      char v20 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v19;
      v13 |= (unint64_t)(v20 & 0x7F) << v17;
      if ((v20 & 0x80) == 0) {
        goto LABEL_21;
      }
      v17 += 7;
      unint64_t v2 = v19;
      if (v18++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19040A9FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 32);
  if (v4) {
    double result = PB::Writer::writeSubmessage(this, v4);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  double v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  if (*(unsigned char *)(v3 + 44))
  {
    return PB::Writer::write(this);
  }
  return result;
}

double sub_19040AA90(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFC29D8;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  return result;
}

void sub_19040AAC4(PB::Base *this)
{
  *(void *)this = &unk_1EDFC29D8;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_19040AB38(PB::Base *a1)
{
  sub_19040AAC4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040AB70(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 60)) {
    PB::TextFormatter::format(this, "jointName");
  }
  uint64_t v5 = *(double **)(a1 + 8);
  double v6 = *(double **)(a1 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    PB::TextFormatter::format(this, "rotation", v7);
  }
  double v8 = *(double **)(a1 + 32);
  uint64_t v9 = *(double **)(a1 + 40);
  while (v8 != v9)
  {
    double v10 = *v8++;
    PB::TextFormatter::format(this, "translation", v10);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_19040AC38(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    double v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        unint64_t v15 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v21 = v2 + 1;
          char v22 = *(unsigned char *)(v12 + v2);
          *((void *)this + 1) = v21;
          v15 |= (unint64_t)(v22 & 0x7F) << v19;
          if ((v22 & 0x80) == 0) {
            goto LABEL_21;
          }
          v19 += 7;
          unint64_t v2 = v21;
          if (v20++ >= 9)
          {
LABEL_20:
            unint64_t v15 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v25 = v15 >> 3;
      if ((v15 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 60) |= 1u;
        unint64_t v40 = *((void *)this + 1);
        unint64_t v41 = *((void *)this + 2);
        uint64_t v42 = *(void *)this;
        if (v40 > 0xFFFFFFFFFFFFFFF5 || v40 + 10 > v41)
        {
          char v65 = 0;
          unsigned int v66 = 0;
          uint64_t v45 = 0;
          if (v41 <= v40) {
            unint64_t v41 = *((void *)this + 1);
          }
          while (1)
          {
            if (v41 == v40)
            {
              LODWORD(v45) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_114;
            }
            unint64_t v67 = v40 + 1;
            char v68 = *(unsigned char *)(v42 + v40);
            *((void *)this + 1) = v67;
            v45 |= (unint64_t)(v68 & 0x7F) << v65;
            if ((v68 & 0x80) == 0) {
              break;
            }
            v65 += 7;
            unint64_t v40 = v67;
            BOOL v18 = v66++ > 8;
            if (v18)
            {
LABEL_90:
              LODWORD(v45) = 0;
              goto LABEL_114;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v45) = 0;
          }
        }
        else
        {
          char v43 = 0;
          unsigned int v44 = 0;
          uint64_t v45 = 0;
          while (1)
          {
            unint64_t v46 = v40 + 1;
            *((void *)this + 1) = v40 + 1;
            char v47 = *(unsigned char *)(v42 + v40);
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if ((v47 & 0x80) == 0) {
              break;
            }
            v43 += 7;
            unint64_t v40 = v46;
            BOOL v18 = v44++ > 8;
            if (v18) {
              goto LABEL_90;
            }
          }
        }
LABEL_114:
        *(_DWORD *)(a1 + 56) = v45;
        goto LABEL_133;
      }
      if (v25 == 2) {
        break;
      }
      if (v25 == 1)
      {
        if (v24 != 2)
        {
          uint64_t v63 = *(char **)(a1 + 16);
          unint64_t v62 = *(void *)(a1 + 24);
          if ((unint64_t)v63 >= v62)
          {
            char v71 = (char *)*v10;
            uint64_t v72 = (v63 - (unsigned char *)*v10) >> 3;
            unint64_t v73 = v72 + 1;
            if ((unint64_t)(v72 + 1) >> 61) {
LABEL_143:
            }
              sub_1903479E8();
            uint64_t v74 = v62 - (void)v71;
            if (v74 >> 2 > v73) {
              unint64_t v73 = v74 >> 2;
            }
            if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v75 = v73;
            }
            if (v75)
            {
              unint64_t v76 = (char *)sub_190347A00(v11, v75);
              char v71 = *(char **)(a1 + 8);
              uint64_t v63 = *(char **)(a1 + 16);
            }
            else
            {
              unint64_t v76 = 0;
            }
            unint64_t v83 = &v76[8 * v72];
            *(void *)unint64_t v83 = 0;
            unint64_t v64 = v83 + 8;
            while (v63 != v71)
            {
              uint64_t v84 = *((void *)v63 - 1);
              v63 -= 8;
              *((void *)v83 - 1) = v84;
              v83 -= 8;
            }
            *(void *)(a1 + 8) = v83;
            *(void *)(a1 + 16) = v64;
            *(void *)(a1 + 24) = &v76[8 * v75];
            if (v71) {
              operator delete(v71);
            }
          }
          else
          {
            *(void *)uint64_t v63 = 0;
            unint64_t v64 = v63 + 8;
          }
          *(void *)(a1 + 16) = v64;
LABEL_129:
          unint64_t v87 = *((void *)this + 1);
          if (v87 <= 0xFFFFFFFFFFFFFFF7 && v87 + 8 <= *((void *)this + 2))
          {
            *(v64 - 1) = *(void *)(*(void *)this + v87);
            *((void *)this + 1) += 8;
          }
          else
          {
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_133;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v26 = *((void *)this + 1);
        unint64_t v27 = *((void *)this + 2);
        while (v26 < v27 && !*((unsigned char *)this + 24))
        {
          unint64_t v29 = *(char **)(a1 + 16);
          unint64_t v28 = *(void *)(a1 + 24);
          if ((unint64_t)v29 >= v28)
          {
            unint64_t v31 = (char *)*v10;
            uint64_t v32 = (v29 - (unsigned char *)*v10) >> 3;
            unint64_t v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 61) {
              goto LABEL_143;
            }
            uint64_t v34 = v28 - (void)v31;
            if (v34 >> 2 > v33) {
              unint64_t v33 = v34 >> 2;
            }
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v33;
            }
            if (v35)
            {
              unint64_t v36 = (char *)sub_190347A00(v11, v35);
              unint64_t v31 = *(char **)(a1 + 8);
              unint64_t v29 = *(char **)(a1 + 16);
            }
            else
            {
              unint64_t v36 = 0;
            }
            uint64_t v37 = &v36[8 * v32];
            *(void *)uint64_t v37 = 0;
            unsigned int v30 = v37 + 8;
            while (v29 != v31)
            {
              uint64_t v38 = *((void *)v29 - 1);
              v29 -= 8;
              *((void *)v37 - 1) = v38;
              v37 -= 8;
            }
            *(void *)(a1 + 8) = v37;
            *(void *)(a1 + 16) = v30;
            *(void *)(a1 + 24) = &v36[8 * v35];
            if (v31) {
              operator delete(v31);
            }
          }
          else
          {
            *(void *)unint64_t v29 = 0;
            unsigned int v30 = v29 + 8;
          }
          *(void *)(a1 + 16) = v30;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFF7 || v39 + 8 > *((void *)this + 2)) {
            goto LABEL_93;
          }
          *(v30 - 1) = *(void *)(*(void *)this + v39);
          unint64_t v27 = *((void *)this + 2);
          unint64_t v26 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v26;
        }
LABEL_94:
        PB::Reader::recallMark();
        goto LABEL_133;
      }
      if ((PB::Reader::skip(this) & 1) == 0) {
        return 0;
      }
LABEL_133:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    if (v24 != 2)
    {
      unint64_t v70 = *(char **)(a1 + 40);
      unint64_t v69 = *(void *)(a1 + 48);
      if ((unint64_t)v70 >= v69)
      {
        unint64_t v77 = (char *)*v8;
        uint64_t v78 = (v70 - (unsigned char *)*v8) >> 3;
        unint64_t v79 = v78 + 1;
        if ((unint64_t)(v78 + 1) >> 61) {
LABEL_144:
        }
          sub_1903479E8();
        uint64_t v80 = v69 - (void)v77;
        if (v80 >> 2 > v79) {
          unint64_t v79 = v80 >> 2;
        }
        if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v81 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v81 = v79;
        }
        if (v81)
        {
          uint64_t v82 = (char *)sub_190347A00(v9, v81);
          unint64_t v77 = *(char **)(a1 + 32);
          unint64_t v70 = *(char **)(a1 + 40);
        }
        else
        {
          uint64_t v82 = 0;
        }
        unint64_t v85 = &v82[8 * v78];
        *(void *)unint64_t v85 = 0;
        unint64_t v64 = v85 + 8;
        while (v70 != v77)
        {
          uint64_t v86 = *((void *)v70 - 1);
          v70 -= 8;
          *((void *)v85 - 1) = v86;
          v85 -= 8;
        }
        *(void *)(a1 + 32) = v85;
        *(void *)(a1 + 40) = v64;
        *(void *)(a1 + 48) = &v82[8 * v81];
        if (v77) {
          operator delete(v77);
        }
      }
      else
      {
        *(void *)unint64_t v70 = 0;
        unint64_t v64 = v70 + 8;
      }
      *(void *)(a1 + 40) = v64;
      goto LABEL_129;
    }
    if (PB::Reader::placeMark()) {
      return 0;
    }
    unint64_t v48 = *((void *)this + 1);
    unint64_t v49 = *((void *)this + 2);
    while (v48 < v49 && !*((unsigned char *)this + 24))
    {
      uint64_t v51 = *(char **)(a1 + 40);
      unint64_t v50 = *(void *)(a1 + 48);
      if ((unint64_t)v51 >= v50)
      {
        uint64_t v53 = (char *)*v8;
        uint64_t v54 = (v51 - (unsigned char *)*v8) >> 3;
        unint64_t v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 61) {
          goto LABEL_144;
        }
        uint64_t v56 = v50 - (void)v53;
        if (v56 >> 2 > v55) {
          unint64_t v55 = v56 >> 2;
        }
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v57 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v57 = v55;
        }
        if (v57)
        {
          unint64_t v58 = (char *)sub_190347A00(v9, v57);
          uint64_t v53 = *(char **)(a1 + 32);
          uint64_t v51 = *(char **)(a1 + 40);
        }
        else
        {
          unint64_t v58 = 0;
        }
        char v59 = &v58[8 * v54];
        *(void *)char v59 = 0;
        unint64_t v52 = v59 + 8;
        while (v51 != v53)
        {
          uint64_t v60 = *((void *)v51 - 1);
          v51 -= 8;
          *((void *)v59 - 1) = v60;
          v59 -= 8;
        }
        *(void *)(a1 + 32) = v59;
        *(void *)(a1 + 40) = v52;
        *(void *)(a1 + 48) = &v58[8 * v57];
        if (v53) {
          operator delete(v53);
        }
      }
      else
      {
        *(void *)uint64_t v51 = 0;
        unint64_t v52 = v51 + 8;
      }
      *(void *)(a1 + 40) = v52;
      unint64_t v61 = *((void *)this + 1);
      if (v61 > 0xFFFFFFFFFFFFFFF7 || v61 + 8 > *((void *)this + 2))
      {
LABEL_93:
        *((unsigned char *)this + 24) = 1;
        goto LABEL_94;
      }
      *(v52 - 1) = *(void *)(*(void *)this + v61);
      unint64_t v49 = *((void *)this + 2);
      unint64_t v48 = *((void *)this + 1) + 8;
      *((void *)this + 1) = v48;
    }
    goto LABEL_94;
  }
  return v4 == 0;
}

uint64_t sub_19040B258(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(double **)(result + 8);
  uint64_t v5 = *(double **)(result + 16);
  while (v4 != v5)
  {
    double v6 = *v4++;
    double result = PB::Writer::write(this, v6);
  }
  double v7 = *(double **)(v3 + 32);
  double v8 = *(double **)(v3 + 40);
  while (v7 != v8)
  {
    double v9 = *v7++;
    double result = PB::Writer::write(this, v9);
  }
  if (*(unsigned char *)(v3 + 60))
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

void *sub_19040B2F8(void *result)
{
  *double result = &unk_1EDFC2AB8;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_19040B31C(void **a1)
{
  *a1 = &unk_1EDFC2AB8;
  unint64_t v2 = a1 + 1;
  sub_190347828(&v2);
  PB::Base::~Base((PB::Base *)a1);
}

uint64_t sub_19040B378(void **a1)
{
  *a1 = &unk_1EDFC2AB8;
  uint64_t v3 = a1 + 1;
  sub_190347828(&v3);
  PB::Base::~Base((PB::Base *)a1);
  return MEMORY[0x192FCC980]();
}

uint64_t sub_19040B3E8(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  double v6 = *(uint64_t **)(a1 + 16);
  while (v5 != v6)
  {
    uint64_t v7 = *v5++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v7 + 32))(v7, this, "joint");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040B480(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        sub_19040B63C();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

void sub_19040B63C()
{
}

void sub_19040B764(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_190347EEC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_19040B7A8(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base ***)(result + 8);
  for (i = *(const PB::Base ***)(result + 16); v2 != i; uint64_t result = PB::Writer::writeSubmessage(this, v5))
    uint64_t v5 = *v2++;
  return result;
}

uint64_t sub_19040B7F4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF410;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

void sub_19040B81C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040B854(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 16)) {
    PB::TextFormatter::format(this, "userActivity");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040B8B4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 16) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v3)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v3 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          else {
            unint64_t v2 = *((void *)this + 2);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_42;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v24 = 0;
          }
LABEL_42:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_43:
        *(void *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        unint64_t v3 = *((void *)this + 2);
      }
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19040BAEC(uint64_t result, PB::Writer *this)
{
  if (*(unsigned char *)(result + 16)) {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_19040BB0C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC30A0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_19040BB34(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040BB6C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if (v5)
  {
    PB::TextFormatter::format(this, "dot", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 24);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040BBE8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    do
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
          goto LABEL_28;
        }
        *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
      }
      else
      {
        if ((v11 >> 3) != 1)
        {
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          goto LABEL_33;
        }
        *(unsigned char *)(a1 + 24) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
        {
LABEL_28:
          *((unsigned char *)this + 24) = 1;
          goto LABEL_33;
        }
        *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
      }
      unint64_t v2 = *((void *)this + 1) + 8;
      *((void *)this + 1) = v2;
LABEL_33:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
    }
    while (v2 < v3 && !*((unsigned char *)this + 24));
  }
  return v4 == 0;
}

uint64_t sub_19040BDC4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 24);
  }
  if (v4)
  {
    double v5 = *(double *)(v3 + 8);
    return PB::Writer::write(this, v5);
  }
  return result;
}

uint64_t sub_19040BE30(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC30D8;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_19040BE58(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040BE90(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 4) != 0)
  {
    PB::TextFormatter::format(this, "inlierCount");
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 0x20) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 0x20) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "isOutlierCurrentSample");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "isValidMeasurement");
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 1) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "range", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "rangeFrequency", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 2) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "rangeShift", *(float *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 40) & 2) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 16));
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040BFB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 40) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_30;
            case 2u:
              *(unsigned char *)(a1 + 40) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_30:
              unint64_t v2 = *((void *)this + 1) + 8;
              goto LABEL_61;
            case 3u:
              *(unsigned char *)(a1 + 40) |= 4u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_66;
                  }
                  unint64_t v33 = v21++;
                  char v34 = *(unsigned char *)(v22 + v33);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  BOOL v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_65:
                    unint64_t v2 = v33 + 1;
                    goto LABEL_66;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_65;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_66;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_66:
              *(_DWORD *)(a1 + 24) = v25;
LABEL_67:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 4u:
              *(unsigned char *)(a1 + 40) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_43;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_60;
            case 5u:
              *(unsigned char *)(a1 + 40) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
LABEL_60:
                unint64_t v2 = *((void *)this + 1) + 4;
LABEL_61:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_43:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_67;
            case 6u:
              *(unsigned char *)(a1 + 40) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 36) = v28;
              goto LABEL_67;
            case 7u:
              *(unsigned char *)(a1 + 40) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 37) = v30;
              goto LABEL_67;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_67;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19040C3B4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this);
    if ((*(unsigned char *)(v3 + 40) & 0x40) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 40);
  if ((v4 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 0x40) == 0) {
    return result;
  }
LABEL_15:

  return PB::Writer::write(this);
}

uint64_t sub_19040C4B0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC3260;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_19040C4D8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040C510(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "isStart");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040C58C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 >= *((void *)this + 2))
        {
          BOOL v21 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
          *((void *)this + 1) = v2;
          BOOL v21 = v20 != 0;
        }
        *(unsigned char *)(a1 + 16) = v21;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19040C774(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::write(this);
  }
  return result;
}

uint64_t sub_19040C7E0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC2EA8;
  *(_DWORD *)(result + 92) = 0;
  return result;
}

void sub_19040C808(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040C840(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x200) != 0)
  {
    PB::TextFormatter::format(this, "distanceFromParticleFilter", *(float *)(a1 + 80));
    __int16 v5 = *(_WORD *)(a1 + 92);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_20;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalAngle", *(double *)(a1 + 8));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "horizontalAngleUncertainty", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "horizontalAngleUncertaintyUnfiltered", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x800) == 0)
  {
LABEL_6:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "isConverged");
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x1000) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "isDistanceValid");
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "positionX", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "positionY", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x20) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "positionZ", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "revokeReason");
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x40) == 0)
  {
LABEL_12:
    if ((v5 & 0x80) == 0) {
      goto LABEL_13;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 92);
  if ((v5 & 0x80) == 0)
  {
LABEL_13:
    if ((v5 & 0x100) == 0) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_29:
  PB::TextFormatter::format(this, "velocityX", *(double *)(a1 + 64));
  if ((*(_WORD *)(a1 + 92) & 0x100) != 0) {
LABEL_14:
  }
    PB::TextFormatter::format(this, "velocityY", *(double *)(a1 + 72));
LABEL_15:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040CA24(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 92) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 2u:
              *(_WORD *)(a1 + 92) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 3u:
              *(_WORD *)(a1 + 92) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 4u:
              *(_WORD *)(a1 + 92) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 5u:
              *(_WORD *)(a1 + 92) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 6u:
              *(_WORD *)(a1 + 92) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 7u:
              *(_WORD *)(a1 + 92) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 8u:
              *(_WORD *)(a1 + 92) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_77;
            case 9u:
              *(_WORD *)(a1 + 92) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 88) = v22;
              goto LABEL_84;
            case 0xAu:
              *(_WORD *)(a1 + 92) |= 0x400u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_83;
                  }
                  unint64_t v33 = v23++;
                  char v34 = *(unsigned char *)(v24 + v33);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  BOOL v14 = v32++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_82:
                    unint64_t v2 = v33 + 1;
                    goto LABEL_83;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_82;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_83;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_83:
              *(_DWORD *)(a1 + 84) = v27;
LABEL_84:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xBu:
              *(_WORD *)(a1 + 92) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_64;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              unint64_t v2 = *((void *)this + 1) + 4;
              goto LABEL_78;
            case 0xCu:
              *(_WORD *)(a1 + 92) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 89) = v30;
              goto LABEL_84;
            case 0xDu:
              *(_WORD *)(a1 + 92) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
LABEL_77:
                unint64_t v2 = *((void *)this + 1) + 8;
LABEL_78:
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_64:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_84;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_84;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19040CF8C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 92);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56));
    __int16 v4 = *(_WORD *)(v3 + 92);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v4 & 1) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 0x800) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x800) == 0)
  {
LABEL_10:
    if ((v4 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x400) == 0)
  {
LABEL_11:
    if ((v4 & 0x200) == 0) {
      goto LABEL_12;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::writeVarInt(this);
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x200) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
LABEL_26:
    uint64_t result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 92) & 0x20) == 0) {
      return result;
    }
    goto LABEL_27;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  __int16 v4 = *(_WORD *)(v3 + 92);
  if ((v4 & 0x1000) != 0) {
    goto LABEL_26;
  }
LABEL_13:
  if ((v4 & 0x20) == 0) {
    return result;
  }
LABEL_27:
  double v5 = *(double *)(v3 + 48);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19040D130(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC3298;
  *(_DWORD *)(result + 44) = 0;
  return result;
}

void sub_19040D158(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040D190(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "dot", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 44);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 44) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "noiseVelocityX", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "noiseVelocityY", *(float *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "speed", *(float *)(a1 + 28));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "speedUncertainty", *(float *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 1) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
LABEL_18:
    PB::TextFormatter::format(this, "velocityX", *(float *)(a1 + 36));
    if ((*(unsigned char *)(a1 + 44) & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_17:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  char v5 = *(unsigned char *)(a1 + 44);
  if ((v5 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_8:
  if ((v5 & 0x80) == 0) {
    goto LABEL_9;
  }
LABEL_19:
  PB::TextFormatter::format(this, "velocityY", *(float *)(a1 + 40));
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040D2D4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 44) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_50;
        case 2u:
          *(unsigned char *)(a1 + 44) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 3u:
          *(unsigned char *)(a1 + 44) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 4u:
          *(unsigned char *)(a1 + 44) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 5u:
          *(unsigned char *)(a1 + 44) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 6u:
          *(unsigned char *)(a1 + 44) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 7u:
          *(unsigned char *)(a1 + 44) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_49;
        case 8u:
          *(unsigned char *)(a1 + 44) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
          {
LABEL_47:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_49:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_50:
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19040D644(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 44);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 44);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(result + 44) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
LABEL_16:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
    if ((*(unsigned char *)(v3 + 44) & 8) == 0) {
      return result;
    }
    goto LABEL_17;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 44);
  if ((v4 & 4) != 0) {
    goto LABEL_16;
  }
LABEL_8:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_17:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19040D75C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFC3148;
  *(_DWORD *)(result + 60) = 0;
  return result;
}

void sub_19040D784(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040D7BC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 60);
  if (v5)
  {
    PB::TextFormatter::format(this, "fractionAboveThreshold", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 60);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 0x40) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "horizontalDistance", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x40) == 0)
  {
LABEL_4:
    if ((v5 & 0x80) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "isAboveBelow");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x80) == 0)
  {
LABEL_5:
    if ((v5 & 0x100) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "isAboveBelowMessageShowing");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x100) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "isConverged");
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "likelihoodAboveThreshold", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x10) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "relativeAltitude", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 60);
  if ((v5 & 0x10) == 0)
  {
LABEL_9:
    if ((v5 & 0x20) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
  if ((*(_WORD *)(a1 + 60) & 0x20) != 0) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "verticalDistance", *(double *)(a1 + 48));
LABEL_11:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040D920(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 60) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 2u:
          *(_WORD *)(a1 + 60) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 3u:
          *(_WORD *)(a1 + 60) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 4u:
          *(_WORD *)(a1 + 60) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 5u:
          *(_WORD *)(a1 + 60) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_43;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_55;
        case 6u:
          *(_WORD *)(a1 + 60) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_55:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_43:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        case 7u:
          *(_WORD *)(a1 + 60) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v24 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v24 = v23 != 0;
          }
          *(unsigned char *)(a1 + 58) = v24;
          break;
        case 8u:
          *(_WORD *)(a1 + 60) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *(unsigned char *)(a1 + 56) = v21;
          break;
        case 9u:
          *(_WORD *)(a1 + 60) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v26 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v26 = v25 != 0;
          }
          *(unsigned char *)(a1 + 57) = v26;
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19040DCE8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 60);
  if ((v4 & 0x10) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 40));
    __int16 v4 = *(_WORD *)(v3 + 60);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 1) == 0)
  {
LABEL_6:
    if ((v4 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 4) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 60) & 0x80) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 60);
  if ((v4 & 0x40) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 0x80) == 0) {
    return result;
  }
LABEL_19:

  return PB::Writer::write(this);
}

uint64_t sub_19040DE1C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF790;
  *(_DWORD *)(result + 80) = 0;
  return result;
}

void sub_19040DE44(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040DE7C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 80);
  if (v5)
  {
    PB::TextFormatter::format(this, "lastStateTimestamp", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 80);
    if ((v5 & 8) == 0)
    {
LABEL_3:
      if ((v5 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_22;
    }
  }
  else if ((v5 & 8) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "qStartW", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x10) == 0)
  {
LABEL_4:
    if ((v5 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "qStartX", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x20) == 0)
  {
LABEL_5:
    if ((v5 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "qStartY", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x40) == 0)
  {
LABEL_6:
    if ((v5 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "qStartZ", *(float *)(a1 + 44));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x80) == 0)
  {
LABEL_7:
    if ((v5 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "qStopW", *(float *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x100) == 0)
  {
LABEL_8:
    if ((v5 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "qStopX", *(float *)(a1 + 52));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x200) == 0)
  {
LABEL_9:
    if ((v5 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "qStopY", *(float *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x400) == 0)
  {
LABEL_10:
    if ((v5 & 0x800) == 0) {
      goto LABEL_11;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "qStopZ", *(float *)(a1 + 60));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x800) == 0)
  {
LABEL_11:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "rBoresightX", *(float *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x1000) == 0)
  {
LABEL_12:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "rBoresightY", *(float *)(a1 + 68));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 0x2000) == 0)
  {
LABEL_13:
    if ((v5 & 2) == 0) {
      goto LABEL_14;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "rBoresightZ", *(float *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 2) == 0)
  {
LABEL_14:
    if ((v5 & 4) == 0) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 80);
  if ((v5 & 4) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_33:
  PB::TextFormatter::format(this, "targetTimestamp", *(double *)(a1 + 24));
  if ((*(_WORD *)(a1 + 80) & 0x4000) != 0) {
LABEL_16:
  }
    PB::TextFormatter::format(this, "useForwardPrediction");
LABEL_17:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040E0A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 80) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_65;
        case 2u:
          *(_WORD *)(a1 + 80) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_65;
        case 3u:
          *(_WORD *)(a1 + 80) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 4u:
          *(_WORD *)(a1 + 80) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 5u:
          *(_WORD *)(a1 + 80) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 6u:
          *(_WORD *)(a1 + 80) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 7u:
          *(_WORD *)(a1 + 80) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 8u:
          *(_WORD *)(a1 + 80) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 9u:
          *(_WORD *)(a1 + 80) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 0xAu:
          *(_WORD *)(a1 + 80) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 0xBu:
          *(_WORD *)(a1 + 80) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 0xCu:
          *(_WORD *)(a1 + 80) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_72;
        case 0xDu:
          *(_WORD *)(a1 + 80) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_68;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
LABEL_72:
          unint64_t v2 = *((void *)this + 1) + 4;
          goto LABEL_73;
        case 0xEu:
          *(_WORD *)(a1 + 80) |= 0x4000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v22 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v22 = v21 != 0;
          }
          *(unsigned char *)(a1 + 76) = v22;
          break;
        case 0xFu:
          *(_WORD *)(a1 + 80) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_68:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_65:
            unint64_t v2 = *((void *)this + 1) + 8;
LABEL_73:
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19040E5C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 80);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    __int16 v4 = *(_WORD *)(v3 + 80);
    if ((v4 & 4) == 0)
    {
LABEL_3:
      if ((v4 & 0x10) == 0) {
        goto LABEL_4;
      }
      goto LABEL_19;
    }
  }
  else if ((v4 & 4) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x10) == 0)
  {
LABEL_4:
    if ((v4 & 0x20) == 0) {
      goto LABEL_5;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x20) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 8) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 0x200) == 0) {
      goto LABEL_9;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x200) == 0)
  {
LABEL_9:
    if ((v4 & 0x400) == 0) {
      goto LABEL_10;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x400) == 0)
  {
LABEL_10:
    if ((v4 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x80) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x1000) == 0)
  {
LABEL_13:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x2000) == 0)
  {
LABEL_14:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_15;
    }
LABEL_30:
    uint64_t result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 80) & 2) == 0) {
      return result;
    }
    goto LABEL_31;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 80);
  if ((v4 & 0x4000) != 0) {
    goto LABEL_30;
  }
LABEL_15:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_31:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19040E79C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD06E8;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_19040E7C4(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040E7FC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "pressure", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 24);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if ((*(unsigned char *)(a1 + 24) & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 20));
  if (*(unsigned char *)(a1 + 24)) {
LABEL_4:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_5:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040E8A0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 3) {
        break;
      }
      if (v20 == 2)
      {
        *(unsigned char *)(a1 + 24) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
          goto LABEL_32;
        }
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_36:
        unint64_t v2 = *((void *)this + 1) + 4;
        goto LABEL_37;
      }
      if (v20 != 1)
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
        goto LABEL_38;
      }
      *(unsigned char *)(a1 + 24) |= 1u;
      unint64_t v2 = *((void *)this + 1);
      if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
      {
LABEL_32:
        *((unsigned char *)this + 24) = 1;
        goto LABEL_38;
      }
      *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
      unint64_t v2 = *((void *)this + 1) + 8;
LABEL_37:
      *((void *)this + 1) = v2;
LABEL_38:
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    *(unsigned char *)(a1 + 24) |= 4u;
    unint64_t v2 = *((void *)this + 1);
    if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
      goto LABEL_32;
    }
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
    goto LABEL_36;
  }
  return v4 == 0;
}

uint64_t sub_19040EAC4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if ((v4 & 1) == 0)
  {
    if ((*(unsigned char *)(result + 24) & 2) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 24) & 4) == 0) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 2) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_7:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19040EB50(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD7A0;
  *(_DWORD *)(result + 32) = 0;
  return result;
}

void sub_19040EB78(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040EBB0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 32);
  if (v5)
  {
    PB::TextFormatter::format(this, "inertialX", *(float *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 32);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(a1 + 32) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "inertialY", *(float *)(a1 + 12));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  PB::TextFormatter::format(this, "inertialZ", *(float *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "maxTemp", *(float *)(a1 + 20));
  char v5 = *(unsigned char *)(a1 + 32);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_15:
  PB::TextFormatter::format(this, "medTocFactoryTemp", *(float *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 32) & 0x20) != 0) {
LABEL_7:
  }
    PB::TextFormatter::format(this, "medianToc", *(float *)(a1 + 28));
LABEL_8:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040ECB4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 32) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 2u:
          *(unsigned char *)(a1 + 32) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 3u:
          *(unsigned char *)(a1 + 32) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 4u:
          *(unsigned char *)(a1 + 32) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 5u:
          *(unsigned char *)(a1 + 32) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_41;
          }
          *(_DWORD *)(a1 + 12) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_43;
        case 6u:
          *(unsigned char *)(a1 + 32) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
LABEL_43:
            unint64_t v2 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_41:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19040EFA4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 32);
  if ((v4 & 0x20) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(float *)(result + 28));
    char v4 = *(unsigned char *)(v3 + 32);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if ((*(unsigned char *)(result + 32) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 8) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 1) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 12));
    if ((*(unsigned char *)(v3 + 32) & 4) == 0) {
      return result;
    }
    goto LABEL_13;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 32);
  if ((v4 & 2) != 0) {
    goto LABEL_12;
  }
LABEL_6:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_13:
  float v5 = *(float *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

void *sub_19040F084(void *result)
{
  *uint64_t result = &unk_1EDFCD7D8;
  result[1] = 0;
  return result;
}

void sub_19040F0A4(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCD7D8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_19040F124(PB::Base *a1)
{
  sub_19040F0A4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040F15C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040F1D8(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19040F3F0(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_19040F40C(uint64_t result)
{
  if (!*(void *)(result + 8)) {
    operator new();
  }
  return result;
}

void *sub_19040F4B8(void *result)
{
  *uint64_t result = &unk_1EDFCC9A0;
  result[1] = 0;
  return result;
}

void sub_19040F4D8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCC9A0;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_19040F558(PB::Base *a1)
{
  sub_19040F4D8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040F590(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040F60C(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19040F824(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_19040F840(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF058;
  *(void *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_19040F868(PB::Base *this)
{
  *(void *)this = &unk_1EDFCF058;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_19040F8EC(PB::Base *a1)
{
  sub_19040F868(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040F924(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 24)) {
    PB::TextFormatter::format(this, "iostime", *(double *)(a1 + 8));
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040F9BC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2) {
        operator new();
      }
      if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v20);
          *((void *)this + 1) += 8;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19040FC2C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF7C8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

uint64_t sub_19040FC50(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(unsigned char *)(result + 24)) {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
  }
  int v4 = *(const PB::Base **)(v3 + 16);
  if (v4)
  {
    return PB::Writer::writeSubmessage(this, v4);
  }
  return result;
}

void sub_19040FCBC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19040FCF4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "pressure", *(float *)(a1 + 16));
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19040FD70(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
        {
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 4;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              uint64_t v24 = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            uint64_t v24 = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              uint64_t v24 = 0;
              break;
            }
          }
        }
LABEL_47:
        *(void *)(a1 + 8) = v24;
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190410000(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    float v5 = *(float *)(v3 + 16);
    return PB::Writer::write(this, v5);
  }
  return result;
}

void *sub_19041006C(void *result)
{
  *uint64_t result = &unk_1EDFCB468;
  result[1] = 0;
  return result;
}

void sub_19041008C(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCB468;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_19041010C(PB::Base *a1)
{
  sub_19041008C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190410144(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1904101C0(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1904103D8(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

void *sub_1904103F4(void *result)
{
  *uint64_t result = &unk_1EDFCC9D8;
  result[1] = 0;
  return result;
}

void sub_190410414(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCC9D8;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_190410494(PB::Base *a1)
{
  sub_190410414(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1904104CC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "super");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190410548(int a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v7 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        unint64_t v11 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v12 = *(unsigned char *)(v7 + v2);
        v10 |= (unint64_t)(v12 & 0x7F) << v8;
        if ((v12 & 0x80) == 0) {
          break;
        }
        v8 += 7;
        unint64_t v2 = v11;
        if (v9++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v10 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v10 >> 3) == 1) {
        operator new();
      }
      uint64_t result = PB::Reader::skip(this);
      if (!result) {
        return result;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v14 = 0;
    unsigned int v15 = 0;
    unint64_t v10 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v16 = v2 + 1;
      char v17 = *(unsigned char *)(v7 + v2);
      *((void *)this + 1) = v16;
      v10 |= (unint64_t)(v17 & 0x7F) << v14;
      if ((v17 & 0x80) == 0) {
        goto LABEL_20;
      }
      v14 += 7;
      unint64_t v2 = v16;
      if (v15++ >= 9)
      {
LABEL_19:
        unint64_t v10 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190410760(uint64_t result, PB::Writer *this)
{
  unint64_t v2 = *(const PB::Base **)(result + 8);
  if (v2) {
    return PB::Writer::writeSubmessage(this, v2);
  }
  return result;
}

uint64_t sub_19041077C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCCA10;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1904107A8(PB::Base *this)
{
  *(void *)this = &unk_1EDFCCA10;
  uint64_t v2 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_19041083C(PB::Base *a1)
{
  sub_1904107A8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190410874(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(unsigned char *)(a1 + 48)) {
    PB::TextFormatter::format(this, "originalTimestamp", *(double *)(a1 + 32));
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "pose");
  }
  double v6 = *(double **)(a1 + 8);
  uint64_t v7 = *(double **)(a1 + 16);
  while (v6 != v7)
  {
    double v8 = *v6++;
    PB::TextFormatter::format(this, "velocity", v8);
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190410940(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    double v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        unint64_t v13 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v19 = v2 + 1;
          char v20 = *(unsigned char *)(v10 + v2);
          *((void *)this + 1) = v19;
          v13 |= (unint64_t)(v20 & 0x7F) << v17;
          if ((v20 & 0x80) == 0) {
            goto LABEL_21;
          }
          v17 += 7;
          unint64_t v2 = v19;
          if (v18++ >= 9)
          {
LABEL_20:
            unint64_t v13 = 0;
            goto LABEL_21;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        if (v12++ > 8) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v22 = v13 >> 3;
      if ((v13 >> 3) == 3) {
        break;
      }
      if (v22 == 2)
      {
        if ((v13 & 7) != 2)
        {
          unint64_t v39 = *(char **)(a1 + 16);
          unint64_t v38 = *(void *)(a1 + 24);
          if ((unint64_t)v39 >= v38)
          {
            unint64_t v41 = (char *)*v8;
            uint64_t v42 = (v39 - (unsigned char *)*v8) >> 3;
            unint64_t v43 = v42 + 1;
            if ((unint64_t)(v42 + 1) >> 61) {
LABEL_86:
            }
              sub_1903479E8();
            uint64_t v44 = v38 - (void)v41;
            if (v44 >> 2 > v43) {
              unint64_t v43 = v44 >> 2;
            }
            if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v45 = v43;
            }
            if (v45)
            {
              unint64_t v46 = (char *)sub_190347A00(v9, v45);
              unint64_t v41 = *(char **)(a1 + 8);
              unint64_t v39 = *(char **)(a1 + 16);
            }
            else
            {
              unint64_t v46 = 0;
            }
            char v47 = &v46[8 * v42];
            *(void *)char v47 = 0;
            unint64_t v40 = v47 + 8;
            while (v39 != v41)
            {
              uint64_t v48 = *((void *)v39 - 1);
              v39 -= 8;
              *((void *)v47 - 1) = v48;
              v47 -= 8;
            }
            *(void *)(a1 + 8) = v47;
            *(void *)(a1 + 16) = v40;
            *(void *)(a1 + 24) = &v46[8 * v45];
            if (v41) {
              operator delete(v41);
            }
          }
          else
          {
            *(void *)unint64_t v39 = 0;
            unint64_t v40 = v39 + 8;
          }
          *(void *)(a1 + 16) = v40;
          unint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFF7 || v49 + 8 > *((void *)this + 2))
          {
LABEL_75:
            *((unsigned char *)this + 24) = 1;
            goto LABEL_78;
          }
          *(v40 - 1) = *(void *)(*(void *)this + v49);
          goto LABEL_77;
        }
        if (PB::Reader::placeMark()) {
          return 0;
        }
        unint64_t v24 = *((void *)this + 1);
        unint64_t v25 = *((void *)this + 2);
        while (v24 < v25 && !*((unsigned char *)this + 24))
        {
          char v27 = *(char **)(a1 + 16);
          unint64_t v26 = *(void *)(a1 + 24);
          if ((unint64_t)v27 >= v26)
          {
            unint64_t v29 = (char *)*v8;
            uint64_t v30 = (v27 - (unsigned char *)*v8) >> 3;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61) {
              goto LABEL_86;
            }
            uint64_t v32 = v26 - (void)v29;
            if (v32 >> 2 > v31) {
              unint64_t v31 = v32 >> 2;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              char v34 = (char *)sub_190347A00(v9, v33);
              unint64_t v29 = *(char **)(a1 + 8);
              char v27 = *(char **)(a1 + 16);
            }
            else
            {
              char v34 = 0;
            }
            unint64_t v35 = &v34[8 * v30];
            *(void *)unint64_t v35 = 0;
            unsigned int v28 = v35 + 8;
            while (v27 != v29)
            {
              uint64_t v36 = *((void *)v27 - 1);
              v27 -= 8;
              *((void *)v35 - 1) = v36;
              v35 -= 8;
            }
            *(void *)(a1 + 8) = v35;
            *(void *)(a1 + 16) = v28;
            *(void *)(a1 + 24) = &v34[8 * v33];
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *(void *)char v27 = 0;
            unsigned int v28 = v27 + 8;
          }
          *(void *)(a1 + 16) = v28;
          unint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFF7 || v37 + 8 > *((void *)this + 2))
          {
            *((unsigned char *)this + 24) = 1;
            break;
          }
          *(v28 - 1) = *(void *)(*(void *)this + v37);
          unint64_t v25 = *((void *)this + 2);
          unint64_t v24 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v24;
        }
        PB::Reader::recallMark();
      }
      else
      {
        if (v22 == 1) {
          operator new();
        }
        if ((PB::Reader::skip(this) & 1) == 0) {
          return 0;
        }
      }
LABEL_78:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    *(unsigned char *)(a1 + 48) |= 1u;
    unint64_t v23 = *((void *)this + 1);
    if (v23 > 0xFFFFFFFFFFFFFFF7 || v23 + 8 > *((void *)this + 2)) {
      goto LABEL_75;
    }
    *(void *)(a1 + 32) = *(void *)(*(void *)this + v23);
LABEL_77:
    *((void *)this + 1) += 8;
    goto LABEL_78;
  }
  return v4 == 0;
}

uint64_t sub_190410DC0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 40);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  uint64_t v5 = *(double **)(v3 + 8);
  double v6 = *(double **)(v3 + 16);
  while (v5 != v6)
  {
    double v7 = *v5++;
    uint64_t result = PB::Writer::write(this, v7);
  }
  if (*(unsigned char *)(v3 + 48))
  {
    double v8 = *(double *)(v3 + 32);
    return PB::Writer::write(this, v8);
  }
  return result;
}

uint64_t sub_190410E54(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD02B8;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_190410E7C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190410EB4(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 20);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "detectionMask");
    char v5 = *(unsigned char *)(a1 + 20);
  }
  if (v5) {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190410F30(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 2u;
        unint64_t v20 = *((void *)this + 1);
        unint64_t v2 = *((void *)this + 2);
        uint64_t v21 = *(void *)this;
        if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
        {
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v24 = 0;
          if (v2 <= v20) {
            unint64_t v2 = *((void *)this + 1);
          }
          while (1)
          {
            if (v2 == v20)
            {
              LODWORD(v24) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_47;
            }
            unint64_t v29 = v20++;
            char v30 = *(unsigned char *)(v21 + v29);
            *((void *)this + 1) = v20;
            v24 |= (unint64_t)(v30 & 0x7F) << v27;
            if ((v30 & 0x80) == 0) {
              break;
            }
            v27 += 7;
            BOOL v14 = v28++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              goto LABEL_46;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v24) = 0;
          }
LABEL_46:
          unint64_t v2 = v29 + 1;
        }
        else
        {
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          while (1)
          {
            unint64_t v2 = v20 + 1;
            *((void *)this + 1) = v20 + 1;
            char v25 = *(unsigned char *)(v21 + v20);
            v24 |= (unint64_t)(v25 & 0x7F) << v22;
            if ((v25 & 0x80) == 0) {
              break;
            }
            v22 += 7;
            unint64_t v20 = v2;
            BOOL v14 = v23++ > 8;
            if (v14)
            {
              LODWORD(v24) = 0;
              break;
            }
          }
        }
LABEL_47:
        *(_DWORD *)(a1 + 16) = v24;
      }
      else if ((v11 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v2 = *((void *)this + 1);
        if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          *((void *)this + 1) = v2;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
        unint64_t v2 = *((void *)this + 1);
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1904111C0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 20);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 20);
  }
  if ((v4 & 2) != 0)
  {
    return PB::Writer::writeVarInt(this);
  }
  return result;
}

uint64_t sub_19041122C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF090;
  *(_DWORD *)(result + 88) = 0;
  return result;
}

void sub_190411254(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19041128C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "baselineError", *(float *)(a1 + 16));
    int v5 = *(_DWORD *)(a1 + 88);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "covariancePostMeasurement00", *(float *)(a1 + 20));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "covariancePostMeasurement01", *(float *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "covariancePostMeasurement11", *(float *)(a1 + 28));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "covariancePreMeasurement00", *(float *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "covariancePreMeasurement01", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "covariancePreMeasurement11", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "estimate", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "factoryXTalk", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "gain", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x800) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "intensity", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x1000) == 0)
  {
LABEL_13:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "measurement", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x40000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "possibleObstructed");
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "proxBufferMax", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x4000) == 0)
  {
LABEL_16:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "proxBufferVariance", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x8000) == 0)
  {
LABEL_17:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "sensitivityCal", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x10000) == 0)
  {
LABEL_18:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "temperature", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 88);
  if ((v5 & 0x20000) == 0)
  {
LABEL_19:
    if ((v5 & 1) == 0) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_41:
  PB::TextFormatter::format(this, "temperatureCalError", *(float *)(a1 + 80));
  if (*(_DWORD *)(a1 + 88)) {
LABEL_20:
  }
    PB::TextFormatter::format(this, "timestamp");
LABEL_21:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190411530(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 88) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_104;
                  }
                  unint64_t v31 = v20++;
                  char v32 = *(unsigned char *)(v21 + v31);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_103;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_103:
                unint64_t v2 = v31 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_104;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_104:
              *(void *)(a1 + 8) = v24;
              goto LABEL_95;
            case 2u:
              *(_DWORD *)(a1 + 88) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 3u:
              *(_DWORD *)(a1 + 88) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 4u:
              *(_DWORD *)(a1 + 88) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 5u:
              *(_DWORD *)(a1 + 88) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 6u:
              *(_DWORD *)(a1 + 88) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 7u:
              *(_DWORD *)(a1 + 88) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 8u:
              *(_DWORD *)(a1 + 88) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 84) = v28;
              goto LABEL_95;
            case 9u:
              *(_DWORD *)(a1 + 88) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xAu:
              *(_DWORD *)(a1 + 88) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xBu:
              *(_DWORD *)(a1 + 88) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xCu:
              *(_DWORD *)(a1 + 88) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xDu:
              *(_DWORD *)(a1 + 88) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xEu:
              *(_DWORD *)(a1 + 88) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0xFu:
              *(_DWORD *)(a1 + 88) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0x10u:
              *(_DWORD *)(a1 + 88) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0x11u:
              *(_DWORD *)(a1 + 88) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0x12u:
              *(_DWORD *)(a1 + 88) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_83;
              }
              *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_94;
            case 0x13u:
              *(_DWORD *)(a1 + 88) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
LABEL_94:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_83:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_95;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
LABEL_95:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190411BEC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 88);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    int v4 = *(_DWORD *)(v3 + 88);
    if ((v4 & 0x100) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_23;
    }
  }
  else if ((v4 & 0x100) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x1000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20000) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40000) == 0)
  {
LABEL_9:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x4000) == 0)
  {
LABEL_10:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x2000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x20) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x80) == 0) {
      goto LABEL_15;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x80) == 0)
  {
LABEL_15:
    if ((v4 & 4) == 0) {
      goto LABEL_16;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 4) == 0)
  {
LABEL_16:
    if ((v4 & 8) == 0) {
      goto LABEL_17;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 8) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_19;
    }
LABEL_38:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
    if ((*(_DWORD *)(v3 + 88) & 0x200) == 0) {
      return result;
    }
    goto LABEL_39;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  int v4 = *(_DWORD *)(v3 + 88);
  if ((v4 & 0x8000) != 0) {
    goto LABEL_38;
  }
LABEL_19:
  if ((v4 & 0x200) == 0) {
    return result;
  }
LABEL_39:
  float v5 = *(float *)(v3 + 48);

  return PB::Writer::write(this, v5);
}

double sub_190411E38(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCC508;
  *(_DWORD *)(a1 + 72) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_190411E6C(PB::Base *this)
{
  *(void *)this = &unk_1EDFCC508;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_190411EE0(PB::Base *a1)
{
  sub_190411E6C(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190411F18(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 72);
  if (v5)
  {
    PB::TextFormatter::format(this, "bC150RXAVE", *(float *)(a1 + 56));
    char v5 = *(unsigned char *)(a1 + 72);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "gC0RXAVE", *(float *)(a1 + 60));
  }
  double v6 = *(float **)(a1 + 8);
  double v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "ntcRamp", v8);
  }
  char v9 = *(float **)(a1 + 32);
  unsigned int v10 = *(float **)(a1 + 40);
  while (v9 != v10)
  {
    float v11 = *v9++;
    PB::TextFormatter::format(this, "rxXT", v11);
  }
  char v12 = *(unsigned char *)(a1 + 72);
  if ((v12 & 4) != 0)
  {
    PB::TextFormatter::format(this, "versionPxCL");
    char v12 = *(unsigned char *)(a1 + 72);
  }
  if ((v12 & 8) != 0) {
    PB::TextFormatter::format(this, "versionPxTC");
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190412034(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 32);
    uint64_t v9 = a1 + 48;
    unsigned int v10 = (void **)(a1 + 8);
    uint64_t v11 = a1 + 24;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 72) |= 2u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)this + 2)) {
            goto LABEL_153;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v25);
          goto LABEL_155;
        case 2u:
          *(unsigned char *)(a1 + 72) |= 1u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_153;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_155;
        case 3u:
          *(unsigned char *)(a1 + 72) |= 4u;
          unint64_t v27 = *((void *)this + 1);
          unint64_t v28 = *((void *)this + 2);
          uint64_t v29 = *(void *)this;
          if (v27 <= 0xFFFFFFFFFFFFFFF5 && v27 + 10 <= v28)
          {
            char v30 = 0;
            unsigned int v31 = 0;
            uint64_t v32 = 0;
            do
            {
              unint64_t v33 = v27 + 1;
              *((void *)this + 1) = v27 + 1;
              char v34 = *(unsigned char *)(v29 + v27);
              v32 |= (unint64_t)(v34 & 0x7F) << v30;
              if ((v34 & 0x80) == 0) {
                goto LABEL_133;
              }
              v30 += 7;
              unint64_t v27 = v33;
              BOOL v18 = v31++ > 8;
            }
            while (!v18);
LABEL_99:
            LODWORD(v32) = 0;
            goto LABEL_133;
          }
          char v71 = 0;
          unsigned int v72 = 0;
          uint64_t v32 = 0;
          if (v28 <= v27) {
            unint64_t v28 = *((void *)this + 1);
          }
          while (2)
          {
            if (v28 == v27)
            {
              LODWORD(v32) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v73 = v27 + 1;
              char v74 = *(unsigned char *)(v29 + v27);
              *((void *)this + 1) = v73;
              v32 |= (unint64_t)(v74 & 0x7F) << v71;
              if (v74 < 0)
              {
                v71 += 7;
                unint64_t v27 = v73;
                BOOL v18 = v72++ > 8;
                if (v18) {
                  goto LABEL_99;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v32) = 0;
              }
            }
            break;
          }
LABEL_133:
          *(_DWORD *)(a1 + 64) = v32;
          goto LABEL_156;
        case 4u:
          *(unsigned char *)(a1 + 72) |= 8u;
          unint64_t v35 = *((void *)this + 1);
          unint64_t v36 = *((void *)this + 2);
          uint64_t v37 = *(void *)this;
          if (v35 <= 0xFFFFFFFFFFFFFFF5 && v35 + 10 <= v36)
          {
            char v38 = 0;
            unsigned int v39 = 0;
            uint64_t v40 = 0;
            do
            {
              unint64_t v41 = v35 + 1;
              *((void *)this + 1) = v35 + 1;
              char v42 = *(unsigned char *)(v37 + v35);
              v40 |= (unint64_t)(v42 & 0x7F) << v38;
              if ((v42 & 0x80) == 0) {
                goto LABEL_136;
              }
              v38 += 7;
              unint64_t v35 = v41;
              BOOL v18 = v39++ > 8;
            }
            while (!v18);
LABEL_106:
            LODWORD(v40) = 0;
            goto LABEL_136;
          }
          char v75 = 0;
          unsigned int v76 = 0;
          uint64_t v40 = 0;
          if (v36 <= v35) {
            unint64_t v36 = *((void *)this + 1);
          }
          while (2)
          {
            if (v36 == v35)
            {
              LODWORD(v40) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v77 = v35 + 1;
              char v78 = *(unsigned char *)(v37 + v35);
              *((void *)this + 1) = v77;
              v40 |= (unint64_t)(v78 & 0x7F) << v75;
              if (v78 < 0)
              {
                v75 += 7;
                unint64_t v35 = v77;
                BOOL v18 = v76++ > 8;
                if (v18) {
                  goto LABEL_106;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v40) = 0;
              }
            }
            break;
          }
LABEL_136:
          *(_DWORD *)(a1 + 68) = v40;
          goto LABEL_156;
        case 5u:
          if (v24 != 2)
          {
            uint64_t v80 = *(char **)(a1 + 16);
            unint64_t v79 = *(void *)(a1 + 24);
            if ((unint64_t)v80 >= v79)
            {
              uint64_t v84 = (char *)*v10;
              uint64_t v85 = (v80 - (unsigned char *)*v10) >> 2;
              unint64_t v86 = v85 + 1;
              if ((unint64_t)(v85 + 1) >> 62) {
LABEL_166:
              }
                sub_1903479E8();
              uint64_t v87 = v79 - (void)v84;
              if (v87 >> 1 > v86) {
                unint64_t v86 = v87 >> 1;
              }
              if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v88 = v86;
              }
              if (v88)
              {
                unint64_t v89 = (char *)sub_190347D04(v11, v88);
                uint64_t v84 = *(char **)(a1 + 8);
                uint64_t v80 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v89 = 0;
              }
              unint64_t v96 = &v89[4 * v85];
              *(_DWORD *)unint64_t v96 = 0;
              unint64_t v81 = v96 + 4;
              while (v80 != v84)
              {
                int v97 = *((_DWORD *)v80 - 1);
                v80 -= 4;
                *((_DWORD *)v96 - 1) = v97;
                v96 -= 4;
              }
              *(void *)(a1 + 8) = v96;
              *(void *)(a1 + 16) = v81;
              *(void *)(a1 + 24) = &v89[4 * v88];
              if (v84) {
                operator delete(v84);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v80 = 0;
              unint64_t v81 = v80 + 4;
            }
            *(void *)(a1 + 16) = v81;
            goto LABEL_151;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v43 = *((void *)this + 1);
          unint64_t v44 = *((void *)this + 2);
          while (v43 < v44 && !*((unsigned char *)this + 24))
          {
            unint64_t v46 = *(char **)(a1 + 16);
            unint64_t v45 = *(void *)(a1 + 24);
            if ((unint64_t)v46 >= v45)
            {
              uint64_t v48 = (char *)*v10;
              uint64_t v49 = (v46 - (unsigned char *)*v10) >> 2;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                goto LABEL_166;
              }
              uint64_t v51 = v45 - (void)v48;
              if (v51 >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                uint64_t v53 = (char *)sub_190347D04(v11, v52);
                uint64_t v48 = *(char **)(a1 + 8);
                unint64_t v46 = *(char **)(a1 + 16);
              }
              else
              {
                uint64_t v53 = 0;
              }
              uint64_t v54 = &v53[4 * v49];
              *(_DWORD *)uint64_t v54 = 0;
              char v47 = v54 + 4;
              while (v46 != v48)
              {
                int v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              *(void *)(a1 + 8) = v54;
              *(void *)(a1 + 16) = v47;
              *(void *)(a1 + 24) = &v53[4 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v46 = 0;
              char v47 = v46 + 4;
            }
            *(void *)(a1 + 16) = v47;
            unint64_t v56 = *((void *)this + 1);
            if (v56 > 0xFFFFFFFFFFFFFFFBLL || v56 + 4 > *((void *)this + 2)) {
              goto LABEL_111;
            }
            *(v47 - 1) = *(_DWORD *)(*(void *)this + v56);
            unint64_t v44 = *((void *)this + 2);
            unint64_t v43 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v43;
          }
          goto LABEL_112;
        case 6u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v57 = *((void *)this + 1);
            unint64_t v58 = *((void *)this + 2);
            while (v57 < v58 && !*((unsigned char *)this + 24))
            {
              uint64_t v60 = *(char **)(a1 + 40);
              unint64_t v59 = *(void *)(a1 + 48);
              if ((unint64_t)v60 >= v59)
              {
                unint64_t v62 = (char *)*v8;
                uint64_t v63 = (v60 - (unsigned char *)*v8) >> 2;
                unint64_t v64 = v63 + 1;
                if ((unint64_t)(v63 + 1) >> 62) {
                  goto LABEL_167;
                }
                uint64_t v65 = v59 - (void)v62;
                if (v65 >> 1 > v64) {
                  unint64_t v64 = v65 >> 1;
                }
                if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v66 = v64;
                }
                if (v66)
                {
                  unint64_t v67 = (char *)sub_190347D04(v9, v66);
                  unint64_t v62 = *(char **)(a1 + 32);
                  uint64_t v60 = *(char **)(a1 + 40);
                }
                else
                {
                  unint64_t v67 = 0;
                }
                char v68 = &v67[4 * v63];
                *(_DWORD *)char v68 = 0;
                unint64_t v61 = v68 + 4;
                while (v60 != v62)
                {
                  int v69 = *((_DWORD *)v60 - 1);
                  v60 -= 4;
                  *((_DWORD *)v68 - 1) = v69;
                  v68 -= 4;
                }
                *(void *)(a1 + 32) = v68;
                *(void *)(a1 + 40) = v61;
                *(void *)(a1 + 48) = &v67[4 * v66];
                if (v62) {
                  operator delete(v62);
                }
              }
              else
              {
                *(_DWORD *)uint64_t v60 = 0;
                unint64_t v61 = v60 + 4;
              }
              *(void *)(a1 + 40) = v61;
              unint64_t v70 = *((void *)this + 1);
              if (v70 > 0xFFFFFFFFFFFFFFFBLL || v70 + 4 > *((void *)this + 2))
              {
LABEL_111:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v61 - 1) = *(_DWORD *)(*(void *)this + v70);
              unint64_t v58 = *((void *)this + 2);
              unint64_t v57 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v57;
            }
LABEL_112:
            PB::Reader::recallMark();
          }
          else
          {
            unint64_t v83 = *(char **)(a1 + 40);
            unint64_t v82 = *(void *)(a1 + 48);
            if ((unint64_t)v83 >= v82)
            {
              unint64_t v90 = (char *)*v8;
              uint64_t v91 = (v83 - (unsigned char *)*v8) >> 2;
              unint64_t v92 = v91 + 1;
              if ((unint64_t)(v91 + 1) >> 62) {
LABEL_167:
              }
                sub_1903479E8();
              uint64_t v93 = v82 - (void)v90;
              if (v93 >> 1 > v92) {
                unint64_t v92 = v93 >> 1;
              }
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v94 = v92;
              }
              if (v94)
              {
                unsigned int v95 = (char *)sub_190347D04(v9, v94);
                unint64_t v90 = *(char **)(a1 + 32);
                unint64_t v83 = *(char **)(a1 + 40);
              }
              else
              {
                unsigned int v95 = 0;
              }
              char v98 = &v95[4 * v91];
              *(_DWORD *)char v98 = 0;
              unint64_t v81 = v98 + 4;
              while (v83 != v90)
              {
                int v99 = *((_DWORD *)v83 - 1);
                v83 -= 4;
                *((_DWORD *)v98 - 1) = v99;
                v98 -= 4;
              }
              *(void *)(a1 + 32) = v98;
              *(void *)(a1 + 40) = v81;
              *(void *)(a1 + 48) = &v95[4 * v94];
              if (v90) {
                operator delete(v90);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v83 = 0;
              unint64_t v81 = v83 + 4;
            }
            *(void *)(a1 + 40) = v81;
LABEL_151:
            unint64_t v100 = *((void *)this + 1);
            if (v100 <= 0xFFFFFFFFFFFFFFFBLL && v100 + 4 <= *((void *)this + 2))
            {
              *(v81 - 1) = *(_DWORD *)(*(void *)this + v100);
LABEL_155:
              *((void *)this + 1) += 4;
            }
            else
            {
LABEL_153:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_156:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_156;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1904127D4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 72);
  if ((v4 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(float *)(result + 60));
    char v4 = *(unsigned char *)(v3 + 72);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_15:
      double result = PB::Writer::writeVarInt(this);
      if ((*(unsigned char *)(v3 + 72) & 8) == 0) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else if ((*(unsigned char *)(result + 72) & 1) == 0)
  {
    goto LABEL_3;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 56));
  char v4 = *(unsigned char *)(v3 + 72);
  if ((v4 & 4) != 0) {
    goto LABEL_15;
  }
LABEL_4:
  if ((v4 & 8) != 0) {
LABEL_5:
  }
    double result = PB::Writer::writeVarInt(this);
LABEL_6:
  char v5 = *(float **)(v3 + 8);
  double v6 = *(float **)(v3 + 16);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  uint64_t v9 = *(float **)(v3 + 32);
  float v8 = *(float **)(v3 + 40);
  while (v9 != v8)
  {
    float v10 = *v9++;
    double result = PB::Writer::write(this, v10);
  }
  return result;
}

uint64_t sub_1904128B0(uint64_t result)
{
  *(void *)double result = &unk_1EDFD0528;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_1904128D8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190412910(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "ambient", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "baselineConfidence", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "intensity", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "intensityBaselineDelta", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "intensityCalDelta", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "pocketFlag");
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "pocketProbability", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "rxNtcC", *(float *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_23:
  PB::TextFormatter::format(this, "scanFlags");
  if (*(_WORD *)(a1 + 48)) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "timestamp");
LABEL_12:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190412A94(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_WORD *)(a1 + 48) |= 1u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v31 = 0;
                unsigned int v32 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v20)
                  {
                    uint64_t v24 = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_73;
                  }
                  unint64_t v33 = v20++;
                  char v34 = *(unsigned char *)(v21 + v33);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v34 & 0x7F) << v31;
                  if ((v34 & 0x80) == 0) {
                    break;
                  }
                  v31 += 7;
                  BOOL v14 = v32++ > 8;
                  if (v14)
                  {
                    uint64_t v24 = 0;
                    goto LABEL_72;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  uint64_t v24 = 0;
                }
LABEL_72:
                unint64_t v2 = v33 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v2 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_73;
                  }
                  v22 += 7;
                  unint64_t v20 = v2;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                uint64_t v24 = 0;
              }
LABEL_73:
              *(void *)(a1 + 8) = v24;
              goto LABEL_74;
            case 2u:
              *(_WORD *)(a1 + 48) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 3u:
              *(_WORD *)(a1 + 48) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 4u:
              *(_WORD *)(a1 + 48) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 5u:
              *(_WORD *)(a1 + 48) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 6u:
              *(_WORD *)(a1 + 48) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 7u:
              *(_WORD *)(a1 + 48) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
                goto LABEL_51;
              }
              *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
              goto LABEL_68;
            case 8u:
              *(_WORD *)(a1 + 48) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
              {
                *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
LABEL_68:
                unint64_t v2 = *((void *)this + 1) + 4;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_51:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_74;
            case 9u:
              *(_WORD *)(a1 + 48) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 45) = v28;
              goto LABEL_74;
            case 0xAu:
              *(_WORD *)(a1 + 48) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 44) = v30;
              goto LABEL_74;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
LABEL_74:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190412F40(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 48);
  if (v4)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((v4 & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x20) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 4) == 0)
  {
LABEL_8:
    if ((v4 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
LABEL_20:
    uint64_t result = PB::Writer::write(this);
    if ((*(_WORD *)(v3 + 48) & 0x100) == 0) {
      return result;
    }
    goto LABEL_21;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x200) != 0) {
    goto LABEL_20;
  }
LABEL_10:
  if ((v4 & 0x100) == 0) {
    return result;
  }
LABEL_21:

  return PB::Writer::write(this);
}

void *sub_190413090(void *result)
{
  *uint64_t result = &unk_1EDFD0720;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

void sub_1904130B4(PB::Base *this)
{
  *(void *)this = &unk_1EDFD0720;
  unint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  PB::Base::~Base(this);
}

void sub_190413118(PB::Base *a1)
{
  sub_1904130B4(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190413150(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  while (v5 != v6)
  {
    v5 += 4;
    PB::TextFormatter::format(this, "volts");
  }

  return MEMORY[0x1F4147498](this);
}

BOOL sub_1904131C8(void *a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    uint64_t v8 = (void **)(a1 + 1);
    char v9 = a1 + 3;
    while (1)
    {
      uint64_t v10 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        unint64_t v14 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v15 = *(unsigned char *)(v10 + v2);
        v13 |= (unint64_t)(v15 & 0x7F) << v11;
        if ((v15 & 0x80) == 0) {
          break;
        }
        v11 += 7;
        unint64_t v2 = v14;
        BOOL v34 = v12++ > 8;
        if (v34) {
          goto LABEL_20;
        }
      }
LABEL_21:
      if ((v13 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v13 >> 3) == 1)
      {
        if ((v13 & 7) == 2)
        {
          if (PB::Reader::placeMark()) {
            return 0;
          }
          if (*((void *)this + 1) < *((void *)this + 2) && !*((unsigned char *)this + 24))
          {
            uint64_t v21 = (char *)a1[2];
            do
            {
              if ((unint64_t)v21 >= *v9)
              {
                char v22 = (char *)*v8;
                uint64_t v23 = (v21 - (unsigned char *)*v8) >> 2;
                unint64_t v24 = v23 + 1;
                if ((unint64_t)(v23 + 1) >> 62) {
                  goto LABEL_118;
                }
                uint64_t v25 = *v9 - (void)v22;
                if (v25 >> 1 > v24) {
                  unint64_t v24 = v25 >> 1;
                }
                if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v26 = v24;
                }
                if (v26)
                {
                  int v27 = (char *)sub_190347D04((uint64_t)v9, v26);
                  char v22 = (char *)a1[1];
                  uint64_t v21 = (char *)a1[2];
                }
                else
                {
                  int v27 = 0;
                }
                BOOL v28 = &v27[4 * v23];
                *(_DWORD *)BOOL v28 = 0;
                int v29 = v28 + 4;
                while (v21 != v22)
                {
                  int v30 = *((_DWORD *)v21 - 1);
                  v21 -= 4;
                  *((_DWORD *)v28 - 1) = v30;
                  v28 -= 4;
                }
                a1[1] = v28;
                a1[2] = v29;
                a1[3] = &v27[4 * v26];
                if (v22) {
                  operator delete(v22);
                }
                uint64_t v21 = v29;
              }
              else
              {
                *(_DWORD *)uint64_t v21 = 0;
                v21 += 4;
              }
              a1[2] = v21;
              unint64_t v32 = *((void *)this + 1);
              unint64_t v31 = *((void *)this + 2);
              uint64_t v33 = *(void *)this;
              BOOL v34 = v32 > 0xFFFFFFFFFFFFFFF5 || v32 + 10 > v31;
              if (!v34)
              {
                char v40 = 0;
                unsigned int v41 = 0;
                uint64_t v42 = 0;
                while (1)
                {
                  unint64_t v43 = v32 + 1;
                  *((void *)this + 1) = v32 + 1;
                  char v44 = *(unsigned char *)(v33 + v32);
                  v42 |= (unint64_t)(v44 & 0x7F) << v40;
                  if ((v44 & 0x80) == 0) {
                    goto LABEL_65;
                  }
                  v40 += 7;
                  unint64_t v32 = v43;
                  BOOL v34 = v41++ > 8;
                  if (v34)
                  {
                    LODWORD(v42) = 0;
                    goto LABEL_65;
                  }
                }
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v42 = 0;
              if (v31 <= v32) {
                uint64_t v37 = *((void *)this + 1);
              }
              else {
                uint64_t v37 = *((void *)this + 2);
              }
              while (1)
              {
                if (v37 == v32)
                {
                  *((unsigned char *)this + 24) = 1;
                  *((_DWORD *)v21 - 1) = 0;
                  goto LABEL_81;
                }
                unint64_t v38 = v32++;
                char v39 = *(unsigned char *)(v33 + v38);
                *((void *)this + 1) = v32;
                v42 |= (unint64_t)(v39 & 0x7F) << v35;
                if ((v39 & 0x80) == 0) {
                  break;
                }
                v35 += 7;
                BOOL v34 = v36++ > 8;
                if (v34)
                {
                  LODWORD(v42) = 0;
                  goto LABEL_64;
                }
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v42) = 0;
              }
LABEL_64:
              unint64_t v43 = v38 + 1;
LABEL_65:
              *((_DWORD *)v21 - 1) = v42;
            }
            while (v43 < v31 && !*((unsigned char *)this + 24));
          }
LABEL_81:
          PB::Reader::recallMark();
        }
        else
        {
          unint64_t v46 = (char *)a1[2];
          unint64_t v45 = a1[3];
          if ((unint64_t)v46 >= v45)
          {
            uint64_t v48 = (char *)*v8;
            uint64_t v49 = (v46 - (unsigned char *)*v8) >> 2;
            unint64_t v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 62) {
LABEL_118:
            }
              sub_1903479E8();
            uint64_t v51 = v45 - (void)v48;
            if (v51 >> 1 > v50) {
              unint64_t v50 = v51 >> 1;
            }
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v52 = v50;
            }
            if (v52)
            {
              uint64_t v53 = (char *)sub_190347D04((uint64_t)v9, v52);
              uint64_t v48 = (char *)a1[1];
              unint64_t v46 = (char *)a1[2];
            }
            else
            {
              uint64_t v53 = 0;
            }
            uint64_t v54 = &v53[4 * v49];
            *(_DWORD *)uint64_t v54 = 0;
            char v47 = v54 + 4;
            while (v46 != v48)
            {
              int v55 = *((_DWORD *)v46 - 1);
              v46 -= 4;
              *((_DWORD *)v54 - 1) = v55;
              v54 -= 4;
            }
            a1[1] = v54;
            a1[2] = v47;
            a1[3] = &v53[4 * v52];
            if (v48) {
              operator delete(v48);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v46 = 0;
            char v47 = v46 + 4;
          }
          a1[2] = v47;
          unint64_t v56 = *((void *)this + 1);
          unint64_t v57 = *((void *)this + 2);
          uint64_t v58 = *(void *)this;
          char v59 = 0;
          unsigned int v60 = 0;
          if (v56 > 0xFFFFFFFFFFFFFFF5 || v56 + 10 > v57)
          {
            uint64_t v64 = 0;
            if (v57 <= v56) {
              unint64_t v57 = *((void *)this + 1);
            }
            while (1)
            {
              if (v57 == v56)
              {
                LODWORD(v64) = 0;
                *((unsigned char *)this + 24) = 1;
                goto LABEL_107;
              }
              unint64_t v62 = v56 + 1;
              char v63 = *(unsigned char *)(v58 + v56);
              *((void *)this + 1) = v62;
              v64 |= (unint64_t)(v63 & 0x7F) << v59;
              if ((v63 & 0x80) == 0) {
                break;
              }
              v59 += 7;
              unint64_t v56 = v62;
              BOOL v34 = v60++ > 8;
              if (v34)
              {
LABEL_103:
                LODWORD(v64) = 0;
                goto LABEL_107;
              }
            }
            if (*((unsigned char *)this + 24)) {
              LODWORD(v64) = 0;
            }
          }
          else
          {
            uint64_t v64 = 0;
            while (1)
            {
              unint64_t v65 = v56 + 1;
              *((void *)this + 1) = v56 + 1;
              char v66 = *(unsigned char *)(v58 + v56);
              v64 |= (unint64_t)(v66 & 0x7F) << v59;
              if ((v66 & 0x80) == 0) {
                break;
              }
              v59 += 7;
              unint64_t v56 = v65;
              BOOL v34 = v60++ > 8;
              if (v34) {
                goto LABEL_103;
              }
            }
          }
LABEL_107:
          *(v47 - 1) = v64;
        }
      }
      else if ((PB::Reader::skip(this) & 1) == 0)
      {
        return 0;
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v16 = 0;
    unsigned int v17 = 0;
    unint64_t v13 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v18 = v2 + 1;
      char v19 = *(unsigned char *)(v10 + v2);
      *((void *)this + 1) = v18;
      v13 |= (unint64_t)(v19 & 0x7F) << v16;
      if ((v19 & 0x80) == 0) {
        goto LABEL_21;
      }
      v16 += 7;
      unint64_t v2 = v18;
      if (v17++ >= 9)
      {
LABEL_20:
        unint64_t v13 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190413678(uint64_t result, PB::Writer *this)
{
  uint64_t v2 = *(void *)(result + 8);
  for (i = *(void *)(result + 16); v2 != i; uint64_t result = PB::Writer::writeVarInt(this))
    v2 += 4;
  return result;
}

uint64_t sub_1904136C4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD810;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_1904136E8(PB::Base *this)
{
  *(void *)this = &unk_1EDFCD810;
  uint64_t v4 = *((void *)this + 1);
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_1903478E8((uint64_t)v2, v3);
  }

  PB::Base::~Base(this);
}

void sub_19041374C(PB::Base *a1)
{
  sub_1904136E8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190413784(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format();
  }
  if (*(unsigned char *)(a1 + 24)) {
    PB::TextFormatter::format(this, "value", *(double *)(a1 + 16));
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1904137FC(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *((void *)this + 2))
        {
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v20);
          *((void *)this + 1) += 8;
        }
        else
        {
          *((unsigned char *)this + 24) = 1;
        }
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190413A04(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(void *)(result + 8)) {
    uint64_t result = PB::Writer::write();
  }
  if (*(unsigned char *)(v3 + 24))
  {
    double v4 = *(double *)(v3 + 16);
    return PB::Writer::write(this, v4);
  }
  return result;
}

void *sub_190413A6C(void *result)
{
  *uint64_t result = &unk_1EDFCFEC8;
  *(void *)((char *)result + 188) = 0;
  return result;
}

void sub_190413A94(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190413ACC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "auxHorizontalRotation", *(float *)(a1 + 16));
    uint64_t v5 = *(void *)(a1 + 188);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_57;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "auxHorizontalTranslation", *(float *)(a1 + 20));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "auxOmegaInertial_X", *(float *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "auxOmegaInertial_Y", *(float *)(a1 + 28));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "auxOmegaInertial_Z", *(float *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_7:
    if ((v5 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "auxUserAccelInertial_X", *(float *)(a1 + 36));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_8:
    if ((v5 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "auxUserAccelInertial_Y", *(float *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_9:
    if ((v5 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "auxUserAccelInertial_Z", *(float *)(a1 + 44));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_10:
    if ((v5 & 0x400) == 0) {
      goto LABEL_11;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "auxVerticalRotation", *(float *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_11:
    if ((v5 & 0x40000000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "auxVerticalTranslation", *(float *)(a1 + 52));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x40000000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "blockHeadTurnFalsePositive");
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "bodyTurnDetectionVerticalRotationSrc", *(float *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "bodyTurnMaximaBaseline", *(float *)(a1 + 60));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_15:
    if ((v5 & 0x80000000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "counterBodyTurnAboveBaseline");
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x80000000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "hasRecentHeadTurn");
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "horizontalRotationSimilarity", *(float *)(a1 + 68));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "horizontalRotationSimilarityBaseline", *(float *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "horizontalRotationSimilarityThreshold", *(float *)(a1 + 76));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_74;
  }
LABEL_73:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarity", *(float *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_75;
  }
LABEL_74:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarityBaseline", *(float *)(a1 + 84));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_76;
  }
LABEL_75:
  PB::TextFormatter::format(this, "horizontalTranslationSimilarityThreshold", *(float *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x100000000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_77;
  }
LABEL_76:
  PB::TextFormatter::format(this, "inBodyTurn");
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x200000000000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_78;
  }
LABEL_77:
  PB::TextFormatter::format(this, "inComplexTransitionState");
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x400000000000) == 0)
  {
LABEL_25:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_79;
  }
LABEL_78:
  PB::TextFormatter::format(this, "inStrongBodyTurn");
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_26:
    if ((v5 & 0x800000000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_80;
  }
LABEL_79:
  PB::TextFormatter::format(this, "longBodyTurnCounter");
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x800000000000) == 0)
  {
LABEL_27:
    if ((v5 & 0x1000000000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_81;
  }
LABEL_80:
  PB::TextFormatter::format(this, "longBodyTurnState");
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x1000000000000) == 0)
  {
LABEL_28:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_82;
  }
LABEL_81:
  PB::TextFormatter::format(this, "overrideHeadTurn");
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_29:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_83;
  }
LABEL_82:
  PB::TextFormatter::format(this, "srcHorizontalRotation", *(float *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_30:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_84;
  }
LABEL_83:
  PB::TextFormatter::format(this, "srcHorizontalTranslation", *(float *)(a1 + 100));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_31:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_85;
  }
LABEL_84:
  PB::TextFormatter::format(this, "srcOmegaInertial_X", *(float *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_32:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_86;
  }
LABEL_85:
  PB::TextFormatter::format(this, "srcOmegaInertial_Y", *(float *)(a1 + 108));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_33:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_87;
  }
LABEL_86:
  PB::TextFormatter::format(this, "srcOmegaInertial_Z", *(float *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_88;
  }
LABEL_87:
  PB::TextFormatter::format(this, "srcUserAccelInertial_X", *(float *)(a1 + 116));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_89;
  }
LABEL_88:
  PB::TextFormatter::format(this, "srcUserAccelInertial_Y", *(float *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_36:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_90;
  }
LABEL_89:
  PB::TextFormatter::format(this, "srcUserAccelInertial_Z", *(float *)(a1 + 124));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_37:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_91;
  }
LABEL_90:
  PB::TextFormatter::format(this, "srcVertToHrzRotRatio", *(float *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_38:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_92;
  }
LABEL_91:
  PB::TextFormatter::format(this, "srcVerticalRotation", *(float *)(a1 + 132));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_39:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_93;
  }
LABEL_92:
  PB::TextFormatter::format(this, "srcVerticalTranslation", *(float *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_40:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_94;
  }
LABEL_93:
  PB::TextFormatter::format(this, "srcYawRotationExtremaBuffer", *(float *)(a1 + 140));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_41:
    if ((v5 & 1) == 0) {
      goto LABEL_42;
    }
    goto LABEL_95;
  }
LABEL_94:
  PB::TextFormatter::format(this, "srcYawRotationMaximaBaseline", *(float *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 1) == 0)
  {
LABEL_42:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_96;
  }
LABEL_95:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_43:
    if ((v5 & 0x800000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_97;
  }
LABEL_96:
  PB::TextFormatter::format(this, "verticalRotationSimilarity", *(float *)(a1 + 148));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x800000000) == 0)
  {
LABEL_44:
    if ((v5 & 0x1000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_98;
  }
LABEL_97:
  PB::TextFormatter::format(this, "verticalRotationSimilarityBaseline", *(float *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x1000000000) == 0)
  {
LABEL_45:
    if ((v5 & 0x2000000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_99;
  }
LABEL_98:
  PB::TextFormatter::format(this, "verticalRotationSimilarityThreshold", *(float *)(a1 + 156));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x2000000000) == 0)
  {
LABEL_46:
    if ((v5 & 0x4000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_100;
  }
LABEL_99:
  PB::TextFormatter::format(this, "verticalTranslationSimilarity", *(float *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x4000000000) == 0)
  {
LABEL_47:
    if ((v5 & 0x8000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_101;
  }
LABEL_100:
  PB::TextFormatter::format(this, "verticalTranslationSimilarityBaseline", *(float *)(a1 + 164));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x8000000000) == 0)
  {
LABEL_48:
    if ((v5 & 0x10000000000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_102;
  }
LABEL_101:
  PB::TextFormatter::format(this, "verticalTranslationSimilarityThreshold", *(float *)(a1 + 168));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x10000000000) == 0)
  {
LABEL_49:
    if ((v5 & 0x20000000000) == 0) {
      goto LABEL_50;
    }
    goto LABEL_103;
  }
LABEL_102:
  PB::TextFormatter::format(this, "yawRateSimilarity1000ms", *(float *)(a1 + 172));
  uint64_t v5 = *(void *)(a1 + 188);
  if ((v5 & 0x20000000000) == 0)
  {
LABEL_50:
    if ((v5 & 0x2000000000000) == 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }
LABEL_103:
  PB::TextFormatter::format(this, "yawRateSimilarity200ms", *(float *)(a1 + 176));
  if ((*(void *)(a1 + 188) & 0x2000000000000) != 0) {
LABEL_51:
  }
    PB::TextFormatter::format(this, "yawRateSimilarityState");
LABEL_52:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190414150(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(void *)(a1 + 188) |= 1uLL;
          unint64_t v20 = *((void *)this + 1);
          if (v20 > 0xFFFFFFFFFFFFFFF7 || v20 + 8 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v20);
          uint64_t v21 = *((void *)this + 1) + 8;
          goto LABEL_206;
        case 2u:
          *(void *)(a1 + 188) |= 0x800000uLL;
          unint64_t v23 = *((void *)this + 1);
          if (v23 > 0xFFFFFFFFFFFFFFFBLL || v23 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v23);
          goto LABEL_205;
        case 3u:
          *(void *)(a1 + 188) |= 0x1000000uLL;
          unint64_t v24 = *((void *)this + 1);
          if (v24 > 0xFFFFFFFFFFFFFFFBLL || v24 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v24);
          goto LABEL_205;
        case 4u:
          *(void *)(a1 + 188) |= 0x2000000uLL;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFFBLL || v25 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v25);
          goto LABEL_205;
        case 5u:
          *(void *)(a1 + 188) |= 8uLL;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_205;
        case 6u:
          *(void *)(a1 + 188) |= 0x10uLL;
          unint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v27);
          goto LABEL_205;
        case 7u:
          *(void *)(a1 + 188) |= 0x20uLL;
          unint64_t v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v28);
          goto LABEL_205;
        case 8u:
          *(void *)(a1 + 188) |= 0x40000000uLL;
          unint64_t v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 132) = *(_DWORD *)(*(void *)this + v29);
          goto LABEL_205;
        case 9u:
          *(void *)(a1 + 188) |= 0x200uLL;
          unint64_t v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v30);
          goto LABEL_205;
        case 0xAu:
          *(void *)(a1 + 188) |= 0x200000uLL;
          unint64_t v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_205;
        case 0xBu:
          *(void *)(a1 + 188) |= 2uLL;
          unint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v32);
          goto LABEL_205;
        case 0xCu:
          *(void *)(a1 + 188) |= 0x4000000uLL;
          unint64_t v33 = *((void *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v33);
          goto LABEL_205;
        case 0xDu:
          *(void *)(a1 + 188) |= 0x8000000uLL;
          unint64_t v34 = *((void *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v34);
          goto LABEL_205;
        case 0xEu:
          *(void *)(a1 + 188) |= 0x10000000uLL;
          unint64_t v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v35);
          goto LABEL_205;
        case 0xFu:
          *(void *)(a1 + 188) |= 0x40uLL;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_205;
        case 0x10u:
          *(void *)(a1 + 188) |= 0x80uLL;
          unint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v37);
          goto LABEL_205;
        case 0x11u:
          *(void *)(a1 + 188) |= 0x100uLL;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_205;
        case 0x12u:
          *(void *)(a1 + 188) |= 0x80000000uLL;
          unint64_t v39 = *((void *)this + 1);
          if (v39 > 0xFFFFFFFFFFFFFFFBLL || v39 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 136) = *(_DWORD *)(*(void *)this + v39);
          goto LABEL_205;
        case 0x13u:
          *(void *)(a1 + 188) |= 0x400uLL;
          unint64_t v40 = *((void *)this + 1);
          if (v40 > 0xFFFFFFFFFFFFFFFBLL || v40 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v40);
          goto LABEL_205;
        case 0x14u:
          *(void *)(a1 + 188) |= 0x400000uLL;
          unint64_t v41 = *((void *)this + 1);
          if (v41 > 0xFFFFFFFFFFFFFFFBLL || v41 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v41);
          goto LABEL_205;
        case 0x15u:
          *(void *)(a1 + 188) |= 4uLL;
          unint64_t v42 = *((void *)this + 1);
          if (v42 > 0xFFFFFFFFFFFFFFFBLL || v42 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v42);
          goto LABEL_205;
        case 0x16u:
          *(void *)(a1 + 188) |= 0x400000000uLL;
          unint64_t v43 = *((void *)this + 1);
          if (v43 > 0xFFFFFFFFFFFFFFFBLL || v43 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v43);
          goto LABEL_205;
        case 0x17u:
          *(void *)(a1 + 188) |= 0x4000uLL;
          unint64_t v44 = *((void *)this + 1);
          if (v44 > 0xFFFFFFFFFFFFFFFBLL || v44 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v44);
          goto LABEL_205;
        case 0x18u:
          *(void *)(a1 + 188) |= 0x2000000000uLL;
          unint64_t v45 = *((void *)this + 1);
          if (v45 > 0xFFFFFFFFFFFFFFFBLL || v45 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 160) = *(_DWORD *)(*(void *)this + v45);
          goto LABEL_205;
        case 0x19u:
          *(void *)(a1 + 188) |= 0x20000uLL;
          unint64_t v46 = *((void *)this + 1);
          if (v46 > 0xFFFFFFFFFFFFFFFBLL || v46 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v46);
          goto LABEL_205;
        case 0x1Au:
          *(void *)(a1 + 188) |= 0x800000000uLL;
          unint64_t v47 = *((void *)this + 1);
          if (v47 > 0xFFFFFFFFFFFFFFFBLL || v47 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 152) = *(_DWORD *)(*(void *)this + v47);
          goto LABEL_205;
        case 0x1Bu:
          *(void *)(a1 + 188) |= 0x8000uLL;
          unint64_t v48 = *((void *)this + 1);
          if (v48 > 0xFFFFFFFFFFFFFFFBLL || v48 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v48);
          goto LABEL_205;
        case 0x1Cu:
          *(void *)(a1 + 188) |= 0x4000000000uLL;
          unint64_t v49 = *((void *)this + 1);
          if (v49 > 0xFFFFFFFFFFFFFFFBLL || v49 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 164) = *(_DWORD *)(*(void *)this + v49);
          goto LABEL_205;
        case 0x1Du:
          *(void *)(a1 + 188) |= 0x40000uLL;
          unint64_t v50 = *((void *)this + 1);
          if (v50 > 0xFFFFFFFFFFFFFFFBLL || v50 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v50);
          goto LABEL_205;
        case 0x1Eu:
          *(void *)(a1 + 188) |= 0x1000000000uLL;
          unint64_t v51 = *((void *)this + 1);
          if (v51 > 0xFFFFFFFFFFFFFFFBLL || v51 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 156) = *(_DWORD *)(*(void *)this + v51);
          goto LABEL_205;
        case 0x1Fu:
          *(void *)(a1 + 188) |= 0x10000uLL;
          unint64_t v52 = *((void *)this + 1);
          if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v52);
          goto LABEL_205;
        case 0x20u:
          *(void *)(a1 + 188) |= 0x8000000000uLL;
          unint64_t v53 = *((void *)this + 1);
          if (v53 > 0xFFFFFFFFFFFFFFFBLL || v53 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 168) = *(_DWORD *)(*(void *)this + v53);
          goto LABEL_205;
        case 0x21u:
          *(void *)(a1 + 188) |= 0x80000uLL;
          unint64_t v54 = *((void *)this + 1);
          if (v54 > 0xFFFFFFFFFFFFFFFBLL || v54 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v54);
          goto LABEL_205;
        case 0x22u:
          *(void *)(a1 + 188) |= 0x200000000000uLL;
          unint64_t v55 = *((void *)this + 1);
          if (v55 >= *((void *)this + 2))
          {
            BOOL v58 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v56 = v55 + 1;
            int v57 = *(unsigned __int8 *)(*(void *)this + v55);
            *((void *)this + 1) = v56;
            BOOL v58 = v57 != 0;
          }
          *(unsigned char *)(a1 + 183) = v58;
          goto LABEL_207;
        case 0x23u:
          *(void *)(a1 + 188) |= 0x800uLL;
          unint64_t v59 = *((void *)this + 1);
          if (v59 > 0xFFFFFFFFFFFFFFFBLL || v59 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v59);
          goto LABEL_205;
        case 0x24u:
          *(void *)(a1 + 188) |= 0x1000uLL;
          unint64_t v60 = *((void *)this + 1);
          if (v60 > 0xFFFFFFFFFFFFFFFBLL || v60 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v60);
          goto LABEL_205;
        case 0x25u:
          *(void *)(a1 + 188) |= 0x100000000000uLL;
          unint64_t v61 = *((void *)this + 1);
          if (v61 >= *((void *)this + 2))
          {
            BOOL v64 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v62 = v61 + 1;
            int v63 = *(unsigned __int8 *)(*(void *)this + v61);
            *((void *)this + 1) = v62;
            BOOL v64 = v63 != 0;
          }
          *(unsigned char *)(a1 + 182) = v64;
          goto LABEL_207;
        case 0x26u:
          *(void *)(a1 + 188) |= 0x400000000000uLL;
          unint64_t v65 = *((void *)this + 1);
          if (v65 >= *((void *)this + 2))
          {
            BOOL v68 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v66 = v65 + 1;
            int v67 = *(unsigned __int8 *)(*(void *)this + v65);
            *((void *)this + 1) = v66;
            BOOL v68 = v67 != 0;
          }
          *(unsigned char *)(a1 + 184) = v68;
          goto LABEL_207;
        case 0x27u:
          *(void *)(a1 + 188) |= 0x2000uLL;
          unint64_t v69 = *((void *)this + 1);
          unint64_t v70 = *((void *)this + 2);
          uint64_t v71 = *(void *)this;
          if (v69 <= 0xFFFFFFFFFFFFFFF5 && v69 + 10 <= v70)
          {
            char v72 = 0;
            unsigned int v73 = 0;
            uint64_t v74 = 0;
            do
            {
              unint64_t v75 = v69 + 1;
              *((void *)this + 1) = v69 + 1;
              char v76 = *(unsigned char *)(v71 + v69);
              v74 |= (unint64_t)(v76 & 0x7F) << v72;
              if ((v76 & 0x80) == 0) {
                goto LABEL_219;
              }
              v72 += 7;
              unint64_t v69 = v75;
              BOOL v14 = v73++ > 8;
            }
            while (!v14);
LABEL_186:
            LODWORD(v74) = 0;
            goto LABEL_219;
          }
          char v110 = 0;
          unsigned int v111 = 0;
          uint64_t v74 = 0;
          if (v70 <= v69) {
            unint64_t v70 = *((void *)this + 1);
          }
          while (2)
          {
            if (v70 == v69)
            {
              LODWORD(v74) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v112 = v69 + 1;
              char v113 = *(unsigned char *)(v71 + v69);
              *((void *)this + 1) = v112;
              v74 |= (unint64_t)(v113 & 0x7F) << v110;
              if (v113 < 0)
              {
                v110 += 7;
                unint64_t v69 = v112;
                BOOL v14 = v111++ > 8;
                if (v14) {
                  goto LABEL_186;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v74) = 0;
              }
            }
            break;
          }
LABEL_219:
          *(_DWORD *)(a1 + 64) = v74;
          goto LABEL_207;
        case 0x28u:
          *(void *)(a1 + 188) |= 0x100000000uLL;
          unint64_t v77 = *((void *)this + 1);
          if (v77 > 0xFFFFFFFFFFFFFFFBLL || v77 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v77);
          goto LABEL_205;
        case 0x29u:
          *(void *)(a1 + 188) |= 0x200000000uLL;
          unint64_t v78 = *((void *)this + 1);
          if (v78 > 0xFFFFFFFFFFFFFFFBLL || v78 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v78);
          goto LABEL_205;
        case 0x2Au:
          *(void *)(a1 + 188) |= 0x1000000000000uLL;
          unint64_t v79 = *((void *)this + 1);
          if (v79 >= *((void *)this + 2))
          {
            BOOL v82 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v80 = v79 + 1;
            int v81 = *(unsigned __int8 *)(*(void *)this + v79);
            *((void *)this + 1) = v80;
            BOOL v82 = v81 != 0;
          }
          *(unsigned char *)(a1 + 186) = v82;
          goto LABEL_207;
        case 0x2Bu:
          *(void *)(a1 + 188) |= 0x80000000000uLL;
          unint64_t v83 = *((void *)this + 1);
          if (v83 >= *((void *)this + 2))
          {
            BOOL v86 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v84 = v83 + 1;
            int v85 = *(unsigned __int8 *)(*(void *)this + v83);
            *((void *)this + 1) = v84;
            BOOL v86 = v85 != 0;
          }
          *(unsigned char *)(a1 + 181) = v86;
          goto LABEL_207;
        case 0x2Cu:
          *(void *)(a1 + 188) |= 0x40000000000uLL;
          unint64_t v87 = *((void *)this + 1);
          if (v87 >= *((void *)this + 2))
          {
            BOOL v90 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v88 = v87 + 1;
            int v89 = *(unsigned __int8 *)(*(void *)this + v87);
            *((void *)this + 1) = v88;
            BOOL v90 = v89 != 0;
          }
          *(unsigned char *)(a1 + 180) = v90;
          goto LABEL_207;
        case 0x2Du:
          *(void *)(a1 + 188) |= 0x20000000uLL;
          unint64_t v91 = *((void *)this + 1);
          if (v91 > 0xFFFFFFFFFFFFFFFBLL || v91 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v91);
          goto LABEL_205;
        case 0x2Eu:
          *(void *)(a1 + 188) |= 0x20000000000uLL;
          unint64_t v92 = *((void *)this + 1);
          if (v92 > 0xFFFFFFFFFFFFFFFBLL || v92 + 4 > *((void *)this + 2)) {
            goto LABEL_162;
          }
          *(_DWORD *)(a1 + 176) = *(_DWORD *)(*(void *)this + v92);
          goto LABEL_205;
        case 0x2Fu:
          *(void *)(a1 + 188) |= 0x10000000000uLL;
          unint64_t v93 = *((void *)this + 1);
          if (v93 <= 0xFFFFFFFFFFFFFFFBLL && v93 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 172) = *(_DWORD *)(*(void *)this + v93);
LABEL_205:
            uint64_t v21 = *((void *)this + 1) + 4;
LABEL_206:
            *((void *)this + 1) = v21;
          }
          else
          {
LABEL_162:
            *((unsigned char *)this + 24) = 1;
          }
          goto LABEL_207;
        case 0x30u:
          *(void *)(a1 + 188) |= 0x100000uLL;
          unint64_t v94 = *((void *)this + 1);
          unint64_t v95 = *((void *)this + 2);
          uint64_t v96 = *(void *)this;
          if (v94 <= 0xFFFFFFFFFFFFFFF5 && v94 + 10 <= v95)
          {
            char v97 = 0;
            unsigned int v98 = 0;
            uint64_t v99 = 0;
            do
            {
              unint64_t v100 = v94 + 1;
              *((void *)this + 1) = v94 + 1;
              char v101 = *(unsigned char *)(v96 + v94);
              v99 |= (unint64_t)(v101 & 0x7F) << v97;
              if ((v101 & 0x80) == 0) {
                goto LABEL_216;
              }
              v97 += 7;
              unint64_t v94 = v100;
              BOOL v14 = v98++ > 8;
            }
            while (!v14);
LABEL_199:
            LODWORD(v99) = 0;
            goto LABEL_216;
          }
          char v114 = 0;
          unsigned int v115 = 0;
          uint64_t v99 = 0;
          if (v95 <= v94) {
            unint64_t v95 = *((void *)this + 1);
          }
          break;
        case 0x31u:
          *(void *)(a1 + 188) |= 0x800000000000uLL;
          unint64_t v102 = *((void *)this + 1);
          if (v102 >= *((void *)this + 2))
          {
            BOOL v105 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v103 = v102 + 1;
            int v104 = *(unsigned __int8 *)(*(void *)this + v102);
            *((void *)this + 1) = v103;
            BOOL v105 = v104 != 0;
          }
          *(unsigned char *)(a1 + 185) = v105;
          goto LABEL_207;
        case 0x32u:
          *(void *)(a1 + 188) |= 0x2000000000000uLL;
          unint64_t v106 = *((void *)this + 1);
          if (v106 >= *((void *)this + 2))
          {
            BOOL v109 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v107 = v106 + 1;
            int v108 = *(unsigned __int8 *)(*(void *)this + v106);
            *((void *)this + 1) = v107;
            BOOL v109 = v108 != 0;
          }
          *(unsigned char *)(a1 + 187) = v109;
          goto LABEL_207;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          goto LABEL_207;
      }
      while (1)
      {
        if (v95 == v94)
        {
          LODWORD(v99) = 0;
          *((unsigned char *)this + 24) = 1;
          goto LABEL_216;
        }
        unint64_t v116 = v94 + 1;
        char v117 = *(unsigned char *)(v96 + v94);
        *((void *)this + 1) = v116;
        v99 |= (unint64_t)(v117 & 0x7F) << v114;
        if ((v117 & 0x80) == 0) {
          break;
        }
        v114 += 7;
        unint64_t v94 = v116;
        BOOL v14 = v115++ > 8;
        if (v14) {
          goto LABEL_199;
        }
      }
      if (*((unsigned char *)this + 24)) {
        LODWORD(v99) = 0;
      }
LABEL_216:
      *(_DWORD *)(a1 + 92) = v99;
LABEL_207:
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19041506C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 188);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    uint64_t v4 = *(void *)(v3 + 188);
    if ((v4 & 0x800000) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_54;
    }
  }
  else if ((v4 & 0x800000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_5:
    if ((v4 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_6:
    if ((v4 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_7:
    if ((v4 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_8:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x200) == 0) {
      goto LABEL_10;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 132));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_12:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_13:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 120));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40) == 0) {
      goto LABEL_16;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 124));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_16:
    if ((v4 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_19:
    if ((v4 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_70;
  }
LABEL_69:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_71;
  }
LABEL_70:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 4) == 0) {
      goto LABEL_22;
    }
    goto LABEL_72;
  }
LABEL_71:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_22:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_73;
  }
LABEL_72:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_23:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_74;
  }
LABEL_73:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 148));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_24:
    if ((v4 & 0x2000000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_75;
  }
LABEL_74:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_76;
  }
LABEL_75:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 160));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_26:
    if ((v4 & 0x800000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_77;
  }
LABEL_76:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_78;
  }
LABEL_77:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 152));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_28:
    if ((v4 & 0x4000000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_79;
  }
LABEL_78:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x4000000000) == 0)
  {
LABEL_29:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_80;
  }
LABEL_79:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 164));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_81;
  }
LABEL_80:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_82;
  }
LABEL_81:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 156));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_32:
    if ((v4 & 0x8000000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_83;
  }
LABEL_82:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x8000000000) == 0)
  {
LABEL_33:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_84;
  }
LABEL_83:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 168));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_85;
  }
LABEL_84:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000000000) == 0)
  {
LABEL_35:
    if ((v4 & 0x800) == 0) {
      goto LABEL_36;
    }
    goto LABEL_86;
  }
LABEL_85:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800) == 0)
  {
LABEL_36:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_87;
  }
LABEL_86:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_37:
    if ((v4 & 0x100000000000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_88;
  }
LABEL_87:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000000000) == 0)
  {
LABEL_38:
    if ((v4 & 0x400000000000) == 0) {
      goto LABEL_39;
    }
    goto LABEL_89;
  }
LABEL_88:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x400000000000) == 0)
  {
LABEL_39:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_90;
  }
LABEL_89:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_40:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_41;
    }
    goto LABEL_91;
  }
LABEL_90:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_41:
    if ((v4 & 0x200000000) == 0) {
      goto LABEL_42;
    }
    goto LABEL_92;
  }
LABEL_91:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 140));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_42:
    if ((v4 & 0x1000000000000) == 0) {
      goto LABEL_43;
    }
    goto LABEL_93;
  }
LABEL_92:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 144));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x1000000000000) == 0)
  {
LABEL_43:
    if ((v4 & 0x80000000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_94;
  }
LABEL_93:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x80000000000) == 0)
  {
LABEL_44:
    if ((v4 & 0x40000000000) == 0) {
      goto LABEL_45;
    }
    goto LABEL_95;
  }
LABEL_94:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x40000000000) == 0)
  {
LABEL_45:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_46;
    }
    goto LABEL_96;
  }
LABEL_95:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_46:
    if ((v4 & 0x20000000000) == 0) {
      goto LABEL_47;
    }
    goto LABEL_97;
  }
LABEL_96:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x20000000000) == 0)
  {
LABEL_47:
    if ((v4 & 0x10000000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_98;
  }
LABEL_97:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 176));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x10000000000) == 0)
  {
LABEL_48:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_49;
    }
    goto LABEL_99;
  }
LABEL_98:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 172));
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_49:
    if ((v4 & 0x800000000000) == 0) {
      goto LABEL_50;
    }
LABEL_100:
    uint64_t result = PB::Writer::write(this);
    if ((*(void *)(v3 + 188) & 0x2000000000000) == 0) {
      return result;
    }
    goto LABEL_101;
  }
LABEL_99:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 188);
  if ((v4 & 0x800000000000) != 0) {
    goto LABEL_100;
  }
LABEL_50:
  if ((v4 & 0x2000000000000) == 0) {
    return result;
  }
LABEL_101:

  return PB::Writer::write(this);
}

uint64_t sub_19041561C(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCFE20;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_190415644(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19041567C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "auxAvgOmegaAroundGrav2s", *(float *)(a1 + 32));
    int v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x10) == 0)
    {
LABEL_3:
      if ((v5 & 0x20) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((v5 & 0x10) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "auxAvgOmegaAroundGravLong", *(float *)(a1 + 36));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20) == 0)
  {
LABEL_4:
    if ((v5 & 0x40) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "auxAvgOmegaAroundGravShort", *(float *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if ((v5 & 0x80) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "auxAvgOmegaLong", *(float *)(a1 + 44));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "auxAvgOmegaShort", *(float *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x200) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "auxHistoricalOmegaStdMax", *(float *)(a1 + 52));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_8:
    if ((v5 & 0x400) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "auxOverSrcYawDiffSum", *(float *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) == 0)
  {
LABEL_9:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "dotRotGrav", *(float *)(a1 + 60));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "hasUnCorrelatedSrcMotion");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_11:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "inHeadTurnState");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "inLikelySlowBodyTurnPed");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x20000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "isInCorrelatedActivity");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000000) == 0)
  {
LABEL_14:
    if ((v5 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "isInCorrelatedMotion");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_15:
    if ((v5 & 2) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "lastHeadTurnStartTime", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_16:
    if ((v5 & 0x800) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "lastHeadTurnStopTime", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800) == 0)
  {
LABEL_17:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "lastHeadTurnYawRadians", *(float *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_18:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "likelyOnGymMachine");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) == 0)
  {
LABEL_19:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "relOmegaMeanLong", *(float *)(a1 + 68));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x2000) == 0)
  {
LABEL_20:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "relOmegaVarLong", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_21:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "relOmegaVarShort", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_22:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "srcAccumulatedYaw4s", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_23:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGrav2s", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_24:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGravLong", *(float *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_25:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "srcAvgOmegaAroundGravShort", *(float *)(a1 + 92));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_26:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "srcAvgOmegaLong", *(float *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_27:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "srcAvgOmegaShort", *(float *)(a1 + 100));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_28:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "srcAvgYawBufferSum", *(float *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400000) == 0)
  {
LABEL_29:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "srcHistoricalOmegaStdMax", *(float *)(a1 + 108));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x800000) == 0)
  {
LABEL_30:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "srcRotationAxisAlignment", *(float *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "srcYawBufferLongStd", *(float *)(a1 + 116));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v5 & 4) == 0) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
LABEL_67:
  PB::TextFormatter::format(this, "steadyStatePedestrian");
  if ((*(_DWORD *)(a1 + 128) & 4) != 0) {
LABEL_33:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 24));
LABEL_34:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190415AC0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 128) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_102;
        case 2u:
          *(_DWORD *)(a1 + 128) |= 0x100000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 3u:
          *(_DWORD *)(a1 + 128) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 4u:
          *(_DWORD *)(a1 + 128) |= 0x80000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 5u:
          *(_DWORD *)(a1 + 128) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 44) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 6u:
          *(_DWORD *)(a1 + 128) |= 0x4000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 7u:
          *(_DWORD *)(a1 + 128) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 8u:
          *(_DWORD *)(a1 + 128) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 9u:
          *(_DWORD *)(a1 + 128) |= 0x800000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0xAu:
          *(_DWORD *)(a1 + 128) |= 0x20000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v22 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v22 = v21 != 0;
          }
          *(unsigned char *)(a1 + 124) = v22;
          break;
        case 0xBu:
          *(_DWORD *)(a1 + 128) |= 0x2000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v24 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v24 = v23 != 0;
          }
          *(unsigned char *)(a1 + 120) = v24;
          break;
        case 0xCu:
          *(_DWORD *)(a1 + 128) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 60) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0xDu:
          *(_DWORD *)(a1 + 128) |= 0x10000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v26 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v26 = v25 != 0;
          }
          *(unsigned char *)(a1 + 123) = v26;
          break;
        case 0xEu:
          *(_DWORD *)(a1 + 128) |= 0x40000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v28 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v28 = v27 != 0;
          }
          *(unsigned char *)(a1 + 125) = v28;
          break;
        case 0xFu:
          *(_DWORD *)(a1 + 128) |= 0x40000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x10u:
          *(_DWORD *)(a1 + 128) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x11u:
          *(_DWORD *)(a1 + 128) |= 0x20000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 88) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x12u:
          *(_DWORD *)(a1 + 128) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x13u:
          *(_DWORD *)(a1 + 128) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 52) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x14u:
          *(_DWORD *)(a1 + 128) |= 0x400000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x15u:
          *(_DWORD *)(a1 + 128) |= 0x80000000;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v30 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v30 = v29 != 0;
          }
          *(unsigned char *)(a1 + 126) = v30;
          break;
        case 0x16u:
          *(_DWORD *)(a1 + 128) |= 0x10000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x17u:
          *(_DWORD *)(a1 + 128) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x18u:
          *(_DWORD *)(a1 + 128) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x19u:
          *(_DWORD *)(a1 + 128) |= 0x200000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x1Au:
          *(_DWORD *)(a1 + 128) |= 0x4000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v32 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v31 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v32 = v31 != 0;
          }
          *(unsigned char *)(a1 + 121) = v32;
          break;
        case 0x1Bu:
          *(_DWORD *)(a1 + 128) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 64) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x1Cu:
          *(_DWORD *)(a1 + 128) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_102;
        case 0x1Du:
          *(_DWORD *)(a1 + 128) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_102:
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_130;
        case 0x1Eu:
          *(_DWORD *)(a1 + 128) |= 0x1000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_113;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_129;
        case 0x1Fu:
          *(_DWORD *)(a1 + 128) |= 0x8000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2))
          {
LABEL_113:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v2);
LABEL_129:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_130:
            *((void *)this + 1) = v2;
          }
          break;
        case 0x20u:
          *(_DWORD *)(a1 + 128) |= 0x8000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v34 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v33 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v34 = v33 != 0;
          }
          *(unsigned char *)(a1 + 122) = v34;
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190416438(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 128);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x100000) == 0)
    {
LABEL_3:
      if ((v4 & 0x80) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((v4 & 0x100000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_4:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 44));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 68));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_12:
    if ((v4 & 0x400) == 0) {
      goto LABEL_13;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_13:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 60));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_14:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) == 0)
  {
LABEL_16:
    if ((v4 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 92));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20) == 0)
  {
LABEL_17:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_18:
    if ((v4 & 0x10) == 0) {
      goto LABEL_19;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 52));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_22:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_23:
    if ((v4 & 8) == 0) {
      goto LABEL_24;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_24:
    if ((v4 & 0x200) == 0) {
      goto LABEL_25;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_25:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_26:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_28:
    if ((v4 & 1) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_29:
    if ((v4 & 2) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_30:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_31:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_32;
    }
LABEL_64:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 80));
    if ((*(_DWORD *)(v3 + 128) & 0x8000000) == 0) {
      return result;
    }
    goto LABEL_65;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 116));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) != 0) {
    goto LABEL_64;
  }
LABEL_32:
  if ((v4 & 0x8000000) == 0) {
    return result;
  }
LABEL_65:

  return PB::Writer::write(this);
}

double sub_1904167F0(uint64_t a1)
{
  *(void *)a1 = &unk_1EDFCF608;
  *(_DWORD *)(a1 + 164) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

void sub_190416824(PB::Base *this)
{
  *(void *)this = &unk_1EDFCF608;
  unint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }

  PB::Base::~Base(this);
}

void sub_190416898(PB::Base *a1)
{
  sub_190416824(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1904168D0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x400000) != 0)
  {
    PB::TextFormatter::format(this, "btz");
    int v5 = *(_DWORD *)(a1 + 164);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_45;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "btzDisturbanceDuration", *(float *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "btzIsCurrentlyQuiescent");
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "btzQuiescentDurationLoose", *(float *)(a1 + 76));
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "btzQuiescentDurationStrict", *(float *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "btzStaticPoseDuration", *(float *)(a1 + 84));
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "centeredBoresight");
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "centeredBoresightInHighDynamics");
  int v5 = *(_DWORD *)(a1 + 164);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
LABEL_51:
  PB::TextFormatter::format(this, "clientMode");
  if ((*(_DWORD *)(a1 + 164) & 0x4000000) != 0) {
LABEL_11:
  }
    PB::TextFormatter::format(this, "inComplexTransitionState");
LABEL_12:
  uint64_t v6 = *(float **)(a1 + 8);
  float v7 = *(float **)(a1 + 16);
  while (v6 != v7)
  {
    float v8 = *v6++;
    PB::TextFormatter::format(this, "noiseVariance", v8);
  }
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x8000000) != 0)
  {
    PB::TextFormatter::format(this, "pinnedBoresight");
    int v9 = *(_DWORD *)(a1 + 164);
    if ((v9 & 0x80) == 0)
    {
LABEL_16:
      if ((v9 & 0x100) == 0) {
        goto LABEL_17;
      }
      goto LABEL_55;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
    goto LABEL_16;
  }
  PB::TextFormatter::format(this, "qHat_W", *(float *)(a1 + 92));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x100) == 0)
  {
LABEL_17:
    if ((v9 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "qHat_X", *(float *)(a1 + 96));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x200) == 0)
  {
LABEL_18:
    if ((v9 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "qHat_Y", *(float *)(a1 + 100));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x400) == 0)
  {
LABEL_19:
    if ((v9 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "qHat_Z", *(float *)(a1 + 104));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x800) == 0)
  {
LABEL_20:
    if ((v9 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "rBoresight_X", *(float *)(a1 + 108));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x1000) == 0)
  {
LABEL_21:
    if ((v9 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "rBoresight_Y", *(float *)(a1 + 112));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x2000) == 0)
  {
LABEL_22:
    if ((v9 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "rBoresight_Z", *(float *)(a1 + 116));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x4000) == 0)
  {
LABEL_23:
    if ((v9 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "rHat_X", *(float *)(a1 + 120));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x8000) == 0)
  {
LABEL_24:
    if ((v9 & 0x10000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "rHat_Y", *(float *)(a1 + 124));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x10000) == 0)
  {
LABEL_25:
    if ((v9 & 0x10000000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "rHat_Z", *(float *)(a1 + 128));
  int v9 = *(_DWORD *)(a1 + 164);
  if ((v9 & 0x10000000) == 0)
  {
LABEL_26:
    if ((v9 & 1) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_64:
  PB::TextFormatter::format(this, "requestingCamera");
  if (*(_DWORD *)(a1 + 164)) {
LABEL_27:
  }
    PB::TextFormatter::format(this, "srcTimestamp", *(double *)(a1 + 56));
LABEL_28:
  unsigned int v10 = *(float **)(a1 + 32);
  unint64_t v11 = *(float **)(a1 + 40);
  while (v10 != v11)
  {
    float v12 = *v10++;
    PB::TextFormatter::format(this, "stateVariance", v12);
  }
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 2) != 0)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 64));
    int v13 = *(_DWORD *)(a1 + 164);
    if ((v13 & 0x20000000) == 0)
    {
LABEL_32:
      if ((v13 & 0x20000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_68;
    }
  }
  else if ((v13 & 0x20000000) == 0)
  {
    goto LABEL_32;
  }
  PB::TextFormatter::format(this, "tracking1IMU");
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x20000) == 0)
  {
LABEL_33:
    if ((v13 & 0x40000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "trackingBehavior");
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x40000000) == 0)
  {
LABEL_34:
    if ((v13 & 0x40000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "trackingDisabled");
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x40000) == 0)
  {
LABEL_35:
    if ((v13 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "trackingScheme");
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_36:
    if ((v13 & 0x80000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "useRelaxedQuiescenceBounds");
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x80000) == 0)
  {
LABEL_37:
    if ((v13 & 0x100000) == 0) {
      goto LABEL_38;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "vHat_X", *(float *)(a1 + 140));
  int v13 = *(_DWORD *)(a1 + 164);
  if ((v13 & 0x100000) == 0)
  {
LABEL_38:
    if ((v13 & 0x200000) == 0) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
LABEL_73:
  PB::TextFormatter::format(this, "vHat_Y", *(float *)(a1 + 144));
  if ((*(_DWORD *)(a1 + 164) & 0x200000) != 0) {
LABEL_39:
  }
    PB::TextFormatter::format(this, "vHat_Z", *(float *)(a1 + 148));
LABEL_40:

  return MEMORY[0x1F4147498](this);
}

BOOL sub_190416D7C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    float v8 = (void **)(a1 + 8);
    uint64_t v9 = a1 + 24;
    unsigned int v10 = (void **)(a1 + 32);
    uint64_t v11 = a1 + 48;
    while (1)
    {
      uint64_t v12 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v13 = 0;
      unsigned int v14 = 0;
      unint64_t v15 = 0;
      while (1)
      {
        unint64_t v16 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v17 = *(unsigned char *)(v12 + v2);
        v15 |= (unint64_t)(v17 & 0x7F) << v13;
        if ((v17 & 0x80) == 0) {
          break;
        }
        v13 += 7;
        unint64_t v2 = v16;
        BOOL v18 = v14++ > 8;
        if (v18) {
          goto LABEL_20;
        }
      }
LABEL_21:
      int v24 = v15 & 7;
      if (v24 == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v15 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 164) |= 2u;
          unint64_t v25 = *((void *)this + 1);
          if (v25 > 0xFFFFFFFFFFFFFFF7 || v25 + 8 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v25);
          goto LABEL_153;
        case 2u:
          *(_DWORD *)(a1 + 164) |= 0x800u;
          unint64_t v26 = *((void *)this + 1);
          if (v26 > 0xFFFFFFFFFFFFFFFBLL || v26 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 108) = *(_DWORD *)(*(void *)this + v26);
          goto LABEL_265;
        case 3u:
          *(_DWORD *)(a1 + 164) |= 0x1000u;
          unint64_t v27 = *((void *)this + 1);
          if (v27 > 0xFFFFFFFFFFFFFFFBLL || v27 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 112) = *(_DWORD *)(*(void *)this + v27);
          goto LABEL_265;
        case 4u:
          *(_DWORD *)(a1 + 164) |= 0x2000u;
          unint64_t v28 = *((void *)this + 1);
          if (v28 > 0xFFFFFFFFFFFFFFFBLL || v28 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 116) = *(_DWORD *)(*(void *)this + v28);
          goto LABEL_265;
        case 5u:
          *(_DWORD *)(a1 + 164) |= 0x4000u;
          unint64_t v29 = *((void *)this + 1);
          if (v29 > 0xFFFFFFFFFFFFFFFBLL || v29 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 120) = *(_DWORD *)(*(void *)this + v29);
          goto LABEL_265;
        case 6u:
          *(_DWORD *)(a1 + 164) |= 0x8000u;
          unint64_t v30 = *((void *)this + 1);
          if (v30 > 0xFFFFFFFFFFFFFFFBLL || v30 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 124) = *(_DWORD *)(*(void *)this + v30);
          goto LABEL_265;
        case 7u:
          *(_DWORD *)(a1 + 164) |= 0x10000u;
          unint64_t v31 = *((void *)this + 1);
          if (v31 > 0xFFFFFFFFFFFFFFFBLL || v31 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 128) = *(_DWORD *)(*(void *)this + v31);
          goto LABEL_265;
        case 8u:
          *(_DWORD *)(a1 + 164) |= 0x80000u;
          unint64_t v32 = *((void *)this + 1);
          if (v32 > 0xFFFFFFFFFFFFFFFBLL || v32 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 140) = *(_DWORD *)(*(void *)this + v32);
          goto LABEL_265;
        case 9u:
          *(_DWORD *)(a1 + 164) |= 0x100000u;
          unint64_t v33 = *((void *)this + 1);
          if (v33 > 0xFFFFFFFFFFFFFFFBLL || v33 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 144) = *(_DWORD *)(*(void *)this + v33);
          goto LABEL_265;
        case 0xAu:
          *(_DWORD *)(a1 + 164) |= 0x200000u;
          unint64_t v34 = *((void *)this + 1);
          if (v34 > 0xFFFFFFFFFFFFFFFBLL || v34 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 148) = *(_DWORD *)(*(void *)this + v34);
          goto LABEL_265;
        case 0xBu:
          *(_DWORD *)(a1 + 164) |= 0x100u;
          unint64_t v35 = *((void *)this + 1);
          if (v35 > 0xFFFFFFFFFFFFFFFBLL || v35 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(*(void *)this + v35);
          goto LABEL_265;
        case 0xCu:
          *(_DWORD *)(a1 + 164) |= 0x200u;
          unint64_t v36 = *((void *)this + 1);
          if (v36 > 0xFFFFFFFFFFFFFFFBLL || v36 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 100) = *(_DWORD *)(*(void *)this + v36);
          goto LABEL_265;
        case 0xDu:
          *(_DWORD *)(a1 + 164) |= 0x400u;
          unint64_t v37 = *((void *)this + 1);
          if (v37 > 0xFFFFFFFFFFFFFFFBLL || v37 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(void *)this + v37);
          goto LABEL_265;
        case 0xEu:
          *(_DWORD *)(a1 + 164) |= 0x80u;
          unint64_t v38 = *((void *)this + 1);
          if (v38 > 0xFFFFFFFFFFFFFFFBLL || v38 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)this + v38);
          goto LABEL_265;
        case 0xFu:
          if (v24 != 2)
          {
            uint64_t v138 = *(char **)(a1 + 40);
            unint64_t v137 = *(void *)(a1 + 48);
            if ((unint64_t)v138 >= v137)
            {
              unint64_t v154 = (char *)*v10;
              uint64_t v155 = (v138 - (unsigned char *)*v10) >> 2;
              unint64_t v156 = v155 + 1;
              if ((unint64_t)(v155 + 1) >> 62) {
LABEL_277:
              }
                sub_1903479E8();
              uint64_t v157 = v137 - (void)v154;
              if (v157 >> 1 > v156) {
                unint64_t v156 = v157 >> 1;
              }
              if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v158 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v158 = v156;
              }
              if (v158)
              {
                unint64_t v159 = (char *)sub_190347D04(v11, v158);
                unint64_t v154 = *(char **)(a1 + 32);
                uint64_t v138 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v159 = 0;
              }
              unint64_t v166 = &v159[4 * v155];
              *(_DWORD *)unint64_t v166 = 0;
              uint64_t v139 = v166 + 4;
              while (v138 != v154)
              {
                int v167 = *((_DWORD *)v138 - 1);
                v138 -= 4;
                *((_DWORD *)v166 - 1) = v167;
                v166 -= 4;
              }
              *(void *)(a1 + 32) = v166;
              *(void *)(a1 + 40) = v139;
              *(void *)(a1 + 48) = &v159[4 * v158];
              if (v154) {
                operator delete(v154);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v138 = 0;
              uint64_t v139 = v138 + 4;
            }
            *(void *)(a1 + 40) = v139;
            goto LABEL_261;
          }
          if (PB::Reader::placeMark()) {
            return 0;
          }
          unint64_t v39 = *((void *)this + 1);
          unint64_t v40 = *((void *)this + 2);
          while (v39 < v40 && !*((unsigned char *)this + 24))
          {
            unint64_t v42 = *(char **)(a1 + 40);
            unint64_t v41 = *(void *)(a1 + 48);
            if ((unint64_t)v42 >= v41)
            {
              unint64_t v44 = (char *)*v10;
              uint64_t v45 = (v42 - (unsigned char *)*v10) >> 2;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62) {
                goto LABEL_277;
              }
              uint64_t v47 = v41 - (void)v44;
              if (v47 >> 1 > v46) {
                unint64_t v46 = v47 >> 1;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                unint64_t v49 = (char *)sub_190347D04(v11, v48);
                unint64_t v44 = *(char **)(a1 + 32);
                unint64_t v42 = *(char **)(a1 + 40);
              }
              else
              {
                unint64_t v49 = 0;
              }
              unint64_t v50 = &v49[4 * v45];
              *(_DWORD *)unint64_t v50 = 0;
              unint64_t v43 = v50 + 4;
              while (v42 != v44)
              {
                int v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *((_DWORD *)v50 - 1) = v51;
                v50 -= 4;
              }
              *(void *)(a1 + 32) = v50;
              *(void *)(a1 + 40) = v43;
              *(void *)(a1 + 48) = &v49[4 * v48];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v42 = 0;
              unint64_t v43 = v42 + 4;
            }
            *(void *)(a1 + 40) = v43;
            unint64_t v52 = *((void *)this + 1);
            if (v52 > 0xFFFFFFFFFFFFFFFBLL || v52 + 4 > *((void *)this + 2)) {
              goto LABEL_217;
            }
            *(v43 - 1) = *(_DWORD *)(*(void *)this + v52);
            unint64_t v40 = *((void *)this + 2);
            unint64_t v39 = *((void *)this + 1) + 4;
            *((void *)this + 1) = v39;
          }
          goto LABEL_218;
        case 0x10u:
          if (v24 == 2)
          {
            if (PB::Reader::placeMark()) {
              return 0;
            }
            unint64_t v53 = *((void *)this + 1);
            unint64_t v54 = *((void *)this + 2);
            while (v53 < v54 && !*((unsigned char *)this + 24))
            {
              unint64_t v56 = *(char **)(a1 + 16);
              unint64_t v55 = *(void *)(a1 + 24);
              if ((unint64_t)v56 >= v55)
              {
                BOOL v58 = (char *)*v8;
                uint64_t v59 = (v56 - (unsigned char *)*v8) >> 2;
                unint64_t v60 = v59 + 1;
                if ((unint64_t)(v59 + 1) >> 62) {
                  goto LABEL_278;
                }
                uint64_t v61 = v55 - (void)v58;
                if (v61 >> 1 > v60) {
                  unint64_t v60 = v61 >> 1;
                }
                if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v62 = v60;
                }
                if (v62)
                {
                  int v63 = (char *)sub_190347D04(v9, v62);
                  BOOL v58 = *(char **)(a1 + 8);
                  unint64_t v56 = *(char **)(a1 + 16);
                }
                else
                {
                  int v63 = 0;
                }
                BOOL v64 = &v63[4 * v59];
                *(_DWORD *)BOOL v64 = 0;
                int v57 = v64 + 4;
                while (v56 != v58)
                {
                  int v65 = *((_DWORD *)v56 - 1);
                  v56 -= 4;
                  *((_DWORD *)v64 - 1) = v65;
                  v64 -= 4;
                }
                *(void *)(a1 + 8) = v64;
                *(void *)(a1 + 16) = v57;
                *(void *)(a1 + 24) = &v63[4 * v62];
                if (v58) {
                  operator delete(v58);
                }
              }
              else
              {
                *(_DWORD *)unint64_t v56 = 0;
                int v57 = v56 + 4;
              }
              *(void *)(a1 + 16) = v57;
              unint64_t v66 = *((void *)this + 1);
              if (v66 > 0xFFFFFFFFFFFFFFFBLL || v66 + 4 > *((void *)this + 2))
              {
LABEL_217:
                *((unsigned char *)this + 24) = 1;
                break;
              }
              *(v57 - 1) = *(_DWORD *)(*(void *)this + v66);
              unint64_t v54 = *((void *)this + 2);
              unint64_t v53 = *((void *)this + 1) + 4;
              *((void *)this + 1) = v53;
            }
LABEL_218:
            PB::Reader::recallMark();
          }
          else
          {
            uint64_t v141 = *(char **)(a1 + 16);
            unint64_t v140 = *(void *)(a1 + 24);
            if ((unint64_t)v141 >= v140)
            {
              char v160 = (char *)*v8;
              uint64_t v161 = (v141 - (unsigned char *)*v8) >> 2;
              unint64_t v162 = v161 + 1;
              if ((unint64_t)(v161 + 1) >> 62) {
LABEL_278:
              }
                sub_1903479E8();
              uint64_t v163 = v140 - (void)v160;
              if (v163 >> 1 > v162) {
                unint64_t v162 = v163 >> 1;
              }
              if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v164 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v164 = v162;
              }
              if (v164)
              {
                unint64_t v165 = (char *)sub_190347D04(v9, v164);
                char v160 = *(char **)(a1 + 8);
                uint64_t v141 = *(char **)(a1 + 16);
              }
              else
              {
                unint64_t v165 = 0;
              }
              unint64_t v168 = &v165[4 * v161];
              *(_DWORD *)unint64_t v168 = 0;
              uint64_t v139 = v168 + 4;
              while (v141 != v160)
              {
                int v169 = *((_DWORD *)v141 - 1);
                v141 -= 4;
                *((_DWORD *)v168 - 1) = v169;
                v168 -= 4;
              }
              *(void *)(a1 + 8) = v168;
              *(void *)(a1 + 16) = v139;
              *(void *)(a1 + 24) = &v165[4 * v164];
              if (v160) {
                operator delete(v160);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v141 = 0;
              uint64_t v139 = v141 + 4;
            }
            *(void *)(a1 + 16) = v139;
LABEL_261:
            unint64_t v170 = *((void *)this + 1);
            if (v170 <= 0xFFFFFFFFFFFFFFFBLL && v170 + 4 <= *((void *)this + 2))
            {
              *(v139 - 1) = *(_DWORD *)(*(void *)this + v170);
LABEL_265:
              uint64_t v116 = *((void *)this + 1) + 4;
LABEL_266:
              *((void *)this + 1) = v116;
            }
            else
            {
LABEL_263:
              *((unsigned char *)this + 24) = 1;
            }
          }
LABEL_267:
          unint64_t v2 = *((void *)this + 1);
          unint64_t v3 = *((void *)this + 2);
          int v4 = *((unsigned __int8 *)this + 24);
          if (v2 >= v3 || v4 != 0) {
            return v4 == 0;
          }
          break;
        case 0x11u:
          *(_DWORD *)(a1 + 164) |= 0x8000000u;
          unint64_t v67 = *((void *)this + 1);
          if (v67 >= *((void *)this + 2))
          {
            BOOL v70 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v68 = v67 + 1;
            int v69 = *(unsigned __int8 *)(*(void *)this + v67);
            *((void *)this + 1) = v68;
            BOOL v70 = v69 != 0;
          }
          *(unsigned char *)(a1 + 157) = v70;
          goto LABEL_267;
        case 0x12u:
          *(_DWORD *)(a1 + 164) |= 0x400000u;
          unint64_t v71 = *((void *)this + 1);
          if (v71 >= *((void *)this + 2))
          {
            BOOL v74 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v72 = v71 + 1;
            int v73 = *(unsigned __int8 *)(*(void *)this + v71);
            *((void *)this + 1) = v72;
            BOOL v74 = v73 != 0;
          }
          *(unsigned char *)(a1 + 152) = v74;
          goto LABEL_267;
        case 0x13u:
          *(_DWORD *)(a1 + 164) |= 0x1000000u;
          unint64_t v75 = *((void *)this + 1);
          if (v75 >= *((void *)this + 2))
          {
            BOOL v78 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v76 = v75 + 1;
            int v77 = *(unsigned __int8 *)(*(void *)this + v75);
            *((void *)this + 1) = v76;
            BOOL v78 = v77 != 0;
          }
          *(unsigned char *)(a1 + 154) = v78;
          goto LABEL_267;
        case 0x14u:
          *(_DWORD *)(a1 + 164) |= 0x10u;
          unint64_t v79 = *((void *)this + 1);
          if (v79 > 0xFFFFFFFFFFFFFFFBLL || v79 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 80) = *(_DWORD *)(*(void *)this + v79);
          goto LABEL_265;
        case 0x15u:
          *(_DWORD *)(a1 + 164) |= 8u;
          unint64_t v80 = *((void *)this + 1);
          if (v80 > 0xFFFFFFFFFFFFFFFBLL || v80 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 76) = *(_DWORD *)(*(void *)this + v80);
          goto LABEL_265;
        case 0x16u:
          *(_DWORD *)(a1 + 164) |= 4u;
          unint64_t v81 = *((void *)this + 1);
          if (v81 > 0xFFFFFFFFFFFFFFFBLL || v81 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 72) = *(_DWORD *)(*(void *)this + v81);
          goto LABEL_265;
        case 0x17u:
          *(_DWORD *)(a1 + 164) |= 0x20000000u;
          unint64_t v82 = *((void *)this + 1);
          if (v82 >= *((void *)this + 2))
          {
            BOOL v85 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v83 = v82 + 1;
            int v84 = *(unsigned __int8 *)(*(void *)this + v82);
            *((void *)this + 1) = v83;
            BOOL v85 = v84 != 0;
          }
          *(unsigned char *)(a1 + 159) = v85;
          goto LABEL_267;
        case 0x18u:
          *(_DWORD *)(a1 + 164) |= 0x80000000;
          unint64_t v86 = *((void *)this + 1);
          if (v86 >= *((void *)this + 2))
          {
            BOOL v89 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v87 = v86 + 1;
            int v88 = *(unsigned __int8 *)(*(void *)this + v86);
            *((void *)this + 1) = v87;
            BOOL v89 = v88 != 0;
          }
          *(unsigned char *)(a1 + 161) = v89;
          goto LABEL_267;
        case 0x19u:
          *(_DWORD *)(a1 + 164) |= 0x800000u;
          unint64_t v90 = *((void *)this + 1);
          if (v90 >= *((void *)this + 2))
          {
            BOOL v93 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v91 = v90 + 1;
            int v92 = *(unsigned __int8 *)(*(void *)this + v90);
            *((void *)this + 1) = v91;
            BOOL v93 = v92 != 0;
          }
          *(unsigned char *)(a1 + 153) = v93;
          goto LABEL_267;
        case 0x1Au:
          *(_DWORD *)(a1 + 164) |= 0x20u;
          unint64_t v94 = *((void *)this + 1);
          if (v94 > 0xFFFFFFFFFFFFFFFBLL || v94 + 4 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(_DWORD *)(a1 + 84) = *(_DWORD *)(*(void *)this + v94);
          goto LABEL_265;
        case 0x1Bu:
          *(_DWORD *)(a1 + 164) |= 0x40000u;
          unint64_t v95 = *((void *)this + 1);
          unint64_t v96 = *((void *)this + 2);
          uint64_t v97 = *(void *)this;
          if (v95 <= 0xFFFFFFFFFFFFFFF5 && v95 + 10 <= v96)
          {
            char v98 = 0;
            unsigned int v99 = 0;
            uint64_t v100 = 0;
            do
            {
              unint64_t v101 = v95 + 1;
              *((void *)this + 1) = v95 + 1;
              char v102 = *(unsigned char *)(v97 + v95);
              v100 |= (unint64_t)(v102 & 0x7F) << v98;
              if ((v102 & 0x80) == 0) {
                goto LABEL_240;
              }
              v98 += 7;
              unint64_t v95 = v101;
              BOOL v18 = v99++ > 8;
            }
            while (!v18);
LABEL_194:
            LODWORD(v100) = 0;
            goto LABEL_240;
          }
          char v142 = 0;
          unsigned int v143 = 0;
          uint64_t v100 = 0;
          if (v96 <= v95) {
            unint64_t v96 = *((void *)this + 1);
          }
          while (2)
          {
            if (v96 == v95)
            {
              LODWORD(v100) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v144 = v95 + 1;
              char v145 = *(unsigned char *)(v97 + v95);
              *((void *)this + 1) = v144;
              v100 |= (unint64_t)(v145 & 0x7F) << v142;
              if (v145 < 0)
              {
                v142 += 7;
                unint64_t v95 = v144;
                BOOL v18 = v143++ > 8;
                if (v18) {
                  goto LABEL_194;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v100) = 0;
              }
            }
            break;
          }
LABEL_240:
          *(_DWORD *)(a1 + 136) = v100;
          goto LABEL_267;
        case 0x1Cu:
          *(_DWORD *)(a1 + 164) |= 0x10000000u;
          unint64_t v103 = *((void *)this + 1);
          if (v103 >= *((void *)this + 2))
          {
            BOOL v106 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v104 = v103 + 1;
            int v105 = *(unsigned __int8 *)(*(void *)this + v103);
            *((void *)this + 1) = v104;
            BOOL v106 = v105 != 0;
          }
          *(unsigned char *)(a1 + 158) = v106;
          goto LABEL_267;
        case 0x1Du:
          *(_DWORD *)(a1 + 164) |= 0x4000000u;
          unint64_t v107 = *((void *)this + 1);
          if (v107 >= *((void *)this + 2))
          {
            BOOL v110 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v108 = v107 + 1;
            int v109 = *(unsigned __int8 *)(*(void *)this + v107);
            *((void *)this + 1) = v108;
            BOOL v110 = v109 != 0;
          }
          *(unsigned char *)(a1 + 156) = v110;
          goto LABEL_267;
        case 0x1Eu:
          *(_DWORD *)(a1 + 164) |= 0x40000000u;
          unint64_t v111 = *((void *)this + 1);
          if (v111 >= *((void *)this + 2))
          {
            BOOL v114 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v112 = v111 + 1;
            int v113 = *(unsigned __int8 *)(*(void *)this + v111);
            *((void *)this + 1) = v112;
            BOOL v114 = v113 != 0;
          }
          *(unsigned char *)(a1 + 160) = v114;
          goto LABEL_267;
        case 0x1Fu:
          *(_DWORD *)(a1 + 164) |= 1u;
          unint64_t v115 = *((void *)this + 1);
          if (v115 > 0xFFFFFFFFFFFFFFF7 || v115 + 8 > *((void *)this + 2)) {
            goto LABEL_263;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v115);
LABEL_153:
          uint64_t v116 = *((void *)this + 1) + 8;
          goto LABEL_266;
        case 0x20u:
          *(_DWORD *)(a1 + 164) |= 0x40u;
          unint64_t v117 = *((void *)this + 1);
          unint64_t v118 = *((void *)this + 2);
          uint64_t v119 = *(void *)this;
          if (v117 <= 0xFFFFFFFFFFFFFFF5 && v117 + 10 <= v118)
          {
            char v120 = 0;
            unsigned int v121 = 0;
            uint64_t v122 = 0;
            do
            {
              unint64_t v123 = v117 + 1;
              *((void *)this + 1) = v117 + 1;
              char v124 = *(unsigned char *)(v119 + v117);
              v122 |= (unint64_t)(v124 & 0x7F) << v120;
              if ((v124 & 0x80) == 0) {
                goto LABEL_243;
              }
              v120 += 7;
              unint64_t v117 = v123;
              BOOL v18 = v121++ > 8;
            }
            while (!v18);
LABEL_207:
            LODWORD(v122) = 0;
            goto LABEL_243;
          }
          char v146 = 0;
          unsigned int v147 = 0;
          uint64_t v122 = 0;
          if (v118 <= v117) {
            unint64_t v118 = *((void *)this + 1);
          }
          while (2)
          {
            if (v118 == v117)
            {
              LODWORD(v122) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v148 = v117 + 1;
              char v149 = *(unsigned char *)(v119 + v117);
              *((void *)this + 1) = v148;
              v122 |= (unint64_t)(v149 & 0x7F) << v146;
              if (v149 < 0)
              {
                v146 += 7;
                unint64_t v117 = v148;
                BOOL v18 = v147++ > 8;
                if (v18) {
                  goto LABEL_207;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v122) = 0;
              }
            }
            break;
          }
LABEL_243:
          *(_DWORD *)(a1 + 88) = v122;
          goto LABEL_267;
        case 0x21u:
          *(_DWORD *)(a1 + 164) |= 0x2000000u;
          unint64_t v125 = *((void *)this + 1);
          if (v125 >= *((void *)this + 2))
          {
            BOOL v128 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v126 = v125 + 1;
            int v127 = *(unsigned __int8 *)(*(void *)this + v125);
            *((void *)this + 1) = v126;
            BOOL v128 = v127 != 0;
          }
          *(unsigned char *)(a1 + 155) = v128;
          goto LABEL_267;
        case 0x22u:
          *(_DWORD *)(a1 + 164) |= 0x20000u;
          unint64_t v129 = *((void *)this + 1);
          unint64_t v130 = *((void *)this + 2);
          uint64_t v131 = *(void *)this;
          if (v129 <= 0xFFFFFFFFFFFFFFF5 && v129 + 10 <= v130)
          {
            char v132 = 0;
            unsigned int v133 = 0;
            uint64_t v134 = 0;
            do
            {
              unint64_t v135 = v129 + 1;
              *((void *)this + 1) = v129 + 1;
              char v136 = *(unsigned char *)(v131 + v129);
              v134 |= (unint64_t)(v136 & 0x7F) << v132;
              if ((v136 & 0x80) == 0) {
                goto LABEL_246;
              }
              v132 += 7;
              unint64_t v129 = v135;
              BOOL v18 = v133++ > 8;
            }
            while (!v18);
LABEL_216:
            LODWORD(v134) = 0;
            goto LABEL_246;
          }
          char v150 = 0;
          unsigned int v151 = 0;
          uint64_t v134 = 0;
          if (v130 <= v129) {
            unint64_t v130 = *((void *)this + 1);
          }
          while (2)
          {
            if (v130 == v129)
            {
              LODWORD(v134) = 0;
              *((unsigned char *)this + 24) = 1;
            }
            else
            {
              unint64_t v152 = v129 + 1;
              char v153 = *(unsigned char *)(v131 + v129);
              *((void *)this + 1) = v152;
              v134 |= (unint64_t)(v153 & 0x7F) << v150;
              if (v153 < 0)
              {
                v150 += 7;
                unint64_t v129 = v152;
                BOOL v18 = v151++ > 8;
                if (v18) {
                  goto LABEL_216;
                }
                continue;
              }
              if (*((unsigned char *)this + 24)) {
                LODWORD(v134) = 0;
              }
            }
            break;
          }
LABEL_246:
          *(_DWORD *)(a1 + 132) = v134;
          goto LABEL_267;
        default:
          if ((PB::Reader::skip(this) & 1) == 0) {
            return 0;
          }
          goto LABEL_267;
      }
    }
    char v19 = 0;
    unsigned int v20 = 0;
    unint64_t v15 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v21 = v2 + 1;
      char v22 = *(unsigned char *)(v12 + v2);
      *((void *)this + 1) = v21;
      v15 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0) {
        goto LABEL_21;
      }
      v19 += 7;
      unint64_t v2 = v21;
      if (v20++ >= 9)
      {
LABEL_20:
        unint64_t v15 = 0;
        goto LABEL_21;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190417D20(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 164);
  if ((v4 & 2) != 0)
  {
    double result = PB::Writer::write(this, *(double *)(result + 64));
    int v4 = *(_DWORD *)(v3 + 164);
    if ((v4 & 0x800) == 0)
    {
LABEL_3:
      if ((v4 & 0x1000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }
  }
  else if ((v4 & 0x800) == 0)
  {
    goto LABEL_3;
  }
  double result = PB::Writer::write(this, *(float *)(v3 + 108));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x1000) == 0)
  {
LABEL_4:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_44;
  }
LABEL_43:
  double result = PB::Writer::write(this, *(float *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x2000) == 0)
  {
LABEL_5:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_45;
  }
LABEL_44:
  double result = PB::Writer::write(this, *(float *)(v3 + 116));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x4000) == 0)
  {
LABEL_6:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_46;
  }
LABEL_45:
  double result = PB::Writer::write(this, *(float *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x8000) == 0)
  {
LABEL_7:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_47;
  }
LABEL_46:
  double result = PB::Writer::write(this, *(float *)(v3 + 124));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x10000) == 0)
  {
LABEL_8:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_48;
  }
LABEL_47:
  double result = PB::Writer::write(this, *(float *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x80000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_49;
  }
LABEL_48:
  double result = PB::Writer::write(this, *(float *)(v3 + 140));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_50;
  }
LABEL_49:
  double result = PB::Writer::write(this, *(float *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200000) == 0)
  {
LABEL_11:
    if ((v4 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_51;
  }
LABEL_50:
  double result = PB::Writer::write(this, *(float *)(v3 + 148));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x100) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_52;
  }
LABEL_51:
  double result = PB::Writer::write(this, *(float *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x400) == 0) {
      goto LABEL_14;
    }
LABEL_53:
    double result = PB::Writer::write(this, *(float *)(v3 + 104));
    if ((*(_DWORD *)(v3 + 164) & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_52:
  double result = PB::Writer::write(this, *(float *)(v3 + 100));
  int v4 = *(_DWORD *)(v3 + 164);
  if ((v4 & 0x400) != 0) {
    goto LABEL_53;
  }
LABEL_14:
  if ((v4 & 0x80) != 0) {
LABEL_15:
  }
    double result = PB::Writer::write(this, *(float *)(v3 + 92));
LABEL_16:
  int v5 = *(float **)(v3 + 32);
  uint64_t v6 = *(float **)(v3 + 40);
  while (v5 != v6)
  {
    float v7 = *v5++;
    double result = PB::Writer::write(this, v7);
  }
  float v8 = *(float **)(v3 + 8);
  uint64_t v9 = *(float **)(v3 + 16);
  while (v8 != v9)
  {
    float v10 = *v8++;
    double result = PB::Writer::write(this, v10);
  }
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x8000000) != 0)
  {
    double result = PB::Writer::write(this);
    int v11 = *(_DWORD *)(v3 + 164);
    if ((v11 & 0x400000) == 0)
    {
LABEL_24:
      if ((v11 & 0x1000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_57;
    }
  }
  else if ((v11 & 0x400000) == 0)
  {
    goto LABEL_24;
  }
  double result = PB::Writer::write(this);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x1000000) == 0)
  {
LABEL_25:
    if ((v11 & 0x10) == 0) {
      goto LABEL_26;
    }
    goto LABEL_58;
  }
LABEL_57:
  double result = PB::Writer::write(this);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10) == 0)
  {
LABEL_26:
    if ((v11 & 8) == 0) {
      goto LABEL_27;
    }
    goto LABEL_59;
  }
LABEL_58:
  double result = PB::Writer::write(this, *(float *)(v3 + 80));
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 8) == 0)
  {
LABEL_27:
    if ((v11 & 4) == 0) {
      goto LABEL_28;
    }
    goto LABEL_60;
  }
LABEL_59:
  double result = PB::Writer::write(this, *(float *)(v3 + 76));
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 4) == 0)
  {
LABEL_28:
    if ((v11 & 0x20000000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_61;
  }
LABEL_60:
  double result = PB::Writer::write(this, *(float *)(v3 + 72));
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20000000) == 0)
  {
LABEL_29:
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_62;
  }
LABEL_61:
  double result = PB::Writer::write(this);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_30:
    if ((v11 & 0x800000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_63;
  }
LABEL_62:
  double result = PB::Writer::write(this);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x800000) == 0)
  {
LABEL_31:
    if ((v11 & 0x20) == 0) {
      goto LABEL_32;
    }
    goto LABEL_64;
  }
LABEL_63:
  double result = PB::Writer::write(this);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x20) == 0)
  {
LABEL_32:
    if ((v11 & 0x40000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_65;
  }
LABEL_64:
  double result = PB::Writer::write(this, *(float *)(v3 + 84));
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000) == 0)
  {
LABEL_33:
    if ((v11 & 0x10000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_66;
  }
LABEL_65:
  double result = PB::Writer::writeVarInt(this);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x10000000) == 0)
  {
LABEL_34:
    if ((v11 & 0x4000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_67;
  }
LABEL_66:
  double result = PB::Writer::write(this);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x4000000) == 0)
  {
LABEL_35:
    if ((v11 & 0x40000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_68;
  }
LABEL_67:
  double result = PB::Writer::write(this);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40000000) == 0)
  {
LABEL_36:
    if ((v11 & 1) == 0) {
      goto LABEL_37;
    }
    goto LABEL_69;
  }
LABEL_68:
  double result = PB::Writer::write(this);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 1) == 0)
  {
LABEL_37:
    if ((v11 & 0x40) == 0) {
      goto LABEL_38;
    }
    goto LABEL_70;
  }
LABEL_69:
  double result = PB::Writer::write(this, *(double *)(v3 + 56));
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x40) == 0)
  {
LABEL_38:
    if ((v11 & 0x2000000) == 0) {
      goto LABEL_39;
    }
LABEL_71:
    double result = PB::Writer::write(this);
    if ((*(_DWORD *)(v3 + 164) & 0x20000) == 0) {
      return result;
    }
    goto LABEL_72;
  }
LABEL_70:
  double result = PB::Writer::writeVarInt(this);
  int v11 = *(_DWORD *)(v3 + 164);
  if ((v11 & 0x2000000) != 0) {
    goto LABEL_71;
  }
LABEL_39:
  if ((v11 & 0x20000) == 0) {
    return result;
  }
LABEL_72:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_190418124(uint64_t result)
{
  *(void *)double result = &unk_1EDFCF0C8;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_19041814C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190418184(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 2) != 0)
  {
    PB::TextFormatter::format(this, "avgRotationMax", *(float *)(a1 + 16));
    __int16 v5 = *(_WORD *)(a1 + 48);
    if ((v5 & 4) == 0)
    {
LABEL_3:
      if ((v5 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_16;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "historicalDisturbanceDuration", *(float *)(a1 + 20));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "historicalQuiescenceDuration", *(float *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 0x20) == 0) {
      goto LABEL_6;
    }
    goto LABEL_18;
  }
LABEL_17:
  PB::TextFormatter::format(this, "instAccelMagDiff", *(float *)(a1 + 28));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x20) == 0)
  {
LABEL_6:
    if ((v5 & 0x100) == 0) {
      goto LABEL_7;
    }
    goto LABEL_19;
  }
LABEL_18:
  PB::TextFormatter::format(this, "instRotationMax", *(float *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x100) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_20;
  }
LABEL_19:
  PB::TextFormatter::format(this, "isAvgGrav");
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  PB::TextFormatter::format(this, "lpfAccelMagDiff", *(float *)(a1 + 36));
  __int16 v5 = *(_WORD *)(a1 + 48);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_21:
  PB::TextFormatter::format(this, "measNoiseVar", *(float *)(a1 + 40));
  if (*(_WORD *)(a1 + 48)) {
LABEL_10:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
LABEL_11:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1904182E8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 48) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_54;
        case 2u:
          *(_WORD *)(a1 + 48) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 3u:
          *(_WORD *)(a1 + 48) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 4u:
          *(_WORD *)(a1 + 48) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 28) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 5u:
          *(_WORD *)(a1 + 48) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 6u:
          *(_WORD *)(a1 + 48) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 7u:
          *(_WORD *)(a1 + 48) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *(unsigned char *)(a1 + 44) = v21;
          break;
        case 8u:
          *(_WORD *)(a1 + 48) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_47;
          }
          *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_53;
        case 9u:
          *(_WORD *)(a1 + 48) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
LABEL_53:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_54:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_47:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_1904186A0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 48);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    __int16 v4 = *(_WORD *)(v3 + 48);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 2) == 0)
  {
LABEL_4:
    if ((v4 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x10) == 0)
  {
LABEL_5:
    if ((v4 & 0x40) == 0) {
      goto LABEL_6;
    }
    goto LABEL_15;
  }
LABEL_14:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 28));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x40) == 0)
  {
LABEL_6:
    if ((v4 & 0x80) == 0) {
      goto LABEL_7;
    }
    goto LABEL_16;
  }
LABEL_15:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 36));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x80) == 0)
  {
LABEL_7:
    if ((v4 & 0x100) == 0) {
      goto LABEL_8;
    }
    goto LABEL_17;
  }
LABEL_16:
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 0x100) == 0)
  {
LABEL_8:
    if ((v4 & 8) == 0) {
      goto LABEL_9;
    }
LABEL_18:
    uint64_t result = PB::Writer::write(this, *(float *)(v3 + 24));
    if ((*(_WORD *)(v3 + 48) & 4) == 0) {
      return result;
    }
    goto LABEL_19;
  }
LABEL_17:
  uint64_t result = PB::Writer::write(this);
  __int16 v4 = *(_WORD *)(v3 + 48);
  if ((v4 & 8) != 0) {
    goto LABEL_18;
  }
LABEL_9:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_19:
  float v5 = *(float *)(v3 + 20);

  return PB::Writer::write(this, v5);
}

uint64_t sub_1904187D4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCEE28;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 20) = 0;
  return result;
}

void sub_1904187F8(PB::Base *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_1EDFCEE28;
  *((void *)this + 1) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  PB::Base::~Base(this);
}

void sub_190418878(PB::Base *a1)
{
  sub_1904187F8(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1904188B0(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v5 + 32))(v5, this, "correction");
  }
  if (*(unsigned char *)(a1 + 20)) {
    PB::TextFormatter::format(this, "isAvgGrav");
  }

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190418948(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v20 = *((void *)this + 1);
        if (v20 >= *((void *)this + 2))
        {
          BOOL v23 = 0;
          *((unsigned char *)this + 24) = 1;
        }
        else
        {
          unint64_t v21 = v20 + 1;
          int v22 = *(unsigned __int8 *)(*(void *)this + v20);
          *((void *)this + 1) = v21;
          BOOL v23 = v22 != 0;
        }
        *(unsigned char *)(a1 + 16) = v23;
      }
      else
      {
        if ((v11 >> 3) == 1) {
          operator new();
        }
        uint64_t result = PB::Reader::skip(this);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190418B94(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Base **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::writeSubmessage(this, v4);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    return PB::Writer::write(this);
  }
  return result;
}

uint64_t sub_190418BFC(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF100;
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void sub_190418C24(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190418C5C(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 8) != 0)
  {
    PB::TextFormatter::format(this, "activeGnssSession");
    char v5 = *(unsigned char *)(a1 + 24);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 24) & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "currentModesOfOperation");
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 0x10) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "gnssModeOfOperation");
  char v5 = *(unsigned char *)(a1 + 24);
  if ((v5 & 0x10) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "hasSubscribedRhythmicClient");
  if ((*(unsigned char *)(a1 + 24) & 4) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "rhythmicMode");
LABEL_7:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190418D40(uint64_t a1, PB::Reader *this)
{
  unint64_t v3 = *((void *)this + 1);
  unint64_t v2 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v3 < v2 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v3 > 0xFFFFFFFFFFFFFFF5 || v3 + 10 > v2)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v3 > v2) {
          unint64_t v2 = v3;
        }
        while (v2 != v3)
        {
          unint64_t v17 = v3 + 1;
          char v18 = *(unsigned char *)(v8 + v3);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v3 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v3 + 1;
          *((void *)this + 1) = v3 + 1;
          char v13 = *(unsigned char *)(v8 + v3);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v3 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 24) |= 2u;
              unint64_t v20 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v21 = *(void *)this;
              if (v20 > 0xFFFFFFFFFFFFFFF5 || v20 + 10 > v2)
              {
                char v43 = 0;
                unsigned int v44 = 0;
                uint64_t v24 = 0;
                if (v2 <= v20) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v20)
                  {
                    LODWORD(v24) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_81;
                  }
                  unint64_t v45 = v20++;
                  char v46 = *(unsigned char *)(v21 + v45);
                  *((void *)this + 1) = v20;
                  v24 |= (unint64_t)(v46 & 0x7F) << v43;
                  if ((v46 & 0x80) == 0) {
                    break;
                  }
                  v43 += 7;
                  BOOL v14 = v44++ > 8;
                  if (v14)
                  {
                    LODWORD(v24) = 0;
                    goto LABEL_80;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v24) = 0;
                }
LABEL_80:
                unint64_t v3 = v45 + 1;
              }
              else
              {
                char v22 = 0;
                unsigned int v23 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v3 = v20 + 1;
                  *((void *)this + 1) = v20 + 1;
                  char v25 = *(unsigned char *)(v21 + v20);
                  v24 |= (unint64_t)(v25 & 0x7F) << v22;
                  if ((v25 & 0x80) == 0) {
                    goto LABEL_81;
                  }
                  v22 += 7;
                  unint64_t v20 = v3;
                  BOOL v14 = v23++ > 8;
                }
                while (!v14);
                LODWORD(v24) = 0;
              }
LABEL_81:
              *(_DWORD *)(a1 + 12) = v24;
              goto LABEL_92;
            case 2u:
              *(unsigned char *)(a1 + 24) |= 8u;
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 20) = v28;
              goto LABEL_92;
            case 3u:
              *(unsigned char *)(a1 + 24) |= 4u;
              unint64_t v29 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v47 = 0;
                unsigned int v48 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_86;
                  }
                  unint64_t v49 = v29++;
                  char v50 = *(unsigned char *)(v30 + v49);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v50 & 0x7F) << v47;
                  if ((v50 & 0x80) == 0) {
                    break;
                  }
                  v47 += 7;
                  BOOL v14 = v48++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_85:
                    unint64_t v3 = v49 + 1;
                    goto LABEL_86;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_85;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v3 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_86;
                }
                v31 += 7;
                unint64_t v29 = v3;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_86:
              *(_DWORD *)(a1 + 16) = v33;
              goto LABEL_92;
            case 4u:
              *(unsigned char *)(a1 + 24) |= 1u;
              unint64_t v35 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v36 = *(void *)this;
              if (v35 > 0xFFFFFFFFFFFFFFF5 || v35 + 10 > v2)
              {
                char v51 = 0;
                unsigned int v52 = 0;
                uint64_t v39 = 0;
                if (v2 <= v35) {
                  unint64_t v3 = *((void *)this + 1);
                }
                else {
                  unint64_t v3 = *((void *)this + 2);
                }
                while (1)
                {
                  if (v3 == v35)
                  {
                    LODWORD(v39) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_91;
                  }
                  unint64_t v53 = v35++;
                  char v54 = *(unsigned char *)(v36 + v53);
                  *((void *)this + 1) = v35;
                  v39 |= (unint64_t)(v54 & 0x7F) << v51;
                  if ((v54 & 0x80) == 0) {
                    break;
                  }
                  v51 += 7;
                  BOOL v14 = v52++ > 8;
                  if (v14)
                  {
                    LODWORD(v39) = 0;
LABEL_90:
                    unint64_t v3 = v53 + 1;
                    goto LABEL_91;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v39) = 0;
                }
                goto LABEL_90;
              }
              char v37 = 0;
              unsigned int v38 = 0;
              uint64_t v39 = 0;
              do
              {
                unint64_t v3 = v35 + 1;
                *((void *)this + 1) = v35 + 1;
                char v40 = *(unsigned char *)(v36 + v35);
                v39 |= (unint64_t)(v40 & 0x7F) << v37;
                if ((v40 & 0x80) == 0) {
                  goto LABEL_91;
                }
                v37 += 7;
                unint64_t v35 = v3;
                BOOL v14 = v38++ > 8;
              }
              while (!v14);
              LODWORD(v39) = 0;
LABEL_91:
              *(_DWORD *)(a1 + 8) = v39;
LABEL_92:
              int v4 = *((unsigned __int8 *)this + 24);
              if (v3 >= v2 || *((unsigned char *)this + 24)) {
                return v4 == 0;
              }
              continue;
            case 5u:
              *(unsigned char *)(a1 + 24) |= 0x10u;
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              if (v3 >= v2)
              {
                BOOL v42 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v41 = *(unsigned __int8 *)(*(void *)this + v3++);
                *((void *)this + 1) = v3;
                BOOL v42 = v41 != 0;
              }
              *(unsigned char *)(a1 + 21) = v42;
              goto LABEL_92;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v3 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              goto LABEL_92;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_190419210(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 24);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::writeVarInt(this);
    char v4 = *(unsigned char *)(v3 + 24);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 24) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this);
  char v4 = *(unsigned char *)(v3 + 24);
  if ((v4 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 1) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::writeVarInt(this);
    if ((*(unsigned char *)(v3 + 24) & 0x10) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::writeVarInt(this);
  char v4 = *(unsigned char *)(v3 + 24);
  if (v4) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 0x10) == 0) {
    return result;
  }
LABEL_11:

  return PB::Writer::write(this);
}

uint64_t sub_1904192D4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB708;
  *(_DWORD *)(result + 28) = 0;
  return result;
}

void sub_1904192FC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190419334(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 28);
  if (v5)
  {
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 28);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "x", *(float *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 28);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "y", *(float *)(a1 + 20));
  if ((*(unsigned char *)(a1 + 28) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "z", *(float *)(a1 + 24));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1904193F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 28) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          unint64_t v2 = *((void *)this + 1) + 8;
          goto LABEL_38;
        case 2u:
          *(unsigned char *)(a1 + 28) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(unsigned char *)(a1 + 28) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFFBLL || v2 + 4 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(_DWORD *)(a1 + 20) = *(_DWORD *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(unsigned char *)(a1 + 28) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFFBLL && v2 + 4 <= *((void *)this + 2))
          {
            *(_DWORD *)(a1 + 24) = *(_DWORD *)(*(void *)this + v2);
LABEL_37:
            unint64_t v2 = *((void *)this + 1) + 4;
LABEL_38:
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190419678(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 28);
  if (v4)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 8));
    char v4 = *(unsigned char *)(v3 + 28);
    if ((v4 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(float *)(v3 + 20));
      if ((*(unsigned char *)(v3 + 28) & 8) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 28) & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(float *)(v3 + 16));
  char v4 = *(unsigned char *)(v3 + 28);
  if ((v4 & 4) != 0) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_9:
  float v5 = *(float *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

uint64_t sub_190419720(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCE648;
  *(_DWORD *)(result + 64) = 0;
  return result;
}

void sub_190419748(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190419780(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 64);
  if (v5)
  {
    PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 64);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  else if ((*(unsigned char *)(a1 + 64) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  PB::TextFormatter::format(this, "swingAccelX", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_16;
  }
LABEL_15:
  PB::TextFormatter::format(this, "swingAccelXStandardized", *(double *)(a1 + 32));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
LABEL_16:
  PB::TextFormatter::format(this, "swingAccelY", *(double *)(a1 + 40));
  char v5 = *(unsigned char *)(a1 + 64);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
LABEL_17:
  PB::TextFormatter::format(this, "swingAccelZ", *(double *)(a1 + 48));
  if ((*(unsigned char *)(a1 + 64) & 0x40) != 0) {
LABEL_8:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 56));
LABEL_9:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_1904198A4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 64) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 2u:
          *(unsigned char *)(a1 + 64) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 3u:
          *(unsigned char *)(a1 + 64) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 5u:
          *(unsigned char *)(a1 + 64) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 6u:
          *(unsigned char *)(a1 + 64) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 7u:
          *(unsigned char *)(a1 + 64) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_44;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_46;
        case 8u:
          *(unsigned char *)(a1 + 64) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_44:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
LABEL_46:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_190419BD4(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 64);
  if ((v4 & 2) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 16));
    char v4 = *(unsigned char *)(v3 + 64);
    if ((v4 & 0x40) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(result + 64) & 0x40) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 4) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_13;
  }
LABEL_12:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
    if ((*(unsigned char *)(v3 + 64) & 8) == 0) {
      return result;
    }
    goto LABEL_15;
  }
LABEL_13:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 64);
  if ((v4 & 0x20) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((v4 & 8) == 0) {
    return result;
  }
LABEL_15:
  double v5 = *(double *)(v3 + 32);

  return PB::Writer::write(this, v5);
}

uint64_t sub_190419CD0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF918;
  *(_DWORD *)(result + 120) = 0;
  return result;
}

void sub_190419CF8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190419D30(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  __int16 v5 = *(_WORD *)(a1 + 120);
  if (v5)
  {
    PB::TextFormatter::format(this, "centerOfMassPrefiltAccelX", *(double *)(a1 + 8));
    __int16 v5 = *(_WORD *)(a1 + 120);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "centerOfMassPrefiltAccelY", *(double *)(a1 + 16));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  PB::TextFormatter::format(this, "centerOfMassPrefiltAccelZ", *(double *)(a1 + 24));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  PB::TextFormatter::format(this, "centripetalAccelX", *(double *)(a1 + 32));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  PB::TextFormatter::format(this, "centripetalAccelY", *(double *)(a1 + 40));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "centripetalAccelZ", *(double *)(a1 + 48));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "centripetalRotationRateX", *(double *)(a1 + 56));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "centripetalRotationRateY", *(double *)(a1 + 64));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "centripetalRotationRateZ", *(double *)(a1 + 72));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 80));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "swingVelocityX", *(double *)(a1 + 88));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "swingVelocityY", *(double *)(a1 + 96));
  __int16 v5 = *(_WORD *)(a1 + 120);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
LABEL_31:
  PB::TextFormatter::format(this, "swingVelocityZ", *(double *)(a1 + 104));
  if ((*(_WORD *)(a1 + 120) & 0x2000) != 0) {
LABEL_15:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 112));
LABEL_16:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_190419F34(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + 120) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 2u:
          *(_WORD *)(a1 + 120) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 3u:
          *(_WORD *)(a1 + 120) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 4u:
          *(_WORD *)(a1 + 120) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 5u:
          *(_WORD *)(a1 + 120) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 6u:
          *(_WORD *)(a1 + 120) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 7u:
          *(_WORD *)(a1 + 120) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 8u:
          *(_WORD *)(a1 + 120) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 9u:
          *(_WORD *)(a1 + 120) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xAu:
          *(_WORD *)(a1 + 120) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xBu:
          *(_WORD *)(a1 + 120) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xCu:
          *(_WORD *)(a1 + 120) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xDu:
          *(_WORD *)(a1 + 120) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_65;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_67;
        case 0xEu:
          *(_WORD *)(a1 + 120) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_65:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_67:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19041A404(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  __int16 v4 = *(_WORD *)(result + 120);
  if ((v4 & 0x200) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 80));
    __int16 v4 = *(_WORD *)(v3 + 120);
    if ((v4 & 0x2000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_18;
    }
  }
  else if ((*(_WORD *)(result + 120) & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 0x40) == 0) {
      goto LABEL_7;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x40) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x100) == 0) {
      goto LABEL_9;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x100) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x10) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 1) == 0)
  {
LABEL_13:
    if ((v4 & 2) == 0) {
      goto LABEL_14;
    }
LABEL_28:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
    if ((*(_WORD *)(v3 + 120) & 4) == 0) {
      return result;
    }
    goto LABEL_29;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  __int16 v4 = *(_WORD *)(v3 + 120);
  if ((v4 & 2) != 0) {
    goto LABEL_28;
  }
LABEL_14:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_29:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

void *sub_19041A5C4(void *result)
{
  *uint64_t result = &unk_1EDFCD340;
  result[28] = 0;
  return result;
}

void sub_19041A5EC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19041A624(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(void *)(a1 + 224);
  if (v5)
  {
    PB::TextFormatter::format(this, "emptyField0", *(double *)(a1 + 8));
    uint64_t v5 = *(void *)(a1 + 224);
    if ((v5 & 0x20000000) == 0)
    {
LABEL_3:
      if ((v5 & 0x800000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_42;
    }
  }
  else if ((v5 & 0x20000000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "emptyField1");
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x800000) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "emptyField2");
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 4) == 0) {
      goto LABEL_6;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "groundContactTime", *(double *)(a1 + 16));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 4) == 0)
  {
LABEL_6:
    if ((v5 & 8) == 0) {
      goto LABEL_7;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "groundContactTimeCadence", *(double *)(a1 + 24));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 8) == 0)
  {
LABEL_7:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "groundContactTimeGrade", *(double *)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "groundContactTimeGradeSource");
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "groundContactTimeGradeType");
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x40000000) == 0)
  {
LABEL_10:
    if ((v5 & 0x10) == 0) {
      goto LABEL_11;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "groundContactTimeIsValid");
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x10) == 0)
  {
LABEL_11:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "groundContactTimePace", *(double *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_12:
    if ((v5 & 0x20) == 0) {
      goto LABEL_13;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "groundContactTimeReportingStatus");
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x20) == 0)
  {
LABEL_13:
    if ((v5 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "groundContactTimeUnsmoothed", *(double *)(a1 + 48));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x40) == 0)
  {
LABEL_14:
    if ((v5 & 0x80000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "groundContactTimeWindowEndTime", *(double *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x80000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x100000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "isFlat");
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x100000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x80) == 0) {
      goto LABEL_17;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "isFormBasedStrideLength");
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x80) == 0)
  {
LABEL_17:
    if ((v5 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 64));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x100) == 0)
  {
LABEL_18:
    if ((v5 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 72));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x200) == 0)
  {
LABEL_19:
    if ((v5 & 0x400) == 0) {
      goto LABEL_20;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "strideLengthGrade", *(double *)(a1 + 80));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x400) == 0)
  {
LABEL_20:
    if ((v5 & 0x200000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "strideLengthGradeType", *(double *)(a1 + 88));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x200000000) == 0)
  {
LABEL_21:
    if ((v5 & 0x800) == 0) {
      goto LABEL_22;
    }
    goto LABEL_60;
  }
LABEL_59:
  PB::TextFormatter::format(this, "strideLengthIsValid");
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x800) == 0)
  {
LABEL_22:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_61;
  }
LABEL_60:
  PB::TextFormatter::format(this, "strideLengthPace", *(double *)(a1 + 96));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_23:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_62;
  }
LABEL_61:
  PB::TextFormatter::format(this, "strideLengthReportingStatus");
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x1000) == 0)
  {
LABEL_24:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_63;
  }
LABEL_62:
  PB::TextFormatter::format(this, "strideLengthUncalibrated", *(double *)(a1 + 104));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x2000) == 0)
  {
LABEL_25:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_64;
  }
LABEL_63:
  PB::TextFormatter::format(this, "strideLengthUnsmoothed", *(double *)(a1 + 112));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x4000) == 0)
  {
LABEL_26:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_65;
  }
LABEL_64:
  PB::TextFormatter::format(this, "strideLengthWindowEndTime", *(double *)(a1 + 120));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x8000) == 0)
  {
LABEL_27:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_66;
  }
LABEL_65:
  PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 128));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x10000) == 0)
  {
LABEL_28:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_67;
  }
LABEL_66:
  PB::TextFormatter::format(this, "verticalOscCadence", *(double *)(a1 + 136));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x20000) == 0)
  {
LABEL_29:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_68;
  }
LABEL_67:
  PB::TextFormatter::format(this, "verticalOscPace", *(double *)(a1 + 144));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x40000) == 0)
  {
LABEL_30:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_69;
  }
LABEL_68:
  PB::TextFormatter::format(this, "verticalOscWindowEndTime", *(double *)(a1 + 152));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x80000) == 0)
  {
LABEL_31:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_70;
  }
LABEL_69:
  PB::TextFormatter::format(this, "verticalOscillation", *(double *)(a1 + 160));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x100000) == 0)
  {
LABEL_32:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_71;
  }
LABEL_70:
  PB::TextFormatter::format(this, "verticalOscillationGrade", *(double *)(a1 + 168));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x200000) == 0)
  {
LABEL_33:
    if ((v5 & 0x400000000) == 0) {
      goto LABEL_34;
    }
    goto LABEL_72;
  }
LABEL_71:
  PB::TextFormatter::format(this, "verticalOscillationGradeType", *(double *)(a1 + 176));
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x400000000) == 0)
  {
LABEL_34:
    if ((v5 & 0x10000000) == 0) {
      goto LABEL_35;
    }
    goto LABEL_73;
  }
LABEL_72:
  PB::TextFormatter::format(this, "verticalOscillationIsValid");
  uint64_t v5 = *(void *)(a1 + 224);
  if ((v5 & 0x10000000) == 0)
  {
LABEL_35:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
LABEL_73:
  PB::TextFormatter::format(this, "verticalOscillationReportingStatus");
  if ((*(void *)(a1 + 224) & 0x400000) != 0) {
LABEL_36:
  }
    PB::TextFormatter::format(this, "verticalOscillationUnsmoothed", *(double *)(a1 + 184));
LABEL_37:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19041AAC8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(void *)(a1 + 224) |= 0x40uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 2u:
              *(void *)(a1 + 224) |= 0x80uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 3u:
              *(void *)(a1 + 224) |= 0x200000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 220) = v22;
              goto LABEL_203;
            case 4u:
              *(void *)(a1 + 224) |= 2uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 5u:
              *(void *)(a1 + 224) |= 0x40000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *(unsigned char *)(a1 + 217) = v24;
              goto LABEL_203;
            case 6u:
              *(void *)(a1 + 224) |= 0x80000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 7u:
              *(void *)(a1 + 224) |= 0x400000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *(unsigned char *)(a1 + 221) = v26;
              goto LABEL_203;
            case 8u:
              *(void *)(a1 + 224) |= 1uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 9u:
              *(void *)(a1 + 224) |= 0x20000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 216) = v28;
              goto LABEL_203;
            case 0xAu:
              *(void *)(a1 + 224) |= 0x80000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v30 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v29 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v30 = v29 != 0;
              }
              *(unsigned char *)(a1 + 218) = v30;
              goto LABEL_203;
            case 0xBu:
              *(void *)(a1 + 224) |= 0x8000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0xCu:
              *(void *)(a1 + 224) |= 0x40000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0xDu:
              *(void *)(a1 + 224) |= 0x4000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0xEu:
              *(void *)(a1 + 224) |= 0x8000000uLL;
              unint64_t v31 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v32 = *(void *)this;
              if (v31 > 0xFFFFFFFFFFFFFFF5 || v31 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v35 = 0;
                if (v2 <= v31) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v31)
                  {
                    LODWORD(v35) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_212;
                  }
                  unint64_t v71 = v31++;
                  char v72 = *(unsigned char *)(v32 + v71);
                  *((void *)this + 1) = v31;
                  v35 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v35) = 0;
LABEL_211:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_212;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v35) = 0;
                }
                goto LABEL_211;
              }
              char v33 = 0;
              unsigned int v34 = 0;
              uint64_t v35 = 0;
              do
              {
                unint64_t v2 = v31 + 1;
                *((void *)this + 1) = v31 + 1;
                char v36 = *(unsigned char *)(v32 + v31);
                v35 |= (unint64_t)(v36 & 0x7F) << v33;
                if ((v36 & 0x80) == 0) {
                  goto LABEL_212;
                }
                v33 += 7;
                unint64_t v31 = v2;
                BOOL v14 = v34++ > 8;
              }
              while (!v14);
              LODWORD(v35) = 0;
LABEL_212:
              *(_DWORD *)(a1 + 208) = v35;
              goto LABEL_203;
            case 0xFu:
              *(void *)(a1 + 224) |= 0x4000000uLL;
              unint64_t v37 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v38 = *(void *)this;
              if (v37 > 0xFFFFFFFFFFFFFFF5 || v37 + 10 > v2)
              {
                char v73 = 0;
                unsigned int v74 = 0;
                uint64_t v41 = 0;
                if (v2 <= v37) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v37)
                  {
                    LODWORD(v41) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_217;
                  }
                  unint64_t v75 = v37++;
                  char v76 = *(unsigned char *)(v38 + v75);
                  *((void *)this + 1) = v37;
                  v41 |= (unint64_t)(v76 & 0x7F) << v73;
                  if ((v76 & 0x80) == 0) {
                    break;
                  }
                  v73 += 7;
                  BOOL v14 = v74++ > 8;
                  if (v14)
                  {
                    LODWORD(v41) = 0;
LABEL_216:
                    unint64_t v2 = v75 + 1;
                    goto LABEL_217;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v41) = 0;
                }
                goto LABEL_216;
              }
              char v39 = 0;
              unsigned int v40 = 0;
              uint64_t v41 = 0;
              do
              {
                unint64_t v2 = v37 + 1;
                *((void *)this + 1) = v37 + 1;
                char v42 = *(unsigned char *)(v38 + v37);
                v41 |= (unint64_t)(v42 & 0x7F) << v39;
                if ((v42 & 0x80) == 0) {
                  goto LABEL_217;
                }
                v39 += 7;
                unint64_t v37 = v2;
                BOOL v14 = v40++ > 8;
              }
              while (!v14);
              LODWORD(v41) = 0;
LABEL_217:
              *(_DWORD *)(a1 + 204) = v41;
              goto LABEL_203;
            case 0x10u:
              *(void *)(a1 + 224) |= 0x10000000uLL;
              unint64_t v43 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v44 = *(void *)this;
              if (v43 > 0xFFFFFFFFFFFFFFF5 || v43 + 10 > v2)
              {
                char v77 = 0;
                unsigned int v78 = 0;
                uint64_t v47 = 0;
                if (v2 <= v43) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v43)
                  {
                    LODWORD(v47) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_222;
                  }
                  unint64_t v79 = v43++;
                  char v80 = *(unsigned char *)(v44 + v79);
                  *((void *)this + 1) = v43;
                  v47 |= (unint64_t)(v80 & 0x7F) << v77;
                  if ((v80 & 0x80) == 0) {
                    break;
                  }
                  v77 += 7;
                  BOOL v14 = v78++ > 8;
                  if (v14)
                  {
                    LODWORD(v47) = 0;
LABEL_221:
                    unint64_t v2 = v79 + 1;
                    goto LABEL_222;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v47) = 0;
                }
                goto LABEL_221;
              }
              char v45 = 0;
              unsigned int v46 = 0;
              uint64_t v47 = 0;
              do
              {
                unint64_t v2 = v43 + 1;
                *((void *)this + 1) = v43 + 1;
                char v48 = *(unsigned char *)(v44 + v43);
                v47 |= (unint64_t)(v48 & 0x7F) << v45;
                if ((v48 & 0x80) == 0) {
                  goto LABEL_222;
                }
                v45 += 7;
                unint64_t v43 = v2;
                BOOL v14 = v46++ > 8;
              }
              while (!v14);
              LODWORD(v47) = 0;
LABEL_222:
              *(_DWORD *)(a1 + 212) = v47;
              goto LABEL_203;
            case 0x11u:
              *(void *)(a1 + 224) |= 0x800000uLL;
              unint64_t v49 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v50 = *(void *)this;
              if (v49 > 0xFFFFFFFFFFFFFFF5 || v49 + 10 > v2)
              {
                char v81 = 0;
                unsigned int v82 = 0;
                uint64_t v53 = 0;
                if (v2 <= v49) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v49)
                  {
                    LODWORD(v53) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_227;
                  }
                  unint64_t v83 = v49++;
                  char v84 = *(unsigned char *)(v50 + v83);
                  *((void *)this + 1) = v49;
                  v53 |= (unint64_t)(v84 & 0x7F) << v81;
                  if ((v84 & 0x80) == 0) {
                    break;
                  }
                  v81 += 7;
                  BOOL v14 = v82++ > 8;
                  if (v14)
                  {
                    LODWORD(v53) = 0;
LABEL_226:
                    unint64_t v2 = v83 + 1;
                    goto LABEL_227;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v53) = 0;
                }
                goto LABEL_226;
              }
              char v51 = 0;
              unsigned int v52 = 0;
              uint64_t v53 = 0;
              do
              {
                unint64_t v2 = v49 + 1;
                *((void *)this + 1) = v49 + 1;
                char v54 = *(unsigned char *)(v50 + v49);
                v53 |= (unint64_t)(v54 & 0x7F) << v51;
                if ((v54 & 0x80) == 0) {
                  goto LABEL_227;
                }
                v51 += 7;
                unint64_t v49 = v2;
                BOOL v14 = v52++ > 8;
              }
              while (!v14);
              LODWORD(v53) = 0;
LABEL_227:
              *(_DWORD *)(a1 + 192) = v53;
              goto LABEL_203;
            case 0x12u:
              *(void *)(a1 + 224) |= 0x1000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x13u:
              *(void *)(a1 + 224) |= 0x2000000uLL;
              unint64_t v55 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v56 = *(void *)this;
              if (v55 > 0xFFFFFFFFFFFFFFF5 || v55 + 10 > v2)
              {
                char v85 = 0;
                unsigned int v86 = 0;
                uint64_t v59 = 0;
                if (v2 <= v55) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v55)
                  {
                    LODWORD(v59) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_232;
                  }
                  unint64_t v87 = v55++;
                  char v88 = *(unsigned char *)(v56 + v87);
                  *((void *)this + 1) = v55;
                  v59 |= (unint64_t)(v88 & 0x7F) << v85;
                  if ((v88 & 0x80) == 0) {
                    break;
                  }
                  v85 += 7;
                  BOOL v14 = v86++ > 8;
                  if (v14)
                  {
                    LODWORD(v59) = 0;
LABEL_231:
                    unint64_t v2 = v87 + 1;
                    goto LABEL_232;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v59) = 0;
                }
                goto LABEL_231;
              }
              char v57 = 0;
              unsigned int v58 = 0;
              uint64_t v59 = 0;
              do
              {
                unint64_t v2 = v55 + 1;
                *((void *)this + 1) = v55 + 1;
                char v60 = *(unsigned char *)(v56 + v55);
                v59 |= (unint64_t)(v60 & 0x7F) << v57;
                if ((v60 & 0x80) == 0) {
                  goto LABEL_232;
                }
                v57 += 7;
                unint64_t v55 = v2;
                BOOL v14 = v58++ > 8;
              }
              while (!v14);
              LODWORD(v59) = 0;
LABEL_232:
              *(_DWORD *)(a1 + 200) = v59;
              goto LABEL_203;
            case 0x14u:
              *(void *)(a1 + 224) |= 0x1000000uLL;
              unint64_t v61 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v62 = *(void *)this;
              if (v61 > 0xFFFFFFFFFFFFFFF5 || v61 + 10 > v2)
              {
                char v89 = 0;
                unsigned int v90 = 0;
                uint64_t v65 = 0;
                if (v2 <= v61) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v61)
                  {
                    LODWORD(v65) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_237;
                  }
                  unint64_t v91 = v61++;
                  char v92 = *(unsigned char *)(v62 + v91);
                  *((void *)this + 1) = v61;
                  v65 |= (unint64_t)(v92 & 0x7F) << v89;
                  if ((v92 & 0x80) == 0) {
                    break;
                  }
                  v89 += 7;
                  BOOL v14 = v90++ > 8;
                  if (v14)
                  {
                    LODWORD(v65) = 0;
LABEL_236:
                    unint64_t v2 = v91 + 1;
                    goto LABEL_237;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v65) = 0;
                }
                goto LABEL_236;
              }
              char v63 = 0;
              unsigned int v64 = 0;
              uint64_t v65 = 0;
              do
              {
                unint64_t v2 = v61 + 1;
                *((void *)this + 1) = v61 + 1;
                char v66 = *(unsigned char *)(v62 + v61);
                v65 |= (unint64_t)(v66 & 0x7F) << v63;
                if ((v66 & 0x80) == 0) {
                  goto LABEL_237;
                }
                v63 += 7;
                unint64_t v61 = v2;
                BOOL v14 = v64++ > 8;
              }
              while (!v14);
              LODWORD(v65) = 0;
LABEL_237:
              *(_DWORD *)(a1 + 196) = v65;
LABEL_203:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x15u:
              *(void *)(a1 + 224) |= 8uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x16u:
              *(void *)(a1 + 224) |= 4uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x17u:
              *(void *)(a1 + 224) |= 0x10uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x18u:
              *(void *)(a1 + 224) |= 0x100000000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v68 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v67 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v68 = v67 != 0;
              }
              *(unsigned char *)(a1 + 219) = v68;
              goto LABEL_203;
            case 0x19u:
              *(void *)(a1 + 224) |= 0x100uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Au:
              *(void *)(a1 + 224) |= 0x800uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Bu:
              *(void *)(a1 + 224) |= 0x10000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Cu:
              *(void *)(a1 + 224) |= 0x20000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Du:
              *(void *)(a1 + 224) |= 0x20uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Eu:
              *(void *)(a1 + 224) |= 0x400000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 184) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x1Fu:
              *(void *)(a1 + 224) |= 0x2000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x20u:
              *(void *)(a1 + 224) |= 0x100000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x21u:
              *(void *)(a1 + 224) |= 0x200uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x22u:
              *(void *)(a1 + 224) |= 0x200000uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_146;
              }
              *(void *)(a1 + 176) = *(void *)(*(void *)this + v2);
              goto LABEL_202;
            case 0x23u:
              *(void *)(a1 + 224) |= 0x400uLL;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
LABEL_202:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_146:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_203;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_203;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19041B92C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 224);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56));
    uint64_t v4 = *(void *)(v3 + 224);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x200000000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_39;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200000000) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 2) == 0)
  {
LABEL_5:
    if ((v4 & 0x40000000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x40000000) == 0)
  {
LABEL_6:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x80000) == 0)
  {
LABEL_7:
    if ((v4 & 0x400000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x400000000) == 0)
  {
LABEL_8:
    if ((v4 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 1) == 0)
  {
LABEL_9:
    if ((v4 & 0x20000000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20000000) == 0)
  {
LABEL_10:
    if ((v4 & 0x80000000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x80000000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x40000) == 0)
  {
LABEL_13:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 152));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x4000) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_15:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_16:
    if ((v4 & 0x10000000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10000000) == 0)
  {
LABEL_17:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x800000) == 0)
  {
LABEL_18:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x1000) == 0)
  {
LABEL_19:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_20:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_56;
  }
LABEL_55:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_21:
    if ((v4 & 8) == 0) {
      goto LABEL_22;
    }
    goto LABEL_57;
  }
LABEL_56:
  uint64_t result = PB::Writer::writeVarInt(this);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 8) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_58;
  }
LABEL_57:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 0x10) == 0) {
      goto LABEL_24;
    }
    goto LABEL_59;
  }
LABEL_58:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10) == 0)
  {
LABEL_24:
    if ((v4 & 0x100000000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_60;
  }
LABEL_59:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100000000) == 0)
  {
LABEL_25:
    if ((v4 & 0x100) == 0) {
      goto LABEL_26;
    }
    goto LABEL_61;
  }
LABEL_60:
  uint64_t result = PB::Writer::write(this);
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100) == 0)
  {
LABEL_26:
    if ((v4 & 0x800) == 0) {
      goto LABEL_27;
    }
    goto LABEL_62;
  }
LABEL_61:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x800) == 0)
  {
LABEL_27:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_63;
  }
LABEL_62:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x10000) == 0)
  {
LABEL_28:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_29;
    }
    goto LABEL_64;
  }
LABEL_63:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20000) == 0)
  {
LABEL_29:
    if ((v4 & 0x20) == 0) {
      goto LABEL_30;
    }
    goto LABEL_65;
  }
LABEL_64:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x20) == 0)
  {
LABEL_30:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_31;
    }
    goto LABEL_66;
  }
LABEL_65:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x400000) == 0)
  {
LABEL_31:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_32;
    }
    goto LABEL_67;
  }
LABEL_66:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 184));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x2000) == 0)
  {
LABEL_32:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_68;
  }
LABEL_67:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x100000) == 0)
  {
LABEL_33:
    if ((v4 & 0x200) == 0) {
      goto LABEL_34;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200) == 0)
  {
LABEL_34:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_35;
    }
LABEL_70:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176));
    if ((*(void *)(v3 + 224) & 0x400) == 0) {
      return result;
    }
    goto LABEL_71;
  }
LABEL_69:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  uint64_t v4 = *(void *)(v3 + 224);
  if ((v4 & 0x200000) != 0) {
    goto LABEL_70;
  }
LABEL_35:
  if ((v4 & 0x400) == 0) {
    return result;
  }
LABEL_71:
  double v5 = *(double *)(v3 + 88);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19041BD38(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCB740;
  *(_DWORD *)(result + 128) = 0;
  return result;
}

void sub_19041BD60(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19041BD98(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x1000) != 0)
  {
    PB::TextFormatter::format(this, "activityType");
    int v5 = *(_DWORD *)(a1 + 128);
    if ((v5 & 0x2000) == 0)
    {
LABEL_3:
      if ((v5 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_29;
    }
  }
  else if ((v5 & 0x2000) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "activityTypeWithoutOverride");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 1) == 0)
  {
LABEL_4:
    if ((v5 & 2) == 0) {
      goto LABEL_5;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "currentCadence", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 2) == 0)
  {
LABEL_5:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "currentPace", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x4000) == 0)
  {
LABEL_6:
    if ((v5 & 4) == 0) {
      goto LABEL_7;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "elevationSource");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 4) == 0)
  {
LABEL_7:
    if ((v5 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "eta", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 8) == 0)
  {
LABEL_8:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x8000) == 0)
  {
LABEL_9:
    if ((v5 & 0x10) == 0) {
      goto LABEL_10;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "gradeOnsetCounter");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10) == 0)
  {
LABEL_10:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "horizSpeed", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x10000) == 0)
  {
LABEL_11:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "isArmConstrainedStateValid");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20000) == 0)
  {
LABEL_12:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "isGradeOnsetEscalated");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40000) == 0)
  {
LABEL_13:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "isRunning");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80000) == 0)
  {
LABEL_14:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "isValid");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100000) == 0)
  {
LABEL_15:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "isWeightSet");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200000) == 0)
  {
LABEL_16:
    if ((v5 & 0x20) == 0) {
      goto LABEL_17;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "isWorkoutSelected");
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x20) == 0)
  {
LABEL_17:
    if ((v5 & 0x40) == 0) {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "powerWattage", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x40) == 0)
  {
LABEL_18:
    if ((v5 & 0x80) == 0) {
      goto LABEL_19;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x80) == 0)
  {
LABEL_19:
    if ((v5 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "userHeight", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x100) == 0)
  {
LABEL_20:
    if ((v5 & 0x200) == 0) {
      goto LABEL_21;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "userWeight", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x200) == 0)
  {
LABEL_21:
    if ((v5 & 0x400) == 0) {
      goto LABEL_22;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "verticalSpeed", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 128);
  if ((v5 & 0x400) == 0)
  {
LABEL_22:
    if ((v5 & 0x800) == 0) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_47:
  PB::TextFormatter::format(this, "wLoad", *(double *)(a1 + 88));
  if ((*(_DWORD *)(a1 + 128) & 0x800) != 0) {
LABEL_23:
  }
    PB::TextFormatter::format(this, "workrateMETs", *(double *)(a1 + 96));
LABEL_24:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19041C09C(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 128) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 2u:
              *(_DWORD *)(a1 + 128) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 3u:
              *(_DWORD *)(a1 + 128) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 4u:
              *(_DWORD *)(a1 + 128) |= 0x100000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 124) = v22;
              goto LABEL_162;
            case 5u:
              *(_DWORD *)(a1 + 128) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 6u:
              *(_DWORD *)(a1 + 128) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 7u:
              *(_DWORD *)(a1 + 128) |= 0x2000u;
              unint64_t v23 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v24 = *(void *)this;
              if (v23 > 0xFFFFFFFFFFFFFFF5 || v23 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v27 = 0;
                if (v2 <= v23) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v23)
                  {
                    LODWORD(v27) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_146;
                  }
                  unint64_t v59 = v23++;
                  char v60 = *(unsigned char *)(v24 + v59);
                  *((void *)this + 1) = v23;
                  v27 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v27) = 0;
LABEL_145:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_146;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v27) = 0;
                }
                goto LABEL_145;
              }
              char v25 = 0;
              unsigned int v26 = 0;
              uint64_t v27 = 0;
              do
              {
                unint64_t v2 = v23 + 1;
                *((void *)this + 1) = v23 + 1;
                char v28 = *(unsigned char *)(v24 + v23);
                v27 |= (unint64_t)(v28 & 0x7F) << v25;
                if ((v28 & 0x80) == 0) {
                  goto LABEL_146;
                }
                v25 += 7;
                unint64_t v23 = v2;
                BOOL v14 = v26++ > 8;
              }
              while (!v14);
              LODWORD(v27) = 0;
LABEL_146:
              *(_DWORD *)(a1 + 108) = v27;
              goto LABEL_162;
            case 8u:
              *(_DWORD *)(a1 + 128) |= 0x1000u;
              unint64_t v29 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v30 = *(void *)this;
              if (v29 > 0xFFFFFFFFFFFFFFF5 || v29 + 10 > v2)
              {
                char v61 = 0;
                unsigned int v62 = 0;
                uint64_t v33 = 0;
                if (v2 <= v29) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v29)
                  {
                    LODWORD(v33) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_151;
                  }
                  unint64_t v63 = v29++;
                  char v64 = *(unsigned char *)(v30 + v63);
                  *((void *)this + 1) = v29;
                  v33 |= (unint64_t)(v64 & 0x7F) << v61;
                  if ((v64 & 0x80) == 0) {
                    break;
                  }
                  v61 += 7;
                  BOOL v14 = v62++ > 8;
                  if (v14)
                  {
                    LODWORD(v33) = 0;
LABEL_150:
                    unint64_t v2 = v63 + 1;
                    goto LABEL_151;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v33) = 0;
                }
                goto LABEL_150;
              }
              char v31 = 0;
              unsigned int v32 = 0;
              uint64_t v33 = 0;
              do
              {
                unint64_t v2 = v29 + 1;
                *((void *)this + 1) = v29 + 1;
                char v34 = *(unsigned char *)(v30 + v29);
                v33 |= (unint64_t)(v34 & 0x7F) << v31;
                if ((v34 & 0x80) == 0) {
                  goto LABEL_151;
                }
                v31 += 7;
                unint64_t v29 = v2;
                BOOL v14 = v32++ > 8;
              }
              while (!v14);
              LODWORD(v33) = 0;
LABEL_151:
              *(_DWORD *)(a1 + 104) = v33;
              goto LABEL_162;
            case 9u:
              *(_DWORD *)(a1 + 128) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xAu:
              *(_DWORD *)(a1 + 128) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xBu:
              *(_DWORD *)(a1 + 128) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xCu:
              *(_DWORD *)(a1 + 128) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v36 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v35 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v36 = v35 != 0;
              }
              *(unsigned char *)(a1 + 123) = v36;
              goto LABEL_162;
            case 0xDu:
              *(_DWORD *)(a1 + 128) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xEu:
              *(_DWORD *)(a1 + 128) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0xFu:
              *(_DWORD *)(a1 + 128) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_141;
            case 0x10u:
              *(_DWORD *)(a1 + 128) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
LABEL_141:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_162;
            case 0x11u:
              *(_DWORD *)(a1 + 128) |= 0x200000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v38 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v37 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v38 = v37 != 0;
              }
              *(unsigned char *)(a1 + 125) = v38;
              goto LABEL_162;
            case 0x12u:
              *(_DWORD *)(a1 + 128) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v40 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v39 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v40 = v39 != 0;
              }
              *(unsigned char *)(a1 + 121) = v40;
              goto LABEL_162;
            case 0x13u:
              *(_DWORD *)(a1 + 128) |= 0x8000u;
              unint64_t v41 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v42 = *(void *)this;
              if (v41 > 0xFFFFFFFFFFFFFFF5 || v41 + 10 > v2)
              {
                char v65 = 0;
                unsigned int v66 = 0;
                uint64_t v45 = 0;
                if (v2 <= v41) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v41)
                  {
                    LODWORD(v45) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_156;
                  }
                  unint64_t v67 = v41++;
                  char v68 = *(unsigned char *)(v42 + v67);
                  *((void *)this + 1) = v41;
                  v45 |= (unint64_t)(v68 & 0x7F) << v65;
                  if ((v68 & 0x80) == 0) {
                    break;
                  }
                  v65 += 7;
                  BOOL v14 = v66++ > 8;
                  if (v14)
                  {
                    LODWORD(v45) = 0;
LABEL_155:
                    unint64_t v2 = v67 + 1;
                    goto LABEL_156;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v45) = 0;
                }
                goto LABEL_155;
              }
              char v43 = 0;
              unsigned int v44 = 0;
              uint64_t v45 = 0;
              do
              {
                unint64_t v2 = v41 + 1;
                *((void *)this + 1) = v41 + 1;
                char v46 = *(unsigned char *)(v42 + v41);
                v45 |= (unint64_t)(v46 & 0x7F) << v43;
                if ((v46 & 0x80) == 0) {
                  goto LABEL_156;
                }
                v43 += 7;
                unint64_t v41 = v2;
                BOOL v14 = v44++ > 8;
              }
              while (!v14);
              LODWORD(v45) = 0;
LABEL_156:
              *(_DWORD *)(a1 + 116) = v45;
              goto LABEL_162;
            case 0x14u:
              *(_DWORD *)(a1 + 128) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 120) = v48;
              goto LABEL_162;
            case 0x15u:
              *(_DWORD *)(a1 + 128) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v50 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v49 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v50 = v49 != 0;
              }
              *(unsigned char *)(a1 + 122) = v50;
              goto LABEL_162;
            case 0x16u:
              *(_DWORD *)(a1 + 128) |= 0x4000u;
              unint64_t v51 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v52 = *(void *)this;
              if (v51 > 0xFFFFFFFFFFFFFFF5 || v51 + 10 > v2)
              {
                char v69 = 0;
                unsigned int v70 = 0;
                uint64_t v55 = 0;
                if (v2 <= v51) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v51)
                  {
                    LODWORD(v55) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_161;
                  }
                  unint64_t v71 = v51++;
                  char v72 = *(unsigned char *)(v52 + v71);
                  *((void *)this + 1) = v51;
                  v55 |= (unint64_t)(v72 & 0x7F) << v69;
                  if ((v72 & 0x80) == 0) {
                    break;
                  }
                  v69 += 7;
                  BOOL v14 = v70++ > 8;
                  if (v14)
                  {
                    LODWORD(v55) = 0;
LABEL_160:
                    unint64_t v2 = v71 + 1;
                    goto LABEL_161;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v55) = 0;
                }
                goto LABEL_160;
              }
              char v53 = 0;
              unsigned int v54 = 0;
              uint64_t v55 = 0;
              do
              {
                unint64_t v2 = v51 + 1;
                *((void *)this + 1) = v51 + 1;
                char v56 = *(unsigned char *)(v52 + v51);
                v55 |= (unint64_t)(v56 & 0x7F) << v53;
                if ((v56 & 0x80) == 0) {
                  goto LABEL_161;
                }
                v53 += 7;
                unint64_t v51 = v2;
                BOOL v14 = v54++ > 8;
              }
              while (!v14);
              LODWORD(v55) = 0;
LABEL_161:
              *(_DWORD *)(a1 + 112) = v55;
LABEL_162:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_162;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19041CA64(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 128);
  if ((v4 & 0x40) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 56));
    int v4 = *(_DWORD *)(v3 + 128);
    if ((v4 & 0x20) == 0)
    {
LABEL_3:
      if ((v4 & 0x100) == 0) {
        goto LABEL_4;
      }
      goto LABEL_26;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100) == 0)
  {
LABEL_4:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x100000) == 0)
  {
LABEL_5:
    if ((v4 & 0x800) == 0) {
      goto LABEL_6;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x800) == 0)
  {
LABEL_6:
    if ((v4 & 0x400) == 0) {
      goto LABEL_7;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x400) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x2000) == 0)
  {
LABEL_8:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x1000) == 0)
  {
LABEL_9:
    if ((v4 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 2) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 4) == 0) {
      goto LABEL_12;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 4) == 0)
  {
LABEL_12:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80000) == 0)
  {
LABEL_13:
    if ((v4 & 0x10) == 0) {
      goto LABEL_14;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10) == 0)
  {
LABEL_14:
    if ((v4 & 0x200) == 0) {
      goto LABEL_15;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200) == 0)
  {
LABEL_15:
    if ((v4 & 0x80) == 0) {
      goto LABEL_16;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x80) == 0)
  {
LABEL_16:
    if ((v4 & 1) == 0) {
      goto LABEL_17;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 1) == 0)
  {
LABEL_17:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x200000) == 0)
  {
LABEL_18:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x20000) == 0)
  {
LABEL_19:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x8000) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_22;
    }
LABEL_44:
    uint64_t result = PB::Writer::write(this);
    if ((*(_DWORD *)(v3 + 128) & 0x4000) == 0) {
      return result;
    }
    goto LABEL_45;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 128);
  if ((v4 & 0x40000) != 0) {
    goto LABEL_44;
  }
LABEL_22:
  if ((v4 & 0x4000) == 0) {
    return result;
  }
LABEL_45:

  return PB::Writer::writeVarInt(this);
}

uint64_t sub_19041CD04(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD848;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

void sub_19041CD2C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19041CD64(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 48);
  if (v5)
  {
    PB::TextFormatter::format(this, "primaryAxisX", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 48);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 48) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "primaryAxisY", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
LABEL_12:
  PB::TextFormatter::format(this, "primaryAxisZ", *(double *)(a1 + 24));
  char v5 = *(unsigned char *)(a1 + 48);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_13:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 32));
  if ((*(unsigned char *)(a1 + 48) & 0x10) != 0) {
LABEL_6:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 40));
LABEL_7:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19041CE48(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 48) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 2u:
          *(unsigned char *)(a1 + 48) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 3u:
          *(unsigned char *)(a1 + 48) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 4u:
          *(unsigned char *)(a1 + 48) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_38;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_40;
        case 5u:
          *(unsigned char *)(a1 + 48) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
LABEL_40:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_38:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19041D0FC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 48);
  if ((v4 & 8) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 32));
    char v4 = *(unsigned char *)(v3 + 48);
    if ((v4 & 0x10) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 48) & 0x10) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 1) == 0)
  {
LABEL_4:
    if ((v4 & 2) == 0) {
      goto LABEL_5;
    }
LABEL_10:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
    if ((*(unsigned char *)(v3 + 48) & 4) == 0) {
      return result;
    }
    goto LABEL_11;
  }
LABEL_9:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  char v4 = *(unsigned char *)(v3 + 48);
  if ((v4 & 2) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v4 & 4) == 0) {
    return result;
  }
LABEL_11:
  double v5 = *(double *)(v3 + 24);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19041D1C0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCDC38;
  *(_DWORD *)(result + 188) = 0;
  return result;
}

void sub_19041D1E8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19041D220(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 188);
  if (v5)
  {
    PB::TextFormatter::format(this, "algDelay", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 188);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_35;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "biasFactor", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "deltaCalibratedPedometerDistance", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "deltaOdometerDistance", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "deltaOdometerTime", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "deltaPedometerTime", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "deltaRawPedometerDistance", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x100000) == 0)
  {
LABEL_10:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "gestureState");
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x200000) == 0)
  {
LABEL_11:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "gestureType");
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x800000) == 0)
  {
LABEL_12:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "interruptFlag");
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x1000000) == 0)
  {
LABEL_13:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "isTrackRunOdometer");
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_14:
    if ((v5 & 0x4000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "isValidOdometerSpeed");
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x4000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x8000000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "isValidPedometerSpeed");
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x8000000) == 0)
  {
LABEL_16:
    if ((v5 & 0x100) == 0) {
      goto LABEL_17;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "isValidRunningSpeed");
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x100) == 0)
  {
LABEL_17:
    if ((v5 & 0x200) == 0) {
      goto LABEL_18;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "kalmanEpsOdometer", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x200) == 0)
  {
LABEL_18:
    if ((v5 & 0x400) == 0) {
      goto LABEL_19;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "kalmanEpsPedometer", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x400) == 0)
  {
LABEL_19:
    if ((v5 & 0x800) == 0) {
      goto LABEL_20;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "kalmanGainOdometer", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x800) == 0)
  {
LABEL_20:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "kalmanGainPedometer", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x1000) == 0)
  {
LABEL_21:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "kalmanMeasurementNoiseOdometer", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x2000) == 0)
  {
LABEL_22:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "kalmanMeasurementNoisePedometer", *(double *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x4000) == 0)
  {
LABEL_23:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "kalmanProcessNoise", *(double *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x8000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_56;
  }
LABEL_55:
  PB::TextFormatter::format(this, "kalmanStateCovariance", *(double *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_57;
  }
LABEL_56:
  PB::TextFormatter::format(this, "odometerQuality");
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x10000) == 0)
  {
LABEL_26:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_27;
    }
    goto LABEL_58;
  }
LABEL_57:
  PB::TextFormatter::format(this, "odometerSpeed", *(double *)(a1 + 136));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x20000) == 0)
  {
LABEL_27:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_59;
  }
LABEL_58:
  PB::TextFormatter::format(this, "pedometerSpeed", *(double *)(a1 + 144));
  int v5 = *(_DWORD *)(a1 + 188);
  if ((v5 & 0x40000) == 0)
  {
LABEL_28:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
LABEL_59:
  PB::TextFormatter::format(this, "runningSpeed", *(double *)(a1 + 152));
  if ((*(_DWORD *)(a1 + 188) & 0x80000) != 0) {
LABEL_29:
  }
    PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 160));
LABEL_30:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19041D5E4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 188) |= 0x80000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 2u:
              *(_DWORD *)(a1 + 188) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 3u:
              *(_DWORD *)(a1 + 188) |= 0x40000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 4u:
              *(_DWORD *)(a1 + 188) |= 0x8000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v22 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v21 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v22 = v21 != 0;
              }
              *(unsigned char *)(a1 + 184) = v22;
              goto LABEL_148;
            case 5u:
              *(_DWORD *)(a1 + 188) |= 0x20000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 6u:
              *(_DWORD *)(a1 + 188) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 7u:
              *(_DWORD *)(a1 + 188) |= 0x2000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v24 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v23 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v24 = v23 != 0;
              }
              *(unsigned char *)(a1 + 182) = v24;
              goto LABEL_148;
            case 8u:
              *(_DWORD *)(a1 + 188) |= 0x4000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v26 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v25 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v26 = v25 != 0;
              }
              *(unsigned char *)(a1 + 183) = v26;
              goto LABEL_148;
            case 9u:
              *(_DWORD *)(a1 + 188) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xAu:
              *(_DWORD *)(a1 + 188) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xBu:
              *(_DWORD *)(a1 + 188) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xCu:
              *(_DWORD *)(a1 + 188) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xDu:
              *(_DWORD *)(a1 + 188) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xEu:
              *(_DWORD *)(a1 + 188) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0xFu:
              *(_DWORD *)(a1 + 188) |= 0x8000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x10u:
              *(_DWORD *)(a1 + 188) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x11u:
              *(_DWORD *)(a1 + 188) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x12u:
              *(_DWORD *)(a1 + 188) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x13u:
              *(_DWORD *)(a1 + 188) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x14u:
              *(_DWORD *)(a1 + 188) |= 0x400000u;
              unint64_t v27 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v28 = *(void *)this;
              if (v27 > 0xFFFFFFFFFFFFFFF5 || v27 + 10 > v2)
              {
                char v49 = 0;
                unsigned int v50 = 0;
                uint64_t v31 = 0;
                if (v2 <= v27) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v27)
                  {
                    LODWORD(v31) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_157;
                  }
                  unint64_t v51 = v27++;
                  char v52 = *(unsigned char *)(v28 + v51);
                  *((void *)this + 1) = v27;
                  v31 |= (unint64_t)(v52 & 0x7F) << v49;
                  if ((v52 & 0x80) == 0) {
                    break;
                  }
                  v49 += 7;
                  BOOL v14 = v50++ > 8;
                  if (v14)
                  {
                    LODWORD(v31) = 0;
LABEL_156:
                    unint64_t v2 = v51 + 1;
                    goto LABEL_157;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v31) = 0;
                }
                goto LABEL_156;
              }
              char v29 = 0;
              unsigned int v30 = 0;
              uint64_t v31 = 0;
              do
              {
                unint64_t v2 = v27 + 1;
                *((void *)this + 1) = v27 + 1;
                char v32 = *(unsigned char *)(v28 + v27);
                v31 |= (unint64_t)(v32 & 0x7F) << v29;
                if ((v32 & 0x80) == 0) {
                  goto LABEL_157;
                }
                v29 += 7;
                unint64_t v27 = v2;
                BOOL v14 = v30++ > 8;
              }
              while (!v14);
              LODWORD(v31) = 0;
LABEL_157:
              *(_DWORD *)(a1 + 176) = v31;
              goto LABEL_148;
            case 0x15u:
              *(_DWORD *)(a1 + 188) |= 0x100000u;
              unint64_t v33 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v34 = *(void *)this;
              if (v33 > 0xFFFFFFFFFFFFFFF5 || v33 + 10 > v2)
              {
                char v53 = 0;
                unsigned int v54 = 0;
                uint64_t v37 = 0;
                if (v2 <= v33) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v33)
                  {
                    LODWORD(v37) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_162;
                  }
                  unint64_t v55 = v33++;
                  char v56 = *(unsigned char *)(v34 + v55);
                  *((void *)this + 1) = v33;
                  v37 |= (unint64_t)(v56 & 0x7F) << v53;
                  if ((v56 & 0x80) == 0) {
                    break;
                  }
                  v53 += 7;
                  BOOL v14 = v54++ > 8;
                  if (v14)
                  {
                    LODWORD(v37) = 0;
LABEL_161:
                    unint64_t v2 = v55 + 1;
                    goto LABEL_162;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v37) = 0;
                }
                goto LABEL_161;
              }
              char v35 = 0;
              unsigned int v36 = 0;
              uint64_t v37 = 0;
              do
              {
                unint64_t v2 = v33 + 1;
                *((void *)this + 1) = v33 + 1;
                char v38 = *(unsigned char *)(v34 + v33);
                v37 |= (unint64_t)(v38 & 0x7F) << v35;
                if ((v38 & 0x80) == 0) {
                  goto LABEL_162;
                }
                v35 += 7;
                unint64_t v33 = v2;
                BOOL v14 = v36++ > 8;
              }
              while (!v14);
              LODWORD(v37) = 0;
LABEL_162:
              *(_DWORD *)(a1 + 168) = v37;
              goto LABEL_148;
            case 0x16u:
              *(_DWORD *)(a1 + 188) |= 0x200000u;
              unint64_t v39 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v40 = *(void *)this;
              if (v39 > 0xFFFFFFFFFFFFFFF5 || v39 + 10 > v2)
              {
                char v57 = 0;
                unsigned int v58 = 0;
                uint64_t v43 = 0;
                if (v2 <= v39) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v39)
                  {
                    LODWORD(v43) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_167;
                  }
                  unint64_t v59 = v39++;
                  char v60 = *(unsigned char *)(v40 + v59);
                  *((void *)this + 1) = v39;
                  v43 |= (unint64_t)(v60 & 0x7F) << v57;
                  if ((v60 & 0x80) == 0) {
                    break;
                  }
                  v57 += 7;
                  BOOL v14 = v58++ > 8;
                  if (v14)
                  {
                    LODWORD(v43) = 0;
LABEL_166:
                    unint64_t v2 = v59 + 1;
                    goto LABEL_167;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v43) = 0;
                }
                goto LABEL_166;
              }
              char v41 = 0;
              unsigned int v42 = 0;
              uint64_t v43 = 0;
              do
              {
                unint64_t v2 = v39 + 1;
                *((void *)this + 1) = v39 + 1;
                char v44 = *(unsigned char *)(v40 + v39);
                v43 |= (unint64_t)(v44 & 0x7F) << v41;
                if ((v44 & 0x80) == 0) {
                  goto LABEL_167;
                }
                v41 += 7;
                unint64_t v39 = v2;
                BOOL v14 = v42++ > 8;
              }
              while (!v14);
              LODWORD(v43) = 0;
LABEL_167:
              *(_DWORD *)(a1 + 172) = v43;
LABEL_148:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0x17u:
              *(_DWORD *)(a1 + 188) |= 0x800000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v46 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v45 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v46 = v45 != 0;
              }
              *(unsigned char *)(a1 + 180) = v46;
              goto LABEL_148;
            case 0x18u:
              *(_DWORD *)(a1 + 188) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x19u:
              *(_DWORD *)(a1 + 188) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x1Au:
              *(_DWORD *)(a1 + 188) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_112;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_147;
            case 0x1Bu:
              *(_DWORD *)(a1 + 188) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
LABEL_147:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_112:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_148;
            case 0x1Cu:
              *(_DWORD *)(a1 + 188) |= 0x1000000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v48 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v47 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v48 = v47 != 0;
              }
              *(unsigned char *)(a1 + 181) = v48;
              goto LABEL_148;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_148;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19041E06C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 188);
  if ((v4 & 0x80000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 160));
    int v4 = *(_DWORD *)(v3 + 188);
    if ((v4 & 0x80) == 0)
    {
LABEL_3:
      if ((v4 & 0x40000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_32;
    }
  }
  else if ((v4 & 0x80) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40000) == 0)
  {
LABEL_4:
    if ((v4 & 0x8000000) == 0) {
      goto LABEL_5;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 152));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000000) == 0)
  {
LABEL_5:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20000) == 0)
  {
LABEL_6:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10000) == 0)
  {
LABEL_7:
    if ((v4 & 0x2000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x4000000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000000) == 0)
  {
LABEL_9:
    if ((v4 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x40) == 0)
  {
LABEL_10:
    if ((v4 & 8) == 0) {
      goto LABEL_11;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 8) == 0)
  {
LABEL_11:
    if ((v4 & 0x20) == 0) {
      goto LABEL_12;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x20) == 0)
  {
LABEL_12:
    if ((v4 & 0x10) == 0) {
      goto LABEL_13;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x10) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 2) == 0) {
      goto LABEL_15;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 2) == 0)
  {
LABEL_15:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x8000) == 0)
  {
LABEL_16:
    if ((v4 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x4000) == 0)
  {
LABEL_17:
    if ((v4 & 0x100) == 0) {
      goto LABEL_18;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100) == 0)
  {
LABEL_18:
    if ((v4 & 0x200) == 0) {
      goto LABEL_19;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200) == 0)
  {
LABEL_19:
    if ((v4 & 4) == 0) {
      goto LABEL_20;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 4) == 0)
  {
LABEL_20:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400000) == 0)
  {
LABEL_21:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x100000) == 0)
  {
LABEL_22:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x200000) == 0)
  {
LABEL_23:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_52;
  }
LABEL_51:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800000) == 0)
  {
LABEL_24:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_53;
  }
LABEL_52:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x1000) == 0)
  {
LABEL_25:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_54;
  }
LABEL_53:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x2000) == 0)
  {
LABEL_26:
    if ((v4 & 0x400) == 0) {
      goto LABEL_27;
    }
    goto LABEL_55;
  }
LABEL_54:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x400) == 0)
  {
LABEL_27:
    if ((v4 & 0x800) == 0) {
      goto LABEL_28;
    }
LABEL_56:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96));
    if ((*(_DWORD *)(v3 + 188) & 0x1000000) == 0) {
      return result;
    }
    goto LABEL_57;
  }
LABEL_55:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 188);
  if ((v4 & 0x800) != 0) {
    goto LABEL_56;
  }
LABEL_28:
  if ((v4 & 0x1000000) == 0) {
    return result;
  }
LABEL_57:

  return PB::Writer::write(this);
}

uint64_t sub_19041E3B4(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCD880;
  *(_DWORD *)(result + 136) = 0;
  return result;
}

void sub_19041E3DC(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19041E414(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x8000) != 0)
  {
    PB::TextFormatter::format(this, "algorithmType");
    int v5 = *(_DWORD *)(a1 + 136);
    if ((v5 & 1) == 0)
    {
LABEL_3:
      if ((v5 & 2) == 0) {
        goto LABEL_4;
      }
      goto LABEL_24;
    }
  }
  else if ((v5 & 1) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "alpha", *(double *)(a1 + 8));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 2) == 0)
  {
LABEL_4:
    if ((v5 & 4) == 0) {
      goto LABEL_5;
    }
    goto LABEL_25;
  }
LABEL_24:
  PB::TextFormatter::format(this, "cadence", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 4) == 0)
  {
LABEL_5:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_26;
  }
LABEL_25:
  PB::TextFormatter::format(this, "formBasedStartTime", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 8) == 0)
  {
LABEL_6:
    if ((v5 & 0x10) == 0) {
      goto LABEL_7;
    }
    goto LABEL_27;
  }
LABEL_26:
  PB::TextFormatter::format(this, "grade", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10) == 0)
  {
LABEL_7:
    if ((v5 & 0x20) == 0) {
      goto LABEL_8;
    }
    goto LABEL_28;
  }
LABEL_27:
  PB::TextFormatter::format(this, "heightCM", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x20) == 0)
  {
LABEL_8:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_29;
  }
LABEL_28:
  PB::TextFormatter::format(this, "horizontalAccelMagnitudeMeanSqrt", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x10000) == 0)
  {
LABEL_9:
    if ((v5 & 0x40) == 0) {
      goto LABEL_10;
    }
    goto LABEL_30;
  }
LABEL_29:
  PB::TextFormatter::format(this, "isValid");
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x40) == 0)
  {
LABEL_10:
    if ((v5 & 0x80) == 0) {
      goto LABEL_11;
    }
    goto LABEL_31;
  }
LABEL_30:
  PB::TextFormatter::format(this, "rotationRateGravityProjectionMax", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x80) == 0)
  {
LABEL_11:
    if ((v5 & 0x100) == 0) {
      goto LABEL_12;
    }
    goto LABEL_32;
  }
LABEL_31:
  PB::TextFormatter::format(this, "rotationRateMagnitudeMin", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x100) == 0)
  {
LABEL_12:
    if ((v5 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_33;
  }
LABEL_32:
  PB::TextFormatter::format(this, "speed", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x200) == 0)
  {
LABEL_13:
    if ((v5 & 0x400) == 0) {
      goto LABEL_14;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "speedBasedStartTime", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x400) == 0)
  {
LABEL_14:
    if ((v5 & 0x800) == 0) {
      goto LABEL_15;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "strideLength", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x800) == 0)
  {
LABEL_15:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "strideLengthFormBasedCalibrated", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x1000) == 0)
  {
LABEL_16:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "strideLengthFormBasedUncalibrated", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 136);
  if ((v5 & 0x2000) == 0)
  {
LABEL_17:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_37:
  PB::TextFormatter::format(this, "strideLengthSpeedBased", *(double *)(a1 + 112));
  if ((*(_DWORD *)(a1 + 136) & 0x4000) != 0) {
LABEL_18:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 120));
LABEL_19:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19041E678(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (2)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3)
      {
        char v15 = 0;
        unsigned int v16 = 0;
        unint64_t v11 = 0;
        if (v2 > v3) {
          unint64_t v3 = v2;
        }
        while (v3 != v2)
        {
          unint64_t v17 = v2 + 1;
          char v18 = *(unsigned char *)(v8 + v2);
          *((void *)this + 1) = v17;
          v11 |= (unint64_t)(v18 & 0x7F) << v15;
          if ((v18 & 0x80) == 0) {
            goto LABEL_20;
          }
          v15 += 7;
          unint64_t v2 = v17;
          if (v16++ >= 9)
          {
LABEL_19:
            unint64_t v11 = 0;
            goto LABEL_20;
          }
        }
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
      }
      else
      {
        char v9 = 0;
        unsigned int v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          unint64_t v12 = v2 + 1;
          *((void *)this + 1) = v2 + 1;
          char v13 = *(unsigned char *)(v8 + v2);
          v11 |= (unint64_t)(v13 & 0x7F) << v9;
          if ((v13 & 0x80) == 0) {
            break;
          }
          v9 += 7;
          unint64_t v2 = v12;
          BOOL v14 = v10++ > 8;
          if (v14) {
            goto LABEL_19;
          }
        }
LABEL_20:
        if ((v11 & 7) != 4)
        {
          switch((v11 >> 3))
          {
            case 1u:
              *(_DWORD *)(a1 + 136) |= 4u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 2u:
              *(_DWORD *)(a1 + 136) |= 0x200u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 3u:
              *(_DWORD *)(a1 + 136) |= 0x4000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 4u:
              *(_DWORD *)(a1 + 136) |= 0x400u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 5u:
              *(_DWORD *)(a1 + 136) |= 0x10u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 6u:
              *(_DWORD *)(a1 + 136) |= 0x20u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 7u:
              *(_DWORD *)(a1 + 136) |= 0x80u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 8u:
              *(_DWORD *)(a1 + 136) |= 0x40u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 9u:
              *(_DWORD *)(a1 + 136) |= 8u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xAu:
              *(_DWORD *)(a1 + 136) |= 0x1000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xBu:
              *(_DWORD *)(a1 + 136) |= 0x800u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xCu:
              *(_DWORD *)(a1 + 136) |= 0x2000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xDu:
              *(_DWORD *)(a1 + 136) |= 1u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0xEu:
              *(_DWORD *)(a1 + 136) |= 0x8000u;
              unint64_t v21 = *((void *)this + 1);
              unint64_t v2 = *((void *)this + 2);
              uint64_t v22 = *(void *)this;
              if (v21 > 0xFFFFFFFFFFFFFFF5 || v21 + 10 > v2)
              {
                char v29 = 0;
                unsigned int v30 = 0;
                uint64_t v25 = 0;
                if (v2 <= v21) {
                  unint64_t v2 = *((void *)this + 1);
                }
                while (1)
                {
                  if (v2 == v21)
                  {
                    LODWORD(v25) = 0;
                    *((unsigned char *)this + 24) = 1;
                    goto LABEL_93;
                  }
                  unint64_t v31 = v21++;
                  char v32 = *(unsigned char *)(v22 + v31);
                  *((void *)this + 1) = v21;
                  v25 |= (unint64_t)(v32 & 0x7F) << v29;
                  if ((v32 & 0x80) == 0) {
                    break;
                  }
                  v29 += 7;
                  BOOL v14 = v30++ > 8;
                  if (v14)
                  {
                    LODWORD(v25) = 0;
LABEL_92:
                    unint64_t v2 = v31 + 1;
                    goto LABEL_93;
                  }
                }
                if (*((unsigned char *)this + 24)) {
                  LODWORD(v25) = 0;
                }
                goto LABEL_92;
              }
              char v23 = 0;
              unsigned int v24 = 0;
              uint64_t v25 = 0;
              do
              {
                unint64_t v2 = v21 + 1;
                *((void *)this + 1) = v21 + 1;
                char v26 = *(unsigned char *)(v22 + v21);
                v25 |= (unint64_t)(v26 & 0x7F) << v23;
                if ((v26 & 0x80) == 0) {
                  goto LABEL_93;
                }
                v23 += 7;
                unint64_t v21 = v2;
                BOOL v14 = v24++ > 8;
              }
              while (!v14);
              LODWORD(v25) = 0;
LABEL_93:
              *(_DWORD *)(a1 + 128) = v25;
LABEL_94:
              unint64_t v3 = *((void *)this + 2);
              int v4 = *((unsigned __int8 *)this + 24);
              if (v2 >= v3 || v4 != 0) {
                return v4 == 0;
              }
              continue;
            case 0xFu:
              *(_DWORD *)(a1 + 136) |= 0x10000u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 >= *((void *)this + 2))
              {
                BOOL v28 = 0;
                *((unsigned char *)this + 24) = 1;
              }
              else
              {
                int v27 = *(unsigned __int8 *)(*(void *)this + v2++);
                *((void *)this + 1) = v2;
                BOOL v28 = v27 != 0;
              }
              *(unsigned char *)(a1 + 132) = v28;
              goto LABEL_94;
            case 0x10u:
              *(_DWORD *)(a1 + 136) |= 0x100u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
                goto LABEL_77;
              }
              *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
              goto LABEL_88;
            case 0x11u:
              *(_DWORD *)(a1 + 136) |= 2u;
              unint64_t v2 = *((void *)this + 1);
              if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
              {
                *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_88:
                unint64_t v2 = *((void *)this + 1) + 8;
                *((void *)this + 1) = v2;
              }
              else
              {
LABEL_77:
                *((unsigned char *)this + 24) = 1;
              }
              goto LABEL_94;
            default:
              uint64_t result = PB::Reader::skip(this);
              if (!result) {
                return result;
              }
              unint64_t v2 = *((void *)this + 1);
              goto LABEL_94;
          }
        }
        int v4 = 0;
      }
      break;
    }
  }
  return v4 == 0;
}

uint64_t sub_19041ECBC(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 136);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    int v4 = *(_DWORD *)(v3 + 136);
    if ((v4 & 0x200) == 0)
    {
LABEL_3:
      if ((v4 & 0x4000) == 0) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else if ((v4 & 0x200) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x4000) == 0)
  {
LABEL_4:
    if ((v4 & 0x400) == 0) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x400) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x20) == 0)
  {
LABEL_7:
    if ((v4 & 0x80) == 0) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x80) == 0)
  {
LABEL_8:
    if ((v4 & 0x40) == 0) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x40) == 0)
  {
LABEL_9:
    if ((v4 & 8) == 0) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 8) == 0)
  {
LABEL_10:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x1000) == 0)
  {
LABEL_11:
    if ((v4 & 0x800) == 0) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x800) == 0)
  {
LABEL_12:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x2000) == 0)
  {
LABEL_13:
    if ((v4 & 1) == 0) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 1) == 0)
  {
LABEL_14:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x8000) == 0)
  {
LABEL_15:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::writeVarInt(this);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x10000) == 0)
  {
LABEL_16:
    if ((v4 & 0x100) == 0) {
      goto LABEL_17;
    }
LABEL_34:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
    if ((*(_DWORD *)(v3 + 136) & 2) == 0) {
      return result;
    }
    goto LABEL_35;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this);
  int v4 = *(_DWORD *)(v3 + 136);
  if ((v4 & 0x100) != 0) {
    goto LABEL_34;
  }
LABEL_17:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_35:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19041EED0(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFCF138;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

void sub_19041EEF8(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19041EF30(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 40);
  if (v5)
  {
    PB::TextFormatter::format(this, "displacement", *(double *)(a1 + 8));
    char v5 = *(unsigned char *)(a1 + 40);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((*(unsigned char *)(a1 + 40) & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "endTime", *(double *)(a1 + 16));
  char v5 = *(unsigned char *)(a1 + 40);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_11:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 24));
  if ((*(unsigned char *)(a1 + 40) & 8) != 0) {
LABEL_5:
  }
    PB::TextFormatter::format(this, "timestamp", *(double *)(a1 + 32));
LABEL_6:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19041EFF4(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 40) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 3u:
          *(unsigned char *)(a1 + 40) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_35;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_37;
        case 4u:
          *(unsigned char *)(a1 + 40) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 <= 0xFFFFFFFFFFFFFFF7 && v2 + 8 <= *((void *)this + 2))
          {
            *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
LABEL_37:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          else
          {
LABEL_35:
            *((unsigned char *)this + 24) = 1;
          }
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19041F26C(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(result + 40);
  if ((v4 & 4) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 24));
    char v4 = *(unsigned char *)(v3 + 40);
    if ((v4 & 8) == 0)
    {
LABEL_3:
      if ((v4 & 1) == 0) {
        goto LABEL_4;
      }
LABEL_8:
      uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
      if ((*(unsigned char *)(v3 + 40) & 2) == 0) {
        return result;
      }
      goto LABEL_9;
    }
  }
  else if ((*(unsigned char *)(result + 40) & 8) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  char v4 = *(unsigned char *)(v3 + 40);
  if (v4) {
    goto LABEL_8;
  }
LABEL_4:
  if ((v4 & 2) == 0) {
    return result;
  }
LABEL_9:
  double v5 = *(double *)(v3 + 16);

  return PB::Writer::write(this, v5);
}

uint64_t sub_19041F314(uint64_t result)
{
  *(void *)uint64_t result = &unk_1EDFD0168;
  *(_DWORD *)(result + 212) = 0;
  return result;
}

void sub_19041F33C(PB::Base *a1)
{
  PB::Base::~Base(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19041F374(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  int v5 = *(_DWORD *)(a1 + 212);
  if (v5)
  {
    PB::TextFormatter::format(this, "centerOfMassAccelZAmplitudeBackwards", *(double *)(a1 + 8));
    int v5 = *(_DWORD *)(a1 + 212);
    if ((v5 & 2) == 0)
    {
LABEL_3:
      if ((v5 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_33;
    }
  }
  else if ((v5 & 2) == 0)
  {
    goto LABEL_3;
  }
  PB::TextFormatter::format(this, "height", *(double *)(a1 + 16));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 4) == 0)
  {
LABEL_4:
    if ((v5 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_34;
  }
LABEL_33:
  PB::TextFormatter::format(this, "integratedAngleYg", *(double *)(a1 + 24));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 8) == 0)
  {
LABEL_5:
    if ((v5 & 0x10) == 0) {
      goto LABEL_6;
    }
    goto LABEL_35;
  }
LABEL_34:
  PB::TextFormatter::format(this, "integratedAngleYgBackwards", *(double *)(a1 + 32));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x10) == 0)
  {
LABEL_6:
    if ((v5 & 0x20) == 0) {
      goto LABEL_7;
    }
    goto LABEL_36;
  }
LABEL_35:
  PB::TextFormatter::format(this, "integratedCenterOfAccelZMaxBackwards", *(double *)(a1 + 40));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20) == 0)
  {
LABEL_7:
    if ((v5 & 0x40) == 0) {
      goto LABEL_8;
    }
    goto LABEL_37;
  }
LABEL_36:
  PB::TextFormatter::format(this, "integratedRotationAxisWZ", *(double *)(a1 + 48));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40) == 0)
  {
LABEL_8:
    if ((v5 & 0x80) == 0) {
      goto LABEL_9;
    }
    goto LABEL_38;
  }
LABEL_37:
  PB::TextFormatter::format(this, "integratedRotationAxisWZForwards", *(double *)(a1 + 56));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80) == 0)
  {
LABEL_9:
    if ((v5 & 0x100) == 0) {
      goto LABEL_10;
    }
    goto LABEL_39;
  }
LABEL_38:
  PB::TextFormatter::format(this, "integratedRotationRateYBackwards", *(double *)(a1 + 64));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x100) == 0)
  {
LABEL_10:
    if ((v5 & 0x200) == 0) {
      goto LABEL_11;
    }
    goto LABEL_40;
  }
LABEL_39:
  PB::TextFormatter::format(this, "integratedUserAccelTForwards", *(double *)(a1 + 72));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x200) == 0)
  {
LABEL_11:
    if ((v5 & 0x400) == 0) {
      goto LABEL_12;
    }
    goto LABEL_41;
  }
LABEL_40:
  PB::TextFormatter::format(this, "integratedUserAccelY", *(double *)(a1 + 80));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x400) == 0)
  {
LABEL_12:
    if ((v5 & 0x800) == 0) {
      goto LABEL_13;
    }
    goto LABEL_42;
  }
LABEL_41:
  PB::TextFormatter::format(this, "integratedVelocityZ", *(double *)(a1 + 88));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x800) == 0)
  {
LABEL_13:
    if ((v5 & 0x1000) == 0) {
      goto LABEL_14;
    }
    goto LABEL_43;
  }
LABEL_42:
  PB::TextFormatter::format(this, "integratedVelocityZBackwards", *(double *)(a1 + 96));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x1000) == 0)
  {
LABEL_14:
    if ((v5 & 0x2000000) == 0) {
      goto LABEL_15;
    }
    goto LABEL_44;
  }
LABEL_43:
  PB::TextFormatter::format(this, "integratedVelocityZForwards", *(double *)(a1 + 104));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x2000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x2000) == 0) {
      goto LABEL_16;
    }
    goto LABEL_45;
  }
LABEL_44:
  PB::TextFormatter::format(this, "isValidPeak");
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x2000) == 0)
  {
LABEL_16:
    if ((v5 & 0x4000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_46;
  }
LABEL_45:
  PB::TextFormatter::format(this, "medianCadence", *(double *)(a1 + 112));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x4000) == 0)
  {
LABEL_17:
    if ((v5 & 0x8000) == 0) {
      goto LABEL_18;
    }
    goto LABEL_47;
  }
LABEL_46:
  PB::TextFormatter::format(this, "peakTime", *(double *)(a1 + 120));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x8000) == 0)
  {
LABEL_18:
    if ((v5 & 0x10000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_48;
  }
LABEL_47:
  PB::TextFormatter::format(this, "rotationAxisWTAmplitudeXForwards", *(double *)(a1 + 128));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x10000) == 0)
  {
LABEL_19:
    if ((v5 & 0x20000) == 0) {
      goto LABEL_20;
    }
    goto LABEL_49;
  }
LABEL_48:
  PB::TextFormatter::format(this, "rotationRateMaxZForwards", *(double *)(a1 + 136));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x20000) == 0)
  {
LABEL_20:
    if ((v5 & 0x40000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_50;
  }
LABEL_49:
  PB::TextFormatter::format(this, "rotationTMaxZForwards", *(double *)(a1 + 144));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x40000) == 0)
  {
LABEL_21:
    if ((v5 & 0x80000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_51;
  }
LABEL_50:
  PB::TextFormatter::format(this, "startTime", *(double *)(a1 + 152));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x80000) == 0)
  {
LABEL_22:
    if ((v5 & 0x100000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_52;
  }
LABEL_51:
  PB::TextFormatter::format(this, "strideLengthCadence", *(double *)(a1 + 160));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x100000) == 0)
  {
LABEL_23:
    if ((v5 & 0x200000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_53;
  }
LABEL_52:
  PB::TextFormatter::format(this, "swingAccelAmplitudeYBackwards", *(double *)(a1 + 168));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x200000) == 0)
  {
LABEL_24:
    if ((v5 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_54;
  }
LABEL_53:
  PB::TextFormatter::format(this, "swingAccelMeanXBackwards", *(double *)(a1 + 176));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x400000) == 0)
  {
LABEL_25:
    if ((v5 & 0x800000) == 0) {
      goto LABEL_26;
    }
    goto LABEL_55;
  }
LABEL_54:
  PB::TextFormatter::format(this, "swingAccelTZMean", *(double *)(a1 + 184));
  int v5 = *(_DWORD *)(a1 + 212);
  if ((v5 & 0x800000) == 0)
  {
LABEL_26:
    if ((v5 & 0x1000000) == 0) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
LABEL_55:
  PB::TextFormatter::format(this, "userAccelTMeanXBackards", *(double *)(a1 + 192));
  if ((*(_DWORD *)(a1 + 212) & 0x1000000) != 0) {
LABEL_27:
  }
    PB::TextFormatter::format(this, "weight", *(double *)(a1 + 200));
LABEL_28:

  return MEMORY[0x1F4147498](this);
}

uint64_t sub_19041F6F8(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        if (v10++ > 8) {
          goto LABEL_19;
        }
      }
LABEL_20:
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      switch((v11 >> 3))
      {
        case 1u:
          *(_DWORD *)(a1 + 212) |= 0x40000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 152) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 2u:
          *(_DWORD *)(a1 + 212) |= 0x4000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 120) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 3u:
          *(_DWORD *)(a1 + 212) |= 0x400u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 88) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 4u:
          *(_DWORD *)(a1 + 212) |= 0x800u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 96) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 5u:
          *(_DWORD *)(a1 + 212) |= 0x1000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 104) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 6u:
          *(_DWORD *)(a1 + 212) |= 2u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 16) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 7u:
          *(_DWORD *)(a1 + 212) |= 0x1000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 200) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 8u:
          *(_DWORD *)(a1 + 212) |= 0x200000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 176) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 9u:
          *(_DWORD *)(a1 + 212) |= 0x100000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 168) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xAu:
          *(_DWORD *)(a1 + 212) |= 0x20000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 144) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xBu:
          *(_DWORD *)(a1 + 212) |= 0x8000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 128) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xCu:
          *(_DWORD *)(a1 + 212) |= 0x200u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 80) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xDu:
          *(_DWORD *)(a1 + 212) |= 0x40u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 56) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xEu:
          *(_DWORD *)(a1 + 212) |= 0x20u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 48) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0xFu:
          *(_DWORD *)(a1 + 212) |= 8u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 32) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x10u:
          *(_DWORD *)(a1 + 212) |= 0x800000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 192) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x11u:
          *(_DWORD *)(a1 + 212) |= 0x10u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 40) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x12u:
          *(_DWORD *)(a1 + 212) |= 0x2000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 112) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x13u:
          *(_DWORD *)(a1 + 212) |= 0x100u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 72) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x14u:
          *(_DWORD *)(a1 + 212) |= 0x10000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 136) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x15u:
          *(_DWORD *)(a1 + 212) |= 0x80u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 64) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x16u:
          *(_DWORD *)(a1 + 212) |= 4u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 24) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x17u:
          *(_DWORD *)(a1 + 212) |= 1u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 8) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x18u:
          *(_DWORD *)(a1 + 212) |= 0x400000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2)) {
            goto LABEL_100;
          }
          *(void *)(a1 + 184) = *(void *)(*(void *)this + v2);
          goto LABEL_104;
        case 0x19u:
          *(_DWORD *)(a1 + 212) |= 0x80000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 > 0xFFFFFFFFFFFFFFF7 || v2 + 8 > *((void *)this + 2))
          {
LABEL_100:
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            *(void *)(a1 + 160) = *(void *)(*(void *)this + v2);
LABEL_104:
            unint64_t v2 = *((void *)this + 1) + 8;
            *((void *)this + 1) = v2;
          }
          break;
        case 0x1Au:
          *(_DWORD *)(a1 + 212) |= 0x2000000u;
          unint64_t v2 = *((void *)this + 1);
          if (v2 >= *((void *)this + 2))
          {
            BOOL v21 = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            int v20 = *(unsigned __int8 *)(*(void *)this + v2++);
            *((void *)this + 1) = v2;
            BOOL v21 = v20 != 0;
          }
          *(unsigned char *)(a1 + 208) = v21;
          break;
        default:
          uint64_t result = PB::Reader::skip(this);
          if (!result) {
            return result;
          }
          unint64_t v2 = *((void *)this + 1);
          break;
      }
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || *((unsigned char *)this + 24)) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      if (v16++ >= 9)
      {
LABEL_19:
        unint64_t v11 = 0;
        goto LABEL_20;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_19041FEA0(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(_DWORD *)(result + 212);
  if ((v4 & 0x40000) != 0)
  {
    uint64_t result = PB::Writer::write(this, *(double *)(result + 152));
    int v4 = *(_DWORD *)(v3 + 212);
    if ((v4 & 0x4000) == 0)
    {
LABEL_3:
      if ((v4 & 0x400) == 0) {
        goto LABEL_4;
      }
      goto LABEL_30;
    }
  }
  else if ((v4 & 0x4000) == 0)
  {
    goto LABEL_3;
  }
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 120));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400) == 0)
  {
LABEL_4:
    if ((v4 & 0x800) == 0) {
      goto LABEL_5;
    }
    goto LABEL_31;
  }
LABEL_30:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 88));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800) == 0)
  {
LABEL_5:
    if ((v4 & 0x1000) == 0) {
      goto LABEL_6;
    }
    goto LABEL_32;
  }
LABEL_31:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 96));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000) == 0)
  {
LABEL_6:
    if ((v4 & 2) == 0) {
      goto LABEL_7;
    }
    goto LABEL_33;
  }
LABEL_32:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 104));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 2) == 0)
  {
LABEL_7:
    if ((v4 & 0x1000000) == 0) {
      goto LABEL_8;
    }
    goto LABEL_34;
  }
LABEL_33:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 16));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x1000000) == 0)
  {
LABEL_8:
    if ((v4 & 0x200000) == 0) {
      goto LABEL_9;
    }
    goto LABEL_35;
  }
LABEL_34:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 200));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200000) == 0)
  {
LABEL_9:
    if ((v4 & 0x100000) == 0) {
      goto LABEL_10;
    }
    goto LABEL_36;
  }
LABEL_35:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 176));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100000) == 0)
  {
LABEL_10:
    if ((v4 & 0x20000) == 0) {
      goto LABEL_11;
    }
    goto LABEL_37;
  }
LABEL_36:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 168));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20000) == 0)
  {
LABEL_11:
    if ((v4 & 0x8000) == 0) {
      goto LABEL_12;
    }
    goto LABEL_38;
  }
LABEL_37:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 144));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x8000) == 0)
  {
LABEL_12:
    if ((v4 & 0x200) == 0) {
      goto LABEL_13;
    }
    goto LABEL_39;
  }
LABEL_38:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 128));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x200) == 0)
  {
LABEL_13:
    if ((v4 & 0x40) == 0) {
      goto LABEL_14;
    }
    goto LABEL_40;
  }
LABEL_39:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 80));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x40) == 0)
  {
LABEL_14:
    if ((v4 & 0x20) == 0) {
      goto LABEL_15;
    }
    goto LABEL_41;
  }
LABEL_40:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 56));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x20) == 0)
  {
LABEL_15:
    if ((v4 & 8) == 0) {
      goto LABEL_16;
    }
    goto LABEL_42;
  }
LABEL_41:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 48));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 8) == 0)
  {
LABEL_16:
    if ((v4 & 0x800000) == 0) {
      goto LABEL_17;
    }
    goto LABEL_43;
  }
LABEL_42:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 32));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x800000) == 0)
  {
LABEL_17:
    if ((v4 & 0x10) == 0) {
      goto LABEL_18;
    }
    goto LABEL_44;
  }
LABEL_43:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 192));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10) == 0)
  {
LABEL_18:
    if ((v4 & 0x2000) == 0) {
      goto LABEL_19;
    }
    goto LABEL_45;
  }
LABEL_44:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 40));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x2000) == 0)
  {
LABEL_19:
    if ((v4 & 0x100) == 0) {
      goto LABEL_20;
    }
    goto LABEL_46;
  }
LABEL_45:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 112));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x100) == 0)
  {
LABEL_20:
    if ((v4 & 0x10000) == 0) {
      goto LABEL_21;
    }
    goto LABEL_47;
  }
LABEL_46:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 72));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x10000) == 0)
  {
LABEL_21:
    if ((v4 & 0x80) == 0) {
      goto LABEL_22;
    }
    goto LABEL_48;
  }
LABEL_47:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 136));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80) == 0)
  {
LABEL_22:
    if ((v4 & 4) == 0) {
      goto LABEL_23;
    }
    goto LABEL_49;
  }
LABEL_48:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 64));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 4) == 0)
  {
LABEL_23:
    if ((v4 & 1) == 0) {
      goto LABEL_24;
    }
    goto LABEL_50;
  }
LABEL_49:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 24));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 1) == 0)
  {
LABEL_24:
    if ((v4 & 0x400000) == 0) {
      goto LABEL_25;
    }
    goto LABEL_51;
  }
LABEL_50:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 8));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x400000) == 0)
  {
LABEL_25:
    if ((v4 & 0x80000) == 0) {
      goto LABEL_26;
    }
LABEL_52:
    uint64_t result = PB::Writer::write(this, *(double *)(v3 + 160));
    if ((*(_DWORD *)(v3 + 212) & 0x2000000) == 0) {
      return result;
    }
    goto LABEL_53;
  }
LABEL_51:
  uint64_t result = PB::Writer::write(this, *(double *)(v3 + 184));
  int v4 = *(_DWORD *)(v3 + 212);
  if ((v4 & 0x80000) != 0) {
    goto LABEL_52;
  }
LABEL_26:
  if ((v4 & 0x2000000) == 0) {
    return result;
  }
LABEL_53:

  return PB::Writer::write(this);
}

uint64_t sub_1904201B0(uint64_t *a1, void *a2)
{
  uint64_t result = sub_190420228((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_190420228(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    char v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_1904202C0((uint64_t)v13);
  return v11;
}

uint64_t sub_1904202C0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_190347E84((void *)a1);
  }
  return a1;
}

uint64_t sub_1904202F8(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(_WORD *)a1 = 1;
  *(unsigned char *)(a1 + 2) = 0;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = 1065353216;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0x3F80000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
  }
  unint64_t v2 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_INFO, "[CMAnchorMotionCorrespondence] Created the anchor-motion correspondence.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
    }
    int v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "CMAnchorMotionCorrespondence::CMAnchorMotionCorrespondence()", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  sub_1904204C4(a1);
  return a1;
}

void sub_1904204C4(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  *(_WORD *)a1 = 1;
  *(unsigned char *)(a1 + 2) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(void *)(a1 + 40) = 0;
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
  }
  v1 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v1, OS_LOG_TYPE_DEFAULT, "[CMAnchorMotionCorrespondence] Reset is called.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
    }
    unint64_t v2 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::reset()", "CoreLocation: %s\n", v2);
    if (v2 != (char *)buf) {
      free(v2);
    }
  }
}

void sub_190420660(uint64_t a1, float32x2_t *a2, float *a3, uint64_t a4, double a5)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 40))
  {
    uint64_t v10 = (float *)(a1 + 24);
    v11.f32[0] = sub_1904CF73C((float *)(a1 + 24), *a3, a3[1], a3[2]);
    float v13 = a5;
    float v14 = (float)(a2[1].f32[0] - v12) * v13;
    v11.i32[1] = v15;
    *(float32x2_t *)buf = vmul_n_f32(vsub_f32(*a2, v11), v13);
    *(float *)&buf[8] = v14;
    sub_1904CF7FC(&v59, (float *)buf);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
    }
    long long v16 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
    {
      double v17 = *(float *)(a1 + 24);
      double v18 = *(float *)(a1 + 28);
      double v19 = *(float *)(a1 + 32);
      double v20 = *(float *)(a1 + 36);
      *(_DWORD *)buf = 134218752;
      *(double *)&uint8_t buf[4] = v17;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v18;
      __int16 v68 = 2048;
      double v69 = v19;
      __int16 v70 = 2048;
      double v71 = v20;
      _os_log_impl(&dword_1902AF000, v16, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] Before pose update fPredictedRelativeAttitude %f %f %f %f.", buf, 0x2Au);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
      }
      double v38 = *(float *)(a1 + 24);
      double v39 = *(float *)(a1 + 28);
      double v40 = *(float *)(a1 + 32);
      double v41 = *(float *)(a1 + 36);
      int v60 = 134218752;
      *(double *)char v61 = v38;
      *(_WORD *)&v61[8] = 2048;
      double v62 = v39;
      __int16 v63 = 2048;
      double v64 = v40;
      __int16 v65 = 2048;
      double v66 = v41;
      unsigned int v42 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::propagatePredictedRelativeAttitude(const CMVector3d &, const CMVector3d &, double)", "CoreLocation: %s\n", v42);
      if (v42 != buf) {
        free(v42);
      }
    }
    sub_1904CF3F4((uint64_t)&v59, v10, (float32x4_t *)buf, v21);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)buf;
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
    }
    uint64_t v22 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
    {
      double v23 = *(float *)(a1 + 24);
      double v24 = *(float *)(a1 + 28);
      double v25 = *(float *)(a1 + 32);
      double v26 = *(float *)(a1 + 36);
      *(_DWORD *)buf = 134218752;
      *(double *)&uint8_t buf[4] = v23;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v24;
      __int16 v68 = 2048;
      double v69 = v25;
      __int16 v70 = 2048;
      double v71 = v26;
      _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] After pose update fPredictedRelativeAttitude %f %f %f %f.", buf, 0x2Au);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
      }
      double v43 = *(float *)(a1 + 24);
      double v44 = *(float *)(a1 + 28);
      double v45 = *(float *)(a1 + 32);
      double v46 = *(float *)(a1 + 36);
      int v60 = 134218752;
      *(double *)char v61 = v43;
      *(_WORD *)&v61[8] = 2048;
      double v62 = v44;
      __int16 v63 = 2048;
      double v64 = v45;
      __int16 v65 = 2048;
      double v66 = v46;
      int v47 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::propagatePredictedRelativeAttitude(const CMVector3d &, const CMVector3d &, double)", "CoreLocation: %s\n", v47);
      if (v47 != buf) {
        free(v47);
      }
    }
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
    }
    int v27 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v28 = 0;
      float v29 = 0.0;
      do
      {
        float v29 = v29 + (float)(a2->f32[v28] * a2->f32[v28]);
        ++v28;
      }
      while (v28 != 3);
      uint64_t v30 = 0;
      float v31 = 0.0;
      do
      {
        float v31 = v31 + (float)(a3[v30] * a3[v30]);
        ++v30;
      }
      while (v30 != 3);
      *(_DWORD *)buf = 134218496;
      *(double *)&uint8_t buf[4] = sqrtf(v29);
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = sqrtf(v31);
      __int16 v68 = 2048;
      double v69 = a5;
      _os_log_impl(&dword_1902AF000, v27, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] Pose update done with src %f aux %f dt %f.", buf, 0x20u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
      }
      uint64_t v48 = 0;
      float v49 = 0.0;
      do
      {
        float v49 = v49 + (float)(a2->f32[v48] * a2->f32[v48]);
        ++v48;
      }
      while (v48 != 3);
      uint64_t v50 = 0;
      float v51 = 0.0;
      do
      {
        float v51 = v51 + (float)(a3[v50] * a3[v50]);
        ++v50;
      }
      while (v50 != 3);
      int v60 = 134218496;
      *(double *)char v61 = sqrtf(v49);
      *(_WORD *)&v61[8] = 2048;
      double v62 = sqrtf(v51);
      __int16 v63 = 2048;
      double v64 = a5;
      char v52 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::feedIMU(const CMRelDM::IMUData &, const CMRelDM::IMUData &, double, uint64_t)", "CoreLocation: %s\n", v52);
      if (v52 != buf) {
        free(v52);
      }
    }
    if (*(unsigned char *)(a1 + 1) && !*(unsigned char *)(a1 + 2))
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
      }
      char v32 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
      {
        int v33 = *(unsigned __int8 *)(a1 + 1);
        int v34 = *(unsigned __int8 *)(a1 + 2);
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v33;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v34;
        _os_log_impl(&dword_1902AF000, v32, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] Anchor sensor state changed from %d to %d.", buf, 0xEu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
        }
        int v56 = *(unsigned __int8 *)(a1 + 1);
        int v57 = *(unsigned __int8 *)(a1 + 2);
        int v60 = 67109376;
        *(_DWORD *)char v61 = v56;
        *(_WORD *)&v61[4] = 1024;
        *(_DWORD *)&v61[6] = v57;
        unsigned int v58 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::feedIMU(const CMRelDM::IMUData &, const CMRelDM::IMUData &, double, uint64_t)", "CoreLocation: %s\n", v58);
        if (v58 != buf) {
          free(v58);
        }
      }
      *(_OWORD *)uint64_t v10 = *(_OWORD *)(a1 + 8);
    }
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
    }
    char v35 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
    {
      int v36 = *(unsigned __int8 *)(a1 + 1);
      int v37 = *(unsigned __int8 *)(a1 + 2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v36;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v37;
      _os_log_impl(&dword_1902AF000, v35, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] Anchor sensor states %d to %d.", buf, 0xEu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
      }
      int v53 = *(unsigned __int8 *)(a1 + 1);
      int v54 = *(unsigned __int8 *)(a1 + 2);
      int v60 = 67109376;
      *(_DWORD *)char v61 = v53;
      *(_WORD *)&v61[4] = 1024;
      *(_DWORD *)&v61[6] = v54;
      unint64_t v55 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::feedIMU(const CMRelDM::IMUData &, const CMRelDM::IMUData &, double, uint64_t)", "CoreLocation: %s\n", v55);
      if (v55 != buf) {
        free(v55);
      }
    }
    *(unsigned char *)(a1 + 1) = *(unsigned char *)(a1 + 2);
    *(void *)(a1 + 48) = a4;
  }
}

void sub_190420FA8(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
  }
  uint64_t v6 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] Feed anchor", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
    }
    LOWORD(v29) = 0;
    double v23 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::feedAnchor(const CMOQuaternion &, uint64_t)", "CoreLocation: %s\n", v23);
    if (v23 != buf) {
      free(v23);
    }
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (!v8)
  {
    float32x4_t v21 = (_OWORD *)(a1 + 8);
    if ((_OWORD *)(a1 + 8) != a2) {
      *float32x4_t v21 = *a2;
    }
    *(_OWORD *)(a1 + 24) = *v21;
    goto LABEL_26;
  }
  float v9 = (float)(unint64_t)(a3 - v8) * 0.000001;
  if (v9 > 0.0)
  {
    if (v9 > 2.0)
    {
      int v10 = *(_DWORD *)(a1 + 36);
      v7.f32[0] = -*(float *)(a1 + 32);
      *(float32x2_t *)buf = vneg_f32(*(float32x2_t *)(a1 + 24));
      *(_DWORD *)&buf[8] = v7.i32[0];
      v36[0] = v10;
      float32x4_t v11 = sub_1902D9ACC((float32x4_t *)buf, v7);
      sub_1904CF3F4((uint64_t)a2, (float *)buf, (float32x4_t *)&v29, v11);
      float v12 = sub_1904CF8B4((float32x4_t *)&v29);
      uint64_t v13 = 0;
      *(float *)buf = v12;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_DWORD *)&buf[8] = v15;
      float v16 = 0.0;
      do
      {
        float v16 = v16 + (float)(*(float *)&buf[v13] * *(float *)&buf[v13]);
        v13 += 4;
      }
      while (v13 != 12);
      *(float *)(a1 + 4) = sqrtf(v16) * 57.296;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
      }
      double v17 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
      {
        double v18 = *(float *)(a1 + 4);
        *(_DWORD *)buf = 134217984;
        *(double *)&uint8_t buf[4] = v18;
        _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] dThetaNorm %f.", buf, 0xCu);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
        }
        double v25 = *(float *)(a1 + 4);
        int v33 = 134217984;
        double v34 = v25;
        double v26 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::anchorCorrespondence(const CMOQuaternion &, const float)", "CoreLocation: %s\n", v26);
        if (v26 != buf) {
          free(v26);
        }
      }
      *(unsigned char *)a1 = *(float *)(a1 + 4) < (float)(v9 * 1.5);
      *(void *)(a1 + 56) = a3;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
      }
      double v19 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
      {
        int v20 = *(unsigned __int8 *)(a1 + 2);
        *(_DWORD *)buf = 134218240;
        *(double *)&uint8_t buf[4] = v9;
        LOWORD(v36[0]) = 1024;
        *(_DWORD *)((char *)v36 + 2) = v20;
        _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] dtSeconds %f, Anchor sensor state probably changed from 0 to %d.", buf, 0x12u);
      }
      if (sub_1902D8400(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
        }
        int v27 = *(unsigned __int8 *)(a1 + 2);
        int v29 = 134218240;
        double v30 = v9;
        __int16 v31 = 1024;
        int v32 = v27;
        uint64_t v28 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::feedAnchor(const CMOQuaternion &, uint64_t)", "CoreLocation: %s\n", v28);
        if (v28 != buf) {
          free(v28);
        }
      }
    }
    if ((_OWORD *)(a1 + 8) != a2) {
      *(_OWORD *)(a1 + 8) = *a2;
    }
LABEL_26:
    *(void *)(a1 + 40) = a3;
    return;
  }
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
  }
  uint64_t v22 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_DEBUG, "[CMAnchorMotionCorrespondence] dtSeconds == 0", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1380);
    }
    LOWORD(v29) = 0;
    double v24 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMAnchorMotionCorrespondence::feedAnchor(const CMOQuaternion &, uint64_t)", "CoreLocation: %s\n", v24);
    if (v24 != buf) {
      free(v24);
    }
  }
}

os_log_t sub_190421634()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1E929D8E0 = (uint64_t)result;
  return result;
}

void sub_1904218FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v24, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_190421940(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*a2
    && (Dictionary = (void *)CLConnectionMessage::getDictionary(*a2)) != 0
    && (uint64_t v4 = objc_msgSend_objectForKeyedSubscript_(Dictionary, v3, @"CMErrorMessage")) != 0)
  {
    int v7 = objc_msgSend_intValue(v4, v5, v6);
  }
  else
  {
    int v7 = 103;
  }
  if (qword_1E929D9F8 != -1) {
    dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
  }
  uint64_t v8 = qword_1E929DA00;
  if (os_log_type_enabled((os_log_t)qword_1E929DA00, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v11 = v7;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_FAULT, "CMHistoricalDatastore, Failed with CMError code %{public}d", buf, 8u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D9F8 != -1) {
      dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
    }
    float v9 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMHistoricalDataStore init]_block_invoke", "CoreLocation: %s\n", v9);
    if (v9 != (char *)buf) {
      free(v9);
    }
  }
}

void sub_190421B1C(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = getpid();
  uint64_t ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2);
  if (ExecutablePathFromPid)
  {
    uint64_t v5 = (void *)ExecutablePathFromPid;
    if (qword_1E929D9F8 != -1) {
      dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
    }
    uint64_t v6 = qword_1E929DA00;
    if (os_log_type_enabled((os_log_t)qword_1E929DA00, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = objc_msgSend_UTF8String(v5, v7, v8);
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 136446722;
      uint64_t v15 = v9;
      __int16 v16 = 1026;
      int v17 = v2;
      __int16 v18 = 2050;
      uint64_t v19 = v10;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_INFO, "CMHistoricalDatastore, Client connection interrupt, %{public}s, %{public}d, %{public}p", buf, 0x1Cu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9F8 != -1) {
        dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
      }
      objc_msgSend_UTF8String(v5, v11, v12);
      uint64_t v13 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMHistoricalDataStore init]_block_invoke", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
}

uint64_t sub_190421DA8(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x192FCC3F0]();
    JUMPOUT(0x192FCC980);
  }
  return result;
}

void sub_190422314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1902D8B58(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190422C44(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    int v7 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return v7();
  }
  else
  {
    if (qword_1E929D9F8 != -1) {
      dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
    }
    int v11 = qword_1E929DA00;
    if (os_log_type_enabled((os_log_t)qword_1E929DA00, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      uint64_t v40 = objc_msgSend_count(a2, v12, v13);
      __int16 v41 = 2048;
      uint64_t v42 = a3;
      __int16 v43 = 2048;
      uint64_t v44 = a4;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_DEFAULT, "[HistoricalFetch] Received %lu samples, cardio datatype %lu, state %lu", buf, 0x20u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9F8 != -1) {
        dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
      }
      int v33 = 134218496;
      uint64_t v34 = objc_msgSend_count(a2, v26, v27);
      __int16 v35 = 2048;
      uint64_t v36 = a3;
      __int16 v37 = 2048;
      uint64_t v38 = a4;
      uint64_t v28 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMHistoricalDataStore fetchCardioSamplesFrom:to:queryToken:withHandler:]_block_invoke", "CoreLocation: %s\n", v28);
      if (v28 != (char *)buf) {
        free(v28);
      }
    }
    switch(a3)
    {
      case 0:
        objc_msgSend_setPedestrianGrade_(*(void **)(a1 + 32), v14, (uint64_t)a2);
        goto LABEL_25;
      case 1:
        objc_msgSend_setRecoveryHeartRate_(*(void **)(a1 + 32), v14, (uint64_t)a2);
        goto LABEL_25;
      case 2:
        objc_msgSend_setRecoveryWorkRate_(*(void **)(a1 + 32), v14, (uint64_t)a2);
        goto LABEL_25;
      case 3:
        objc_msgSend_setRecoverySessions_(*(void **)(a1 + 32), v14, (uint64_t)a2);
        goto LABEL_25;
      case 4:
        objc_msgSend_setCardioFitnessInputs_(*(void **)(a1 + 32), v14, (uint64_t)a2);
        goto LABEL_25;
      case 5:
        objc_msgSend_setCardioFitnessResults_(*(void **)(a1 + 32), v14, (uint64_t)a2);
        goto LABEL_25;
      case 6:
        objc_msgSend_setCardioSessionMetrics_(*(void **)(a1 + 32), v14, (uint64_t)a2);
        goto LABEL_25;
      case 7:
        objc_msgSend_setCardioFitnessSummary_(*(void **)(a1 + 32), v14, (uint64_t)a2);
LABEL_25:
        uint64_t v21 = objc_msgSend_count(a2, v15, v16);
        uint64_t v22 = *(void *)(a1 + 48);
        if (v21)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t, void))(v22 + 16))(v22, *(void *)(a1 + 32), *(void *)(*(void *)(a1 + 40) + 16), a4, 0);
          if ((result & 1) == 0)
          {
            if (qword_1E929D9F8 != -1) {
              dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
            }
            double v23 = qword_1E929DA00;
            if (os_log_type_enabled((os_log_t)qword_1E929DA00, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1902AF000, v23, OS_LOG_TYPE_DEFAULT, "[HistoricalFetch] Received interrupt from client", buf, 2u);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929D9F8 != -1) {
                dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
              }
              LOWORD(v33) = 0;
              int v29 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "-[CMHistoricalDataStore fetchCardioSamplesFrom:to:queryToken:withHandler:]_block_invoke", "CoreLocation: %s\n", v29);
              if (v29 != (char *)buf) {
                free(v29);
              }
            }
            uint64_t result = objc_msgSend_closeDBConnection(*(void **)(a1 + 40), v24, v25);
          }
        }
        else
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t, void))(v22 + 16))(v22, 0, *(void *)(*(void *)(a1 + 40) + 16), 1, 0);
        }
        break;
      default:
        if (qword_1E929D9F8 != -1) {
          dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
        }
        int v17 = qword_1E929DA00;
        if (os_log_type_enabled((os_log_t)qword_1E929DA00, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134217984;
          uint64_t v40 = a3;
          _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_ERROR, "[HistoricalFetch] Unexpected datatype: %lu", buf, 0xCu);
        }
        if (sub_1902D8400(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D9F8 != -1) {
            dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
          }
          int v33 = 134217984;
          uint64_t v34 = a3;
          double v30 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 0, "-[CMHistoricalDataStore fetchCardioSamplesFrom:to:queryToken:withHandler:]_block_invoke", "CoreLocation: %s\n", v30);
          if (v30 != (char *)buf) {
            free(v30);
          }
        }
        uint64_t v31 = *MEMORY[0x1E4F28568];
        int v32 = @"Unexpected internal error.";
        uint64_t v19 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v18, (uint64_t)&v32, &v31, 1);
        objc_msgSend_CMErrorWithCode_userInfo_(CMErrorUtils, v20, 103, v19);
        uint64_t result = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
        break;
    }
  }
  return result;
}

uint64_t sub_1904239D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a5)
  {
    int v7 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
    return v7();
  }
  else
  {
    if (qword_1E929D9F8 != -1) {
      dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
    }
    int v11 = qword_1E929DA00;
    if (os_log_type_enabled((os_log_t)qword_1E929DA00, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218496;
      uint64_t v26 = objc_msgSend_count(a2, v12, v13);
      __int16 v27 = 2048;
      uint64_t v28 = a3;
      __int16 v29 = 2048;
      uint64_t v30 = a4;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_DEFAULT, "[HistoricalFetch] Received %lu samples, mobility datatype %lu, state %lu", buf, 0x20u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D9F8 != -1) {
        dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
      }
      objc_msgSend_count(a2, v21, v22);
      double v23 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMHistoricalDataStore fetchMobilitySamplesFrom:to:queryToken:withHandler:]_block_invoke", "CoreLocation: %s\n", v23);
      if (v23 != (char *)buf) {
        free(v23);
      }
    }
    switch(a3)
    {
      case 0:
        objc_msgSend_setWalkingBoutMobility_(*(void **)(a1 + 32), v14, (uint64_t)a2);
        break;
      case 1:
        objc_msgSend_setPredictedDistanceBouts_(*(void **)(a1 + 32), v14, (uint64_t)a2);
        break;
      case 2:
        objc_msgSend_setGaitMetrics_(*(void **)(a1 + 32), v14, (uint64_t)a2);
        break;
      case 3:
        objc_msgSend_setPredictedDistanceBoutsMobilityCalibration_(*(void **)(a1 + 32), v14, (uint64_t)a2);
        break;
      case 4:
        objc_msgSend_setStrideCalEntries_(*(void **)(a1 + 32), v14, (uint64_t)a2);
        break;
      default:
        break;
    }
    uint64_t v16 = objc_msgSend_count(a2, v14, v15);
    uint64_t v17 = *(void *)(a1 + 48);
    if (v16)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t, void))(v17 + 16))(v17, *(void *)(a1 + 32), *(void *)(*(void *)(a1 + 40) + 16), a4, 0);
      if ((result & 1) == 0)
      {
        if (qword_1E929D9F8 != -1) {
          dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
        }
        __int16 v18 = qword_1E929DA00;
        if (os_log_type_enabled((os_log_t)qword_1E929DA00, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_DEFAULT, "[HistoricalFetch] Received interrupt from client", buf, 2u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D9F8 != -1) {
            dispatch_once(&qword_1E929D9F8, &unk_1EDFC1F60);
          }
          uint64_t v24 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "-[CMHistoricalDataStore fetchMobilitySamplesFrom:to:queryToken:withHandler:]_block_invoke", "CoreLocation: %s\n", v24);
          if (v24 != (char *)buf) {
            free(v24);
          }
        }
        return objc_msgSend_closeDBConnection(*(void **)(a1 + 40), v19, v20);
      }
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, void, void, uint64_t, void))(v17 + 16))(v17, 0, *(void *)(*(void *)(a1 + 40) + 16), 1, 0);
    }
  }
  return result;
}

uint64_t sub_190424D5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_190424D6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

os_log_t sub_190427DE0()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
  qword_1E929DA00 = (uint64_t)result;
  return result;
}

void sub_190427E10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFD0DA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_190427E30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFD0DA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190427FCC(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__disconnect(*(void **)(a1 + 32), a2, a3);
}

uint64_t sub_1904281D0(uint64_t a1)
{
  objc_storeWeak((id *)(*(void *)(a1 + 32) + 24), *(id *)(a1 + 40));
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 24));
  uint64_t v5 = *(void **)(a1 + 32);
  if (Weak)
  {
    return objc_msgSend__connect(v5, v2, v3);
  }
  else
  {
    return objc_msgSend__disconnect(v5, v2, v3);
  }
}

void sub_1904282B4(uint64_t a1)
{
  sub_190429020("kCLConnectionMessageCheckInNoMovementLatestStateRequest", &v3);
  if (*(void *)(*(void *)(a1 + 32) + 8))
  {
    uint64_t v2 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v2) {
      sub_1902D8B58(v2);
    }
  }
  if (v4) {
    sub_1902D8B58(v4);
  }
}

void sub_190428338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a13) {
    sub_1902D8B58(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_190428674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (v29) {
    sub_1902D8B58(v29);
  }
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190428708(uint64_t a1, uint64_t *a2)
{
  id Weak = (id *)objc_loadWeak((id *)(a1 + 32));
  if (Weak)
  {
    uint64_t v4 = Weak;
    if (objc_loadWeak(Weak + 3))
    {
      uint64_t v6 = (std::__shared_weak_count *)a2[1];
      uint64_t v7 = *a2;
      uint64_t v8 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      objc_msgSend__handleMessage_(v4, v5, (uint64_t)&v7);
      if (v8) {
        sub_1902D8B58(v8);
      }
    }
  }
}

void sub_19042877C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_190428794()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1E929DA38 != -1) {
    dispatch_once(&qword_1E929DA38, &unk_1EDFD3980);
  }
  v0 = qword_1E929DA40;
  if (os_log_type_enabled((os_log_t)qword_1E929DA40, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_DEFAULT, "[CMNoMovementManager] interruption with locationd occurred", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929DA38 != -1) {
      dispatch_once(&qword_1E929DA38, &unk_1EDFD3980);
    }
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMNoMovementManager _connect]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

void sub_190428B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1902D8B58(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190428F60(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 24));
  uint64_t v3 = *(void *)(a1 + 40);

  return MEMORY[0x1F4181798](Weak, sel_didStateUpdate_, v3);
}

os_log_t sub_190428FF0()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "CheckIn");
  qword_1E929DA40 = (uint64_t)result;
  return result;
}

void *sub_190429020@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  os_log_t result = sub_19042907C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_190429068(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19042907C(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_1904290EC((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_1904290D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1904290EC(int a1, uint64_t a2, char *__s)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC410](a2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19042913C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190429158(void *a1, void *a2)
{
  char v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *char v4 = &unk_1EDFD0DA0;
  sub_1902C3F54(__p, "kCLConnectionMessageCheckInNoMovementSubscription");
  MEMORY[0x192FCC420](v4 + 3, __p, *a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1904291F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_190429680(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend__disconnect(*(void **)(a1 + 32), a2, a3);
}

uint64_t sub_190429874(uint64_t a1)
{
  objc_storeWeak((id *)(*(void *)(a1 + 32) + 24), *(id *)(a1 + 40));
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 24));
  char v5 = *(void **)(a1 + 32);
  if (Weak)
  {
    return objc_msgSend__connect(v5, v2, v3);
  }
  else
  {
    return objc_msgSend__disconnect(v5, v2, v3);
  }
}

void sub_190429D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,std::__shared_weak_count *a24,int a25,__int16 a26,char a27,char a28)
{
  if (a12) {
    sub_1902D8B58(a12);
  }
  if (a24) {
    sub_1902D8B58(a24);
  }
  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190429DB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE838 != -1) {
    dispatch_once(&qword_1EB3BE838, &unk_1EDFD3DC0);
  }
  char v4 = qword_1EB3BE830;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "[HeadphoneUsage] CMAudioAccessoryUsageManager - Calling default handler", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD3DC0);
    }
    __int16 v15 = 0;
    int v11 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMAudioAccessoryUsageManager _connect]_block_invoke", "CoreLocation: %s\n", v11);
    if (v11 != (char *)buf) {
      free(v11);
    }
  }
  id Weak = (id *)objc_loadWeak((id *)(a1 + 32));
  char v6 = Weak;
  if (!Weak)
  {
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD3DC0);
    }
    uint64_t v9 = qword_1EB3BE830;
    if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] CMAudioAccessoryUsageManager: strongSelf missing!", buf, 2u);
    }
    if (!sub_1902D8400(115, 0)) {
      return;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 == -1)
    {
LABEL_30:
      __int16 v15 = 0;
      uint64_t v12 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMAudioAccessoryUsageManager _connect]_block_invoke", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
      return;
    }
LABEL_32:
    dispatch_once(&qword_1EB3BE838, &unk_1EDFD3DC0);
    goto LABEL_30;
  }
  if (objc_loadWeak(Weak + 3))
  {
    uint64_t v8 = (std::__shared_weak_count *)a2[1];
    uint64_t v13 = *a2;
    int v14 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    objc_msgSend__handleMessage_(v6, v7, (uint64_t)&v13);
    if (v14) {
      sub_1902D8B58(v14);
    }
    return;
  }
  if (qword_1EB3BE838 != -1) {
    dispatch_once(&qword_1EB3BE838, &unk_1EDFD3DC0);
  }
  uint64_t v10 = qword_1EB3BE830;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_ERROR, "[HeadphoneUsage] No delegate set", buf, 2u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 == -1) {
      goto LABEL_30;
    }
    goto LABEL_32;
  }
}

void sub_19042A1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_1902D8B58(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_19042A204()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE838 != -1) {
    dispatch_once(&qword_1EB3BE838, &unk_1EDFD3DC0);
  }
  v0 = qword_1EB3BE830;
  if (os_log_type_enabled((os_log_t)qword_1EB3BE830, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v0, OS_LOG_TYPE_DEFAULT, "[HeadphoneUsage] CMAudioAccessoryUsageManager - interruptionHandler", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE838 != -1) {
      dispatch_once(&qword_1EB3BE838, &unk_1EDFD3DC0);
    }
    v1 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMAudioAccessoryUsageManager _connect]_block_invoke", "CoreLocation: %s\n", v1);
    if (v1 != (char *)buf) {
      free(v1);
    }
  }
}

uint64_t sub_19042AC20(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 24));
  uint64_t v3 = *(void *)(a1 + 40);

  return MEMORY[0x1F4181798](Weak, sel_errorOccurred_, v3);
}

uint64_t sub_19042AC60(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 24));
  uint64_t v3 = *(void *)(a1 + 40);

  return MEMORY[0x1F4181798](Weak, sel_didReceiveUsageMetrics_, v3);
}

uint64_t sub_19042ACA0(uint64_t a1)
{
  id Weak = objc_loadWeak((id *)(*(void *)(a1 + 32) + 24));
  uint64_t v3 = *(void *)(a1 + 40);

  return MEMORY[0x1F4181798](Weak, sel_errorOccurred_, v3);
}

void sub_19042B050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1902D8B58(a16);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_19042B240()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Accessory");
  qword_1EB3BE830 = (uint64_t)result;
  return result;
}

void *sub_19042B270@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x70uLL);
  os_log_t result = sub_19042B2D4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_19042B2C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19042B2D4(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_19042B348((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_19042B334(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_19042B348(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC420](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19042B3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19042B3BC(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 52) = 0x1900000000;
  *(void *)(a1 + 360) = 0x1900000000;
  *(void *)(a1 + 668) = 0x1900000000;
  *(void *)(a1 + 976) = 0x1900000000;
  *(void *)(a1 + 1284) = 0x1900000000;
  *(void *)(a1 + 1392) = 0x1900000000;
  *(void *)(a1 + 1500) = 0x1900000000;
  *(void *)(a1 + 1608) = 0x1900000000;
  *(void *)(a1 + 1716) = 0x1900000000;
  *(void *)(a1 + 1824) = 0x1900000000;
  *(void *)(a1 + 1932) = 0x1900000000;
  *(void *)(a1 + 2040) = 0x1900000000;
  *(void *)(a1 + 2148) = 0xB200000000;
  *(_OWORD *)(a1 + 5056) = 0u;
  *(_DWORD *)(a1 + 5080) = 0;
  *(void *)(a1 + 5072) = 0;
  *(_DWORD *)(a1 + 5096) = 0;
  *(void *)(a1 + 5088) = 0;
  *(_WORD *)(a1 + 5100) = 1;
  *(_OWORD *)(a1 + 5104) = 0u;
  *(_OWORD *)(a1 + 5120) = 0u;
  *(_OWORD *)(a1 + 5136) = 0u;
  *(_OWORD *)(a1 + 5152) = 0u;
  *(_OWORD *)(a1 + 5168) = 0u;
  *(_OWORD *)(a1 + 5184) = 0u;
  *(unsigned char *)(a1 + 5200) = 1;
  *(void *)(a1 + 5212) = 0;
  *(void *)(a1 + 5220) = 0;
  *(void *)(a1 + 5228) = 0x3C00000000;
  *(unsigned char *)(a1 + 5476) = 1;
  *(void *)(a1 + 5488) = 0;
  *(void *)(a1 + 5496) = 0;
  *(void *)(a1 + 5504) = 0x3C00000000;
  *(unsigned char *)(a1 + 5752) = 1;
  *(void *)(a1 + 5772) = 0;
  *(void *)(a1 + 5764) = 0;
  *(void *)(a1 + 5780) = 0xB00000000;
  *(_DWORD *)(a1 + 5832) = 1057360530;
  *(_DWORD *)(a1 + 5856) = 0;
  *(void *)(a1 + 5840) = 0;
  *(void *)(a1 + 5847) = 0;
  *(unsigned char *)(a1 + 5860) = 1;
  *(void *)(a1 + 5880) = 0;
  *(void *)(a1 + 5872) = 0;
  *(void *)(a1 + 5888) = 0xF00000000;
  *(_DWORD *)(a1 + 5980) = 0;
  *(unsigned char *)(a1 + 5984) = 0;
  *(void *)(a1 + 6032) = 0;
  *(_DWORD *)(a1 + 5956) = 0;
  *(_DWORD *)(a1 + 5959) = 0;
  *(void *)(a1 + 5969) = 0;
  *(void *)(a1 + 5964) = 0;
  *(unsigned char *)(a1 + 6024) = 0;
  *(_OWORD *)(a1 + 5992) = 0u;
  *(_OWORD *)(a1 + 6008) = 0u;
  sub_19042B5C8((unint64_t *)a1);
}

void sub_19042B570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  a10 = v10 + 647;
  sub_19042FEF0(&a10);
  a10 = v10 + 644;
  sub_19042FEF0(&a10);
  a10 = v10 + 641;
  sub_19042FEF0(&a10);
  a10 = v12;
  sub_19042FEF0(&a10);
  _Unwind_Resume(a1);
}

void sub_19042B5C8(unint64_t *a1)
{
  *((unsigned char *)a1 + 1) = 0;
  *((_DWORD *)a1 + 90) = 0;
  *((_DWORD *)a1 + 167) = 0;
  *((_DWORD *)a1 + 244) = 0;
  *((_DWORD *)a1 + 321) = 0;
  *((_DWORD *)a1 + 348) = 0;
  *((_DWORD *)a1 + 375) = 0;
  *((_DWORD *)a1 + 402) = 0;
  *((_DWORD *)a1 + 429) = 0;
  *((_DWORD *)a1 + 456) = 0;
  *((_DWORD *)a1 + 483) = 0;
  *((_DWORD *)a1 + 510) = 0;
  *((_DWORD *)a1 + 537) = 0;
  *(_OWORD *)((char *)a1 + 4) = 0u;
  *(_OWORD *)((char *)a1 + 20) = 0u;
  *(_OWORD *)((char *)a1 + 36) = 0u;
  *((_DWORD *)a1 + 13) = 0;
  *(_OWORD *)((char *)a1 + 5004) = 0u;
  *(_OWORD *)((char *)a1 + 5020) = 0u;
  *(_OWORD *)((char *)a1 + 5036) = 0u;
  *((unsigned char *)a1 + 5052) = 0;
  *((_DWORD *)a1 + 1270) = 0;
  a1[634] = 0;
  *((_OWORD *)a1 + 316) = 0u;
  a1[636] = 0;
  *((_DWORD *)a1 + 1274) = 0;
  *((_WORD *)a1 + 2550) = 1;
  sub_19042B82C(a1);
}

unint64_t *sub_19042B644(unint64_t *result, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned __int8 *)result != a2)
  {
    uint64_t v3 = result;
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
    }
    char v4 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_INFO))
    {
      int v5 = *(unsigned __int8 *)v3;
      *(_DWORD *)buf = 67109376;
      int v8 = v5;
      __int16 v9 = 1024;
      int v10 = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_INFO, "[CMComplexTransition] Changed tracking behavior from %d to %d.", buf, 0xEu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
      }
      char v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CMComplexTransition::setTrackingBehavior(CMRelDM::TrackingBehavior)", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
    sub_19042B5C8(v3);
  }
  return result;
}

void sub_19042B82C(unint64_t *a1)
{
}

void sub_19042B914(unsigned __int8 *a1, float32x2_t *a2, float32x2_t *a3, unsigned __int8 a4, unsigned __int8 a5, long long *a6, unint64_t a7, float32x4_t a8, float a9)
{
  uint64_t v319 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = (float32x4_t *)(a1 + 5020);
  if (*a1 == 1)
  {
    a1[5101] = a5;
    long long v14 = *a6;
    *(_OWORD *)(a1 + 6009) = *(long long *)((char *)a6 + 9);
    *((_OWORD *)a1 + 375) = v14;
    *((_DWORD *)a1 + 1508) = a8.i32[0];
    *((float *)a1 + 1509) = a9;
  }
  a1[5100] = a4;
  __int32 v15 = a2[8].i32[1];
  a8.f32[0] = -a2[8].f32[0];
  *(float32x2_t *)v284.f32 = vneg_f32(a2[7]);
  v284.i64[1] = __PAIR64__(v15, a8.u32[0]);
  float32x4_t v16 = sub_1902D9ACC(&v284, a8);
  __int32 v17 = a3[8].i32[1];
  v16.f32[0] = -a3[8].f32[0];
  *(float32x2_t *)v283.f32 = vneg_f32(a3[7]);
  v283.i64[1] = __PAIR64__(v17, v16.u32[0]);
  sub_1902D9ACC(&v283, v16);
  float v18 = sub_1904CF73C(v284.f32, a2->f32[0], a2->f32[1], a2[1].f32[0]);
  float v20 = v19;
  float v281 = v21;
  float v22 = sub_1904CF73C(v283.f32, a3->f32[0], a3->f32[1], a3[1].f32[0]);
  float v24 = v23;
  float v26 = v25;
  float v27 = sub_19042D6F8((float *)a2);
  float v30 = sub_1904CF73C(v284.f32, v27, v28, v29);
  float v32 = v31;
  float v34 = v33;
  float v35 = sub_19042D6F8((float *)a3);
  float v38 = sub_1904CF73C(v283.f32, v35, v36, v37);
  float v39 = v18 + *((float *)a1 + 1);
  float v40 = v20 + *((float *)a1 + 2);
  float v41 = v281 + *((float *)a1 + 3);
  float v42 = v22 + *((float *)a1 + 4);
  float v43 = v24 + *((float *)a1 + 5);
  uint64_t v44 = (float *)(a1 + 24);
  float v45 = v26 + *((float *)a1 + 6);
  float v46 = v30 + *((float *)a1 + 7);
  float v47 = v32 + *((float *)a1 + 8);
  float v48 = v34 + *((float *)a1 + 9);
  float v49 = v38 + *((float *)a1 + 10);
  float v50 = *((float *)a1 + 12);
  float v52 = v51 + *((float *)a1 + 11);
  *((float *)a1 + 1) = v39;
  *((float *)a1 + 2) = v40;
  *((float *)a1 + 3) = v41;
  *((float *)a1 + 4) = v42;
  *((float *)a1 + 5) = v43;
  *((float *)a1 + 6) = v45;
  *((float *)a1 + 7) = v46;
  *((float *)a1 + 8) = v47;
  *((float *)a1 + 9) = v48;
  *((float *)a1 + 10) = v49;
  *((float *)a1 + 11) = v52;
  float v54 = v53 + v50;
  *((float *)a1 + 12) = v54;
  int v55 = ++a1[1];
  if (v55 == 4)
  {
    *((float *)a1 + 1) = v39 * 0.25;
    *((float *)a1 + 2) = v40 * 0.25;
    *((float *)a1 + 3) = v41 * 0.25;
    *((float *)a1 + 4) = v42 * 0.25;
    *((float *)a1 + 5) = v43 * 0.25;
    *((float *)a1 + 6) = v45 * 0.25;
    *((float *)a1 + 7) = v46 * 0.25;
    *((float *)a1 + 8) = v47 * 0.25;
    *((float *)a1 + 9) = v48 * 0.25;
    *((float *)a1 + 10) = v49 * 0.25;
    *((float *)a1 + 11) = v52 * 0.25;
    *((float *)a1 + 12) = v54 * 0.25;
    if (*a1 == 1)
    {
      unint64_t v277 = v13;
      unint64_t v279 = a7;
      unint64_t v56 = 0;
      int v57 = 1;
      do
      {
        unsigned int v58 = *(float **)(*((void *)a1 + 638) + 8 * v56);
        float32x4_t v59 = (float *)sub_19042D844((uint64_t)(a1 + 4), v56);
        LODWORD(v58) = sub_19042FABC(v58, *v59);
        int v60 = *(float **)(*((void *)a1 + 641) + 8 * v56);
        char v61 = (float *)sub_19042D844((uint64_t)(a1 + 16), v56);
        unsigned int v62 = v58 & sub_19042FABC(v60, *v61);
        __int16 v63 = *(float **)(*((void *)a1 + 644) + 8 * v56);
        double v64 = (float *)sub_19042D844((uint64_t)(a1 + 28), v56);
        LODWORD(v63) = sub_19042FABC(v63, *v64);
        __int16 v65 = *(float **)(*((void *)a1 + 647) + 8 * v56);
        double v66 = (float *)sub_19042D844((uint64_t)(a1 + 40), v56);
        v57 &= v62 & v63 & sub_19042FABC(v65, *v66);
        ++v56;
      }
      while (v56 != 3);
      unint64_t v67 = 0;
      if (v57)
      {
        uint64_t v13 = v277;
        a7 = v279;
        uint64_t v44 = (float *)(a1 + 24);
        do
        {
          uint64_t v68 = *(void *)(*((void *)a1 + 638) + 8 * v67);
          int v69 = *(_DWORD *)(v68 + 4 * *(void *)(v68 + 8) + 16);
          *(_DWORD *)sub_19042D844((uint64_t)(a1 + 4), v67) = v69;
          uint64_t v70 = *(void *)(*((void *)a1 + 641) + 8 * v67);
          int v71 = *(_DWORD *)(v70 + 4 * *(void *)(v70 + 8) + 16);
          *(_DWORD *)sub_19042D844((uint64_t)(a1 + 16), v67) = v71;
          uint64_t v72 = *(void *)(*((void *)a1 + 644) + 8 * v67);
          int v73 = *(_DWORD *)(v72 + 4 * *(void *)(v72 + 8) + 16);
          *(_DWORD *)sub_19042D844((uint64_t)(a1 + 28), v67) = v73;
          uint64_t v74 = *(void *)(*((void *)a1 + 647) + 8 * v67);
          int v75 = *(_DWORD *)(v74 + 4 * *(void *)(v74 + 8) + 16);
          *(_DWORD *)sub_19042D844((uint64_t)(a1 + 40), v67++) = v75;
        }
        while (v67 != 3);
      }
      else
      {
        uint64_t v13 = v277;
        a7 = v279;
        uint64_t v44 = (float *)(a1 + 24);
        do
        {
          *(_DWORD *)sub_19042D844((uint64_t)(a1 + 4), v67) = 0;
          *(_DWORD *)sub_19042D844((uint64_t)(a1 + 16), v67) = 0;
          *(_DWORD *)sub_19042D844((uint64_t)(a1 + 28), v67) = 0;
          *(_DWORD *)sub_19042D844((uint64_t)(a1 + 40), v67++) = 0;
        }
        while (v67 != 3);
      }
    }
    sub_19042FFA8((unsigned __int16 *)a1 + 26, (uint64_t)(a1 + 4));
    sub_19042FFA8((unsigned __int16 *)a1 + 180, (uint64_t)(a1 + 16));
    sub_19042FFA8((unsigned __int16 *)a1 + 334, (uint64_t)(a1 + 28));
    sub_19042FFA8((unsigned __int16 *)a1 + 488, (uint64_t)(a1 + 40));
    if (*a1 == 1)
    {
      sub_19042D76C((uint64_t)(a1 + 5476), v44);
      sub_19042D76C((uint64_t)v13[11].i64 + 4, (float *)a1 + 3);
      if (*((_DWORD *)a1 + 1308) == *((unsigned __int16 *)a1 + 2615))
      {
        if (v13[11].i8[4]) {
          sub_190430068((uint64_t)v13[11].i64 + 4);
        }
        *(_DWORD *)buf = fabsf(*((float *)a1 + 1301) * 1.2);
        sub_19042D76C((uint64_t)(a1 + 5752), (float *)buf);
      }
    }
    a1[1] = 0;
    *(_OWORD *)(a1 + 4) = 0u;
    *(_OWORD *)(a1 + 20) = 0u;
    *(_OWORD *)(a1 + 36) = 0u;
    if (*((_DWORD *)a1 + 14) == *((unsigned __int16 *)a1 + 27)
      && *((_DWORD *)a1 + 91) == *((unsigned __int16 *)a1 + 181)
      && *((_DWORD *)a1 + 168) == *((unsigned __int16 *)a1 + 335)
      && *((_DWORD *)a1 + 245) == *((unsigned __int16 *)a1 + 489))
    {
      sub_19042DA20((unsigned __int16 *)a1 + 26, (unsigned __int16 *)a1 + 642, (unsigned __int16 *)a1 + 750);
      sub_19042DA20((unsigned __int16 *)a1 + 180, (unsigned __int16 *)a1 + 696, (unsigned __int16 *)a1 + 804);
      sub_19042DA20((unsigned __int16 *)a1 + 334, (unsigned __int16 *)a1 + 858, (unsigned __int16 *)a1 + 966);
      sub_19042DA20((unsigned __int16 *)a1 + 488, (unsigned __int16 *)a1 + 912, (unsigned __int16 *)a1 + 1020);
    }
    if ((*a1 != 1 || *((_DWORD *)a1 + 1446) == *((unsigned __int16 *)a1 + 2891))
      && *((_DWORD *)a1 + 322) == *((unsigned __int16 *)a1 + 643)
      && *((_DWORD *)a1 + 349) == *((unsigned __int16 *)a1 + 697)
      && *((_DWORD *)a1 + 376) == *((unsigned __int16 *)a1 + 751)
      && *((_DWORD *)a1 + 403) == *((unsigned __int16 *)a1 + 805)
      && *((_DWORD *)a1 + 430) == *((unsigned __int16 *)a1 + 859)
      && *((_DWORD *)a1 + 457) == *((unsigned __int16 *)a1 + 913)
      && *((_DWORD *)a1 + 484) == *((unsigned __int16 *)a1 + 967)
      && *((_DWORD *)a1 + 511) == *((unsigned __int16 *)a1 + 1021))
    {
      char v76 = v13;
      unint64_t v280 = a7;
      *((float *)a1 + 1251) = (float)(sub_19042DAB0((unsigned __int16 *)a1 + 642, (unsigned __int16 *)a1 + 696) * 3282.8)
                            / 25.0;
      uint64_t v282 = (unsigned __int16 *)(a1 + 1500);
      *((float *)a1 + 1252) = (float)(sub_19042DAB0((unsigned __int16 *)a1 + 750, (unsigned __int16 *)a1 + 804) * 3282.8)
                            / 25.0;
      *((float *)a1 + 1253) = (float)(sub_19042DAB0((unsigned __int16 *)a1 + 858, (unsigned __int16 *)a1 + 912) * 96.17)
                            / 25.0;
      *((float *)a1 + 1254) = (float)(sub_19042DAB0((unsigned __int16 *)a1 + 966, (unsigned __int16 *)a1 + 1020) * 96.17)
                            / 25.0;
      char v77 = a1 + 2148;
      unint64_t v78 = *((unsigned int *)a1 + 538);
      unint64_t v79 = *((unsigned __int16 *)a1 + 1074) + (unint64_t)*((unsigned __int16 *)a1 + 1075);
      if (v79 < v78) {
        unint64_t v78 = 0;
      }
      *(_OWORD *)&v77[8 * (v79 - v78) + 4] = *(_OWORD *)(a1 + 5004);
      unsigned int v80 = *((unsigned __int16 *)a1 + 1075);
      unint64_t v81 = *((unsigned int *)a1 + 538);
      if (v81 <= v80)
      {
        unint64_t v82 = (unsigned __int16)*v77 + 1;
        if (v82 < v81) {
          LOWORD(v81) = 0;
        }
        *char v77 = v82 - v81;
      }
      else
      {
        *((_WORD *)a1 + 1075) = v80 + 1;
      }
      float v83 = sub_19042DD10((unsigned __int16 *)a1 + 642);
      float v84 = sub_19043069C((unsigned __int16 *)a1 + 642, *((unsigned __int16 *)a1 + 643));
      float v85 = -v83;
      if (v83 > 0.0) {
        float v85 = v83;
      }
      BOOL v86 = v85 < 0.17453;
      if (v84 >= 0.0076154) {
        BOOL v86 = 0;
      }
      v13[4].i8[13] = v86;
      float v87 = sub_19042DD10((unsigned __int16 *)a1 + 696);
      float v88 = sub_19043069C((unsigned __int16 *)a1 + 696, *((unsigned __int16 *)a1 + 697));
      float v89 = -v87;
      if (v87 > 0.0) {
        float v89 = v87;
      }
      BOOL v90 = v89 < 0.17453;
      if (v88 >= 0.0076154) {
        BOOL v90 = 0;
      }
      v13[4].i8[14] = v90;
      sub_19042DEC0((unsigned __int16 *)a1 + 334);
      float v92 = -v91;
      if (v91 > 0.0) {
        float v92 = v91;
      }
      if (v92 <= 0.25)
      {
        unint64_t v94 = *((void *)a1 + 636);
        unint64_t v93 = a7;
      }
      else
      {
        unint64_t v93 = a7;
        *((void *)a1 + 636) = a7;
        unint64_t v94 = a7;
      }
      BOOL v96 = (float)((float)(v93 - v94) * 0.000001) < 0.5 && v94 != 0;
      v13[4].i8[15] = v96;
      if (v13[4].i8[13] || v13[4].i8[14])
      {
        unint64_t v97 = 0;
      }
      else
      {
        BOOL v126 = sub_19042E338((unsigned __int16 *)a1 + 26, 0.2618, 0.2618);
        BOOL v127 = sub_19042E338((unsigned __int16 *)a1 + 180, 0.17453, 0.17453);
        float v128 = sub_19042DD10((unsigned __int16 *)a1 + 642);
        float v129 = sub_19042DD10((unsigned __int16 *)a1 + 696);
        float v130 = v128 - v129;
        if ((float)(v128 - v129) <= 0.0) {
          float v130 = -(float)(v128 - v129);
        }
        float v131 = -v128;
        if (v128 > 0.0) {
          float v131 = v128;
        }
        if (v129 <= 0.0) {
          float v129 = -v129;
        }
        if (v131 < v129) {
          float v129 = v131;
        }
        if (v130 >= (float)(v129 * 0.2) || !v127 || (unint64_t v97 = a7, !v126))
        {
LABEL_63:
          float v98 = sub_19042DD10((unsigned __int16 *)a1 + 642);
          float v99 = sub_19042DD10((unsigned __int16 *)a1 + 696);
          *(float *)v100.i32 = -v99;
          if (v99 > 0.0) {
            *(float *)v100.i32 = v99;
          }
          float v101 = -v98;
          if (v98 > 0.0) {
            float v101 = v98;
          }
          if (v101 < 0.087266) {
            float v101 = 0.087266;
          }
          BOOL v103 = (float)(*(float *)v100.i32 / v101) > 3.0 && v13[4].i8[14] == 0;
          float v104 = v99 - v98;
          if (v104 <= 0.0) {
            float v104 = -v104;
          }
          if (v104 > 0.5236 && v13[5].i8[0] == 0) {
            BOOL v103 = 1;
          }
          v13[4].i8[12] = v103;
          if (v103)
          {
            unsigned int v106 = *((_DWORD *)a1 + 1270) + 1;
            *((_DWORD *)a1 + 1270) = v106;
            if (v106 >= 4) {
              *((void *)a1 + 634) = a7;
            }
          }
          else
          {
            *((_DWORD *)a1 + 1270) = 0;
          }
          unint64_t v107 = a1 + 5752;
          if (v13[2].i8[0])
          {
            *(_DWORD *)char v77 = 0;
            float v108 = 1.0;
          }
          else
          {
            unint64_t v109 = *((unsigned __int16 *)a1 + 1075);
            if (v109 < 0x1A
              || (unint64_t v110 = v109 - 25,
                  *((float *)a1 + 1255) = sub_19042DB28((unsigned __int16 *)a1 + 1074, v109 - 25, 0),
                  *((float *)a1 + 1256) = sub_19042DB28((unsigned __int16 *)a1 + 1074, v110, 1uLL),
                  *((float *)a1 + 1257) = sub_19042DB28((unsigned __int16 *)a1 + 1074, v110, 2uLL),
                  *((float *)a1 + 1258) = sub_19042DB28((unsigned __int16 *)a1 + 1074, v110, 3uLL),
                  float v108 = 1.0,
                  !v13[2].i8[0]))
            {
              float v108 = 1.0;
              if (!v13[4].i8[15])
              {
                float v111 = sub_19042DD10((unsigned __int16 *)a1 + 642);
                if (v111 <= 0.0) {
                  float v111 = -v111;
                }
                if (v111 < 0.5236)
                {
                  uint64_t v112 = *((void *)a1 + 634);
                  if (v112)
                  {
                    if ((float)((float)(v280 - v112) * 0.000001) >= 3.0) {
                      float v108 = 1.0;
                    }
                    else {
                      float v108 = 3.0;
                    }
                  }
                }
              }
            }
          }
          float v113 = 0.25;
          if (!v13[2].i8[0]) {
            float v113 = 0.5;
          }
          *(float *)v100.i32 = v108 * v113;
          float32x4_t v114 = vaddq_f32(*v13, (float32x4_t)xmmword_190607190);
          *(float *)&v100.i32[1] = v113;
          v13[1] = vmulq_f32((float32x4_t)vzip1q_s32(v100, vrev64q_s32(v100)), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_1906071A0, v114), (int8x16_t)xmmword_1906071A0, (int8x16_t)v114));
          char v278 = (unsigned __int16 *)(a1 + 1392);
          if (*a1 != 1)
          {
LABEL_221:
            BOOL v184 = fabsf(sub_19042DD10((unsigned __int16 *)a1 + 642)) > 0.17453 || v13[2].i8[0] != 0;
            int v185 = *a1;
            float v186 = *((float *)a1 + 1251);
            float v187 = *((float *)a1 + 1259);
            BOOL v188 = v186 > v187;
            if (*a1 && v186 <= v187)
            {
              BOOL v188 = a1[5854] != 0;
            }
            else
            {
              BOOL v189 = 1;
              if (!*a1)
              {
LABEL_232:
                int v190 = v184 && v188 && v189;
                BOOL v191 = fabsf(sub_19042DD10(v282)) > 0.087266 || v13[2].i8[0] != 0;
                float v192 = *((float *)a1 + 1252);
                if (v192 <= *((float *)a1 + 1260)) {
                  BOOL v191 = 0;
                }
                if (v185)
                {
                  if (v190)
                  {
                    int v193 = 1;
                  }
                  else if (v13[5].i8[1])
                  {
                    int v193 = 0;
                  }
                  else
                  {
                    int v193 = v191;
                  }
                  BOOL v194 = *((float *)a1 + 1254) > *((float *)a1 + 1262)
                      || *((float *)a1 + 1253) > *((float *)a1 + 1261) && v13[5].i8[1] == 0;
                }
                else
                {
                  int v193 = v190 | v191;
                  BOOL v194 = *((float *)a1 + 1254) > *((float *)a1 + 1262);
                  if (*((float *)a1 + 1253) > *((float *)a1 + 1261)) {
                    BOOL v194 = 1;
                  }
                }
                if (!v13[2].i8[0])
                {
                  int v197 = v193 & v194;
                  v13[2].i8[0] = v197;
                  if (v197 != 1) {
                    return;
                  }
                  if (sub_19042E074((uint64_t)a1, v280)
                    || v185
                    && ((sub_19042E074((uint64_t)a1, v280) & 1) != 0
                     || a1[5962]
                     || (float)((float)*((unint64_t *)a1 + 749) + 200000.0) >= (float)v280))
                  {
                    v13[2].i8[0] = 0;
                    return;
                  }
                  *((void *)a1 + 632) = 0;
                  if (qword_1E929D8D8 != -1) {
                    dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
                  }
                  uint64_t v198 = qword_1E929D8E0;
                  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
                  {
                    double v199 = *((float *)a1 + 1251);
                    double v200 = *((float *)a1 + 1252);
                    double v201 = *((float *)a1 + 1253);
                    double v202 = *((float *)a1 + 1254);
                    double v203 = *((float *)a1 + 1255);
                    double v204 = *((float *)a1 + 1256);
                    double v205 = *((float *)a1 + 1257);
                    double v206 = *((float *)a1 + 1258);
                    *(_DWORD *)buf = 134220288;
                    double v303 = *(double *)&v280;
                    __int16 v304 = 2048;
                    double v305 = v199;
                    __int16 v306 = 2048;
                    *(double *)char v307 = v200;
                    *(_WORD *)&v307[8] = 2048;
                    *(double *)unsigned int v308 = v201;
                    *(_WORD *)&v308[8] = 2048;
                    double v309 = v202;
                    *(_WORD *)char v310 = 2048;
                    *(double *)&v310[2] = v203;
                    __int16 v311 = 2048;
                    double v312 = v204;
                    __int16 v313 = 2048;
                    double v314 = v205;
                    __int16 v315 = 2048;
                    double v316 = v206;
                    __int16 v317 = 2048;
                    unint64_t v318 = 0xBFF0000000000000;
                    _os_log_impl(&dword_1902AF000, v198, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition][Entering Complex Transition] Timestamp: %llu, VrtRotSim: %.2f, HrzRotSim: %.2f, VrtTrnSim: %.2f, HrzTrnSim: %.2f, VrtRotSimBln: %.2f, HrzRotSimBln: %.2f, VrtTrnSimBln: %.2f, HrzTrnSimBln: %.2f, TimeSincePureYawRot: %0.1f", buf, 0x66u);
                  }
                  if (!sub_1902D8400(115, 2)) {
                    goto LABEL_332;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929D8D8 != -1) {
                    dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
                  }
                  double v207 = *((float *)a1 + 1251);
                  double v208 = *((float *)a1 + 1252);
                  double v209 = *((float *)a1 + 1253);
                  double v210 = *((float *)a1 + 1254);
                  double v211 = *((float *)a1 + 1255);
                  double v212 = *((float *)a1 + 1256);
                  double v213 = *((float *)a1 + 1257);
                  double v214 = *((float *)a1 + 1258);
                  int v285 = 134220288;
                  uint64_t v286 = v280;
                  __int16 v287 = 2048;
                  double v288 = v207;
                  __int16 v289 = 2048;
                  *(double *)char v290 = v208;
                  *(_WORD *)&v290[8] = 2048;
                  *(double *)char v291 = v209;
                  *(_WORD *)&v291[8] = 2048;
                  double v292 = v210;
                  *(_WORD *)unint64_t v293 = 2048;
                  *(double *)&v293[2] = v211;
                  __int16 v294 = 2048;
                  double v295 = v212;
                  __int16 v296 = 2048;
                  double v297 = v213;
                  __int16 v298 = 2048;
                  double v299 = v214;
                  __int16 v300 = 2048;
                  unint64_t v301 = 0xBFF0000000000000;
                  unint64_t v215 = (char *)_os_log_send_and_compose_impl();
                  sub_1902D398C("Generic", 1, 0, 2, "void CMComplexTransition::logEnteringComplexTransition(const uint64_t) const", "CoreLocation: %s\n", v215);
LABEL_356:
                  if (v215 != (char *)buf) {
                    free(v215);
                  }
LABEL_332:
                  sub_19042E5C0((unsigned __int16 *)a1);
                  return;
                }
                if (*((float *)a1 + 1251) <= 100.0)
                {
                  if (v192 <= 100.0) {
                    char v216 = 1;
                  }
                  else {
                    char v216 = v193;
                  }
                  if (v216)
                  {
                    LOBYTE(v196) = 0;
                    goto LABEL_302;
                  }
                }
                else if (v193)
                {
                  LOBYTE(v196) = 0;
                  goto LABEL_303;
                }
                uint64_t v217 = *((void *)a1 + 633);
                float v218 = sub_1904308EC((unsigned __int16 *)a1 + 26, 0, *((unsigned __int16 *)a1 + 27));
                uint64_t v219 = 0;
                *(float *)buf = v218;
                double v303 = COERCE_DOUBLE(__PAIR64__(v221, v220));
                float v222 = 0.0;
                do
                {
                  float v222 = v222 + (float)(*(float *)&buf[v219] * *(float *)&buf[v219]);
                  v219 += 4;
                }
                while (v219 != 12);
                float v223 = sub_1904308EC((unsigned __int16 *)a1 + 180, 0, *((unsigned __int16 *)a1 + 181));
                uint64_t v224 = 0;
                *(float *)buf = v223;
                double v303 = COERCE_DOUBLE(__PAIR64__(v226, v225));
                float v227 = 0.0;
                do
                {
                  float v227 = v227 + (float)(*(float *)&buf[v224] * *(float *)&buf[v224]);
                  v224 += 4;
                }
                while (v224 != 12);
                BOOL v228 = sqrtf(v222) > 0.05236;
                if (sqrtf(v227) > 0.05236) {
                  BOOL v228 = 1;
                }
                int v196 = ((float)((float)(v280 - v217) * 0.000001) <= 5.0 || v217 == 0) && v228;
                if (v185)
                {
                  if (v13[5].i8[1])
                  {
                    unint64_t v230 = *((unsigned __int16 *)a1 + 2890) + (unint64_t)*((unsigned __int16 *)a1 + 2891) - 1;
                    unint64_t v231 = *((unsigned int *)a1 + 1446);
                    if (v230 < v231) {
                      unint64_t v231 = 0;
                    }
                    BOOL v232 = *(float *)&a1[4 * (v230 - v231) + 5788] > 0.17453;
                  }
                  else
                  {
                    BOOL v232 = 1;
                  }
                  v196 &= v232;
                }
                if (!*((void *)a1 + 633) && v196)
                {
                  *((double *)a1 + 633) = *(double *)&v280;
                  LOBYTE(v196) = 1;
                }
LABEL_302:
                if (!v193)
                {
LABEL_304:
                  if (v13[5].i8[0]) {
                    BOOL v233 = 0;
                  }
                  else {
                    BOOL v233 = v13[4].i8[12] != 0;
                  }
                  float v234 = sub_19042DD10((unsigned __int16 *)a1 + 642);
                  float v235 = sub_19043069C((unsigned __int16 *)a1 + 642, *((unsigned __int16 *)a1 + 643));
                  float v236 = -v234;
                  if (v234 > 0.0) {
                    float v236 = v234;
                  }
                  BOOL v237 = v235 < 0.0076154 && v236 < 0.087266;
                  float v238 = sub_19042DD10(v278);
                  float v239 = sub_19043069C(v278, *((unsigned __int16 *)a1 + 697));
                  float v240 = -v238;
                  if (v238 > 0.0) {
                    float v240 = v238;
                  }
                  BOOL v241 = v240 < 0.087266 && v237;
                  if (v239 >= 0.0076154) {
                    BOOL v241 = 0;
                  }
                  __int8 v242 = (v193 | v196) & ~(v233 || v241);
                  v76[2].i8[0] = v242;
                  if (v185 && a1[5852] && *((float *)a1 + 1492) < 1.7453)
                  {
                    v76[2].i8[0] = 0;
                    double v243 = *(double *)&v280;
                    *((double *)a1 + 749) = *(double *)&v280;
                  }
                  else
                  {
                    double v243 = *(double *)&v280;
                    if (v242) {
                      return;
                    }
                  }
                  *((void *)a1 + 633) = 0;
                  uint64_t v244 = *((void *)a1 + 632);
                  if (v244) {
                    double v245 = (float)((float)(unint64_t)(*(void *)&v243 - v244) * 0.000001);
                  }
                  else {
                    double v245 = -1.0;
                  }
                  if (qword_1E929D8D8 != -1) {
                    dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
                  }
                  char v246 = qword_1E929D8E0;
                  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
                  {
                    double v247 = *((float *)a1 + 1251);
                    double v248 = *((float *)a1 + 1252);
                    double v249 = *((float *)a1 + 1253);
                    double v250 = *((float *)a1 + 1254);
                    double v251 = *((float *)a1 + 1255);
                    double v252 = *((float *)a1 + 1256);
                    double v253 = *((float *)a1 + 1257);
                    double v254 = *((float *)a1 + 1258);
                    *(_DWORD *)buf = 134220288;
                    double v303 = v243;
                    __int16 v304 = 2048;
                    double v305 = v247;
                    __int16 v306 = 2048;
                    *(double *)char v307 = v248;
                    *(_WORD *)&v307[8] = 2048;
                    *(double *)unsigned int v308 = v249;
                    *(_WORD *)&v308[8] = 2048;
                    double v309 = v250;
                    *(_WORD *)char v310 = 2048;
                    *(double *)&v310[2] = v251;
                    __int16 v311 = 2048;
                    double v312 = v252;
                    __int16 v313 = 2048;
                    double v314 = v253;
                    __int16 v315 = 2048;
                    double v316 = v254;
                    __int16 v317 = 2048;
                    unint64_t v318 = *(void *)&v245;
                    _os_log_impl(&dword_1902AF000, v246, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition][Exiting Complex Transition] Timestamp: %llu, VrtRotSim: %.2f, HrzRotRim: %.2f, VrtTrnSim: %.2f, HrzTrnSim: %.2f, VrtRotSimBln: %.2f, HrzRotSimBln: %.2f, VrtTrnSimBln: %.2f, HrzTrnSimBln: %.2f, TimeSincePureYawRot: %0.1f", buf, 0x66u);
                  }
                  if (!sub_1902D8400(115, 2)) {
                    goto LABEL_332;
                  }
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929D8D8 != -1) {
                    dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
                  }
                  double v267 = *((float *)a1 + 1251);
                  double v268 = *((float *)a1 + 1252);
                  double v269 = *((float *)a1 + 1253);
                  double v270 = *((float *)a1 + 1254);
                  double v271 = *((float *)a1 + 1255);
                  double v272 = *((float *)a1 + 1256);
                  double v273 = *((float *)a1 + 1257);
                  double v274 = *((float *)a1 + 1258);
                  int v285 = 134220288;
                  uint64_t v286 = v280;
                  __int16 v287 = 2048;
                  double v288 = v267;
                  __int16 v289 = 2048;
                  *(double *)char v290 = v268;
                  *(_WORD *)&v290[8] = 2048;
                  *(double *)char v291 = v269;
                  *(_WORD *)&v291[8] = 2048;
                  double v292 = v270;
                  *(_WORD *)unint64_t v293 = 2048;
                  *(double *)&v293[2] = v271;
                  __int16 v294 = 2048;
                  double v295 = v272;
                  __int16 v296 = 2048;
                  double v297 = v273;
                  __int16 v298 = 2048;
                  double v299 = v274;
                  __int16 v300 = 2048;
                  unint64_t v301 = *(void *)&v245;
                  unint64_t v215 = (char *)_os_log_send_and_compose_impl();
                  sub_1902D398C("Generic", 1, 0, 2, "void CMComplexTransition::logExitingComplexTransition(const uint64_t) const", "CoreLocation: %s\n", v215);
                  goto LABEL_356;
                }
LABEL_303:
                *((void *)a1 + 633) = 0;
                goto LABEL_304;
              }
              BOOL v188 = 1;
            }
            if (v13[5].i8[1]) {
              BOOL v189 = a1[5853] != 0;
            }
            else {
              BOOL v189 = 1;
            }
            goto LABEL_232;
          }
          *((void *)a1 + 746) = 0;
          if (*((_DWORD *)a1 + 1377) == *((unsigned __int16 *)a1 + 2753)
            && *((_DWORD *)a1 + 1308) == *((unsigned __int16 *)a1 + 2615))
          {
            for (unint64_t i = 50; i != 60; ++i)
            {
              float v116 = *(float *)sub_190431610((unsigned __int16 *)a1 + 2752, i);
              *((float *)a1 + 1492) = *((float *)a1 + 1492)
                                    + (float)(v116 * *(float *)sub_190431610((unsigned __int16 *)a1 + 2614, i));
            }
            for (unint64_t j = 10; j != 60; ++j)
            {
              float v118 = *(float *)sub_190431610((unsigned __int16 *)a1 + 2752, j);
              float v119 = *((float *)a1 + 1493) + (float)(v118 * *(float *)sub_190431610((unsigned __int16 *)a1 + 2614, j));
              *((float *)a1 + 1493) = v119;
            }
            v120.i32[0] = *((_DWORD *)a1 + 1492);
            v120.f32[1] = v119;
            *((int8x8_t *)a1 + 746) = vbsl_s8((int8x8_t)vcgez_f32(v120), (int8x8_t)vsqrt_f32(v120), (int8x8_t)vneg_f32(vsqrt_f32(vneg_f32(v120))));
            float v121 = sub_19042DD10((unsigned __int16 *)a1 + 642);
            float v122 = sub_19042DD10(v282);
            float v123 = fabsf(v121);
            if (v122 < 0.17453) {
              float v122 = 0.17453;
            }
            float v124 = v123 / v122;
            *((float *)a1 + 1491) = v124;
            if (a1[5976])
            {
              BOOL v125 = *((float *)a1 + 1492) > 3.4907;
LABEL_112:
              a1[5976] = v125;
              goto LABEL_127;
            }
            if (v124 >= 4.0 && *((float *)a1 + 1493) >= 12.217)
            {
              BOOL v125 = 1;
              goto LABEL_112;
            }
          }
LABEL_127:
          if (a1[5984])
          {
            float v132 = fabsf(*((float *)a1 + 1509));
            a1[5984] = v132 > 0.17453;
            if (v132 <= 0.17453) {
              *((_DWORD *)a1 + 1495) = 0;
            }
          }
          else
          {
            float v133 = fabsf(*((float *)a1 + 1508));
            unsigned int v134 = *((_DWORD *)a1 + 1495);
            unsigned int v135 = v134 - 5;
            if (v134 < 5) {
              unsigned int v135 = 0;
            }
            if (v133 > 0.2618) {
              unsigned int v136 = v134 + 1;
            }
            else {
              unsigned int v136 = v135;
            }
            *((_DWORD *)a1 + 1495) = v136;
            a1[5984] = v136 > 0x31;
          }
          float v137 = *(float *)sub_190431610((unsigned __int16 *)a1 + 2890, 6uLL);
          unint64_t v138 = *((unsigned __int16 *)a1 + 2890) + (unint64_t)*((unsigned __int16 *)a1 + 2891) - 1;
          unint64_t v139 = *((unsigned int *)a1 + 1446);
          if (v138 < v139) {
            unint64_t v139 = 0;
          }
          float v140 = *(float *)&a1[4 * (v138 - v139) + 5788];
          int v141 = *((_DWORD *)a1 + 1464);
          if (v141) {
            float v142 = 0.0;
          }
          else {
            float v142 = 0.087266;
          }
          float v143 = *((float *)a1 + 1458);
          float v144 = v143 + v142;
          if ((v141 + 1) < 0x1F4) {
            unsigned int v145 = v141 + 1;
          }
          else {
            unsigned int v145 = 500;
          }
          if (v140 <= v144) {
            unsigned int v145 = 0;
          }
          *((_DWORD *)a1 + 1464) = v145;
          if (a1[5853]
            || (v140 <= (float)(v143 + 0.34907) ? (BOOL v146 = v145 > 0x19) : (BOOL v146 = 1),
                !v146 ? (int v147 = 0) : (int v147 = 1),
                a1[5853] = v147,
                v147 != 1))
          {
            float v160 = *(float *)sub_190431610((unsigned __int16 *)a1 + 2890, 6uLL);
            if (vabds_f32(v160, sub_19043180C((unsigned __int16 *)a1 + 2890, (unsigned int (*)(float, float))sub_190431A0C, 0)) >= 0.0000001)goto LABEL_170; {
            if (*v107)
            }
              sub_190430068((uint64_t)(a1 + 5752));
            if (vabds_f32(v160, *((float *)a1 + 1439)) >= 0.0000001)
            {
              int v162 = 0;
              int v161 = 1;
            }
            else
            {
              if (vabds_f32(v160, sub_19043180C((unsigned __int16 *)a1 + 2890, (unsigned int (*)(float, float))sub_190431A18, 0)) >= 0.0000001)goto LABEL_171; {
LABEL_170:
              }
              if (*v107) {
                sub_190430068((uint64_t)(a1 + 5752));
              }
              if (vabds_f32(v160, *((float *)a1 + 1439)) >= 0.0000001)
              {
                int v161 = 0;
                int v162 = 1;
              }
              else
              {
LABEL_171:
                int v161 = 0;
                int v162 = 0;
              }
            }
            if (a1[5853])
            {
              float v163 = *((float *)a1 + 1458);
              a1[5854] = v140 > (float)(v163 + 0.69813);
              char v164 = v161 ^ 1;
              if (a1[5852]) {
                char v164 = 1;
              }
              if (v164)
              {
                if (!a1[5852]) {
                  goto LABEL_190;
                }
                if ((float)(*((float *)a1 + 1462) - v140) <= fmaxf(*((float *)a1 + 1462) * 0.5, 0.5236)) {
                  int v162 = 0;
                }
                if (v162 == 1)
                {
                  sub_19042FB5C((uint64_t)a1, v280);
                  goto LABEL_190;
                }
              }
              else
              {
                *((float *)a1 + 1462) = v137;
                a1[5852] = 1;
              }
              a1[5853] = v140 > (float)(v163 + 0.0);
              a1[5854] = v140 > (float)(v163 + 0.087266);
              if (v140 > (float)(v163 + 0.0)) {
                goto LABEL_190;
              }
              sub_19042FB5C((uint64_t)a1, v280);
            }
            if (*((_DWORD *)a1 + 1446) == *((unsigned __int16 *)a1 + 2891))
            {
              if (v161)
              {
                unint64_t v165 = *((void *)a1 + 730);
                float v166 = fmaxf(v137, 0.17453) + (float)((float)v165++ * *((float *)a1 + 1458));
                *((float *)a1 + 1458) = v166 / (float)v165;
                *((void *)a1 + 730) = v165;
              }
            }
            else
            {
              *((void *)a1 + 730) = 0;
              *((_DWORD *)a1 + 1458) = 1057360530;
            }
          }
          else
          {
            *((float *)a1 + 1462) = v137;
            a1[5852] = 0;
            if (qword_1E929D8D8 != -1) {
              dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
            }
            unint64_t v148 = qword_1E929D8E0;
            if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
            {
              double v149 = *((float *)a1 + 1458);
              int v150 = *((_DWORD *)a1 + 1464);
              int v151 = a1[5854];
              double v152 = *((float *)a1 + 1462);
              int v153 = a1[5852];
              *(_DWORD *)buf = 134219520;
              double v303 = v140;
              __int16 v304 = 2048;
              double v305 = v149;
              __int16 v306 = 1024;
              *(_DWORD *)char v307 = v150;
              *(_WORD *)&v307[4] = 1024;
              *(_DWORD *)&v307[6] = v151;
              *(_WORD *)unsigned int v308 = 2048;
              *(double *)&v308[2] = v152;
              LOWORD(v309) = 1024;
              *(_DWORD *)((char *)&v309 + 2) = v153;
              HIWORD(v309) = 2048;
              *(void *)char v310 = v280;
              _os_log_impl(&dword_1902AF000, v148, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition] Entering body turn, body turn signal: %.2f, fBodyTurnMaximaBaseline: %0.2f, fCounterBodyTurnAboveBaseline: %d, fInStrongBodyTurn: %d, fLastInBodyTurnMaxima: %0.2f, fLastInBodyTurnFallingEdge: %d, timestamp: %llu", buf, 0x3Cu);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929D8D8 != -1) {
                dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
              }
              double v154 = *((float *)a1 + 1458);
              int v155 = *((_DWORD *)a1 + 1464);
              int v156 = a1[5854];
              double v157 = *((float *)a1 + 1462);
              int v158 = a1[5852];
              int v285 = 134219520;
              *(double *)&uint64_t v286 = v140;
              __int16 v287 = 2048;
              double v288 = v154;
              __int16 v289 = 1024;
              *(_DWORD *)char v290 = v155;
              *(_WORD *)&v290[4] = 1024;
              *(_DWORD *)&v290[6] = v156;
              *(_WORD *)char v291 = 2048;
              *(double *)&v291[2] = v157;
              LOWORD(v292) = 1024;
              *(_DWORD *)((char *)&v292 + 2) = v158;
              HIWORD(v292) = 2048;
              *(void *)unint64_t v293 = v280;
              unint64_t v159 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "void CMComplexTransition::updateInBodyTurnState(const uint64_t)", "CoreLocation: %s\n", v159);
              if (v159 != (char *)buf) {
                free(v159);
              }
            }
          }
LABEL_190:
          *(_WORD *)(a1 + 5961) = 0;
          unint64_t v167 = *((void *)a1 + 750);
          if (v167 && (float)(*((float *)a1 + 1508) + *((float *)a1 + 1508)) <= 0.7854)
          {
            if (a1[5984]) {
              goto LABEL_195;
            }
            if (!a1[5976])
            {
              if (!a1[6024]) {
                unint64_t v167 = *((void *)a1 + 751);
              }
              BOOL v256 = v280 >= v167;
              unint64_t v255 = v280 - v167;
              if (v256)
              {
                BOOL v256 = !a1[6024] && v255 >= 0x1E8481;
                BOOL v257 = !v256;
                a1[5961] = v257;
                if (v257)
                {
                  float v258 = 0.0;
                  unint64_t v259 = 20;
                  float v260 = 0.0;
                  do
                  {
                    float v261 = v258;
                    float v262 = *(float *)sub_190431610((unsigned __int16 *)a1 + 2614, v259) - v260;
                    float v258 = v261 + v262;
                    float v260 = (float)((float)(v261 + v262) - v261) - v262;
                    ++v259;
                  }
                  while (v259 != 60);
                  float v263 = fabsf(*((float *)a1 + 1504));
                  float v264 = fabsf((float)((float)(v258 / 40.0) * 40.0) / 50.0);
                  float v265 = v263 * 0.5;
                  BOOL v146 = v263 <= 2.618;
                  float v266 = 1.309;
                  if (v146) {
                    float v266 = v265;
                  }
                  a1[5962] = v264 < v266;
                }
              }
            }
          }
          if (!a1[5984])
          {
LABEL_196:
            if (a1[5852])
            {
              a1[5960] = 0;
            }
            else
            {
              float v168 = sub_19042DD10((unsigned __int16 *)a1 + 642);
              float v169 = *((float *)a1 + 1489);
              float v170 = fmaxf(v169, 0.2618);
              float v171 = fabsf(v168);
              if (a1[5960])
              {
                float v172 = v170 + 0.17453;
              }
              else
              {
                float v173 = fmaxf(v169, 0.5236);
                float v174 = 1.5;
                if (!a1[5962]) {
                  float v174 = 1.0;
                }
                float v172 = v170 + (float)(v174 * v173);
              }
              a1[5960] = v171 > v172;
              if (v171 > v172)
              {
                *((void *)a1 + 735) = 0;
                *((void *)a1 + 734) = 0;
                *((_DWORD *)a1 + 1472) = 0;
                a1[5860] = 1;
LABEL_217:
                if (a1[5976]) {
                  int v183 = 1;
                }
                else {
                  int v183 = a1[5984];
                }
                a1[5853] = (v183 | a1[5853]) != 0;
                goto LABEL_221;
              }
            }
            float v175 = *(float *)sub_19042EFD0((unsigned __int16 *)a1 + 642, 0xCuLL);
            unint64_t v176 = sub_190430D70((unsigned __int16 *)a1 + 642, 0, *((unsigned __int16 *)a1 + 643), 0);
            float v177 = *(float *)sub_1904302A0((unsigned __int16 *)a1 + 642, v176);
            unint64_t v178 = sub_19043115C((unsigned __int16 *)a1 + 642, 0, *((unsigned __int16 *)a1 + 643), 0);
            float v179 = *(float *)sub_1904302A0((unsigned __int16 *)a1 + 642, v178);
            float v180 = sub_1904313D0((unsigned __int16 *)a1 + 642, 0, *((unsigned __int16 *)a1 + 643), 0);
            if (vabds_f32(v175, v177) < 0.0000001 && vabds_f32(v175, v180) >= 0.0000001
              || vabds_f32(v175, v179) < 0.0000001 && vabds_f32(v175, v180) >= 0.0000001)
            {
              if (*((unsigned __int16 *)a1 + 643) <= 0xCu)
              {
                if (qword_1EB3BE888 != -1) {
                  dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
                }
                char v275 = off_1EB3BE880;
                if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 134217984;
                  *(void *)&double v303 = 12;
                  _os_log_impl(&dword_1902AF000, v275, OS_LOG_TYPE_FAULT, "Assertion failed: i < size(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 39,out of buffer range %zu.", buf, 0xCu);
                }
                if (sub_1902D8400(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1EB3BE888 != -1) {
                    dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
                  }
                  int v285 = 134217984;
                  uint64_t v286 = 12;
                  unsigned int v276 = (char *)_os_log_send_and_compose_impl();
                  sub_1902D398C("Generic", 1, 0, 0, "Element &CMVectorBufferBase<float, 1>::operator[](const size_t) [T = float, N = 1]", "CoreLocation: %s\n", v276);
                  if (v276 != (char *)buf) {
                    free(v276);
                  }
                }
              }
              unint64_t v181 = (float *)sub_1904302A0((unsigned __int16 *)a1 + 642, 0xCuLL);
              float v182 = *v181;
              if (*v181 > (float)(*((float *)a1 + 1489) + 0.17453))
              {
                *((void *)a1 + 735) = 0;
                *((void *)a1 + 734) = 0;
                *((_DWORD *)a1 + 1472) = 0;
                a1[5860] = 1;
              }
              *(_DWORD *)buf = fabsf(v182);
              sub_19042D76C((uint64_t)(a1 + 5860), (float *)buf);
            }
            if (*((_WORD *)a1 + 2945))
            {
              if (a1[5860]) {
                sub_190430068((uint64_t)(a1 + 5860));
              }
              *((_DWORD *)a1 + 1489) = *((_DWORD *)a1 + 1466);
            }
            goto LABEL_217;
          }
LABEL_195:
          a1[5960] = 1;
          goto LABEL_196;
        }
      }
      *((void *)a1 + 632) = v97;
      goto LABEL_63;
    }
  }
}

float sub_19042D6F8(float *a1)
{
  float v2 = sub_1904CF514(a1 + 14);
  uint64_t v3 = 0;
  float v5 = a1[4] + v4;
  float v7 = v6 + a1[5];
  v9[0] = a1[3] + v2;
  v9[1] = v5;
  v9[2] = v7;
  do
  {
    v9[v3] = -v9[v3];
    ++v3;
  }
  while (v3 != 3);
  return v9[0];
}

unsigned __int16 *sub_19042D76C(uint64_t a1, float *a2)
{
  uint64_t v3 = (unsigned __int16 *)(a1 + 28);
  if (*(_DWORD *)(a1 + 32) == *(unsigned __int16 *)(a1 + 30))
  {
    float v4 = *(float *)(a1 + 28 + 4 * *(unsigned __int16 *)(a1 + 28) + 8);
    float v5 = *(float *)(a1 + 12);
    float v6 = (float)(*a2 - v4) - *(float *)(a1 + 16);
    *(float *)(a1 + 12) = v5 + v6;
    *(float *)(a1 + 16) = (float)((float)(v5 + v6) - v5) - v6;
    float v7 = *(float *)(a1 + 20);
    float v8 = (float)((float)(v4 + *a2) * (float)(*a2 - v4)) - *(float *)(a1 + 24);
  }
  else
  {
    float v9 = *(float *)(a1 + 12);
    float v10 = *a2 - *(float *)(a1 + 16);
    *(float *)(a1 + 12) = v9 + v10;
    *(float *)(a1 + 16) = (float)((float)(v9 + v10) - v9) - v10;
    float v7 = *(float *)(a1 + 20);
    float v8 = (float)(*a2 * *a2) - *(float *)(a1 + 24);
  }
  *(float *)(a1 + 20) = v7 + v8;
  *(float *)(a1 + 24) = (float)((float)(v7 + v8) - v7) - v8;
  os_log_t result = sub_190430014(v3, a2);
  *(unsigned char *)a1 = 1;
  return result;
}

uint64_t sub_19042D844(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2 >= 3)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    float v5 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 3;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T &CMVector<float, 3>::operator[](const size_t) [T = float, N = 3]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return a1 + 4 * a2;
}

unsigned __int16 *sub_19042DA20(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  float v5 = sub_190430ABC(a1, 0, a1[1]);
  float v7 = v6;
  float v11 = v8 * 0.02;
  sub_190430D10(a2, &v11);
  float v10 = sqrtf((float)(v5 * v5) + (float)(v7 * v7)) * 0.02;
  return sub_190430D10(a3, &v10);
}

float sub_19042DAB0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unint64_t v4 = 0;
  float v5 = 0.0;
  do
  {
    float v6 = (float *)sub_19042EFD0(a1, v4);
    float v5 = v5 + (float)(*v6 * *(float *)sub_19042EFD0(a2, v4++));
  }
  while (v4 != 25);
  return v5;
}

float sub_19042DB28(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!a1[1])
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    float v10 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 104,mean() on empty buffer.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      float v11 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const T CMVectorBufferBase<float, 4>::mean(size_t, size_t, size_t) const [T = float, N = 4]", "CoreLocation: %s\n", v11);
      if (v11 != (char *)buf) {
        free(v11);
      }
    }
  }
  unint64_t v6 = 0;
  float v7 = 0.0;
  do
  {
    uint64_t v8 = sub_1904300A4(a1, v6);
    float v7 = v7 + sub_19042F198(v8, a3);
    ++v6;
  }
  while (a2 != v6);
  return v7 / (float)a2;
}

float sub_19042DD10(unsigned __int16 *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (!a1[1])
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    uint64_t v3 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 145,back() on empty buffer.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      unint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "Element CMVectorBufferBase<float, 1>::back() const [T = float, N = 1]", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  return *(float *)sub_1904302A0(a1, a1[1] - 1);
}

float sub_19042DEC0(unsigned __int16 *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (!a1[1])
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    uint64_t v3 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 145,back() on empty buffer.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      unint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "Element CMVectorBufferBase<float, 3>::back() const [T = float, N = 3]", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  return *(float *)sub_19043049C(a1, a1[1] - 1);
}

uint64_t sub_19042E074(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 5052;
  if (*(unsigned char *)(a1 + 5052))
  {
    uint64_t v4 = *(void *)(a1 + 5056);
    if (v4 && (float)((float)(unint64_t)(a2 - v4) * 0.000001) < 3.0) {
      return 1;
    }
    uint64_t v5 = *(void *)(a1 + 5072);
    if (v5) {
      float v6 = (float)(unint64_t)(a2 - v5) * 0.000001;
    }
    else {
      float v6 = -1.0;
    }
    if (*(unsigned char *)(a1 + 5099)) {
      goto LABEL_17;
    }
    float v7 = sub_19042DD10((unsigned __int16 *)(a1 + 1284));
    if (v7 <= 0.0) {
      float v7 = -v7;
    }
    if (v7 >= 0.5236) {
LABEL_17:
    }
      BOOL v9 = 0;
    else {
      BOOL v9 = v6 < 0.5 && *(void *)(a1 + 5072) != 0;
    }
    if (!*(unsigned char *)(v2 + 48))
    {
      if (*(unsigned char *)(v2 + 44)) {
        BOOL v9 = 1;
      }
      if (v9)
      {
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
        }
        float v10 = qword_1E929D8E0;
        if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = *(unsigned __int8 *)(v2 + 44);
          int v12 = *(_DWORD *)(a1 + 5080);
          *(_DWORD *)buf = 67109632;
          int v16 = v11;
          __int16 v17 = 1024;
          int v18 = v12;
          __int16 v19 = 2048;
          double v20 = v6;
          _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition][Head Turn Blocked CT] fInstantaneousHeadTurn: %d, fSustainedHeadTurnCounter: %d, time elapsed: %0.2f", buf, 0x18u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D8D8 != -1) {
            dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
          }
          long long v14 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "BOOL CMComplexTransition::checkFalsePositiveSuppression(const uint64_t) const", "CoreLocation: %s\n", v14);
          if (v14 != (char *)buf) {
            free(v14);
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_19042E338(unsigned __int16 *a1, float a2, float a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1EB3BE938, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_1EB3BE938))
  {
    qword_1EB3BE940 = 0;
    dword_1EB3BE948 = 1065353216;
    __cxa_guard_release(&qword_1EB3BE938);
  }
  unint64_t v6 = 0;
  v28[0] = 1;
  uint64_t v32 = 0;
  uint64_t v31 = 0;
  uint64_t v33 = 0x1900000000;
  do
  {
    uint64_t v7 = sub_190430B48(a1, v6);
    uint64_t v8 = 0;
    float v9 = 0.0;
    do
    {
      float v9 = v9 + (float)(*(float *)(v7 + v8) * *(float *)(v7 + v8));
      v8 += 4;
    }
    while (v8 != 12);
    if (sqrtf(v9) >= 0.000001)
    {
      float v10 = (float *)sub_190430B48(a1, v6);
      uint64_t v11 = sub_190430B48(a1, v6);
      uint64_t v12 = 0;
      float v13 = 0.0;
      do
      {
        float v13 = v13 + (float)(*(float *)(v11 + v12) * *(float *)(v11 + v12));
        v12 += 4;
      }
      while (v12 != 12);
      float v14 = sqrtf(v13);
      float v15 = (float)((float)((float)(v10[2] / v14) * *(float *)&dword_1EB3BE948)
                  + (float)((float)(v10[1] / v14) * *((float *)&qword_1EB3BE940 + 1)))
          + (float)((float)(*v10 / v14) * *(float *)&qword_1EB3BE940);
      float v16 = 1.0;
      if (v15 <= 1.0)
      {
        float v16 = -1.0;
        if (v15 >= -1.0) {
          float v16 = v15;
        }
      }
      float v17 = acosf(v16);
      if (v17 <= 0.0) {
        float v17 = -v17;
      }
      double v18 = 3.14159265 - v17;
      if (v18 <= v17) {
        float v17 = v18;
      }
      float v27 = v17;
      sub_19042D76C((uint64_t)v28, &v27);
    }
    else
    {
      float v27 = 0.0;
      sub_19042D76C((uint64_t)v28, &v27);
    }
    ++v6;
  }
  while (v6 != 25);
  if (v28[0])
  {
    sub_190430068((uint64_t)v28);
    float v19 = v30;
    if (v30 < 0.0) {
      float v19 = 0.0;
    }
    float v20 = sqrtf(v19);
    if (v28[0]) {
      sub_190430068((uint64_t)v28);
    }
  }
  else
  {
    float v21 = v30;
    if (v30 < 0.0) {
      float v21 = 0.0;
    }
    float v20 = sqrtf(v21);
  }
  float v22 = v29;
  sub_1904308EC(a1, 0, a1[1]);
  float v24 = -v23;
  if (v23 > 0.0) {
    float v24 = v23;
  }
  BOOL v25 = v24 > 0.087266;
  if (v20 >= a3) {
    BOOL v25 = 0;
  }
  return v22 < a2 && v25;
}

void sub_19042E5C0(unsigned __int16 *a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
  }
  uint64_t v2 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v3 = sub_190430D70(a1 + 642, 0, a1[643], 0);
    double v4 = (float)(*(float *)sub_1904302A0(a1 + 642, v3) * 57.296);
    double v5 = (float)(sub_190430F78(a1 + 642, a1[643]) * 57.296);
    unint64_t v6 = sub_19043115C(a1 + 642, 0, a1[643], 0);
    double v7 = (float)(*(float *)sub_1904302A0(a1 + 642, v6) * 57.296);
    double v8 = (float)(sub_19042EE24(a1 + 642) * 57.296);
    double v9 = (float)(*(float *)sub_19042EFD0(a1 + 642, 0xCuLL) * 57.296);
    *(_DWORD *)buf = 134219264;
    double v22 = v4;
    __int16 v23 = 2048;
    double v24 = v5;
    __int16 v25 = 2048;
    double v26 = v7;
    __int16 v27 = 2048;
    double v28 = v8;
    __int16 v29 = 2048;
    double v30 = v9;
    __int16 v31 = 2048;
    double v32 = (float)(sub_19042DD10(a1 + 642) * 57.296);
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition] Src inertial-Z rot rate buffer stats (dps): Min: %.2f, Mean: %.2f, Max: %.2f, First: %.2f, Mid: %.2f, Last: %.2f ", buf, 0x3Eu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
    }
    sub_19042EBCC(a1 + 642);
    sub_190430F78(a1 + 642, a1[643]);
    sub_19042EDE4(a1 + 642);
    sub_19042EE24(a1 + 642);
    sub_19042EFD0(a1 + 642, 0xCuLL);
    sub_19042DD10(a1 + 642);
    float v19 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMComplexTransition::logVerticalRotationBufferStats(const uint64_t) const", "CoreLocation: %s\n", v19);
    if (v19 != (char *)buf) {
      free(v19);
    }
  }
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
  }
  float v10 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v11 = sub_190430D70(a1 + 696, 0, a1[697], 0);
    double v12 = (float)(*(float *)sub_1904302A0(a1 + 696, v11) * 57.296);
    double v13 = (float)(sub_190430F78(a1 + 696, a1[697]) * 57.296);
    unint64_t v14 = sub_19043115C(a1 + 696, 0, a1[697], 0);
    double v15 = (float)(*(float *)sub_1904302A0(a1 + 696, v14) * 57.296);
    double v16 = (float)(sub_19042EE24(a1 + 696) * 57.296);
    double v17 = (float)(*(float *)sub_19042EFD0(a1 + 696, 0xCuLL) * 57.296);
    float v18 = sub_19042DD10(a1 + 696);
    *(_DWORD *)buf = 134219264;
    double v22 = v12;
    __int16 v23 = 2048;
    double v24 = v13;
    __int16 v25 = 2048;
    double v26 = v15;
    __int16 v27 = 2048;
    double v28 = v16;
    __int16 v29 = 2048;
    double v30 = v17;
    __int16 v31 = 2048;
    double v32 = (float)(v18 * 57.296);
    _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition] Aux inertial-Z rot rate buffer stats (dps): Min: %.2f, Mean: %.2f, Max: %.2f, First: %.2f, Mid: %.2f, Last: %.2f ", buf, 0x3Eu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
    }
    sub_19042EBCC(a1 + 696);
    sub_190430F78(a1 + 696, a1[697]);
    sub_19042EDE4(a1 + 696);
    sub_19042EE24(a1 + 696);
    sub_19042EFD0(a1 + 696, 0xCuLL);
    sub_19042DD10(a1 + 696);
    float v20 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMComplexTransition::logVerticalRotationBufferStats(const uint64_t) const", "CoreLocation: %s\n", v20);
    if (v20 != (char *)buf) {
      free(v20);
    }
  }
}

float sub_19042EBCC(unsigned __int16 *a1)
{
  unint64_t v2 = sub_190430D70(a1, 0, a1[1], 0);
  return *(float *)sub_1904302A0(a1, v2);
}

float sub_19042EC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    double v5 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      uint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 1;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      unint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T CMVector<float, 1>::operator[](const size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return *(float *)(a1 + 4 * a2);
}

float sub_19042EDE4(unsigned __int16 *a1)
{
  unint64_t v2 = sub_19043115C(a1, 0, a1[1], 0);
  return *(float *)sub_1904302A0(a1, v2);
}

float sub_19042EE24(unsigned __int16 *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (!a1[1])
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    unint64_t v3 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 139,front() on empty buffer.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      double v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "Element CMVectorBufferBase<float, 1>::front() const [T = float, N = 1]", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
  }
  return *(float *)sub_1904302A0(a1, 0);
}

uint64_t sub_19042EFD0(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1[1] <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    double v5 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      unint64_t v8 = a2;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < size(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 45,out of buffer range %zu.", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const Element &CMVectorBufferBase<float, 1>::operator[](const size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return sub_1904302A0(a1, a2);
}

float sub_19042F198(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2 >= 4)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    double v5 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 4;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T CMVector<float, 4>::operator[](const size_t) const [T = float, N = 4]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return *(float *)(a1 + 4 * a2);
}

void sub_19042F374(unint64_t *a1)
{
  unint64_t v2 = a1 + 641;
  unint64_t v3 = a1 + 638;
  sub_19042FF44((uint64_t)(a1 + 638), (void *)a1[638]);
  sub_19042FA08(v3);
  sub_19042FF44((uint64_t)v2, (void *)a1[641]);
  sub_19042FA08(v2);
  sub_19042FF44((uint64_t)(a1 + 644), (void *)a1[644]);
  sub_19042FA08(a1 + 644);
  sub_19042FF44((uint64_t)(a1 + 647), (void *)a1[647]);
  sub_19042FA08(a1 + 647);
  operator new();
}

void sub_19042F9C8(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x1000C40FF89C88ELL);
  _Unwind_Resume(a1);
}

unint64_t *sub_19042FA08(unint64_t *result)
{
  unint64_t v1 = result[2];
  unint64_t v2 = *result;
  if (v1 - *result <= 0x17)
  {
    unint64_t v3 = (int64x2_t *)result;
    double v4 = (void *)result[1];
    double v13 = result + 2;
    double v5 = (char *)operator new(0x18uLL);
    uint64_t v6 = &v5[((unint64_t)v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v4 == (void *)v2)
    {
      int64x2_t v9 = vdupq_n_s64(v2);
      double v7 = &v5[((unint64_t)v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      double v7 = &v5[((unint64_t)v4 - v2) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v8 = *--v4;
        *double v4 = 0;
        *((void *)v7 - 1) = v8;
        v7 -= 8;
      }
      while (v4 != (void *)v2);
      int64x2_t v9 = *v3;
      unint64_t v1 = v3[1].u64[0];
    }
    v3->i64[0] = (uint64_t)v7;
    v3->i64[1] = (uint64_t)v6;
    int64x2_t v11 = v9;
    v3[1].i64[0] = (uint64_t)(v5 + 24);
    unint64_t v12 = v1;
    uint64_t v10 = v9.i64[0];
    return (unint64_t *)sub_190431364((uint64_t)&v10);
  }
  return result;
}

BOOL sub_19042FABC(float *a1, float a2)
{
  uint64_t v2 = *(void *)a1;
  if (*(void *)a1)
  {
    uint64_t v3 = *((void *)a1 + 1);
    if ((unint64_t)(v3 + 1) <= 4) {
      uint64_t v4 = v3 + 1;
    }
    else {
      uint64_t v4 = 0;
    }
    a1[v4 + 4] = a2;
    if ((unint64_t)(v4 + 1) <= 4) {
      uint64_t v5 = v4 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
    *(void *)a1 = v2 - 1;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = *((void *)a1 + 1);
    if ((unint64_t)(v7 + 1) <= 4) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = 0;
    }
    a1[v8 + 4] = a2;
    a2 = 0.0;
    do
    {
      a2 = a2 + (float)(a1[v6 + 13 - v8] * a1[v6 + 4]);
      ++v6;
    }
    while (v6 != 5);
    if ((unint64_t)(v8 + 1) <= 4) {
      uint64_t v5 = v8 + 1;
    }
    else {
      uint64_t v5 = 0;
    }
  }
  *((void *)a1 + 1) = v5;
  a1[v5 + 4] = a2;
  return v2 == 0;
}

void sub_19042FB5C(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (unsigned __int8 *)(a1 + 5852);
  *(_DWORD *)(a1 + 5856) = 0;
  *(_DWORD *)(a1 + 5848) = 0;
  *(_DWORD *)(a1 + 5851) = 0;
  *(void *)(a1 + 5840) >>= 1;
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
  }
  uint64_t v5 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = *(unsigned __int16 *)(a1 + 5780) + (unint64_t)*(unsigned __int16 *)(a1 + 5782) - 1;
    unint64_t v7 = *(unsigned int *)(a1 + 5784);
    if (v6 < v7) {
      unint64_t v7 = 0;
    }
    double v8 = *(float *)(a1 + 5780 + 4 * (v6 - v7) + 8);
    double v9 = *(float *)(a1 + 5832);
    int v10 = *(_DWORD *)(a1 + 5856);
    double v11 = *(float *)(a1 + 5848);
    int v12 = *v4;
    *(_DWORD *)buf = 134219264;
    double v15 = v8;
    __int16 v16 = 2048;
    double v17 = v9;
    __int16 v18 = 1024;
    int v19 = v10;
    __int16 v20 = 2048;
    double v21 = v11;
    __int16 v22 = 1024;
    int v23 = v12;
    __int16 v24 = 2048;
    uint64_t v25 = a2;
    _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEFAULT, "[CMComplexTransition] Exiting body turn, body turn signal: %.2f, fBodyTurnMaximaBaseline: %0.2f, fCounterBodyTurnAboveBaseline: %d, fLastInBodyTurnMaxima: %0.2f, fLastInBodyTurnFallingEdge: %d, timestamp: %llu", buf, 0x36u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1400);
    }
    double v13 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMComplexTransition::onBodyTurnStateExit(const uint64_t)", "CoreLocation: %s\n", v13);
    if (v13 != (char *)buf) {
      free(v13);
    }
  }
}

float sub_19042FE34(uint64_t a1, int a2, int a3)
{
  if (a3 < 1)
  {
    float v10 = 0.0;
  }
  else
  {
    uint64_t v4 = (unsigned __int16 *)(a1 + 28);
    unint64_t v5 = a2;
    float v6 = 0.0;
    float v7 = 0.0;
    uint64_t v8 = a3;
    do
    {
      float v9 = *(float *)sub_190431610(v4, v5) - v7;
      float v10 = v6 + v9;
      float v7 = (float)((float)(v6 + v9) - v6) - v9;
      ++v5;
      float v6 = v6 + v9;
      --v8;
    }
    while (v8);
  }
  return v10 / (float)a3;
}

os_log_t sub_19042FEC0()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1E929D8E0 = (uint64_t)result;
  return result;
}

void sub_19042FEF0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_19042FF44((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_19042FF44(uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  while (v4 != a2)
  {
    uint64_t v5 = *--v4;
    os_log_t result = v5;
    *uint64_t v4 = 0;
    if (v5) {
      os_log_t result = MEMORY[0x192FCC980](result, 0x1000C40FF89C88ELL);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

unsigned __int16 *sub_19042FFA8(unsigned __int16 *result, uint64_t a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  uint64_t v4 = &result[6 * (v3 - v2)];
  int v5 = *(_DWORD *)(a2 + 8);
  *((void *)v4 + 1) = *(void *)a2;
  *((_DWORD *)v4 + 4) = v5;
  unsigned int v6 = result[1];
  unint64_t v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    unint64_t v8 = *result + 1;
    if (v8 < v7) {
      LOWORD(v7) = 0;
    }
    *os_log_t result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

unsigned __int16 *sub_190430014(unsigned __int16 *result, _DWORD *a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = *((unsigned int *)result + 1);
  uint64_t v4 = *result;
  if (v4 + v2 >= v3) {
    uint64_t v5 = *((unsigned int *)result + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  *(_DWORD *)&result[2 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    *os_log_t result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

uint64_t sub_190430068(uint64_t result)
{
  unsigned int v1 = *(unsigned __int16 *)(result + 30);
  if (v1 > 1)
  {
    float v4 = *(float *)(result + 12);
    float v2 = v4 / (float)v1;
    float v3 = (float)(*(float *)(result + 20) - (float)(v4 * v2)) / (float)v1;
  }
  else
  {
    float v2 = *(float *)(result + 12);
    float v3 = 0.0;
  }
  *(float *)(result + 4) = v2;
  *(float *)(result + 8) = v3;
  *(unsigned char *)os_log_t result = 0;
  return result;
}

uint64_t sub_1904300A4(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    unint64_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      float v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const T &CMQueue<CMVector<float, 4>>::operator[](const size_t) const [T = CMVector<float, 4>]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[8 * (v4 - v5) + 4];
}

uint64_t sub_1904302A0(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    unint64_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      float v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const T &CMQueue<CMVector<float, 1>>::operator[](const size_t) const [T = CMVector<float, 1>]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[2 * (v4 - v5) + 4];
}

uint64_t sub_19043049C(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    unint64_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      float v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const T &CMQueue<CMVector<float, 3>>::operator[](const size_t) const [T = CMVector<float, 3>]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[6 * (v4 - v5) + 4];
}

float sub_19043069C(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (!a1[1])
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    __int16 v12 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 210,variance() on empty buffer.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      int v13 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const CMVector<T, N> CMVectorBufferBase<float, 1>::variance(size_t, size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v13);
      if (v13 != (char *)buf) {
        free(v13);
      }
    }
  }
  float v4 = 1.0 / (float)a2;
  float v5 = *(float *)sub_1904302A0(a1, 0);
  float v6 = v4 * v5;
  if (a2 < 2) {
    return v4 * (float)((float)(v5 - v6) * (float)(v5 - v6));
  }
  unint64_t v7 = 1;
  do
    float v6 = v6 + (float)(v4 * *(float *)sub_1904302A0(a1, v7++));
  while (a2 != v7);
  float v8 = v4 * (float)((float)(v5 - v6) * (float)(v5 - v6));
  unint64_t v9 = 1;
  do
  {
    float v10 = (float *)sub_1904302A0(a1, v9);
    float v8 = v8 + (float)(v4 * (float)((float)(*v10 - v6) * (float)(*v10 - v6)));
    ++v9;
  }
  while (a2 != v9);
  return v8;
}

float sub_1904308EC(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a1[1])
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    unint64_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 93,mean() on empty buffer.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      float v8 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const Element CMVectorBufferBase<float, 3>::mean(size_t, size_t) const [T = float, N = 3]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  return sub_190430ABC(a1, a2, a3) / (float)(a3 - a2);
}

float sub_190430ABC(unsigned __int16 *a1, unint64_t a2, unint64_t a3)
{
  float v3 = 0.0;
  float v4 = 0.0;
  float v5 = 0.0;
  if (a2 < a3)
  {
    unint64_t v7 = a2;
    do
    {
      unint64_t v9 = (float *)sub_19043049C(a1, v7);
      float v3 = v3 + *v9;
      float v4 = v4 + v9[1];
      float v5 = v5 + v9[2];
      ++v7;
    }
    while (a3 != v7);
  }
  return v3;
}

uint64_t sub_190430B48(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1[1] <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    float v5 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134217984;
      unint64_t v8 = a2;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < size(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 45,out of buffer range %zu.", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const Element &CMVectorBufferBase<float, 3>::operator[](const size_t) const [T = float, N = 3]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return sub_19043049C(a1, a2);
}

unsigned __int16 *sub_190430D10(unsigned __int16 *result, _DWORD *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  *(_DWORD *)&result[2 * (v3 - v2) + 4] = *a2;
  unsigned int v4 = result[1];
  unint64_t v5 = *((unsigned int *)result + 1);
  if (v5 <= v4)
  {
    unint64_t v6 = *result + 1;
    if (v6 < v5) {
      LOWORD(v5) = 0;
    }
    *os_log_t result = v6 - v5;
  }
  else
  {
    result[1] = v4 + 1;
  }
  return result;
}

unint64_t sub_190430D70(unsigned __int16 *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1[1])
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    int v13 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 183,minElement() on empty buffer.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "size_t CMVectorBufferBase<float, 1>::minElement(size_t, size_t, size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  unint64_t v8 = a2 + 1;
  if (a2 + 1 < a3)
  {
    do
    {
      uint64_t v9 = sub_1904302A0(a1, v8);
      float v10 = sub_19042EC0C(v9, a4);
      uint64_t v11 = sub_1904302A0(a1, a2);
      if (v10 < sub_19042EC0C(v11, a4)) {
        a2 = v8;
      }
      ++v8;
    }
    while (a3 != v8);
  }
  return a2;
}

float sub_190430F78(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!a1[1])
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    unint64_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 93,mean() on empty buffer.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      unint64_t v8 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const Element CMVectorBufferBase<float, 1>::mean(size_t, size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a2)
  {
    unint64_t v4 = 0;
    float v5 = 0.0;
    do
      float v5 = v5 + *(float *)sub_1904302A0(a1, v4++);
    while (a2 != v4);
  }
  else
  {
    float v5 = 0.0;
  }
  return v5 / (float)a2;
}

unint64_t sub_19043115C(unsigned __int16 *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a1[1])
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    int v13 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v13, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 161,maxElement() on empty buffer.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      uint64_t v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "size_t CMVectorBufferBase<float, 1>::maxElement(size_t, size_t, size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
  }
  unint64_t v8 = a2 + 1;
  if (a2 + 1 < a3)
  {
    do
    {
      uint64_t v9 = sub_1904302A0(a1, v8);
      float v10 = sub_19042EC0C(v9, a4);
      uint64_t v11 = sub_1904302A0(a1, a2);
      if (v10 > sub_19042EC0C(v11, a4)) {
        a2 = v8;
      }
      ++v8;
    }
    while (a3 != v8);
  }
  return a2;
}

uint64_t sub_190431364(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      MEMORY[0x192FCC980](v4, 0x1000C40FF89C88ELL);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

float sub_1904313D0(unsigned __int16 *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!a1[1])
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    uint64_t v9 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: !empty(), file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMVectorBuffer.h, line 104,mean() on empty buffer.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      float v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const T CMVectorBufferBase<float, 1>::mean(size_t, size_t, size_t) const [T = float, N = 1]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return sub_1904315A0(a1, a2, a3, a4) / (float)(a3 - a2);
}

float sub_1904315A0(unsigned __int16 *a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  float v4 = 0.0;
  if (a2 < a3)
  {
    unint64_t v7 = a2;
    do
    {
      uint64_t v9 = sub_1904302A0(a1, v7);
      float v4 = v4 + sub_19042EC0C(v9, a4);
      ++v7;
    }
    while (a3 != v7);
  }
  return v4;
}

uint64_t sub_190431610(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    unint64_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const T &CMQueue<float>::operator[](const size_t) const [T = float]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[2 * (v4 - v5) + 4];
}

float sub_19043180C(unsigned __int16 *a1, unsigned int (*a2)(float, float), unint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v6 = a1[1];
  if (!a1[1])
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
    }
    unint64_t v11 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v11, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 179,.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD3260);
      }
      __int16 v12 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T CMQueue<float>::getComparison(int (*)(const T, const T), size_t) const [T = float]", "CoreLocation: %s\n", v12);
      if (v12 != (char *)buf) {
        free(v12);
      }
    }
  }
  float v7 = *(float *)sub_190431610(a1, a3);
  if (v6 > a3)
  {
    do
    {
      int v8 = (float *)sub_190431610(a1, a3);
      float v9 = *v8;
      if (a2(*v8, v7)) {
        float v7 = v9;
      }
      ++a3;
    }
    while (v6 != a3);
  }
  return v7;
}

BOOL sub_190431A0C(float a1, float a2)
{
  return a2 < a1;
}

BOOL sub_190431A18(float a1, float a2)
{
  return a1 < a2;
}

void sub_190432200(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x1080C40C3C00EEFLL);
  _Unwind_Resume(a1);
}

void sub_1904328F0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_190432948(uint64_t result, uint64_t a2)
{
  if (result) {
    return MEMORY[0x1F4181798](a2, sel_feedSourceDeviceIMU_, result);
  }
  return result;
}

uint64_t sub_19043295C(uint64_t result, uint64_t a2)
{
  if (result) {
    return MEMORY[0x1F4181798](a2, sel_feedAccessoryConfig_, result);
  }
  return result;
}

uint64_t sub_190432970(uint64_t result, uint64_t a2)
{
  if (result) {
    return MEMORY[0x1F4181798](a2, sel_feedAudioAccessoryIMU_, result);
  }
  return result;
}

void sub_190432DA4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_190433360(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v2, 0x1080C40C3C00EEFLL);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_190433394(void **a1, void *a2)
{
  os_log_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1904BF018(result);
    JUMPOUT(0x192FCC980);
  }
  return result;
}

void sub_190433CBC(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x10A0C40538029D6);
  _Unwind_Resume(a1);
}

uint64_t sub_190433D8C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned int *)(*(void *)(a1 + 40) + 40));
}

uint64_t sub_190433E48(uint64_t a1)
{
  return (*(uint64_t (**)(void, double, double, double, double))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(double *)(*(void *)(a1 + 40) + 24), *(double *)(*(void *)(a1 + 40) + 32), 0.0, *(float *)(*(void *)(a1 + 40) + 44));
}

uint64_t sub_190433F14(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_190434520(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_190434B30(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_190435140(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_190435D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
}

void sub_190436C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  objc_sync_exit(v19);
  _Unwind_Resume(a1);
}

void sub_190437018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_19039A590((PB::Base *)va);
  sub_1904373C8(v4 - 144);
  _Unwind_Resume(a1);
}

void sub_1904371C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19039A590((PB::Base *)va);
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  _Unwind_Resume(a1);
}

os_log_t sub_190437398()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "MotionContext");
  qword_1E929D9A0 = (uint64_t)result;
  return result;
}

uint64_t sub_1904373C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 17))
  {
    if (*(unsigned char *)(a1 + 16)) {
      pthread_mutex_unlock(*(pthread_mutex_t **)(a1 + 8));
    }
    else {
      (*(void (**)(void))(**(void **)a1 + 24))();
    }
    *(unsigned char *)(a1 + 17) = 0;
  }
  return a1;
}

char *sub_190437438(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  float v7 = result;
  uint64_t v8 = *((void *)result + 2);
  float v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *float v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    os_log_t result = sub_1903479A4(v7, v11);
    int v13 = (char *)v7[1];
    __int16 v12 = (void **)(v7 + 1);
    float v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      __int16 v18 = v9;
      int v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  __int16 v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    os_log_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    float v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    __int16 v18 = v9;
    int v19 = v16;
LABEL_17:
    os_log_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *__int16 v12 = &v9[v17];
  return result;
}

void sub_190437534(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = 480;
    while (1)
    {
      uint64_t v4 = *(void *)(a2 + v3);
      *(void *)(a2 + v3) = 0;
      if (v4) {
        MEMORY[0x192FCC980](v4, 0x1000C40FF89C88ELL);
      }
      v3 -= 8;
      if (v3 == 464)
      {
        uint64_t v5 = *(void *)(a2 + 464);
        *(void *)(a2 + 464) = 0;
        if (v5) {
          MEMORY[0x192FCC980](v5, 0x1000C40FF89C88ELL);
        }
        uint64_t v6 = 248;
        while (1)
        {
          uint64_t v7 = *(void *)(a2 + v6);
          *(void *)(a2 + v6) = 0;
          if (v7) {
            MEMORY[0x192FCC980](v7, 0x1000C40FF89C88ELL);
          }
          v6 -= 8;
          if (v6 == 232)
          {
            JUMPOUT(0x192FCC980);
          }
        }
      }
    }
  }
}

uint64_t sub_190437600(uint64_t result)
{
  if (!*(void *)(result + 8)) {
    operator new();
  }
  return result;
}

uint64_t sub_190437674(uint64_t result)
{
  if (!*(void *)(result + 16)) {
    operator new();
  }
  return result;
}

void sub_1904376E8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = 184;
    while (1)
    {
      uint64_t v4 = *(void *)(a2 + v3);
      *(void *)(a2 + v3) = 0;
      if (v4) {
        MEMORY[0x192FCC980](v4, 0x1000C40FF89C88ELL);
      }
      v3 -= 8;
      if (v3 == 168)
      {
        JUMPOUT(0x192FCC980);
      }
    }
  }
}

void sub_190437764(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = 480;
    while (1)
    {
      uint64_t v4 = *(void *)(a2 + v3);
      *(void *)(a2 + v3) = 0;
      if (v4) {
        MEMORY[0x192FCC980](v4, 0x1000C40FF89C88ELL);
      }
      v3 -= 8;
      if (v3 == 464)
      {
        uint64_t v5 = *(void *)(a2 + 464);
        *(void *)(a2 + 464) = 0;
        if (v5) {
          MEMORY[0x192FCC980](v5, 0x1000C40FF89C88ELL);
        }
        uint64_t v6 = 248;
        while (1)
        {
          uint64_t v7 = *(void *)(a2 + v6);
          *(void *)(a2 + v6) = 0;
          if (v7) {
            MEMORY[0x192FCC980](v7, 0x1000C40FF89C88ELL);
          }
          v6 -= 8;
          if (v6 == 232)
          {
            JUMPOUT(0x192FCC980);
          }
        }
      }
    }
  }
}

void sub_190437840(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190437878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_190437888(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1904378C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

uint64_t *sub_1904378CC(uint64_t **a1, uint64_t *a2)
{
  os_log_t result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1904560C0(result);
    JUMPOUT(0x192FCC980);
  }
  return result;
}

void sub_19043791C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v8 = a1;
  sub_1904379C0((int *)a2, (int *)(a2 + 4), (char *)(a2 + 8), (uint64_t *)&v8, a3);
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1902B6BB0(a1, &v6);
  if (v7) {
    sub_1902D8B58(v7);
  }
}

void sub_190437990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  __int16 v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    sub_1902D8B58(v12);
  }
  _Unwind_Resume(exception_object);
}

double sub_1904379B4()
{
  return -1.0;
}

void *sub_1904379C0@<X0>(int *a1@<X1>, int *a2@<X2>, char *a3@<X3>, uint64_t *a4@<X4>, void *a5@<X8>)
{
  uint64_t v10 = operator new(0xC0uLL);
  os_log_t result = sub_190437A3C(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_190437A28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_190437A3C(void *a1, int *a2, int *a3, char *a4, uint64_t *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DD8;
  sub_1902DF4EC((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5);
  return a1;
}

void sub_190437A94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_190437AA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFD0DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_190437AC8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EDFD0DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190437B1C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_190437B44(void *a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  sub_1902B95B8(a1 + 1);
}

void sub_190437DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_1904674AC(v27);
  sub_190348AE8(v26, 0);
  _Unwind_Resume(a1);
}

void sub_190437E38()
{
}

void sub_190437E40()
{
}

void sub_190437F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  MEMORY[0x192FCC980](v22, 0x1032C4044EE41C5);
  _Unwind_Resume(a1);
}

uint64_t *sub_190437FD4(uint64_t *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (*a1)
  {
    if (qword_1E929D938 != -1) {
      dispatch_once(&qword_1E929D938, &unk_1EDFD1440);
    }
    uint64_t v2 = qword_1E929D940;
    if (os_log_type_enabled((os_log_t)qword_1E929D940, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[CMCameraWorkoutLogger] Sync'ing MSL file.", buf, 2u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D938 != -1) {
        dispatch_once(&qword_1E929D938, &unk_1EDFD1440);
      }
      uint64_t v4 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "CMCameraWorkoutLogger::~CMCameraWorkoutLogger()", "CoreLocation: %s\n", v4);
      if (v4 != (char *)buf) {
        free(v4);
      }
    }
    (*(void (**)(uint64_t *))(a1[1] + 16))(a1 + 1);
    sub_190387510(*a1);
    (*(void (**)(uint64_t *))(a1[1] + 24))(a1 + 1);
  }
  sub_1904674AC((uint64_t)(a1 + 1));
  sub_190348AE8(a1, 0);
  return a1;
}

void sub_1904381E4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_1902E67BC(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_1904381F4(void *result, uint64_t *a2)
{
  if (*result)
  {
    uint64_t v3 = result[1];
    float v43 = result + 1;
    (*(void (**)(void))(v3 + 16))();
    __int16 v44 = 256;
    sub_190395088(v40);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v42 |= 1u;
    *(CFAbsoluteTime *)&v40[77] = Current;
    sub_1903ADE60((uint64_t)v40);
    uint64_t v5 = v41;
    uint64_t v6 = *a2;
    *(unsigned char *)(v41 + 48) |= 2u;
    *(void *)(v5 + 40) = v6;
    uint64_t v7 = v41;
    uint64_t v8 = a2[1];
    *(unsigned char *)(v41 + 48) |= 1u;
    *(void *)(v7 + 8) = v8;
    sub_1903B6898((uint64_t)v32);
    v39 |= 2u;
    int v37 = 0;
    uint64_t v10 = v34;
    float v9 = v35;
    if (v34 >= v35)
    {
      int v31 = a2[2];
      __int16 v12 = (char *)__p;
      uint64_t v13 = (v34 - (unsigned char *)__p) >> 2;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62) {
        sub_1903479E8();
      }
      uint64_t v15 = v35 - (unsigned char *)__p;
      if ((v35 - (unsigned char *)__p) >> 1 > v14) {
        unint64_t v14 = v15 >> 1;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        size_t v17 = (char *)sub_190347D04((uint64_t)&v35, v16);
        __int16 v12 = (char *)__p;
        uint64_t v10 = v34;
      }
      else
      {
        size_t v17 = 0;
      }
      __int16 v18 = &v17[4 * v13];
      *(_DWORD *)__int16 v18 = v31;
      unint64_t v11 = v18 + 4;
      while (v10 != v12)
      {
        int v19 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v18 - 1) = v19;
        v18 -= 4;
      }
      float v9 = &v17[4 * v16];
      __p = v18;
      uint64_t v34 = v11;
      float v35 = v9;
      if (v12)
      {
        operator delete(v12);
        float v9 = v35;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v34 = a2[2];
      unint64_t v11 = v10 + 4;
    }
    uint64_t v34 = v11;
    int v20 = *((_DWORD *)a2 + 5);
    if (v11 >= v9)
    {
      uint64_t v22 = (char *)__p;
      uint64_t v23 = (v11 - (unsigned char *)__p) >> 2;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 62) {
        sub_1903479E8();
      }
      uint64_t v25 = v9 - (unsigned char *)__p;
      if (v25 >> 1 > v24) {
        unint64_t v24 = v25 >> 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        uint64_t v27 = (char *)sub_190347D04((uint64_t)&v35, v26);
        uint64_t v22 = (char *)__p;
        unint64_t v11 = v34;
      }
      else
      {
        uint64_t v27 = 0;
      }
      double v28 = &v27[4 * v23];
      *(_DWORD *)double v28 = v20;
      double v21 = v28 + 4;
      while (v11 != v22)
      {
        int v29 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v28 - 1) = v29;
        v28 -= 4;
      }
      __p = v28;
      uint64_t v34 = v21;
      float v35 = &v27[4 * v26];
      if (v22) {
        operator delete(v22);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v11 = v20;
      double v21 = v11 + 4;
    }
    uint64_t v34 = v21;
    int v36 = *((_DWORD *)a2 + 42);
    char v30 = *((unsigned char *)a2 + 244);
    v39 |= 5u;
    char v38 = v30;
    operator new();
  }
  return result;
}

void sub_1904385CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_19039A590((PB::Base *)va);
  sub_1904373C8(v13 - 168);
  _Unwind_Resume(a1);
}

void *sub_19043864C(void *result, uint64_t *a2)
{
  if (*result)
  {
    uint64_t v3 = result[1];
    float v51 = result + 1;
    (*(void (**)(void))(v3 + 16))();
    __int16 v52 = 256;
    sub_190395088(v48);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v50 |= 1u;
    *(CFAbsoluteTime *)&v48[77] = Current;
    sub_1903ADF80((uint64_t)v48);
    uint64_t v5 = v49;
    uint64_t v6 = *a2;
    *(unsigned char *)(v49 + 48) |= 2u;
    *(void *)(v5 + 40) = v6;
    uint64_t v7 = v49;
    uint64_t v8 = a2[1];
    *(unsigned char *)(v49 + 48) |= 1u;
    *(void *)(v7 + 8) = v8;
    sub_1903B7BD4((uint64_t)v42);
    long long v9 = *((_OWORD *)a2 + 1);
    v47 |= 1u;
    int v46 = 0;
    unint64_t v11 = v44;
    uint64_t v10 = v45;
    if (v44 >= v45)
    {
      int v41 = v9;
      uint64_t v13 = (char *)__p;
      uint64_t v14 = (v44 - (unsigned char *)__p) >> 2;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62) {
        sub_1903479E8();
      }
      uint64_t v16 = v45 - (unsigned char *)__p;
      if ((v45 - (unsigned char *)__p) >> 1 > v15) {
        unint64_t v15 = v16 >> 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        __int16 v18 = (char *)sub_190347D04((uint64_t)&v45, v17);
        uint64_t v13 = (char *)__p;
        unint64_t v11 = v44;
      }
      else
      {
        __int16 v18 = 0;
      }
      int v19 = &v18[4 * v14];
      *(_DWORD *)int v19 = v41;
      __int16 v12 = v19 + 4;
      while (v11 != v13)
      {
        int v20 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v19 - 1) = v20;
        v19 -= 4;
      }
      uint64_t v10 = &v18[4 * v17];
      __p = v19;
      __int16 v44 = v12;
      float v45 = v10;
      if (v13)
      {
        operator delete(v13);
        uint64_t v10 = v45;
      }
    }
    else
    {
      *(_DWORD *)__int16 v44 = v9;
      __int16 v12 = v11 + 4;
    }
    __int16 v44 = v12;
    int v21 = *((_DWORD *)a2 + 5);
    if (v12 >= v10)
    {
      uint64_t v23 = (char *)__p;
      uint64_t v24 = (v12 - (unsigned char *)__p) >> 2;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62) {
        sub_1903479E8();
      }
      uint64_t v26 = v10 - (unsigned char *)__p;
      if (v26 >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        double v28 = (char *)sub_190347D04((uint64_t)&v45, v27);
        uint64_t v23 = (char *)__p;
        __int16 v12 = v44;
      }
      else
      {
        double v28 = 0;
      }
      int v29 = &v28[4 * v24];
      *(_DWORD *)int v29 = v21;
      uint64_t v22 = v29 + 4;
      while (v12 != v23)
      {
        int v30 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v29 - 1) = v30;
        v29 -= 4;
      }
      uint64_t v10 = &v28[4 * v27];
      __p = v29;
      __int16 v44 = v22;
      float v45 = v10;
      if (v23)
      {
        operator delete(v23);
        uint64_t v10 = v45;
      }
    }
    else
    {
      *(_DWORD *)__int16 v12 = v21;
      uint64_t v22 = v12 + 4;
    }
    __int16 v44 = v22;
    int v31 = *((_DWORD *)a2 + 6);
    if (v22 >= v10)
    {
      uint64_t v33 = (char *)__p;
      uint64_t v34 = (v22 - (unsigned char *)__p) >> 2;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62) {
        sub_1903479E8();
      }
      uint64_t v36 = v10 - (unsigned char *)__p;
      if (v36 >> 1 > v35) {
        unint64_t v35 = v36 >> 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        char v38 = (char *)sub_190347D04((uint64_t)&v45, v37);
        uint64_t v33 = (char *)__p;
        uint64_t v22 = v44;
      }
      else
      {
        char v38 = 0;
      }
      char v39 = &v38[4 * v34];
      *(_DWORD *)char v39 = v31;
      double v32 = v39 + 4;
      while (v22 != v33)
      {
        int v40 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v39 - 1) = v40;
        v39 -= 4;
      }
      __p = v39;
      __int16 v44 = v32;
      float v45 = &v38[4 * v37];
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v22 = v31;
      double v32 = v22 + 4;
    }
    __int16 v44 = v32;
    operator new();
  }
  return result;
}

void sub_190438AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_19039A590((PB::Base *)va);
  sub_1904373C8(v13 - 168);
  _Unwind_Resume(a1);
}

void *sub_190438B2C(void *result, uint64_t *a2)
{
  if (*result)
  {
    uint64_t v3 = result[1];
    BOOL v96 = result + 1;
    (*(void (**)(void))(v3 + 16))();
    __int16 v97 = 256;
    sub_190395088(v93);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v95 |= 1u;
    *(CFAbsoluteTime *)&v93[77] = Current;
    sub_1903ADEF0((uint64_t)v93);
    uint64_t v5 = v94;
    uint64_t v6 = *a2;
    *(unsigned char *)(v94 + 48) |= 2u;
    *(void *)(v5 + 40) = v6;
    uint64_t v7 = v94;
    uint64_t v8 = a2[1];
    *(unsigned char *)(v94 + 48) |= 1u;
    *(void *)(v7 + 8) = v8;
    sub_1903B8740((uint64_t)v84);
    long long v9 = *((_OWORD *)a2 + 1);
    v92 |= 1u;
    int v91 = 0;
    unint64_t v11 = v86;
    uint64_t v10 = v87;
    if (v86 >= v87)
    {
      int v83 = v9;
      uint64_t v13 = (char *)__p;
      uint64_t v14 = (v86 - (unsigned char *)__p) >> 2;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62) {
        sub_1903479E8();
      }
      uint64_t v16 = v87 - (unsigned char *)__p;
      if ((v87 - (unsigned char *)__p) >> 1 > v15) {
        unint64_t v15 = v16 >> 1;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      if (v17)
      {
        __int16 v18 = (char *)sub_190347D04((uint64_t)&v87, v17);
        uint64_t v13 = (char *)__p;
        unint64_t v11 = v86;
      }
      else
      {
        __int16 v18 = 0;
      }
      int v19 = &v18[4 * v14];
      *(_DWORD *)int v19 = v83;
      __int16 v12 = v19 + 4;
      while (v11 != v13)
      {
        int v20 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v19 - 1) = v20;
        v19 -= 4;
      }
      uint64_t v10 = &v18[4 * v17];
      __p = v19;
      BOOL v86 = v12;
      float v87 = v10;
      if (v13)
      {
        operator delete(v13);
        uint64_t v10 = v87;
      }
    }
    else
    {
      *(_DWORD *)BOOL v86 = v9;
      __int16 v12 = v11 + 4;
    }
    BOOL v86 = v12;
    int v21 = *((_DWORD *)a2 + 5);
    if (v12 >= v10)
    {
      uint64_t v23 = (char *)__p;
      uint64_t v24 = (v12 - (unsigned char *)__p) >> 2;
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62) {
        sub_1903479E8();
      }
      uint64_t v26 = v10 - (unsigned char *)__p;
      if (v26 >> 1 > v25) {
        unint64_t v25 = v26 >> 1;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        double v28 = (char *)sub_190347D04((uint64_t)&v87, v27);
        uint64_t v23 = (char *)__p;
        __int16 v12 = v86;
      }
      else
      {
        double v28 = 0;
      }
      int v29 = &v28[4 * v24];
      *(_DWORD *)int v29 = v21;
      uint64_t v22 = v29 + 4;
      while (v12 != v23)
      {
        int v30 = *((_DWORD *)v12 - 1);
        v12 -= 4;
        *((_DWORD *)v29 - 1) = v30;
        v29 -= 4;
      }
      uint64_t v10 = &v28[4 * v27];
      __p = v29;
      BOOL v86 = v22;
      float v87 = v10;
      if (v23)
      {
        operator delete(v23);
        uint64_t v10 = v87;
      }
    }
    else
    {
      *(_DWORD *)__int16 v12 = v21;
      uint64_t v22 = v12 + 4;
    }
    BOOL v86 = v22;
    int v31 = *((_DWORD *)a2 + 6);
    if (v22 >= v10)
    {
      uint64_t v33 = (char *)__p;
      uint64_t v34 = (v22 - (unsigned char *)__p) >> 2;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 62) {
        sub_1903479E8();
      }
      uint64_t v36 = v10 - (unsigned char *)__p;
      if (v36 >> 1 > v35) {
        unint64_t v35 = v36 >> 1;
      }
      if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v35;
      }
      if (v37)
      {
        char v38 = (char *)sub_190347D04((uint64_t)&v87, v37);
        uint64_t v33 = (char *)__p;
        uint64_t v22 = v86;
      }
      else
      {
        char v38 = 0;
      }
      char v39 = &v38[4 * v34];
      *(_DWORD *)char v39 = v31;
      double v32 = v39 + 4;
      while (v22 != v33)
      {
        int v40 = *((_DWORD *)v22 - 1);
        v22 -= 4;
        *((_DWORD *)v39 - 1) = v40;
        v39 -= 4;
      }
      __p = v39;
      BOOL v86 = v32;
      float v87 = &v38[4 * v37];
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v22 = v31;
      double v32 = v22 + 4;
    }
    BOOL v86 = v32;
    int v41 = *((_DWORD *)a2 + 104);
    float v43 = v89;
    char v42 = v90;
    if (v89 >= v90)
    {
      float v45 = (char *)v88;
      uint64_t v46 = (v89 - (unsigned char *)v88) >> 2;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 62) {
        sub_1903479E8();
      }
      uint64_t v48 = v90 - (unsigned char *)v88;
      if ((v90 - (unsigned char *)v88) >> 1 > v47) {
        unint64_t v47 = v48 >> 1;
      }
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v49 = v47;
      }
      if (v49)
      {
        char v50 = (char *)sub_190347D04((uint64_t)&v90, v49);
        float v45 = (char *)v88;
        float v43 = v89;
      }
      else
      {
        char v50 = 0;
      }
      float v51 = &v50[4 * v46];
      *(_DWORD *)float v51 = v41;
      __int16 v44 = v51 + 4;
      while (v43 != v45)
      {
        int v52 = *((_DWORD *)v43 - 1);
        v43 -= 4;
        *((_DWORD *)v51 - 1) = v52;
        v51 -= 4;
      }
      char v42 = &v50[4 * v49];
      float v88 = v51;
      float v89 = v44;
      BOOL v90 = v42;
      if (v45)
      {
        operator delete(v45);
        char v42 = v90;
      }
    }
    else
    {
      *(_DWORD *)float v89 = v41;
      __int16 v44 = v43 + 4;
    }
    float v89 = v44;
    int v53 = *((_DWORD *)a2 + 105);
    if (v44 >= v42)
    {
      int v55 = (char *)v88;
      uint64_t v56 = (v44 - (unsigned char *)v88) >> 2;
      unint64_t v57 = v56 + 1;
      if ((unint64_t)(v56 + 1) >> 62) {
        sub_1903479E8();
      }
      uint64_t v58 = v42 - (unsigned char *)v88;
      if (v58 >> 1 > v57) {
        unint64_t v57 = v58 >> 1;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v57;
      }
      if (v59)
      {
        int v60 = (char *)sub_190347D04((uint64_t)&v90, v59);
        int v55 = (char *)v88;
        __int16 v44 = v89;
      }
      else
      {
        int v60 = 0;
      }
      char v61 = &v60[4 * v56];
      *(_DWORD *)char v61 = v53;
      float v54 = v61 + 4;
      while (v44 != v55)
      {
        int v62 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        *((_DWORD *)v61 - 1) = v62;
        v61 -= 4;
      }
      char v42 = &v60[4 * v59];
      float v88 = v61;
      float v89 = v54;
      BOOL v90 = v42;
      if (v55)
      {
        operator delete(v55);
        char v42 = v90;
      }
    }
    else
    {
      *(_DWORD *)__int16 v44 = v53;
      float v54 = v44 + 4;
    }
    float v89 = v54;
    int v63 = *((_DWORD *)a2 + 106);
    if (v54 >= v42)
    {
      __int16 v65 = (char *)v88;
      uint64_t v66 = (v54 - (unsigned char *)v88) >> 2;
      unint64_t v67 = v66 + 1;
      if ((unint64_t)(v66 + 1) >> 62) {
        sub_1903479E8();
      }
      uint64_t v68 = v42 - (unsigned char *)v88;
      if (v68 >> 1 > v67) {
        unint64_t v67 = v68 >> 1;
      }
      if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v69 = v67;
      }
      if (v69)
      {
        uint64_t v70 = (char *)sub_190347D04((uint64_t)&v90, v69);
        __int16 v65 = (char *)v88;
        float v54 = v89;
      }
      else
      {
        uint64_t v70 = 0;
      }
      int v71 = &v70[4 * v66];
      *(_DWORD *)int v71 = v63;
      double v64 = v71 + 4;
      while (v54 != v65)
      {
        int v72 = *((_DWORD *)v54 - 1);
        v54 -= 4;
        *((_DWORD *)v71 - 1) = v72;
        v71 -= 4;
      }
      char v42 = &v70[4 * v69];
      float v88 = v71;
      float v89 = v64;
      BOOL v90 = v42;
      if (v65)
      {
        operator delete(v65);
        char v42 = v90;
      }
    }
    else
    {
      *(_DWORD *)float v54 = v63;
      double v64 = v54 + 4;
    }
    float v89 = v64;
    int v73 = *((_DWORD *)a2 + 107);
    if (v64 >= v42)
    {
      int v75 = (char *)v88;
      uint64_t v76 = (v64 - (unsigned char *)v88) >> 2;
      unint64_t v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 62) {
        sub_1903479E8();
      }
      uint64_t v78 = v42 - (unsigned char *)v88;
      if (v78 >> 1 > v77) {
        unint64_t v77 = v78 >> 1;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79)
      {
        unsigned int v80 = (char *)sub_190347D04((uint64_t)&v90, v79);
        int v75 = (char *)v88;
        double v64 = v89;
      }
      else
      {
        unsigned int v80 = 0;
      }
      unint64_t v81 = &v80[4 * v76];
      *(_DWORD *)unint64_t v81 = v73;
      uint64_t v74 = v81 + 4;
      while (v64 != v75)
      {
        int v82 = *((_DWORD *)v64 - 1);
        v64 -= 4;
        *((_DWORD *)v81 - 1) = v82;
        v81 -= 4;
      }
      float v88 = v81;
      float v89 = v74;
      BOOL v90 = &v80[4 * v79];
      if (v75) {
        operator delete(v75);
      }
    }
    else
    {
      *(_DWORD *)double v64 = v73;
      uint64_t v74 = v64 + 4;
    }
    float v89 = v74;
    operator new();
  }
  return result;
}

void sub_190439248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_19039A590((PB::Base *)va);
  sub_1904373C8(v15 - 168);
  _Unwind_Resume(a1);
}

uint64_t *sub_1904392F0(uint64_t *result, uint64_t a2, uint64_t a3, double a4, double a5)
{
  if (*result)
  {
    long long v9 = result;
    uint64_t v10 = result[1];
    float v51 = result + 1;
    (*(void (**)(void))(v10 + 16))();
    __int16 v53 = 256;
    sub_190395088(v48);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v50 |= 1u;
    *(CFAbsoluteTime *)&v48[77] = Current;
    sub_1903AE130((uint64_t)v48);
    uint64_t v12 = v49;
    *(unsigned char *)(v49 + 32) |= 2u;
    *(double *)(v12 + 16) = a4;
    uint64_t v13 = v49;
    *(unsigned char *)(v49 + 32) |= 1u;
    *(double *)(v13 + 8) = a5;
    sub_1903846D8(v49);
    uint64_t v14 = *(void *)(v49 + 24);
    uint64_t v15 = *(void *)(a2 + 8);
    *(_DWORD *)(v14 + 136) |= 2u;
    *(void *)(v14 + 16) = v15;
    uint64_t v16 = *(void *)(v49 + 24);
    int v17 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(v16 + 136) |= 0x2000000u;
    *(_DWORD *)(v16 + 116) = v17;
    uint64_t v18 = *(void *)(v49 + 24);
    int v19 = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(v18 + 136) |= 0x10000u;
    *(_DWORD *)(v18 + 80) = v19;
    uint64_t v20 = *(void *)(v49 + 24);
    *(float *)&uint64_t v15 = *(double *)(a2 + 32);
    *(_DWORD *)(v20 + 136) |= 0x80000u;
    *(_DWORD *)(v20 + 92) = v15;
    uint64_t v21 = *(void *)(v49 + 24);
    *(float *)&uint64_t v15 = *(double *)(a2 + 40);
    *(_DWORD *)(v21 + 136) |= 0x100000u;
    *(_DWORD *)(v21 + 96) = v15;
    uint64_t v22 = *(void *)(v49 + 24);
    *(float *)&uint64_t v15 = *(double *)(a2 + 48);
    *(_DWORD *)(v22 + 136) |= 0x200000u;
    *(_DWORD *)(v22 + 100) = v15;
    uint64_t v23 = *(void *)(v49 + 24);
    *(float *)&uint64_t v15 = *(double *)(a2 + 24);
    *(_DWORD *)(v23 + 136) |= 0x40000u;
    *(_DWORD *)(v23 + 88) = v15;
    uint64_t v24 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v24 + 136) |= 0x4000000u;
    *(_DWORD *)(v24 + 120) = v15;
    uint64_t v25 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(v25 + 136) |= 0x8000000u;
    *(_DWORD *)(v25 + 124) = v15;
    uint64_t v26 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v26 + 136) |= 0x10000000u;
    *(_DWORD *)(v26 + 128) = v15;
    uint64_t v27 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 68);
    *(_DWORD *)(v27 + 136) |= 0x8000u;
    *(_DWORD *)(v27 + 76) = v15;
    uint64_t v28 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(v28 + 136) |= 0x20u;
    *(_DWORD *)(v28 + 36) = v15;
    uint64_t v29 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(v29 + 136) |= 0x400u;
    *(_DWORD *)(v29 + 56) = v15;
    uint64_t v30 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(v30 + 136) |= 4u;
    *(_DWORD *)(v30 + 24) = v15;
    uint64_t v31 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(v31 + 136) |= 0x10u;
    *(_DWORD *)(v31 + 32) = v15;
    uint64_t v32 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(v32 + 136) |= 0x80u;
    *(_DWORD *)(v32 + 44) = v15;
    uint64_t v33 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(v33 + 136) |= 0x100u;
    *(_DWORD *)(v33 + 48) = v15;
    uint64_t v34 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 100);
    *(_DWORD *)(v34 + 136) |= 0x200u;
    *(_DWORD *)(v34 + 52) = v15;
    uint64_t v35 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 104);
    *(_DWORD *)(v35 + 136) |= 0x800u;
    *(_DWORD *)(v35 + 60) = v15;
    uint64_t v36 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 108);
    *(_DWORD *)(v36 + 136) |= 0x1000u;
    *(_DWORD *)(v36 + 64) = v15;
    uint64_t v37 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 112);
    *(_DWORD *)(v37 + 136) |= 0x2000u;
    *(_DWORD *)(v37 + 68) = v15;
    uint64_t v38 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 116);
    *(_DWORD *)(v38 + 136) |= 0x400000u;
    *(_DWORD *)(v38 + 104) = v15;
    uint64_t v39 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 120);
    *(_DWORD *)(v39 + 136) |= 0x800000u;
    *(_DWORD *)(v39 + 108) = v15;
    uint64_t v40 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)(a2 + 124);
    *(_DWORD *)(v40 + 136) |= 0x1000000u;
    *(_DWORD *)(v40 + 112) = v15;
    uint64_t v41 = *(void *)(v49 + 24);
    LOBYTE(v19) = *(unsigned char *)(a3 + 5);
    *(_DWORD *)(v41 + 136) |= 0x20000000u;
    *(unsigned char *)(v41 + 132) = v19;
    uint64_t v42 = *(void *)(v49 + 24);
    int v43 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(v42 + 136) |= 0x40u;
    *(_DWORD *)(v42 + 40) = v43;
    uint64_t v44 = *(void *)(v49 + 24);
    LOBYTE(v43) = *(unsigned char *)(a3 + 4);
    *(_DWORD *)(v44 + 136) |= 0x40000000u;
    *(unsigned char *)(v44 + 133) = v43;
    uint64_t v45 = *(void *)(v49 + 24);
    LODWORD(v15) = *(_DWORD *)a3;
    *(_DWORD *)(v45 + 136) |= 8u;
    *(_DWORD *)(v45 + 28) = v15;
    uint64_t v46 = *(void *)(v49 + 24);
    uint64_t v47 = *(void *)(a3 + 16);
    *(_DWORD *)(v46 + 136) |= 1u;
    *(void *)(v46 + 8) = v47;
    sub_190387314(*v9, (uint64_t)v48);
    os_log_t result = (uint64_t *)sub_19039A590((PB::Base *)v48);
    if (HIBYTE(v53))
    {
      if ((_BYTE)v53) {
        return (uint64_t *)pthread_mutex_unlock(v52);
      }
      else {
        return (uint64_t *)(*(uint64_t (**)(void *))(*v51 + 24))(v51);
      }
    }
  }
  return result;
}

void sub_19043975C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 72);
  _Unwind_Resume(a1);
}

uint64_t *sub_190439778(uint64_t *result, float a2, double a3, double a4)
{
  if (*result)
  {
    uint64_t v7 = result;
    uint64_t v9 = result + 1;
    uint64_t v8 = result[1];
    int v17 = result + 1;
    (*(void (**)(uint64_t *))(v8 + 16))(result + 1);
    __int16 v18 = 256;
    sub_190395088(v14);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v16 |= 1u;
    *(CFAbsoluteTime *)&v14[77] = Current;
    sub_1903AE1C0((uint64_t)v14);
    uint64_t v11 = v15;
    *(unsigned char *)(v15 + 28) |= 2u;
    *(double *)(v11 + 16) = a3;
    uint64_t v12 = v15;
    *(unsigned char *)(v15 + 28) |= 1u;
    *(double *)(v12 + 8) = a4;
    uint64_t v13 = v15;
    *(unsigned char *)(v15 + 28) |= 4u;
    *(float *)(v13 + 24) = a2;
    sub_190387314(*v7, (uint64_t)v14);
    sub_19039A590((PB::Base *)v14);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v9 + 24))(v9);
  }
  return result;
}

void sub_1904398A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 88);
  _Unwind_Resume(a1);
}

uint64_t *sub_1904398C0(uint64_t *result, float a2, double a3, double a4)
{
  if (*result)
  {
    uint64_t v7 = result;
    uint64_t v9 = result + 1;
    uint64_t v8 = result[1];
    int v17 = result + 1;
    (*(void (**)(uint64_t *))(v8 + 16))(result + 1);
    __int16 v18 = 256;
    sub_190395088(v14);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v16 |= 1u;
    *(CFAbsoluteTime *)&v14[77] = Current;
    sub_1903AE250((uint64_t)v14);
    uint64_t v11 = v15;
    *(unsigned char *)(v15 + 28) |= 2u;
    *(double *)(v11 + 16) = a3;
    uint64_t v12 = v15;
    *(unsigned char *)(v15 + 28) |= 1u;
    *(double *)(v12 + 8) = a4;
    uint64_t v13 = v15;
    *(unsigned char *)(v15 + 28) |= 4u;
    *(float *)(v13 + 24) = a2;
    sub_190387314(*v7, (uint64_t)v14);
    sub_19039A590((PB::Base *)v14);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v9 + 24))(v9);
  }
  return result;
}

void sub_1904399EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 88);
  _Unwind_Resume(a1);
}

uint64_t *sub_190439A08(uint64_t *result, float a2, float a3, double a4, double a5)
{
  if (*result)
  {
    uint64_t v9 = result;
    uint64_t v11 = result + 1;
    uint64_t v10 = result[1];
    uint64_t v25 = result + 1;
    (*(void (**)(uint64_t *))(v10 + 16))(result + 1);
    __int16 v26 = 256;
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    sub_190395088(v22);
    v24 |= 1u;
    *(CFAbsoluteTime *)&v22[77] = Current;
    sub_1903AE0A0((uint64_t)v22);
    uint64_t v13 = v23;
    *(unsigned char *)(v23 + 32) |= 2u;
    *(double *)(v13 + 16) = a4;
    uint64_t v14 = v23;
    *(unsigned char *)(v23 + 32) |= 1u;
    *(double *)(v14 + 8) = a5;
    sub_1903D93A8(v23);
    uint64_t v15 = *(void *)(v23 + 24);
    *(_WORD *)(v15 + 68) |= 0x10u;
    *(double *)(v15 + 40) = a4;
    uint64_t v16 = *(void *)(v23 + 24);
    *(_WORD *)(v16 + 68) |= 8u;
    *(CFAbsoluteTime *)(v16 + 32) = Current;
    uint64_t v17 = *(void *)(v23 + 24);
    *(_WORD *)(v17 + 68) |= 0x40u;
    *(_DWORD *)(v17 + 52) = 3;
    uint64_t v18 = *(void *)(v23 + 24);
    *(_WORD *)(v18 + 68) |= 2u;
    *(double *)(v18 + 16) = a2;
    uint64_t v19 = *(void *)(v23 + 24);
    *(_WORD *)(v19 + 68) |= 4u;
    *(void *)(v19 + 24) = 0;
    uint64_t v20 = *(void *)(v23 + 24);
    *(_WORD *)(v20 + 68) |= 1u;
    *(double *)(v20 + 8) = a3;
    uint64_t v21 = *(void *)(v23 + 24);
    *(_WORD *)(v21 + 68) |= 0x80u;
    *(_DWORD *)(v21 + 56) = 2;
    sub_190387314(*v9, (uint64_t)v22);
    sub_19039A590((PB::Base *)v22);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v11 + 24))(v11);
  }
  return result;
}

void sub_190439BF0(_Unwind_Exception *a1)
{
  sub_1904373C8(v1 - 104);
  _Unwind_Resume(a1);
}

uint64_t *sub_190439C14(uint64_t *result, int **a2, double a3, double a4)
{
  if (*result)
  {
    uint64_t v7 = result;
    uint64_t v9 = result + 1;
    uint64_t v8 = result[1];
    uint64_t v22 = result + 1;
    (*(void (**)(uint64_t *))(v8 + 16))(result + 1);
    __int16 v23 = 256;
    sub_190395088(v19);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v21 |= 1u;
    *(CFAbsoluteTime *)&v19[77] = Current;
    sub_1903ADB00((uint64_t)v19);
    uint64_t v11 = v20;
    *(unsigned char *)(v20 + 48) |= 2u;
    *(double *)(v11 + 40) = a3;
    uint64_t v12 = v20;
    *(unsigned char *)(v20 + 48) |= 1u;
    *(double *)(v12 + 32) = a4;
    if (a2[1] != *a2)
    {
      sub_190381428((uint64_t)v15);
      char v13 = v18;
      v18 |= 1u;
      int v16 = 0;
      if (a2[1] - *a2)
      {
        int v14 = **a2;
        char v18 = v13 | 3;
        int v17 = v14;
        operator new();
      }
      sub_19043BE68();
    }
    sub_190387314(*v7, (uint64_t)v19);
    sub_19039A590((PB::Base *)v19);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v9 + 24))(v9);
  }
  return result;
}

void sub_190439E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19039A590((PB::Base *)va);
  sub_1904373C8(v5 - 168);
  _Unwind_Resume(a1);
}

uint64_t *sub_190439EF4(uint64_t *result)
{
  if (*result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 1;
    (*(void (**)(uint64_t *))(result[1] + 16))(result + 1);
    sub_190387510(*v1);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v2 + 24))(v2);
  }
  return result;
}

void sub_190439F90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1904373C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_190439FA4(uint64_t *result, uint64_t a2)
{
  if (*result)
  {
    uint64_t v3 = result;
    uint64_t v5 = result + 1;
    uint64_t v4 = result[1];
    char v18 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    __int16 v19 = 256;
    sub_190395088(v14);
    sub_1903AE910((uint64_t)v14);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v17 |= 1u;
    CFAbsoluteTime v16 = Current;
    uint64_t v7 = v15;
    LODWORD(Current) = *(_DWORD *)(a2 + 8);
    *(_WORD *)(v15 + 64) |= 0x20u;
    *(_DWORD *)(v7 + 28) = LODWORD(Current);
    uint64_t v8 = v15;
    LODWORD(Current) = *(_DWORD *)(a2 + 12);
    *(_WORD *)(v15 + 64) |= 0x1000u;
    *(_DWORD *)(v8 + 56) = LODWORD(Current);
    uint64_t v9 = v15;
    LODWORD(Current) = *(_DWORD *)(a2 + 20);
    *(_WORD *)(v15 + 64) |= 2u;
    *(_DWORD *)(v9 + 12) = LODWORD(Current);
    uint64_t v10 = v15;
    char v11 = *(unsigned char *)(a2 + 48);
    *(_WORD *)(v15 + 64) |= 0x2000u;
    *(unsigned char *)(v10 + 60) = v11;
    uint64_t v12 = v15;
    int v13 = *(_DWORD *)(a2 + 4);
    *(_WORD *)(v15 + 64) |= 4u;
    *(_DWORD *)(v12 + 16) = v13;
    sub_190387314(*v3, (uint64_t)v14);
    sub_19039A590((PB::Base *)v14);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_19043A0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_19043A110(uint64_t *result, void *a2)
{
  if (*result)
  {
    uint64_t v3 = result;
    uint64_t v5 = result + 1;
    uint64_t v4 = result[1];
    BOOL v191 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    __int16 v192 = 256;
    sub_190395088(v187);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v190 |= 1u;
    CFAbsoluteTime v189 = Current;
    sub_1903AD7A0((uint64_t)v187);
    sub_19035DA24(v188);
    uint64_t v7 = *(void *)(v188 + 72);
    objc_msgSend_timestamp(a2, v8, v9);
    *(unsigned char *)(v7 + 152) |= 2u;
    *(void *)(v7 + 136) = v10;
    char v11 = *(void **)(v188 + 72);
    int v14 = objc_msgSend_attitude(a2, v12, v13);
    objc_msgSend_quaternion(v14, v15, v16);
    float v20 = v19;
    unint64_t v21 = v11[9];
    uint64_t v22 = (float *)v11[8];
    if ((unint64_t)v22 >= v21)
    {
      char v24 = (float *)v11[7];
      uint64_t v25 = v22 - v24;
      if ((unint64_t)(v25 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v26 = v21 - (void)v24;
      unint64_t v27 = (uint64_t)(v21 - (void)v24) >> 1;
      if (v27 <= v25 + 1) {
        unint64_t v27 = v25 + 1;
      }
      if (v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v27;
      }
      if (v17)
      {
        uint64_t v28 = (char *)sub_190347D04((uint64_t)(v11 + 9), v17);
        char v24 = (float *)v11[7];
        uint64_t v22 = (float *)v11[8];
      }
      else
      {
        uint64_t v28 = 0;
      }
      uint64_t v29 = (float *)&v28[4 * v25];
      uint64_t v30 = &v28[4 * v17];
      *uint64_t v29 = v20;
      __int16 v23 = v29 + 1;
      while (v22 != v24)
      {
        int v31 = *((_DWORD *)v22-- - 1);
        *((_DWORD *)v29-- - 1) = v31;
      }
      v11[7] = v29;
      v11[8] = v23;
      v11[9] = v30;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *uint64_t v22 = v20;
      __int16 v23 = v22 + 1;
    }
    v11[8] = v23;
    uint64_t v32 = *(void **)(v188 + 72);
    uint64_t v33 = objc_msgSend_attitude(a2, (const char *)v17, v18);
    objc_msgSend_quaternion(v33, v34, v35);
    float v39 = v38;
    unint64_t v40 = v32[9];
    uint64_t v41 = (float *)v32[8];
    if ((unint64_t)v41 >= v40)
    {
      int v43 = (float *)v32[7];
      uint64_t v44 = v41 - v43;
      if ((unint64_t)(v44 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v45 = v40 - (void)v43;
      unint64_t v46 = (uint64_t)(v40 - (void)v43) >> 1;
      if (v46 <= v44 + 1) {
        unint64_t v46 = v44 + 1;
      }
      if (v45 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v46;
      }
      if (v36)
      {
        uint64_t v47 = (char *)sub_190347D04((uint64_t)(v32 + 9), v36);
        int v43 = (float *)v32[7];
        uint64_t v41 = (float *)v32[8];
      }
      else
      {
        uint64_t v47 = 0;
      }
      uint64_t v48 = (float *)&v47[4 * v44];
      uint64_t v49 = &v47[4 * v36];
      *uint64_t v48 = v39;
      uint64_t v42 = v48 + 1;
      while (v41 != v43)
      {
        int v50 = *((_DWORD *)v41-- - 1);
        *((_DWORD *)v48-- - 1) = v50;
      }
      v32[7] = v48;
      char v32[8] = v42;
      v32[9] = v49;
      if (v43) {
        operator delete(v43);
      }
    }
    else
    {
      *uint64_t v41 = v39;
      uint64_t v42 = v41 + 1;
    }
    char v32[8] = v42;
    float v51 = *(void **)(v188 + 72);
    int v52 = objc_msgSend_attitude(a2, (const char *)v36, v37);
    objc_msgSend_quaternion(v52, v53, v54);
    float v58 = v57;
    unint64_t v59 = v51[9];
    int v60 = (float *)v51[8];
    if ((unint64_t)v60 >= v59)
    {
      int v62 = (float *)v51[7];
      uint64_t v63 = v60 - v62;
      if ((unint64_t)(v63 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v64 = v59 - (void)v62;
      unint64_t v65 = (uint64_t)(v59 - (void)v62) >> 1;
      if (v65 <= v63 + 1) {
        unint64_t v65 = v63 + 1;
      }
      if (v64 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v65;
      }
      if (v55)
      {
        uint64_t v66 = (char *)sub_190347D04((uint64_t)(v51 + 9), v55);
        int v62 = (float *)v51[7];
        int v60 = (float *)v51[8];
      }
      else
      {
        uint64_t v66 = 0;
      }
      unint64_t v67 = (float *)&v66[4 * v63];
      uint64_t v68 = &v66[4 * v55];
      float *v67 = v58;
      char v61 = v67 + 1;
      while (v60 != v62)
      {
        int v69 = *((_DWORD *)v60-- - 1);
        *((_DWORD *)v67-- - 1) = v69;
      }
      v51[7] = v67;
      v51[8] = v61;
      v51[9] = v68;
      if (v62) {
        operator delete(v62);
      }
    }
    else
    {
      float *v60 = v58;
      char v61 = v60 + 1;
    }
    v51[8] = v61;
    uint64_t v70 = *(void **)(v188 + 72);
    int v71 = objc_msgSend_attitude(a2, (const char *)v55, v56);
    objc_msgSend_quaternion(v71, v72, v73);
    float v77 = v76;
    unint64_t v78 = v70[9];
    unint64_t v79 = (float *)v70[8];
    if ((unint64_t)v79 >= v78)
    {
      unint64_t v81 = (float *)v70[7];
      uint64_t v82 = v79 - v81;
      if ((unint64_t)(v82 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v83 = v78 - (void)v81;
      unint64_t v84 = (uint64_t)(v78 - (void)v81) >> 1;
      if (v84 <= v82 + 1) {
        unint64_t v84 = v82 + 1;
      }
      if (v83 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v84;
      }
      if (v74)
      {
        float v85 = (char *)sub_190347D04((uint64_t)(v70 + 9), v74);
        unint64_t v81 = (float *)v70[7];
        unint64_t v79 = (float *)v70[8];
      }
      else
      {
        float v85 = 0;
      }
      BOOL v86 = (float *)&v85[4 * v82];
      float v87 = &v85[4 * v74];
      float *v86 = v77;
      unsigned int v80 = v86 + 1;
      while (v79 != v81)
      {
        int v88 = *((_DWORD *)v79-- - 1);
        *((_DWORD *)v86-- - 1) = v88;
      }
      v70[7] = v86;
      v70[8] = v80;
      v70[9] = v87;
      if (v81) {
        operator delete(v81);
      }
    }
    else
    {
      *unint64_t v79 = v77;
      unsigned int v80 = v79 + 1;
    }
    v70[8] = v80;
    float v89 = *(void **)(v188 + 72);
    objc_msgSend_rotationRate(a2, (const char *)v74, v75);
    float v93 = v92;
    unint64_t v94 = v89[12];
    char v95 = (float *)v89[11];
    if ((unint64_t)v95 >= v94)
    {
      __int16 v97 = (float *)v89[10];
      uint64_t v98 = v95 - v97;
      if ((unint64_t)(v98 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v99 = v94 - (void)v97;
      unint64_t v100 = (uint64_t)(v94 - (void)v97) >> 1;
      if (v100 <= v98 + 1) {
        unint64_t v100 = v98 + 1;
      }
      if (v99 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v90 = v100;
      }
      if (v90)
      {
        float v101 = (char *)sub_190347D04((uint64_t)(v89 + 12), v90);
        __int16 v97 = (float *)v89[10];
        char v95 = (float *)v89[11];
      }
      else
      {
        float v101 = 0;
      }
      char v102 = (float *)&v101[4 * v98];
      BOOL v103 = &v101[4 * v90];
      *char v102 = v93;
      BOOL v96 = v102 + 1;
      while (v95 != v97)
      {
        int v104 = *((_DWORD *)v95-- - 1);
        *((_DWORD *)v102-- - 1) = v104;
      }
      v89[10] = v102;
      v89[11] = v96;
      v89[12] = v103;
      if (v97) {
        operator delete(v97);
      }
    }
    else
    {
      *char v95 = v93;
      BOOL v96 = v95 + 1;
    }
    v89[11] = v96;
    int v105 = *(void **)(v188 + 72);
    objc_msgSend_rotationRate(a2, (const char *)v90, v91);
    float v109 = v108;
    unint64_t v110 = v105[12];
    float v111 = (float *)v105[11];
    if ((unint64_t)v111 >= v110)
    {
      float v113 = (float *)v105[10];
      uint64_t v114 = v111 - v113;
      if ((unint64_t)(v114 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v115 = v110 - (void)v113;
      unint64_t v116 = (uint64_t)(v110 - (void)v113) >> 1;
      if (v116 <= v114 + 1) {
        unint64_t v116 = v114 + 1;
      }
      if (v115 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v106 = v116;
      }
      if (v106)
      {
        unint64_t v117 = (char *)sub_190347D04((uint64_t)(v105 + 12), v106);
        float v113 = (float *)v105[10];
        float v111 = (float *)v105[11];
      }
      else
      {
        unint64_t v117 = 0;
      }
      float v118 = (float *)&v117[4 * v114];
      float v119 = &v117[4 * v106];
      *float v118 = v109;
      uint64_t v112 = v118 + 1;
      while (v111 != v113)
      {
        int v120 = *((_DWORD *)v111-- - 1);
        *((_DWORD *)v118-- - 1) = v120;
      }
      v105[10] = v118;
      v105[11] = v112;
      v105[12] = v119;
      if (v113) {
        operator delete(v113);
      }
    }
    else
    {
      float *v111 = v109;
      uint64_t v112 = v111 + 1;
    }
    v105[11] = v112;
    float v121 = *(void **)(v188 + 72);
    objc_msgSend_rotationRate(a2, (const char *)v106, v107);
    float v125 = v124;
    unint64_t v126 = v121[12];
    BOOL v127 = (float *)v121[11];
    if ((unint64_t)v127 >= v126)
    {
      float v129 = (float *)v121[10];
      uint64_t v130 = v127 - v129;
      if ((unint64_t)(v130 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v131 = v126 - (void)v129;
      unint64_t v132 = (uint64_t)(v126 - (void)v129) >> 1;
      if (v132 <= v130 + 1) {
        unint64_t v132 = v130 + 1;
      }
      if (v131 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v122 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v122 = v132;
      }
      if (v122)
      {
        float v133 = (char *)sub_190347D04((uint64_t)(v121 + 12), v122);
        float v129 = (float *)v121[10];
        BOOL v127 = (float *)v121[11];
      }
      else
      {
        float v133 = 0;
      }
      unsigned int v134 = (float *)&v133[4 * v130];
      unsigned int v135 = &v133[4 * v122];
      *unsigned int v134 = v125;
      float v128 = v134 + 1;
      while (v127 != v129)
      {
        int v136 = *((_DWORD *)v127-- - 1);
        *((_DWORD *)v134-- - 1) = v136;
      }
      v121[10] = v134;
      v121[11] = v128;
      v121[12] = v135;
      if (v129) {
        operator delete(v129);
      }
    }
    else
    {
      *BOOL v127 = v125;
      float v128 = v127 + 1;
    }
    v121[11] = v128;
    float v137 = *(void **)(v188 + 72);
    objc_msgSend_userAcceleration(a2, (const char *)v122, v123);
    float v141 = v140;
    unint64_t v142 = v137[15];
    float v143 = (float *)v137[14];
    if ((unint64_t)v143 >= v142)
    {
      unsigned int v145 = (float *)v137[13];
      uint64_t v146 = v143 - v145;
      if ((unint64_t)(v146 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v147 = v142 - (void)v145;
      unint64_t v148 = (uint64_t)(v142 - (void)v145) >> 1;
      if (v148 <= v146 + 1) {
        unint64_t v148 = v146 + 1;
      }
      if (v147 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v138 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v138 = v148;
      }
      if (v138)
      {
        double v149 = (char *)sub_190347D04((uint64_t)(v137 + 15), v138);
        unsigned int v145 = (float *)v137[13];
        float v143 = (float *)v137[14];
      }
      else
      {
        double v149 = 0;
      }
      int v150 = (float *)&v149[4 * v146];
      int v151 = &v149[4 * v138];
      *int v150 = v141;
      float v144 = v150 + 1;
      while (v143 != v145)
      {
        int v152 = *((_DWORD *)v143-- - 1);
        *((_DWORD *)v150-- - 1) = v152;
      }
      v137[13] = v150;
      v137[14] = v144;
      v137[15] = v151;
      if (v145) {
        operator delete(v145);
      }
    }
    else
    {
      *float v143 = v141;
      float v144 = v143 + 1;
    }
    v137[14] = v144;
    int v153 = *(void **)(v188 + 72);
    objc_msgSend_userAcceleration(a2, (const char *)v138, v139);
    float v157 = v156;
    unint64_t v158 = v153[15];
    unint64_t v159 = (float *)v153[14];
    if ((unint64_t)v159 >= v158)
    {
      int v161 = (float *)v153[13];
      uint64_t v162 = v159 - v161;
      if ((unint64_t)(v162 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v163 = v158 - (void)v161;
      unint64_t v164 = (uint64_t)(v158 - (void)v161) >> 1;
      if (v164 <= v162 + 1) {
        unint64_t v164 = v162 + 1;
      }
      if (v163 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v154 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v154 = v164;
      }
      if (v154)
      {
        unint64_t v165 = (char *)sub_190347D04((uint64_t)(v153 + 15), v154);
        int v161 = (float *)v153[13];
        unint64_t v159 = (float *)v153[14];
      }
      else
      {
        unint64_t v165 = 0;
      }
      float v166 = (float *)&v165[4 * v162];
      unint64_t v167 = &v165[4 * v154];
      *float v166 = v157;
      float v160 = v166 + 1;
      while (v159 != v161)
      {
        int v168 = *((_DWORD *)v159-- - 1);
        *((_DWORD *)v166-- - 1) = v168;
      }
      v153[13] = v166;
      v153[14] = v160;
      v153[15] = v167;
      if (v161) {
        operator delete(v161);
      }
    }
    else
    {
      *unint64_t v159 = v157;
      float v160 = v159 + 1;
    }
    v153[14] = v160;
    float v169 = *(void **)(v188 + 72);
    objc_msgSend_userAcceleration(a2, (const char *)v154, v155);
    float v173 = v172;
    unint64_t v174 = v169[15];
    float v175 = (float *)v169[14];
    if ((unint64_t)v175 >= v174)
    {
      float v177 = (float *)v169[13];
      uint64_t v178 = v175 - v177;
      if ((unint64_t)(v178 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v179 = v174 - (void)v177;
      unint64_t v180 = (uint64_t)(v174 - (void)v177) >> 1;
      if (v180 <= v178 + 1) {
        unint64_t v180 = v178 + 1;
      }
      if (v179 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v170 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v170 = v180;
      }
      if (v170)
      {
        unint64_t v181 = (char *)sub_190347D04((uint64_t)(v169 + 15), v170);
        float v177 = (float *)v169[13];
        float v175 = (float *)v169[14];
      }
      else
      {
        unint64_t v181 = 0;
      }
      float v182 = (float *)&v181[4 * v178];
      int v183 = &v181[4 * v170];
      *float v182 = v173;
      unint64_t v176 = v182 + 1;
      while (v175 != v177)
      {
        int v184 = *((_DWORD *)v175-- - 1);
        *((_DWORD *)v182-- - 1) = v184;
      }
      v169[13] = v182;
      v169[14] = v176;
      v169[15] = v183;
      if (v177) {
        operator delete(v177);
      }
    }
    else
    {
      *float v175 = v173;
      unint64_t v176 = v175 + 1;
    }
    v169[14] = v176;
    uint64_t v185 = v188;
    if (objc_msgSend_sensorLocation(a2, (const char *)v170, v171) == 2) {
      int v186 = 1;
    }
    else {
      int v186 = 2;
    }
    *(_WORD *)(v185 + 116) |= 0x10u;
    *(_DWORD *)(v185 + 88) = v186;
    sub_190387314(*v3, (uint64_t)v187);
    sub_19039A590((PB::Base *)v187);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_19043AA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 88);
  _Unwind_Resume(a1);
}

uint64_t *sub_19043AABC(uint64_t *result, int a2, double a3)
{
  if (*result)
  {
    uint64_t v5 = result;
    uint64_t v7 = result + 1;
    uint64_t v6 = result[1];
    uint64_t v16 = result + 1;
    (*(void (**)(uint64_t *))(v6 + 16))(result + 1);
    __int16 v17 = 256;
    sub_190395088(v12);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v15 |= 1u;
    CFAbsoluteTime v14 = Current;
    sub_1903AEE20((uint64_t)v12);
    uint64_t v9 = v13;
    *(unsigned char *)(v13 + 16) |= 1u;
    *(_DWORD *)(v9 + 8) = a2;
    uint64_t v10 = v13;
    float v11 = a3;
    *(unsigned char *)(v13 + 16) |= 2u;
    *(float *)(v10 + 12) = v11;
    sub_190387314(*v5, (uint64_t)v12);
    sub_19039A590((PB::Base *)v12);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v7 + 24))(v7);
  }
  return result;
}

void sub_19043ABCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 72);
  _Unwind_Resume(a1);
}

uint64_t *sub_19043ABE8(uint64_t *result, int *a2)
{
  if (*result)
  {
    uint64_t v3 = result;
    uint64_t v5 = result + 1;
    uint64_t v4 = result[1];
    unint64_t v74 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    __int16 v75 = 256;
    sub_190395088(v70);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v73 |= 1u;
    CFAbsoluteTime v72 = Current;
    sub_1903AED00((uint64_t)v70);
    sub_19034FB00(v71);
    uint64_t v7 = *(void *)(v71 + 32);
    int v8 = *a2;
    *(unsigned char *)(v7 + 32) |= 2u;
    *(_DWORD *)(v7 + 28) = v8;
    uint64_t v9 = *(void *)(v71 + 32);
    sub_190437600(v9);
    std::string::operator=(*(std::string **)(v9 + 8), (const std::string *)(a2 + 2));
    uint64_t v10 = *(void *)(v71 + 32);
    sub_190437674(v10);
    std::string::operator=(*(std::string **)(v10 + 16), (const std::string *)(a2 + 8));
    uint64_t v11 = *(void *)(v71 + 32);
    int v12 = a2[14];
    *(unsigned char *)(v11 + 32) |= 1u;
    *(_DWORD *)(v11 + 24) = v12;
    uint64_t v13 = v71;
    LOBYTE(v12) = *((unsigned char *)a2 + 76);
    *(unsigned char *)(v71 + 44) |= 1u;
    *(unsigned char *)(v13 + 40) = v12;
    CFAbsoluteTime v14 = (void *)v71;
    int v15 = a2[20];
    uint64_t v16 = *(char **)(v71 + 16);
    unint64_t v17 = *(void *)(v71 + 24);
    if ((unint64_t)v16 >= v17)
    {
      double v19 = *(char **)(v71 + 8);
      uint64_t v20 = (v16 - v19) >> 2;
      if ((unint64_t)(v20 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v21 = v17 - (void)v19;
      unint64_t v22 = (uint64_t)(v17 - (void)v19) >> 1;
      if (v22 <= v20 + 1) {
        unint64_t v22 = v20 + 1;
      }
      if (v21 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v22;
      }
      if (v23)
      {
        char v24 = (char *)sub_190347D04(v71 + 24, v23);
        double v19 = (char *)v14[1];
        uint64_t v16 = (char *)v14[2];
      }
      else
      {
        char v24 = 0;
      }
      uint64_t v25 = &v24[4 * v20];
      unint64_t v26 = &v24[4 * v23];
      *(_DWORD *)uint64_t v25 = v15;
      uint64_t v18 = v25 + 4;
      while (v16 != v19)
      {
        int v27 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v25 - 1) = v27;
        v25 -= 4;
      }
      v14[1] = v25;
      v14[2] = v18;
      v14[3] = v26;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v16 = v15;
      uint64_t v18 = v16 + 4;
    }
    v14[2] = v18;
    uint64_t v28 = (void *)v71;
    int v29 = a2[21];
    uint64_t v30 = *(char **)(v71 + 16);
    unint64_t v31 = *(void *)(v71 + 24);
    if ((unint64_t)v30 >= v31)
    {
      uint64_t v33 = *(char **)(v71 + 8);
      uint64_t v34 = (v30 - v33) >> 2;
      if ((unint64_t)(v34 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v35 = v31 - (void)v33;
      unint64_t v36 = (uint64_t)(v31 - (void)v33) >> 1;
      if (v36 <= v34 + 1) {
        unint64_t v36 = v34 + 1;
      }
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37)
      {
        double v38 = (char *)sub_190347D04(v71 + 24, v37);
        uint64_t v33 = (char *)v28[1];
        uint64_t v30 = (char *)v28[2];
      }
      else
      {
        double v38 = 0;
      }
      float v39 = &v38[4 * v34];
      unint64_t v40 = &v38[4 * v37];
      *(_DWORD *)float v39 = v29;
      uint64_t v32 = v39 + 4;
      while (v30 != v33)
      {
        int v41 = *((_DWORD *)v30 - 1);
        v30 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      v28[1] = v39;
      v28[2] = v32;
      v28[3] = v40;
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v30 = v29;
      uint64_t v32 = v30 + 4;
    }
    v28[2] = v32;
    uint64_t v42 = (void *)v71;
    int v43 = a2[22];
    uint64_t v44 = *(char **)(v71 + 16);
    unint64_t v45 = *(void *)(v71 + 24);
    if ((unint64_t)v44 >= v45)
    {
      uint64_t v47 = *(char **)(v71 + 8);
      uint64_t v48 = (v44 - v47) >> 2;
      if ((unint64_t)(v48 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v49 = v45 - (void)v47;
      unint64_t v50 = (uint64_t)(v45 - (void)v47) >> 1;
      if (v50 <= v48 + 1) {
        unint64_t v50 = v48 + 1;
      }
      if (v49 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v50;
      }
      if (v51)
      {
        int v52 = (char *)sub_190347D04(v71 + 24, v51);
        uint64_t v47 = (char *)v42[1];
        uint64_t v44 = (char *)v42[2];
      }
      else
      {
        int v52 = 0;
      }
      __int16 v53 = &v52[4 * v48];
      uint64_t v54 = &v52[4 * v51];
      *(_DWORD *)__int16 v53 = v43;
      unint64_t v46 = v53 + 4;
      while (v44 != v47)
      {
        int v55 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        *((_DWORD *)v53 - 1) = v55;
        v53 -= 4;
      }
      v42[1] = v53;
      v42[2] = v46;
      v42[3] = v54;
      if (v47) {
        operator delete(v47);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v44 = v43;
      unint64_t v46 = v44 + 4;
    }
    v42[2] = v46;
    uint64_t v56 = (void *)v71;
    int v57 = a2[23];
    float v58 = *(char **)(v71 + 16);
    unint64_t v59 = *(void *)(v71 + 24);
    if ((unint64_t)v58 >= v59)
    {
      char v61 = *(char **)(v71 + 8);
      uint64_t v62 = (v58 - v61) >> 2;
      if ((unint64_t)(v62 + 1) >> 62) {
        sub_1903479E8();
      }
      unint64_t v63 = v59 - (void)v61;
      unint64_t v64 = (uint64_t)(v59 - (void)v61) >> 1;
      if (v64 <= v62 + 1) {
        unint64_t v64 = v62 + 1;
      }
      if (v63 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v64;
      }
      if (v65)
      {
        uint64_t v66 = (char *)sub_190347D04(v71 + 24, v65);
        char v61 = (char *)v56[1];
        float v58 = (char *)v56[2];
      }
      else
      {
        uint64_t v66 = 0;
      }
      unint64_t v67 = &v66[4 * v62];
      uint64_t v68 = &v66[4 * v65];
      *(_DWORD *)unint64_t v67 = v57;
      int v60 = v67 + 4;
      while (v58 != v61)
      {
        int v69 = *((_DWORD *)v58 - 1);
        v58 -= 4;
        *((_DWORD *)v67 - 1) = v69;
        v67 -= 4;
      }
      v56[1] = v67;
      v56[2] = v60;
      v56[3] = v68;
      if (v61) {
        operator delete(v61);
      }
    }
    else
    {
      *(_DWORD *)float v58 = v57;
      int v60 = v58 + 4;
    }
    v56[2] = v60;
    sub_190387314(*v3, (uint64_t)v70);
    sub_19039A590((PB::Base *)v70);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_19043B06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 88);
  _Unwind_Resume(a1);
}

uint64_t *sub_19043B09C(uint64_t *result, double *a2, int a3)
{
  if (*result)
  {
    uint64_t v5 = result;
    uint64_t v6 = result[1];
    unint64_t v40 = result + 1;
    (*(void (**)(void))(v6 + 16))();
    __int16 v42 = 256;
    sub_190395088(v37);
    sub_1903AE880((uint64_t)v37);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v39 |= 1u;
    *(CFAbsoluteTime *)&v37[77] = Current;
    uint64_t v8 = v38;
    double v9 = *a2;
    *(_DWORD *)(v38 + 124) |= 0x10u;
    *(double *)(v8 + 40) = v9;
    uint64_t v10 = v38;
    *(float *)&double v9 = a2[2];
    *(_DWORD *)(v38 + 124) |= 2u;
    *(double *)(v10 + 16) = *(float *)&v9;
    uint64_t v11 = v38;
    *(float *)&double v9 = a2[3];
    *(_DWORD *)(v38 + 124) |= 4u;
    *(double *)(v11 + 24) = *(float *)&v9;
    uint64_t v12 = v38;
    *(float *)&double v9 = a2[4];
    *(_DWORD *)(v38 + 124) |= 8u;
    *(double *)(v12 + 32) = *(float *)&v9;
    uint64_t v13 = v38;
    *(float *)&double v9 = a2[1];
    *(_DWORD *)(v38 + 124) |= 1u;
    *(double *)(v13 + 8) = *(float *)&v9;
    uint64_t v14 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 10);
    *(_DWORD *)(v38 + 124) |= 0x40000u;
    *(_DWORD *)(v14 + 100) = LODWORD(v9);
    uint64_t v15 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 11);
    *(_DWORD *)(v38 + 124) |= 0x80000u;
    *(_DWORD *)(v15 + 104) = LODWORD(v9);
    uint64_t v16 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 12);
    *(_DWORD *)(v38 + 124) |= 0x100000u;
    *(_DWORD *)(v16 + 108) = LODWORD(v9);
    uint64_t v17 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 13);
    *(_DWORD *)(v38 + 124) |= 0x2000u;
    *(_DWORD *)(v17 + 80) = LODWORD(v9);
    uint64_t v18 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 14);
    *(_DWORD *)(v38 + 124) |= 0x4000u;
    *(_DWORD *)(v18 + 84) = LODWORD(v9);
    uint64_t v19 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 15);
    *(_DWORD *)(v38 + 124) |= 0x8000u;
    *(_DWORD *)(v19 + 88) = LODWORD(v9);
    uint64_t v20 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 16);
    *(_DWORD *)(v38 + 124) |= 0x100u;
    *(_DWORD *)(v20 + 60) = LODWORD(v9);
    uint64_t v21 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 17);
    *(_DWORD *)(v38 + 124) |= 0x200u;
    *(_DWORD *)(v21 + 64) = LODWORD(v9);
    uint64_t v22 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 18);
    *(_DWORD *)(v38 + 124) |= 0x400u;
    *(_DWORD *)(v22 + 68) = LODWORD(v9);
    uint64_t v23 = v38;
    int v24 = *((_DWORD *)a2 + 19);
    *(_DWORD *)(v38 + 124) |= 0x80u;
    *(_DWORD *)(v23 + 56) = v24;
    uint64_t v25 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 21);
    *(_DWORD *)(v38 + 124) |= 0x800u;
    *(_DWORD *)(v25 + 72) = LODWORD(v9);
    uint64_t v26 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 24);
    *(_DWORD *)(v38 + 124) |= 0x20u;
    *(_DWORD *)(v26 + 48) = LODWORD(v9);
    uint64_t v27 = v38;
    *(_DWORD *)(v38 + 124) |= 0x200000u;
    *(_DWORD *)(v27 + 112) = a3;
    uint64_t v28 = v38;
    *(_DWORD *)(v38 + 124) |= 0x20000u;
    *(_DWORD *)(v28 + 96) = -1082130432;
    uint64_t v29 = v38;
    int v30 = *((unsigned __int8 *)a2 + 108);
    *(_DWORD *)(v38 + 124) |= 0x1000u;
    *(_DWORD *)(v29 + 76) = v30;
    uint64_t v31 = v38;
    int v32 = *((_DWORD *)a2 + 26);
    *(_DWORD *)(v38 + 124) |= 0x40u;
    *(_DWORD *)(v31 + 52) = v32;
    uint64_t v33 = v38;
    int v34 = *((unsigned __int16 *)a2 + 55);
    *(_DWORD *)(v38 + 124) |= 0x10000u;
    *(_DWORD *)(v33 + 92) = v34;
    uint64_t v35 = v38;
    *(_DWORD *)(v38 + 124) |= 0x800000u;
    *(unsigned char *)(v35 + 120) = 1;
    uint64_t v36 = v38;
    LODWORD(v9) = *((_DWORD *)a2 + 28);
    *(_DWORD *)(v38 + 124) |= 0x400000u;
    *(_DWORD *)(v36 + 116) = LODWORD(v9);
    sub_190387314(*v5, (uint64_t)v37);
    os_log_t result = (uint64_t *)sub_19039A590((PB::Base *)v37);
    if (HIBYTE(v42))
    {
      if ((_BYTE)v42) {
        return (uint64_t *)pthread_mutex_unlock(v41);
      }
      else {
        return (uint64_t *)(*(uint64_t (**)(void *))(*v40 + 24))(v40);
      }
    }
  }
  return result;
}

void sub_19043B3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_19043B404(uint64_t *result, uint64_t *a2)
{
  if (*result)
  {
    uint64_t v3 = result;
    uint64_t v5 = result + 1;
    uint64_t v4 = result[1];
    uint64_t v14 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    __int16 v15 = 256;
    sub_190395088(v10);
    sub_1903AE2E0((uint64_t)v10);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v13 |= 1u;
    CFAbsoluteTime v12 = Current;
    uint64_t v7 = v11;
    uint64_t v8 = *a2;
    char v9 = *(unsigned char *)(v11 + 32);
    *(unsigned char *)(v11 + 32) = v9 | 1;
    *(void *)(v7 + 8) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 2);
    *(unsigned char *)(v7 + 32) = v9 | 5;
    *(_DWORD *)(v7 + 20) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 3);
    *(unsigned char *)(v7 + 32) = v9 | 0xD;
    *(_DWORD *)(v7 + 24) = v8;
    LODWORD(v8) = *((_DWORD *)a2 + 4);
    *(unsigned char *)(v7 + 32) = v9 | 0x1D;
    *(_DWORD *)(v7 + 28) = v8;
    sub_190387314(*v3, (uint64_t)v10);
    sub_19039A590((PB::Base *)v10);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_19043B530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_19043B54C(uint64_t *result, uint64_t *a2)
{
  if (*result)
  {
    uint64_t v3 = result;
    uint64_t v5 = result + 1;
    uint64_t v4 = result[1];
    uint64_t v21 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    __int16 v22 = 256;
    sub_190395088(v18);
    sub_1903AE370((uint64_t)v18);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v20 |= 1u;
    *(CFAbsoluteTime *)&v18[77] = Current;
    uint64_t v7 = v19;
    uint64_t v8 = *a2;
    *(_WORD *)(v19 + 44) |= 1u;
    *(void *)(v7 + 8) = v8;
    uint64_t v9 = v19;
    LODWORD(v8) = *((_DWORD *)a2 + 2);
    *(_WORD *)(v19 + 44) |= 0x10u;
    *(_DWORD *)(v9 + 28) = v8;
    uint64_t v10 = v19;
    LODWORD(v8) = *((_DWORD *)a2 + 3);
    *(_WORD *)(v19 + 44) |= 0x20u;
    *(_DWORD *)(v10 + 32) = v8;
    uint64_t v11 = v19;
    LODWORD(v8) = *((_DWORD *)a2 + 4);
    *(_WORD *)(v19 + 44) |= 0x40u;
    *(_DWORD *)(v11 + 36) = v8;
    uint64_t v12 = v19;
    *(_WORD *)(v19 + 44) |= 8u;
    *(_DWORD *)(v12 + 24) = 0;
    uint64_t v13 = v19;
    int v14 = HIWORD(*(_DWORD *)(v19 + 24));
    *(_WORD *)(v19 + 44) |= 4u;
    *(_DWORD *)(v13 + 20) = (unsigned __int16)v14 % 3u;
    uint64_t v15 = v19;
    LOBYTE(v14) = *(unsigned char *)(v19 + 25) & 1;
    *(_WORD *)(v19 + 44) |= 0x80u;
    *(unsigned char *)(v15 + 40) = v14;
    uint64_t v16 = v19;
    int v17 = (*(_DWORD *)(v19 + 24) >> 9) & 1;
    *(_WORD *)(v19 + 44) |= 0x100u;
    *(unsigned char *)(v16 + 41) = v17;
    sub_190387314(*v3, (uint64_t)v18);
    sub_19039A590((PB::Base *)v18);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_19043B708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_19043B728(uint64_t *result, uint64_t a2)
{
  if (*result)
  {
    uint64_t v3 = result;
    uint64_t v5 = result + 1;
    uint64_t v4 = result[1];
    uint64_t v11 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    __int16 v12 = 256;
    sub_190395088(v8);
    sub_1903AE400((uint64_t)v8);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v10 |= 1u;
    *(CFAbsoluteTime *)&v8[77] = Current;
    uint64_t v7 = v9;
    LODWORD(Current) = *(_DWORD *)(a2 + 8);
    *(unsigned char *)(v9 + 16) |= 2u;
    *(_DWORD *)(v7 + 12) = LODWORD(Current);
    sub_190387314(*v3, (uint64_t)v8);
    sub_19039A590((PB::Base *)v8);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_19043B818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_19043B834(uint64_t *result, unsigned int a2, double a3, double a4)
{
  if (*result)
  {
    uint64_t v7 = result;
    uint64_t v9 = result + 1;
    uint64_t v8 = result[1];
    int v17 = result + 1;
    (*(void (**)(uint64_t *))(v8 + 16))(result + 1);
    __int16 v18 = 256;
    sub_190395088(v14);
    sub_1903ADDD0((uint64_t)v14);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v16 |= 1u;
    *(CFAbsoluteTime *)&v14[77] = Current;
    uint64_t v11 = v15;
    *(unsigned char *)(v15 + 32) |= 4u;
    *(double *)(v11 + 24) = a3;
    uint64_t v12 = v15;
    *(unsigned char *)(v15 + 32) |= 2u;
    *(double *)(v12 + 16) = a4;
    uint64_t v13 = v15;
    *(unsigned char *)(v15 + 32) |= 1u;
    *(void *)(v13 + 8) = a2;
    sub_190387314(*v7, (uint64_t)v14);
    sub_19039A590((PB::Base *)v14);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v9 + 24))(v9);
  }
  return result;
}

void sub_19043B95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 72);
  _Unwind_Resume(a1);
}

uint64_t *sub_19043B978(uint64_t *result, uint64_t *a2)
{
  if (*result)
  {
    uint64_t v3 = result;
    uint64_t v5 = result + 1;
    uint64_t v4 = result[1];
    uint64_t v21 = result + 1;
    (*(void (**)(uint64_t *))(v4 + 16))(result + 1);
    __int16 v22 = 256;
    sub_190395088(v18);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v20 |= 1u;
    *(CFAbsoluteTime *)&v18[77] = Current;
    sub_1903AE9A0((uint64_t)v18);
    uint64_t v7 = v19;
    uint64_t v8 = a2[3];
    *(_WORD *)(v19 + 64) |= 2u;
    *(void *)(v7 + 16) = v8;
    uint64_t v9 = v19;
    uint64_t v10 = *a2;
    *(_WORD *)(v19 + 64) |= 8u;
    *(void *)(v9 + 32) = v10;
    uint64_t v11 = v19;
    *(_WORD *)(v19 + 64) |= 1u;
    *(void *)(v11 + 8) = 0;
    uint64_t v12 = v19;
    uint64_t v13 = a2[2];
    *(_WORD *)(v19 + 64) |= 0x10u;
    *(_DWORD *)(v12 + 40) = v13;
    uint64_t v14 = v19;
    uint64_t v15 = a2[14];
    *(_WORD *)(v19 + 64) |= 0x200u;
    *(_DWORD *)(v14 + 60) = v15;
    uint64_t v16 = v19;
    *(_WORD *)(v19 + 64) |= 0x80u;
    *(_DWORD *)(v16 + 52) = 0;
    uint64_t v17 = v19;
    *(_WORD *)(v19 + 64) |= 0x100u;
    *(_DWORD *)(v17 + 56) = 0;
    sub_190387314(*v3, (uint64_t)v18);
    sub_19039A590((PB::Base *)v18);
    return (uint64_t *)(*(uint64_t (**)(void *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_19043BAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t *sub_19043BB08(uint64_t *result, uint64_t *a2)
{
  if (*result)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[1];
    unint64_t v37 = result + 1;
    (*(void (**)(void))(v4 + 16))();
    __int16 v39 = 256;
    sub_190395088(v34);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v36 |= 1u;
    *(CFAbsoluteTime *)&v34[77] = Current;
    sub_1903AE010((uint64_t)v34);
    uint64_t v6 = v35;
    uint64_t v7 = *a2;
    *(_DWORD *)(v35 + 112) |= 4u;
    *(void *)(v6 + 24) = v7;
    uint64_t v8 = v35;
    uint64_t v9 = a2[1];
    *(_DWORD *)(v35 + 112) |= 2u;
    *(void *)(v8 + 16) = v9;
    uint64_t v10 = v35;
    uint64_t v11 = a2[2];
    *(_DWORD *)(v35 + 112) |= 1u;
    *(void *)(v10 + 8) = v11;
    uint64_t v12 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 6);
    *(_DWORD *)(v35 + 112) |= 0x400u;
    *(_DWORD *)(v12 + 60) = v11;
    uint64_t v13 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 7);
    *(_DWORD *)(v35 + 112) |= 0x400000u;
    *(_DWORD *)(v13 + 108) = v11;
    uint64_t v14 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 8);
    *(_DWORD *)(v35 + 112) |= 0x2000u;
    *(_DWORD *)(v14 + 72) = v11;
    uint64_t v15 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 9);
    *(_DWORD *)(v35 + 112) |= 0x100u;
    *(_DWORD *)(v15 + 52) = v11;
    uint64_t v16 = v35;
    int v17 = *((_DWORD *)a2 + 10);
    *(_DWORD *)(v35 + 112) |= 0x800u;
    *(_DWORD *)(v16 + 64) = v17;
    uint64_t v18 = v35;
    int v19 = *((_DWORD *)a2 + 11);
    *(_DWORD *)(v35 + 112) |= 0x100000u;
    *(_DWORD *)(v18 + 100) = v19;
    uint64_t v20 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 12);
    *(_DWORD *)(v35 + 112) |= 0x200000u;
    *(_DWORD *)(v20 + 104) = v11;
    uint64_t v21 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 13);
    *(_DWORD *)(v35 + 112) |= 0x40000u;
    *(_DWORD *)(v21 + 92) = v11;
    uint64_t v22 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 14);
    *(_DWORD *)(v35 + 112) |= 0x80u;
    *(_DWORD *)(v22 + 48) = v11;
    uint64_t v23 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 15);
    *(_DWORD *)(v35 + 112) |= 0x10000u;
    *(_DWORD *)(v23 + 84) = v11;
    uint64_t v24 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 16);
    *(_DWORD *)(v35 + 112) |= 0x20u;
    *(_DWORD *)(v24 + 40) = v11;
    uint64_t v25 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 17);
    *(_DWORD *)(v35 + 112) |= 0x200u;
    *(_DWORD *)(v25 + 56) = v11;
    uint64_t v26 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 18);
    *(_DWORD *)(v35 + 112) |= 0x1000u;
    *(_DWORD *)(v26 + 68) = v11;
    uint64_t v27 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 19);
    *(_DWORD *)(v35 + 112) |= 0x80000u;
    *(_DWORD *)(v27 + 96) = v11;
    uint64_t v28 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 20);
    *(_DWORD *)(v35 + 112) |= 0x20000u;
    *(_DWORD *)(v28 + 88) = v11;
    uint64_t v29 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 21);
    *(_DWORD *)(v35 + 112) |= 0x40u;
    *(_DWORD *)(v29 + 44) = v11;
    uint64_t v30 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 22);
    *(_DWORD *)(v35 + 112) |= 0x4000u;
    *(_DWORD *)(v30 + 76) = v11;
    uint64_t v31 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 23);
    *(_DWORD *)(v35 + 112) |= 8u;
    *(_DWORD *)(v31 + 32) = v11;
    uint64_t v32 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 24);
    *(_DWORD *)(v35 + 112) |= 0x8000u;
    *(_DWORD *)(v32 + 80) = v11;
    uint64_t v33 = v35;
    LODWORD(v11) = *((_DWORD *)a2 + 25);
    *(_DWORD *)(v35 + 112) |= 0x10u;
    *(_DWORD *)(v33 + 36) = v11;
    sub_190387314(*v3, (uint64_t)v34);
    os_log_t result = (uint64_t *)sub_19039A590((PB::Base *)v34);
    if (HIBYTE(v39))
    {
      if ((_BYTE)v39) {
        return (uint64_t *)pthread_mutex_unlock(v38);
      }
      else {
        return (uint64_t *)(*(uint64_t (**)(void *))(*v37 + 24))(v37);
      }
    }
  }
  return result;
}

void sub_19043BE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 56);
  _Unwind_Resume(a1);
}

os_log_t sub_19043BE38()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Workout");
  qword_1E929D940 = (uint64_t)result;
  return result;
}

void sub_19043BE68()
{
}

void sub_19043BE80(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_19043BEDC(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E568CD68, MEMORY[0x1E4FBA1D0]);
}

void sub_19043BEC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_19043BEDC(std::logic_error *a1, const char *a2)
{
  os_log_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

uint64_t sub_19043BF10(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_190607410;
  *(_OWORD *)(a1 + 16) = xmmword_190607410;
  *(_OWORD *)(a1 + 32) = xmmword_190607410;
  *(_OWORD *)(a1 + 48) = xmmword_190607410;
  *(_OWORD *)(a1 + 64) = xmmword_190607410;
  *(_OWORD *)(a1 + 80) = xmmword_190607410;
  *(_OWORD *)(a1 + 96) = xmmword_190607410;
  *(_OWORD *)(a1 + 112) = xmmword_190607410;
  *(_OWORD *)(a1 + 128) = xmmword_190607410;
  *(_OWORD *)(a1 + 144) = xmmword_190607410;
  *(_OWORD *)(a1 + 160) = xmmword_190607410;
  *(_OWORD *)(a1 + 176) = xmmword_190607410;
  *(_OWORD *)(a1 + 192) = xmmword_190607410;
  *(_OWORD *)(a1 + 208) = xmmword_190607410;
  *(_OWORD *)(a1 + 224) = xmmword_190607410;
  *(_OWORD *)(a1 + 240) = xmmword_190607410;
  *(_OWORD *)(a1 + 256) = xmmword_190607410;
  *(_OWORD *)(a1 + 272) = xmmword_190607410;
  *(_OWORD *)(a1 + 288) = xmmword_190607410;
  *(_OWORD *)(a1 + 304) = xmmword_190607410;
  *(_OWORD *)(a1 + 320) = xmmword_190607410;
  *(_OWORD *)(a1 + 336) = xmmword_190607410;
  *(_OWORD *)(a1 + 352) = xmmword_190607410;
  *(_OWORD *)(a1 + 368) = xmmword_190607410;
  *(_OWORD *)(a1 + 384) = xmmword_190607410;
  *(_OWORD *)(a1 + 400) = xmmword_190607410;
  *(_OWORD *)(a1 + 416) = xmmword_190607410;
  *(_OWORD *)(a1 + 432) = xmmword_190607210;
  *(void *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 464) = xmmword_190607210;
  *(void *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 496) = xmmword_190607210;
  *(void *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = xmmword_190607210;
  *(void *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 560) = xmmword_190607210;
  *(void *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_OWORD *)(a1 + 592) = xmmword_190607210;
  *(void *)(a1 + 608) = 0;
  *(_DWORD *)(a1 + 616) = 0;
  *(_OWORD *)(a1 + 624) = xmmword_190607210;
  *(void *)(a1 + 640) = 0;
  *(_DWORD *)(a1 + 648) = 0;
  *(_OWORD *)(a1 + 656) = xmmword_190607210;
  *(void *)(a1 + 672) = 0;
  *(_DWORD *)(a1 + 680) = 0;
  *(_OWORD *)(a1 + 688) = xmmword_190607210;
  *(void *)(a1 + 704) = 0;
  *(_DWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 720) = xmmword_190607210;
  *(void *)(a1 + 736) = 0;
  *(_DWORD *)(a1 + 744) = 0;
  *(_OWORD *)(a1 + 752) = xmmword_190607210;
  *(void *)(a1 + 768) = 0;
  *(_DWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 784) = xmmword_190607210;
  *(void *)(a1 + 800) = 0;
  *(_DWORD *)(a1 + 808) = 0;
  *(_OWORD *)(a1 + 816) = xmmword_190607210;
  *(void *)(a1 + 832) = 0;
  *(_DWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 848) = xmmword_190607210;
  *(void *)(a1 + 864) = 0;
  *(_DWORD *)(a1 + 872) = 0;
  *(_OWORD *)(a1 + 880) = xmmword_190607210;
  *(void *)(a1 + 896) = 0;
  *(_DWORD *)(a1 + 904) = 0;
  *(_OWORD *)(a1 + 912) = xmmword_190607210;
  *(void *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 944) = xmmword_190607210;
  *(void *)(a1 + 960) = 0;
  *(_DWORD *)(a1 + 968) = 0;
  *(_OWORD *)(a1 + 976) = xmmword_190607210;
  *(void *)(a1 + 992) = 0;
  *(_DWORD *)(a1 + 1000) = 0;
  *(_OWORD *)(a1 + 1008) = xmmword_190607210;
  *(void *)(a1 + 1024) = 0;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1040) = xmmword_190607210;
  *(void *)(a1 + 1056) = 0;
  *(_DWORD *)(a1 + 1064) = 0;
  *(_OWORD *)(a1 + 1072) = xmmword_190607210;
  *(void *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1104) = xmmword_190607210;
  *(void *)(a1 + 1120) = 0;
  *(_DWORD *)(a1 + 1128) = 0;
  *(_OWORD *)(a1 + 1136) = xmmword_190607210;
  *(void *)(a1 + 1152) = 0;
  *(_DWORD *)(a1 + 1160) = 0;
  *(_OWORD *)(a1 + 1168) = xmmword_190607210;
  *(void *)(a1 + 1184) = 0;
  *(_DWORD *)(a1 + 1192) = 0;
  *(_OWORD *)(a1 + 1200) = xmmword_190607210;
  *(void *)(a1 + 1216) = 0;
  *(_DWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1344) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1360) = xmmword_190607420;
  *(void *)(a1 + 1376) = 0;
  *(_DWORD *)(a1 + 1384) = -1;
  *(_OWORD *)(a1 + 1388) = 0u;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1424) = 0u;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(_DWORD *)(a1 + 1488) = -1;
  *(_WORD *)(a1 + 1492) = 0;
  *(void *)(a1 + 1496) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 1504) = 0;
  *(_OWORD *)(a1 + 1512) = 0u;
  *(void *)(a1 + 1528) = 0;
  uint64_t v2 = operator new(0x58uLL);
  *(void *)(a1 + 1512) = v2;
  *(void *)(a1 + 1528) = (char *)v2 + 88;
  v2[2] = xmmword_1906074B8;
  v2[3] = unk_1906074C8;
  v2[4] = xmmword_1906074D8;
  *((void *)v2 + 10) = 0x408F400000000000;
  *uint64_t v2 = xmmword_190607498;
  v2[1] = unk_1906074A8;
  *(void *)(a1 + 1520) = (char *)v2 + 88;
  *(void *)(a1 + 1472) = 0;
  uint64_t v3 = (char *)operator new(0x70uLL);
  int v4 = 0;
  *(void *)(a1 + 1464) = v3;
  *(void *)(a1 + 1472) = v3;
  *(void *)(a1 + 1480) = v3 + 112;
  do
  {
    unint64_t v5 = *(void *)(a1 + 1480);
    if ((unint64_t)v3 < v5)
    {
      *(_OWORD *)uint64_t v3 = xmmword_190607410;
      uint64_t v6 = v3 + 16;
      goto LABEL_17;
    }
    uint64_t v7 = *(char **)(a1 + 1464);
    uint64_t v8 = (v3 - v7) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      sub_1903479E8();
    }
    uint64_t v10 = v5 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11 >> 60) {
      sub_190347AC8();
    }
    uint64_t v12 = (char *)operator new(16 * v11);
    uint64_t v13 = &v12[16 * v8];
    uint64_t v14 = &v12[16 * v11];
    *(_OWORD *)uint64_t v13 = xmmword_190607410;
    uint64_t v6 = v13 + 16;
    if (v3 == v7)
    {
      *(void *)(a1 + 1464) = v13;
      *(void *)(a1 + 1472) = v6;
      uint64_t v7 = v3;
      *(void *)(a1 + 1480) = v14;
LABEL_16:
      operator delete(v7);
      goto LABEL_17;
    }
    do
    {
      *((_OWORD *)v13 - 1) = *((_OWORD *)v3 - 1);
      v13 -= 16;
      v3 -= 16;
    }
    while (v3 != v7);
    *(void *)(a1 + 1464) = v13;
    *(void *)(a1 + 1472) = v6;
    *(void *)(a1 + 1480) = v14;
    if (v7) {
      goto LABEL_16;
    }
LABEL_17:
    *(void *)(a1 + 1472) = v6;
    ++v4;
    uint64_t v3 = v6;
  }
  while (v4 != 7);
  return a1;
}

void sub_19043C298(_Unwind_Exception *exception_object)
{
  int v4 = *v2;
  if (*v2)
  {
    v1[190] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)v1[183];
  if (v5)
  {
    v1[184] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_19043C2D8(uint64_t a1, const char *a2)
{
  __int16 v2 = (__int16)a2;
  for (uint64_t i = 0; i != 6; ++i)
  {
    if (i) {
      unsigned int v5 = (unsigned __int16)aPdx[(i - 1)];
    }
    else {
      unsigned int v5 = 0;
    }
    if (v5 < a2 && (unsigned __int16)aPdx[i] >= a2) {
      break;
    }
  }
  uint64_t v6 = *(int *)(a1 + 1488);
  if (v6 != i)
  {
    *(_DWORD *)(a1 + 1488) = i;
    if (v6 != -1)
    {
      uint64_t v7 = *(void *)(a1 + 1464);
      uint64_t v8 = (double *)(v7 + 16 * v6);
      double v9 = *v8;
      if (*v8 > 0.0)
      {
        sub_19050B590(v8, &stru_1EDFD5D50);
        uint64_t v7 = *(void *)(a1 + 1464);
      }
      LOWORD(v9) = *(_WORD *)(a1 + 1492);
      float v10 = *(float *)(a1 + 1496) + (double)*(unint64_t *)&v9 * *(double *)(v7 + 16 * v6 + 8);
      *(float *)(a1 + 1496) = v10;
    }
    if (i == 6)
    {
      unint64_t v11 = @"JBLAccumulatedEventMetric_OverLimit";
      uint64_t v12 = 6;
    }
    else
    {
      uint64_t v12 = (int)i;
      unint64_t v11 = (__CFString *)objc_msgSend_stringWithFormat_(NSString, a2, @"JBLAccumulatedEventMetric_%d", (unsigned __int16)aPdx[(int)i]);
    }
    sub_19050B3B0((double *)(*(void *)(a1 + 1464) + 16 * v12), v11);
    *(_WORD *)(a1 + 1492) = v2;
  }
}

void sub_19043C400(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(double *)a1 > 0.0) {
    sub_19050B590((double *)a1, &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 16) > 0.0) {
    sub_19050B590((double *)(a1 + 16), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 32) > 0.0) {
    sub_19050B590((double *)(a1 + 32), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 48) > 0.0) {
    sub_19050B590((double *)(a1 + 48), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 64) > 0.0) {
    sub_19050B590((double *)(a1 + 64), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 80) > 0.0) {
    sub_19050B590((double *)(a1 + 80), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 96) > 0.0) {
    sub_19050B590((double *)(a1 + 96), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 112) > 0.0) {
    sub_19050B590((double *)(a1 + 112), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 128) > 0.0) {
    sub_19050B590((double *)(a1 + 128), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 144) > 0.0) {
    sub_19050B590((double *)(a1 + 144), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 160) > 0.0) {
    sub_19050B590((double *)(a1 + 160), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 176) > 0.0) {
    sub_19050B590((double *)(a1 + 176), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 192) > 0.0) {
    sub_19050B590((double *)(a1 + 192), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 208) > 0.0) {
    sub_19050B590((double *)(a1 + 208), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 224) > 0.0) {
    sub_19050B590((double *)(a1 + 224), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 240) > 0.0) {
    sub_19050B590((double *)(a1 + 240), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 256) > 0.0) {
    sub_19050B590((double *)(a1 + 256), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 272) > 0.0) {
    sub_19050B590((double *)(a1 + 272), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 288) > 0.0) {
    sub_19050B590((double *)(a1 + 288), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 304) > 0.0) {
    sub_19050B590((double *)(a1 + 304), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 320) > 0.0) {
    sub_19050B590((double *)(a1 + 320), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 336) > 0.0) {
    sub_19050B590((double *)(a1 + 336), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 352) > 0.0) {
    sub_19050B590((double *)(a1 + 352), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 368) > 0.0) {
    sub_19050B590((double *)(a1 + 368), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 384) > 0.0) {
    sub_19050B590((double *)(a1 + 384), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 400) > 0.0) {
    sub_19050B590((double *)(a1 + 400), &stru_1EDFD5D50);
  }
  if (*(double *)(a1 + 416) > 0.0) {
    sub_19050B590((double *)(a1 + 416), &stru_1EDFD5D50);
  }
  __int16 v2 = *(double **)(a1 + 1464);
  for (uint64_t i = *(double **)(a1 + 1472); v2 != i; v2 += 2)
  {
    if (*v2 > 0.0) {
      sub_19050B590(v2, &stru_1EDFD5D50);
    }
  }
  if (fabs(*(double *)(a1 + 8)) <= 0.0001)
  {
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1460);
    }
    uint64_t v6 = qword_1E929D8E0;
    if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_ERROR, "[CMMediaSessionAnalyticsTracker] Trying to send analytics but the session duration was 0.0, not sending.", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD1460);
      }
      uint64_t v7 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "void CMMediaSessionAnalyticsTracker::send()", "CoreLocation: %s\n", v7);
      if (v7 != (char *)buf) {
        free(v7);
      }
    }
  }
  else
  {
    if (*(int *)(a1 + 1400) >= 1)
    {
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD1460);
      }
      int v4 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
      {
        int v5 = *(_DWORD *)(a1 + 1400);
        *(_DWORD *)buf = 67240192;
        int v10 = v5;
        _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_ERROR, "[CMMediaSessionAnalyticsTracker] We've already sent analytics for this instance, was this intended? sent: %{public}d", buf, 8u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD1460);
        }
        uint64_t v8 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CMMediaSessionAnalyticsTracker::send()", "CoreLocation: %s\n", v8);
        if (v8 != (char *)buf) {
          free(v8);
        }
      }
    }
    AnalyticsSendEventLazy();
    ++*(_DWORD *)(a1 + 1400);
  }
}

uint64_t sub_19043CB30(uint64_t a1)
{
  v40[12] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_1905A1108(*(_DWORD *)(v2 + 1392));
  v39[0] = @"sessionDuration";
  uint64_t v6 = objc_msgSend_numberWithDouble_(NSNumber, v4, v5, *(double *)(v2 + 8));
  uint64_t v8 = @"unknown";
  if (v3) {
    uint64_t v8 = v3;
  }
  v40[0] = v6;
  v40[1] = v8;
  v39[1] = @"accessoryHardwareModel";
  v39[2] = @"accessoryBudLocation";
  v40[2] = objc_msgSend_numberWithInt_(NSNumber, v7, *(unsigned int *)(v2 + 1396));
  v39[3] = @"percentageOfSrcSamplesThatAreVeryEarly_shortSession";
  LODWORD(v9) = *(_DWORD *)(v2 + 1280);
  double v10 = (double)v9 / *(double *)(a1 + 40);
  *(float *)&double v10 = v10;
  v40[3] = objc_msgSend_numberWithFloat_(NSNumber, v11, v12, v10);
  v39[4] = @"percentageOfSrcSamplesThatAreVeryLate_shortSession";
  LODWORD(v13) = *(_DWORD *)(v2 + 1284);
  double v14 = (double)v13 / *(double *)(a1 + 40);
  *(float *)&double v14 = v14;
  v40[4] = objc_msgSend_numberWithFloat_(NSNumber, v15, v16, v14);
  v39[5] = @"percentageOfAuxSamplesWithLargeGaps_shortSession";
  double v17 = (double)*(unint64_t *)(v2 + 1432) / *(double *)(a1 + 48);
  *(float *)&double v17 = v17;
  v40[5] = objc_msgSend_numberWithFloat_(NSNumber, v18, v19, v17);
  v39[6] = @"percentageOfAuxSamplesFailedToFindSource_shortSession";
  double v20 = (double)*(unint64_t *)(v2 + 1440) / *(double *)(a1 + 48);
  *(float *)&double v20 = v20;
  v40[6] = objc_msgSend_numberWithFloat_(NSNumber, v21, v22, v20);
  v39[7] = @"percentageOfAuxSamplesIndexUnchanged_shortSession";
  double v23 = (double)*(unint64_t *)(v2 + 1448) / *(double *)(a1 + 48);
  *(float *)&double v23 = v23;
  v40[7] = objc_msgSend_numberWithFloat_(NSNumber, v24, v25, v23);
  v39[8] = @"percentageOfAuxSamplesSourceDataMissing_shortSession";
  double v26 = (double)*(unint64_t *)(v2 + 1456) / *(double *)(a1 + 48);
  *(float *)&double v26 = v26;
  v40[8] = objc_msgSend_numberWithFloat_(NSNumber, v27, v28, v26);
  v39[9] = @"trackingClientMode";
  v40[9] = objc_msgSend_numberWithInt_(NSNumber, v29, *(unsigned int *)(v2 + 1500));
  v39[10] = @"hasDistractedViewing";
  v40[10] = objc_msgSend_numberWithInt_(NSNumber, v30, *(unsigned __int8 *)(a1 + 56));
  v39[11] = @"hasJBLOverLimit";
  v40[11] = objc_msgSend_numberWithInt_(NSNumber, v31, *(unsigned __int8 *)(a1 + 57));
  uint64_t v33 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v32, (uint64_t)v40, v39, 12);
  if (qword_1E929D8D8 != -1) {
    dispatch_once(&qword_1E929D8D8, &unk_1EDFD1460);
  }
  int v34 = qword_1E929D8E0;
  if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138477827;
    uint64_t v38 = v33;
    _os_log_impl(&dword_1902AF000, v34, OS_LOG_TYPE_DEFAULT, "[CMMediaSessionAnalyticsTracker] Sending basic analytics: \n%{private}@", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D8D8 != -1) {
      dispatch_once(&qword_1E929D8D8, &unk_1EDFD1460);
    }
    char v36 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CMMediaSessionAnalyticsTracker::send()_block_invoke", "CoreLocation: %s\n", v36);
    if (v36 != (char *)buf) {
      free(v36);
    }
  }
  return v33;
}

void *sub_19043CEBC(uint64_t a1)
{
  v593[62] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_1905A1108(*(_DWORD *)(v2 + 1392));
  float v4 = *(double *)(v2 + 8);
  double v5 = *(double *)(v2 + 280);
  v578 = objc_msgSend_dictionary(MEMORY[0x1E4F1CA60], v6, v7);
  v592[0] = @"trackingClientMode";
  v593[0] = objc_msgSend_numberWithInt_(NSNumber, v8, *(unsigned int *)(v2 + 1500));
  v592[1] = @"sessionDuration";
  v593[1] = objc_msgSend_numberWithDouble_(NSNumber, v9, v10, *(double *)(v2 + 8));
  v592[2] = @"sessionDurationType";
  double v12 = *(double *)(v2 + 8);
  if (v12 <= 60.0)
  {
    uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v11, 0);
  }
  else if (v12 <= 300.0)
  {
    uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v11, 1);
  }
  else if (v12 <= 600.0)
  {
    uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v11, 2);
  }
  else if (v12 <= 1200.0)
  {
    uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v11, 3);
  }
  else if (v12 <= 1800.0)
  {
    uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v11, 4);
  }
  else if (v12 <= 2400.0)
  {
    uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v11, 5);
  }
  else if (v12 <= 3000.0)
  {
    uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v11, 6);
  }
  else if (v12 <= 3600.0)
  {
    uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v11, 7);
  }
  else if (v12 <= 7200.0)
  {
    uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v11, 8);
  }
  else if (v12 <= 10800.0)
  {
    uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v11, 9);
  }
  else
  {
    uint64_t v13 = objc_msgSend_numberWithInt_(NSNumber, v11, 10);
  }
  uint64_t v15 = @"unknown";
  if (v3) {
    uint64_t v15 = v3;
  }
  v593[2] = v13;
  v593[3] = v15;
  v592[3] = @"accessoryHardwareModel";
  v592[4] = @"accessoryBudLocation";
  v593[4] = objc_msgSend_numberWithInt_(NSNumber, v14, *(unsigned int *)(v2 + 1396));
  v592[5] = @"percentSessionInBTZ";
  float v18 = 0.0;
  float v19 = 0.0;
  if (v4 >= 0.001) {
    float v19 = *(double *)(v2 + 24) / v4;
  }
  v593[5] = objc_msgSend_numberWithDouble_(NSNumber, v16, v17, v19);
  v592[6] = @"percentSourceActivityStateStatic";
  if (v4 >= 0.001) {
    float v18 = *(double *)(v2 + 40) / v4;
  }
  v593[6] = objc_msgSend_numberWithDouble_(NSNumber, v20, v21, v18);
  v592[7] = @"percentSourceActivityStateVehicular";
  float v24 = 0.0;
  float v25 = 0.0;
  if (v4 >= 0.001) {
    float v25 = *(double *)(v2 + 56) / v4;
  }
  v593[7] = objc_msgSend_numberWithDouble_(NSNumber, v22, v23, v25);
  v592[8] = @"percentSourceActivityStatePedestrian";
  if (v4 >= 0.001) {
    float v24 = *(double *)(v2 + 72) / v4;
  }
  v593[8] = objc_msgSend_numberWithDouble_(NSNumber, v26, v27, v24);
  v592[9] = @"timeBeforeFirstAuxSample";
  v593[9] = objc_msgSend_numberWithDouble_(NSNumber, v28, v29, *(double *)(v2 + 1408));
  v592[10] = @"percent2IMUInVehicle";
  float v32 = *(double *)(v2 + 56);
  float v33 = 0.0;
  float v34 = 0.0;
  if (v32 >= 0.001) {
    float v34 = *(double *)(v2 + 88) / v32;
  }
  v593[10] = objc_msgSend_numberWithDouble_(NSNumber, v30, v31, v34);
  v592[11] = @"percent2IMUWhilePedestrian";
  float v37 = *(double *)(v2 + 72);
  if (v37 >= 0.001) {
    float v33 = *(double *)(v2 + 104) / v37;
  }
  v593[11] = objc_msgSend_numberWithDouble_(NSNumber, v35, v36, v33);
  v592[12] = @"percent1IMU";
  float v40 = 0.0;
  float v41 = 0.0;
  if (v4 >= 0.001) {
    float v41 = *(double *)(v2 + 120) / v4;
  }
  v593[12] = objc_msgSend_numberWithDouble_(NSNumber, v38, v39, v41);
  v592[13] = @"trackingModeSwitchCount";
  v593[13] = objc_msgSend_numberWithInt_(NSNumber, v42, *(unsigned int *)(v2 + 1248));
  v592[14] = @"percentSessionInCT";
  if (v4 >= 0.001)
  {
    double v45 = *(double *)(v2 + 136) / v4;
    float v40 = v45;
  }
  *(float *)&double v45 = v40;
  v593[14] = objc_msgSend_numberWithFloat_(NSNumber, v43, v44, v45);
  v592[15] = @"percentSessionInCTIn1IMU";
  float v48 = 0.0;
  double v49 = 0.0;
  if (v4 >= 0.001)
  {
    double v49 = *(double *)(v2 + 152) / v4;
    *(float *)&double v49 = v49;
  }
  v593[15] = objc_msgSend_numberWithFloat_(NSNumber, v46, v47, v49);
  v592[16] = @"percentSessionInCTInVehicle";
  if (v4 >= 0.001)
  {
    double v52 = *(double *)(v2 + 168) / v4;
    float v48 = v52;
  }
  *(float *)&double v52 = v48;
  v593[16] = objc_msgSend_numberWithFloat_(NSNumber, v50, v51, v52);
  v592[17] = @"percentSessionInCTInPedestrian";
  float v55 = 0.0;
  double v56 = 0.0;
  if (v4 >= 0.001)
  {
    double v56 = *(double *)(v2 + 184) / v4;
    *(float *)&double v56 = v56;
  }
  v593[17] = objc_msgSend_numberWithFloat_(NSNumber, v53, v54, v56);
  v592[18] = @"numberOfCTEvents";
  v593[18] = objc_msgSend_numberWithInt_(NSNumber, v57, *(unsigned int *)(v2 + 1232));
  v592[19] = @"numberOfCTEventsIn1IMU";
  v593[19] = objc_msgSend_numberWithInt_(NSNumber, v58, *(unsigned int *)(v2 + 1236));
  v592[20] = @"numberOfCTEventsInVehicle";
  v593[20] = objc_msgSend_numberWithInt_(NSNumber, v59, *(unsigned int *)(v2 + 1240));
  v592[21] = @"numberOfCTEventsInPedestrian";
  v593[21] = objc_msgSend_numberWithInt_(NSNumber, v60, *(unsigned int *)(v2 + 1244));
  v592[22] = @"distractedViewingCount";
  v593[22] = objc_msgSend_numberWithInt_(NSNumber, v61, *(unsigned int *)(v2 + 1252));
  v592[23] = @"trackingReEnabledViaTouchCount";
  v593[23] = objc_msgSend_numberWithInt_(NSNumber, v62, *(unsigned int *)(v2 + 1256));
  v592[24] = @"trackingReEnabledViaSrcPickUpCount";
  v593[24] = objc_msgSend_numberWithInt_(NSNumber, v63, *(unsigned int *)(v2 + 1260));
  v592[25] = @"trackingReEnabledViaAuxStaticCount";
  v593[25] = objc_msgSend_numberWithInt_(NSNumber, v64, *(unsigned int *)(v2 + 1264));
  v592[26] = @"trackingReEnabledViaStandToSitCount";
  v593[26] = objc_msgSend_numberWithInt_(NSNumber, v65, *(unsigned int *)(v2 + 1268));
  v592[27] = @"trackingReEnabledViaJBLUnderLimitCount";
  v593[27] = objc_msgSend_numberWithInt_(NSNumber, v66, *(unsigned int *)(v2 + 1272));
  v592[28] = @"trackingReEnabledViaFaceDetectCount";
  v593[28] = objc_msgSend_numberWithInt_(NSNumber, v67, *(unsigned int *)(v2 + 1276));
  v592[29] = @"timeBeforeFirstValidPose";
  double v68 = *(double *)(v2 + 1416);
  *(float *)&double v68 = v68;
  v593[29] = objc_msgSend_numberWithFloat_(NSNumber, v69, v70, v68);
  v592[30] = @"percentSessionSrcMoving";
  if (v4 >= 0.001)
  {
    double v73 = *(double *)(v2 + 216) / v4;
    float v55 = v73;
  }
  *(float *)&double v73 = v55;
  v593[30] = objc_msgSend_numberWithFloat_(NSNumber, v71, v72, v73);
  v592[31] = @"percentSessionAuxMoving";
  float v76 = 0.0;
  double v77 = 0.0;
  if (v4 >= 0.001)
  {
    double v77 = *(double *)(v2 + 200) / v4;
    *(float *)&double v77 = v77;
  }
  v593[31] = objc_msgSend_numberWithFloat_(NSNumber, v74, v75, v77);
  v592[32] = @"percentSessionAuxAndSrcMoving";
  if (v4 >= 0.001)
  {
    double v80 = *(double *)(v2 + 232) / v4;
    float v76 = v80;
  }
  *(float *)&double v80 = v76;
  v593[32] = objc_msgSend_numberWithFloat_(NSNumber, v78, v79, v80);
  v592[33] = @"percentSessionAuxAndSrcQuiescent";
  double v83 = 0.0;
  if (v4 >= 0.001)
  {
    double v83 = *(double *)(v2 + 248) / v4;
    *(float *)&double v83 = v83;
  }
  v593[33] = objc_msgSend_numberWithFloat_(NSNumber, v81, v82, v83);
  v592[34] = @"percentFeedAuxSuccess";
  int v86 = *(_DWORD *)(v2 + 712);
  double v87 = 0.0;
  double v88 = 0.0;
  if (v86 >= 1) {
    double v88 = *(double *)(v2 + 704) / (double)v86;
  }
  *(float *)&double v88 = v88;
  v593[34] = objc_msgSend_numberWithFloat_(NSNumber, v84, v85, v88);
  v592[35] = @"percentRecentPoseAvailable";
  int v92 = *(_DWORD *)(v2 + 744);
  if (v92 >= 1)
  {
    double v91 = *(double *)(v2 + 736);
    double v87 = v91 / (double)v92;
  }
  *(float *)&double v91 = v87;
  v593[35] = objc_msgSend_numberWithFloat_(NSNumber, v89, v90, v91);
  v592[36] = @"auxGyroBiasConvergenceDuration";
  double v93 = *(double *)(v2 + 264);
  *(float *)&double v93 = v93;
  v593[36] = objc_msgSend_numberWithFloat_(NSNumber, v94, v95, v93);
  v592[37] = @"JBLOverLimitCount";
  v593[37] = objc_msgSend_numberWithInt_(NSNumber, v96, *(unsigned int *)(v2 + 1292));
  v592[38] = @"percentSessionSteadyStatePedestrian";
  float v99 = 0.0;
  double v100 = 0.0;
  if (v4 >= 0.001)
  {
    double v100 = *(double *)(v2 + 280) / v4;
    *(float *)&double v100 = v100;
  }
  v593[38] = objc_msgSend_numberWithFloat_(NSNumber, v97, v98, v100);
  v592[39] = @"trackingDisabledViaWalkingCount";
  v593[39] = objc_msgSend_numberWithInt_(NSNumber, v101, *(unsigned int *)(v2 + 1296));
  v592[40] = @"trackingDisabledViaSitToStandWalkingCount";
  v593[40] = objc_msgSend_numberWithInt_(NSNumber, v102, *(unsigned int *)(v2 + 1300));
  v592[41] = @"trackingDisabledViaJBLCount";
  v593[41] = objc_msgSend_numberWithInt_(NSNumber, v103, *(unsigned int *)(v2 + 1304));
  v592[42] = @"keepBoresightCenteredDueToDynamicsCount";
  v593[42] = objc_msgSend_numberWithInt_(NSNumber, v104, *(unsigned int *)(v2 + 1308));
  v592[43] = @"percentSessionKeepBoresightCentered";
  if (v4 >= 0.001)
  {
    double v107 = *(double *)(v2 + 296) / v4;
    float v99 = v107;
  }
  *(float *)&double v107 = v99;
  v593[43] = objc_msgSend_numberWithFloat_(NSNumber, v105, v106, v107);
  v592[44] = @"hasDistractedViewing";
  v593[44] = objc_msgSend_numberWithInt_(NSNumber, v108, *(unsigned __int8 *)(a1 + 56));
  v592[45] = @"hasJBLOverLimit";
  v593[45] = objc_msgSend_numberWithInt_(NSNumber, v109, *(unsigned __int8 *)(a1 + 57));
  v592[46] = @"sitCount";
  v593[46] = objc_msgSend_numberWithInt_(NSNumber, v110, *(unsigned int *)(v2 + 1312));
  v592[47] = @"standCount";
  v593[47] = objc_msgSend_numberWithInt_(NSNumber, v111, *(unsigned int *)(v2 + 1316));
  v592[48] = @"percentSessionDisabledDueToWalking";
  float v114 = 0.0;
  double v115 = 0.0;
  if (v4 >= 0.001)
  {
    double v115 = *(double *)(v2 + 312) / v4;
    *(float *)&double v115 = v115;
  }
  v593[48] = objc_msgSend_numberWithFloat_(NSNumber, v112, v113, v115);
  v592[49] = @"percentSessionDisabledDueToJBL";
  if (v4 >= 0.001)
  {
    double v118 = *(double *)(v2 + 328) / v4;
    float v114 = v118;
  }
  float v119 = v5;
  *(float *)&double v118 = v114;
  v593[49] = objc_msgSend_numberWithFloat_(NSNumber, v116, v117, v118);
  v592[50] = @"percentSessionHeadtracked";
  float v122 = 0.0;
  double v123 = 0.0;
  if (v4 >= 0.001)
  {
    double v123 = *(double *)(v2 + 344) / v4;
    *(float *)&double v123 = v123;
  }
  v593[50] = objc_msgSend_numberWithFloat_(NSNumber, v120, v121, v123);
  v592[51] = @"sessionEnvironmentType";
  v593[51] = objc_msgSend_numberWithInt_(NSNumber, v124, *(unsigned int *)(v2 + 1504));
  v592[52] = @"percentSteadyStatePedestrianCTBodyTurn";
  if (v119 >= 0.001)
  {
    double v127 = *(double *)(v2 + 360) / v119;
    float v122 = v127;
  }
  *(float *)&double v127 = v122;
  v593[52] = objc_msgSend_numberWithFloat_(NSNumber, v125, v126, v127);
  v592[53] = @"percentSteadyStatePedestrianHeadTurn";
  double v130 = 0.0;
  if (v119 >= 0.001)
  {
    double v130 = *(double *)(v2 + 376) / v119;
    *(float *)&double v130 = v130;
  }
  v593[53] = objc_msgSend_numberWithFloat_(NSNumber, v128, v129, v130);
  v592[54] = @"maxJBLDisablesPerMinute";
  unsigned int v132 = *(_DWORD *)(v2 + 1376);
  unsigned int v133 = *(_DWORD *)(v2 + 1388);
  if (v132 <= v133) {
    uint64_t v134 = objc_msgSend_numberWithInt_(NSNumber, v131, v133);
  }
  else {
    uint64_t v134 = objc_msgSend_numberWithInt_(NSNumber, v131, v132);
  }
  v593[54] = v134;
  v592[55] = @"bucketedMaxJBLDisablesPerMinute";
  unsigned int v136 = *(_DWORD *)(v2 + 1388);
  if (*(_DWORD *)(v2 + 1376) > v136) {
    unsigned int v136 = *(_DWORD *)(v2 + 1376);
  }
  float v137 = *(double **)(v2 + 1512);
  unint64_t v138 = *(double **)(v2 + 1520);
  if (v137 == v138)
  {
    double v140 = *(double **)(v2 + 1512);
  }
  else
  {
    double v139 = (double)v136;
    double v140 = *(double **)(v2 + 1512);
    while (*v140 <= v139)
    {
      if (++v140 == v138)
      {
        double v140 = *(double **)(v2 + 1520);
        break;
      }
    }
  }
  v593[55] = objc_msgSend_numberWithInt_(NSNumber, v135, (unint64_t)((char *)v140 - (char *)v137) >> 3);
  v592[56] = @"cameraOnDuration";
  double v141 = *(double *)(v2 + 392);
  *(float *)&double v141 = v141;
  v593[56] = objc_msgSend_numberWithFloat_(NSNumber, v142, v143, v141);
  v592[57] = @"percentageOfSessionCameraOn";
  float v146 = 0.0;
  double v147 = 0.0;
  if (v4 >= 0.001)
  {
    double v147 = *(double *)(v2 + 392) / v4;
    *(float *)&double v147 = v147;
  }
  v593[57] = objc_msgSend_numberWithFloat_(NSNumber, v144, v145, v147);
  v592[58] = @"numberOfCameraRequest";
  v593[58] = objc_msgSend_numberWithInt_(NSNumber, v148, *(unsigned int *)(v2 + 1320));
  v592[59] = @"percentageOfSessionInLockScreen";
  if (v4 >= 0.001)
  {
    double v151 = *(double *)(v2 + 408) / v4;
    float v146 = v151;
  }
  *(float *)&double v151 = v146;
  v593[59] = objc_msgSend_numberWithFloat_(NSNumber, v149, v150, v151);
  v592[60] = @"percentageOfSessionWithExternalScreen";
  double v154 = 0.0;
  if (v4 >= 0.001)
  {
    double v154 = *(double *)(v2 + 424) / v4;
    *(float *)&double v154 = v154;
  }
  v593[60] = objc_msgSend_numberWithFloat_(NSNumber, v152, v153, v154);
  v592[61] = @"numberOfExternalScreens";
  v593[61] = objc_msgSend_numberWithInt_(NSNumber, v155, *(unsigned int *)(v2 + 1324));
  uint64_t v157 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v156, (uint64_t)v593, v592, 62);
  objc_msgSend_setDictionary_(v578, v158, v157);
  double v161 = *(double *)(v2 + 1424);
  if (v161 > 0.0)
  {
    *(float *)&double v161 = v161;
    uint64_t v162 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v161);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v163, v162, @"timeToFirstFaceposeInSession");
  }
  if (*(double *)(v2 + 432) != 1.79769313e308)
  {
    uint64_t v164 = objc_msgSend_numberWithDouble_(NSNumber, v159, v160, *(double *)(v2 + 440));
    objc_msgSend_setObject_forKeyedSubscript_(v578, v165, v164, @"maxGapBetweenAuxSamples");
    int v168 = *(_DWORD *)(v2 + 456);
    if (v168 < 1) {
      uint64_t v169 = objc_msgSend_numberWithDouble_(NSNumber, v166, v167, 0.0);
    }
    else {
      uint64_t v169 = objc_msgSend_numberWithDouble_(NSNumber, v166, v167, *(double *)(v2 + 448) / (double)v168);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v578, v170, v169, @"avgGapBetweenAuxSamples");
  }
  if (*(double *)(v2 + 464) != 1.79769313e308)
  {
    uint64_t v171 = objc_msgSend_numberWithDouble_(NSNumber, v159, v160, *(double *)(v2 + 472));
    objc_msgSend_setObject_forKeyedSubscript_(v578, v172, v171, @"maxGapBetweenBTZ");
    int v175 = *(_DWORD *)(v2 + 488);
    if (v175 < 1) {
      uint64_t v176 = objc_msgSend_numberWithDouble_(NSNumber, v173, v174, 0.0);
    }
    else {
      uint64_t v176 = objc_msgSend_numberWithDouble_(NSNumber, v173, v174, *(double *)(v2 + 480) / (double)v175);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v578, v177, v176, @"avgGapBetweenBTZ");
  }
  double v178 = *(double *)(v2 + 496);
  if (v178 != 1.79769313e308)
  {
    *(float *)&double v178 = v178;
    uint64_t v179 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v178);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v180, v179, @"minGapBetweenCTSeconds");
    int v183 = *(_DWORD *)(v2 + 520);
    if (v183 < 1) {
      double v184 = 0.0;
    }
    else {
      double v184 = *(double *)(v2 + 512) / (double)v183;
    }
    *(float *)&double v184 = v184;
    uint64_t v185 = objc_msgSend_numberWithFloat_(NSNumber, v181, v182, v184);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v186, v185, @"avgGapBetweenCTSeconds");
    double v187 = *(double *)(v2 + 504);
    *(float *)&double v187 = v187;
    uint64_t v190 = objc_msgSend_numberWithFloat_(NSNumber, v188, v189, v187);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v191, v190, @"maxGapBetweenCTSeconds");
  }
  double v192 = *(double *)(v2 + 528);
  if (v192 != 1.79769313e308)
  {
    double v193 = v192 * 57.2957802;
    *(float *)&double v193 = v193;
    uint64_t v194 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v193);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v195, v194, @"minCTBTZCorrectionAngleDeg");
    int v198 = *(_DWORD *)(v2 + 552);
    if (v198 < 1) {
      double v199 = 0.0;
    }
    else {
      double v199 = *(double *)(v2 + 544) / (double)v198;
    }
    double v200 = v199 * 57.2957802;
    *(float *)&double v200 = v200;
    uint64_t v201 = objc_msgSend_numberWithFloat_(NSNumber, v196, v197, v200);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v202, v201, @"avgCTBTZCorrectionAngleDeg");
    double v203 = *(double *)(v2 + 536) * 57.2957802;
    *(float *)&double v203 = v203;
    uint64_t v206 = objc_msgSend_numberWithFloat_(NSNumber, v204, v205, v203);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v207, v206, @"maxCTBTZCorrectionAngleDeg");
  }
  double v208 = *(double *)(v2 + 560);
  if (v208 != 1.79769313e308)
  {
    double v209 = v208 * 57.2957802;
    *(float *)&double v209 = v209;
    uint64_t v210 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v209);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v211, v210, @"minCTSrcYawRateDps");
    int v214 = *(_DWORD *)(v2 + 584);
    if (v214 < 1) {
      double v215 = 0.0;
    }
    else {
      double v215 = *(double *)(v2 + 576) / (double)v214;
    }
    double v216 = v215 * 57.2957802;
    *(float *)&double v216 = v216;
    uint64_t v217 = objc_msgSend_numberWithFloat_(NSNumber, v212, v213, v216);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v218, v217, @"avgCTSrcYawRateDps");
    double v219 = *(double *)(v2 + 568) * 57.2957802;
    *(float *)&double v219 = v219;
    uint64_t v222 = objc_msgSend_numberWithFloat_(NSNumber, v220, v221, v219);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v223, v222, @"maxCTSrcYawRateDps");
  }
  double v224 = *(double *)(v2 + 592);
  if (v224 != 1.79769313e308)
  {
    double v225 = v224 * 57.2957802;
    *(float *)&double v225 = v225;
    uint64_t v226 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v225);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v227, v226, @"minCTAuxYawRateDps");
    int v230 = *(_DWORD *)(v2 + 616);
    if (v230 < 1) {
      double v231 = 0.0;
    }
    else {
      double v231 = *(double *)(v2 + 608) / (double)v230;
    }
    double v232 = v231 * 57.2957802;
    *(float *)&double v232 = v232;
    uint64_t v233 = objc_msgSend_numberWithFloat_(NSNumber, v228, v229, v232);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v234, v233, @"avgCTAuxYawRateDps");
    double v235 = *(double *)(v2 + 600) * 57.2957802;
    *(float *)&double v235 = v235;
    uint64_t v238 = objc_msgSend_numberWithFloat_(NSNumber, v236, v237, v235);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v239, v238, @"maxCTAuxYawRateDps");
  }
  if (*(double *)(v2 + 624) != 1.79769313e308)
  {
    uint64_t v240 = objc_msgSend_numberWithDouble_(NSNumber, v159, v160);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v241, v240, @"minDistractedViewingDuration");
    int v244 = *(_DWORD *)(v2 + 648);
    if (v244 < 1) {
      uint64_t v245 = objc_msgSend_numberWithDouble_(NSNumber, v242, v243, 0.0);
    }
    else {
      uint64_t v245 = objc_msgSend_numberWithDouble_(NSNumber, v242, v243, *(double *)(v2 + 640) / (double)v244);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v578, v246, v245, @"avgDistractedViewingDuration");
    uint64_t v249 = objc_msgSend_numberWithDouble_(NSNumber, v247, v248, *(double *)(v2 + 632));
    objc_msgSend_setObject_forKeyedSubscript_(v578, v250, v249, @"maxDistractedViewingDuration");
  }
  double v251 = *(double *)(v2 + 656);
  if (v251 != 1.79769313e308)
  {
    double v252 = v251 * 57.2957802;
    *(float *)&double v252 = v252;
    uint64_t v253 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v252);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v254, v253, @"minBTZCorrectionAngleDeg");
    int v257 = *(_DWORD *)(v2 + 680);
    if (v257 < 1) {
      double v258 = 0.0;
    }
    else {
      double v258 = *(double *)(v2 + 672) / (double)v257;
    }
    double v259 = v258 * 57.2957802;
    *(float *)&double v259 = v259;
    uint64_t v260 = objc_msgSend_numberWithFloat_(NSNumber, v255, v256, v259);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v261, v260, @"avgBTZCorrectionAngleDeg");
    double v262 = *(double *)(v2 + 664) * 57.2957802;
    *(float *)&double v262 = v262;
    uint64_t v265 = objc_msgSend_numberWithFloat_(NSNumber, v263, v264, v262);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v266, v265, @"maxBTZCorrectionAngleDeg");
  }
  double v267 = *(double *)(v2 + 752);
  if (v267 != 1.79769313e308)
  {
    *(float *)&double v267 = v267;
    uint64_t v268 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v267);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v269, v268, @"minAuxMotionToPoseLatency");
    int v272 = *(_DWORD *)(v2 + 776);
    if (v272 < 1) {
      double v273 = 0.0;
    }
    else {
      double v273 = *(double *)(v2 + 768) / (double)v272;
    }
    *(float *)&double v273 = v273;
    uint64_t v274 = objc_msgSend_numberWithFloat_(NSNumber, v270, v271, v273);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v275, v274, @"avgAuxMotionToPoseLatency");
    double v276 = *(double *)(v2 + 760);
    *(float *)&double v276 = v276;
    uint64_t v279 = objc_msgSend_numberWithFloat_(NSNumber, v277, v278, v276);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v280, v279, @"maxAuxMotionToPoseLatency");
  }
  double v281 = *(double *)(v2 + 784);
  if (v281 != 1.79769313e308)
  {
    *(float *)&double v281 = v281;
    uint64_t v282 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v281);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v283, v282, @"minJBL");
    double v284 = *(double *)(v2 + 792);
    *(float *)&double v284 = v284;
    uint64_t v287 = objc_msgSend_numberWithFloat_(NSNumber, v285, v286, v284);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v288, v287, @"maxJBL");
    LOWORD(v289) = *(_WORD *)(v2 + 1492);
    double v290 = *(float *)(v2 + 1496) + (double)v289 * *(double *)(*(void *)(v2 + 1464) + 16 * *(int *)(v2 + 1488) + 8);
    *(float *)&double v290 = v290;
    *(_DWORD *)(v2 + 1496) = LODWORD(v290);
    *(float *)&double v290 = *(float *)&v290 / v4;
    uint64_t v293 = objc_msgSend_numberWithFloat_(NSNumber, v291, v292, v290);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v294, v293, @"avgJBL");
  }
  double v295 = *(double *)(v2 + 816);
  if (v295 != 1.79769313e308)
  {
    *(float *)&double v295 = v295;
    uint64_t v296 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v295);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v297, v296, @"timeBetweenStandAndWalkingEventSecondsMin");
    double v298 = *(double *)(v2 + 824);
    *(float *)&double v298 = v298;
    uint64_t v301 = objc_msgSend_numberWithFloat_(NSNumber, v299, v300, v298);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v302, v301, @"timeBetweenStandAndWalkingEventSecondsMax");
    int v305 = *(_DWORD *)(v2 + 840);
    if (v305 < 1) {
      double v306 = 0.0;
    }
    else {
      double v306 = *(double *)(v2 + 832) / (double)v305;
    }
    *(float *)&double v306 = v306;
    uint64_t v307 = objc_msgSend_numberWithFloat_(NSNumber, v303, v304, v306);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v308, v307, @"timeBetweenStandAndWalkingEventSecondsAverage");
  }
  double v309 = *(double *)(v2 + 848);
  if (v309 != 1.79769313e308)
  {
    *(float *)&double v309 = v309;
    uint64_t v310 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v309);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v311, v310, @"timeBetweenSitAndWalkingEventSecondsMin");
    double v312 = *(double *)(v2 + 856);
    *(float *)&double v312 = v312;
    uint64_t v315 = objc_msgSend_numberWithFloat_(NSNumber, v313, v314, v312);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v316, v315, @"timeBetweenSitAndWalkingEventSecondsMax");
    int v319 = *(_DWORD *)(v2 + 872);
    if (v319 < 1) {
      double v320 = 0.0;
    }
    else {
      double v320 = *(double *)(v2 + 864) / (double)v319;
    }
    *(float *)&double v320 = v320;
    uint64_t v321 = objc_msgSend_numberWithFloat_(NSNumber, v317, v318, v320);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v322, v321, @"timeBetweenSitAndWalkingEventSecondsAverage");
  }
  double v323 = *(double *)(v2 + 880);
  if (v323 != 1.79769313e308)
  {
    *(float *)&double v323 = v323;
    uint64_t v324 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v323);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v325, v324, @"timeBetweenStandingAndSittingSecondsMin");
    double v326 = *(double *)(v2 + 888);
    *(float *)&double v326 = v326;
    uint64_t v329 = objc_msgSend_numberWithFloat_(NSNumber, v327, v328, v326);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v330, v329, @"timeBetweenStandingAndSittingSecondsMax");
    int v333 = *(_DWORD *)(v2 + 904);
    if (v333 < 1) {
      double v334 = 0.0;
    }
    else {
      double v334 = *(double *)(v2 + 896) / (double)v333;
    }
    *(float *)&double v334 = v334;
    uint64_t v335 = objc_msgSend_numberWithFloat_(NSNumber, v331, v332, v334);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v336, v335, @"timeBetweenStandingAndSittingSecondsAverage");
  }
  double v337 = *(double *)(v2 + 912);
  if (v337 != 1.79769313e308)
  {
    *(float *)&double v337 = v337;
    uint64_t v338 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v337);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v339, v338, @"timeBetweenSittingAndStandingSecondsMin");
    double v340 = *(double *)(v2 + 920);
    *(float *)&double v340 = v340;
    uint64_t v343 = objc_msgSend_numberWithFloat_(NSNumber, v341, v342, v340);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v344, v343, @"timeBetweenSittingAndStandingSecondsMax");
    int v347 = *(_DWORD *)(v2 + 936);
    if (v347 < 1) {
      double v348 = 0.0;
    }
    else {
      double v348 = *(double *)(v2 + 928) / (double)v347;
    }
    *(float *)&double v348 = v348;
    uint64_t v349 = objc_msgSend_numberWithFloat_(NSNumber, v345, v346, v348);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v350, v349, @"timeBetweenSittingAndStandingSecondsAverage");
  }
  double v351 = *(double *)(v2 + 944);
  if (v351 != 1.79769313e308)
  {
    *(float *)&double v351 = v351;
    uint64_t v352 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v351);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v353, v352, @"timeBetweenStandAndDisableSecondsMin");
    double v354 = *(double *)(v2 + 952);
    *(float *)&double v354 = v354;
    uint64_t v357 = objc_msgSend_numberWithFloat_(NSNumber, v355, v356, v354);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v358, v357, @"timeBetweenStandAndDisableSecondsMax");
    int v361 = *(_DWORD *)(v2 + 968);
    if (v361 < 1) {
      double v362 = 0.0;
    }
    else {
      double v362 = *(double *)(v2 + 960) / (double)v361;
    }
    *(float *)&double v362 = v362;
    uint64_t v363 = objc_msgSend_numberWithFloat_(NSNumber, v359, v360, v362);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v364, v363, @"timeBetweenStandAndDisableSecondsAverage");
  }
  double v365 = *(double *)(v2 + 976);
  if (v365 != 1.79769313e308)
  {
    *(float *)&double v365 = v365;
    uint64_t v366 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v365);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v367, v366, @"timeBetweenEnableAndDisableTrackingMin");
    double v368 = *(double *)(v2 + 984);
    *(float *)&double v368 = v368;
    uint64_t v371 = objc_msgSend_numberWithFloat_(NSNumber, v369, v370, v368);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v372, v371, @"timeBetweenEnableAndDisableTrackingMax");
    int v375 = *(_DWORD *)(v2 + 1000);
    if (v375 < 1) {
      double v376 = 0.0;
    }
    else {
      double v376 = *(double *)(v2 + 992) / (double)v375;
    }
    *(float *)&double v376 = v376;
    uint64_t v377 = objc_msgSend_numberWithFloat_(NSNumber, v373, v374, v376);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v378, v377, @"timeBetweenEnableAndDisableTrackingAverage");
  }
  double v379 = *(double *)(v2 + 1008);
  if (v379 != 1.79769313e308)
  {
    *(float *)&double v379 = v379;
    uint64_t v380 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v379);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v381, v380, @"minTimeBetweenCameraRequest");
    double v382 = *(double *)(v2 + 1016);
    *(float *)&double v382 = v382;
    uint64_t v385 = objc_msgSend_numberWithFloat_(NSNumber, v383, v384, v382);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v386, v385, @"maxTimeBetweenCameraRequest");
    int v389 = *(_DWORD *)(v2 + 1032);
    if (v389 < 1) {
      double v390 = 0.0;
    }
    else {
      double v390 = *(double *)(v2 + 1024) / (double)v389;
    }
    *(float *)&double v390 = v390;
    uint64_t v391 = objc_msgSend_numberWithFloat_(NSNumber, v387, v388, v390);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v392, v391, @"avgTimeBetweenCameraRequest");
  }
  double v393 = *(double *)(v2 + 1040);
  if (v393 != 1.79769313e308)
  {
    *(float *)&double v393 = v393;
    uint64_t v394 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v393);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v395, v394, @"minLidAngle");
    double v396 = *(double *)(v2 + 1048);
    *(float *)&double v396 = v396;
    uint64_t v399 = objc_msgSend_numberWithFloat_(NSNumber, v397, v398, v396);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v400, v399, @"maxLidAngle");
    int v403 = *(_DWORD *)(v2 + 1064);
    if (v403 < 1) {
      double v404 = 0.0;
    }
    else {
      double v404 = *(double *)(v2 + 1056) / (double)v403;
    }
    *(float *)&double v404 = v404;
    uint64_t v405 = objc_msgSend_numberWithFloat_(NSNumber, v401, v402, v404);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v406, v405, @"avgLidAngle");
  }
  double v407 = *(double *)(v2 + 1072);
  if (v407 != 1.79769313e308)
  {
    *(float *)&double v407 = v407;
    uint64_t v408 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v407);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v409, v408, @"minDurationBetweenUserMovementForCameraController");
    double v410 = *(double *)(v2 + 1080);
    *(float *)&double v410 = v410;
    uint64_t v413 = objc_msgSend_numberWithFloat_(NSNumber, v411, v412, v410);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v414, v413, @"maxDurationBetweenUserMovementForCameraController");
    int v417 = *(_DWORD *)(v2 + 1096);
    if (v417 < 1)
    {
      uint64_t v419 = objc_msgSend_numberWithFloat_(NSNumber, v415, v416, 0.0);
    }
    else
    {
      double v418 = *(double *)(v2 + 1088) / (double)v417;
      *(float *)&double v418 = v418;
      uint64_t v419 = objc_msgSend_numberWithFloat_(NSNumber, v415, v416, v418);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v578, v420, v419, @"avgDurationBetweenUserMovementForCameraController");
  }
  double v421 = *(double *)(v2 + 1104);
  if (v421 != 1.79769313e308)
  {
    *(float *)&double v421 = v421;
    uint64_t v422 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v421);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v423, v422, @"minUserMotionDurationForCameraController");
    double v424 = *(double *)(v2 + 1112);
    *(float *)&double v424 = v424;
    uint64_t v427 = objc_msgSend_numberWithFloat_(NSNumber, v425, v426, v424);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v428, v427, @"maxUserMotionDurationForCameraController");
    int v431 = *(_DWORD *)(v2 + 1128);
    if (v431 < 1)
    {
      uint64_t v433 = objc_msgSend_numberWithFloat_(NSNumber, v429, v430, 0.0);
    }
    else
    {
      double v432 = *(double *)(v2 + 1120) / (double)v431;
      *(float *)&double v432 = v432;
      uint64_t v433 = objc_msgSend_numberWithFloat_(NSNumber, v429, v430, v432);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v578, v434, v433, @"avgUserMotionDurationForCameraController");
  }
  double v435 = *(double *)(v2 + 1136);
  if (v435 != 1.79769313e308)
  {
    *(float *)&double v435 = v435;
    uint64_t v436 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v435);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v437, v436, @"minUserStaticPoseAfterDisturbanceDurationForCameraController");
    double v438 = *(double *)(v2 + 1144);
    *(float *)&double v438 = v438;
    uint64_t v441 = objc_msgSend_numberWithFloat_(NSNumber, v439, v440, v438);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v442, v441, @"maxUserStaticPoseAfterDisturbanceDurationForCameraController");
    int v445 = *(_DWORD *)(v2 + 1160);
    if (v445 < 1)
    {
      uint64_t v447 = objc_msgSend_numberWithFloat_(NSNumber, v443, v444, 0.0);
    }
    else
    {
      double v446 = *(double *)(v2 + 1152) / (double)v445;
      *(float *)&double v446 = v446;
      uint64_t v447 = objc_msgSend_numberWithFloat_(NSNumber, v443, v444, v446);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v578, v448, v447, @"avgUserStaticPoseAfterDisturbanceDurationForCameraController");
  }
  double v449 = *(double *)(v2 + 1168);
  if (v449 != 1.79769313e308)
  {
    *(float *)&double v449 = v449;
    uint64_t v450 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v449);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v451, v450, @"minTimeToFirstFaceposeInCameraRequest");
    double v452 = *(double *)(v2 + 1176);
    *(float *)&double v452 = v452;
    uint64_t v455 = objc_msgSend_numberWithFloat_(NSNumber, v453, v454, v452);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v456, v455, @"maxTimeToFirstFaceposeInCameraRequest");
    int v459 = *(_DWORD *)(v2 + 1192);
    if (v459 < 1)
    {
      uint64_t v461 = objc_msgSend_numberWithFloat_(NSNumber, v457, v458, 0.0);
    }
    else
    {
      double v460 = *(double *)(v2 + 1184) / (double)v459;
      *(float *)&double v460 = v460;
      uint64_t v461 = objc_msgSend_numberWithFloat_(NSNumber, v457, v458, v460);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v578, v462, v461, @"avgTimeToFirstFaceposeInCameraRequest");
  }
  v463.i64[0] = *(void *)(v2 + 1200);
  if (*(double *)v463.i64 != 1.79769313e308)
  {
    double v464 = *(double *)(v2 + 1208);
    *(float *)&double v464 = v464;
    uint64_t v465 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v464);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v466, v465, @"maxFaceposeLatencySec");
    int v469 = *(_DWORD *)(v2 + 1224);
    if (v469 < 1)
    {
      uint64_t v471 = objc_msgSend_numberWithFloat_(NSNumber, v467, v468, 0.0);
    }
    else
    {
      double v470 = *(double *)(v2 + 1216) / (double)v469;
      *(float *)&double v470 = v470;
      uint64_t v471 = objc_msgSend_numberWithFloat_(NSNumber, v467, v468, v470);
    }
    objc_msgSend_setObject_forKeyedSubscript_(v578, v472, v471, @"avgFaceposeLatencySec");
  }
  unsigned int v473 = *(_DWORD *)(v2 + 1328);
  if (v473)
  {
    unsigned int v474 = *(_DWORD *)(v2 + 1336) + *(_DWORD *)(v2 + 1332);
    BOOL v475 = v473 >= v474;
    unsigned int v476 = v473 - v474;
    if (v475)
    {
      *(float *)v463.i32 = (float)v476 / (float)v473;
      uint64_t v477 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, *(double *)v463.i64);
      objc_msgSend_setObject_forKeyedSubscript_(v578, v478, v477, @"percentageOfFaceposeAnchorValid");
      *(float *)&double v479 = (float)*(unsigned int *)(v2 + 1332) / (float)*(unsigned int *)(v2 + 1328);
      uint64_t v482 = objc_msgSend_numberWithFloat_(NSNumber, v480, v481, v479);
      objc_msgSend_setObject_forKeyedSubscript_(v578, v483, v482, @"percentageOfFaceposeAnchorInvalidDueToFaceposeFailure");
      *(float *)&double v484 = (float)*(unsigned int *)(v2 + 1336) / (float)*(unsigned int *)(v2 + 1328);
      uint64_t v487 = objc_msgSend_numberWithFloat_(NSNumber, v485, v486, v484);
      objc_msgSend_setObject_forKeyedSubscript_(v578, v488, v487, @"percentageOfFaceposeAnchorInvalidDueToConfidence");
    }
  }
  unsigned int v489 = *(_DWORD *)(v2 + 1320);
  if (v489)
  {
    int32x4_t v463 = *(int32x4_t *)(v2 + 1340);
    if (vaddvq_s32(v463) + *(_DWORD *)(v2 + 1356) <= v489)
    {
      *(float *)v463.i32 = (float)v463.u32[0] / (float)v489;
      uint64_t v490 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, *(double *)v463.i64);
      objc_msgSend_setObject_forKeyedSubscript_(v578, v491, v490, @"percentageOfCameraRequestDueToMaxDutyCycleStatic");
      *(float *)&double v492 = (float)*(unsigned int *)(v2 + 1344) / (float)*(unsigned int *)(v2 + 1320);
      uint64_t v495 = objc_msgSend_numberWithFloat_(NSNumber, v493, v494, v492);
      objc_msgSend_setObject_forKeyedSubscript_(v578, v496, v495, @"percentageOfCameraRequestDueToMaxDutyCycleMoving");
      *(float *)&double v497 = (float)*(unsigned int *)(v2 + 1348) / (float)*(unsigned int *)(v2 + 1320);
      uint64_t v500 = objc_msgSend_numberWithFloat_(NSNumber, v498, v499, v497);
      objc_msgSend_setObject_forKeyedSubscript_(v578, v501, v500, @"percentageOfCameraRequestDueToAuxAndSrcMotion");
      *(float *)&double v502 = (float)*(unsigned int *)(v2 + 1352) / (float)*(unsigned int *)(v2 + 1320);
      uint64_t v505 = objc_msgSend_numberWithFloat_(NSNumber, v503, v504, v502);
      objc_msgSend_setObject_forKeyedSubscript_(v578, v506, v505, @"percentageOfCameraRequestDueToAuxMotion");
      *(float *)&double v507 = (float)*(unsigned int *)(v2 + 1356) / (float)*(unsigned int *)(v2 + 1320);
      uint64_t v510 = objc_msgSend_numberWithFloat_(NSNumber, v508, v509, v507);
      objc_msgSend_setObject_forKeyedSubscript_(v578, v511, v510, @"percentageOfCameraRequestDueToSrcMotion");
    }
  }
  double v512 = *(double *)(v2 + 8);
  v463.i32[0] = *(_DWORD *)(v2 + 1280);
  double v513 = (double)v463.u64[0] / *(double *)(a1 + 40);
  *(float *)&double v513 = v513;
  uint64_t v515 = objc_msgSend_numberWithFloat_(NSNumber, v159, v160, v513);
  if (v512 <= 60.0) {
    v516 = @"percentageOfSrcSamplesThatAreVeryEarly_shortSession";
  }
  else {
    v516 = @"percentageOfSrcSamplesThatAreVeryEarly";
  }
  if (v512 <= 60.0) {
    v517 = @"percentageOfSrcSamplesThatAreVeryLate_shortSession";
  }
  else {
    v517 = @"percentageOfSrcSamplesThatAreVeryLate";
  }
  if (v512 <= 60.0) {
    v518 = @"percentageOfAuxSamplesWithLargeGaps_shortSession";
  }
  else {
    v518 = @"percentageOfAuxSamplesWithLargeGaps";
  }
  if (v512 <= 60.0) {
    v519 = @"percentageOfAuxSamplesFailedToFindSource_shortSession";
  }
  else {
    v519 = @"percentageOfAuxSamplesFailedToFindSource";
  }
  if (v512 <= 60.0) {
    v520 = @"percentageOfAuxSamplesIndexUnchanged_shortSession";
  }
  else {
    v520 = @"percentageOfAuxSamplesIndexUnchanged";
  }
  if (v512 <= 60.0) {
    v521 = @"percentageOfAuxSamplesSourceDataMissing_shortSession";
  }
  else {
    v521 = @"percentageOfAuxSamplesSourceDataMissing";
  }
  objc_msgSend_setObject_forKeyedSubscript_(v578, v514, v515, v516);
  LODWORD(v522) = *(_DWORD *)(v2 + 1284);
  double v523 = (double)v522 / *(double *)(a1 + 40);
  *(float *)&double v523 = v523;
  uint64_t v526 = objc_msgSend_numberWithFloat_(NSNumber, v524, v525, v523);
  objc_msgSend_setObject_forKeyedSubscript_(v578, v527, v526, v517);
  double v528 = (double)*(unint64_t *)(v2 + 1432) / *(double *)(a1 + 48);
  *(float *)&double v528 = v528;
  uint64_t v531 = objc_msgSend_numberWithFloat_(NSNumber, v529, v530, v528);
  objc_msgSend_setObject_forKeyedSubscript_(v578, v532, v531, v518);
  double v533 = (double)*(unint64_t *)(v2 + 1440) / *(double *)(a1 + 48);
  *(float *)&double v533 = v533;
  uint64_t v536 = objc_msgSend_numberWithFloat_(NSNumber, v534, v535, v533);
  objc_msgSend_setObject_forKeyedSubscript_(v578, v537, v536, v519);
  double v538 = (double)*(unint64_t *)(v2 + 1448) / *(double *)(a1 + 48);
  *(float *)&double v538 = v538;
  uint64_t v541 = objc_msgSend_numberWithFloat_(NSNumber, v539, v540, v538);
  objc_msgSend_setObject_forKeyedSubscript_(v578, v542, v541, v520);
  double v543 = (double)*(unint64_t *)(v2 + 1456) / *(double *)(a1 + 48);
  *(float *)&double v543 = v543;
  uint64_t v546 = objc_msgSend_numberWithFloat_(NSNumber, v544, v545, v543);
  objc_msgSend_setObject_forKeyedSubscript_(v578, v547, v546, v521);
  uint64_t v550 = 0;
  double v551 = v4;
  do
  {
    double v552 = 0.0;
    if (v4 >= 0.001)
    {
      double v552 = *(double *)(*(void *)(v2 + 1464) + 4 * v550 + 8) / v551;
      *(float *)&double v552 = v552;
    }
    uint64_t v553 = objc_msgSend_numberWithFloat_(NSNumber, v548, v549, v552);
    uint64_t v555 = objc_msgSend_stringWithFormat_(NSString, v554, @"percentSessionJBL%d", (unsigned __int16)aPdx[v550]);
    objc_msgSend_setObject_forKeyedSubscript_(v578, v556, v553, v555);
    ++v550;
  }
  while (v550 != 6);
  double v557 = 0.0;
  if (v4 >= 0.001)
  {
    double v557 = *(double *)(*(void *)(v2 + 1464) + 104) / v551;
    *(float *)&double v557 = v557;
  }
  uint64_t v558 = objc_msgSend_numberWithFloat_(NSNumber, v548, v549, v557);
  objc_msgSend_setObject_forKeyedSubscript_(v578, v559, v558, @"percentSessionJBLOverLimit");
  long long v581 = 0u;
  long long v582 = 0u;
  long long v579 = 0u;
  long long v580 = 0u;
  v562 = objc_msgSend_allKeys(v578, v560, v561);
  uint64_t v564 = objc_msgSend_countByEnumeratingWithState_objects_count_(v562, v563, (uint64_t)&v579, v591, 16);
  if (v564)
  {
    uint64_t v565 = v564;
    uint64_t v566 = *(void *)v580;
    do
    {
      uint64_t v567 = 0;
      do
      {
        if (*(void *)v580 != v566) {
          objc_enumerationMutation(v562);
        }
        uint64_t v568 = *(void *)(*((void *)&v579 + 1) + 8 * v567);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD1460);
        }
        v569 = qword_1E929D8E0;
        if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v571 = objc_msgSend_objectForKey_(v578, v570, v568);
          *(_DWORD *)buf = 138478083;
          uint64_t v588 = v568;
          __int16 v589 = 2113;
          uint64_t v590 = v571;
          _os_log_impl(&dword_1902AF000, v569, OS_LOG_TYPE_DEFAULT, "[CMMediaSessionAnalyticsTracker] %{private}@ -> %{private}@", buf, 0x16u);
        }
        if (sub_1902D8400(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1E929D8D8 != -1) {
            dispatch_once(&qword_1E929D8D8, &unk_1EDFD1460);
          }
          uint64_t v574 = objc_msgSend_objectForKey_(v578, v573, v568);
          int v583 = 138478083;
          uint64_t v584 = v568;
          __int16 v585 = 2113;
          uint64_t v586 = v574;
          v575 = (char *)_os_log_send_and_compose_impl();
          sub_1902D398C("Generic", 1, 0, 2, "void CMMediaSessionAnalyticsTracker::send()_block_invoke", "CoreLocation: %s\n", v575);
          if (v575 != (char *)buf) {
            free(v575);
          }
        }
        ++v567;
      }
      while (v565 != v567);
      uint64_t v576 = objc_msgSend_countByEnumeratingWithState_objects_count_(v562, v572, (uint64_t)&v579, v591, 16);
      uint64_t v565 = v576;
    }
    while (v576);
  }
  return v578;
}

os_log_t sub_19043EEAC()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1E929D8E0 = (uint64_t)result;
  return result;
}

void sub_19043EFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  MEMORY[0x192FCC980](v15, 0xB0C40BC2CC919);
  _Unwind_Resume(a1);
}

void sub_19043EFF8(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v7 = (NSSet *)objc_msgSend_setWithObjects_(v3, v6, v4, v5, 0);
  if (*a2
    && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v7)) != 0
    && (uint64_t v10 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v9, @"CMErrorMessage")) != 0)
  {
    int v13 = objc_msgSend_intValue(v10, v11, v12);
  }
  else
  {
    int v13 = 103;
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
  }
  double v14 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67240192;
    int v17 = v13;
    _os_log_impl(&dword_1902AF000, v14, OS_LOG_TYPE_FAULT, "SedentaryAlarm,Error response,%{public}d", buf, 8u);
  }
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
    }
    uint64_t v15 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "-[CMSedentaryTimer_Internal init]_block_invoke", "CoreLocation: %s\n", v15);
    if (v15 != (char *)buf) {
      free(v15);
    }
  }
}

void sub_19043F49C(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
  }
  uint64_t v2 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _isActive dispatch sync.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
    }
    LOWORD(v29) = 0;
    uint64_t v22 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _isActive]_block_invoke", "CoreLocation: %s\n", v22);
    if (v22 != (char *)buf) {
      free(v22);
    }
  }
  sub_1904424F4("kCLConnectionMessageSedentaryTimerIsArmed", &v29);
  uint64_t v3 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v4 = objc_opt_class();
  uint64_t v5 = objc_opt_class();
  uint64_t v6 = objc_opt_class();
  uint64_t v9 = objc_msgSend_setWithObjects_(v3, v7, v4, v5, v6, 0);
  uint64_t v27 = v29;
  uint64_t v28 = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = objc_msgSend_sendMessage_withReplyClassesSync_(CMMotionUtils, v8, (uint64_t)&v27, v9);
  if (v28) {
    sub_1902D8B58(v28);
  }
  if (v11)
  {
    uint64_t v12 = *(void **)(a1 + 32);
    int v13 = objc_msgSend_objectForKeyedSubscript_(v11, v10, @"CMSedentaryTimerIsArmed");
    uint64_t v16 = objc_msgSend_BOOLValue(v13, v14, v15);
    objc_msgSend_setTimerArmed_(v12, v17, v16);
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
  }
  uint64_t v18 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    int isTimerArmed = objc_msgSend_isTimerArmed(*(void **)(a1 + 32), v19, v20);
    *(_DWORD *)buf = 67240192;
    int v34 = isTimerArmed;
    _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _isActive, timer is %{public}d.", buf, 8u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
    }
    int v25 = objc_msgSend_isTimerArmed(*(void **)(a1 + 32), v23, v24);
    int v31 = 67240192;
    int v32 = v25;
    double v26 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _isActive]_block_invoke", "CoreLocation: %s\n", v26);
    if (v26 != (char *)buf) {
      free(v26);
    }
  }
  if (v30) {
    sub_1902D8B58(v30);
  }
}

void sub_19043F85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_1902D8B58(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1904400F0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
  }
  uint64_t v2 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _handleStartStopTimerResponse calling handler.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _handleStartStopTimerResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v3, @"CMErrorDomain", 103, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v4, v5);
}

uint64_t sub_1904402BC(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3) != 100)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
    }
    uint64_t v6 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_ERROR))
    {
      int v9 = objc_msgSend_intValue(*(void **)(a1 + 32), v7, v8);
      *(_DWORD *)buf = 67240192;
      int v20 = v9;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_ERROR, "SedentaryAlarm,Error start / stop response,%{public}d", buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
      }
      objc_msgSend_intValue(*(void **)(a1 + 32), v16, v17);
      uint64_t v18 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMSedentaryTimer_Internal _handleStartStopTimerResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v18);
      if (v18 != (char *)buf) {
        free(v18);
      }
    }
  }
  uint64_t v10 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = objc_msgSend_integerValue(*(void **)(a1 + 32), v4, v5);
  uint64_t v14 = objc_msgSend_errorWithDomain_code_userInfo_(v10, v13, @"CMErrorDomain", v12, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 16))(v11, v14);
}

uint64_t sub_1904404D0(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16);

  return v4(v2, v3);
}

uint64_t sub_190440C4C(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
  }
  uint64_t v2 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _handleAlarmDataResponse nil response calling handler.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
    }
    uint64_t v7 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _handleAlarmDataResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v3, @"CMErrorDomain", 103, 0);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16))(v4, 0, v5);
}

uint64_t sub_190440E1C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3) != 100)
  {
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
    }
    uint64_t v4 = off_1EB3BE890;
    if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_ERROR))
    {
      int v7 = objc_msgSend_intValue(*(void **)(a1 + 32), v5, v6);
      *(_DWORD *)buf = 67240192;
      int v22 = v7;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_ERROR, "SedentaryAlarm,Error query response,%{public}d", buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE898 != -1) {
        dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
      }
      objc_msgSend_intValue(*(void **)(a1 + 32), v18, v19);
      int v20 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMSedentaryTimer_Internal _handleAlarmDataResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v20);
      if (v20 != (char *)buf) {
        free(v20);
      }
    }
  }
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
  }
  uint64_t v8 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _handleAlarmDataResponse error dispatching.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
    }
    uint64_t v17 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _handleAlarmDataResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v17);
    if (v17 != (char *)buf) {
      free(v17);
    }
  }
  uint64_t v11 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = objc_msgSend_integerValue(*(void **)(a1 + 32), v9, v10);
  uint64_t v15 = objc_msgSend_errorWithDomain_code_userInfo_(v11, v14, @"CMErrorDomain", v13, 0);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v12 + 16))(v12, 0, v15);
}

uint64_t sub_19044115C(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
  }
  uint64_t v2 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _handleAlarmDataResponse alarmDataArray dispatching.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
    }
    uint64_t v4 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _handleAlarmDataResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v4);
    if (v4 != (char *)buf) {
      free(v4);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_190441304(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
  }
  uint64_t v2 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _handleAlarmDataResponse else dispatching.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
    }
    int v7 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _handleAlarmDataResponse:withHandler:]_block_invoke", "CoreLocation: %s\n", v7);
    if (v7 != (char *)buf) {
      free(v7);
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v3, @"CMErrorDomain", 103, 0);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16))(v4, 0, v5);
}

void sub_1904416E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19044170C(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (qword_1EB3BE898 != -1) {
    dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
  }
  uint64_t v4 = off_1EB3BE890;
  if (os_log_type_enabled((os_log_t)off_1EB3BE890, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEFAULT, "[SedentaryTimerTriage] SedentaryAlarm _registerForAlarmsWithHandler, setting handler for message.", buf, 2u);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE898 != -1) {
      dispatch_once(&qword_1EB3BE898, &unk_1EDFD2E40);
    }
    __int16 v11 = 0;
    uint64_t v8 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMSedentaryTimer_Internal _registerForAlarmsWithHandler:]_block_invoke", "CoreLocation: %s\n", v8);
    if (v8 != (char *)buf) {
      free(v8);
    }
  }
  uint64_t v6 = *(void **)(a1 + 32);
  int v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v9 = *a2;
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  objc_msgSend__handleAlarmDataResponse_withHandler_(v6, v5, (uint64_t)&v9, *(void *)(a1 + 40));
  if (v10) {
    sub_1902D8B58(v10);
  }
}

void sub_1904418D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

void sub_190441B6C(uint64_t a1, const char *a2, uint64_t a3)
{
  v20[4] = *MEMORY[0x1E4F143B8];
  v19[0] = @"CMSedentaryTimerStartTime";
  uint64_t v4 = NSNumber;
  objc_msgSend_timeIntervalSinceReferenceDate(*(void **)(a1 + 32), a2, a3);
  v20[0] = objc_msgSend_numberWithDouble_(v4, v5, v6);
  v19[1] = @"CMSedentaryTimerPeriodInterval";
  v20[1] = objc_msgSend_numberWithDouble_(NSNumber, v7, v8, *(double *)(a1 + 56));
  v19[2] = @"CMSedentaryTimerReminderInterval";
  v20[2] = objc_msgSend_numberWithDouble_(NSNumber, v9, v10, *(double *)(a1 + 64));
  v19[3] = @"CMSedentaryTimerAutoReschedule";
  v20[3] = objc_msgSend_numberWithBool_(NSNumber, v11, *(unsigned __int8 *)(a1 + 72));
  uint64_t v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v12, (uint64_t)v20, v19, 4);
  sub_19044262C("kCLConnectionMessageSedentaryTimerStart", &v18, &v16);
  objc_msgSend__internal(*(void **)(a1 + 40), v13, v14);
  uint64_t v15 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v15) {
    sub_1902D8B58(v15);
  }
  if (v17) {
    sub_1902D8B58(v17);
  }
}

void sub_190441D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a19) {
    sub_1902D8B58(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_190441D50(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);
  int v7 = (std::__shared_weak_count *)*((void *)a2 + 1);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  objc_msgSend__handleStartStopTimerResponse_withHandler_(v5, v6, (uint64_t)&v8, *(void *)(a1 + 40));
  if (v9) {
    sub_1902D8B58(v9);
  }
}

void sub_190441DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_190441EA0(uint64_t a1)
{
  sub_190442778("kCLConnectionMessageSedentaryTimerStop", &v5);
  objc_msgSend__internal(*(void **)(a1 + 32), v2, v3);
  uint64_t v4 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v4) {
    sub_1902D8B58(v4);
  }
  if (v6) {
    sub_1902D8B58(v6);
  }
}

void sub_190441F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 - 32);
  if (v19) {
    sub_1902D8B58(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_190441F9C(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);
  int v7 = (std::__shared_weak_count *)*((void *)a2 + 1);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  objc_msgSend__handleStartStopTimerResponse_withHandler_(v5, v6, (uint64_t)&v8, *(void *)(a1 + 40));
  if (v9) {
    sub_1902D8B58(v9);
  }
}

void sub_190442000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1904420F4(uint64_t a1, const char *a2, uint64_t a3)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  uint64_t v14 = @"CMSedentaryTimerStartTime";
  uint64_t v4 = NSNumber;
  objc_msgSend_timeIntervalSinceReferenceDate(*(void **)(a1 + 32), a2, a3);
  v15[0] = objc_msgSend_numberWithDouble_(v4, v5, v6);
  uint64_t v13 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v7, (uint64_t)v15, &v14, 1);
  sub_19044262C("kCLConnectionMessageSedentaryTimerQuery", &v13, &v11);
  objc_msgSend__internal(*(void **)(a1 + 40), v8, v9);
  uint64_t v10 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v10) {
    sub_1902D8B58(v10);
  }
  if (v12) {
    sub_1902D8B58(v12);
  }
}

void sub_19044223C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a17) {
    sub_1902D8B58(a17);
  }
  if (a19) {
    sub_1902D8B58(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_190442270(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v5 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);
  int v7 = (std::__shared_weak_count *)*((void *)a2 + 1);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  objc_msgSend__handleAlarmDataResponse_withHandler_(v5, v6, (uint64_t)&v8, *(void *)(a1 + 40));
  if (v9) {
    sub_1902D8B58(v9);
  }
}

void sub_1904422D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1904423C0(uint64_t a1, const char *a2, uint64_t a3)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1 + 32;
  uint64_t v4 = objc_msgSend__internal(*(void **)(a1 + 32), a2, a3);
  objc_msgSend__registerForAlarmsWithHandler_(v4, v5, *(void *)(v3 + 8));
  uint64_t v13 = @"kCLConnectionMessageSubscribeKey";
  v14[0] = MEMORY[0x1E4F1CC38];
  uint64_t v12 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v6, (uint64_t)v14, &v13, 1);
  sub_19044262C("kCLConnectionMessageSedentaryTimerAlarm", &v12, &v10);
  objc_msgSend__internal(*(void **)v3, v7, v8);
  uint64_t v9 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CLConnectionClient::sendMessage();
  if (v9) {
    sub_1902D8B58(v9);
  }
  if (v11) {
    sub_1902D8B58(v11);
  }
}

void sub_1904424B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a13) {
    sub_1902D8B58(a13);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1904424F4@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x70uLL);
  os_log_t result = sub_190442550(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_19044253C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_190442550(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_1904425C0((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_1904425AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1904425C0(int a1, uint64_t a2, char *__s)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC410](a2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_190442610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19044262C@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  os_log_t result = sub_190442690(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_19044267C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_190442690(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_190442704((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_1904426F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_190442704(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC420](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19044275C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_190442778@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x70uLL);
  os_log_t result = sub_1904427D4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1904427C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1904427D4(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_190442844((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_190442830(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_190442844(int a1, uint64_t a2, char *__s)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC410](a2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_190442894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_190442AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  objc_destroyWeak(v26);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_190442B6C(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (id *)(a1 + 32);
  id Weak = objc_loadWeak((id *)(a1 + 32));
  if (!Weak) {
    return;
  }
  char v5 = Weak;
  if (!Weak[3]) {
    return;
  }
  uint64_t v6 = (void *)MEMORY[0x1E4F1CAD0];
  uint64_t v7 = objc_opt_class();
  uint64_t v8 = objc_opt_class();
  uint64_t v9 = objc_opt_class();
  uint64_t v11 = (NSSet *)objc_msgSend_setWithObjects_(v6, v10, v7, v8, v9, 0);
  if (*a2 && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v11)) != 0)
  {
    uint64_t v14 = DictionaryOfClasses;
    uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v13, @"CMErrorMessage");
    uint64_t v17 = objc_msgSend_objectForKeyedSubscript_(v14, v16, @"CMMotionActivityData");
    if (v15)
    {
      if (qword_1E929D7A0 != -1) {
        dispatch_once(&qword_1E929D7A0, &unk_1EDFD14A0);
      }
      uint64_t v18 = qword_1E929D7A8;
      if (os_log_type_enabled((os_log_t)qword_1E929D7A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        int v35 = objc_msgSend_intValue(v15, v19, v20);
        _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_DEFAULT, "Error occurred while trying to retrieve motion state update: CMErrorDomain Code:%{public}d", buf, 8u);
      }
      if (!sub_1902D8400(115, 2)) {
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1E929D7A0 != -1) {
        dispatch_once(&qword_1E929D7A0, &unk_1EDFD14A0);
      }
      int v32 = 67240192;
      int v33 = objc_msgSend_intValue(v15, v21, v22);
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMMotionActivityManager init]_block_invoke", "CoreLocation: %s\n", v23);
      if (v23 == (char *)buf) {
        return;
      }
LABEL_35:
      free(v23);
      return;
    }
    uint64_t v25 = v17;
    if (v17)
    {
      uint64_t v27 = v5[3];
      double v26 = (void *)v5[4];
      v30[0] = MEMORY[0x1E4F143A8];
      v30[1] = 3221225472;
      v30[2] = sub_1904430DC;
      v30[3] = &unk_1E568D3C0;
      objc_copyWeak(&v31, v3);
      v30[4] = v25;
      v30[5] = v27;
      objc_msgSend_addOperationWithBlock_(v26, v28, (uint64_t)v30);
      objc_destroyWeak(&v31);
      return;
    }
    if (qword_1E929D7A0 != -1) {
      dispatch_once(&qword_1E929D7A0, &unk_1EDFD14A0);
    }
    uint64_t v29 = qword_1E929D7A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D7A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_FAULT, "Unable to parse kCLConnectionMessageMotionActivityUpdate message!", buf, 2u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D7A0 != -1) {
        dispatch_once(&qword_1E929D7A0, &unk_1EDFD14A0);
      }
      LOWORD(v32) = 0;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMMotionActivityManager init]_block_invoke", "CoreLocation: %s\n", v23);
      goto LABEL_34;
    }
  }
  else
  {
    if (qword_1E929D7A0 != -1) {
      dispatch_once(&qword_1E929D7A0, &unk_1EDFD14A0);
    }
    uint64_t v24 = qword_1E929D7A8;
    if (os_log_type_enabled((os_log_t)qword_1E929D7A8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      int v35 = 103;
      _os_log_impl(&dword_1902AF000, v24, OS_LOG_TYPE_ERROR, "Error occurred while trying to retrieve motion state update: CMErrorDomain Code:%{public}d", buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D7A0 != -1) {
        dispatch_once(&qword_1E929D7A0, &unk_1EDFD14A0);
      }
      int v32 = 67240192;
      int v33 = 103;
      uint64_t v23 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "-[CMMotionActivityManager init]_block_invoke", "CoreLocation: %s\n", v23);
LABEL_34:
      if (v23 == (char *)buf) {
        return;
      }
      goto LABEL_35;
    }
  }
}

void sub_1904430C0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

id sub_1904430DC(uint64_t a1)
{
  id result = objc_loadWeak((id *)(a1 + 48));
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 40) + 16);
    return (id)v3();
  }
  return result;
}

void sub_190443200(uint64_t a1)
{
}

void sub_1904434E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_19044356C;
  block[3] = &unk_1E568D3E8;
  long long v4 = *(_OWORD *)(a1 + 40);
  uint64_t v5 = v1;
  long long v6 = *(_OWORD *)(a1 + 56);
  dispatch_async(v2, block);
}

void sub_19044356C(uint64_t a1)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  id v35 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  obunint64_t j = *(id *)(a1 + 32);
  uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v2, (uint64_t)&v48, v56, 16);
  long long v6 = 0;
  if (!v5) {
    goto LABEL_23;
  }
  char v37 = 0;
  uint64_t v38 = *(void *)v49;
LABEL_3:
  uint64_t v7 = 0;
  uint64_t v8 = v6;
  while (1)
  {
    if (*(void *)v49 != v38) {
      objc_enumerationMutation(obj);
    }
    uint64_t v9 = *(void **)(*((void *)&v48 + 1) + 8 * v7);
    uint64_t v47 = 0;
    v54[0] = @"CMMotionActivityStartTime";
    uint64_t v10 = NSNumber;
    objc_msgSend_timeIntervalSinceReferenceDate(v9, v3, v4);
    v55[0] = objc_msgSend_numberWithDouble_(v10, v11, v12);
    v54[1] = @"CMMotionActivityStopTime";
    uint64_t v13 = NSNumber;
    uint64_t v15 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v14, 0);
    objc_msgSend_timeIntervalSinceReferenceDate(v15, v16, v17);
    v55[1] = objc_msgSend_numberWithDouble_(v13, v18, v19);
    uint64_t v47 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v20, (uint64_t)v55, v54, 2);
    sub_19044262C("kCLConnectionMessageMotionActivityQuery", &v47, &v45);
    float v41 = v45;
    __int16 v42 = v46;
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessageSync();
    uint64_t v21 = (CLConnectionMessage *)v43;
    long long v6 = v44;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    if (v8) {
      sub_1902D8B58(v8);
    }
    if (v42) {
      sub_1902D8B58(v42);
    }
    uint64_t v22 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v23 = objc_opt_class();
    uint64_t v24 = objc_opt_class();
    uint64_t v25 = objc_opt_class();
    uint64_t v26 = objc_opt_class();
    uint64_t v3 = (char *)objc_msgSend_setWithObjects_(v22, v27, v23, v24, v25, v26, 0);
    if (v21
      && (DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(v21, (NSSet *)v3)) != 0
      && (uint64_t v4 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v3, @"CMMotionActivityDataArray")) != 0)
    {
      objc_msgSend_addObjectsFromArray_(v35, v3, v4);
      objc_msgSend_removeObjectAtIndex_(*(void **)(a1 + 40), v29, 0);
      int v30 = 1;
    }
    else
    {
      int v30 = 0;
      char v37 = 1;
    }
    if (v46) {
      sub_1902D8B58(v46);
    }
    if (!v30) {
      break;
    }
    ++v7;
    uint64_t v8 = v6;
    if (v5 == v7)
    {
      uint64_t v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v3, (uint64_t)&v48, v56, 16);
      if (v5) {
        goto LABEL_3;
      }
      break;
    }
  }
  if ((v37 & 1) == 0)
  {
LABEL_23:
    double v52 = @"CMMotionActivityDataArray";
    uint64_t v53 = objc_msgSend_arrayWithArray_(MEMORY[0x1E4F1C978], v3, (uint64_t)v35);
    uint64_t v43 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v31, (uint64_t)&v53, &v52, 1);
    sub_190445538("kCLConnectionMessageMotionActivityQuery", &v43, &v45);
    uint64_t v21 = v45;
    int v32 = v46;
    double v45 = 0;
    unint64_t v46 = 0;
    if (v6)
    {
      sub_1902D8B58(v6);
      if (v46) {
        sub_1902D8B58(v46);
      }
    }
    long long v6 = v32;
  }

  int v34 = *(void **)(a1 + 48);
  uint64_t v39 = v21;
  float v40 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  objc_msgSend__handleQueryResponse_onQueue_withHandler_(v34, v33, (uint64_t)&v39, *(void *)(a1 + 56), *(void *)(a1 + 64));
  if (v40) {
    sub_1902D8B58(v40);
  }
  if (v6) {
    sub_1902D8B58(v6);
  }
}

void sub_1904438FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (v27) {
    sub_1902D8B58(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_190443A98(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  uint64_t v1 = *(void *)(a1 + 48);
  long long v2 = *(_OWORD *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[2] = sub_190443B18;
  block[3] = &unk_1E568D410;
  uint64_t v6 = v1;
  long long v5 = v2;
  dispatch_async(v3, block);
}

id sub_190443B18(uint64_t a1, const char *a2)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const void **)(*(void *)(a1 + 32) + 24);
  if (v3)
  {
    _Block_release(v3);
  }
  else
  {
    uint64_t v12 = @"kCLConnectionMessageSubscribeKey";
    v13[0] = MEMORY[0x1E4F1CC38];
    uint64_t v11 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v13, &v12, 1);
    sub_190445684("kCLConnectionMessageMotionActivityUpdate", &v11, &v9);
    uint64_t v8 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v8) {
      sub_1902D8B58(v8);
    }
    if (v10) {
      sub_1902D8B58(v10);
    }
  }
  uint64_t v4 = _Block_copy(*(const void **)(a1 + 48));
  uint64_t v6 = *(void *)(a1 + 32);
  long long v5 = (id *)(a1 + 32);
  *(void *)(v6 + 24) = v4;
  id result = v5[1];
  *((void *)*v5 + 4) = result;
  return result;
}

void sub_190443C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a13) {
    sub_1902D8B58(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_190443CE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = *(NSObject **)(v1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_190443D54;
  block[3] = &unk_1E568D118;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_190443D54(uint64_t a1, const char *a2)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(a1 + 32) + 24))
  {
    uint64_t v7 = @"kCLConnectionMessageSubscribeKey";
    v8[0] = MEMORY[0x1E4F1CC28];
    uint64_t v6 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v8, &v7, 1);
    sub_190445684("kCLConnectionMessageMotionActivityUpdate", &v6, &v4);
    uint64_t v3 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v3) {
      sub_1902D8B58(v3);
    }
    _Block_release(*(const void **)(*(void *)(a1 + 32) + 24));
    *(void *)(*(void *)(a1 + 32) + 24) = 0;

    *(void *)(*(void *)(a1 + 32) + 32) = 0;
    if (v5) {
      sub_1902D8B58(v5);
    }
  }
}

void sub_190443E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a13) {
    sub_1902D8B58(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190444110(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_190444174(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

uint64_t sub_1904441D8(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = (void *)MEMORY[0x1E4F28C58];
  uint64_t v4 = *(void *)(a1 + 40);
  int v5 = objc_msgSend_intValue(*(void **)(a1 + 32), a2, a3);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(v3, v6, @"CMErrorDomain", v5, 0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, void, uint64_t))(v4 + 16);

  return v8(v4, 0, v7);
}

uint64_t sub_190444250(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0);
}

uint64_t sub_190444268(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 103, 0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t))(v2 + 16);

  return v4(v2, 0, v3);
}

void sub_1904443E4(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  uint64_t v1 = *(void *)(a1 + 48);
  long long v2 = *(_OWORD *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[2] = sub_190444464;
  block[3] = &unk_1E568D410;
  uint64_t v6 = v1;
  long long v5 = v2;
  dispatch_async(v3, block);
}

id sub_190444464(uint64_t a1, const char *a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const void **)(*(void *)(a1 + 32) + 24);
  if (v3)
  {
    _Block_release(v3);
  }
  else
  {
    uint64_t v13 = @"kCLConnectionMessageSubscribeKey";
    v14[0] = MEMORY[0x1E4F1CC38];
    uint64_t v12 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v14, &v13, 1);
    sub_1904457D0(&v10, &v12);
    uint64_t v4 = v11;
    uint64_t v9 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v9) {
      sub_1902D8B58(v9);
    }
    if (v4) {
      sub_1902D8B58(v4);
    }
  }
  long long v5 = _Block_copy(*(const void **)(a1 + 48));
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = (id *)(a1 + 32);
  *(void *)(v7 + 24) = v5;
  id result = v6[1];
  *((void *)*v6 + 4) = result;
  return result;
}

void sub_19044457C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  if (v10) {
    sub_1902D8B58(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_190444620(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = *(NSObject **)(v1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_190444694;
  block[3] = &unk_1E568D118;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_190444694(uint64_t a1, const char *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(a1 + 32) + 24))
  {
    uint64_t v8 = @"kCLConnectionMessageSubscribeKey";
    v9[0] = MEMORY[0x1E4F1CC28];
    uint64_t v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v9, &v8, 1);
    sub_1904457D0(&v5, &v7);
    uint64_t v3 = v6;
    uint64_t v4 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v4) {
      sub_1902D8B58(v4);
    }
    _Block_release(*(const void **)(*(void *)(a1 + 32) + 24));
    *(void *)(*(void *)(a1 + 32) + 24) = 0;

    *(void *)(*(void *)(a1 + 32) + 32) = 0;
    if (v3) {
      sub_1902D8B58(v3);
    }
  }
}

void sub_1904447A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  if (v10) {
    sub_1902D8B58(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_190444B48(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  uint64_t v1 = *(void *)(a1 + 48);
  long long v2 = *(_OWORD *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 16);
  block[2] = sub_190444BC8;
  block[3] = &unk_1E568D410;
  uint64_t v6 = v1;
  long long v5 = v2;
  dispatch_async(v3, block);
}

id sub_190444BC8(uint64_t a1, const char *a2)
{
  v14[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(const void **)(*(void *)(a1 + 32) + 24);
  if (v3)
  {
    _Block_release(v3);
  }
  else
  {
    uint64_t v13 = @"kCLConnectionMessageSubscribeKey";
    v14[0] = MEMORY[0x1E4F1CC38];
    uint64_t v12 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v14, &v13, 1);
    sub_190445898(&v10, &v12);
    uint64_t v4 = v11;
    uint64_t v9 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v9) {
      sub_1902D8B58(v9);
    }
    if (v4) {
      sub_1902D8B58(v4);
    }
  }
  long long v5 = _Block_copy(*(const void **)(a1 + 48));
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = (id *)(a1 + 32);
  *(void *)(v7 + 24) = v5;
  id result = v6[1];
  *((void *)*v6 + 4) = result;
  return result;
}

void sub_190444CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  if (v10) {
    sub_1902D8B58(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_190444FD4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v2 = *(NSObject **)(v1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_190445048;
  block[3] = &unk_1E568D118;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_190445048(uint64_t a1, const char *a2)
{
  v9[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(a1 + 32) + 24))
  {
    uint64_t v8 = @"kCLConnectionMessageSubscribeKey";
    v9[0] = MEMORY[0x1E4F1CC28];
    uint64_t v7 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], a2, (uint64_t)v9, &v8, 1);
    sub_190445898(&v5, &v7);
    uint64_t v3 = v6;
    uint64_t v4 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CLConnectionClient::sendMessage();
    if (v4) {
      sub_1902D8B58(v4);
    }
    _Block_release(*(const void **)(*(void *)(a1 + 32) + 24));
    *(void *)(*(void *)(a1 + 32) + 24) = 0;

    *(void *)(*(void *)(a1 + 32) + 32) = 0;
    if (v3) {
      sub_1902D8B58(v3);
    }
  }
}

void sub_190445154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_1902D8B58(a10);
  }
  if (v10) {
    sub_1902D8B58(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_190445338(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
LABEL_3:
    v4();
    return;
  }
  if (a2 && objc_msgSend_count(a2, a2, 0))
  {
    objc_msgSend_filterActivities_withAttribute_(*(void **)(a1 + 48), a2, (uint64_t)a2, *(void *)(a1 + 64));
    uint64_t v4 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    goto LABEL_3;
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], a2, @"CMErrorDomain", 107, 0);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 16))(v6, 0, v7);
  if (qword_1E929D7A0 != -1) {
    dispatch_once(&qword_1E929D7A0, &unk_1EDFD14A0);
  }
  uint64_t v8 = qword_1E929D7A8;
  if (os_log_type_enabled((os_log_t)qword_1E929D7A8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void *)(a1 + 40);
    v11[0] = 68289539;
    v11[1] = 0;
    __int16 v12 = 2082;
    uint64_t v13 = "";
    __int16 v14 = 2113;
    uint64_t v15 = v9;
    __int16 v16 = 2113;
    uint64_t v17 = v10;
    _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Query out-of-bounds of available data\", \"start\":%{private, location:escape_only}@, \"end\":%{private, location:escape_only}@}", (uint8_t *)v11, 0x26u);
  }
}

os_log_t sub_190445508()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Activity");
  qword_1E929D7A8 = (uint64_t)result;
  return result;
}

void *sub_190445538@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  os_log_t result = sub_19044559C(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_190445588(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19044559C(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_190445610((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_1904455FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_190445610(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC420](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_190445668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_190445684@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  os_log_t result = sub_1904456E8(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1904456D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1904456E8(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_19044575C((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_190445748(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_19044575C(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC420](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1904457B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1904457D0(void *a1, void *a2)
{
  uint64_t v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EDFD0DA0;
  sub_1902C3F54(__p, "kCLConnectionMessageMotionActivityPeriodicUpdate");
  MEMORY[0x192FCC420](v4 + 3, __p, *a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_190445868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_190445898(void *a1, void *a2)
{
  uint64_t v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *uint64_t v4 = &unk_1EDFD0DA0;
  sub_1902C3F54(__p, "MotionActivityLite/kCLConnectionMessageMotionActivityUpdate");
  MEMORY[0x192FCC420](v4 + 3, __p, *a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_190445930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void *sub_190445960(void *a1)
{
  *a1 = &unk_1EDFC9750;
  sub_1902DE0A4(a1);
  sub_1902DE03C(a1);
  sub_1904459B8(a1);
  return a1;
}

void *sub_1904459B8(void *result)
{
  if (result[7])
  {
    uint64_t v1 = result;
    uint64_t v2 = sub_190559E34();
    sub_1902CDE08(v2, 0, v1[7]);
    uint64_t v3 = v1[7];
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    v1[7] = 0;
    uint64_t v4 = sub_190559E34();
    sub_1902CDE08(v4, 1, v1[8]);
    os_log_t result = (void *)v1[8];
    if (result) {
      os_log_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    v1[8] = 0;
  }
  return result;
}

uint64_t sub_190445A68(uint64_t result)
{
  if (!*(void *)(result + 16)) {
    operator new();
  }
  return result;
}

void sub_190445B38(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_190445B5C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, a1);
}

void sub_190445B8C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 25))
  {
    uint64_t v2 = sub_190472B14();
    sub_190472B5C(v2, (uint64_t)sub_190445BDC, *(unsigned char *)(a1 + 24), a1);
    *(unsigned char *)(a1 + 25) = 1;
  }
}

void sub_190445BDC(_OWORD *a1, uint64_t a2)
{
  v5[0] = *a1;
  *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)((char *)a1 + 12);
  uint64_t v3 = sub_1902D6BD0();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_190445EF8;
  v4[3] = &unk_1E568D458;
  v4[4] = a2;
  sub_1902CE9BC(v3, (uint64_t)v4);
}

uint64_t sub_190445C68(uint64_t result)
{
  if (!*(void *)(result + 8)) {
    operator new();
  }
  return result;
}

void sub_190445D38(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_190445D5C(uint64_t result)
{
  if (!*(void *)(result + 56)) {
    operator new();
  }
  return result;
}

void sub_190445E94(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

uint64_t sub_190445EBC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, a1);
}

unsigned char *sub_190445EEC(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 72) = *result;
  return result;
}

void sub_190445EF8(uint64_t a1)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 52);
  *(_OWORD *)(v2 + 28) = v3;
  if (qword_1EB3BE878 != -1) {
    dispatch_once(&qword_1EB3BE878, &unk_1EDFD14C0);
  }
  uint64_t v4 = off_1EB3BE870;
  if (os_log_type_enabled((os_log_t)off_1EB3BE870, OS_LOG_TYPE_DEBUG))
  {
    double v5 = *(float *)(a1 + 40);
    double v6 = *(float *)(a1 + 44);
    double v7 = *(float *)(a1 + 48);
    double v8 = *(float *)(a1 + 52);
    double v9 = *(float *)(a1 + 56);
    double v10 = *(float *)(a1 + 60);
    int v11 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 136316930;
    uint64_t v36 = "GyroBias";
    __int16 v37 = 2048;
    double v38 = v5;
    __int16 v39 = 2048;
    double v40 = v6;
    __int16 v41 = 2048;
    double v42 = v7;
    __int16 v43 = 2048;
    double v44 = v8;
    __int16 v45 = 2048;
    double v46 = v9;
    __int16 v47 = 2048;
    double v48 = v10;
    __int16 v49 = 1024;
    int v50 = v11;
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEBUG, "Type,%s,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,variance.x,%20.20f,variance.y,%20.20f,variance.z,%20.20f,doingBiasEstimation,%d", buf, 0x4Eu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE878 != -1) {
      dispatch_once(&qword_1EB3BE878, &unk_1EDFD14C0);
    }
    double v27 = *(float *)(a1 + 40);
    double v28 = *(float *)(a1 + 44);
    double v29 = *(float *)(a1 + 48);
    double v30 = *(float *)(a1 + 52);
    double v31 = *(float *)(a1 + 56);
    double v32 = *(float *)(a1 + 60);
    int v33 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)uint64_t v54 = 136316930;
    *(void *)&v54[4] = "GyroBias";
    *(_WORD *)&v54[12] = 2048;
    *(double *)&v54[14] = v27;
    *(_WORD *)&v54[22] = 2048;
    *(double *)&v54[24] = v28;
    *(_WORD *)&v54[32] = 2048;
    *(double *)&v54[34] = v29;
    *(_WORD *)&v54[42] = 2048;
    double v55 = v30;
    __int16 v56 = 2048;
    double v57 = v31;
    __int16 v58 = 2048;
    double v59 = v32;
    __int16 v60 = 1024;
    int v61 = v33;
    int v34 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "void CLSensorFusionServiceAP::onBiasAndVariance(const CLMotionTypeGyroBiasAndVariance)_block_invoke", "CoreLocation: %s\n", v34);
    if (v34 != (char *)buf) {
      free(v34);
    }
  }
  if (*(unsigned char *)(v2 + 73))
  {
    *(void *)uint64_t v54 = &unk_1EDFCA7D8;
    *(void *)&v54[8] = CFAbsoluteTimeGetCurrent();
    *(_OWORD *)&v54[20] = *(_OWORD *)(a1 + 40);
    *(void *)&v54[36] = *(void *)(a1 + 56);
    LOBYTE(v55) = *(unsigned char *)(a1 + 64);
    uint64_t v12 = sub_190570220();
    sub_190571738(v12, (uint64_t)v54);
    sub_190395088(buf);
    sub_1903AE490((uint64_t)buf);
    v53 |= 1u;
    uint64_t v51 = *(void *)&v54[8];
    uint64_t v13 = v52;
    int v14 = *(_DWORD *)(a1 + 40);
    *(unsigned char *)(v52 + 36) |= 1u;
    *(_DWORD *)(v13 + 8) = v14;
    uint64_t v15 = v52;
    int v16 = *(_DWORD *)(a1 + 44);
    *(unsigned char *)(v52 + 36) |= 2u;
    *(_DWORD *)(v15 + 12) = v16;
    uint64_t v17 = v52;
    int v18 = *(_DWORD *)(a1 + 48);
    *(unsigned char *)(v52 + 36) |= 4u;
    *(_DWORD *)(v17 + 16) = v18;
    uint64_t v19 = v52;
    int v20 = *(_DWORD *)(a1 + 52);
    *(unsigned char *)(v52 + 36) |= 0x10u;
    *(_DWORD *)(v19 + 24) = v20;
    uint64_t v21 = v52;
    int v22 = *(_DWORD *)(a1 + 56);
    *(unsigned char *)(v52 + 36) |= 0x20u;
    *(_DWORD *)(v21 + 28) = v22;
    uint64_t v23 = v52;
    int v24 = *(_DWORD *)(a1 + 60);
    *(unsigned char *)(v52 + 36) |= 0x40u;
    *(_DWORD *)(v23 + 32) = v24;
    uint64_t v25 = v52;
    int v26 = *(unsigned __int8 *)(a1 + 64);
    *(unsigned char *)(v52 + 36) |= 8u;
    *(_DWORD *)(v25 + 20) = v26;
    sub_19039A590((PB::Base *)buf);
  }
  if (*(unsigned char *)(v2 + 25)) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 24))(v2, a1 + 40, a1 + 52);
  }
}

void sub_190446304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19039A590((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_19044632C(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_190446364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_190446378(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1904463B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_1904463C0(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_1904463F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

uint64_t sub_190447E04(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0x3200000000;
  *(void *)(a1 + 1216) = 0x3200000000;
  *(void *)(a1 + 2424) = 0x3200000000;
  *(void *)(a1 + 3632) = 0x9600000000;
  *(void *)(a1 + 4240) = 0x3200000000;
  *(void *)(a1 + 4448) = 0x3200000000;
  *(void *)(a1 + 4656) = 0x700000000;
  *(void *)(a1 + 4720) = 0x700000000;
  *(void *)(a1 + 4816) = 0x7FF8000000000000;
  *(int32x2_t *)(a1 + 4824) = vdup_n_s32(0x7FC00000u);
  *(void *)(a1 + 4832) = 2143289344;
  *(void *)(a1 + 4840) = 0;
  *(void *)(a1 + 4848) = 0x7FF8000000000000;
  *(void *)(a1 + 4856) = 0;
  *(_DWORD *)(a1 + 4864) = 0;
  *(void *)(a1 + 4872) = 0x7FF8000000000000;
  *(void *)(a1 + 4880) = 0;
  *(_DWORD *)(a1 + 4888) = 0;
  *(void *)(a1 + 4896) = 0;
  *(void *)(a1 + 4904) = 0x300000000;
  *(void *)(a1 + 4936) = 0x300000000;
  *(void *)(a1 + 4968) = 0;
  *(void *)(a1 + 4976) = 0x3F80000000000000;
  uint64_t v2 = (_OWORD *)(a1 + 4984);
  uint64_t v18 = a1 + 5040;
  uint64_t v17 = a1 + 5096;
  uint64_t v16 = a1 + 5152;
  uint64_t v15 = a1 + 5224;
  uint64_t v14 = a1 + 5296;
  uint64_t v13 = a1 + 5360;
  uint64_t v12 = a1 + 5376;
  uint64_t v3 = a1 + 5392;
  uint64_t v4 = a1 + 5448;
  uint64_t v5 = a1 + 5504;
  uint64_t v6 = a1 + 5560;
  uint64_t v7 = a1 + 5632;
  uint64_t v8 = a1 + 5704;
  uint64_t v9 = a1 + 5768;
  uint64_t v10 = a1 + 5784;
  *(_OWORD *)(a1 + 5928) = 0u;
  *(void *)(a1 + 5944) = 0x7FF8000000000000;
  *(void *)(a1 + 5952) = 0;
  __src[0] = xmmword_1906076C8;
  __src[1] = unk_1906076D8;
  __src[2] = xmmword_1906076E8;
  *(void *)&__src[3] = 0x3FE1532617C1BDA5;
  *((void *)&__src[6] + 1) = 0;
  *(_OWORD *)((char *)&__src[3] + 8) = xmmword_190607700;
  *(_OWORD *)((char *)&__src[4] + 8) = unk_190607710;
  *(_OWORD *)((char *)&__src[5] + 8) = xmmword_190607720;
  __src[8] = unk_190607748;
  __src[9] = xmmword_190607758;
  __src[7] = xmmword_190607738;
  *(void *)&__src[10] = 0;
  *((void *)&__src[14] + 1) = 0;
  *(_OWORD *)((char *)&__src[13] + 8) = unk_1906077A0;
  *(_OWORD *)((char *)&__src[12] + 8) = xmmword_190607790;
  *(_OWORD *)((char *)&__src[11] + 8) = unk_190607780;
  *(_OWORD *)((char *)&__src[10] + 8) = xmmword_190607770;
  *(void *)&__src[19] = 0;
  __src[17] = xmmword_1906077D8;
  __src[18] = unk_1906077E8;
  __src[15] = xmmword_1906077B8;
  __src[16] = unk_1906077C8;
  *(_OWORD *)((char *)&__src[21] + 8) = xmmword_190607820;
  *(_OWORD *)((char *)&__src[22] + 8) = unk_190607830;
  *(_OWORD *)((char *)&__src[19] + 8) = xmmword_190607800;
  *(_OWORD *)((char *)&__src[20] + 8) = unk_190607810;
  memcpy((void *)(a1 + 4984), __src, 0x178uLL);
  *(_OWORD *)(a1 + 5360) = xmmword_190607690;
  *(_OWORD *)(a1 + 5376) = xmmword_1906076A0;
  *(_OWORD *)(a1 + 5392) = xmmword_190607840;
  *(_OWORD *)(a1 + 5408) = unk_190607850;
  *(_OWORD *)(a1 + 5424) = xmmword_190607860;
  *(void *)(a1 + 5440) = 0x7FEFFFFFFFFFFFFFLL;
  v2[29] = xmmword_190607878;
  v2[30] = unk_190607888;
  v2[31] = xmmword_190607898;
  *(void *)(a1 + 5496) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 5552) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 5536) = xmmword_1906078D0;
  *(_OWORD *)(a1 + 5520) = unk_1906078C0;
  *(_OWORD *)(a1 + 5504) = xmmword_1906078B0;
  *(void *)(a1 + 5624) = 0x7FEFFFFFFFFFFFFFLL;
  v2[38] = xmmword_190607908;
  v2[39] = unk_190607918;
  v2[36] = xmmword_1906078E8;
  v2[37] = unk_1906078F8;
  *(_OWORD *)(a1 + 5632) = xmmword_1906078E8;
  *(void *)(a1 + 5696) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 5680) = unk_190607918;
  *(_OWORD *)(a1 + 5664) = xmmword_190607908;
  *(_OWORD *)(a1 + 5648) = unk_1906078F8;
  v2[47] = xmmword_190607950;
  v2[48] = unk_190607960;
  v2[45] = xmmword_190607930;
  v2[46] = unk_190607940;
  *(void *)(a1 + 5768) = 0x3F1A36E2EB1C432DLL;
  *(_OWORD *)(a1 + 5776) = xmmword_1906076B0;
  *(void *)(a1 + 5792) = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(a1 + 5800) = v2;
  *(void *)(a1 + 5808) = v18;
  *(void *)(a1 + 5816) = v17;
  *(void *)(a1 + 5824) = v16;
  *(void *)(a1 + 5832) = v15;
  *(void *)(a1 + 5840) = v14;
  *(void *)(a1 + 5848) = v13;
  *(void *)(a1 + 5856) = v12;
  *(void *)(a1 + 5864) = v3;
  *(void *)(a1 + 5872) = v4;
  *(void *)(a1 + 5880) = v5;
  *(void *)(a1 + 5888) = v6;
  *(void *)(a1 + 5896) = v7;
  *(void *)(a1 + 5904) = v8;
  *(void *)(a1 + 5912) = v9;
  *(void *)(a1 + 5920) = v10;
  return a1;
}

void sub_1904481A4(unsigned __int8 *a1)
{
  uint64_t v2 = (void (*)(void))*((void *)a1 + 741);
  if (v2 && *((void *)a1 + 742)) {
    v2(*a1);
  }
  uint64_t v3 = *((void *)a1 + 744);
  int v4 = *a1;
  if (v3 && v4 != a1[2])
  {
    sub_190459150(v3, v4 != 0);
    LOBYTE(v4) = *a1;
  }
  a1[2] = v4;
}

uint64_t sub_190448208(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
    }
    uint64_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const T &CMQueue<CMAccessoryStepDetector::AggAccelSample>::operator[](const size_t) const [T = CMAccessoryStepDetector::AggAccelSample]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

float sub_190448408(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2 >= 3)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
    }
    unint64_t v5 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 3;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
      }
      uint64_t v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T CMVector<float, 3>::operator[](const size_t) const [T = float, N = 3]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return *(float *)(a1 + 4 * a2);
}

BOOL sub_1904485E4(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 16) > *(float *)(a2 + 16);
}

unsigned __int16 *sub_1904485F8(unsigned __int16 *result, long long *a2)
{
  unint64_t v2 = *((unsigned int *)result + 1);
  unint64_t v3 = *result + (unint64_t)result[1];
  if (v3 < v2) {
    unint64_t v2 = 0;
  }
  unint64_t v4 = &result[12 * (v3 - v2)];
  long long v5 = *a2;
  *((void *)v4 + 3) = *((void *)a2 + 2);
  *(_OWORD *)(v4 + 4) = v5;
  unsigned int v6 = result[1];
  unint64_t v7 = *((unsigned int *)result + 1);
  if (v7 <= v6)
  {
    unint64_t v8 = *result + 1;
    if (v8 < v7) {
      LOWORD(v7) = 0;
    }
    *os_log_t result = v8 - v7;
  }
  else
  {
    result[1] = v6 + 1;
  }
  return result;
}

uint64_t sub_190448664(uint64_t result, _DWORD *a2, _DWORD *a3, double a4, double a5)
{
  *a2 = 0;
  *a3 = 0;
  if (*(_WORD *)(result + 10))
  {
    uint64_t v9 = result;
    unint64_t v10 = 0;
    uint64_t v11 = (unsigned __int16 *)(result + 8);
    double v12 = INFINITY;
    do
    {
      double v13 = vabdd_f64(a4, *(double *)sub_190448208(v11, v10));
      if (v13 < v12)
      {
        *a2 = v10;
        double v12 = v13;
      }
      os_log_t result = sub_190448208(v11, v10);
      if (vabdd_f64(*(double *)result, a5) <= 0.000001) {
        *a3 = v10;
      }
      ++v10;
    }
    while (v10 < *(unsigned __int16 *)(v9 + 10));
  }
  return result;
}

uint64_t sub_190448730(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
    }
    unint64_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const T &CMQueue<CMAccessoryStepDetector::VectorSample>::operator[](const size_t) const [T = CMAccessoryStepDetector::VectorSample]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

uint64_t sub_190448930(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
    }
    unint64_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const T &CMQueue<CMAccessoryStepDetector::FaceRotationRateSample>::operator[](const size_t) const [T = CMAccessoryStepDetector::FaceRotationRateSample]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[12 * (v4 - v5) + 4];
}

uint64_t sub_190448B30(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a2 >= 3)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
    }
    unint64_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v12 = a2;
      __int16 v13 = 2048;
      uint64_t v14 = 3;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
      }
      int v8 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T &CMMatrix<float, 3>::operator()(size_t, size_t) [T = float, M = 3, N = 3]", "CoreLocation: %s\n", v8);
      if (v8 != (char *)buf) {
        free(v8);
      }
    }
  }
  if (a3 >= 3)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
    }
    uint64_t v9 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v12 = a3;
      __int16 v13 = 2048;
      uint64_t v14 = 3;
      _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
      }
      unint64_t v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T &CMMatrix<float, 3>::operator()(size_t, size_t) [T = float, M = 3, N = 3]", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a1 + 4 * (3 * a3 + a2);
}

unsigned __int16 *sub_190448E90(unsigned __int16 *result, void *a2)
{
  uint64_t v2 = result[1];
  unint64_t v3 = *((unsigned int *)result + 1);
  uint64_t v4 = *result;
  if (v4 + v2 >= v3) {
    uint64_t v5 = *((unsigned int *)result + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  *(void *)&result[4 * (v4 + v2 - v5) + 4] = *a2;
  if (v3 <= v2)
  {
    if (v4 + 1 < v3) {
      LOWORD(v3) = 0;
    }
    *os_log_t result = v4 + 1 - v3;
  }
  else
  {
    result[1] = v2 + 1;
  }
  return result;
}

uint64_t sub_190448EE4(unsigned __int16 *a1, unint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*((unsigned int *)a1 + 1) <= a2)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
    }
    unint64_t v7 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v8 = *((_DWORD *)a1 + 1);
      *(_DWORD *)buf = 134218240;
      unint64_t v11 = a2;
      __int16 v12 = 1024;
      int v13 = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "Assertion failed: i < fCapacity, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 233,i,%zu,capacity,%u.", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
      }
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "const T &CMQueue<double>::operator[](const size_t) const [T = double]", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
  unint64_t v4 = *a1 + a2;
  unint64_t v5 = *((unsigned int *)a1 + 1);
  if (v4 < v5) {
    unint64_t v5 = 0;
  }
  return (uint64_t)&a1[4 * (v4 - v5) + 4];
}

void sub_1904490E0(char *a1)
{
  *((_DWORD *)a1 + 1164) = 0;
  *((_DWORD *)a1 + 1226) = 0;
  *((void *)a1 + 612) = 0x7FF8000000000000;
  *a1 = 0;
  uint64_t v2 = *((void *)a1 + 744);
  if (v2)
  {
    char v3 = a1[2];
    if (v3)
    {
      sub_190459150(v2, 0);
      char v3 = *a1;
    }
  }
  else
  {
    char v3 = 0;
  }
  a1[2] = v3;
}

double sub_19044913C(uint64_t a1, float32x2_t *a2, double a3)
{
  uint64_t v320 = *MEMORY[0x1E4F143B8];
  float v5 = a2[1].f32[1] - sub_1904CF514((float *)&a2[7]);
  float v7 = a2[2].f32[0] - v6;
  float v9 = a2[2].f32[1] - v8;
  __int32 v10 = a2[8].i32[1];
  v11.f32[0] = -a2[8].f32[0];
  *(float32x2_t *)buf = vneg_f32(a2[7]);
  *(_DWORD *)&buf[8] = v11.i32[0];
  *(_DWORD *)&unsigned char buf[12] = v10;
  sub_1902D9ACC((float32x4_t *)buf, v11);
  v12.f32[0] = sub_1904CF73C((float *)buf, v5, v7, v9);
  float v15 = v12.f32[0];
  float v16 = v13;
  float v17 = v14;
  uint64_t v18 = 0;
  float v19 = 0.0;
  do
  {
    float v19 = v19 + (float)(a2->f32[v18] * a2->f32[v18]);
    ++v18;
  }
  while (v18 != 3);
  int v20 = (_WORD *)(a1 + 3632);
  float v21 = sqrtf(v19);
  uint64_t v22 = *(unsigned __int16 *)(a1 + 3634);
  unint64_t v23 = *(unsigned int *)(a1 + 3636);
  uint64_t v24 = *(unsigned __int16 *)(a1 + 3632);
  if (v24 + v22 >= v23) {
    uint64_t v25 = *(unsigned int *)(a1 + 3636);
  }
  else {
    uint64_t v25 = 0;
  }
  *(float *)&v20[2 * (v24 + v22 - v25) + 4] = v21;
  if (v23 <= v22)
  {
    if (v24 + 1 < v23) {
      LOWORD(v23) = 0;
    }
    _WORD *v20 = v24 + 1 - v23;
  }
  else
  {
    *(_WORD *)(a1 + 3634) = v22 + 1;
  }
  int v26 = (_WORD *)(a1 + 1216);
  unint64_t v27 = *(unsigned int *)(a1 + 1220);
  unint64_t v28 = *(unsigned __int16 *)(a1 + 1216) + (unint64_t)*(unsigned __int16 *)(a1 + 1218);
  if (v28 >= v27) {
    uint64_t v29 = *(unsigned int *)(a1 + 1220);
  }
  else {
    uint64_t v29 = 0;
  }
  double v30 = (double *)&v26[12 * (v28 - v29)];
  v30[1] = a3;
  *((float *)v30 + 4) = -v12.f32[0];
  *((float *)v30 + 5) = -v13;
  *((float *)v30 + 6) = -v14;
  unsigned int v31 = *(unsigned __int16 *)(a1 + 1218);
  if (v27 <= v31)
  {
    unint64_t v32 = (unsigned __int16)*v26 + 1;
    if (v32 < v27) {
      LOWORD(v27) = 0;
    }
    _WORD *v26 = v32 - v27;
  }
  else
  {
    *(_WORD *)(a1 + 1218) = v31 + 1;
  }
  if (*(_WORD *)(a1 + 10))
  {
    unint64_t v33 = *(unsigned __int16 *)(a1 + 10) + (unint64_t)*(unsigned __int16 *)(a1 + 8) - 1;
    unint64_t v34 = *(unsigned int *)(a1 + 12);
    if (v33 < v34) {
      unint64_t v34 = 0;
    }
    id v35 = (float *)(a1 + 8 + 24 * (v33 - v34));
    float v36 = v35[4];
    float v37 = v35[5];
    float v38 = v35[6];
  }
  else
  {
    float v36 = 0.0;
    float v37 = 0.0;
    float v38 = 0.0;
  }
  __int32 v39 = a2[8].i32[1];
  v12.f32[0] = -a2[8].f32[0];
  *(float32x2_t *)buf = vneg_f32(a2[7]);
  *(_DWORD *)&buf[8] = v12.i32[0];
  *(_DWORD *)&unsigned char buf[12] = v39;
  sub_1902D9ACC((float32x4_t *)buf, v12);
  sub_1904CF73C((float *)buf, a2->f32[0], a2->f32[1], a2[1].f32[0]);
  double v42 = (_WORD *)(a1 + 4448);
  uint64_t v43 = *(unsigned __int16 *)(a1 + 4450);
  unint64_t v44 = *(unsigned int *)(a1 + 4452);
  uint64_t v45 = *(unsigned __int16 *)(a1 + 4448);
  if (v45 + v43 >= v44) {
    uint64_t v46 = *(unsigned int *)(a1 + 4452);
  }
  else {
    uint64_t v46 = 0;
  }
  *(_DWORD *)&v42[2 * (v45 + v43 - v46) + 4] = v41;
  if (v44 <= v43)
  {
    if (v45 + 1 < v44) {
      LOWORD(v44) = 0;
    }
    *double v42 = v45 + 1 - v44;
  }
  else
  {
    *(_WORD *)(a1 + 4450) = v43 + 1;
  }
  v40.f32[0] = -*(float *)(a1 + 4976);
  int v47 = *(_DWORD *)(a1 + 4980);
  *(float32x2_t *)buf = vneg_f32(*(float32x2_t *)(a1 + 4968));
  *(_DWORD *)&buf[8] = v40.i32[0];
  *(_DWORD *)&unsigned char buf[12] = v47;
  sub_1902D9ACC((float32x4_t *)buf, v40);
  float v48 = sub_1904CF73C((float *)buf, a2->f32[0], a2->f32[1], a2[1].f32[0]);
  uint64_t v51 = (unsigned __int16 *)(a1 + 8);
  uint64_t v52 = (_WORD *)(a1 + 2424);
  unint64_t v53 = *(unsigned int *)(a1 + 2428);
  unint64_t v54 = *(unsigned __int16 *)(a1 + 2424) + (unint64_t)*(unsigned __int16 *)(a1 + 2426);
  if (v54 >= v53) {
    uint64_t v55 = *(unsigned int *)(a1 + 2428);
  }
  else {
    uint64_t v55 = 0;
  }
  unint64_t v56 = a1 + 24 * (v54 - v55);
  *(double *)(v56 + 2432) = a3;
  *(float *)(v56 + 2440) = v48;
  *(_DWORD *)(v56 + 2444) = v49;
  *(_DWORD *)(v56 + 2448) = v50;
  unsigned int v57 = *(unsigned __int16 *)(a1 + 2426);
  if (v53 <= v57)
  {
    unint64_t v58 = (unsigned __int16)*v52 + 1;
    if (v58 < v53) {
      LOWORD(v53) = 0;
    }
    *uint64_t v52 = v58 - v53;
  }
  else
  {
    *(_WORD *)(a1 + 2426) = v57 + 1;
  }
  *(double *)&long long v275 = a3;
  *((float *)&v275 + 2) = v36 - v15;
  *((float *)&v275 + 3) = v37 - v16;
  float v276 = v38 - v17;
  sub_1904485F8((unsigned __int16 *)(a1 + 8), &v275);
  int v59 = *(_DWORD *)(a1 + 4836);
  if (v59) {
    BOOL v60 = v59 == 2 && *(_DWORD *)(a1 + 4844) == 0;
  }
  else {
    BOOL v60 = 1;
  }
  *(unsigned char *)(a1 + 3) = v60;
  unint64_t v61 = *(unsigned __int16 *)(a1 + 8) + (unint64_t)*(unsigned __int16 *)(a1 + 10) - 1;
  unint64_t v62 = *(unsigned int *)(a1 + 12);
  if (v61 >= v62) {
    uint64_t v63 = *(unsigned int *)(a1 + 12);
  }
  else {
    uint64_t v63 = 0;
  }
  unint64_t v64 = (float *)(a1 + 8 + 24 * (v61 - v63));
  float v65 = vabds_f32(v64[6], *(float *)(a1 + 4832));
  double v66 = sqrtf((float)(v64[5] * v64[5]) + (float)(v64[4] * v64[4]))
      - sqrtf((float)(*(float *)(a1 + 4828) * *(float *)(a1 + 4828))+ (float)(*(float *)(a1 + 4824) * *(float *)(a1 + 4824)));
  if (v66 < 0.0) {
    double v66 = -v66;
  }
  if (v65 <= 0.125 || v66 < 0.0)
  {
    unint64_t v90 = *(unsigned __int16 *)(a1 + 4656) + (unint64_t)*(unsigned __int16 *)(a1 + 4658) - 1;
    unint64_t v91 = *(unsigned int *)(a1 + 4660);
    if (v90 < v91) {
      unint64_t v91 = 0;
    }
    if (*(double *)(a1 + 4656 + 8 * (v90 - v91) + 8) + 5.0 <= a3)
    {
      *(unsigned char *)a1 = 0;
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
      }
      int v92 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1902AF000, v92, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] No spatial sample for 5s. Set detectedSteps = false", buf, 2u);
      }
      int v93 = sub_1902D8400(115, 2);
      double v94 = a3;
      if (v93)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
        }
        *(_WORD *)uint64_t v300 = 0;
        BOOL v241 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 2, "CMAccessoryStepDetector::Impulse CMAccessoryStepDetector::feedImuData(const CMRelDM::IMUData *const, const double)", "CoreLocation: %s\n", v241);
        if (v241 != buf) {
          free(v241);
        }
        double v94 = a3;
      }
      if (*(double *)(a1 + 5944) + 2.5 < v94)
      {
        sub_1904481A4((unsigned __int8 *)a1);
        *(double *)(a1 + 5944) = a3;
      }
    }
  }
  else
  {
    uint64_t v67 = a1 + 16;
    if (v61 < v62) {
      unint64_t v62 = 0;
    }
    unint64_t v68 = v67 + 24 * (v61 - v62);
    uint64_t v69 = *(void *)v68;
    *(void *)(a1 + 4824) = *(void *)(v68 + 8);
    *(_DWORD *)(a1 + 4832) = *(_DWORD *)(v68 + 16);
    *(void *)(a1 + 4816) = v69;
    sub_190448E90((unsigned __int16 *)(a1 + 4656), (void *)(a1 + 4816));
    sub_19042FFA8((unsigned __int16 *)(a1 + 4720), a1 + 4824);
    if (*(_DWORD *)(a1 + 4660) == *(unsigned __int16 *)(a1 + 4658))
    {
      float v70 = *(float *)(sub_19043049C((unsigned __int16 *)(a1 + 4720), 0) + 8);
      float v71 = *(float *)(sub_19043049C((unsigned __int16 *)(a1 + 4720), 3uLL) + 8);
      LODWORD(v72) = *(_DWORD *)(sub_19043049C((unsigned __int16 *)(a1 + 4720), 3uLL) + 8);
      float v73 = *(float *)(sub_19043049C((unsigned __int16 *)(a1 + 4720), 6uLL) + 8);
      unint64_t v74 = (double *)sub_190448EE4((unsigned __int16 *)(a1 + 4656), 0);
      int v272 = (unsigned __int16 *)(a1 + 8);
      if (*(_WORD *)(a1 + 10))
      {
        unint64_t v75 = 0;
        float v76 = v70 - v71;
        float v77 = *(float *)&v72 - v73;
        double v72 = *v74;
        while (*(double *)sub_190448208((unsigned __int16 *)(a1 + 8), v75) < v72)
        {
          if (++v75 >= *(unsigned __int16 *)(a1 + 10)) {
            goto LABEL_59;
          }
        }
        if ((v75 & 0x80000000) == 0 && v75 < *(unsigned __int16 *)(a1 + 1218))
        {
          BOOL v81 = v77 < 0.0 && v76 > 0.0;
          if (v81)
          {
            unint64_t v104 = *(unsigned __int16 *)(a1 + 10);
            if (!*(_WORD *)(a1 + 10))
            {
              if (qword_1EB3BE888 != -1) {
                dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
              }
              char v246 = off_1EB3BE880;
              if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1902AF000, v246, OS_LOG_TYPE_FAULT, "Assertion failed: n > 0, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/CMQueue.h, line 179,.", buf, 2u);
              }
              uint64_t v51 = (unsigned __int16 *)(a1 + 8);
              if (sub_1902D8400(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1EB3BE888 != -1) {
                  dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
                }
                *(_WORD *)uint64_t v300 = 0;
                double v247 = (char *)_os_log_send_and_compose_impl();
                sub_1902D398C("Generic", 1, 0, 0, "T CMQueue<CMAccessoryStepDetector::AggAccelSample>::getComparison(int (*)(const T, const T), size_t) const [T = CMAccessoryStepDetector::AggAccelSample]", "CoreLocation: %s\n", v247);
                if (v247 != buf) {
                  free(v247);
                }
                uint64_t v51 = (unsigned __int16 *)(a1 + 8);
              }
            }
            uint64_t v105 = sub_190448208(v51, v75);
            double v82 = *(double *)v105;
            int v83 = *(_DWORD *)(v105 + 8);
            int v84 = *(_DWORD *)(v105 + 12);
            float v80 = *(float *)(v105 + 16);
            if (v75 < v104)
            {
              unint64_t v106 = v75;
              double v107 = (unsigned __int16 *)(a1 + 8);
              do
              {
                uint64_t v108 = sub_190448208(v107, v106);
                if (*(float *)(v108 + 16) < v80)
                {
                  int v83 = *(_DWORD *)(v108 + 8);
                  int v84 = *(_DWORD *)(v108 + 12);
                  float v80 = *(float *)(v108 + 16);
                  double v82 = *(double *)v108;
                }
                ++v106;
                double v107 = (unsigned __int16 *)(a1 + 8);
              }
              while (v104 != v106);
            }
            if (qword_1E929D8D8 != -1) {
              dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
            }
            float v109 = qword_1E929D8E0;
            if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134218496;
              *(double *)&uint8_t buf[4] = a3;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(double *)&buf[14] = v82;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(double *)&buf[24] = v80;
              _os_log_impl(&dword_1902AF000, v109, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] downInflectionDetected,time,%f,minTime,%f,minAggAccel,%f", buf, 0x20u);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929D8D8 != -1) {
                dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
              }
              *(_DWORD *)uint64_t v300 = 134218496;
              *(double *)&v300[4] = a3;
              *(_WORD *)&v300[12] = 2048;
              *(double *)&v300[14] = v82;
              __int16 v301 = 2048;
              double v302 = v80;
              uint64_t v248 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "void CMAccessoryStepDetector::detectInflection(double, BOOL &, AggAccelSample &, BOOL &, AggAccelSample &) const", "CoreLocation: %s\n", v248);
              if (v248 != buf) {
                free(v248);
              }
            }
            BOOL v81 = 1;
          }
          else
          {
            int v84 = 0;
            double v82 = NAN;
            int v83 = 0;
            float v80 = 0.0;
          }
          if (v76 < 0.0 && v77 > 0.0)
          {
            if (*(_WORD *)(a1 + 10) && v75 < *(unsigned __int16 *)(a1 + 10))
            {
              BOOL v125 = v81;
              *(void *)buf = 0x3200000000;
              do
              {
                for (uint64_t i = 0; i != 72; i += 24)
                {
                  double v127 = &v300[i];
                  *(void *)double v127 = 0x7FF8000000000000;
                  *((void *)v127 + 1) = 0;
                  *((_DWORD *)v127 + 4) = 0;
                }
                if (v75) {
                  unint64_t v128 = (v75 - 1);
                }
                else {
                  unint64_t v128 = 0;
                }
                *(_DWORD *)&v300[16] = *(_DWORD *)(sub_190448208(v272, v128) + 16);
                *(void *)uint64_t v300 = *(void *)sub_190448208(v272, v128);
                *(_DWORD *)&v304[6] = *(_DWORD *)(sub_190448208(v272, v75) + 16);
                double v302 = *(double *)sub_190448208(v272, v75);
                unint64_t v129 = v75 + 1;
                unint64_t v130 = *(unsigned __int16 *)(a1 + 10);
                if (v75 + 1 >= v130)
                {
                  unint64_t v132 = v130 + *(unsigned __int16 *)(a1 + 8) - 1;
                  unint64_t v133 = *(unsigned int *)(a1 + 12);
                  if (v132 < v133) {
                    unint64_t v133 = 0;
                  }
                  uint64_t v131 = v67 + 24 * (v132 - v133);
                  LODWORD(v307) = *(_DWORD *)(v131 + 16);
                }
                else
                {
                  LODWORD(v307) = *(_DWORD *)(sub_190448208(v272, v75 + 1) + 16);
                  uint64_t v131 = sub_190448208(v272, v75 + 1);
                }
                *(void *)&v305[4] = *(void *)v131;
                *(void *)double v281 = sub_1904485E4;
                sub_19044B814((unint64_t)v300, (unint64_t)&v308, (uint64_t (**)(long long *, long long *))v281, 2, 1);
                double v302 = *(double *)sub_190448208(v272, v75);
                sub_1904485F8((unsigned __int16 *)buf, (long long *)&v302);
                ++v75;
              }
              while (v129 < *(unsigned __int16 *)(a1 + 10));
              unint64_t v134 = *(unsigned __int16 *)&buf[2] - 1;
              if (v134 < 2)
              {
                int v137 = 1;
              }
              else
              {
                unint64_t v135 = 1;
                float v136 = -INFINITY;
                int v137 = 1;
                do
                {
                  if (v136 <= *(float *)(sub_190448208((unsigned __int16 *)buf, v135) + 16))
                  {
                    float v136 = *(float *)(sub_190448208((unsigned __int16 *)buf, v135) + 16);
                    int v137 = v135;
                  }
                  ++v135;
                  unint64_t v134 = *(unsigned __int16 *)&buf[2] - 1;
                }
                while (v134 > v135);
              }
              if (v134 >= v137 + 1) {
                unint64_t v192 = v137 + 1;
              }
              else {
                unint64_t v192 = v134;
              }
              uint64_t v193 = sub_190448208((unsigned __int16 *)buf, v192);
              double v72 = *(double *)v193;
              uint64_t v87 = *(void *)(v193 + 8);
              float v190 = *(float *)(v193 + 16);
            }
            else
            {
              BOOL v125 = v81;
              if (qword_1E929D8D8 != -1) {
                dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
              }
              uint64_t v188 = qword_1E929D8E0;
              if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
              {
                uint64_t v189 = *(unsigned __int16 *)(a1 + 10);
                *(_DWORD *)buf = 134349312;
                *(void *)&uint8_t buf[4] = v189;
                *(_WORD *)&unsigned char buf[12] = 1026;
                *(_DWORD *)&buf[14] = v75;
                _os_log_impl(&dword_1902AF000, v188, OS_LOG_TYPE_ERROR, "[AccessoryStepDetector] Error: queue size: %{public}zu start: %{public}d", buf, 0x12u);
              }
              uint64_t v87 = 0;
              if (sub_1902D8400(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929D8D8 != -1) {
                  dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
                }
                uint64_t v253 = *(unsigned __int16 *)(a1 + 10);
                *(_DWORD *)uint64_t v300 = 134349312;
                *(void *)&v300[4] = v253;
                *(_WORD *)&v300[12] = 1026;
                *(_DWORD *)&v300[14] = v75;
                double v254 = (char *)_os_log_send_and_compose_impl();
                sub_1902D398C("Generic", 1, 0, 0, "CMAccessoryStepDetector::AggAccelSample CMAccessoryStepDetector::calculateMaxFilteredMedianValue(const CMQueue<CMAccessoryStepDetector::AggAccelSample> &, const int) const", "CoreLocation: %s\n", v254);
                if (v254 != buf) {
                  free(v254);
                }
              }
              float v190 = 0.0;
              double v72 = NAN;
            }
            if (qword_1E929D8D8 != -1) {
              dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
            }
            float v88 = v190;
            uint64_t v194 = qword_1E929D8E0;
            if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v195 = *(unsigned __int16 *)(a1 + 10);
              *(_DWORD *)buf = 134218752;
              *(double *)&uint8_t buf[4] = a3;
              *(_WORD *)&unsigned char buf[12] = 2048;
              *(double *)&buf[14] = v88;
              *(_WORD *)&unsigned char buf[22] = 2048;
              *(double *)&buf[24] = v72;
              *(_WORD *)&buf[32] = 2048;
              *(void *)&buf[34] = v195;
              _os_log_impl(&dword_1902AF000, v194, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] upInflectionDetected,time,%f,maxMedianValue,%f,maxMedianTime,%f,bufSize,%zu", buf, 0x2Au);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929D8D8 != -1) {
                dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
              }
              uint64_t v249 = *(unsigned __int16 *)(a1 + 10);
              *(_DWORD *)uint64_t v300 = 134218752;
              *(double *)&v300[4] = a3;
              *(_WORD *)&v300[12] = 2048;
              *(double *)&v300[14] = v88;
              __int16 v301 = 2048;
              double v302 = v72;
              __int16 v303 = 2048;
              *(void *)uint64_t v304 = v249;
              double v250 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "void CMAccessoryStepDetector::detectInflection(double, BOOL &, AggAccelSample &, BOOL &, AggAccelSample &) const", "CoreLocation: %s\n", v250);
              if (v250 != buf) {
                free(v250);
              }
            }
            int v85 = *(_DWORD *)(a1 + 4836);
            char v86 = 1;
            double v89 = v72;
            BOOL v81 = v125;
            goto LABEL_68;
          }
LABEL_66:
          int v85 = *(_DWORD *)(a1 + 4836);
          if (!v81)
          {
            *(_DWORD *)(a1 + 4840) = v85;
            double v95 = a3;
            if (v85)
            {
              uint64_t v96 = *(unsigned __int16 *)(a1 + 4938);
              if (*(_WORD *)(a1 + 4938))
              {
                unint64_t v97 = v96 + *(unsigned __int16 *)(a1 + 4936) - 1;
                unint64_t v98 = *(unsigned int *)(a1 + 4940);
                if (v97 < v98) {
                  unint64_t v98 = 0;
                }
                double v99 = *(double *)(a1 + 4936 + 8 * (v97 - v98) + 8);
                if (*(_WORD *)(a1 + 4906))
                {
                  unint64_t v100 = *(unsigned __int16 *)(a1 + 4906) + (unint64_t)*(unsigned __int16 *)(a1 + 4904) - 1;
                  unint64_t v101 = *(unsigned int *)(a1 + 4908);
                  if (v100 < v101) {
                    unint64_t v101 = 0;
                  }
                  uint64_t v102 = a1 + 4904 + 8 * (v100 - v101);
                  if (v99 < *(double *)(v102 + 8)) {
                    double v99 = *(double *)(v102 + 8);
                  }
                }
                if (a3 - v99 > 1.5)
                {
                  if (v85 == 2) {
                    *(_WORD *)(a1 + 4938) = v96 - 1;
                  }
                  *(_DWORD *)(a1 + 4836) = 0;
                  *(_DWORD *)(a1 + 4844) = v85;
                  *(unsigned char *)a1 = 0;
                  sub_1904481A4((unsigned __int8 *)a1);
                  double v95 = a3;
                  *(double *)(a1 + 5944) = a3;
                }
              }
            }
            if (*(double *)(a1 + 5944) + 2.5 < v95 && *(unsigned char *)a1 == 0)
            {
              sub_1904481A4((unsigned __int8 *)a1);
              *(double *)(a1 + 5944) = a3;
            }
            goto LABEL_282;
          }
          char v86 = 0;
          uint64_t v87 = 0;
          float v88 = 0.0;
          double v89 = NAN;
LABEL_68:
          if (v85 != 2)
          {
            if (v85 == 1)
            {
              if ((v86 & 1) == 0 && v82 > *(double *)(a1 + 4848) && v82 - *(double *)(a1 + 4872) > 0.25)
              {
                *(_DWORD *)(a1 + 4836) = 2;
                *(_DWORD *)(a1 + 4844) = 1;
                *(double *)(a1 + 4872) = v82;
                *(_DWORD *)(a1 + 4880) = v83;
                *(_DWORD *)(a1 + 4884) = v84;
                *(float *)(a1 + 4888) = v80;
                sub_190448E90((unsigned __int16 *)(a1 + 4936), (void *)(a1 + 4872));
                goto LABEL_130;
              }
            }
            else
            {
              if (v85) {
                __assert_rtn("updateFSM", "CMAccessoryStepDetector.m", 722, "false");
              }
              if ((v86 & 1) == 0)
              {
                *(_DWORD *)(a1 + 4836) = 2;
                *(_DWORD *)(a1 + 4844) = 0;
                *(double *)(a1 + 4872) = v82;
                *(_DWORD *)(a1 + 4880) = v83;
                *(_DWORD *)(a1 + 4884) = v84;
                *(float *)(a1 + 4888) = v80;
                sub_190448E90((unsigned __int16 *)(a1 + 4936), (void *)(a1 + 4872));
LABEL_130:
                if (qword_1E929D8D8 != -1) {
                  dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
                }
                unint64_t v110 = qword_1E929D8E0;
                if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134217984;
                  *(double *)&uint8_t buf[4] = v82;
                  _os_log_impl(&dword_1902AF000, v110, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] startImpulse,time,%f", buf, 0xCu);
                }
                if (sub_1902D8400(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929D8D8 != -1) {
                    dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
                  }
                  *(_DWORD *)uint64_t v300 = 134217984;
                  *(double *)&v300[4] = v82;
                  int v244 = (char *)_os_log_send_and_compose_impl();
                  sub_1902D398C("Generic", 1, 0, 2, "CMAccessoryStepDetector::Impulse CMAccessoryStepDetector::feedImuData(const CMRelDM::IMUData *const, const double)", "CoreLocation: %s\n", v244);
                  if (v244 != buf) {
                    free(v244);
                  }
                }
                goto LABEL_283;
              }
            }
LABEL_282:
            double v82 = NAN;
LABEL_283:
            *(_WORD *)a1 = 0;
            return v82;
          }
          if (v81)
          {
            if (vabdd_f64(*(double *)(a1 + 4872), v82) > 0.000001)
            {
              *(double *)(a1 + 4872) = v82;
              *(_DWORD *)(a1 + 4880) = v83;
              *(_DWORD *)(a1 + 4884) = v84;
              *(float *)(a1 + 4888) = v80;
              if (*(_WORD *)(a1 + 4938)) {
                --*(_WORD *)(a1 + 4938);
              }
              sub_190448E90((unsigned __int16 *)(a1 + 4936), (void *)(a1 + 4872));
              goto LABEL_130;
            }
            goto LABEL_282;
          }
          float v261 = v88;
          uint64_t v256 = v87;
          *(unsigned char *)(a1 + 1) = 1;
          if (!*(_WORD *)(a1 + 4906) || *(unsigned char *)(a1 + 3)) {
            goto LABEL_141;
          }
          unint64_t v111 = *(unsigned __int16 *)(a1 + 4906) + (unint64_t)*(unsigned __int16 *)(a1 + 4904) - 1;
          unint64_t v112 = *(unsigned int *)(a1 + 4908);
          if (v111 < v112) {
            unint64_t v112 = 0;
          }
          double v113 = *(double *)(a1 + 4904 + 8 * (v111 - v112) + 8);
          if (v89 - v113 > 1.0) {
LABEL_141:
          }
            double v113 = v89 + -1.0;
          double v262 = v89;
          double v258 = v89 - *(double *)(a1 + 4872);
          double v259 = v89 - *(double *)(a1 + 4848);
          *(double *)double v281 = v259;
          *(double *)&v281[8] = v258;
          v277[0] = 0.0;
          LODWORD(v278) = 0;
          float v114 = *(float *)(a1 + 4888);
          double v115 = (double *)sub_190448208(v272, *(unsigned __int16 *)(a1 + 10) - 1);
          double v116 = *(double *)(a1 + 4872);
          if (*v115 > v116)
          {
            sub_190448664(a1, v277, &v278, v116, 0.0);
            float v114 = *(float *)(sub_190448208(v272, SLODWORD(v277[0])) + 16);
          }
          uint64_t v117 = (double *)sub_190448208(v272, *(unsigned __int16 *)(a1 + 10) - 1);
          double v118 = v262;
          float v119 = v88;
          if (*v117 > v262)
          {
            v277[0] = 0.0;
            sub_190448664(a1, v277, &v278, v262, 0.0);
            float v119 = *(float *)(sub_190448208(v272, SLODWORD(v277[0])) + 16);
            double v118 = v262;
          }
          double v257 = v119 - v114;
          *(double *)&v281[16] = v257;
          *(_DWORD *)buf = 0;
          *(_DWORD *)uint64_t v300 = 0;
          sub_190448664(a1, buf, v300, v113, v118);
          if (*(int *)buf <= 1) {
            uint64_t v120 = 1;
          }
          else {
            uint64_t v120 = *(unsigned int *)buf;
          }
          unint64_t v121 = (v120 - 1);
          int v122 = *(_DWORD *)v300;
          int v264 = *(_DWORD *)v300;
          int v260 = v120;
          if ((int)v121 <= *(int *)v300)
          {
            unint64_t v138 = v120 - 1;
            uint64_t v139 = *(unsigned int *)v300 + 1;
            float32x2_t v140 = 0;
            float v141 = 0.0;
            float32x2_t v142 = (float32x2_t)vdup_n_s32(0x411CE80Au);
            float32x2_t v124 = 0;
            float32x2_t v143 = 0;
            do
            {
              double v144 = 0.02;
              if (v138)
              {
                double v145 = *(double *)sub_190448730((unsigned __int16 *)(a1 + 1216), v138);
                double v144 = v145 - *(double *)sub_190448730((unsigned __int16 *)(a1 + 1216), v138 - 1);
              }
              uint64_t v146 = sub_190448930((unsigned __int16 *)(a1 + 2424), v138);
              v147.i32[0] = *(_DWORD *)(v146 + 16);
              float v148 = v144;
              v147.i32[1] = *(_DWORD *)(v146 + 8);
              float32x2_t v265 = v147;
              float v269 = v148;
              LODWORD(v72) = *(_DWORD *)sub_190431610((unsigned __int16 *)(a1 + 4448), v138);
              float32x2_t v149 = *(float32x2_t *)(sub_190448730((unsigned __int16 *)(a1 + 1216), v138) + 8);
              uint64_t v150 = (float32x2_t *)sub_190448730((unsigned __int16 *)(a1 + 1216), v138);
              float32x2_t v140 = vadd_f32(v140, vmul_n_f32(v265, v269));
              float v141 = v141 + *(float *)&v72 * v144;
              float32x2_t v151 = vmul_n_f32(v143, v269);
              float32x2_t v143 = vadd_f32(v143, vmul_n_f32(vmul_f32(v149, v142), v269));
              float32x2_t v124 = vadd_f32(v124, vadd_f32(v151, vmul_n_f32(vmul_n_f32(vmul_f32(vmul_f32(v150[1], (float32x2_t)0x3F0000003F000000), v142), v269), v269)));
              ++v138;
            }
            while (v139 != v138);
            float32x2_t v123 = vmul_f32(v140, (float32x2_t)vdup_n_s32(0x42652EE1u));
            double v268 = (float)(v141 * 57.296);
            int v122 = v264;
          }
          else
          {
            float32x2_t v123 = 0;
            double v268 = 0.0;
            float32x2_t v124 = 0;
          }
          double v270 = *(double *)sub_190448730((unsigned __int16 *)(a1 + 1216), v122);
          double v152 = *(double *)sub_190448730((unsigned __int16 *)(a1 + 1216), v121);
          float64x2_t v263 = vcvtq_f64_f32(vabs_f32(v123));
          *(float64x2_t *)&v281[24] = v263;
          double v266 = sqrtf(vaddv_f32(vmul_f32(v124, v124)));
          *(double *)&v281[40] = v266;
          buf[0] = 1;
          *(void *)&buf[20] = 0;
          *(void *)&unsigned char buf[12] = 0;
          *(void *)&buf[28] = 0x400000000;
          unsigned int v153 = *(unsigned __int16 *)(a1 + 1218);
          float v154 = 1.0;
          if (*(_DWORD *)(a1 + 1220) == v153)
          {
            float v154 = 0.0;
            if (v153 >= 2)
            {
              unint64_t v155 = 1;
              do
              {
                *(_DWORD *)uint64_t v300 = 0;
                LODWORD(v72) = *(_DWORD *)(sub_190448730((unsigned __int16 *)(a1 + 1216), v155) + 16);
                unint64_t v156 = v155 - 1;
                *(float *)uint64_t v300 = *(float *)&v72 - *(float *)(sub_190448730((unsigned __int16 *)(a1 + 1216), v156) + 16);
                sub_19042D76C((uint64_t)buf, (float *)v300);
                if (buf[0]) {
                  sub_190430068((uint64_t)buf);
                }
                float v157 = *(float *)&buf[8];
                if (*(float *)&buf[8] < 0.0) {
                  float v157 = 0.0;
                }
                if (v157 <= 0.003) {
                  float v158 = 0.0;
                }
                else {
                  float v158 = v157 + -0.003;
                }
                float v154 = v154 + v158;
                unint64_t v155 = v156 + 2;
              }
              while (v155 < *(unsigned __int16 *)(a1 + 1218));
            }
          }
          uint64_t v159 = *(unsigned __int16 *)(a1 + 3634);
          float v160 = 0.0;
          int v161 = v264;
          if (*(_DWORD *)(a1 + 3636) == v159 && (unint64_t)(v159 - 17) <= 0xFFFFFFFFFFFFFFF6)
          {
            uint64_t v162 = 0;
            unint64_t v163 = 8;
            uint64_t v164 = 9;
            do
            {
              float v165 = *(float *)sub_190431610((unsigned __int16 *)(a1 + 3632), v163);
              unint64_t v166 = v164;
              uint64_t v167 = 7;
              while (1)
              {
                float v168 = 0.0;
                if (v165 < *(float *)sub_190431610((unsigned __int16 *)(a1 + 3632), v162 + v167)
                  || v165 < *(float *)sub_190431610((unsigned __int16 *)(a1 + 3632), v166))
                {
                  break;
                }
                --v167;
                ++v166;
                if (v167 == 3)
                {
                  int v169 = 0;
                  int v170 = 0;
                  float v171 = v165 + -0.5;
                  unint64_t v172 = v164;
                  uint64_t v173 = 7;
                  while (1)
                  {
                    v170 |= v171 > *(float *)sub_190431610((unsigned __int16 *)(a1 + 3632), v162 + v173);
                    v169 |= v171 > *(float *)sub_190431610((unsigned __int16 *)(a1 + 3632), v172);
                    if (v170 & v169) {
                      break;
                    }
                    --v173;
                    ++v172;
                    if (v173 == -1) {
                      goto LABEL_202;
                    }
                  }
                  float v168 = v165;
                  break;
                }
              }
LABEL_202:
              int v161 = v264;
              float v160 = v160 + v168;
              ++v163;
              ++v164;
              ++v162;
            }
            while (v163 < (unint64_t)*(unsigned __int16 *)(a1 + 3634) - 8);
          }
          uint64_t v174 = 0;
          double v175 = (double)(v161 - v260 + 2) / (v270 - v152);
          float v176 = -1.0;
          if (v154 < 1.0) {
            float v176 = v160;
          }
          double v177 = v154;
          double v178 = v176;
          *(double *)&long long v282 = v154;
          *((double *)&v282 + 1) = v176;
          double v179 = 1.0;
          do
          {
            LOBYTE(v180) = 0;
            while (1)
            {
              uint64_t v180 = v180;
              if (*(double *)(*(void *)(a1 + 8 * v174 + 5864) + 8 * v180) > *(double *)&v281[8 * v174]) {
                break;
              }
              LOBYTE(v180) = v180 + 1;
              if (dword_190607970[v174] <= (int)v180)
              {
                uint64_t v180 = v180;
                break;
              }
            }
            double v179 = v179 * *(double *)(*(void *)(a1 + 8 * v174++ + 5800) + 8 * v180);
          }
          while (v174 != 8);
          if (qword_1E929D8D8 != -1) {
            dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
          }
          unint64_t v181 = qword_1E929D8E0;
          if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134221056;
            *(double *)&uint8_t buf[4] = a3;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(double *)&buf[14] = v179;
            *(_WORD *)&unsigned char buf[22] = 2048;
            *(double *)&buf[24] = v259;
            *(_WORD *)&buf[32] = 2048;
            *(double *)&buf[34] = v258;
            __int16 v284 = 2048;
            *(double *)int v285 = v257;
            *(_WORD *)&v285[8] = 2048;
            *(float64_t *)&v285[10] = v263.f64[0];
            __int16 v286 = 2048;
            float64_t v287 = v263.f64[1];
            __int16 v288 = 2048;
            double v289 = v266;
            __int16 v290 = 2048;
            double v291 = v268;
            __int16 v292 = 2048;
            double v293 = a3;
            __int16 v294 = 2048;
            double v295 = v175;
            __int16 v296 = 2048;
            double v297 = v177;
            __int16 v298 = 2048;
            double v299 = v178;
            _os_log_impl(&dword_1902AF000, v181, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] stepLLR,%f,llr,%f,kTimeSinceLastStepSec,%f,kImpulseDurationSec,%f,kDeltaInertialZVel,%f,kThetaRollFaceDegrees,%f,kThetaPitchFaceDegrees,%f,kHorizontalDisplacement,%f,yawRotationAmountDegrees,%f,sensorTime,%f,bufferSampleRate,%f,peakiness,%f,bobbiness,%f\n", buf, 0x84u);
          }
          if (sub_1902D8400(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1E929D8D8 != -1) {
              dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
            }
            *(_DWORD *)uint64_t v300 = 134221056;
            *(double *)&v300[4] = a3;
            *(_WORD *)&v300[12] = 2048;
            *(double *)&v300[14] = v179;
            __int16 v301 = 2048;
            double v302 = v259;
            __int16 v303 = 2048;
            *(double *)uint64_t v304 = v258;
            *(_WORD *)&v304[8] = 2048;
            *(double *)int v305 = v257;
            *(_WORD *)&v305[8] = 2048;
            *(float64_t *)&v305[10] = v263.f64[0];
            __int16 v306 = 2048;
            float64_t v307 = v263.f64[1];
            __int16 v308 = 2048;
            double v309 = v266;
            __int16 v310 = 2048;
            double v311 = v268;
            __int16 v312 = 2048;
            double v313 = a3;
            __int16 v314 = 2048;
            double v315 = v175;
            __int16 v316 = 2048;
            double v317 = v177;
            __int16 v318 = 2048;
            double v319 = v178;
            uint64_t v245 = (char *)_os_log_send_and_compose_impl();
            sub_1902D398C("Generic", 1, 0, 2, "double CMAccessoryStepDetector::computeStepLikelihood(const AggAccelSample &, const double, const double, const double) const", "CoreLocation: %s\n", v245);
            if (v245 != buf) {
              free(v245);
            }
          }
          if (v179 > 1.0)
          {
            double v182 = v262;
            if (*(unsigned char *)(a1 + 3))
            {
              double v183 = vabdd_f64(v261, *(float *)(a1 + 4888));
              if (v183 <= 0.4) {
                int v184 = -1;
              }
              else {
                int v184 = 2;
              }
              *(void *)uint64_t v300 = 0x3200000000;
              if (*(_WORD *)(a1 + 4938))
              {
                unint64_t v185 = *(unsigned __int16 *)(a1 + 4938) + (unint64_t)*(unsigned __int16 *)(a1 + 4936) - 1;
                unint64_t v186 = *(unsigned int *)(a1 + 4940);
                if (v185 < v186) {
                  unint64_t v186 = 0;
                }
                double v187 = *(double *)(a1 + 4936 + 8 * (v185 - v186) + 8);
              }
              else
              {
                double v187 = 0.0;
              }
              int v196 = (unsigned __int16 *)(a1 + 8);
              double v271 = v183;
              if (*(_WORD *)(a1 + 10))
              {
                unint64_t v197 = 0;
                float32x2_t v198 = 0;
                float v199 = 0.0;
                do
                {
                  if (v187 + -0.4 <= *(double *)sub_190448208(v196, v197)
                    && *(double *)sub_190448208(v272, v197) <= v187)
                  {
                    int v196 = (unsigned __int16 *)(a1 + 8);
                    float v200 = *(float *)(sub_190448208(v272, v197) + 8);
                    float v201 = *(float *)(sub_190448208(v272, v197) + 12);
                    *(void *)buf = __PAIR64__(*(_DWORD *)(sub_190448208(v272, v197) + 16), COERCE_UNSIGNED_INT(sqrtf((float)(v200 * v200) + (float)(v201 * v201))));
                    *(_DWORD *)&buf[8] = 0;
                    sub_19042FFA8((unsigned __int16 *)v300, (uint64_t)buf);
                    float32x2_t v198 = vadd_f32(v198, *(float32x2_t *)buf);
                    float v199 = v199 + *(float *)&buf[8];
                  }
                  else
                  {
                    int v196 = (unsigned __int16 *)(a1 + 8);
                  }
                  ++v197;
                }
                while (v197 < *(unsigned __int16 *)(a1 + 10));
                unsigned int v202 = *(unsigned __int16 *)&v300[2];
                uint64_t v203 = *(unsigned __int16 *)v300;
                unint64_t v204 = *(unsigned int *)&v300[4];
                LODWORD(v72) = *(_DWORD *)&v300[12 * *(unsigned __int16 *)v300 + 8];
              }
              else
              {
                unsigned int v202 = 0;
                uint64_t v203 = 0;
                float32x2_t v198 = 0;
                float v199 = 0.0;
                unint64_t v204 = 50;
              }
              unint64_t v205 = v203 + v202 - 1;
              if (v205 < v204) {
                unint64_t v204 = 0;
              }
              uint64_t v206 = (float *)&v300[12 * (v205 - v204) + 8];
              float v208 = *v206;
              float v207 = v206[1];
              float v273 = *(float *)&v300[12 * v203 + 12];
              double v209 = 0.0;
              unsigned int v210 = v202;
              if (v202 >= 2)
              {
                float v267 = *v206;
                float v211 = v206[1];
                int v212 = LODWORD(v72);
                unint64_t v213 = 1;
                do
                {
                  float v214 = *(float *)sub_19043049C((unsigned __int16 *)v300, v213);
                  unint64_t v215 = v213 - 1;
                  float v216 = *(float *)sub_19043049C((unsigned __int16 *)v300, v215++);
                  float v217 = *(float *)(sub_19043049C((unsigned __int16 *)v300, v215--) + 4);
                  uint64_t v218 = sub_19043049C((unsigned __int16 *)v300, v215);
                  double v209 = v209
                       + sqrt((float)(v214 - v216) * (float)(v214 - v216)+ (float)(v217 - *(float *)(v218 + 4)) * (float)(v217 - *(float *)(v218 + 4)));
                  unsigned int v210 = *(unsigned __int16 *)&v300[2];
                  unint64_t v213 = v215 + 2;
                }
                while (v213 < *(unsigned __int16 *)&v300[2]);
                LODWORD(v72) = v212;
                float v207 = v211;
                float v208 = v267;
              }
              v219.i32[1] = 0;
              memset(v281, 0, 36);
              if (v210)
              {
                unint64_t v220 = 0;
                *(float *)v219.i32 = (float)v202;
                float32x2_t v221 = vdiv_f32(v198, (float32x2_t)vdup_lane_s32(v219, 0));
                float v222 = v199 / (float)v202;
                do
                {
                  float v223 = (float32x2_t *)sub_19043049C((unsigned __int16 *)v300, v220);
                  float v224 = v223[1].f32[0] - v222;
                  uint64_t v278 = (_DWORD *)vsub_f32(*v223, v221);
                  *(float *)&uint64_t v279 = v224;
                  sub_19044CB9C((uint64_t)&v278, (uint64_t)buf);
                  for (unint64_t j = 0; j != 9; ++j)
                    *(float *)&v281[4 * j] = sub_19044CC24((uint64_t)buf, j) + *(float *)&v281[4 * j];
                  ++v220;
                }
                while (v220 < *(unsigned __int16 *)&v300[2]);
              }
              *(_OWORD *)buf = *(_OWORD *)v281;
              *(_OWORD *)&buf[16] = *(_OWORD *)&v281[16];
              *(_DWORD *)&buf[32] = *(_DWORD *)&v281[32];
              sub_19044CE00((uint64_t)buf, (uint64_t)v277);
              v280[0] = v226;
              v280[1] = v227;
              v280[2] = v228;
              uint64_t v278 = v280;
              uint64_t v279 = v277;
              sub_19044D420((uint64_t *)&v278, 0, 1uLL);
              sub_19044D420((uint64_t *)&v278, 0, 2uLL);
              sub_19044D420((uint64_t *)&v278, 1uLL, 2uLL);
              double v229 = sqrtf((float)((float)(v208 - *(float *)&v72) * (float)(v208 - *(float *)&v72))+ (float)((float)(v207 - v273) * (float)(v207 - v273)));
              double v230 = fabsf(atanf(v277[1] / v277[0]));
              BOOL v231 = v209 / v229 >= 1.22;
              if (v230 >= 0.785398157) {
                BOOL v231 = 1;
              }
              double v232 = v271;
              int v233 = v271 <= 0.35 || v231;
              if (!v233) {
                int v184 = 1;
              }
              if (qword_1E929D8D8 != -1) {
                dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
              }
              float v234 = qword_1E929D8E0;
              if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 134219264;
                *(double *)&uint8_t buf[4] = v209;
                *(_WORD *)&unsigned char buf[12] = 2048;
                *(double *)&buf[14] = v229;
                *(_WORD *)&unsigned char buf[22] = 2048;
                *(double *)&buf[24] = v230 * 57.2957802;
                *(_WORD *)&buf[32] = 2048;
                *(double *)&buf[34] = v271;
                __int16 v284 = 1024;
                *(_DWORD *)int v285 = v184;
                *(_WORD *)&v285[4] = 2048;
                *(double *)&v285[6] = a3;
                _os_log_impl(&dword_1902AF000, v234, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] arcLength,%f,curveDistance,%f,firstLoftAngleDegrees,%f,aggAccelZDelta,%f,isFirstStep, %d,sensorTime,%f\n", buf, 0x3Au);
              }
              int v235 = sub_1902D8400(115, 2);
              double v182 = v262;
              if (v235)
              {
                bzero(buf, 0x65CuLL);
                if (qword_1E929D8D8 != -1) {
                  dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
                }
                *(_DWORD *)double v281 = 134219264;
                *(double *)&v281[4] = v209;
                *(_WORD *)&v281[12] = 2048;
                *(double *)&v281[14] = v229;
                *(_WORD *)&v281[22] = 2048;
                *(double *)&v281[24] = v230 * 57.2957802;
                *(_WORD *)&v281[32] = 2048;
                *(double *)&v281[34] = v271;
                *(_WORD *)&v281[42] = 1024;
                *(_DWORD *)&v281[44] = v184;
                LOWORD(v282) = 2048;
                *(double *)((char *)&v282 + 2) = a3;
                double v252 = (char *)_os_log_send_and_compose_impl();
                sub_1902D398C("Generic", 1, 0, 2, "int CMAccessoryStepDetector::isFirstStep(const double, const double, const double) const", "CoreLocation: %s\n", v252);
                if (v252 != buf) {
                  free(v252);
                }
                double v182 = v262;
                double v232 = v271;
              }
              char v236 = v233 ^ 1;
              *(_DWORD *)(a1 + 4844) = 2;
              if (v232 > 0.4) {
                char v236 = 1;
              }
              float v191 = v261;
              if ((v236 & 1) == 0) {
                goto LABEL_280;
              }
            }
            else
            {
              *(_DWORD *)(a1 + 4844) = 2;
              float v191 = v261;
            }
            *(_DWORD *)(a1 + 4836) = 1;
            *(double *)(a1 + 4848) = v182;
            *(void *)(a1 + 4856) = v256;
            *(float *)(a1 + 4864) = v191;
            *(double *)(a1 + 4896) = v182;
            sub_190448E90((unsigned __int16 *)(a1 + 4904), (void *)(a1 + 4896));
            if (*(_DWORD *)(a1 + 4908) == *(unsigned __int16 *)(a1 + 4906))
            {
              double v238 = *(double *)(a1 + 4896) - *(double *)(a1 + 4904 + 8 * *(unsigned __int16 *)(a1 + 4904) + 8);
              if (v238 < 0.0)
              {
                if (qword_1E929D8D8 != -1) {
                  dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
                }
                float v239 = qword_1E929D8E0;
                if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl(&dword_1902AF000, v239, OS_LOG_TYPE_ERROR, "[AccessoryStepDetector] Steps in _endImpulseTimestampHistory have times going backwards", buf, 2u);
                }
                if (sub_1902D8400(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1E929D8D8 != -1) {
                    dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
                  }
                  *(_WORD *)uint64_t v300 = 0;
                  unint64_t v255 = (char *)_os_log_send_and_compose_impl();
                  sub_1902D398C("Generic", 1, 0, 0, "CMAccessoryStepDetector::Impulse CMAccessoryStepDetector::feedImuData(const CMRelDM::IMUData *const, const double)", "CoreLocation: %s\n", v255);
                  if (v255 != buf) {
                    free(v255);
                  }
                }
              }
              if (v238 <= 5.0)
              {
                *(unsigned char *)a1 = 1;
                sub_1904481A4((unsigned __int8 *)a1);
                *(double *)(a1 + 5944) = a3;
              }
            }
            if (qword_1E929D8D8 != -1) {
              dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
            }
            uint64_t v240 = qword_1E929D8E0;
            if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 134217984;
              *(double *)&uint8_t buf[4] = v262;
              _os_log_impl(&dword_1902AF000, v240, OS_LOG_TYPE_DEBUG, "[AccessoryStepDetector] endImpulse,time,%f", buf, 0xCu);
            }
            if (sub_1902D8400(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1E929D8D8 != -1) {
                dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
              }
              *(_DWORD *)uint64_t v300 = 134217984;
              *(double *)&v300[4] = v262;
              double v251 = (char *)_os_log_send_and_compose_impl();
              sub_1902D398C("Generic", 1, 0, 2, "CMAccessoryStepDetector::Impulse CMAccessoryStepDetector::feedImuData(const CMRelDM::IMUData *const, const double)", "CoreLocation: %s\n", v251);
              if (v251 != buf) {
                free(v251);
              }
            }
            double v82 = NAN;
            goto LABEL_283;
          }
          *(_DWORD *)(a1 + 4844) = 2;
LABEL_280:
          *(_DWORD *)(a1 + 4836) = 0;
          if (*(_WORD *)(a1 + 4938)) {
            --*(_WORD *)(a1 + 4938);
          }
          goto LABEL_282;
        }
      }
      else
      {
LABEL_59:
        LODWORD(v75) = -1;
      }
      if (qword_1E929D8D8 != -1) {
        dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
      }
      unint64_t v78 = qword_1E929D8E0;
      if (os_log_type_enabled((os_log_t)qword_1E929D8E0, OS_LOG_TYPE_ERROR))
      {
        uint64_t v79 = *(unsigned __int16 *)(a1 + 1218);
        *(_DWORD *)buf = 67240448;
        *(_DWORD *)&uint8_t buf[4] = v75;
        *(_WORD *)&buf[8] = 2050;
        *(void *)&buf[10] = v79;
        _os_log_impl(&dword_1902AF000, v78, OS_LOG_TYPE_ERROR, "[AccessoryStepDetector] Error: Spatial sample buffer is starting at the end of the inertial buffer. startIndex:%{public}d size:%{public}zu", buf, 0x12u);
      }
      float v80 = 0.0;
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1E929D8D8 != -1) {
          dispatch_once(&qword_1E929D8D8, &unk_1EDFD14E0);
        }
        uint64_t v242 = *(unsigned __int16 *)(a1 + 1218);
        *(_DWORD *)uint64_t v300 = 67240448;
        *(_DWORD *)&v300[4] = v75;
        *(_WORD *)&v300[8] = 2050;
        *(void *)&v300[10] = v242;
        uint64_t v243 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "void CMAccessoryStepDetector::detectInflection(double, BOOL &, AggAccelSample &, BOOL &, AggAccelSample &) const", "CoreLocation: %s\n", v243);
        if (v243 != buf) {
          free(v243);
        }
      }
      BOOL v81 = 0;
      double v82 = NAN;
      int v83 = 0;
      int v84 = 0;
      goto LABEL_66;
    }
  }
  return NAN;
}

os_log_t sub_19044B7E4()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "RelativeDeviceMotion");
  qword_1E929D8E0 = (uint64_t)result;
  return result;
}

void sub_19044B814(unint64_t a1, unint64_t a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v12 = a2 - 24;
    int v169 = (long long *)(a2 - 72);
    int v170 = (long long *)(a2 - 48);
    unint64_t v13 = a1;
    unint64_t v172 = a2;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v13;
          uint64_t v14 = a2 - v13;
          uint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v13) >> 3);
          if (v6 || !v5)
          {
            switch(v15)
            {
              case 0:
              case 1:
                return;
              case 2:
                int v84 = *a3;
                uint64_t v85 = *(void *)(a2 - 8);
                long long v180 = *(_OWORD *)(a2 - 24);
                uint64_t v181 = v85;
                uint64_t v86 = *(void *)(a1 + 16);
                long long v178 = *(_OWORD *)a1;
                uint64_t v179 = v86;
                if (v84(&v180, &v178))
                {
                  long long v87 = *(_OWORD *)a1;
                  uint64_t v205 = *(void *)(a1 + 16);
                  long long v204 = v87;
                  long long v88 = *(_OWORD *)v12;
                  *(_DWORD *)(a1 + 16) = *(_DWORD *)(v12 + 16);
                  *(_OWORD *)a1 = v88;
                  long long v89 = v204;
                  *(_DWORD *)(v12 + 16) = v205;
                  *(_OWORD *)unint64_t v12 = v89;
                }
                break;
              case 3:
                sub_19044C450((long long *)a1, (long long *)(a1 + 24), (long long *)v12, a3);
                break;
              case 4:
                sub_19044C8A4(a1, a1 + 24, a1 + 48, (long long *)v12, a3);
                break;
              case 5:
                sub_19044C9F0(a1, a1 + 24, a1 + 48, a1 + 72, (long long *)v12, a3);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v14 <= 575)
          {
            unint64_t v90 = a1 + 24;
            BOOL v92 = a1 == a2 || v90 == a2;
            if (a5)
            {
              if (!v92)
              {
                uint64_t v93 = 0;
                unint64_t v94 = a1;
                do
                {
                  unint64_t v95 = v94;
                  unint64_t v94 = v90;
                  uint64_t v96 = *a3;
                  uint64_t v97 = *(void *)(v94 + 16);
                  long long v204 = *(_OWORD *)v94;
                  uint64_t v205 = v97;
                  uint64_t v98 = *(void *)(v95 + 16);
                  long long v202 = *(_OWORD *)v95;
                  uint64_t v203 = v98;
                  if (v96(&v204, &v202))
                  {
                    long long v99 = *(_OWORD *)v94;
                    uint64_t v201 = *(void *)(v94 + 16);
                    long long v200 = v99;
                    uint64_t v100 = v93;
                    while (1)
                    {
                      uint64_t v101 = a1 + v100;
                      *(_OWORD *)(v101 + 24) = *(_OWORD *)(a1 + v100);
                      *(_DWORD *)(v101 + 40) = *(_DWORD *)(a1 + v100 + 16);
                      if (!v100) {
                        break;
                      }
                      uint64_t v102 = *a3;
                      long long v198 = v200;
                      uint64_t v199 = v201;
                      uint64_t v103 = *(void *)(v101 - 8);
                      long long v196 = *(_OWORD *)(v101 - 24);
                      uint64_t v197 = v103;
                      v100 -= 24;
                      if (!v102(&v198, &v196))
                      {
                        uint64_t v104 = a1 + v100 + 24;
                        goto LABEL_75;
                      }
                    }
                    uint64_t v104 = a1;
LABEL_75:
                    long long v105 = v200;
                    *(_DWORD *)(v104 + 16) = v201;
                    *(_OWORD *)uint64_t v104 = v105;
                    a2 = v172;
                  }
                  unint64_t v90 = v94 + 24;
                  v93 += 24;
                }
                while (v94 + 24 != a2);
              }
            }
            else if (!v92)
            {
              do
              {
                unint64_t v158 = a1;
                a1 = v90;
                uint64_t v159 = *a3;
                uint64_t v160 = *(void *)(a1 + 16);
                long long v204 = *(_OWORD *)a1;
                uint64_t v205 = v160;
                uint64_t v161 = *(void *)(v158 + 16);
                long long v202 = *(_OWORD *)v158;
                uint64_t v203 = v161;
                if (v159(&v204, &v202))
                {
                  long long v162 = *(_OWORD *)a1;
                  uint64_t v201 = *(void *)(a1 + 16);
                  long long v200 = v162;
                  unint64_t v163 = a1;
                  do
                  {
                    unint64_t v164 = v163 - 24;
                    *(_OWORD *)unint64_t v163 = *(_OWORD *)(v163 - 24);
                    *(_DWORD *)(v163 + 16) = *(_DWORD *)(v163 - 8);
                    float v165 = *a3;
                    long long v198 = v200;
                    uint64_t v199 = v201;
                    uint64_t v166 = *(void *)(v163 - 32);
                    long long v196 = *(_OWORD *)(v163 - 48);
                    uint64_t v197 = v166;
                    int v167 = v165(&v198, &v196);
                    unint64_t v163 = v164;
                  }
                  while (v167);
                  long long v168 = v200;
                  *(_DWORD *)(v164 + 16) = v201;
                  *(_OWORD *)unint64_t v164 = v168;
                  a2 = v172;
                }
                unint64_t v90 = a1 + 24;
              }
              while (a1 + 24 != a2);
            }
            return;
          }
          if (!a4)
          {
            if (a1 != a2)
            {
              int64_t v106 = (unint64_t)(v15 - 2) >> 1;
              int64_t v171 = v106;
              do
              {
                int64_t v107 = v106;
                if (v171 >= v106)
                {
                  uint64_t v108 = (2 * v106) | 1;
                  unint64_t v109 = a1 + 24 * v108;
                  if (2 * v106 + 2 < v15)
                  {
                    unint64_t v110 = *a3;
                    uint64_t v111 = *(void *)(v109 + 16);
                    long long v204 = *(_OWORD *)v109;
                    uint64_t v205 = v111;
                    uint64_t v112 = *(void *)(v109 + 40);
                    long long v202 = *(_OWORD *)(v109 + 24);
                    uint64_t v203 = v112;
                    if (v110(&v204, &v202))
                    {
                      v109 += 24;
                      uint64_t v108 = 2 * v107 + 2;
                    }
                  }
                  unint64_t v113 = a1 + 24 * v107;
                  float v114 = *a3;
                  uint64_t v115 = *(void *)(v109 + 16);
                  long long v200 = *(_OWORD *)v109;
                  uint64_t v201 = v115;
                  uint64_t v116 = *(void *)(v113 + 16);
                  long long v198 = *(_OWORD *)v113;
                  uint64_t v199 = v116;
                  if (!v114(&v200, &v198))
                  {
                    long long v117 = *(_OWORD *)v113;
                    uint64_t v197 = *(void *)(v113 + 16);
                    long long v196 = v117;
                    do
                    {
                      unint64_t v118 = v109;
                      long long v119 = *(_OWORD *)v109;
                      *(_DWORD *)(v113 + 16) = *(_DWORD *)(v109 + 16);
                      *(_OWORD *)unint64_t v113 = v119;
                      if (v171 < v108) {
                        break;
                      }
                      uint64_t v120 = (2 * v108) | 1;
                      unint64_t v109 = a1 + 24 * v120;
                      uint64_t v121 = 2 * v108 + 2;
                      if (v121 < v15)
                      {
                        int v122 = *a3;
                        uint64_t v123 = *(void *)(v109 + 16);
                        long long v194 = *(_OWORD *)v109;
                        uint64_t v195 = v123;
                        uint64_t v124 = *(void *)(v109 + 40);
                        long long v192 = *(_OWORD *)(v109 + 24);
                        uint64_t v193 = v124;
                        if (v122(&v194, &v192))
                        {
                          v109 += 24;
                          uint64_t v120 = v121;
                        }
                      }
                      BOOL v125 = *a3;
                      uint64_t v126 = *(void *)(v109 + 16);
                      long long v190 = *(_OWORD *)v109;
                      uint64_t v191 = v126;
                      long long v188 = v196;
                      uint64_t v189 = v197;
                      unint64_t v113 = v118;
                      uint64_t v108 = v120;
                    }
                    while (!v125(&v190, &v188));
                    long long v127 = v196;
                    *(_DWORD *)(v118 + 16) = v197;
                    *(_OWORD *)unint64_t v118 = v127;
                  }
                }
                int64_t v106 = v107 - 1;
              }
              while (v107);
              int64_t v128 = v14 / 0x18uLL;
              unint64_t v129 = (_OWORD *)v172;
              do
              {
                uint64_t v173 = v129;
                uint64_t v130 = 0;
                long long v131 = *(_OWORD *)a1;
                uint64_t v195 = *(void *)(a1 + 16);
                long long v194 = v131;
                uint64_t v132 = v128 - 2;
                if (v128 < 2) {
                  uint64_t v132 = v128 - 1;
                }
                uint64_t v133 = v132 >> 1;
                unint64_t v134 = a1;
                do
                {
                  uint64_t v135 = v134 + 24 * v130 + 24;
                  uint64_t v136 = (2 * v130) | 1;
                  uint64_t v137 = 2 * v130 + 2;
                  if (v137 < v128)
                  {
                    unint64_t v138 = *a3;
                    uint64_t v139 = *(void *)(v135 + 16);
                    long long v204 = *(_OWORD *)v135;
                    uint64_t v205 = v139;
                    uint64_t v140 = *(void *)(v135 + 40);
                    long long v202 = *(_OWORD *)(v135 + 24);
                    uint64_t v203 = v140;
                    if (v138(&v204, &v202))
                    {
                      v135 += 24;
                      uint64_t v136 = v137;
                    }
                  }
                  long long v141 = *(_OWORD *)v135;
                  *(_DWORD *)(v134 + 16) = *(_DWORD *)(v135 + 16);
                  *(_OWORD *)unint64_t v134 = v141;
                  unint64_t v134 = v135;
                  uint64_t v130 = v136;
                }
                while (v136 <= v133);
                unint64_t v129 = (_OWORD *)((char *)v173 - 24);
                if ((_OWORD *)v135 == (_OWORD *)((char *)v173 - 24))
                {
                  long long v156 = v194;
                  *(_DWORD *)(v135 + 16) = v195;
                  *(_OWORD *)uint64_t v135 = v156;
                }
                else
                {
                  long long v142 = *v129;
                  *(_DWORD *)(v135 + 16) = *((_DWORD *)v173 - 2);
                  *(_OWORD *)uint64_t v135 = v142;
                  long long v143 = v194;
                  *((_DWORD *)v173 - 2) = v195;
                  *unint64_t v129 = v143;
                  uint64_t v144 = v135 - a1 + 24;
                  if (v144 >= 25)
                  {
                    unint64_t v145 = (v144 / 0x18uLL - 2) >> 1;
                    unint64_t v146 = a1 + 24 * v145;
                    float32x2_t v147 = *a3;
                    uint64_t v148 = *(void *)(v146 + 16);
                    long long v204 = *(_OWORD *)v146;
                    uint64_t v205 = v148;
                    uint64_t v149 = *(void *)(v135 + 16);
                    long long v202 = *(_OWORD *)v135;
                    uint64_t v203 = v149;
                    if (v147(&v204, &v202))
                    {
                      long long v150 = *(_OWORD *)v135;
                      uint64_t v201 = *(void *)(v135 + 16);
                      long long v200 = v150;
                      do
                      {
                        uint64_t v151 = v146;
                        long long v152 = *(_OWORD *)v146;
                        *(_DWORD *)(v135 + 16) = *(_DWORD *)(v146 + 16);
                        *(_OWORD *)uint64_t v135 = v152;
                        if (!v145) {
                          break;
                        }
                        unint64_t v145 = (v145 - 1) >> 1;
                        unint64_t v146 = a1 + 24 * v145;
                        unsigned int v153 = *a3;
                        uint64_t v154 = *(void *)(v146 + 16);
                        long long v198 = *(_OWORD *)v146;
                        uint64_t v199 = v154;
                        long long v196 = v200;
                        uint64_t v197 = v201;
                        uint64_t v135 = v151;
                      }
                      while (v153(&v198, &v196));
                      long long v155 = v200;
                      *(_DWORD *)(v151 + 16) = v201;
                      *(_OWORD *)uint64_t v151 = v155;
                    }
                  }
                  unint64_t v129 = (_OWORD *)((char *)v173 - 24);
                }
              }
              while (v128-- > 2);
            }
            return;
          }
          unint64_t v16 = (unint64_t)v15 >> 1;
          unint64_t v17 = a1 + 24 * ((unint64_t)v15 >> 1);
          if ((unint64_t)v14 < 0xC01)
          {
            sub_19044C450((long long *)v17, (long long *)a1, (long long *)v12, a3);
          }
          else
          {
            sub_19044C450((long long *)a1, (long long *)v17, (long long *)v12, a3);
            uint64_t v18 = 3 * v16;
            sub_19044C450((long long *)(a1 + 24), (long long *)(a1 + 8 * v18 - 24), v170, a3);
            sub_19044C450((long long *)(a1 + 48), (long long *)(a1 + 24 + 8 * v18), v169, a3);
            sub_19044C450((long long *)(a1 + 8 * v18 - 24), (long long *)v17, (long long *)(a1 + 24 + 8 * v18), a3);
            long long v19 = *(_OWORD *)a1;
            uint64_t v205 = *(void *)(a1 + 16);
            long long v204 = v19;
            int v20 = *(_DWORD *)(v17 + 16);
            *(_OWORD *)a1 = *(_OWORD *)v17;
            *(_DWORD *)(a1 + 16) = v20;
            long long v21 = v204;
            *(_DWORD *)(v17 + 16) = v205;
            *(_OWORD *)unint64_t v17 = v21;
          }
          --a4;
          if (a5) {
            break;
          }
          uint64_t v22 = *a3;
          uint64_t v23 = *(void *)(a1 - 8);
          long long v176 = *(_OWORD *)(a1 - 24);
          uint64_t v177 = v23;
          uint64_t v24 = *(void *)(a1 + 16);
          long long v174 = *(_OWORD *)a1;
          uint64_t v175 = v24;
          if (v22(&v176, &v174)) {
            break;
          }
          long long v54 = *(_OWORD *)a1;
          uint64_t v203 = *(void *)(a1 + 16);
          long long v202 = v54;
          uint64_t v55 = *a3;
          uint64_t v56 = *(void *)(a1 + 16);
          long long v200 = *(_OWORD *)a1;
          uint64_t v201 = v56;
          uint64_t v57 = *(void *)(v12 + 16);
          long long v198 = *(_OWORD *)v12;
          uint64_t v199 = v57;
          int v58 = v55(&v200, &v198);
          unint64_t v59 = a1;
          a2 = v172;
          if (v58)
          {
            do
            {
              unint64_t v13 = v59 + 24;
              BOOL v60 = *a3;
              long long v196 = v202;
              uint64_t v197 = v203;
              uint64_t v61 = *(void *)(v59 + 40);
              long long v194 = *(_OWORD *)(v59 + 24);
              uint64_t v195 = v61;
              int v62 = v60(&v196, &v194);
              unint64_t v59 = v13;
            }
            while (!v62);
          }
          else
          {
            unint64_t v63 = a1 + 24;
            do
            {
              unint64_t v13 = v63;
              if (v63 >= v172) {
                break;
              }
              unint64_t v64 = *a3;
              long long v196 = v202;
              uint64_t v197 = v203;
              uint64_t v65 = *(void *)(v13 + 16);
              long long v194 = *(_OWORD *)v13;
              uint64_t v195 = v65;
              int v66 = v64(&v196, &v194);
              unint64_t v63 = v13 + 24;
            }
            while (!v66);
          }
          unint64_t v67 = v172;
          if (v13 < v172)
          {
            unint64_t v68 = v172;
            do
            {
              unint64_t v67 = v68 - 24;
              uint64_t v69 = *a3;
              long long v192 = v202;
              uint64_t v193 = v203;
              uint64_t v70 = *(void *)(v68 - 8);
              long long v190 = *(_OWORD *)(v68 - 24);
              uint64_t v191 = v70;
              int v71 = v69(&v192, &v190);
              unint64_t v68 = v67;
            }
            while (v71);
          }
          while (v13 < v67)
          {
            long long v72 = *(_OWORD *)v13;
            uint64_t v205 = *(void *)(v13 + 16);
            long long v204 = v72;
            long long v73 = *(_OWORD *)v67;
            *(_DWORD *)(v13 + 16) = *(_DWORD *)(v67 + 16);
            *(_OWORD *)unint64_t v13 = v73;
            long long v74 = v204;
            *(_DWORD *)(v67 + 16) = v205;
            *(_OWORD *)unint64_t v67 = v74;
            do
            {
              long long v188 = v202;
              uint64_t v189 = v203;
              uint64_t v75 = *(void *)(v13 + 40);
              long long v76 = *(_OWORD *)(v13 + 24);
              v13 += 24;
              float v77 = *a3;
              long long v186 = v76;
              uint64_t v187 = v75;
            }
            while (!v77(&v188, &v186));
            do
            {
              long long v184 = v202;
              uint64_t v185 = v203;
              uint64_t v78 = *(void *)(v67 - 8);
              long long v79 = *(_OWORD *)(v67 - 24);
              v67 -= 24;
              float v80 = *a3;
              long long v182 = v79;
              uint64_t v183 = v78;
            }
            while (v80(&v184, &v182));
          }
          BOOL v81 = (long long *)(v13 - 24);
          BOOL v5 = v13 - 24 >= a1;
          BOOL v6 = v13 - 24 == a1;
          if (v13 - 24 != a1)
          {
            long long v82 = *v81;
            *(_DWORD *)(a1 + 16) = *(_DWORD *)(v13 - 8);
            *(_OWORD *)a1 = v82;
          }
          a5 = 0;
          long long v83 = v202;
          *(_DWORD *)(v13 - 8) = v203;
          long long *v81 = v83;
        }
        uint64_t v25 = 0;
        long long v26 = *(_OWORD *)a1;
        uint64_t v203 = *(void *)(a1 + 16);
        long long v202 = v26;
        do
        {
          unint64_t v27 = *a3;
          uint64_t v28 = *(void *)(a1 + v25 + 40);
          long long v200 = *(_OWORD *)(a1 + v25 + 24);
          uint64_t v201 = v28;
          long long v198 = v202;
          uint64_t v199 = v203;
          v25 += 24;
        }
        while (v27(&v200, &v198));
        unint64_t v29 = a1 + v25;
        unint64_t v30 = v172;
        BOOL v6 = v25 == 24;
        a2 = v172;
        if (v6)
        {
          unint64_t v35 = v172;
          while (v29 < v35)
          {
            float v36 = *a3;
            unint64_t v31 = v35 - 24;
            uint64_t v37 = *(void *)(v35 - 8);
            long long v196 = *(_OWORD *)(v35 - 24);
            uint64_t v197 = v37;
            long long v194 = v202;
            uint64_t v195 = v203;
            int v38 = v36(&v196, &v194);
            unint64_t v35 = v31;
            if (v38) {
              goto LABEL_21;
            }
          }
          unint64_t v31 = v35;
        }
        else
        {
          do
          {
            unint64_t v31 = v30 - 24;
            unint64_t v32 = *a3;
            uint64_t v33 = *(void *)(v30 - 8);
            long long v196 = *(_OWORD *)(v30 - 24);
            uint64_t v197 = v33;
            long long v194 = v202;
            uint64_t v195 = v203;
            int v34 = v32(&v196, &v194);
            unint64_t v30 = v31;
          }
          while (!v34);
        }
LABEL_21:
        if (v29 >= v31)
        {
          uint64_t v50 = v29 - 24;
        }
        else
        {
          unint64_t v39 = v29;
          float32x4_t v40 = (long long *)v31;
          do
          {
            long long v41 = *(_OWORD *)v39;
            uint64_t v205 = *(void *)(v39 + 16);
            long long v204 = v41;
            long long v42 = *v40;
            *(_DWORD *)(v39 + 16) = *((_DWORD *)v40 + 4);
            *(_OWORD *)unint64_t v39 = v42;
            long long v43 = v204;
            *((_DWORD *)v40 + 4) = v205;
            *float32x4_t v40 = v43;
            do
            {
              uint64_t v44 = *(void *)(v39 + 40);
              long long v45 = *(_OWORD *)(v39 + 24);
              v39 += 24;
              uint64_t v46 = *a3;
              long long v192 = v45;
              uint64_t v193 = v44;
              long long v190 = v202;
              uint64_t v191 = v203;
            }
            while (v46(&v192, &v190));
            do
            {
              uint64_t v47 = *((void *)v40 - 1);
              long long v48 = *(long long *)((char *)v40 - 24);
              float32x4_t v40 = (long long *)((char *)v40 - 24);
              int v49 = *a3;
              long long v188 = v48;
              uint64_t v189 = v47;
              long long v186 = v202;
              uint64_t v187 = v203;
            }
            while (!v49(&v188, &v186));
          }
          while (v39 < (unint64_t)v40);
          uint64_t v50 = v39 - 24;
        }
        if (v50 != a1)
        {
          long long v51 = *(_OWORD *)v50;
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(v50 + 16);
          *(_OWORD *)a1 = v51;
        }
        long long v52 = v202;
        *(_DWORD *)(v50 + 16) = v203;
        *(_OWORD *)uint64_t v50 = v52;
        if (v29 >= v31) {
          break;
        }
LABEL_34:
        sub_19044B814(a1, v50, a3, a4, a5 & 1);
        a5 = 0;
        unint64_t v13 = v50 + 24;
      }
      BOOL v53 = sub_19044C634(a1, v50, a3);
      unint64_t v13 = v50 + 24;
      if (sub_19044C634(v50 + 24, v172, a3)) {
        break;
      }
      if (!v53) {
        goto LABEL_34;
      }
    }
    a2 = v50;
    if (!v53) {
      continue;
    }
    break;
  }
}

uint64_t sub_19044C450(long long *a1, long long *a2, long long *a3, uint64_t (**a4)(long long *, long long *))
{
  float v8 = *a4;
  long long v47 = *a2;
  uint64_t v48 = *((void *)a2 + 2);
  long long v45 = *a1;
  uint64_t v46 = *((void *)a1 + 2);
  int v9 = v8(&v47, &v45);
  __int32 v10 = *a4;
  if (v9)
  {
    long long v35 = *a3;
    uint64_t v36 = *((void *)a3 + 2);
    long long v33 = *a2;
    uint64_t v34 = *((void *)a2 + 2);
    uint64_t result = v10(&v35, &v33);
    if (result)
    {
      long long v12 = *a1;
      uint64_t v13 = *((void *)a1 + 2);
      int v14 = *((_DWORD *)a3 + 4);
      *a1 = *a3;
      *((_DWORD *)a1 + 4) = v14;
    }
    else
    {
      long long v23 = *a1;
      uint64_t v24 = *((void *)a1 + 2);
      int v25 = *((_DWORD *)a2 + 4);
      *a1 = *a2;
      *((_DWORD *)a1 + 4) = v25;
      *((_DWORD *)a2 + 4) = v24;
      *a2 = v23;
      long long v26 = *a4;
      uint64_t v32 = *((void *)a3 + 2);
      long long v31 = *a3;
      long long v27 = *a2;
      uint64_t v30 = *((void *)a2 + 2);
      long long v29 = v27;
      uint64_t result = v26(&v31, &v29);
      if (!result) {
        return result;
      }
      long long v12 = *a2;
      uint64_t v13 = *((void *)a2 + 2);
      int v28 = *((_DWORD *)a3 + 4);
      *a2 = *a3;
      *((_DWORD *)a2 + 4) = v28;
    }
    *((_DWORD *)a3 + 4) = v13;
    *a3 = v12;
  }
  else
  {
    long long v43 = *a3;
    uint64_t v44 = *((void *)a3 + 2);
    long long v41 = *a2;
    uint64_t v42 = *((void *)a2 + 2);
    uint64_t result = v10(&v43, &v41);
    if (result)
    {
      long long v15 = *a2;
      uint64_t v16 = *((void *)a2 + 2);
      int v17 = *((_DWORD *)a3 + 4);
      *a2 = *a3;
      *((_DWORD *)a2 + 4) = v17;
      *((_DWORD *)a3 + 4) = v16;
      *a3 = v15;
      uint64_t v18 = *a4;
      uint64_t v40 = *((void *)a2 + 2);
      long long v39 = *a2;
      long long v19 = *a1;
      uint64_t v38 = *((void *)a1 + 2);
      long long v37 = v19;
      uint64_t result = v18(&v39, &v37);
      if (result)
      {
        long long v20 = *a1;
        uint64_t v21 = *((void *)a1 + 2);
        int v22 = *((_DWORD *)a2 + 4);
        *a1 = *a2;
        *((_DWORD *)a1 + 4) = v22;
        *((_DWORD *)a2 + 4) = v21;
        *a2 = v20;
      }
    }
  }
  return result;
}

BOOL sub_19044C634(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      float v8 = *a3;
      long long v35 = *(_OWORD *)(a2 - 24);
      uint64_t v36 = *(void *)(a2 - 8);
      long long v33 = *(_OWORD *)a1;
      uint64_t v34 = *(void *)(a1 + 16);
      if (v8(&v35, &v33))
      {
        uint64_t v9 = a2 - 24;
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(a1 + 16);
        int v12 = *(_DWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_DWORD *)(a1 + 16) = v12;
        *(_DWORD *)(v9 + 16) = v11;
        *(_OWORD *)uint64_t v9 = v10;
      }
      return 1;
    case 3uLL:
      sub_19044C450((long long *)a1, (long long *)(a1 + 24), (long long *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_19044C8A4(a1, a1 + 24, a1 + 48, (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_19044C9F0(a1, a1 + 24, a1 + 48, a1 + 72, (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v13 = a1 + 48;
      sub_19044C450((long long *)a1, (long long *)(a1 + 24), (long long *)(a1 + 48), a3);
      uint64_t v14 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v15 = 0;
      int v16 = 0;
      break;
  }
  while (1)
  {
    int v17 = *a3;
    long long v31 = *(_OWORD *)v14;
    uint64_t v32 = *(void *)(v14 + 16);
    uint64_t v18 = *(void *)(v13 + 16);
    long long v29 = *(_OWORD *)v13;
    uint64_t v30 = v18;
    if (v17(&v31, &v29))
    {
      long long v27 = *(_OWORD *)v14;
      uint64_t v28 = *(void *)(v14 + 16);
      uint64_t v19 = v15;
      while (1)
      {
        uint64_t v20 = a1 + v19;
        *(_OWORD *)(v20 + 72) = *(_OWORD *)(a1 + v19 + 48);
        *(_DWORD *)(v20 + 88) = *(_DWORD *)(a1 + v19 + 64);
        if (v19 == -48) {
          break;
        }
        uint64_t v21 = *a3;
        long long v25 = v27;
        uint64_t v26 = v28;
        long long v23 = *(_OWORD *)(v20 + 24);
        uint64_t v24 = *(void *)(v20 + 40);
        v19 -= 24;
        if (!v21(&v25, &v23))
        {
          uint64_t v22 = a1 + v19 + 72;
          goto LABEL_12;
        }
      }
      uint64_t v22 = a1;
LABEL_12:
      *(_OWORD *)uint64_t v22 = v27;
      *(_DWORD *)(v22 + 16) = v28;
      if (++v16 == 8) {
        return v14 + 24 == a2;
      }
    }
    uint64_t v13 = v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2) {
      return 1;
    }
  }
}

__n128 sub_19044C8A4(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t (**a5)(long long *, long long *))
{
  sub_19044C450((long long *)a1, (long long *)a2, (long long *)a3, a5);
  long long v10 = *a5;
  long long v34 = *a4;
  uint64_t v35 = *((void *)a4 + 2);
  long long v32 = *(_OWORD *)a3;
  uint64_t v33 = *(void *)(a3 + 16);
  if (v10(&v34, &v32))
  {
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = *(void *)(a3 + 16);
    int v14 = *((_DWORD *)a4 + 4);
    *(_OWORD *)a3 = *a4;
    *(_DWORD *)(a3 + 16) = v14;
    *((_DWORD *)a4 + 4) = v13;
    *a4 = v12;
    uint64_t v15 = *a5;
    uint64_t v31 = *(void *)(a3 + 16);
    long long v30 = *(_OWORD *)a3;
    long long v16 = *(_OWORD *)a2;
    uint64_t v29 = *(void *)(a2 + 16);
    long long v28 = v16;
    if (v15(&v30, &v28))
    {
      long long v17 = *(_OWORD *)a2;
      uint64_t v18 = *(void *)(a2 + 16);
      int v19 = *(_DWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_DWORD *)(a2 + 16) = v19;
      *(_DWORD *)(a3 + 16) = v18;
      *(_OWORD *)a3 = v17;
      uint64_t v20 = *a5;
      uint64_t v27 = *(void *)(a2 + 16);
      long long v26 = *(_OWORD *)a2;
      long long v21 = *(_OWORD *)a1;
      uint64_t v25 = *(void *)(a1 + 16);
      long long v24 = v21;
      if (v20(&v26, &v24))
      {
        __n128 result = *(__n128 *)a1;
        uint64_t v22 = *(void *)(a1 + 16);
        int v23 = *(_DWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = v23;
        *(_DWORD *)(a2 + 16) = v22;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 sub_19044C9F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t (**a6)(long long *, long long *))
{
  sub_19044C8A4(a1, a2, a3, (long long *)a4, a6);
  long long v12 = *a6;
  long long v45 = *a5;
  uint64_t v46 = *((void *)a5 + 2);
  long long v43 = *(_OWORD *)a4;
  uint64_t v44 = *(void *)(a4 + 16);
  if (v12(&v45, &v43))
  {
    long long v14 = *(_OWORD *)a4;
    uint64_t v15 = *(void *)(a4 + 16);
    int v16 = *((_DWORD *)a5 + 4);
    *(_OWORD *)a4 = *a5;
    *(_DWORD *)(a4 + 16) = v16;
    *((_DWORD *)a5 + 4) = v15;
    *a5 = v14;
    long long v17 = *a6;
    uint64_t v42 = *(void *)(a4 + 16);
    long long v41 = *(_OWORD *)a4;
    long long v18 = *(_OWORD *)a3;
    uint64_t v40 = *(void *)(a3 + 16);
    long long v39 = v18;
    if (v17(&v41, &v39))
    {
      long long v19 = *(_OWORD *)a3;
      uint64_t v20 = *(void *)(a3 + 16);
      int v21 = *(_DWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_DWORD *)(a3 + 16) = v21;
      *(_DWORD *)(a4 + 16) = v20;
      *(_OWORD *)a4 = v19;
      uint64_t v22 = *a6;
      uint64_t v38 = *(void *)(a3 + 16);
      long long v37 = *(_OWORD *)a3;
      __n128 v23 = *(__n128 *)a2;
      uint64_t v36 = *(void *)(a2 + 16);
      __n128 v35 = v23;
      if (v22(&v37, (long long *)&v35))
      {
        __n128 v24 = *(__n128 *)a2;
        uint64_t v25 = *(void *)(a2 + 16);
        int v26 = *(_DWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_DWORD *)(a2 + 16) = v26;
        *(_DWORD *)(a3 + 16) = v25;
        *(__n128 *)a3 = v24;
        uint64_t v27 = *a6;
        uint64_t v34 = *(void *)(a2 + 16);
        __n128 v33 = *(__n128 *)a2;
        __n128 v28 = *(__n128 *)a1;
        uint64_t v32 = *(void *)(a1 + 16);
        __n128 v31 = v28;
        if (v27((long long *)&v33, (long long *)&v31))
        {
          __n128 result = *(__n128 *)a1;
          uint64_t v29 = *(void *)(a1 + 16);
          int v30 = *(_DWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_DWORD *)(a1 + 16) = v30;
          *(_DWORD *)(a2 + 16) = v29;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

float *sub_19044CB9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  for (unint64_t i = 0; i != 3; ++i)
  {
    for (unint64_t j = 0; j != 3; ++j)
    {
      float v6 = sub_190448408(a1, i);
      float v7 = v6 * sub_190448408(a1, j);
      __n128 result = (float *)sub_190448B30(a2, i, j);
      *__n128 result = v7;
    }
  }
  return result;
}

float sub_19044CC24(uint64_t a1, unint64_t a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2 >= 9)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
    }
    BOOL v5 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      unint64_t v8 = a2;
      __int16 v9 = 2048;
      uint64_t v10 = 9;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_FAULT, "Assertion failed: ldx < M*N, file /Library/Caches/com.apple.xbs/Sources/CoreLocationFramework/Oscar/Math/CMMatrix.h, line 84,invalid element %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFD37C0);
      }
      float v6 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "T CMMatrix<float, 3>::operator[](size_t) const [T = float, M = 3, N = 3]", "CoreLocation: %s\n", v6);
      if (v6 != (char *)buf) {
        free(v6);
      }
    }
  }
  return *(float *)(a1 + 4 * a2);
}

float *sub_19044CE00(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = 0;
  *(_DWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  do
  {
    *(_DWORD *)sub_190448B30(a2, v4, v4) = 1065353216;
    int v5 = *(_DWORD *)sub_190448B30(a1, v4, v4);
    *(_DWORD *)sub_19042D844((uint64_t)&v75, v4) = v5;
    int v6 = *(_DWORD *)sub_190448B30(a1, v4, v4);
    *(_DWORD *)sub_19042D844((uint64_t)&v73, v4) = v6;
    *(_DWORD *)sub_19042D844((uint64_t)&v71, v4++) = 0;
  }
  while (v4 != 3);
  unint64_t v7 = 0;
  do
  {
    unint64_t v8 = 0;
    float v9 = 0.0;
    char v10 = 1;
    do
    {
      char v11 = v10;
      unint64_t v12 = v8 + 1;
      do
      {
        float v13 = *(float *)sub_190448B30(a1, v8, v12);
        __n128 result = (float *)sub_190448B30(a1, v8, v12);
        float v15 = *result;
        if (v13 < 0.0) {
          float v15 = -*result;
        }
        float v9 = v9 + v15;
        ++v12;
      }
      while (v12 != 3);
      char v10 = 0;
      unint64_t v8 = 1;
    }
    while ((v11 & 1) != 0);
    if (v9 == 0.0) {
      break;
    }
    float v16 = 0.0;
    if (v7 <= 2) {
      float v16 = (float)(v9 * 0.2) / 9.0;
    }
    char v17 = 0;
    unint64_t v18 = 0;
    unint64_t v70 = v7 + 1;
    char v19 = 1;
    do
    {
      char v20 = v19;
      unint64_t v21 = v18 + 1;
      do
      {
        float v22 = *(float *)sub_190448B30(a1, v18, v21);
        __n128 v23 = (float *)sub_190448B30(a1, v18, v21);
        float v24 = *v23;
        if (v22 < 0.0) {
          float v24 = -*v23;
        }
        float v25 = v24 * 100.0;
        if (v7 < 4) {
          goto LABEL_31;
        }
        float v26 = v25 + *(float *)sub_19042D844((uint64_t)&v75, v18);
        uint64_t v27 = (float *)sub_19042D844((uint64_t)&v75, v18);
        if (v26 >= 0.0) {
          float v28 = v25 + *v27;
        }
        else {
          float v28 = -(float)(v25 + *v27);
        }
        float v29 = *(float *)sub_19042D844((uint64_t)&v75, v18);
        int v30 = (float *)sub_19042D844((uint64_t)&v75, v18);
        float v31 = *v30;
        if (v29 < 0.0) {
          float v31 = -*v30;
        }
        if (v28 != v31) {
          goto LABEL_31;
        }
        float v32 = v25 + *(float *)sub_19042D844((uint64_t)&v75, v21);
        __n128 v33 = (float *)sub_19042D844((uint64_t)&v75, v21);
        if (v32 >= 0.0) {
          float v34 = v25 + *v33;
        }
        else {
          float v34 = -(float)(v25 + *v33);
        }
        float v35 = *(float *)sub_19042D844((uint64_t)&v75, v21);
        uint64_t v36 = (float *)sub_19042D844((uint64_t)&v75, v21);
        float v37 = *v36;
        if (v35 < 0.0) {
          float v37 = -*v36;
        }
        if (v34 == v37)
        {
          __n128 result = (float *)sub_190448B30(a1, v18, v21);
          *__n128 result = 0.0;
        }
        else
        {
LABEL_31:
          float v38 = *(float *)sub_190448B30(a1, v18, v21);
          __n128 result = (float *)sub_190448B30(a1, v18, v21);
          float v39 = *result;
          if (v38 < 0.0) {
            float v39 = -*result;
          }
          if (v39 > v16)
          {
            float v40 = *(float *)sub_19042D844((uint64_t)&v75, v21);
            float v41 = v40 - *(float *)sub_19042D844((uint64_t)&v75, v18);
            float v42 = v25 + v41;
            if ((float)(v25 + v41) < 0.0) {
              float v42 = -(float)(v25 + v41);
            }
            float v43 = -v41;
            if (v41 >= 0.0) {
              float v43 = v41;
            }
            if (v42 == v43)
            {
              float v44 = *(float *)sub_190448B30(a1, v18, v21) / v41;
            }
            else
            {
              long long v45 = (float *)sub_190448B30(a1, v18, v21);
              float v46 = (float)(v41 * 0.5) / *v45;
              float v47 = -v46;
              BOOL v48 = v46 < 0.0;
              if (v46 >= 0.0) {
                float v47 = (float)(v41 * 0.5) / *v45;
              }
              float v49 = 1.0 / (float)(v47 + sqrtf((float)(v46 * v46) + 1.0));
              if (v48) {
                float v44 = -v49;
              }
              else {
                float v44 = v49;
              }
            }
            float v50 = 1.0 / sqrtf((float)(v44 * v44) + 1.0);
            float v51 = v44 * v50;
            float v52 = (float)(v44 * v50) / (float)(v50 + 1.0);
            float v53 = v44 * *(float *)sub_190448B30(a1, v18, v21);
            long long v54 = (float *)sub_19042D844((uint64_t)&v71, v18);
            *long long v54 = *v54 - v53;
            uint64_t v55 = (float *)sub_19042D844((uint64_t)&v71, v21);
            *uint64_t v55 = v53 + *v55;
            uint64_t v56 = (float *)sub_19042D844((uint64_t)&v75, v18);
            *uint64_t v56 = *v56 - v53;
            uint64_t v57 = (float *)sub_19042D844((uint64_t)&v75, v21);
            *uint64_t v57 = v53 + *v57;
            *(_DWORD *)sub_190448B30(a1, v18, v21) = 0;
            if (v17)
            {
              float v58 = *(float *)(a1 + 12);
              unint64_t v59 = (float *)sub_190448B30(a1, 0, v21);
              float v60 = *v59;
              *(float *)(a1 + 12) = v58 - (float)(v51 * (float)(*v59 + (float)(v58 * v52)));
              *(float *)sub_190448B30(a1, 0, v21) = v60 + (float)(v51 * (float)(v58 - (float)(v60 * v52)));
            }
            float v61 = -v51;
            if (v18 + 1 < v21)
            {
              float v62 = *(float *)sub_190448B30(a1, v18, 1uLL);
              float v63 = *(float *)(a1 + 28);
              *(float *)sub_190448B30(a1, v18, 1uLL) = v62 + (float)(v61 * (float)(v63 + (float)(v62 * v52)));
              *(float *)(a1 + 28) = v63 + (float)(v51 * (float)(v62 - (float)(v63 * v52)));
            }
            if (v21 < 2)
            {
              float v64 = *(float *)sub_190448B30(a1, v18, 2uLL);
              float v65 = *(float *)(a1 + 28);
              *(float *)sub_190448B30(a1, v18, 2uLL) = v64 + (float)(v61 * (float)(v65 + (float)(v64 * v52)));
              *(float *)(a1 + 28) = v65 + (float)(v51 * (float)(v64 - (float)(v65 * v52)));
            }
            for (unint64_t i = 0; i != 3; ++i)
            {
              float v67 = *(float *)sub_190448B30(a2, i, v18);
              float v68 = *(float *)sub_190448B30(a2, i, v21);
              *(float *)sub_190448B30(a2, i, v18) = v67 + (float)(v61 * (float)(v68 + (float)(v67 * v52)));
              __n128 result = (float *)sub_190448B30(a2, i, v21);
              *__n128 result = v68 + (float)(v51 * (float)(v67 - (float)(v68 * v52)));
            }
          }
        }
        BOOL v69 = v21 == 2;
        unint64_t v21 = 2;
      }
      while (!v69);
      char v19 = 0;
      char v17 = 1;
      unint64_t v18 = 1;
    }
    while ((v20 & 1) != 0);
    float32x2_t v73 = vadd_f32(v71, v73);
    float v74 = v72 + v74;
    float32x2_t v75 = v73;
    float v76 = v74;
    float v72 = 0.0;
    float32x2_t v71 = 0;
    ++v7;
  }
  while (v70 != 10);
  return result;
}

int *sub_19044D420(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  float v6 = *(float *)sub_19042D844(*a1, a2);
  __n128 result = (int *)sub_19042D844(*a1, a3);
  if (v6 < *(float *)result)
  {
    unint64_t v8 = (int *)sub_19042D844(*a1, a2);
    float v9 = (int *)sub_19042D844(*a1, a3);
    int v10 = *v8;
    *unint64_t v8 = *v9;
    *float v9 = v10;
    char v11 = (int *)sub_190448B30(a1[1], 0, a2);
    unint64_t v12 = (int *)sub_190448B30(a1[1], 0, a3);
    int v13 = *v11;
    *char v11 = *v12;
    *unint64_t v12 = v13;
    long long v14 = (int *)sub_190448B30(a1[1], 1uLL, a2);
    float v15 = (int *)sub_190448B30(a1[1], 1uLL, a3);
    int v16 = *v14;
    *long long v14 = *v15;
    *float v15 = v16;
    char v17 = (int *)sub_190448B30(a1[1], 2uLL, a2);
    __n128 result = (int *)sub_190448B30(a1[1], 2uLL, a3);
    int v18 = *v17;
    *char v17 = *result;
    *__n128 result = v18;
  }
  return result;
}

uint64_t sub_19044D544()
{
  uint64_t result = sub_19048B344();
  if (result) {
    operator new();
  }
  return result;
}

void sub_19044D694(_Unwind_Exception *a1)
{
  if (v2) {
    sub_1902D8B58(v2);
  }
  sub_1904DC240(v1);
  MEMORY[0x192FCC980](v1, 0x10F1C40AB944815);
  _Unwind_Resume(a1);
}

void *sub_19044D6DC(void *a1)
{
  *a1 = &unk_1EDFC9068;
  return sub_1904DC240(a1);
}

void sub_19044D6FC(void *a1)
{
  *a1 = &unk_1EDFC9068;
  sub_1904DC240(a1);

  JUMPOUT(0x192FCC980);
}

void sub_19044D750(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (qword_1E929D788 != -1) {
      dispatch_once(&qword_1E929D788, &unk_1EDFD3D00);
    }
    unint64_t v4 = qword_1E929D780;
    if (os_log_type_enabled((os_log_t)qword_1E929D780, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v12 = a2;
      _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_FAULT, "[CLFilteredPressure] Unrecognized notification: %d", buf, 8u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D788 != -1) {
        dispatch_once(&qword_1E929D788, &unk_1EDFD3D00);
      }
      int v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "virtual void CLFilteredPressure::numberOfSpectatorsChanged(int, size_t)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if (a3)
    {
      if (!v6) {
        operator new();
      }
    }
    else if (v6)
    {
      uint64_t v7 = sub_19048B344();
      sub_1902CDE08(v7, 1, *(void *)(a1 + 32));
      uint64_t v8 = *(void *)(a1 + 32);
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      *(void *)(a1 + 56) = 0;
      uint64_t v9 = a1 + 56;
      *(void *)(v9 - 24) = 0;
      *(_DWORD *)(v9 + 36) = 0;
      *(void *)(v9 + 44) = 0;
      *(_DWORD *)(v9 + 824) = 0;
      *(void *)(v9 + 712) = 0;
      *(_DWORD *)(v9 + 720) = 0;
      *(void *)(v9 + 728) = 0;
      *(void *)(v9 + 752) = 0;
      *(void *)(v9 + 8) = 3212836864;
      *(void *)(v9 + 16) = 0;
      *(_DWORD *)(v9 + 28) = 1025758986;
      *(_DWORD *)(v9 + 792) = 0;
      *(_OWORD *)(v9 + 736) = 0u;
    }
  }
}

void sub_19044DA60(_Unwind_Exception *a1)
{
  MEMORY[0x192FCC980](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void sub_19044DA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (_DWORD *)(a2 + 56);
  *(_DWORD *)buf = *(_DWORD *)(a1 + 8);
  *(_DWORD *)char v19 = 0;
  *(void *)&void v19[4] = (unint64_t)(*(double *)a1 * 1000000.0);
  sub_19059AE8C(a2 + 56, (uint64_t)buf);
  unint64_t v5 = *(void *)(a2 + 72);
  float v6 = *(float *)(a2 + 64);
  if ((*(_DWORD *)(a2 + 60) == 2 || *v4 == 2) && v5 > *(void *)(a2 + 48))
  {
    double v15 = (double)v5 / 1000000.0;
    float v16 = v6;
    float v7 = *(float *)(a1 + 12);
    float v17 = v7;
    if (qword_1E929D788 != -1) {
      dispatch_once(&qword_1E929D788, &unk_1EDFD3D00);
    }
    uint64_t v8 = qword_1E929D780;
    if (os_log_type_enabled((os_log_t)qword_1E929D780, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)char v19 = "PressureFiltered";
      *(_WORD *)&v19[8] = 2048;
      *(double *)&v19[10] = v6;
      __int16 v20 = 2048;
      double v21 = v7;
      __int16 v22 = 2048;
      double v23 = (double)v5 / 1000000.0;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEBUG, "Type,%s,pressure,%.6f,temperature,%.3f,timestamp,%f", buf, 0x2Au);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D788 != -1) {
        dispatch_once(&qword_1E929D788, &unk_1EDFD3D00);
      }
      *(_DWORD *)uint64_t v27 = 136315906;
      *(void *)&v27[4] = "PressureFiltered";
      *(_WORD *)&v27[12] = 2048;
      *(double *)&v27[14] = v6;
      __int16 v28 = 2048;
      double v29 = v7;
      *(_WORD *)int v30 = 2048;
      *(double *)&v30[2] = (double)v5 / 1000000.0;
      long long v14 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "void CLFilteredPressure::onPressureData(const CLPressure::Sample *)", "CoreLocation: %s\n", v14);
      if (v14 != (char *)buf) {
        free(v14);
      }
    }
    if (*(unsigned char *)(a2 + 40))
    {
      *(void *)uint64_t v27 = &unk_1EDFCA798;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(float *)int v30 = v6;
      *(float *)&v30[4] = v7;
      *(CFAbsoluteTime *)&v27[8] = Current;
      double v29 = (double)v5 / 1000000.0;
      uint64_t v10 = sub_190570220();
      sub_190571738(v10, (uint64_t)v27);
      sub_190395088(buf);
      sub_1903AE760((uint64_t)buf);
      v26 |= 1u;
      uint64_t v24 = *(void *)&v27[8];
      sub_19040F40C(v25);
      uint64_t v11 = *(void *)(v25 + 8);
      *(unsigned char *)(v11 + 24) |= 1u;
      *(double *)(v11 + 8) = (double)v5 / 1000000.0;
      uint64_t v12 = *(void *)(v25 + 8);
      *(unsigned char *)(v12 + 24) |= 2u;
      *(float *)(v12 + 16) = v6;
      uint64_t v13 = *(void *)(v25 + 8);
      *(unsigned char *)(v13 + 24) |= 4u;
      *(float *)(v13 + 20) = v7;
      sub_19039A590((PB::Base *)buf);
    }
    sub_1902D8BCC(a2, 0, (uint64_t)&v15, 16);
    *(void *)(a2 + 48) = v5;
  }
}

void sub_19044DE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_19039A590((PB::Base *)va);
  _Unwind_Resume(a1);
}

os_log_t sub_19044DE24()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Pressure");
  qword_1E929D780 = (uint64_t)result;
  return result;
}

void sub_19044DE58(uint64_t a1)
{
  sub_1902BC548(a1);

  JUMPOUT(0x192FCC980);
}

uint64_t sub_19044DE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 16))(a3, *(void *)(a1 + 24));
}

void sub_19044ECDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_1902D8B58(v22);
  _Unwind_Resume(a1);
}

void sub_19044F09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_1902D8B58(v20);
  _Unwind_Resume(a1);
}

void sub_19044F3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_1902D8B58(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19044F52C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a13) {
    sub_1902D8B58(a13);
  }
  if (a15) {
    sub_1902D8B58(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19044F654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a13) {
    sub_1902D8B58(a13);
  }
  if (a15) {
    sub_1902D8B58(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_19044F91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_1902D8B58(a14);
  }
  _Unwind_Resume(exception_object);
}

os_log_t sub_19044F960()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Activity");
  qword_1E929D7A8 = (uint64_t)result;
  return result;
}

void *sub_19044F990@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  float v6 = operator new(0x70uLL);
  os_log_t result = sub_19044F9F4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_19044F9E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19044F9F4(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_19044FA68((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_19044FA54(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_19044FA68(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC420](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19044FAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19044FADC@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x70uLL);
  os_log_t result = sub_19044FB38(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_19044FB24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19044FB38(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_19044FBA8((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_19044FB94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_19044FBA8(int a1, uint64_t a2, char *__s)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC410](a2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19044FBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_19044FC14@<X0>(char *a1@<X1>, void *a2@<X8>)
{
  char v4 = operator new(0x70uLL);
  os_log_t result = sub_19044FC70(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_19044FC5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_19044FC70(void *a1, char *__s)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_19044FCE0((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_19044FCCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_19044FCE0(int a1, uint64_t a2, char *__s)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC410](a2, __p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_19044FD30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_19044FD4C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v21 = a4;
  if (a1)
  {
    id v7 = a3;
    xpc_object_t reply = xpc_dictionary_create_reply(a2);
    id v9 = v7;
    uint64_t v12 = (const char *)objc_msgSend_UTF8String(v9, v10, v11);

    xpc_dictionary_set_string(reply, "kRMConnectionMessageNameKey", v12);
    if (v21)
    {
      id v13 = v21;
      float v16 = (const void *)objc_msgSend_bytes(v13, v14, v15);
      size_t v19 = objc_msgSend_length(v13, v17, v18);
      xpc_object_t v20 = xpc_data_create(v16, v19);
      xpc_dictionary_set_value(reply, "kRMConnectionMessageDataKey", v20);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 56), reply);
  }
}

id sub_19044FE40()
{
  if (qword_1E929DDF8 != -1) {
    dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
  }
  v0 = (void *)qword_1E929DE00;

  return v0;
}

void sub_19044FE94(uint64_t a1, void *a2, void *a3)
{
  keys[1] = *(char **)MEMORY[0x1E4F143B8];
  char v5 = a2;
  float v6 = a3;
  if (a1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    id v7 = NSString;
    string = xpc_dictionary_get_string(v5, "kRMConnectionMessageNameKey");
    uint64_t v10 = objc_msgSend_stringWithUTF8String_(v7, v9, (uint64_t)string);
    uint64_t v11 = xpc_dictionary_get_value(v5, "kRMConnectionMessageDataKey");
    uint64_t v12 = v11;
    if (v11 && (bytes_ptr = xpc_data_get_bytes_ptr(v11)) != 0)
    {
      uint64_t v14 = (uint64_t)bytes_ptr;
      id v15 = objc_alloc(MEMORY[0x1E4F1C9B8]);
      size_t length = xpc_data_get_length(v12);
      float32x2_t v73 = objc_msgSend_initWithBytes_length_(v15, v17, v14, length);
    }
    else
    {
      float32x2_t v73 = 0;
    }
    uint64_t v18 = xpc_dictionary_get_value(v5, "kRMConnectionRequestSteamingKey");
    xpc_object_t v20 = (void *)v18;
    if (v10)
    {
      if (!v18)
      {
        if (v6)
        {
          v6[2](v6, v10, v73);
          goto LABEL_61;
        }
        if (objc_msgSend_isEqualToString_(v10, v19, @"kRMConnectionMessagePriorityBoost"))
        {
          if (qword_1E929DDF8 != -1) {
            dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
          }
          float v46 = qword_1E929DE00;
          if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138477827;
            *(void *)&uint8_t buf[4] = v10;
            _os_log_impl(&dword_1902AF000, v46, OS_LOG_TYPE_INFO, "Creating reply to hold onto priority boost: %{private}@", buf, 0xCu);
          }
          xpc_object_t reply = xpc_dictionary_create_reply(v5);
          BOOL v48 = *(NSObject **)(a1 + 64);
          *(void *)(a1 + 64) = reply;
        }
        else
        {
          if ((objc_opt_respondsToSelector() & 1) == 0)
          {
            if (qword_1E929DDF8 != -1) {
              dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
            }
            uint64_t v64 = qword_1E929DE00;
            if (!os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_FAULT)) {
              goto LABEL_61;
            }
            *(_WORD *)buf = 0;
            char v26 = "Message received but the handler doesn't implement the selector 'endpoint:didReceiveMessage:withData:replyBlock:'";
            uint64_t v27 = v64;
            os_log_type_t v28 = OS_LOG_TYPE_FAULT;
            uint32_t v29 = 2;
            goto LABEL_18;
          }
          v75[0] = MEMORY[0x1E4F143A8];
          v75[1] = 3221225472;
          v75[2] = sub_19045099C;
          v75[3] = &unk_1E568D488;
          v75[4] = a1;
          float v76 = v5;
          objc_msgSend_endpoint_didReceiveMessage_withData_replyBlock_(WeakRetained, v63, a1, v10, v73, v75);
          BOOL v48 = v76;
        }

        goto LABEL_61;
      }
      if (objc_msgSend_conformsToProtocol_(WeakRetained, v19, (uint64_t)&unk_1EE01AA88))
      {
        objc_msgSend_endpoint_didReceiveStreamingRequest_withData_(WeakRetained, v21, a1, v10, v73);
        __int16 v22 = v20;
        if (MEMORY[0x192FCDEF0]() == MEMORY[0x1E4F145A0])
        {
          id v30 = objc_loadWeakRetained((id *)(a1 + 24));
          xpc_connection_t v31 = xpc_connection_create_from_endpoint(v22);
          float v72 = v30;
          if (v31)
          {
            connection = v31;
            unint64_t v70 = v6;
            float v68 = (void **)(a1 + 32);
            objc_storeStrong((id *)(a1 + 32), v31);
            float v32 = v30;
            __n128 v33 = *(_xpc_connection_s **)(a1 + 32);
            handler[0] = MEMORY[0x1E4F143A8];
            handler[1] = 3221225472;
            handler[2] = sub_190451210;
            handler[3] = &unk_1E568D4B0;
            handler[4] = a1;
            id v34 = v32;
            xpc_connection_set_event_handler(v33, handler);
            float v35 = *(NSObject **)(a1 + 8);
            uint64_t v36 = (_xpc_connection_s *)*(id *)(a1 + 32);
            xpc_connection_set_target_queue(v36, v35);

            xpc_connection_resume(*(xpc_connection_t *)(a1 + 32));
            xpc_object_t v37 = xpc_string_create("kRMConnectionMessageDataStream");
            keys[0] = "kRMConnectionMessageNameKey";
            id v38 = v37;
            xpc_object_t values = v38;
            xpc_object_t v39 = xpc_dictionary_create((const char *const *)keys, &values, 1uLL);
            *(void *)buf = MEMORY[0x1E4F143A8];
            *(void *)&buf[8] = 3221225472;
            *(void *)&buf[16] = sub_1904515C8;
            *(void *)&buf[24] = &unk_1E568D4D8;
            *(void *)&buf[32] = a1;
            id v40 = v39;
            id v82 = v40;
            int shouldStartStreamingDataToReceiver = objc_msgSend_endpoint_shouldStartStreamingDataToReceiver_(v34, v41, a1, buf);
            id v67 = v34;

            float v42 = v38;
            if (qword_1E929DDF8 != -1) {
              dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
            }
            float v43 = qword_1E929DE00;
            float v6 = v70;
            if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEBUG))
            {
              float v44 = "NO";
              if (shouldStartStreamingDataToReceiver) {
                float v44 = "YES";
              }
              *(_DWORD *)long long v79 = 136315138;
              float v80 = v44;
              _os_log_impl(&dword_1902AF000, v43, OS_LOG_TYPE_DEBUG, "shouldStartStreamingDataToReceiver returned : %s", v79, 0xCu);
            }

            if (shouldStartStreamingDataToReceiver)
            {
              id v24 = 0;
              long long v45 = connection;
            }
            else
            {
              float v51 = &OBJC_IVAR___CMHeadphoneActivityManagerInternal_fLogger;
              if (qword_1E929DDF8 != -1)
              {
                dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
                float v51 = &OBJC_IVAR___CMHeadphoneActivityManagerInternal_fLogger;
              }
              float v52 = *((void *)v51 + 448);
              if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 138412290;
                *(void *)&uint8_t buf[4] = v67;
                _os_log_impl(&dword_1902AF000, v52, OS_LOG_TYPE_ERROR, "Failed to start the streaming with handler %@", buf, 0xCu);
              }
              objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v53, @"RMConnectionStreaming", -2, 0);
              id v24 = (id)objc_claimAutoreleasedReturnValue();
              if (qword_1E929DDF8 != -1) {
                dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
              }
              long long v54 = qword_1E929DE00;
              if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl(&dword_1902AF000, v54, OS_LOG_TYPE_DEFAULT, "Cancelling the streaming connection", buf, 2u);
              }
              long long v45 = connection;
              xpc_connection_cancel(connection);
              uint64_t v55 = *v68;
              *float v68 = 0;
            }
          }
          else
          {
            long long v45 = 0;
            if (qword_1E929DDF8 != -1) {
              dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
            }
            float v49 = qword_1E929DE00;
            if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v22;
              _os_log_impl(&dword_1902AF000, v49, OS_LOG_TYPE_ERROR, "Failed to create connection from endpoint %@", buf, 0xCu);
            }
            objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v50, @"RMConnectionStreaming", -1, 0);
            id v24 = (id)objc_claimAutoreleasedReturnValue();
          }
        }
        else
        {
          if (qword_1E929DDF8 != -1) {
            dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
          }
          double v23 = qword_1E929DE00;
          if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1902AF000, v23, OS_LOG_TYPE_ERROR, "The client did not send streaming endpoint correctly", buf, 2u);
          }
          id v24 = 0;
        }

        id v56 = v24;
        if (v56)
        {
          float v58 = v56;
          id v77 = v56;
          objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(MEMORY[0x1E4F28DB0], v57, (uint64_t)v56, 1, &v77);
          v60 = unint64_t v59 = v6;
          id v61 = v77;

          sub_19044FD4C(a1, v5, @"kRMConnectionMessageError", v60);
          float v6 = v59;
        }
        else
        {
          if (qword_1E929DDF8 != -1) {
            dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
          }
          float v62 = qword_1E929DE00;
          if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1902AF000, v62, OS_LOG_TYPE_INFO, "Streaming session started, sending acknowledgement", buf, 2u);
          }
          sub_19044FD4C(a1, v5, @"kRMConnectionMessageSuccess", 0);
        }
        goto LABEL_61;
      }
      float v65 = sub_19044FE40();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_FAULT))
      {
        *(void *)buf = 68289539;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(void *)&buf[30] = "[handler conformsToProtocol:@protocol(RMConnectionStreamProducingDelegate)]";
        _os_log_impl(&dword_1902AF000, v65, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Start streaming requested but the handler doesn't conform to the RMConnectionStreamProducingDelegate delegate\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      int v66 = sub_19044FE40();
      if (os_signpost_enabled(v66))
      {
        *(void *)buf = 68289539;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(void *)&buf[30] = "[handler conformsToProtocol:@protocol(RMConnectionStreamProducingDelegate)]";
        _os_signpost_emit_with_name_impl(&dword_1902AF000, v66, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Start streaming requested but the handler doesn't conform to the RMConnectionStreamProducingDelegate delegate", "{\"msg%{public}.0s\":\"Start streaming requested but the handler doesn't conform to the RMConnectionStreamProducingDelegate delegate\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      char v5 = sub_19044FE40();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(void *)buf = 68289539;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = "assert";
        *(_WORD *)&buf[28] = 2081;
        *(void *)&buf[30] = "[handler conformsToProtocol:@protocol(RMConnectionStreamProducingDelegate)]";
        _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Start streaming requested but the handler doesn't conform to the RMConnectionStreamProducingDelegate delegate\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      abort_report_np();
    }
    else if (qword_1E929DDF8 == -1)
    {
LABEL_16:
      uint64_t v25 = qword_1E929DE00;
      if (!os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_ERROR))
      {
LABEL_61:

        goto LABEL_62;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "kRMConnectionMessageNameKey";
      char v26 = "XPC message missing key \"%s\"";
      uint64_t v27 = v25;
      os_log_type_t v28 = OS_LOG_TYPE_ERROR;
      uint32_t v29 = 12;
LABEL_18:
      _os_log_impl(&dword_1902AF000, v27, v28, v26, buf, v29);
      goto LABEL_61;
    }
    dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
    goto LABEL_16;
  }
LABEL_62:
}

void sub_19045099C(uint64_t a1, void *a2, void *a3)
{
}

id *sub_1904509B0(void *a1, void *a2, void *a3)
{
  float v6 = a2;
  id v7 = a3;
  if (a1
    && (v14.receiver = a1,
        v14.super_class = (Class)RMConnectionEndpoint,
        (uint64_t v8 = (id *)objc_msgSendSuper2(&v14, sel_init)) != 0))
  {
    id v9 = v8;
    objc_storeStrong(v8 + 7, a2);
    objc_storeStrong(v9 + 1, a3);
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 3221225472;
    handler[2] = sub_190450AC4;
    handler[3] = &unk_1E568D4B0;
    uint64_t v10 = v9;
    id v13 = v10;
    xpc_connection_set_event_handler(v6, handler);
    xpc_connection_set_target_queue(v6, v7);
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_190450AC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = MEMORY[0x192FCDEF0]();
  if (v4 == MEMORY[0x1E4F145A8])
  {
    if (v3 == (id)MEMORY[0x1E4F14520])
    {
      if (qword_1E929DDF8 != -1) {
        dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
      }
      id v7 = qword_1E929DE00;
      if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)uint64_t v10 = 0;
        _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEBUG, "#Warning Connection interrupted!", v10, 2u);
      }
      sub_190450CA8(*(void *)(a1 + 32));
    }
    else if (v3 == (id)MEMORY[0x1E4F14528])
    {
      if (qword_1E929DDF8 != -1) {
        dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
      }
      float v6 = qword_1E929DE00;
      if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEBUG, "#Warning Connection invalidated!", buf, 2u);
      }
      sub_190450D00(*(void *)(a1 + 32));
    }
  }
  else if (v4 == MEMORY[0x1E4F14590])
  {
    sub_19044FE94(*(void *)(a1 + 32), v3, 0);
  }
  else
  {
    if (qword_1E929DDF8 != -1) {
      dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
    }
    char v5 = qword_1E929DE00;
    if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_ERROR, "Got unexpected xpc event", v8, 2u);
    }
  }
}

void sub_190450CA8(uint64_t a1)
{
  if (a1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    objc_msgSend_endpointWasInterrupted_(WeakRetained, v2, a1);
  }
}

void sub_190450D00(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    uint64_t v2 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = 0;

    if (*(void *)(a1 + 32)) {
      sub_190451340(a1);
    }
    if (*(void *)(a1 + 40)) {
      sub_190451AA8(a1);
    }
    id v3 = *(_xpc_connection_s **)(a1 + 56);
    if (v3)
    {
      xpc_connection_cancel(v3);
      uint64_t v4 = *(void **)(a1 + 56);
      *(void *)(a1 + 56) = 0;
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 16));
    objc_msgSend_endpointWasInvalidated_(WeakRetained, v5, a1);
  }
}

void sub_190450DA4(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    id v2 = *(id *)(a1 + 56);
    if (!v2) {
      __assert_rtn("-[RMConnectionEndpoint start]", "RMConnectionEndpoint.m", 212, "self.messagingConnection");
    }

    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
    if (!WeakRetained) {
      __assert_rtn("-[RMConnectionEndpoint start]", "RMConnectionEndpoint.m", 213, "self.dataDelegate");
    }

    id v4 = objc_loadWeakRetained((id *)(a1 + 16));
    if (!v4) {
      __assert_rtn("-[RMConnectionEndpoint start]", "RMConnectionEndpoint.m", 214, "self.connectionDelegate");
    }

    char v5 = *(_xpc_connection_s **)(a1 + 56);
    xpc_connection_resume(v5);
  }
}

void sub_190450E80(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v10 = a2;
  id v5 = a3;
  if (a1)
  {
    if (!*(void *)(a1 + 56))
    {
      id v7 = sub_19044FE40();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        int v12 = 0;
        __int16 v13 = 2082;
        objc_super v14 = "";
        __int16 v15 = 2082;
        float v16 = "assert";
        __int16 v17 = 2081;
        uint64_t v18 = "self.messagingConnection";
        _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Trying to send a message while no connection is in place\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      uint64_t v8 = sub_19044FE40();
      if (os_signpost_enabled(v8))
      {
        *(_DWORD *)buf = 68289539;
        int v12 = 0;
        __int16 v13 = 2082;
        objc_super v14 = "";
        __int16 v15 = 2082;
        float v16 = "assert";
        __int16 v17 = 2081;
        uint64_t v18 = "self.messagingConnection";
        _os_signpost_emit_with_name_impl(&dword_1902AF000, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Trying to send a message while no connection is in place", "{\"msg%{public}.0s\":\"Trying to send a message while no connection is in place\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      id v9 = sub_19044FE40();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        int v12 = 0;
        __int16 v13 = 2082;
        objc_super v14 = "";
        __int16 v15 = 2082;
        float v16 = "assert";
        __int16 v17 = 2081;
        uint64_t v18 = "self.messagingConnection";
        _os_log_impl(&dword_1902AF000, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Trying to send a message while no connection is in place\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      abort_report_np();
    }
    float v6 = sub_1904510D8(v10, v5);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 56), v6);
  }
}

id sub_1904510D8(void *a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = a1;
  id v7 = (const char *)objc_msgSend_UTF8String(v4, v5, v6);
  xpc_object_t v8 = xpc_string_create(v7);
  if (v3)
  {
    id v9 = v3;
    int v12 = (const void *)objc_msgSend_bytes(v9, v10, v11);
    size_t v15 = objc_msgSend_length(v9, v13, v14);
    xpc_object_t v16 = xpc_data_create(v12, v15);
    size_t v17 = 2;
  }
  else
  {
    xpc_object_t v16 = 0;
    size_t v17 = 1;
  }
  *(_OWORD *)keys = xmmword_1E568D540;
  id v18 = v8;
  v23[0] = v18;
  id v19 = v16;
  v23[1] = v19;
  xpc_object_t v20 = xpc_dictionary_create((const char *const *)keys, v23, v17);
  for (uint64_t i = 1; i != -1; --i)

  return v20;
}

void sub_190451210(uint64_t a1, uint64_t a2)
{
  if (MEMORY[0x192FCDEF0](a2) == MEMORY[0x1E4F145A8])
  {
    if (a2 == MEMORY[0x1E4F14520])
    {
      if (qword_1E929DDF8 != -1) {
        dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
      }
      id v4 = qword_1E929DE00;
      if (!os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_13;
      }
      *(_WORD *)buf = 0;
      id v5 = "#Warning Streaming connection interrupted!";
      uint64_t v6 = buf;
    }
    else
    {
      if (a2 != MEMORY[0x1E4F14528]) {
        return;
      }
      if (qword_1E929DDF8 != -1) {
        dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
      }
      id v4 = qword_1E929DE00;
      if (!os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_13;
      }
      __int16 v7 = 0;
      id v5 = "#Warning Streaming connection invalidated!";
      uint64_t v6 = (uint8_t *)&v7;
    }
    _os_log_impl(&dword_1902AF000, v4, OS_LOG_TYPE_DEBUG, v5, v6, 2u);
LABEL_13:
    sub_190451340(*(void *)(a1 + 32));
  }
}

void sub_190451340(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    id v2 = *(_xpc_connection_s **)(a1 + 32);
    if (v2)
    {
      xpc_connection_set_event_handler(v2, &unk_1EDFD1540);
      xpc_connection_cancel(*(xpc_connection_t *)(a1 + 32));
      id v3 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = 0;

      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 24));
      objc_msgSend_endpointShouldStopStreamingData_(WeakRetained, v4, a1);
    }
    else
    {
      id v5 = sub_19044FE40();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 68289539;
        int v10 = 0;
        __int16 v11 = 2082;
        int v12 = "";
        __int16 v13 = 2082;
        uint64_t v14 = "assert";
        __int16 v15 = 2081;
        xpc_object_t v16 = "self.streamingServerConnection";
        _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Asked to stop a stream while no streaming is in progress\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      uint64_t v6 = sub_19044FE40();
      if (os_signpost_enabled(v6))
      {
        *(_DWORD *)buf = 68289539;
        int v10 = 0;
        __int16 v11 = 2082;
        int v12 = "";
        __int16 v13 = 2082;
        uint64_t v14 = "assert";
        __int16 v15 = 2081;
        xpc_object_t v16 = "self.streamingServerConnection";
        _os_signpost_emit_with_name_impl(&dword_1902AF000, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Asked to stop a stream while no streaming is in progress", "{\"msg%{public}.0s\":\"Asked to stop a stream while no streaming is in progress\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      __int16 v7 = sub_19044FE40();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 68289539;
        int v10 = 0;
        __int16 v11 = 2082;
        int v12 = "";
        __int16 v13 = 2082;
        uint64_t v14 = "assert";
        __int16 v15 = 2081;
        xpc_object_t v16 = "self.streamingServerConnection";
        _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Asked to stop a stream while no streaming is in progress\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      }

      abort_report_np();
    }
  }
}

void sub_1904515C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 && *(void *)(v4 + 32))
  {
    id v5 = *(void **)(a1 + 40);
    id v15 = v3;
    id v6 = v3;
    id v9 = (const void *)objc_msgSend_bytes(v6, v7, v8);
    size_t v12 = objc_msgSend_length(v6, v10, v11);
    xpc_dictionary_set_data(v5, "kRMConnectionMessageDataStreamKey", v9, v12);
    uint64_t v13 = *(void *)(a1 + 32);
    if (v13) {
      uint64_t v14 = *(_xpc_connection_s **)(v13 + 32);
    }
    else {
      uint64_t v14 = 0;
    }
    xpc_connection_send_message(v14, *(xpc_object_t *)(a1 + 40));
    id v3 = v15;
  }
}

void sub_190451678(uint64_t a1, void *a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (!a1) {
    goto LABEL_22;
  }
  if (v5 == (id)MEMORY[0x1E4F14520])
  {
    if (qword_1E929DDF8 != -1) {
      dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
    }
    int v10 = qword_1E929DE00;
    if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      uint64_t v11 = "#Warning Streaming connection interrupted";
LABEL_19:
      _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_DEFAULT, v11, v13, 2u);
    }
LABEL_20:
    uint64_t v9 = -3;
    if (!v6) {
      goto LABEL_22;
    }
LABEL_21:
    size_t v12 = objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E4F28C58], v8, @"RMConnectionStreaming", v9, 0, *(void *)v13);
    v6[2](v6, v12);

    goto LABEL_22;
  }
  if (v5 == (id)MEMORY[0x1E4F14528])
  {
    if (qword_1E929DDF8 != -1) {
      dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
    }
    int v10 = qword_1E929DE00;
    if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v13 = 0;
      uint64_t v11 = "#Warning Streaming connection dropped";
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  if (v5 != (id)MEMORY[0x1E4F14550])
  {
    if (qword_1E929DDF8 != -1) {
      dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
    }
    __int16 v7 = qword_1E929DE00;
    if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v13 = 138412290;
      *(void *)&v13[4] = v5;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_ERROR, "Unknown xpc error received %@", v13, 0xCu);
    }
    uint64_t v9 = -4;
    if (v6) {
      goto LABEL_21;
    }
  }
LABEL_22:
}

void sub_1904518A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = MEMORY[0x192FCDEF0]();
  if (v4 == MEMORY[0x1E4F145A8])
  {
    if (qword_1E929DDF8 != -1) {
      dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
    }
    uint64_t v8 = qword_1E929DE00;
    if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_DEBUG, "Error received on the streaming connection", buf, 2u);
    }
    sub_190451678(*(void *)(a1 + 32), v3, *(void **)(a1 + 40));
    sub_190451AA8(*(void *)(a1 + 32));
  }
  else if (v4 == MEMORY[0x1E4F14590])
  {
    uint64_t v5 = xpc_dictionary_get_value(v3, "kRMConnectionMessageDataStreamKey");
    id v6 = (void *)v5;
    if (v5
      && MEMORY[0x192FCDEF0](v5) == MEMORY[0x1E4F14580]
      && (bytes_ptr = xpc_data_get_bytes_ptr(v6)) != 0
      && (uint64_t v10 = (uint64_t)bytes_ptr,
          id v11 = objc_alloc(MEMORY[0x1E4F1C9B8]),
          size_t length = xpc_data_get_length(v6),
          (uint64_t v14 = objc_msgSend_initWithBytes_length_(v11, v13, v10, length)) != 0))
    {
      xpc_object_t v16 = (void *)v14;
      uint64_t v17 = *(void *)(a1 + 32);
      if (v17)
      {
        id WeakRetained = objc_loadWeakRetained((id *)(v17 + 24));
        objc_msgSend_endpoint_didReceiveStreamedData_(WeakRetained, v19, *(void *)(a1 + 32), v16);
      }
      else
      {
        id WeakRetained = 0;
        objc_msgSend_endpoint_didReceiveStreamedData_(0, v15, 0, v14);
      }
    }
    else
    {
      if (qword_1E929DDF8 != -1) {
        dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
      }
      __int16 v7 = qword_1E929DE00;
      if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)xpc_object_t v20 = 0;
        _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_ERROR, "Message without a payload received from the stream connection", v20, 2u);
      }
    }
  }
}

void sub_190451AA8(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    id v2 = *(_xpc_connection_s **)(a1 + 40);
    if (v2)
    {
      xpc_connection_suspend(v2);
      xpc_connection_set_event_handler(*(xpc_connection_t *)(a1 + 40), &unk_1EDFC38A8);
      xpc_connection_resume(*(xpc_connection_t *)(a1 + 40));
      xpc_connection_cancel(*(xpc_connection_t *)(a1 + 40));
      id v3 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = 0;
    }
    uint64_t v4 = *(_xpc_connection_s **)(a1 + 48);
    if (v4)
    {
      xpc_connection_cancel(v4);
      uint64_t v5 = *(void **)(a1 + 48);
      *(void *)(a1 + 48) = 0;
    }
  }
}

void sub_190451B40(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = a2;
  uint64_t v9 = a3;
  uint64_t v10 = a4;
  if (!a1) {
    goto LABEL_7;
  }
  if (*(void *)(a1 + 48))
  {
    id v21 = sub_19044FE40();
    xpc_object_t v16 = &qword_190607000;
    uint64_t v10 = "assert";
    uint64_t v9 = "!self.streamingClientListener";
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      int v28 = 0;
      __int16 v29 = 2082;
      id v30 = "";
      __int16 v31 = 2082;
      float v32 = "assert";
      __int16 v33 = 2081;
      id v34 = "!self.streamingClientListener";
      _os_log_impl(&dword_1902AF000, v21, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Request already in progress\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    __int16 v22 = sub_19044FE40();
    if (os_signpost_enabled(v22))
    {
      *(_DWORD *)buf = 68289539;
      int v28 = 0;
      __int16 v29 = 2082;
      id v30 = "";
      __int16 v31 = 2082;
      float v32 = "assert";
      __int16 v33 = 2081;
      id v34 = "!self.streamingClientListener";
      _os_signpost_emit_with_name_impl(&dword_1902AF000, v22, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Request already in progress", "{\"msg%{public}.0s\":\"Request already in progress\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    uint64_t v8 = sub_19044FE40();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      int v28 = 0;
      __int16 v29 = 2082;
      id v30 = "";
      __int16 v31 = 2082;
      float v32 = "assert";
      __int16 v33 = 2081;
      id v34 = "!self.streamingClientListener";
      _os_log_impl(&dword_1902AF000, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Request already in progress\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }

    abort_report_np();
    goto LABEL_15;
  }
  id v11 = *(id *)(a1 + 8);
  xpc_connection_t v12 = xpc_connection_create(0, v11);
  uint64_t v13 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v12;

  uint64_t v14 = *(_xpc_connection_s **)(a1 + 48);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 3221225472;
  handler[2] = sub_190451F38;
  handler[3] = &unk_1E568D520;
  void handler[4] = a1;
  id v15 = v10;
  char v26 = v15;
  xpc_connection_set_event_handler(v14, handler);
  sub_1904510D8(v8, v9);
  xpc_object_t v16 = (uint64_t *)objc_claimAutoreleasedReturnValue();
  xpc_connection_activate(*(xpc_connection_t *)(a1 + 48));
  xpc_endpoint_t v4 = xpc_endpoint_create(*(xpc_connection_t *)(a1 + 48));
  xpc_dictionary_set_value(v16, "kRMConnectionRequestSteamingKey", v4);
  uint64_t v17 = *(void **)(a1 + 56);
  id v18 = *(NSObject **)(a1 + 8);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  xpc_object_t v23[2] = sub_1904522B0;
  v23[3] = &unk_1E568D520;
  v23[4] = a1;
  id v24 = v15;
  id v19 = v17;
  xpc_connection_send_message_with_reply(v19, v16, v18, v23);

  if (qword_1E929DDF8 != -1) {
LABEL_15:
  }
    dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
  xpc_object_t v20 = qword_1E929DE00;
  if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_DEFAULT, "Streaming request sent", buf, 2u);
  }

LABEL_7:
}

void sub_190451F38(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  if (MEMORY[0x192FCDEF0]() == MEMORY[0x1E4F14578])
  {
    if (qword_1E929DDF8 != -1) {
      dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
    }
    uint64_t v5 = qword_1E929DE00;
    if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v5, OS_LOG_TYPE_DEFAULT, "Peer connection detected", buf, 2u);
    }
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6) {
      __int16 v7 = *(NSObject **)(v6 + 8);
    }
    else {
      __int16 v7 = 0;
    }
    uint64_t v8 = (_xpc_connection_s *)v4;
    xpc_connection_set_target_queue(v8, v7);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(a1 + 40);
    id v11 = v8;
    id v12 = v9;
    if (v10)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(v10 + 24));
      char v15 = objc_msgSend_conformsToProtocol_(WeakRetained, v14, (uint64_t)&unk_1EE005570);

      if ((v15 & 1) == 0)
      {
        uint64_t v17 = sub_19044FE40();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)id v21 = 2082;
          *(void *)&v21[2] = "";
          *(_WORD *)&v21[10] = 2082;
          *(void *)&v21[12] = "assert";
          *(_WORD *)&v21[20] = 2081;
          *(void *)&v21[22] = "[self.dataDelegate conformsToProtocol:@protocol(RMConnectionStreamConsumingDelegate)]";
          _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"The MessageHandler MUST conform to RMConnectionStreamConsumingDelegate\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        id v18 = sub_19044FE40();
        if (os_signpost_enabled(v18))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)id v21 = 2082;
          *(void *)&v21[2] = "";
          *(_WORD *)&v21[10] = 2082;
          *(void *)&v21[12] = "assert";
          *(_WORD *)&v21[20] = 2081;
          *(void *)&v21[22] = "[self.dataDelegate conformsToProtocol:@protocol(RMConnectionStreamConsumingDelegate)]";
          _os_signpost_emit_with_name_impl(&dword_1902AF000, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "The MessageHandler MUST conform to RMConnectionStreamConsumingDelegate", "{\"msg%{public}.0s\":\"The MessageHandler MUST conform to RMConnectionStreamConsumingDelegate\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        id v19 = sub_19044FE40();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 68289539;
          *(_DWORD *)&uint8_t buf[4] = 0;
          *(_WORD *)id v21 = 2082;
          *(void *)&v21[2] = "";
          *(_WORD *)&v21[10] = 2082;
          *(void *)&v21[12] = "assert";
          *(_WORD *)&v21[20] = 2081;
          *(void *)&v21[22] = "[self.dataDelegate conformsToProtocol:@protocol(RMConnectionStreamConsumingDelegate)]";
          _os_log_impl(&dword_1902AF000, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"The MessageHandler MUST conform to RMConnectionStreamConsumingDelegate\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
        }

        abort_report_np();
      }
      objc_storeStrong((id *)(v10 + 40), a2);
      xpc_object_t v16 = *(_xpc_connection_s **)(v10 + 40);
      *(void *)buf = MEMORY[0x1E4F143A8];
      *(void *)id v21 = 3221225472;
      *(void *)&v21[8] = sub_1904518A4;
      *(void *)&v21[16] = &unk_1E568D520;
      *(void *)&v21[24] = v10;
      id v22 = v12;
      xpc_connection_set_event_handler(v16, buf);
      xpc_connection_activate(*(xpc_connection_t *)(v10 + 40));
    }
  }
}

void sub_1904522B0(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = MEMORY[0x192FCDEF0]();
  if (v4 == MEMORY[0x1E4F145A8])
  {
    if (qword_1E929DDF8 != -1) {
      dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
    }
    uint64_t v25 = qword_1E929DE00;
    if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1902AF000, v25, OS_LOG_TYPE_DEFAULT, "Error received while trying to start the streaming connection", buf, 2u);
    }
    sub_190451678(*(void *)(a1 + 32), v3, *(void **)(a1 + 40));
    sub_190451AA8(*(void *)(a1 + 32));
  }
  else if (v4 == MEMORY[0x1E4F14590])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = (void (**)(id, void *))*(id *)(a1 + 40);
    if (v5)
    {
      __int16 v7 = NSString;
      id v8 = v3;
      string = xpc_dictionary_get_string(v8, "kRMConnectionMessageNameKey");
      id v11 = objc_msgSend_stringWithUTF8String_(v7, v10, (uint64_t)string);
      id v12 = xpc_dictionary_get_value(v8, "kRMConnectionMessageError");

      if (v12 && MEMORY[0x192FCDEF0](v12) == MEMORY[0x1E4F14580])
      {
        bytes_ptr = (void *)xpc_data_get_bytes_ptr(v12);
        if (bytes_ptr)
        {
          id v27 = objc_alloc(MEMORY[0x1E4F1C9B8]);
          size_t length = xpc_data_get_length(v12);
          bytes_ptr = objc_msgSend_initWithBytes_length_(v27, v29, (uint64_t)bytes_ptr, length);
        }
      }
      else
      {
        bytes_ptr = 0;
      }
      if (objc_msgSend_isEqualToString_(v11, v13, @"kRMConnectionMessageError"))
      {
        if (bytes_ptr)
        {
          xpc_object_t v16 = (void *)MEMORY[0x1E4F28DC0];
          uint64_t v17 = (void *)MEMORY[0x1E4F1CAD0];
          uint64_t v18 = objc_opt_class();
          xpc_object_t v20 = objc_msgSend_setWithObject_(v17, v19, v18);
          id v32 = 0;
          id v22 = objc_msgSend_unarchivedObjectOfClasses_fromData_error_(v16, v21, (uint64_t)v20, bytes_ptr, &v32);
          id v23 = v32;

          if (v22)
          {
            if (qword_1E929DDF8 != -1) {
              dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
            }
            id v24 = qword_1E929DE00;
            if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138412290;
              id v34 = v22;
              _os_log_impl(&dword_1902AF000, v24, OS_LOG_TYPE_ERROR, "Error while receiving a stream : %@", buf, 0xCu);
            }
            if (v6) {
              v6[2](v6, v22);
            }
          }
          else
          {
            if (qword_1E929DDF8 != -1) {
              dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
            }
            __int16 v31 = qword_1E929DE00;
            if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412290;
              id v34 = v23;
              _os_log_impl(&dword_1902AF000, v31, OS_LOG_TYPE_FAULT, "Can't decode the error returned to the streaming request. Unarchiver error: %@", buf, 0xCu);
            }
          }
        }
        else
        {
          if (qword_1E929DDF8 != -1) {
            dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
          }
          id v30 = qword_1E929DE00;
          if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412290;
            id v34 = v11;
            _os_log_impl(&dword_1902AF000, v30, OS_LOG_TYPE_FAULT, "No data in error message: %@", buf, 0xCu);
          }
        }
        sub_190451AA8(v5);
      }
      else if (objc_msgSend_isEqualToString_(v11, v15, @"kRMConnectionMessageSuccess"))
      {
        if (qword_1E929DDF8 != -1) {
          dispatch_once(&qword_1E929DDF8, &unk_1EDFC3608);
        }
        char v26 = qword_1E929DE00;
        if (os_log_type_enabled((os_log_t)qword_1E929DE00, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1902AF000, v26, OS_LOG_TYPE_DEFAULT, "Streaming connection acknowledged from remote endpoint", buf, 2u);
        }
      }
    }
  }
}

BOOL sub_19045271C(BOOL result)
{
  if (result)
  {
    uint64_t v1 = result;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(result + 8));
    return *(void *)(v1 + 56) != 0;
  }
  return result;
}

id *sub_190452758(id *a1)
{
  if (a1)
  {
    a1 = (id *)a1[7];
    uint64_t v1 = vars8;
  }
  return a1;
}

uint64_t sub_19045280C()
{
  qword_1E929DE00 = (uint64_t)os_log_create("com.apple.RelativeMotion", "IPC");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_190452978(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  id v3 = *(void **)(v2 + 16);
  if (v3 != *(void **)(result + 40) || !*(unsigned char *)(v2 + 40))
  {

    os_log_t result = objc_msgSend_copy(*(void **)(v1 + 40), v4, v5);
    *(void *)(*(void *)(v1 + 32) + 16) = result;
    if (!*(void *)(*(void *)(v1 + 32) + 8)) {
      operator new();
    }
  }
  return result;
}

void sub_190452C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,std::__shared_weak_count *a24,int a25,__int16 a26,char a27,char a28)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  if (a24) {
    sub_1902D8B58(a24);
  }
  _Unwind_Resume(exception_object);
}

void *sub_190452C84(uint64_t a1, const char *a2, uint64_t a3)
{
  os_log_t result = *(void **)(*(void *)(a1 + 32) + 16);
  if (result)
  {
    uint64_t v6 = (id)objc_msgSend_copy(result, a2, a3);
    __int16 v7 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = objc_opt_class();
    id v12 = (NSSet *)objc_msgSend_setWithObjects_(v7, v11, v8, v9, v10, 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v12);
    char v15 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v14, @"CMErrorMessage");
    os_log_t result = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v16, @"CMProxPDPObject");
    if (v15)
    {
      *(unsigned char *)(*(void *)(a1 + 32) + 40) = 0;
      id v19 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v20 = objc_msgSend_integerValue(v15, v17, v18);
      uint64_t v22 = objc_msgSend_errorWithDomain_code_userInfo_(v19, v21, @"CMErrorDomain", v20, 0);
      id v23 = (uint64_t (*)(void *, void *, uint64_t))v6[2];
      id v24 = v6;
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v25 = result;
      if (!result) {
        return result;
      }
      id v23 = (uint64_t (*)(void *, void *, uint64_t))v6[2];
      id v24 = v6;
      uint64_t v22 = 0;
    }
    return (void *)v23(v24, v25, v22);
  }
  return result;
}

void sub_190452DEC(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D708 != -1) {
    dispatch_once(&qword_1E929D708, &unk_1EDFD3BA0);
  }
  id v3 = off_1E929D6F8;
  if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = *(void *)v4;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v8 = v5;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %{public}s", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD3BA0);
    }
    CLConnectionMessage::name(*a2);
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMProxPDPAndALSPhoneManagerInternal _startPDPUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_190452FCC(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = getpid();
  uint64_t ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2);
  if (ExecutablePathFromPid)
  {
    uint64_t v5 = ExecutablePathFromPid;
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD3BA0);
    }
    uint64_t v6 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
    {
      pid_t v7 = getpid();
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138478339;
      uint64_t v11 = v5;
      __int16 v12 = 1025;
      pid_t v13 = v7;
      __int16 v14 = 2049;
      uint64_t v15 = v8;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "Client connection interrupt, %{private}@, %{private}d, %{private}p", buf, 0x1Cu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD3BA0);
      }
      getpid();
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMProxPDPAndALSPhoneManagerInternal _startPDPUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

uint64_t sub_190453250(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  id v3 = *(void **)(v2 + 24);
  if (v3 != *(void **)(result + 40) || !*(unsigned char *)(v2 + 41))
  {

    os_log_t result = objc_msgSend_copy(*(void **)(v1 + 40), v4, v5);
    *(void *)(*(void *)(v1 + 32) + 24) = result;
    if (!*(void *)(*(void *)(v1 + 32) + 8)) {
      operator new();
    }
  }
  return result;
}

void sub_19045351C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a11) {
    sub_1902D8B58(a11);
  }
  sub_1902D8B58(v27);
  _Unwind_Resume(a1);
}

void *sub_1904535BC(uint64_t a1, const char *a2, uint64_t a3)
{
  os_log_t result = *(void **)(*(void *)(a1 + 32) + 24);
  if (result)
  {
    uint64_t v6 = (id)objc_msgSend_copy(result, a2, a3);
    pid_t v7 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v8 = objc_opt_class();
    uint64_t v9 = objc_opt_class();
    uint64_t v10 = objc_opt_class();
    __int16 v12 = (NSSet *)objc_msgSend_setWithObjects_(v7, v11, v8, v9, v10, 0);
    DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v12);
    uint64_t v15 = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v14, @"CMErrorMessage");
    os_log_t result = objc_msgSend_objectForKeyedSubscript_(DictionaryOfClasses, v16, @"CMALSPhoneObject");
    if (v15)
    {
      *(unsigned char *)(*(void *)(a1 + 32) + 41) = 0;
      id v19 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v20 = objc_msgSend_integerValue(v15, v17, v18);
      uint64_t v22 = objc_msgSend_errorWithDomain_code_userInfo_(v19, v21, @"CMErrorDomain", v20, 0);
      id v23 = (uint64_t (*)(void *, void *, uint64_t))v6[2];
      id v24 = v6;
      uint64_t v25 = 0;
    }
    else
    {
      uint64_t v25 = result;
      if (!result) {
        return result;
      }
      id v23 = (uint64_t (*)(void *, void *, uint64_t))v6[2];
      id v24 = v6;
      uint64_t v22 = 0;
    }
    return (void *)v23(v24, v25, v22);
  }
  return result;
}

void sub_190453724(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (qword_1E929D708 != -1) {
    dispatch_once(&qword_1E929D708, &unk_1EDFD3BA0);
  }
  id v3 = off_1E929D6F8;
  if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v4 = CLConnectionMessage::name(*a2);
    if (*(char *)(v4 + 23) >= 0) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = *(void *)v4;
    }
    *(_DWORD *)buf = 136446210;
    uint64_t v8 = v5;
    _os_log_impl(&dword_1902AF000, v3, OS_LOG_TYPE_DEBUG, "Default handler received message %{public}s", buf, 0xCu);
  }
  if (sub_1902D8400(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD3BA0);
    }
    CLConnectionMessage::name(*a2);
    uint64_t v6 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 2, "-[CMProxPDPAndALSPhoneManagerInternal _startALSPhoneUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v6);
    if (v6 != (char *)buf) {
      free(v6);
    }
  }
}

void sub_190453904(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = getpid();
  uint64_t ExecutablePathFromPid = objc_msgSend_getExecutablePathFromPid_(CMMotionUtils, v3, v2);
  if (ExecutablePathFromPid)
  {
    uint64_t v5 = ExecutablePathFromPid;
    if (qword_1E929D708 != -1) {
      dispatch_once(&qword_1E929D708, &unk_1EDFD3BA0);
    }
    uint64_t v6 = off_1E929D6F8;
    if (os_log_type_enabled((os_log_t)off_1E929D6F8, OS_LOG_TYPE_DEFAULT))
    {
      pid_t v7 = getpid();
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138478339;
      uint64_t v11 = v5;
      __int16 v12 = 1025;
      pid_t v13 = v7;
      __int16 v14 = 2049;
      uint64_t v15 = v8;
      _os_log_impl(&dword_1902AF000, v6, OS_LOG_TYPE_DEFAULT, "Client connection interrupt, %{private}@, %{private}d, %{private}p", buf, 0x1Cu);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929D708 != -1) {
        dispatch_once(&qword_1E929D708, &unk_1EDFD3BA0);
      }
      getpid();
      uint64_t v9 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "-[CMProxPDPAndALSPhoneManagerInternal _startALSPhoneUpdatesWithHandler:]_block_invoke", "CoreLocation: %s\n", v9);
      if (v9 != (char *)buf) {
        free(v9);
      }
    }
  }
}

os_log_t sub_190453D0C()
{
  os_log_t result = os_log_create("com.apple.locationd.Motion", "Eclipse");
  off_1E929D6F8 = result;
  return result;
}

void *sub_190453D3C@<X0>(char *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x70uLL);
  os_log_t result = sub_190453DA0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_190453D8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_190453DA0(void *a1, char *__s, void *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EDFD0DA0;
  sub_190453E14((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_190453E00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_190453E14(int a1, uint64_t a2, char *__s, void *a4)
{
  sub_1902C3F54(__p, __s);
  MEMORY[0x192FCC420](a2, __p, *a4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_190453E6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_190453F70(const char *a1)
{
  uint64_t v2 = getpwnam("mobile");
  if (v2)
  {
    uid_t pw_uid = v2->pw_uid;
    gid_t pw_gid = v2->pw_gid;
  }
  else
  {
    uid_t pw_uid = 501;
    gid_t pw_gid = 501;
  }

  return lchown(a1, pw_uid, pw_gid);
}

uint64_t sub_190453FC4(unsigned char *a1, uid_t a2, gid_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  bzero(v11, 0x400uLL);
  int v6 = *a1;
  if (!*a1) {
    return 1;
  }
  unint64_t v7 = 0;
  uint64_t v8 = a1 + 1;
  while (1)
  {
    v11[v7] = v6;
    if (v6 != 47 || !stat(v11, &v10)) {
      goto LABEL_7;
    }
    if (mkdir(v11, 0x1FFu)) {
      return 0;
    }
    lchown(v11, a2, a3);
    lchmod(v11, 0x1C0u);
LABEL_7:
    uint64_t result = 1;
    if (v7 <= 0x3FD)
    {
      int v6 = v8[v7++];
      if (v6) {
        continue;
      }
    }
    return result;
  }
}

uint64_t sub_1904540C0(const char *a1, const char *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = malloc_type_malloc(0x400uLL, 0x93D02233uLL);
  if (!v4) {
    goto LABEL_30;
  }
  char v5 = fopen(a1, "rb");
  if (!v5)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
    }
    uint64_t v12 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v13 = *__error();
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = a1;
      __int16 v23 = 1026;
      int v24 = v13;
      _os_log_impl(&dword_1902AF000, v12, OS_LOG_TYPE_FAULT, "cannot open source file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    uint64_t v11 = 0;
    if (!sub_1902D8400(115, 0)) {
      goto LABEL_38;
    }
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
    }
    __error();
    __int16 v14 = (char *)_os_log_send_and_compose_impl();
    sub_1902D398C("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "CoreLocation: %s\n", v14);
    if (v14 != (char *)buf) {
      free(v14);
    }
LABEL_30:
    uint64_t v11 = 0;
    goto LABEL_38;
  }
  int v6 = v5;
  unint64_t v7 = fopen(a2, "wb");
  if (!v7)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
    }
    uint64_t v15 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v16 = *__error();
      *(_DWORD *)buf = 136446466;
      uint64_t v22 = a2;
      __int16 v23 = 1026;
      int v24 = v16;
      _os_log_impl(&dword_1902AF000, v15, OS_LOG_TYPE_FAULT, "cannot open target file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
      }
      __error();
      id v19 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "CoreLocation: %s\n", v19);
      if (v19 != (char *)buf) {
        free(v19);
      }
    }
    fclose(v6);
    goto LABEL_30;
  }
  uint64_t v8 = v7;
  while (1)
  {
    if (feof(v6))
    {
      uint64_t v11 = 1;
      goto LABEL_37;
    }
    size_t v9 = fread(v4, 1uLL, 0x400uLL, v6);
    if (v9 == -1) {
      break;
    }
    if (v9 != fwrite(v4, 1uLL, v9, v8))
    {
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
      }
      stat v10 = off_1EB3BE880;
      if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v22 = a2;
        _os_log_impl(&dword_1902AF000, v10, OS_LOG_TYPE_FAULT, "error writing target file: %{public}s", buf, 0xCu);
      }
      uint64_t v11 = 0;
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE888 == -1) {
          goto LABEL_44;
        }
LABEL_47:
        dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
LABEL_44:
        uint64_t v20 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "CoreLocation: %s\n", v20);
        if (v20 != (char *)buf) {
          free(v20);
        }
        uint64_t v11 = 0;
        goto LABEL_37;
      }
      goto LABEL_37;
    }
  }
  if (qword_1EB3BE888 != -1) {
    dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
  }
  uint64_t v17 = off_1EB3BE880;
  if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    uint64_t v22 = a1;
    _os_log_impl(&dword_1902AF000, v17, OS_LOG_TYPE_FAULT, "error reading source file: %{public}s", buf, 0xCu);
  }
  uint64_t v11 = 0;
  if (sub_1902D8400(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1EB3BE888 != -1) {
      goto LABEL_47;
    }
    goto LABEL_44;
  }
LABEL_37:
  fclose(v6);
  fclose(v8);
LABEL_38:
  free(v4);
  return v11;
}

uint64_t sub_190454728(const char *a1, const char *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = NSString;
  char v5 = objc_msgSend_stringWithUTF8String_(NSString, a2, (uint64_t)a2);
  uint64_t PathComponent = objc_msgSend_lastPathComponent(v5, v6, v7);
  stat v10 = objc_msgSend_stringWithFormat_(v4, v9, @"compress:%@", PathComponent);
  uint64_t v13 = objc_msgSend_UTF8String(v10, v11, v12);
  sub_190455700((uint64_t *)v35, v13, 0);
  int bzerror = 0;
  __int16 v14 = malloc_type_malloc(0x400uLL, 0x72AACFCCuLL);
  if (!v14)
  {
LABEL_38:
    uint64_t v19 = 0;
    goto LABEL_39;
  }
  uint64_t v15 = fopen(a1, "rb");
  if (!v15)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
    }
    uint64_t v22 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v23 = *__error();
      *(_DWORD *)buf = 136446466;
      float v42 = a1;
      __int16 v43 = 1026;
      int v44 = v23;
      _os_log_impl(&dword_1902AF000, v22, OS_LOG_TYPE_FAULT, "cannot open source file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
      }
      int v24 = *__error();
      int v37 = 136446466;
      id v38 = a1;
      __int16 v39 = 1026;
      int v40 = v24;
      uint64_t v25 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v25);
      if (v25 != (char *)buf) {
        free(v25);
      }
    }
    goto LABEL_38;
  }
  int v16 = fopen(a2, "wb");
  if (!v16)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
    }
    char v26 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      int v27 = *__error();
      *(_DWORD *)buf = 136446466;
      float v42 = a1;
      __int16 v43 = 1026;
      int v44 = v27;
      _os_log_impl(&dword_1902AF000, v26, OS_LOG_TYPE_FAULT, "cannot open target file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
      }
      int v32 = *__error();
      int v37 = 136446466;
      id v38 = a1;
      __int16 v39 = 1026;
      int v40 = v32;
      __int16 v33 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v33);
      if (v33 != (char *)buf) {
        free(v33);
      }
    }
    fclose(v15);
    goto LABEL_38;
  }
  uint64_t v17 = BZ2_bzWriteOpen(&bzerror, v16, 1, 0, 0);
  if (bzerror)
  {
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
    }
    uint64_t v18 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446466;
      float v42 = a2;
      __int16 v43 = 1026;
      int v44 = bzerror;
      _os_log_impl(&dword_1902AF000, v18, OS_LOG_TYPE_FAULT, "cannot open compression stream: %{public}s, bzerror %{public}d", buf, 0x12u);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
LABEL_67:
      }
        dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
LABEL_56:
      int v37 = 136446466;
      id v38 = a2;
      __int16 v39 = 1026;
      int v40 = bzerror;
      id v30 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v30);
LABEL_57:
      if (v30 != (char *)buf) {
        free(v30);
      }
    }
  }
  else
  {
    while (1)
    {
      if (feof(v15))
      {
        uint64_t v19 = 1;
        goto LABEL_11;
      }
      size_t v21 = fread(v14, 1uLL, 0x400uLL, v15);
      if (v21 == -1) {
        break;
      }
      BZ2_bzWrite(&bzerror, v17, v14, v21);
      if (bzerror)
      {
        if (qword_1EB3BE888 != -1) {
          dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
        }
        __int16 v31 = off_1EB3BE880;
        if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446466;
          float v42 = a2;
          __int16 v43 = 1026;
          int v44 = bzerror;
          _os_log_impl(&dword_1902AF000, v31, OS_LOG_TYPE_FAULT, "error writing target file: %{public}s, bzerror: %{public}d", buf, 0x12u);
        }
        if (!sub_1902D8400(115, 0)) {
          goto LABEL_10;
        }
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE888 != -1) {
          goto LABEL_67;
        }
        goto LABEL_56;
      }
    }
    if (qword_1EB3BE888 != -1) {
      dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
    }
    __int16 v29 = off_1EB3BE880;
    if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      float v42 = a1;
      _os_log_impl(&dword_1902AF000, v29, OS_LOG_TYPE_FAULT, "error reading source file: %{public}s", buf, 0xCu);
    }
    if (sub_1902D8400(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
      }
      int v37 = 136446210;
      id v38 = a1;
      id v30 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v30);
      goto LABEL_57;
    }
  }
LABEL_10:
  uint64_t v19 = 0;
LABEL_11:
  fclose(v15);
  if (v17)
  {
    BZ2_bzWriteClose(&bzerror, v17, 0, 0, 0);
    if (bzerror)
    {
      if (qword_1EB3BE888 != -1) {
        dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
      }
      uint64_t v20 = off_1EB3BE880;
      if (os_log_type_enabled((os_log_t)off_1EB3BE880, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446466;
        float v42 = a2;
        __int16 v43 = 1026;
        int v44 = bzerror;
        _os_log_impl(&dword_1902AF000, v20, OS_LOG_TYPE_FAULT, "error closing target file: %{public}s, bzerror: %{public}d", buf, 0x12u);
      }
      if (sub_1902D8400(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1EB3BE888 != -1) {
          dispatch_once(&qword_1EB3BE888, &unk_1EDFC3978);
        }
        int v37 = 136446466;
        id v38 = a2;
        __int16 v39 = 1026;
        int v40 = bzerror;
        id v34 = (char *)_os_log_send_and_compose_impl();
        sub_1902D398C("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "CoreLocation: %s\n", v34);
        if (v34 != (char *)buf) {
          free(v34);
        }
      }
    }
  }
  fclose(v16);
LABEL_39:
  free(v14);
  sub_190455930(v35);
  return v19;
}

void sub_190455128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_190455930((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_190455148(const __CFString *a1, const __CFString *a2, Boolean *a3)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  char v30 = 0;
  if (a3) {
    char v5 = a3;
  }
  else {
    char v5 = (Boolean *)&v30;
  }
  *char v5 = 0;
  int v6 = (const void *)CFCopyUserName();
  if (CFEqual(v6, @"mobile"))
  {
    uint64_t AppBooleanValue = CFPreferencesGetAppBooleanValue(a1, a2, v5);
    if (!*v5)
    {
      stat v10 = NSString;
      uint64_t v11 = (char *)objc_msgSend_UTF8String(@"mobile", v7, v8);
      sub_1902C3F54(v28, v11);
      sub_1902B90E0((uint64_t)v28, __p);
      if (v32 >= 0) {
        uint64_t v13 = objc_msgSend_stringWithUTF8String_(v10, v12, (uint64_t)__p);
      }
      else {
        uint64_t v13 = objc_msgSend_stringWithUTF8String_(v10, v12, (uint64_t)__p[0]);
      }
      uint64_t v15 = (void *)v13;
      uint64_t v16 = objc_msgSend_componentsJoinedByString_(&unk_1EE0018F0, v14, @"/");
      uint64_t v18 = objc_msgSend_stringByAppendingPathComponent_(v15, v17, v16);
      uint64_t v20 = objc_msgSend_stringByAppendingString_(v18, v19, @"/");
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      __p[0] = v20;
      __p[1] = (void *)a2;
      CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFArrayRef v22 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)__p, 2, MEMORY[0x1E4F1D510]);
      if (v22)
      {
        CFStringRef v23 = CFStringCreateByCombiningStrings(v21, v22, &stru_1EDFD5D50);
        if (v23)
        {
          uint64_t AppBooleanValue = CFPreferencesGetAppBooleanValue(a1, v23, v5);
          CFRelease(v23);
        }
        CFRelease(v22);
      }
    }
  }
  else
  {
    CFPropertyListRef v24 = CFPreferencesCopyValue(a1, a2, @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    if (v24)
    {
      uint64_t v25 = v24;
      CFTypeID v26 = CFGetTypeID(v24);
      if (v26 == CFBooleanGetTypeID())
      {
        *char v5 = 1;
        uint64_t AppBooleanValue = CFEqual(v25, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      }
      else if (v26 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)v25))
      {
        *char v5 = 1;
        LODWORD(__p[0]) = 0;
        CFNumberGetValue((CFNumberRef)v25, kCFNumberIntType, __p);
        uint64_t AppBooleanValue = LODWORD(__p[0]) != 0;
      }
      else
      {
        uint64_t AppBooleanValue = 0;
      }
      CFRelease(v25);
    }
    else
    {
      return 0;
    }
  }
  return AppBooleanValue;
}

void sub_1904553C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1904553FC(FILE *a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint32_t v2 = _dyld_image_count();
  uint64_t v3 = v2;
  char v29 = (unint64_t *)malloc_type_calloc(v2, 0x38uLL, 0x105004076241286uLL);
  if (v2 && v29)
  {
    uint32_t v4 = 0;
    do
    {
      image_name = _dyld_get_image_name(v4);
      size_t v6 = (size_t)&image_name[strlen(image_name) + 1];
      do
      {
        int v7 = *(unsigned __int8 *)(v6 - 2);
        --v6;
      }
      while (v7 != 47);
      image_header = _dyld_get_image_header(v4);
      size_t v9 = image_header;
      stat v10 = *(const mach_header **)&image_header->cputype;
      uint32_t ncmds = image_header->ncmds;
      if (ncmds)
      {
        uint64_t v12 = 0;
        p_cputype = &image_header[1].cputype;
        do
        {
          if (*p_cputype == 1)
          {
            if (!strncmp((const char *)p_cputype + 8, "__TEXT", 6uLL)) {
              uint64_t v12 = (const mach_header *)((char *)v12 + p_cputype[7]);
            }
          }
          else if (*p_cputype == 27)
          {
            v30[0] = *(_OWORD *)(p_cputype + 2);
          }
          p_cputype = (int32_t *)((char *)p_cputype + p_cputype[1]);
          --ncmds;
        }
        while (ncmds);
      }
      else
      {
        uint64_t v12 = 0;
      }
      uint64_t v14 = 0;
      uint64_t v15 = v29;
      while (1)
      {
        unint64_t v17 = *v15;
        v15 += 7;
        unint64_t v16 = v17;
        if (v17 >= (unint64_t)v9 || v16 == 0) {
          break;
        }
        if (v3 == ++v14)
        {
          uint64_t v14 = v3;
          int v19 = v3;
          goto LABEL_24;
        }
      }
      int v19 = v14;
LABEL_24:
      uint64_t v20 = (const mach_header **)&v29[7 * v14];
      memmove(v20 + 7, v20, 56 * (v3 + ~v19));
      void *v20 = v9;
      v20[1] = v12;
      *((_OWORD *)v20 + 1) = v30[0];
      v20[4] = (const mach_header *)image_name;
      void v20[5] = (const mach_header *)v6;
      v20[6] = v10;
      ++v4;
    }
    while (v4 != v3);
  }
  fwrite("Binary Images:\n", 0xFuLL, 1uLL, a1);
  if (v3)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      CFArrayRef v22 = (char *)&v29[7 * i];
      long long v23 = *((_OWORD *)v22 + 1);
      v30[0] = *(_OWORD *)v22;
      v30[1] = v23;
      long long v31 = *((_OWORD *)v22 + 2);
      uint64_t v32 = *((void *)v22 + 6);
      CFPropertyListRef v24 = "other";
      if (v32 != 16777228)
      {
        uint64_t v25 = "unknown";
        if (HIDWORD(v32) == 9) {
          uint64_t v25 = "armv7";
        }
        CFPropertyListRef v24 = "armv6";
        if (HIDWORD(v32) != 6) {
          CFPropertyListRef v24 = v25;
        }
      }
      int v28 = v24;
      if (i) {
        uint64_t v26 = 32;
      }
      else {
        uint64_t v26 = 43;
      }
      fprintf(a1, "%16p - %lld %c%s %s <", *(const void **)&v30[0], (void)((v30[0] + __PAIR128__(-1, 0)) >> 64), v26, *((const char **)&v31 + 1), v28);
      for (uint64_t j = 16; j != 32; ++j)
        fprintf(a1, "%02X", *((unsigned __int8 *)v30 + j));
      fprintf(a1, "> %s\n", (const char *)v31);
    }
  }

  free(v29);
}

uint64_t *sub_190455700(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *a1 = os_transaction_create();
  a1[1] = 0;
  if (!a3)
  {
    a1[1] = (uint64_t)(id)objc_msgSend_stringWithUTF8String_(NSString, v6, a2);
    if (qword_1E929DA78 != -1) {
      dispatch_once(&qword_1E929DA78, &unk_1EDFC2000);
    }
    int v7 = qword_1E929DA80;
    if (os_log_type_enabled((os_log_t)qword_1E929DA80, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[1];
      *(_DWORD *)buf = 134349314;
      uint64_t v12 = a1;
      __int16 v13 = 2114;
      uint64_t v14 = v8;
      _os_log_impl(&dword_1902AF000, v7, OS_LOG_TYPE_DEFAULT, "os_transaction created: (%{public}p) %{public}@", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929DA78 != -1) {
        dispatch_once(&qword_1E929DA78, &unk_1EDFC2000);
      }
      stat v10 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "CLAutoOSTransaction::CLAutoOSTransaction(const char *, LoggingPolicy)", "CoreLocation: %s\n", v10);
      if (v10 != (char *)buf) {
        free(v10);
      }
    }
  }
  return a1;
}

os_log_t sub_190455900()
{
  os_log_t result = os_log_create("com.apple.locationd.Utility", "QA");
  qword_1E929DA80 = (uint64_t)result;
  return result;
}

id *sub_190455930(id *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a1[1])
  {
    if (qword_1E929DA78 != -1) {
      dispatch_once(&qword_1E929DA78, &unk_1EDFC2000);
    }
    uint32_t v2 = qword_1E929DA80;
    if (os_log_type_enabled((os_log_t)qword_1E929DA80, OS_LOG_TYPE_DEFAULT))
    {
      id v3 = a1[1];
      *(_DWORD *)buf = 134349314;
      int v7 = a1;
      __int16 v8 = 2114;
      id v9 = v3;
      _os_log_impl(&dword_1902AF000, v2, OS_LOG_TYPE_DEFAULT, "os_transaction releasing: (%{public}p) %{public}@", buf, 0x16u);
    }
    if (sub_1902D8400(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1E929DA78 != -1) {
        dispatch_once(&qword_1E929DA78, &unk_1EDFC2000);
      }
      char v5 = (char *)_os_log_send_and_compose_impl();
      sub_1902D398C("Generic", 1, 0, 2, "CLAutoOSTransaction::~CLAutoOSTransaction()", "CoreLocation: %s\n", v5);
      if (v5 != (char *)buf) {
        free(v5);
      }
    }

    a1[1] = 0;
  }

  *a1 = 0;
  return a1;
}

void sub_190455B20(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_1902E67BC(a1);
}

void sub_190455B2C(void *a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *a1 = 0;
  sub_1902B95B8(a1 + 1);
}

void sub_190455F88(_Unwind_Exception *a1)
{
  sub_1904674AC(v2);
  sub_190348AE8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1904560B8()
{
}

uint64_t *sub_1904560C0(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  (*(void (**)(uint64_t *))(a1[1] + 16))(a1 + 1);
  if (*a1) {
    sub_190387510(*a1);
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  sub_1904674AC(v2);
  sub_190348AE8(a1, 0);
  return a1;
}

uint64_t sub_190456160(uint64_t *a1, int *a2)
{
  uint64_t v276 = *MEMORY[0x1E4F143B8];
  char v5 = a1 + 1;
  uint64_t v4 = a1[1];
  double v271 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  __int16 v273 = 256;
  if (!*a1) {
    return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
  }
  sub_190395088(v267);
  sub_1903AD7A0((uint64_t)v267);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  v270 |= 1u;
  CFAbsoluteTime v269 = Current;
  sub_19035DA24(v268);
  uint64_t v7 = *(void *)(v268 + 72);
  uint64_t v8 = *((void *)a2 + 8);
  *(unsigned char *)(v7 + 152) |= 2u;
  *(void *)(v7 + 136) = v8;
  uint64_t v9 = *(void *)(v268 + 72);
  uint64_t v10 = *((void *)a2 + 7);
  *(unsigned char *)(v9 + 152) |= 1u;
  *(void *)(v9 + 128) = v10;
  uint64_t v11 = v268;
  LODWORD(v10) = a2[27];
  *(_WORD *)(v268 + 116) |= 0x200u;
  *(_DWORD *)(v11 + 108) = v10;
  uint64_t v12 = v268;
  uint64_t v13 = *((void *)a2 + 14);
  *(_WORD *)(v268 + 116) |= 1u;
  *(void *)(v12 + 56) = v13;
  uint64_t v14 = v268;
  *(float *)&uint64_t v8 = *((double *)a2 + 9);
  *(_WORD *)(v268 + 116) |= 8u;
  *(_DWORD *)(v14 + 84) = v8;
  uint64_t v15 = v268;
  *(float *)&uint64_t v8 = *((double *)a2 + 15);
  *(_WORD *)(v268 + 116) |= 0x80u;
  *(_DWORD *)(v15 + 100) = v8;
  unint64_t v16 = *(void **)(v268 + 72);
  int v17 = *a2;
  uint64_t v18 = (char *)v16[8];
  unint64_t v19 = v16[9];
  if ((unint64_t)v18 >= v19)
  {
    CFAllocatorRef v21 = (char *)v16[7];
    uint64_t v22 = (v18 - v21) >> 2;
    if ((unint64_t)(v22 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v23 = v19 - (void)v21;
    unint64_t v24 = (uint64_t)(v19 - (void)v21) >> 1;
    if (v24 <= v22 + 1) {
      unint64_t v24 = v22 + 1;
    }
    if (v23 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      uint64_t v26 = (char *)sub_190347D04((uint64_t)(v16 + 9), v25);
      CFAllocatorRef v21 = (char *)v16[7];
      uint64_t v18 = (char *)v16[8];
    }
    else
    {
      uint64_t v26 = 0;
    }
    int v27 = &v26[4 * v22];
    int v28 = &v26[4 * v25];
    *(_DWORD *)int v27 = v17;
    uint64_t v20 = v27 + 4;
    while (v18 != v21)
    {
      int v29 = *((_DWORD *)v18 - 1);
      v18 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    v16[7] = v27;
    v16[8] = v20;
    v16[9] = v28;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v18 = v17;
    uint64_t v20 = v18 + 4;
  }
  v16[8] = v20;
  char v30 = *(void **)(v268 + 72);
  int v31 = a2[1];
  uint64_t v32 = (char *)v30[8];
  unint64_t v33 = v30[9];
  if ((unint64_t)v32 >= v33)
  {
    uint64_t v35 = (char *)v30[7];
    uint64_t v36 = (v32 - v35) >> 2;
    if ((unint64_t)(v36 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v37 = v33 - (void)v35;
    unint64_t v38 = (uint64_t)(v33 - (void)v35) >> 1;
    if (v38 <= v36 + 1) {
      unint64_t v38 = v36 + 1;
    }
    if (v37 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v38;
    }
    if (v39)
    {
      int v40 = (char *)sub_190347D04((uint64_t)(v30 + 9), v39);
      uint64_t v35 = (char *)v30[7];
      uint64_t v32 = (char *)v30[8];
    }
    else
    {
      int v40 = 0;
    }
    float v41 = &v40[4 * v36];
    float v42 = &v40[4 * v39];
    *(_DWORD *)float v41 = v31;
    id v34 = v41 + 4;
    while (v32 != v35)
    {
      int v43 = *((_DWORD *)v32 - 1);
      v32 -= 4;
      *((_DWORD *)v41 - 1) = v43;
      v41 -= 4;
    }
    v30[7] = v41;
    v30[8] = v34;
    v30[9] = v42;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v32 = v31;
    id v34 = v32 + 4;
  }
  v30[8] = v34;
  int v44 = *(void **)(v268 + 72);
  int v45 = a2[2];
  float v46 = (char *)v44[8];
  unint64_t v47 = v44[9];
  if ((unint64_t)v46 >= v47)
  {
    float v49 = (char *)v44[7];
    uint64_t v50 = (v46 - v49) >> 2;
    if ((unint64_t)(v50 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v51 = v47 - (void)v49;
    unint64_t v52 = (uint64_t)(v47 - (void)v49) >> 1;
    if (v52 <= v50 + 1) {
      unint64_t v52 = v50 + 1;
    }
    if (v51 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v52;
    }
    if (v53)
    {
      long long v54 = (char *)sub_190347D04((uint64_t)(v44 + 9), v53);
      float v49 = (char *)v44[7];
      float v46 = (char *)v44[8];
    }
    else
    {
      long long v54 = 0;
    }
    uint64_t v55 = &v54[4 * v50];
    id v56 = &v54[4 * v53];
    *(_DWORD *)uint64_t v55 = v45;
    BOOL v48 = v55 + 4;
    while (v46 != v49)
    {
      int v57 = *((_DWORD *)v46 - 1);
      v46 -= 4;
      *((_DWORD *)v55 - 1) = v57;
      v55 -= 4;
    }
    v44[7] = v55;
    v44[8] = v48;
    v44[9] = v56;
    if (v49) {
      operator delete(v49);
    }
  }
  else
  {
    *(_DWORD *)float v46 = v45;
    BOOL v48 = v46 + 4;
  }
  v44[8] = v48;
  float v58 = *(void **)(v268 + 72);
  int v59 = a2[3];
  float v60 = (char *)v58[8];
  unint64_t v61 = v58[9];
  if ((unint64_t)v60 >= v61)
  {
    float v63 = (char *)v58[7];
    uint64_t v64 = (v60 - v63) >> 2;
    if ((unint64_t)(v64 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v65 = v61 - (void)v63;
    unint64_t v66 = (uint64_t)(v61 - (void)v63) >> 1;
    if (v66 <= v64 + 1) {
      unint64_t v66 = v64 + 1;
    }
    if (v65 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v66;
    }
    if (v67)
    {
      float v68 = (char *)sub_190347D04((uint64_t)(v58 + 9), v67);
      float v63 = (char *)v58[7];
      float v60 = (char *)v58[8];
    }
    else
    {
      float v68 = 0;
    }
    BOOL v69 = &v68[4 * v64];
    unint64_t v70 = &v68[4 * v67];
    *(_DWORD *)BOOL v69 = v59;
    float v62 = v69 + 4;
    while (v60 != v63)
    {
      int v71 = *((_DWORD *)v60 - 1);
      v60 -= 4;
      *((_DWORD *)v69 - 1) = v71;
      v69 -= 4;
    }
    v58[7] = v69;
    v58[8] = v62;
    v58[9] = v70;
    if (v63) {
      operator delete(v63);
    }
  }
  else
  {
    *(_DWORD *)float v60 = v59;
    float v62 = v60 + 4;
  }
  v58[8] = v62;
  float v72 = *(void **)(v268 + 72);
  int v73 = a2[4];
  float v74 = (char *)v72[11];
  unint64_t v75 = v72[12];
  if ((unint64_t)v74 >= v75)
  {
    id v77 = (char *)v72[10];
    uint64_t v78 = (v74 - v77) >> 2;
    if ((unint64_t)(v78 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v79 = v75 - (void)v77;
    unint64_t v80 = (uint64_t)(v75 - (void)v77) >> 1;
    if (v80 <= v78 + 1) {
      unint64_t v80 = v78 + 1;
    }
    if (v79 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v81 = v80;
    }
    if (v81)
    {
      id v82 = (char *)sub_190347D04((uint64_t)(v72 + 12), v81);
      id v77 = (char *)v72[10];
      float v74 = (char *)v72[11];
    }
    else
    {
      id v82 = 0;
    }
    long long v83 = &v82[4 * v78];
    int v84 = &v82[4 * v81];
    *(_DWORD *)long long v83 = v73;
    float v76 = v83 + 4;
    while (v74 != v77)
    {
      int v85 = *((_DWORD *)v74 - 1);
      v74 -= 4;
      *((_DWORD *)v83 - 1) = v85;
      v83 -= 4;
    }
    v72[10] = v83;
    v72[11] = v76;
    v72[12] = v84;
    if (v77) {
      operator delete(v77);
    }
  }
  else
  {
    *(_DWORD *)float v74 = v73;
    float v76 = v74 + 4;
  }
  v72[11] = v76;
  uint64_t v86 = *(void **)(v268 + 72);
  int v87 = a2[5];
  long long v88 = (char *)v86[11];
  unint64_t v89 = v86[12];
  if ((unint64_t)v88 >= v89)
  {
    unint64_t v91 = (char *)v86[10];
    uint64_t v92 = (v88 - v91) >> 2;
    if ((unint64_t)(v92 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v93 = v89 - (void)v91;
    unint64_t v94 = (uint64_t)(v89 - (void)v91) >> 1;
    if (v94 <= v92 + 1) {
      unint64_t v94 = v92 + 1;
    }
    if (v93 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v95 = v94;
    }
    if (v95)
    {
      uint64_t v96 = (char *)sub_190347D04((uint64_t)(v86 + 12), v95);
      unint64_t v91 = (char *)v86[10];
      long long v88 = (char *)v86[11];
    }
    else
    {
      uint64_t v96 = 0;
    }
    uint64_t v97 = &v96[4 * v92];
    uint64_t v98 = &v96[4 * v95];
    *(_DWORD *)uint64_t v97 = v87;
    unint64_t v90 = v97 + 4;
    while (v88 != v91)
    {
      int v99 = *((_DWORD *)v88 - 1);
      v88 -= 4;
      *((_DWORD *)v97 - 1) = v99;
      v97 -= 4;
    }
    v86[10] = v97;
    v86[11] = v90;
    v86[12] = v98;
    if (v91) {
      operator delete(v91);
    }
  }
  else
  {
    *(_DWORD *)long long v88 = v87;
    unint64_t v90 = v88 + 4;
  }
  v86[11] = v90;
  uint64_t v100 = *(void **)(v268 + 72);
  int v101 = a2[6];
  uint64_t v102 = (char *)v100[11];
  unint64_t v103 = v100[12];
  if ((unint64_t)v102 >= v103)
  {
    long long v105 = (char *)v100[10];
    uint64_t v106 = (v102 - v105) >> 2;
    if ((unint64_t)(v106 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v107 = v103 - (void)v105;
    unint64_t v108 = (uint64_t)(v103 - (void)v105) >> 1;
    if (v108 <= v106 + 1) {
      unint64_t v108 = v106 + 1;
    }
    if (v107 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v109 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v109 = v108;
    }
    if (v109)
    {
      unint64_t v110 = (char *)sub_190347D04((uint64_t)(v100 + 12), v109);
      long long v105 = (char *)v100[10];
      uint64_t v102 = (char *)v100[11];
    }
    else
    {
      unint64_t v110 = 0;
    }
    uint64_t v111 = &v110[4 * v106];
    uint64_t v112 = &v110[4 * v109];
    *(_DWORD *)uint64_t v111 = v101;
    uint64_t v104 = v111 + 4;
    while (v102 != v105)
    {
      int v113 = *((_DWORD *)v102 - 1);
      v102 -= 4;
      *((_DWORD *)v111 - 1) = v113;
      v111 -= 4;
    }
    v100[10] = v111;
    v100[11] = v104;
    v100[12] = v112;
    if (v105) {
      operator delete(v105);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v102 = v101;
    uint64_t v104 = v102 + 4;
  }
  v100[11] = v104;
  float v114 = *(void **)(v268 + 72);
  int v115 = a2[7];
  uint64_t v116 = (char *)v114[5];
  unint64_t v117 = v114[6];
  if ((unint64_t)v116 >= v117)
  {
    long long v119 = (char *)v114[4];
    uint64_t v120 = (v116 - v119) >> 2;
    if ((unint64_t)(v120 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v121 = v117 - (void)v119;
    unint64_t v122 = (uint64_t)(v117 - (void)v119) >> 1;
    if (v122 <= v120 + 1) {
      unint64_t v122 = v120 + 1;
    }
    if (v121 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v123 = v122;
    }
    if (v123)
    {
      uint64_t v124 = (char *)sub_190347D04((uint64_t)(v114 + 6), v123);
      long long v119 = (char *)v114[4];
      uint64_t v116 = (char *)v114[5];
    }
    else
    {
      uint64_t v124 = 0;
    }
    BOOL v125 = &v124[4 * v120];
    uint64_t v126 = &v124[4 * v123];
    *(_DWORD *)BOOL v125 = v115;
    unint64_t v118 = v125 + 4;
    while (v116 != v119)
    {
      int v127 = *((_DWORD *)v116 - 1);
      v116 -= 4;
      *((_DWORD *)v125 - 1) = v127;
      v125 -= 4;
    }
    v114[4] = v125;
    v114[5] = v118;
    v114[6] = v126;
    if (v119) {
      operator delete(v119);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v116 = v115;
    unint64_t v118 = v116 + 4;
  }
  v114[5] = v118;
  int64_t v128 = *(void **)(v268 + 72);
  int v129 = a2[8];
  uint64_t v130 = (char *)v128[5];
  unint64_t v131 = v128[6];
  if ((unint64_t)v130 >= v131)
  {
    uint64_t v133 = (char *)v128[4];
    uint64_t v134 = (v130 - v133) >> 2;
    if ((unint64_t)(v134 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v135 = v131 - (void)v133;
    unint64_t v136 = (uint64_t)(v131 - (void)v133) >> 1;
    if (v136 <= v134 + 1) {
      unint64_t v136 = v134 + 1;
    }
    if (v135 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v137 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v137 = v136;
    }
    if (v137)
    {
      unint64_t v138 = (char *)sub_190347D04((uint64_t)(v128 + 6), v137);
      uint64_t v133 = (char *)v128[4];
      uint64_t v130 = (char *)v128[5];
    }
    else
    {
      unint64_t v138 = 0;
    }
    uint64_t v139 = &v138[4 * v134];
    uint64_t v140 = &v138[4 * v137];
    *(_DWORD *)uint64_t v139 = v129;
    uint64_t v132 = v139 + 4;
    while (v130 != v133)
    {
      int v141 = *((_DWORD *)v130 - 1);
      v130 -= 4;
      *((_DWORD *)v139 - 1) = v141;
      v139 -= 4;
    }
    v128[4] = v139;
    v128[5] = v132;
    v128[6] = v140;
    if (v133) {
      operator delete(v133);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v130 = v129;
    uint64_t v132 = v130 + 4;
  }
  v128[5] = v132;
  long long v142 = *(void **)(v268 + 72);
  int v143 = a2[9];
  uint64_t v144 = (char *)v142[5];
  unint64_t v145 = v142[6];
  if ((unint64_t)v144 >= v145)
  {
    float32x2_t v147 = (char *)v142[4];
    uint64_t v148 = (v144 - v147) >> 2;
    if ((unint64_t)(v148 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v149 = v145 - (void)v147;
    unint64_t v150 = (uint64_t)(v145 - (void)v147) >> 1;
    if (v150 <= v148 + 1) {
      unint64_t v150 = v148 + 1;
    }
    if (v149 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v151 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v151 = v150;
    }
    if (v151)
    {
      long long v152 = (char *)sub_190347D04((uint64_t)(v142 + 6), v151);
      float32x2_t v147 = (char *)v142[4];
      uint64_t v144 = (char *)v142[5];
    }
    else
    {
      long long v152 = 0;
    }
    unsigned int v153 = &v152[4 * v148];
    uint64_t v154 = &v152[4 * v151];
    *(_DWORD *)unsigned int v153 = v143;
    unint64_t v146 = v153 + 4;
    while (v144 != v147)
    {
      int v155 = *((_DWORD *)v144 - 1);
      v144 -= 4;
      *((_DWORD *)v153 - 1) = v155;
      v153 -= 4;
    }
    v142[4] = v153;
    v142[5] = v146;
    v142[6] = v154;
    if (v147) {
      operator delete(v147);
    }
  }
  else
  {
    *(_DWORD *)uint64_t v144 = v143;
    unint64_t v146 = v144 + 4;
  }
  v142[5] = v146;
  long long v156 = *(void **)(v268 + 72);
  int v157 = a2[10];
  unint64_t v158 = (char *)v156[14];
  unint64_t v159 = v156[15];
  if ((unint64_t)v158 >= v159)
  {
    uint64_t v161 = (char *)v156[13];
    uint64_t v162 = (v158 - v161) >> 2;
    if ((unint64_t)(v162 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v163 = v159 - (void)v161;
    unint64_t v164 = (uint64_t)(v159 - (void)v161) >> 1;
    if (v164 <= v162 + 1) {
      unint64_t v164 = v162 + 1;
    }
    if (v163 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v165 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v165 = v164;
    }
    if (v165)
    {
      uint64_t v166 = (char *)sub_190347D04((uint64_t)(v156 + 15), v165);
      uint64_t v161 = (char *)v156[13];
      unint64_t v158 = (char *)v156[14];
    }
    else
    {
      uint64_t v166 = 0;
    }
    int v167 = &v166[4 * v162];
    long long v168 = &v166[4 * v165];
    *(_DWORD *)int v167 = v157;
    uint64_t v160 = v167 + 4;
    while (v158 != v161)
    {
      int v169 = *((_DWORD *)v158 - 1);
      v158 -= 4;
      *((_DWORD *)v167 - 1) = v169;
      v167 -= 4;
    }
    v156[13] = v167;
    v156[14] = v160;
    v156[15] = v168;
    if (v161) {
      operator delete(v161);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v158 = v157;
    uint64_t v160 = v158 + 4;
  }
  v156[14] = v160;
  int v170 = *(void **)(v268 + 72);
  int v171 = a2[11];
  unint64_t v172 = (char *)v170[14];
  unint64_t v173 = v170[15];
  if ((unint64_t)v172 >= v173)
  {
    uint64_t v175 = (char *)v170[13];
    uint64_t v176 = (v172 - v175) >> 2;
    if ((unint64_t)(v176 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v177 = v173 - (void)v175;
    unint64_t v178 = (uint64_t)(v173 - (void)v175) >> 1;
    if (v178 <= v176 + 1) {
      unint64_t v178 = v176 + 1;
    }
    if (v177 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v179 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v179 = v178;
    }
    if (v179)
    {
      long long v180 = (char *)sub_190347D04((uint64_t)(v170 + 15), v179);
      uint64_t v175 = (char *)v170[13];
      unint64_t v172 = (char *)v170[14];
    }
    else
    {
      long long v180 = 0;
    }
    uint64_t v181 = &v180[4 * v176];
    long long v182 = &v180[4 * v179];
    *(_DWORD *)uint64_t v181 = v171;
    long long v174 = v181 + 4;
    while (v172 != v175)
    {
      int v183 = *((_DWORD *)v172 - 1);
      v172 -= 4;
      *((_DWORD *)v181 - 1) = v183;
      v181 -= 4;
    }
    v170[13] = v181;
    v170[14] = v174;
    v170[15] = v182;
    if (v175) {
      operator delete(v175);
    }
  }
  else
  {
    *(_DWORD *)unint64_t v172 = v171;
    long long v174 = v172 + 4;
  }
  v170[14] = v174;
  long long v184 = *(void **)(v268 + 72);
  int v185 = a2[12];
  long long v186 = (char *)v184[14];
  unint64_t v187 = v184[15];
  if ((unint64_t)v186 >= v187)
  {
    uint64_t v189 = (char *)v184[13];
    uint64_t v190 = (v186 - v189) >> 2;
    if ((unint64_t)(v190 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v191 = v187 - (void)v189;
    unint64_t v192 = (uint64_t)(v187 - (void)v189) >> 1;
    if (v192 <= v190 + 1) {
      unint64_t v192 = v190 + 1;
    }
    if (v191 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v193 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v193 = v192;
    }
    if (v193)
    {
      long long v194 = (char *)sub_190347D04((uint64_t)(v184 + 15), v193);
      uint64_t v189 = (char *)v184[13];
      long long v186 = (char *)v184[14];
    }
    else
    {
      long long v194 = 0;
    }
    uint64_t v195 = &v194[4 * v190];
    long long v196 = &v194[4 * v193];
    *(_DWORD *)uint64_t v195 = v185;
    long long v188 = v195 + 4;
    while (v186 != v189)
    {
      int v197 = *((_DWORD *)v186 - 1);
      v186 -= 4;
      *((_DWORD *)v195 - 1) = v197;
      v195 -= 4;
    }
    v184[13] = v195;
    v184[14] = v188;
    v184[15] = v196;
    if (v189) {
      operator delete(v189);
    }
  }
  else
  {
    *(_DWORD *)long long v186 = v185;
    long long v188 = v186 + 4;
  }
  v184[14] = v188;
  uint64_t v198 = *(void *)(v268 + 72);
  int v199 = *((unsigned __int16 *)a2 + 26);
  *(unsigned char *)(v198 + 152) |= 4u;
  *(_DWORD *)(v198 + 144) = v199;
  long long v200 = (void *)v268;
  int v201 = a2[20];
  long long v202 = *(char **)(v268 + 16);
  unint64_t v203 = *(void *)(v268 + 24);
  if ((unint64_t)v202 >= v203)
  {
    uint64_t v205 = *(char **)(v268 + 8);
    uint64_t v206 = (v202 - v205) >> 2;
    if ((unint64_t)(v206 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v207 = v203 - (void)v205;
    unint64_t v208 = (uint64_t)(v203 - (void)v205) >> 1;
    if (v208 <= v206 + 1) {
      unint64_t v208 = v206 + 1;
    }
    if (v207 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v209 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v209 = v208;
    }
    if (v209)
    {
      unsigned int v210 = (char *)sub_190347D04(v268 + 24, v209);
      uint64_t v205 = (char *)v200[1];
      long long v202 = (char *)v200[2];
    }
    else
    {
      unsigned int v210 = 0;
    }
    float v211 = &v210[4 * v206];
    int v212 = &v210[4 * v209];
    *(_DWORD *)float v211 = v201;
    long long v204 = v211 + 4;
    while (v202 != v205)
    {
      int v213 = *((_DWORD *)v202 - 1);
      v202 -= 4;
      *((_DWORD *)v211 - 1) = v213;
      v211 -= 4;
    }
    v200[1] = v211;
    v200[2] = v204;
    v200[3] = v212;
    if (v205) {
      operator delete(v205);
    }
  }
  else
  {
    *(_DWORD *)long long v202 = v201;
    long long v204 = v202 + 4;
  }
  v200[2] = v204;
  float v214 = (void *)v268;
  int v215 = a2[21];
  float v216 = *(char **)(v268 + 16);
  unint64_t v217 = *(void *)(v268 + 24);
  if ((unint64_t)v216 >= v217)
  {
    int32x2_t v219 = *(char **)(v268 + 8);
    uint64_t v220 = (v216 - v219) >> 2;
    if ((unint64_t)(v220 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v221 = v217 - (void)v219;
    unint64_t v222 = (uint64_t)(v217 - (void)v219) >> 1;
    if (v222 <= v220 + 1) {
      unint64_t v222 = v220 + 1;
    }
    if (v221 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v223 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v223 = v222;
    }
    if (v223)
    {
      float v224 = (char *)sub_190347D04(v268 + 24, v223);
      int32x2_t v219 = (char *)v214[1];
      float v216 = (char *)v214[2];
    }
    else
    {
      float v224 = 0;
    }
    double v225 = &v224[4 * v220];
    int v226 = &v224[4 * v223];
    *(_DWORD *)double v225 = v215;
    uint64_t v218 = v225 + 4;
    while (v216 != v219)
    {
      int v227 = *((_DWORD *)v216 - 1);
      v216 -= 4;
      *((_DWORD *)v225 - 1) = v227;
      v225 -= 4;
    }
    v214[1] = v225;
    v214[2] = v218;
    v214[3] = v226;
    if (v219) {
      operator delete(v219);
    }
  }
  else
  {
    *(_DWORD *)float v216 = v215;
    uint64_t v218 = v216 + 4;
  }
  v214[2] = v218;
  int v228 = (void *)v268;
  int v229 = a2[22];
  double v230 = *(char **)(v268 + 16);
  unint64_t v231 = *(void *)(v268 + 24);
  if ((unint64_t)v230 >= v231)
  {
    int v233 = *(char **)(v268 + 8);
    uint64_t v234 = (v230 - v233) >> 2;
    if ((unint64_t)(v234 + 1) >> 62) {
      sub_1903479E8();
    }
    unint64_t v235 = v231 - (void)v233;
    unint64_t v236 = (uint64_t)(v231 - (void)v233) >> 1;
    if (v236 <= v234 + 1) {
      unint64_t v236 = v234 + 1;
    }
    if (v235 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v237 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v237 = v236;
    }
    if (v237)
    {
      double v238 = (char *)sub_190347D04(v268 + 24, v237);
      int v233 = (char *)v228[1];
      double v230 = (char *)v228[2];
    }
    else
    {
      double v238 = 0;
    }
    float v239 = &v238[4 * v234];
    uint64_t v240 = &v238[4 * v237];
    *(_DWORD *)float v239 = v229;
    double v232 = v239 + 4;
    while (v230 != v233)
    {
      int v241 = *((_DWORD *)v230 - 1);
      v230 -= 4;
      *((_DWORD *)v239 - 1) = v241;
      v239 -= 4;
    }
    v228[1] = v239;
    v228[2] = v232;
    v228[3] = v240;
    if (v233) {
      operator delete(v233);
    }
  }
  else
  {
    *(_DWORD *)double v230 = v229;
    double v232 = v230 + 4;
  }
  v228[2] = v232;
  uint64_t v242 = v268;
  int v243 = a2[23];
  *(_WORD *)(v268 + 116) |= 0x40u;
  *(_DWORD *)(v242 + 96) = v243;
  uint64_t v244 = v268;
  int v245 = a2[24];
  *(_WORD *)(v268 + 116) |= 0x20u;
  *(_DWORD *)(v244 + 92) = v245;
  uint64_t v246 = v268;
  if (a2[26] == 2) {
    int v247 = 1;
  }
  else {
    int v247 = 2;
  }
  *(_WORD *)(v268 + 116) |= 0x10u;
  *(_DWORD *)(v246 + 88) = v247;
  uint64_t v248 = v268;
  int v249 = a2[25];
  *(_WORD *)(v268 + 116) |= 0x100u;
  *(_DWORD *)(v248 + 104) = v249;
  uint64_t v250 = v268;
  LOBYTE(v249) = *((unsigned char *)a2 + 143);
  *(_WORD *)(v268 + 116) |= 0x400u;
  *(unsigned char *)(v250 + 112) = v249;
  if (*((unsigned char *)a2 + 140))
  {
    uint64_t __src = *((void *)a2 + 16);
    int v275 = a2[34];
    uint64_t v251 = v268;
    uint64_t v253 = (void *)(v268 + 32);
    double v252 = *(char **)(v268 + 32);
    uint64_t v254 = *(void *)(v268 + 48);
    if ((unint64_t)(v254 - (void)v252) >= 0xC)
    {
      double v257 = (char **)(v268 + 40);
      double v259 = *(char **)(v268 + 40);
      int64_t v260 = v259 - v252;
      if ((unint64_t)(v259 - v252) <= 0xB)
      {
        float v261 = (char *)&__src + v260;
        if (v259 != v252)
        {
          memcpy(*(void **)(v268 + 32), &__src, v259 - v252);
          double v252 = *v257;
        }
        size_t v262 = 12 - v260;
        memcpy(v252, v261, v262);
        uint64_t v263 = v262 >> 2;
        goto LABEL_276;
      }
    }
    else
    {
      if (v252)
      {
        *(void *)(v268 + 40) = v252;
        operator delete(v252);
        uint64_t v254 = 0;
        *uint64_t v253 = 0;
        v253[1] = 0;
        v253[2] = 0;
      }
      uint64_t v255 = v254 >> 1;
      if ((unint64_t)(v254 >> 1) <= 3) {
        uint64_t v255 = 3;
      }
      if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v256 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v256 = v255;
      }
      sub_190347CC0(v253, v256);
      double v258 = *(char **)(v251 + 40);
      double v257 = (char **)(v251 + 40);
      double v252 = v258;
    }
    *(void *)double v252 = __src;
    *((_DWORD *)v252 + 2) = v275;
    uint64_t v263 = 3;
LABEL_276:
    *double v257 = &v252[4 * v263];
  }
  if (*((unsigned char *)a2 + 142))
  {
    uint64_t v264 = v268;
    int v265 = *((unsigned __int8 *)a2 + 141);
    *(_WORD *)(v268 + 116) |= 4u;
    *(_DWORD *)(v264 + 80) = v265;
  }
  sub_190387314(*a1, (uint64_t)v267);
  uint64_t result = sub_19039A590((PB::Base *)v267);
  if (HIBYTE(v273))
  {
    if ((_BYTE)v273) {
      return pthread_mutex_unlock(v272);
    }
    char v5 = v271;
    return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
  }
  return result;
}

void sub_190457164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_19039A590((PB::Base *)va);
  sub_1904373C8(v2 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_1904571D4(uint64_t *a1, double *a2)
{
  char v5 = a1 + 1;
  uint64_t v4 = a1[1];
  unint64_t v39 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  __int16 v41 = 256;
  if (*a1)
  {
    sub_190395088(v36);
    sub_1903AE880((uint64_t)v36);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v38 |= 1u;
    *(CFAbsoluteTime *)&v36[77] = Current;
    uint64_t v7 = v37;
    double v8 = *a2;
    *(_DWORD *)(v37 + 124) |= 0x10u;
    *(double *)(v7 + 40) = v8;
    uint64_t v9 = v37;
    *(float *)&double v8 = a2[2];
    *(_DWORD *)(v37 + 124) |= 2u;
    *(double *)(v9 + 16) = *(float *)&v8;
    uint64_t v10 = v37;
    *(float *)&double v8 = a2[3];
    *(_DWORD *)(v37 + 124) |= 4u;
    *(double *)(v10 + 24) = *(float *)&v8;
    uint64_t v11 = v37;
    *(float *)&double v8 = a2[4];
    *(_DWORD *)(v37 + 124) |= 8u;
    *(double *)(v11 + 32) = *(float *)&v8;
    uint64_t v12 = v37;
    *(float *)&double v8 = a2[1];
    *(_DWORD *)(v37 + 124) |= 1u;
    *(double *)(v12 + 8) = *(float *)&v8;
    uint64_t v13 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 10);
    *(_DWORD *)(v37 + 124) |= 0x40000u;
    *(_DWORD *)(v13 + 100) = LODWORD(v8);
    uint64_t v14 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 11);
    *(_DWORD *)(v37 + 124) |= 0x80000u;
    *(_DWORD *)(v14 + 104) = LODWORD(v8);
    uint64_t v15 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 12);
    *(_DWORD *)(v37 + 124) |= 0x100000u;
    *(_DWORD *)(v15 + 108) = LODWORD(v8);
    uint64_t v16 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 13);
    *(_DWORD *)(v37 + 124) |= 0x2000u;
    *(_DWORD *)(v16 + 80) = LODWORD(v8);
    uint64_t v17 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 14);
    *(_DWORD *)(v37 + 124) |= 0x4000u;
    *(_DWORD *)(v17 + 84) = LODWORD(v8);
    uint64_t v18 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 15);
    *(_DWORD *)(v37 + 124) |= 0x8000u;
    *(_DWORD *)(v18 + 88) = LODWORD(v8);
    uint64_t v19 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 16);
    *(_DWORD *)(v37 + 124) |= 0x100u;
    *(_DWORD *)(v19 + 60) = LODWORD(v8);
    uint64_t v20 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 17);
    *(_DWORD *)(v37 + 124) |= 0x200u;
    *(_DWORD *)(v20 + 64) = LODWORD(v8);
    uint64_t v21 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 18);
    *(_DWORD *)(v37 + 124) |= 0x400u;
    *(_DWORD *)(v21 + 68) = LODWORD(v8);
    uint64_t v22 = v37;
    int v23 = *((_DWORD *)a2 + 19);
    *(_DWORD *)(v37 + 124) |= 0x80u;
    *(_DWORD *)(v22 + 56) = v23;
    uint64_t v24 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 21);
    *(_DWORD *)(v37 + 124) |= 0x800u;
    *(_DWORD *)(v24 + 72) = LODWORD(v8);
    uint64_t v25 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 24);
    *(_DWORD *)(v37 + 124) |= 0x20u;
    *(_DWORD *)(v25 + 48) = LODWORD(v8);
    uint64_t v26 = v37;
    *(_DWORD *)(v37 + 124) |= 0x20000u;
    *(_DWORD *)(v26 + 96) = -1082130432;
    uint64_t v27 = v37;
    int v28 = *((unsigned __int8 *)a2 + 108);
    *(_DWORD *)(v37 + 124) |= 0x1000u;
    *(_DWORD *)(v27 + 76) = v28;
    uint64_t v29 = v37;
    int v30 = *((_DWORD *)a2 + 26);
    *(_DWORD *)(v37 + 124) |= 0x40u;
    *(_DWORD *)(v29 + 52) = v30;
    uint64_t v31 = v37;
    int v32 = *((unsigned __int16 *)a2 + 55);
    *(_DWORD *)(v37 + 124) |= 0x10000u;
    *(_DWORD *)(v31 + 92) = v32;
    uint64_t v33 = v37;
    *(_DWORD *)(v37 + 124) |= 0x800000u;
    *(unsigned char *)(v33 + 120) = 1;
    uint64_t v34 = v37;
    LODWORD(v8) = *((_DWORD *)a2 + 28);
    *(_DWORD *)(v37 + 124) |= 0x400000u;
    *(_DWORD *)(v34 + 116) = LODWORD(v8);
    sub_190387314(*a1, (uint64_t)v36);
    uint64_t result = sub_19039A590((PB::Base *)v36);
    if (!HIBYTE(v41)) {
      return result;
    }
    if ((_BYTE)v41) {
      return pthread_mutex_unlock(v40);
    }
    char v5 = v39;
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_190457514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_190457530(uint64_t *a1, uint64_t a2, int *a3, double a4)
{
  uint64_t v9 = a1 + 1;
  uint64_t v8 = a1[1];
  long long v54 = a1 + 1;
  (*(void (**)(uint64_t *))(v8 + 16))(a1 + 1);
  __int16 v56 = 256;
  if (!*a1) {
    return (*(uint64_t (**)(uint64_t *))(*v9 + 24))(v9);
  }
  sub_190395088(v51);
  sub_1903AD680((uint64_t)v51);
  uint64_t v10 = *(void *)(a2 + 8);
  v51[77] = *(void *)a2;
  v53 |= 1u;
  uint64_t v11 = v52;
  *(_DWORD *)(v52 + 136) |= 2u;
  *(void *)(v11 + 16) = v10;
  uint64_t v12 = v52;
  int v13 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(v52 + 136) |= 0x2000000u;
  *(_DWORD *)(v12 + 116) = v13;
  uint64_t v14 = v52;
  int v15 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(v52 + 136) |= 0x10000u;
  *(_DWORD *)(v14 + 80) = v15;
  uint64_t v16 = v52;
  float v17 = *(double *)(a2 + 32);
  *(_DWORD *)(v52 + 136) |= 0x80000u;
  *(float *)(v16 + 92) = v17;
  uint64_t v18 = v52;
  float v19 = *(double *)(a2 + 40);
  *(_DWORD *)(v52 + 136) |= 0x100000u;
  *(float *)(v18 + 96) = v19;
  uint64_t v20 = v52;
  float v21 = *(double *)(a2 + 48);
  *(_DWORD *)(v52 + 136) |= 0x200000u;
  *(float *)(v20 + 100) = v21;
  uint64_t v22 = v52;
  float v23 = *(double *)(a2 + 24);
  *(_DWORD *)(v52 + 136) |= 0x40000u;
  *(float *)(v22 + 88) = v23;
  uint64_t v24 = v52;
  int v25 = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(v52 + 136) |= 0x4000000u;
  *(_DWORD *)(v24 + 120) = v25;
  uint64_t v26 = v52;
  int v27 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(v52 + 136) |= 0x8000000u;
  *(_DWORD *)(v26 + 124) = v27;
  uint64_t v28 = v52;
  int v29 = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(v52 + 136) |= 0x10000000u;
  *(_DWORD *)(v28 + 128) = v29;
  uint64_t v30 = v52;
  int v31 = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(v52 + 136) |= 0x8000u;
  *(_DWORD *)(v30 + 76) = v31;
  uint64_t v32 = v52;
  int v33 = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(v52 + 136) |= 0x20u;
  *(_DWORD *)(v32 + 36) = v33;
  uint64_t v34 = v52;
  int v35 = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(v52 + 136) |= 0x400u;
  *(_DWORD *)(v34 + 56) = v35;
  uint64_t v36 = v52;
  int v37 = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(v52 + 136) |= 4u;
  *(_DWORD *)(v36 + 24) = v37;
  uint64_t v38 = v52;
  int v39 = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(v52 + 136) |= 0x10u;
  *(_DWORD *)(v38 + 32) = v39;
  uint64_t v40 = v52;
  LOBYTE(v15) = *((unsigned char *)a3 + 5);
  *(_DWORD *)(v52 + 136) |= 0x20000000u;
  *(unsigned char *)(v40 + 132) = v15;
  uint64_t v41 = v52;
  int v42 = a3[2];
  *(_DWORD *)(v52 + 136) |= 0x40u;
  *(_DWORD *)(v41 + 40) = v42;
  uint64_t v43 = v52;
  LOBYTE(v42) = *((unsigned char *)a3 + 4);
  *(_DWORD *)(v52 + 136) |= 0x40000000u;
  *(unsigned char *)(v43 + 133) = v42;
  uint64_t v44 = v52;
  int v45 = *a3;
  *(_DWORD *)(v52 + 136) |= 8u;
  *(_DWORD *)(v44 + 28) = v45;
  uint64_t v46 = v52;
  uint64_t v47 = *((void *)a3 + 2);
  *(_DWORD *)(v52 + 136) |= 1u;
  *(void *)(v46 + 8) = v47;
  if (a4 >= 0.0)
  {
    uint64_t v48 = v52;
    float v49 = a4;
    *(_DWORD *)(v52 + 136) |= 0x4000u;
    *(float *)(v48 + 72) = v49;
  }
  sub_190387314(*a1, (uint64_t)v51);
  uint64_t result = sub_19039A590((PB::Base *)v51);
  if (HIBYTE(v56))
  {
    if ((_BYTE)v56) {
      return pthread_mutex_unlock(v55);
    }
    uint64_t v9 = v54;
    return (*(uint64_t (**)(uint64_t *))(*v9 + 24))(v9);
  }
  return result;
}

void sub_19045784C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 88);
  _Unwind_Resume(a1);
}

uint64_t sub_190457868(uint64_t *a1, uint64_t a2)
{
  char v5 = a1 + 1;
  uint64_t v4 = a1[1];
  uint64_t v48 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  __int16 v50 = 256;
  if (*a1)
  {
    sub_190395088(v45);
    sub_1903AEAC0((uint64_t)v45);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v47 |= 1u;
    *(CFAbsoluteTime *)&v45[77] = Current;
    uint64_t v7 = v46;
    double v8 = (double)*(unint64_t *)a2 * 0.000001;
    *(_DWORD *)(v46 + 164) |= 2u;
    *(double *)(v7 + 64) = v8;
    uint64_t v9 = v46;
    double v10 = (double)*(unint64_t *)(a2 + 8) * 0.000001;
    *(_DWORD *)(v46 + 164) |= 1u;
    *(double *)(v9 + 56) = v10;
    uint64_t v11 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(v46 + 164) |= 0x800u;
    *(_DWORD *)(v11 + 108) = LODWORD(v10);
    uint64_t v12 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(v46 + 164) |= 0x1000u;
    *(_DWORD *)(v12 + 112) = LODWORD(v10);
    uint64_t v13 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(v46 + 164) |= 0x2000u;
    *(_DWORD *)(v13 + 116) = LODWORD(v10);
    uint64_t v14 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 28);
    *(_DWORD *)(v46 + 164) |= 0x4000u;
    *(_DWORD *)(v14 + 120) = LODWORD(v10);
    uint64_t v15 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(v46 + 164) |= 0x8000u;
    *(_DWORD *)(v15 + 124) = LODWORD(v10);
    uint64_t v16 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 36);
    *(_DWORD *)(v46 + 164) |= 0x10000u;
    *(_DWORD *)(v16 + 128) = LODWORD(v10);
    uint64_t v17 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(v46 + 164) |= 0x80000u;
    *(_DWORD *)(v17 + 140) = LODWORD(v10);
    uint64_t v18 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 44);
    *(_DWORD *)(v46 + 164) |= 0x100000u;
    *(_DWORD *)(v18 + 144) = LODWORD(v10);
    uint64_t v19 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(v46 + 164) |= 0x200000u;
    *(_DWORD *)(v19 + 148) = LODWORD(v10);
    uint64_t v20 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 52);
    *(_DWORD *)(v46 + 164) |= 0x100u;
    *(_DWORD *)(v20 + 96) = LODWORD(v10);
    uint64_t v21 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(v46 + 164) |= 0x200u;
    *(_DWORD *)(v21 + 100) = LODWORD(v10);
    uint64_t v22 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 60);
    *(_DWORD *)(v46 + 164) |= 0x400u;
    *(_DWORD *)(v22 + 104) = LODWORD(v10);
    uint64_t v23 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v46 + 164) |= 0x80u;
    *(_DWORD *)(v23 + 92) = LODWORD(v10);
    uint64_t v24 = v46;
    char v25 = *(unsigned char *)(a2 + 68);
    *(_DWORD *)(v46 + 164) |= 0x400000u;
    *(unsigned char *)(v24 + 152) = v25;
    uint64_t v26 = v46;
    char v27 = *(unsigned char *)(a2 + 69);
    *(_DWORD *)(v46 + 164) |= 0x20000000u;
    *(unsigned char *)(v26 + 159) = v27;
    uint64_t v28 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 72);
    *(_DWORD *)(v46 + 164) |= 0x10u;
    *(_DWORD *)(v28 + 80) = LODWORD(v10);
    uint64_t v29 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 76);
    *(_DWORD *)(v46 + 164) |= 8u;
    *(_DWORD *)(v29 + 76) = LODWORD(v10);
    uint64_t v30 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(v46 + 164) |= 4u;
    *(_DWORD *)(v30 + 72) = LODWORD(v10);
    uint64_t v31 = v46;
    LODWORD(v10) = *(_DWORD *)(a2 + 84);
    *(_DWORD *)(v46 + 164) |= 0x20u;
    *(_DWORD *)(v31 + 84) = LODWORD(v10);
    uint64_t v32 = v46;
    char v33 = *(unsigned char *)(a2 + 88);
    *(_DWORD *)(v46 + 164) |= 0x80000000;
    *(unsigned char *)(v32 + 161) = v33;
    uint64_t v34 = v46;
    char v35 = *(unsigned char *)(a2 + 89);
    *(_DWORD *)(v46 + 164) |= 0x10000000u;
    *(unsigned char *)(v34 + 158) = v35;
    uint64_t v36 = v46;
    char v37 = *(unsigned char *)(a2 + 90);
    *(_DWORD *)(v46 + 164) |= 0x4000000u;
    *(unsigned char *)(v36 + 156) = v37;
    uint64_t v38 = v46;
    char v39 = *(unsigned char *)(a2 + 91);
    *(_DWORD *)(v46 + 164) |= 0x40000000u;
    *(unsigned char *)(v38 + 160) = v39;
    uint64_t v40 = v46;
    int v41 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(v46 + 164) |= 0x40u;
    *(_DWORD *)(v40 + 88) = v41;
    uint64_t v42 = v46;
    int v43 = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(v46 + 164) |= 0x20000u;
    *(_DWORD *)(v42 + 132) = v43;
    sub_190387314(*a1, (uint64_t)v45);
    uint64_t result = sub_19039A590((PB::Base *)v45);
    if (!HIBYTE(v50)) {
      return result;
    }
    if ((_BYTE)v50) {
      return pthread_mutex_unlock(v49);
    }
    char v5 = v48;
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_190457C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_190457C1C(uint64_t *a1, uint64_t a2)
{
  char v5 = a1 + 1;
  uint64_t v4 = a1[1];
  uint64_t v22 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  __int16 v23 = 256;
  if (*a1)
  {
    sub_190395088(v19);
    sub_1903AEB50((uint64_t)v19);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v21 |= 1u;
    *(CFAbsoluteTime *)&v19[77] = Current;
    uint64_t v7 = v20;
    double v8 = (double)*(unint64_t *)a2 * 0.000001;
    *(_WORD *)(v20 + 80) |= 1u;
    *(double *)(v7 + 8) = v8;
    uint64_t v9 = v20;
    double v10 = (double)*(unint64_t *)(a2 + 8) * 0.000001;
    *(_WORD *)(v20 + 80) |= 4u;
    *(double *)(v9 + 24) = v10;
    uint64_t v11 = v20;
    double v12 = (double)*(unint64_t *)(a2 + 16) * 0.000001;
    *(_WORD *)(v20 + 80) |= 2u;
    *(double *)(v11 + 16) = v12;
    uint64_t v13 = v20;
    LODWORD(v12) = *(_DWORD *)(a2 + 24);
    *(_WORD *)(v20 + 80) |= 0x800u;
    *(_DWORD *)(v13 + 64) = LODWORD(v12);
    uint64_t v14 = v20;
    LODWORD(v12) = *(_DWORD *)(a2 + 28);
    *(_WORD *)(v20 + 80) |= 0x1000u;
    *(_DWORD *)(v14 + 68) = LODWORD(v12);
    uint64_t v15 = v20;
    LODWORD(v12) = *(_DWORD *)(a2 + 32);
    *(_WORD *)(v20 + 80) |= 0x2000u;
    *(_DWORD *)(v15 + 72) = LODWORD(v12);
    uint64_t v16 = v20;
    char v17 = *(unsigned char *)(a2 + 36);
    *(_WORD *)(v20 + 80) |= 0x4000u;
    *(unsigned char *)(v16 + 76) = v17;
    sub_190387314(*a1, (uint64_t)v19);
    sub_19039A590((PB::Base *)v19);
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_190457DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_19039A590((PB::Base *)&a9);
  sub_1904373C8(v9 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_190457DD8(uint64_t *a1, float64x2_t *a2)
{
  char v5 = a1 + 1;
  uint64_t v4 = a1[1];
  char v37 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  __int16 v38 = 256;
  if (*a1)
  {
    sub_190395088(v34);
    sub_1903AD830((uint64_t)v34);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v36 |= 1u;
    *(CFAbsoluteTime *)&v34[77] = Current;
    uint64_t v7 = v35;
    float64_t v8 = a2->f64[0];
    *(_WORD *)(v35 + 96) |= 0x10u;
    *(float64_t *)(v7 + 64) = v8;
    uint64_t v9 = v35;
    float64_t v10 = a2->f64[1];
    *(_WORD *)(v35 + 96) |= 8u;
    *(float64_t *)(v9 + 56) = v10;
    int8x16_t v11 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[1]), a2[2]);
    float32x4_t v33 = (float32x4_t)vextq_s8(v11, v11, 4uLL);
    sub_1902D9ACC(&v33, v33);
    for (uint64_t i = 0; i != 4; ++i)
    {
      __int32 v13 = v33.i32[i];
      uint64_t v14 = (void *)v35;
      uint64_t v15 = *(__int32 **)(v35 + 16);
      unint64_t v16 = *(void *)(v35 + 24);
      if ((unint64_t)v15 >= v16)
      {
        uint64_t v18 = *(__int32 **)(v35 + 8);
        uint64_t v19 = v15 - v18;
        if ((unint64_t)(v19 + 1) >> 62) {
          sub_1903479E8();
        }
        unint64_t v20 = v16 - (void)v18;
        unint64_t v21 = (uint64_t)(v16 - (void)v18) >> 1;
        if (v21 <= v19 + 1) {
          unint64_t v21 = v19 + 1;
        }
        if (v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22)
        {
          __int16 v23 = (char *)sub_190347D04(v35 + 24, v22);
          uint64_t v18 = (__int32 *)v14[1];
          uint64_t v15 = (__int32 *)v14[2];
        }
        else
        {
          __int16 v23 = 0;
        }
        uint64_t v24 = (__int32 *)&v23[4 * v19];
        *uint64_t v24 = v13;
        char v17 = v24 + 1;
        while (v15 != v18)
        {
          __int32 v25 = *--v15;
          *--uint64_t v24 = v25;
        }
        v14[1] = v24;
        void v14[2] = v17;
        v14[3] = &v23[4 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v15 = v13;
        char v17 = v15 + 1;
      }
      void v14[2] = v17;
    }
    uint64_t v26 = v35;
    float64_t v27 = a2[3].f64[0];
    *(_WORD *)(v35 + 96) |= 1u;
    *(float64_t *)(v26 + 32) = v27;
    uint64_t v28 = v35;
    float64_t v29 = a2[3].f64[1];
    *(_WORD *)(v35 + 96) |= 4u;
    *(float64_t *)(v28 + 48) = v29;
    uint64_t v30 = v35;
    float64_t v31 = a2[4].f64[0];
    *(_WORD *)(v35 + 96) |= 2u;
    *(float64_t *)(v30 + 40) = v31;
    sub_190387314(*a1, (uint64_t)v34);
    sub_19039A590((PB::Base *)v34);
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}

void sub_190458038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_19039A590((PB::Base *)va);
  sub_1904373C8(v3 - 120);
  _Unwind_Resume(a1);
}

uint64_t sub_190458064(uint64_t *a1, double a2)
{
  char v5 = a1 + 1;
  uint64_t v4 = a1[1];
  __int32 v13 = a1 + 1;
  (*(void (**)(uint64_t *))(v4 + 16))(a1 + 1);
  __int16 v14 = 256;
  if (*a1)
  {
    sub_190395088(v10);
    sub_1903AE7F0((uint64_t)v10);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    v12 |= 1u;
    *(CFAbsoluteTime *)&v10[77] = Current;
    uint64_t v7 = v11;
    *(unsigned char *)(v11 + 20) |= 1u;
    *(double *)(v7 + 8) = a2;
    uint64_t v8 = v11;
    *(unsigned char *)(v11 + 20) |= 2u;
    *(unsigned char *)(v8 + 16) = 1;
    sub_190387314(*a1, (uint64_t)v10);
    sub_19039A590((PB::Base *)v10);
  }
  return (*(uint64_t (**)(uint64_t *))(*v5 + 24))(v5);
}