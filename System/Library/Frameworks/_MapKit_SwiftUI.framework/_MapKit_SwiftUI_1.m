uint64_t sub_228B4B53C(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t result;
  unint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t (*v57)(unint64_t);
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  uint64_t vars8;

  v85 = *(void *)(*(void *)(a3 + 16) - 8);
  v81 = *(_DWORD *)(v85 + 84);
  v80 = *(void *)(v85 + 64);
  v84 = *(void *)(*(void *)(a3 + 24) - 8);
  v79 = *(_DWORD *)(v84 + 84);
  v83 = *(void *)(v84 + 64);
  v75 = *(void *)(sub_228BACB48() - 8);
  v87 = v75;
  v3 = *(_DWORD *)(v75 + 84);
  v82 = *(void *)(sub_228BAC608() - 8);
  v64 = v3;
  v61 = *(_DWORD *)(v82 + 84);
  if (v61 > v3) {
    v3 = *(_DWORD *)(v82 + 84);
  }
  v78 = *(void *)(sub_228BACD78() - 8);
  if (*(_DWORD *)(v78 + 84) <= v3) {
    v4 = v3;
  }
  else {
    v4 = *(_DWORD *)(v78 + 84);
  }
  v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292358);
  v77 = *(void *)(v60 - 8);
  v5 = *(_DWORD *)(v77 + 84);
  v59 = sub_228BAC418();
  v74 = *(void *)(v59 - 8);
  v62 = *(_DWORD *)(v74 + 84);
  v63 = v5;
  if (v62 <= v5) {
    v6 = v5;
  }
  else {
    v6 = *(_DWORD *)(v74 + 84);
  }
  v7 = v6 - 1;
  if (!v6) {
    v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    v7 = 0x7FFFFFFF;
  }
  v65 = v7;
  v66 = v4;
  if (v4 > v7) {
    v7 = v4;
  }
  v71 = v7;
  v73 = *(void *)(sub_228BAC9C8() - 8);
  v8 = *(void *)(v73 + 64);
  v9 = 8;
  if (v8 > 8) {
    v9 = *(void *)(v73 + 64);
  }
  v70 = v9;
  v10 = *(void *)(sub_228BAC588() - 8);
  v11 = v10;
  v12 = *(void *)(v10 + 64);
  if (v12 <= 8) {
    v13 = 8;
  }
  else {
    v13 = *(void *)(v10 + 64);
  }
  v69 = v13;
  v67 = *(void *)(sub_228BACB68() - 8);
  v14 = *(void *)(v67 + 64);
  if (v14 <= 8) {
    v14 = 8;
  }
  v68 = v14;
  v15 = *(void *)(sub_228BAC848() - 8);
  v16 = *(void *)(v15 + 64);
  v17 = v75;
  if (v16 <= 8) {
    v16 = 8;
  }
  v76 = v16;
  v18 = v80;
  if (!v81) {
    v18 = v80 + 1;
  }
  v19 = *(unsigned __int8 *)(v73 + 80);
  v20 = *(unsigned __int8 *)(v11 + 80);
  v22 = v19 | 7 | v20;
  v23 = v83;
  if (!v79) {
    v23 = v83 + 1;
  }
  if (v18 <= v23) {
    v18 = v23;
  }
  if (v18 <= 8) {
    v24 = 8;
  }
  else {
    v24 = v18;
  }
  v25 = *(unsigned __int8 *)(v82 + 80);
  v26 = *(unsigned __int8 *)(v78 + 80);
  v27 = *(void *)(v17 + 64);
  v28 = *(void *)(v82 + 64);
  v29 = 7;
  if (!v6) {
    v29 = 8;
  }
  v21 = ((v12 + ((v8 + v20 + ((v19 + 2) & ~v19)) & ~v20) + 7) & 0xFFFFFFFFFFFFFFF8) + v20;
  v30 = v12
      + ((v20 + 2) & ~v20)
      + ((v21 + 8 + ((v22 + v12 + ((v20 + 3) & ~v20) + ((v21 + 8) & ~v20)) & ~v22)) & ~v20)
      + 6;
  if (v30 <= 8) {
    v30 = 8;
  }
  if (!a2) {
    return 0;
  }
  v31 = (*(_DWORD *)(v84 + 80) | *(_DWORD *)(v85 + 80)) & 0xF8 | 7u;
  v32 = v24 + ((v31 + 16) & ~v31) + 1;
  v33 = *(_DWORD *)(v87 + 80) & 0xFC | v25 | v26 | 3;
  v34 = v33 + 8;
  v35 = v27 + v25;
  v36 = (v27 + v25) & ~v25;
  v37 = v28 + v26;
  v38 = ((*(void *)(v78 + 64) + ((v28 + v26 + v36) & ~v26) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  v39 = *(_DWORD *)(v74 + 80);
  v40 = v39 | *(unsigned __int8 *)(v77 + 80);
  v41 = v40 | 7;
  v42 = *(void *)(v77 + 64) + v39;
  if (v71 < a2)
  {
    v43 = *(_DWORD *)(v67 + 80) & 0xF8 | 7;
    v44 = *(_DWORD *)(v15 + 80) & 0xF8 | 7;
    v45 = ((v30
          + ((v22
            + ((v76
              + ((v68
                + v44
                + ((v69
                  + v43
                  + ((v70
                    + (v20 | 7)
                    + ((v19
                      + ((v29
                        + *(void *)(v74 + 64)
                        + ((v40 + 16) & ~v40)
                        + ((*(void *)(v74 + 64) + v39 + (v42 & ~v39)) & ~v39)
                        + ((v41 + v38 + ((v34 + ((v32 + ((v31 + 200) & ~v31) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & ~v41)) & 0xFFFFFFFFFFFFFFF8)
                      + 8) & ~(v19 | 7))
                    + 1) & ~(v20 | 7))
                  + 1) & ~v43)
                + 1) & ~v44)
              + 24) & 0xFFFFFFFFFFFFFFF8)
            + 82) & ~v22)
          + 104) & 0xFFFFFFFFFFFFFFF8)
        + 9;
    if (v45 < 4) {
      v46 = ((a2 - v71 + 255) >> (8 * v45)) + 1;
    }
    else {
      v46 = 2;
    }
    if (v46 >= 0x10000) {
      v47 = 4;
    }
    else {
      v47 = 2;
    }
    if (v46 < 0x100) {
      v47 = 1;
    }
    if (v46 >= 2) {
      v48 = v47;
    }
    else {
      v48 = 0;
    }
    switch(v48)
    {
      case 1:
        v49 = a1[v45];
        if (!a1[v45]) {
          break;
        }
        goto LABEL_54;
      case 2:
        v49 = *(unsigned __int16 *)&a1[v45];
        if (*(_WORD *)&a1[v45]) {
          goto LABEL_54;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x228B4BE20);
      case 4:
        v49 = *(_DWORD *)&a1[v45];
        if (!v49) {
          break;
        }
LABEL_54:
        v50 = (v49 - 1) << (8 * v45);
        if (v45 >= 4) {
          v50 = 0;
        }
        if (v45 == 1) {
          v51 = *a1;
        }
        else {
          v51 = *(_DWORD *)a1;
        }
        return v71 + (v51 | v50) + 1;
      default:
        break;
    }
  }
  if ((v71 & 0x80000000) == 0)
  {
    v52 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v52) = -1;
    }
    return (v52 + 1);
  }
  v54 = (v34
       + ((((((((((((((((((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                   + 23) & 0xFFFFFFFFFFFFFFF8)
                 + 23) & 0xFFFFFFFFFFFFFFF8)
               + 23) & 0xFFFFFFFFFFFFFFF8)
             + 31) & 0xFFFFFFFFFFFFFFF8)
           + v31
           + 80) & ~v31 | 7)
         + v32) & 0xFFFFFFFFFFFFFFF8)) & ~v33;
  if (v66 >= v65)
  {
    if (v64 == v66)
    {
      v57 = *(uint64_t (**)(unint64_t))(v87 + 48);
    }
    else
    {
      v54 = (v35 + v54) & ~v25;
      if (v61 == v66)
      {
        v57 = *(uint64_t (**)(unint64_t))(v82 + 48);
      }
      else
      {
        v54 = (v37 + v54) & ~v26;
        v57 = *(uint64_t (**)(unint64_t))(v78 + 48);
      }
    }
    return v57(v54);
  }
  else
  {
    if (!v6) {
      return 0;
    }
    v55 = (v40 + ((((v54 + v38 + v41) & ~v41) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v40;
    v56 = v63 >= v62
        ? (*(uint64_t (**)(unint64_t, void, uint64_t))(v77 + 48))(v55, v63, v60)
        : (*(unint64_t (**)(unint64_t, void, uint64_t))(v74 + 48))((v42 + v55) & ~v39, v62, v59);
    v58 = v56 != 0;
    result = (v56 - 1);
    if (result == 0 || !v58) {
      return 0;
    }
  }
  return result;
}

void sub_228B4BE34(void *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v90 = *(void *)(*(void *)(a4 + 16) - 8);
  int v83 = *(_DWORD *)(v90 + 84);
  unint64_t v82 = *(void *)(v90 + 64);
  uint64_t v87 = *(void *)(*(void *)(a4 + 24) - 8);
  int v81 = *(_DWORD *)(v87 + 84);
  unint64_t v80 = *(void *)(v87 + 64);
  uint64_t v78 = *(void *)(sub_228BACB48() - 8);
  unsigned int v4 = *(_DWORD *)(v78 + 84);
  uint64_t v92 = *(void *)(sub_228BAC608() - 8);
  unsigned int v73 = v4;
  unsigned int v72 = *(_DWORD *)(v92 + 84);
  if (v72 > v4) {
    unsigned int v4 = *(_DWORD *)(v92 + 84);
  }
  uint64_t v89 = *(void *)(sub_228BACD78() - 8);
  if (*(_DWORD *)(v89 + 84) <= v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = *(_DWORD *)(v89 + 84);
  }
  uint64_t v91 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_268292358) - 8);
  unsigned int v6 = *(_DWORD *)(v91 + 84);
  uint64_t v88 = *(void *)(sub_228BAC418() - 8);
  unsigned int v70 = *(_DWORD *)(v88 + 84);
  unsigned int v71 = v6;
  if (v70 <= v6) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v88 + 84);
  }
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  unsigned int v76 = v5;
  unsigned int v74 = v8;
  unsigned int v75 = v9;
  if (v5 > v9) {
    unsigned int v9 = v5;
  }
  unsigned int v93 = v9;
  uint64_t v10 = *(void *)(sub_228BAC9C8() - 8);
  uint64_t v77 = v10;
  unint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = 8;
  if (v11 <= 8) {
    uint64_t v13 = 8;
  }
  else {
    uint64_t v13 = *(void *)(v10 + 64);
  }
  uint64_t v86 = v13;
  uint64_t v14 = *(void *)(sub_228BAC588() - 8);
  uint64_t v15 = v14;
  unint64_t v16 = *(void *)(v14 + 64);
  if (v16 <= 8) {
    uint64_t v17 = 8;
  }
  else {
    uint64_t v17 = *(void *)(v14 + 64);
  }
  uint64_t v85 = v17;
  uint64_t v79 = *(void *)(sub_228BACB68() - 8);
  if (*(void *)(v79 + 64) > 8uLL) {
    uint64_t v12 = *(void *)(v79 + 64);
  }
  int v97 = 0;
  uint64_t v18 = *(void *)(sub_228BAC848() - 8);
  if (*(void *)(v18 + 64) <= 8uLL) {
    uint64_t v19 = 8;
  }
  else {
    uint64_t v19 = *(void *)(v18 + 64);
  }
  unint64_t v20 = v82;
  if (!v83) {
    unint64_t v20 = v82 + 1;
  }
  unint64_t v21 = v80;
  if (!v81) {
    unint64_t v21 = v80 + 1;
  }
  if (v20 <= v21) {
    unint64_t v20 = v21;
  }
  if (v20 <= 8) {
    unint64_t v20 = 8;
  }
  unsigned int v84 = v7;
  BOOL v22 = v7 == 0;
  uint64_t v23 = *(unsigned __int8 *)(v77 + 80);
  uint64_t v24 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v25 = ((v16 + ((v11 + v24 + ((v23 + 2) & ~v23)) & ~v24) + 7) & 0xFFFFFFFFFFFFFFF8) + v24;
  uint64_t v26 = v23 | 7;
  uint64_t v27 = (*(_DWORD *)(v87 + 80) | *(_DWORD *)(v90 + 80)) & 0xF8 | 7u;
  uint64_t v28 = v20 + ((v27 + 16) & ~v27) + 1;
  uint64_t v29 = *(unsigned __int8 *)(v92 + 80);
  uint64_t v30 = *(unsigned __int8 *)(v89 + 80);
  uint64_t v31 = *(_DWORD *)(v78 + 80) & 0xFC | v29 | v30 | 3;
  uint64_t v32 = v31 + 8;
  uint64_t v33 = *(void *)(v78 + 64) + v29;
  uint64_t v34 = *(void *)(v92 + 64) + v30;
  size_t v35 = ((*(void *)(v89 + 64) + ((v34 + (v33 & ~v29)) & ~v30) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4;
  uint64_t v36 = *(_DWORD *)(v88 + 80);
  uint64_t v37 = *(_DWORD *)(v88 + 80) | *(unsigned __int8 *)(v91 + 80);
  uint64_t v38 = *(void *)(v91 + 64) + v36;
  size_t v39 = ((*(void *)(v88 + 64) + v36 + (v38 & ~v36)) & ~v36) + *(void *)(v88 + 64);
  if (v22) {
    size_t v40 = v39 + 1;
  }
  else {
    size_t v40 = ((*(void *)(v88 + 64) + v36 + (v38 & ~v36)) & ~v36) + *(void *)(v88 + 64);
  }
  size_t v41 = v40 + ((v37 + 16) & ~v37);
  unint64_t v42 = v86
      + (v24 | 7)
      + ((v23
        + ((v41
          + (((v37 | 7) + v35 + ((v31 + 8 + ((v28 + ((v27 + 200) & ~v27) + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v31)) & ~(v37 | 7))
          + 7) & 0xFFFFFFFFFFFFFFF8)
        + 8) & ~v26);
  uint64_t v43 = v26 | v24;
  uint64_t v44 = *(_DWORD *)(v79 + 80) & 0xF8 | 7;
  uint64_t v45 = *(_DWORD *)(v18 + 80) & 0xF8 | 7;
  unint64_t v46 = (v43
       + ((v19 + ((v12 + v45 + ((v85 + v44 + ((v42 + 1) & ~(v24 | 7)) + 1) & ~v44) + 1) & ~v45) + 24) & 0xFFFFFFFFFFFFFFF8)
       + 82) & ~v43;
  unint64_t v47 = v16
      + ((v24 + 2) & ~v24)
      + ((v25 + 8 + ((v43 + v16 + ((v24 + 3) & ~v24) + ((v25 + 8) & ~v24)) & ~v43)) & ~v24)
      + 6;
  if (v47 <= 8) {
    unint64_t v47 = 8;
  }
  size_t v48 = ((v47 + v46 + 104) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v49 = 8 * v48;
  if (v93 < a3)
  {
    if (v48 <= 3) {
      unsigned int v50 = ((a3 - v93 + 255) >> v49) + 1;
    }
    else {
      unsigned int v50 = 2;
    }
    if (v50 >= 0x10000) {
      int v51 = 4;
    }
    else {
      int v51 = 2;
    }
    if (v50 < 0x100) {
      int v51 = 1;
    }
    if (v50 >= 2) {
      int v52 = v51;
    }
    else {
      int v52 = 0;
    }
    int v97 = v52;
  }
  if (v93 < a2)
  {
    if (v48 < 4) {
      unsigned int v53 = ((~v93 + a2) >> v49) + 1;
    }
    else {
      unsigned int v53 = 1;
    }
    if (v48 >= 4) {
      unsigned int v54 = ~v93 + a2;
    }
    else {
      unsigned int v54 = (~(_BYTE)v93 + a2);
    }
    bzero(a1, v48);
    if (v48 == 1) {
      *(unsigned char *)a1 = v54;
    }
    else {
      *(_DWORD *)a1 = v54;
    }
    switch(v97)
    {
      case 1:
        *((unsigned char *)a1 + v48) = v53;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v48) = v53;
        return;
      case 3:
        goto LABEL_129;
      case 4:
        *(_DWORD *)((char *)a1 + v48) = v53;
        return;
      default:
        return;
    }
  }
  uint64_t v55 = ~v31;
  uint64_t v56 = ~v29;
  switch(v97)
  {
    case 1:
      *((unsigned char *)a1 + v48) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_71;
    case 2:
      *(_WORD *)((char *)a1 + v48) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_71;
    case 3:
LABEL_129:
      __break(1u);
      JUMPOUT(0x228B4C908);
    case 4:
      *(_DWORD *)((char *)a1 + v48) = 0;
      goto LABEL_70;
    default:
LABEL_70:
      if (!a2) {
        return;
      }
LABEL_71:
      if ((v93 & 0x80000000) == 0)
      {
        if ((a2 & 0x80000000) != 0)
        {
          uint64_t v57 = a2 ^ 0x80000000;
          a1[1] = 0;
        }
        else
        {
          uint64_t v57 = a2 - 1;
        }
        *a1 = v57;
        return;
      }
      v58 = (_DWORD *)((v32
                      + (((((((((((((((((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                    + 23) & 0xFFFFFFFFFFFFFFF8)
                                  + 23) & 0xFFFFFFFFFFFFFFF8)
                                + 23) & 0xFFFFFFFFFFFFFFF8)
                              + 23) & 0xFFFFFFFFFFFFFFF8)
                            + 31) & 0xFFFFFFFFFFFFFFF8)
                          + v27
                          + 80) & ~v27 | 7)
                        + v28) & 0xFFFFFFFFFFFFFFF8)) & v55);
      if (v76 < v75)
      {
        v59 = (unsigned char *)(((unint64_t)v58 + v35 + (v37 | 7)) & ~(v37 | 7));
        if (v75 < a2)
        {
          if (v41 <= 3) {
            int v60 = ~(-1 << (8 * v41));
          }
          else {
            int v60 = -1;
          }
          if (v41)
          {
            int v61 = v60 & (~v75 + a2);
            if (v41 <= 3) {
              int v62 = v40 + ((v37 + 16) & ~v37);
            }
            else {
              int v62 = 4;
            }
            bzero(v59, v41);
            switch(v62)
            {
              case 2:
                goto LABEL_119;
              case 3:
                goto LABEL_118;
              case 4:
                goto LABEL_120;
              default:
                goto LABEL_114;
            }
          }
          return;
        }
        v59 = (unsigned char *)((v37 + ((unint64_t)(v59 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v37);
        if (v74 < a2)
        {
          if (v40 <= 3) {
            int v63 = ~(-1 << (8 * v40));
          }
          else {
            int v63 = -1;
          }
          if (v40)
          {
            int v61 = v63 & (~v74 + a2);
            if (v40 <= 3) {
              int v64 = v40;
            }
            else {
              int v64 = 4;
            }
            bzero(v59, v40);
            switch(v64)
            {
              case 2:
                goto LABEL_119;
              case 3:
                goto LABEL_118;
              case 4:
                goto LABEL_120;
              default:
                goto LABEL_114;
            }
          }
          return;
        }
        uint64_t v67 = a2 + 1;
        if (v67 > v84)
        {
          if (v39 <= 3) {
            int v68 = ~(-1 << (8 * v39));
          }
          else {
            int v68 = -1;
          }
          if (v39)
          {
            int v61 = v68 & (a2 - v84);
            if (v39 <= 3) {
              int v69 = v39;
            }
            else {
              int v69 = 4;
            }
            bzero(v59, v39);
            switch(v69)
            {
              case 2:
LABEL_119:
                *(_WORD *)v59 = v61;
                break;
              case 3:
LABEL_118:
                *(_WORD *)v59 = v61;
                v59[2] = BYTE2(v61);
                break;
              case 4:
LABEL_120:
                *(_DWORD *)v59 = v61;
                break;
              default:
LABEL_114:
                unsigned char *v59 = v61;
                break;
            }
          }
          return;
        }
        if (a2 == -1) {
          return;
        }
        if (v71 >= v70)
        {
          v65 = *(void (**)(unint64_t, uint64_t))(v91 + 56);
          unint64_t v66 = (unint64_t)v59;
        }
        else
        {
          unint64_t v66 = (unint64_t)&v59[v38] & ~v36;
          v65 = *(void (**)(unint64_t, uint64_t))(v88 + 56);
        }
        goto LABEL_126;
      }
      if (v76 >= a2)
      {
        if (v73 == v76)
        {
          v65 = *(void (**)(unint64_t, uint64_t))(v78 + 56);
          unint64_t v66 = (v32
               + (((((((((((((((((((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                           + 23) & 0xFFFFFFFFFFFFFFF8)
                         + 23) & 0xFFFFFFFFFFFFFFF8)
                       + 23) & 0xFFFFFFFFFFFFFFF8)
                     + 31) & 0xFFFFFFFFFFFFFFF8)
                   + v27
                   + 80) & ~v27 | 7)
                 + v28) & 0xFFFFFFFFFFFFFFF8)) & v55;
          uint64_t v67 = a2;
        }
        else
        {
          unint64_t v66 = ((unint64_t)v58 + v33) & v56;
          if (v72 == v76)
          {
            v65 = *(void (**)(unint64_t, uint64_t))(v92 + 56);
          }
          else
          {
            unint64_t v66 = (v34 + v66) & ~v30;
            v65 = *(void (**)(unint64_t, uint64_t))(v89 + 56);
          }
          uint64_t v67 = a2;
        }
LABEL_126:
        v65(v66, v67);
        return;
      }
      if (v35)
      {
        bzero(v58, v35);
        _DWORD *v58 = ~v76 + a2;
      }
      return;
  }
}

void sub_228B4C960(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_228B4C9C0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_228B4CA24()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_228B4CA68()
{
  return swift_getWitnessTable();
}

uint64_t sub_228B4CA84()
{
  uint64_t v1 = type metadata accessor for _MapContentView.Child();
  unint64_t v2 = v0
     + *(int *)(v1 + 108)
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  uint64_t v3 = sub_228BACB48();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = type metadata accessor for _MapContentInputs(0);
  unint64_t v5 = v2 + *(int *)(v4 + 20);
  uint64_t v6 = sub_228BAC608();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  unint64_t v7 = v2 + *(int *)(v4 + 24);
  uint64_t v8 = sub_228BACD78();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocObject();
}

uint64_t sub_228B4CC08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v7 = v3[2];
  uint64_t v8 = v3[3];
  uint64_t v9 = v3[4];
  uint64_t v10 = v3[5];
  uint64_t v11 = v3[6];
  uint64_t v12 = v3[7];
  uint64_t v13 = *(void *)(type metadata accessor for _MapContentView.Child() - 8);
  return sub_228B24B6C(a1, a2, (uint64_t)v3 + ((*(unsigned __int8 *)(v13 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v7, v8, v9, v10, v11, a3, v12);
}

uint64_t sub_228B4CCD8@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_228BACA38();
  *a1 = v3;
  return result;
}

uint64_t sub_228B4CD04()
{
  return sub_228BACA48();
}

uint64_t sub_228B4CD68@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_228BACAC8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_228B4CD98()
{
  return sub_228BACAD8();
}

unint64_t sub_228B4CDE4()
{
  unint64_t result = qword_2682932B8;
  if (!qword_2682932B8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2682932B0);
    sub_228B4CE58();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682932B8);
  }
  return result;
}

unint64_t sub_228B4CE58()
{
  unint64_t result = qword_2682932C0;
  if (!qword_2682932C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682932C0);
  }
  return result;
}

uint64_t sub_228B4CEAC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_228B4CEF8(uint64_t a1)
{
  return sub_228B4D354(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_228B279D8);
}

uint64_t sub_228B4CF10()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_228B4CF48@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_228B3BF2C(a1, *(void (**)(char *))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 24), a2);
}

uint64_t sub_228B4CF5C(uint64_t *a1, void *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for MapPreferenceWrapper() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_228B2819C(a1, a2, v6);
}

uint64_t sub_228B4CFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for MapPreferenceWrapper() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_228B28850(a1, a2, v6);
}

uint64_t sub_228B4D098(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_228B4D100()
{
  return swift_deallocObject();
}

uint64_t objectdestroy_237Tm()
{
  uint64_t v1 = type metadata accessor for MapPreferenceWrapper();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  sub_228AD25F8(*(void *)(v2 + 16), *(unsigned char *)(v2 + 24));
  sub_228AD2814(*(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(unsigned char *)(v2 + 72));
  uint64_t v3 = v2 + *(int *)(v1 + 48);
  uint64_t v4 = type metadata accessor for KeyframeAnimationState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
  {
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292358);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
    uint64_t v10 = v3 + *(int *)(v4 + 20);
    uint64_t v6 = sub_228BAC418();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    v7(v10, v6);
    v7(v3 + *(int *)(v4 + 24), v6);
  }
  __swift_instantiateConcreteTypeFromMangledName(qword_268293128);
  swift_release();
  uint64_t v8 = v2 + *(int *)(v1 + 52);
  swift_release();
  swift_release();
  sub_228B05A34(*(void *)(v8 + 16));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_228B4D33C(uint64_t a1)
{
  return sub_228B4D354(a1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_228B27168);
}

uint64_t sub_228B4D354(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = *(void *)(type metadata accessor for MapPreferenceWrapper() - 8);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  return a2(a1, v7, v4, v5);
}

uint64_t sub_228B4D404(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_228B4D46C()
{
  unint64_t result = qword_268293300;
  if (!qword_268293300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293300);
  }
  return result;
}

uint64_t sub_228B4D4C0()
{
  return swift_getWitnessTable();
}

uint64_t sub_228B4D7C8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_228B3C2F8(a1, a2);
}

id sub_228B4D894(char *a1, uint64_t a2, SEL *a3)
{
  uint64_t v4 = *(void **)&a1[OBJC_IVAR____TtCV15_MapKit_SwiftUI10MapPolygon12CocoaWrapper_wrapped];
  uint64_t v5 = a1;
  id v6 = [v4 *a3];
  if (v6)
  {
    uint64_t v7 = v6;
    sub_228BAD408();

    uint64_t v8 = (void *)sub_228BAD3D8();
    swift_bridgeObjectRelease();
  }
  else
  {

    uint64_t v8 = 0;
  }

  return v8;
}

void sub_228B4D944(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  if (a3)
  {
    sub_228BAD408();
    id v6 = *(void **)&a1[OBJC_IVAR____TtCV15_MapKit_SwiftUI10MapPolygon12CocoaWrapper_wrapped];
    uint64_t v7 = a1;
    id v9 = (id)sub_228BAD3D8();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = *(void **)&a1[OBJC_IVAR____TtCV15_MapKit_SwiftUI10MapPolygon12CocoaWrapper_wrapped];
    uint64_t v8 = a1;
    id v9 = 0;
  }
  objc_msgSend(v6, *a4, v9);
}

id sub_228B4DD34()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapPolygon.CocoaWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL sub_228B4DD78(uint64_t a1, uint64_t a2)
{
  return sub_228B50388(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 16));
}

double MapPolygon.init(coordinates:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(void *)&double result = 1;
  *(_OWORD *)(a2 + 8) = xmmword_228BB2450;
  return result;
}

uint64_t MapPolygon.init(coordinates:interiorPolygons:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v4 = a3;
  if (a2)
  {
    int64_t v6 = *(void *)(a2 + 16);
    if (v6)
    {
      uint64_t v15 = result;
      uint64_t v17 = MEMORY[0x263F8EE78];
      sub_228B4F464(0, v6, 0);
      uint64_t v7 = v17;
      uint64_t v8 = (uint64_t *)(a2 + 48);
      do
      {
        id v9 = (void *)*(v8 - 2);
        uint64_t v10 = *(v8 - 1);
        uint64_t v11 = *v8;
        sub_228B09CA8(v9, v10);
        unint64_t v13 = *(void *)(v17 + 16);
        unint64_t v12 = *(void *)(v17 + 24);
        if (v13 >= v12 >> 1) {
          sub_228B4F464(v12 > 1, v13 + 1, 1);
        }
        v8 += 3;
        *(void *)(v17 + 16) = v13 + 1;
        uint64_t v14 = (void *)(v17 + 24 * v13);
        v14[4] = v9;
        v14[5] = v10;
        v14[6] = v11;
        --v6;
      }
      while (v6);
      double result = swift_bridgeObjectRelease();
      uint64_t v3 = v15;
      uint64_t v4 = a3;
    }
    else
    {
      double result = swift_bridgeObjectRelease();
      uint64_t v7 = MEMORY[0x263F8EE78];
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  *uint64_t v4 = v3;
  v4[1] = 1;
  v4[2] = v7;
  return result;
}

uint64_t MapPolygon.init(points:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = result;
  return result;
}

uint64_t MapPolygon.init(points:interiorPolygons:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v4 = a3;
  if (a2)
  {
    int64_t v6 = *(void *)(a2 + 16);
    if (v6)
    {
      uint64_t v15 = result;
      uint64_t v17 = MEMORY[0x263F8EE78];
      sub_228B4F464(0, v6, 0);
      uint64_t v7 = v17;
      uint64_t v8 = (uint64_t *)(a2 + 48);
      do
      {
        id v9 = (void *)*(v8 - 2);
        uint64_t v10 = *(v8 - 1);
        uint64_t v11 = *v8;
        sub_228B09CA8(v9, v10);
        unint64_t v13 = *(void *)(v17 + 16);
        unint64_t v12 = *(void *)(v17 + 24);
        if (v13 >= v12 >> 1) {
          sub_228B4F464(v12 > 1, v13 + 1, 1);
        }
        v8 += 3;
        *(void *)(v17 + 16) = v13 + 1;
        uint64_t v14 = (void *)(v17 + 24 * v13);
        v14[4] = v9;
        v14[5] = v10;
        v14[6] = v11;
        --v6;
      }
      while (v6);
      double result = swift_bridgeObjectRelease();
      uint64_t v3 = v15;
      uint64_t v4 = a3;
    }
    else
    {
      double result = swift_bridgeObjectRelease();
      uint64_t v7 = MEMORY[0x263F8EE78];
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  *uint64_t v4 = v3;
  v4[1] = 0;
  v4[2] = v7;
  return result;
}

double MapPolygon.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (objc_class *)type metadata accessor for MapPolygon.CocoaWrapper();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[OBJC_IVAR____TtCV15_MapKit_SwiftUI10MapPolygon12CocoaWrapper_wrapped] = a1;
  v7.receiver = v5;
  v7.super_class = v4;
  *(void *)a2 = objc_msgSendSuper2(&v7, sel_init);
  double result = -0.0;
  *(_OWORD *)(a2 + 8) = xmmword_228BB2460;
  return result;
}

uint64_t static MapPolygon._mapContentCount(inputs:)()
{
  return 1;
}

uint64_t static MapPolygon._makeMapContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291D38);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (int *)((char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293338);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (int *)((char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19[1] = a3;
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  (*(void (**)(int *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  if (v11 != 4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  int v13 = *v12;
  (*(void (**)(int *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v14 = v20;
  sub_228BACB28();
  if (v7 != 4) {
    goto LABEL_5;
  }
  int v15 = *v8;
  (*(void (**)(int *, uint64_t))(v6 + 8))(v8, v5);
  int v16 = *(_DWORD *)(v14 + *(int *)(type metadata accessor for _MapContentInputs(0) + 28));
  int v21 = v13;
  int v22 = v15;
  int v23 = v16;
  long long v24 = 0u;
  long long v25 = 0u;
  memset(v26, 0, 28);
  v26[28] = -1;
  uint64_t v27 = 0;
  char v28 = -1;
  uint64_t v29 = 0;
  char v30 = 1;
  sub_228AC5A84();
  sub_228B4F4A8();
  uint64_t v17 = sub_228BAC478();
  LODWORD(v19[-2]) = MEMORY[0x270FA5388](v17);
  sub_228AC1B00();
  return sub_228BACD88();
}

uint64_t sub_228B4E380()
{
  uint64_t v1 = v0;
  v152[5] = *MEMORY[0x263EF8340];
  uint64_t v122 = type metadata accessor for MapContentList.Item.Content(0);
  MEMORY[0x270FA5388](v122);
  v127 = (void *)((char *)&v115 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v123 = type metadata accessor for MapContentList.Item(0);
  uint64_t v124 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  v125 = (uint64_t *)((char *)&v115 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v134 = sub_228BACAF8();
  uint64_t v143 = *(void *)(v134 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v134);
  uint64_t v6 = (char *)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  v135 = (char *)&v115 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v115 - v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291F60);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  int v16 = (char *)&v115 - v15;
  uint64_t v144 = sub_228BACE18();
  uint64_t v17 = *(void *)(v144 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v144);
  v137 = (char *)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  v140 = (char *)&v115 - v20;
  uint64_t Value = AGGraphGetValue();
  uint64_t v119 = v22;
  long long v24 = *(void **)Value;
  uint64_t v23 = *(void *)(Value + 8);
  uint64_t v25 = *(void *)(Value + 16);
  uint64_t v26 = *(int *)(v11 + 48);
  BOOL v27 = *(_DWORD *)(v1 + 8) == *MEMORY[0x263F288F8];
  uint64_t v141 = v17;
  v133 = v24;
  uint64_t v139 = v25;
  v136 = v10;
  uint64_t v138 = v23;
  if (v27)
  {
    sub_228B09CA8(v24, v23);
    sub_228BACE08();
    int v118 = 0;
    v16[v26] = 0;
    uint64_t v37 = *(void (**)(uint64_t, char *, uint64_t))(v17 + 32);
    uint64_t v38 = (v17 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  }
  else
  {
    uint64_t v28 = v23;
    v142 = v6;
    uint64_t v29 = v144;
    uint64_t v30 = AGGraphGetValue();
    char v32 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v141 + 16))(v14, v30, v29);
    uint64_t v33 = v29;
    v14[v26] = v32 & 1;
    uint64_t v34 = *(int *)(v11 + 48);
    size_t v35 = *(void (**)(char *, char *, uint64_t))(v141 + 32);
    uint64_t v36 = (v141 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v35(v16, v14, v33);
    v16[v26] = v14[v34];
    uint64_t v37 = (void (*)(uint64_t, char *, uint64_t))v35;
    sub_228B09CA8(v24, v28);
    uint64_t v38 = v36;
    uint64_t v6 = v142;
    uint64_t v10 = v136;
    int v118 = v16[v26];
  }
  uint64_t v120 = v38;
  v121 = v37;
  v37((uint64_t)v140, v16, v144);
  uint64_t v39 = v134;
  uint64_t v40 = AGGraphGetValue();
  uint64_t v41 = v143;
  unint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v143 + 16);
  v42(v10, v40, v39);
  uint64_t v43 = sub_228BAC9D8();
  uint64_t v45 = *(char **)(v41 + 8);
  uint64_t v44 = v41 + 8;
  v142 = v45;
  ((void (*)(char *, uint64_t))v45)(v10, v39);
  uint64_t v46 = *(void *)(v1 + 16);
  int v47 = (v43 | v46) == 0;
  if (v43 && v46)
  {
    swift_retain();
    swift_retain();
    int v47 = sub_228BAD0F8();
    swift_release();
    swift_release();
  }
  uint64_t v132 = v43;
  uint64_t v48 = AGGraphGetValue();
  v42(v10, v48, v39);
  sub_228B50520();
  sub_228BACB08();
  v145[0] = v147;
  v145[1] = v148;
  uint64_t v49 = *((void *)&v148 + 1);
  uint64_t v146 = v149;
  uint64_t v50 = v147;
  uint64_t v129 = DWORD2(v147);
  uint64_t v130 = HIDWORD(v147);
  uint64_t v51 = v148;
  uint64_t v52 = v149;
  ((void (*)(char *, uint64_t))v142)(v10, v39);
  uint64_t v53 = *(void *)(v1 + 48);
  uint64_t v126 = v49;
  int v117 = v47;
  if (v53)
  {
    uint64_t v54 = *(void *)(v1 + 56);
    uint64_t v55 = *(void *)(v1 + 40);
    uint64_t v56 = *(void *)(v1 + 32);
    *(void *)&long long v147 = *(void *)(v1 + 24);
    *((void *)&v147 + 1) = v56;
    *(void *)&long long v148 = v55;
    *((void *)&v148 + 1) = v53;
    uint64_t v149 = v54;
    sub_228B17EA4((uint64_t)v145);
    swift_bridgeObjectRetain();
    int v57 = MEMORY[0x22A6A5D00](v145, &v147);
    swift_bridgeObjectRelease();
    sub_228B17ED0((uint64_t)v145);
    int v58 = v57 ^ 1;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v58 = 1;
  }
  int v116 = v58;
  uint64_t v59 = AGGraphGetValue();
  v42(v10, v59, v39);
  sub_228B50574();
  sub_228BACB08();
  int v60 = v10;
  int v61 = (void (*)(char *, uint64_t))v142;
  ((void (*)(char *, uint64_t))v142)(v60, v39);
  uint64_t v62 = AGGraphGetValue();
  uint64_t v63 = (uint64_t)v135;
  v42(v135, v62, v39);
  uint64_t v64 = sub_228B6AC9C(v152, v63);
  int v66 = v65 & 1;
  int v67 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v143 = v44;
  uint64_t v131 = v64;
  if (v67 == 255)
  {
    int v115 = 0;
    goto LABEL_19;
  }
  uint64_t v68 = *(void *)(v1 + 64);
  if (v65)
  {
    if (v67)
    {
      int v69 = v65 & 1;
      uint64_t v70 = v64;
      sub_228ACF3A4(v64, 1);
      sub_228B507A8(v68, v67);
      int v71 = MEMORY[0x22A6A69F0](v70, v68);
LABEL_17:
      int v115 = v71;
      sub_228B50790(v68, v67);
      uint64_t v72 = v70;
      int v66 = v69;
      sub_228AD26A8(v72, v69);
      int v61 = (void (*)(char *, uint64_t))v142;
      goto LABEL_19;
    }
  }
  else if ((v67 & 1) == 0)
  {
    int v69 = v65 & 1;
    uint64_t v70 = v64;
    sub_228ACF3A4(v64, 0);
    sub_228B507A8(v68, v67);
    int v71 = sub_228BAD0F8();
    goto LABEL_17;
  }
  int v115 = 0;
LABEL_19:
  uint64_t v73 = AGGraphGetValue();
  v42(v6, v73, v39);
  sub_228B505C8();
  sub_228BACB08();
  v61(v6, v39);
  if (v151)
  {
    sub_228B09A30(&v150, (uint64_t)v152);
    uint64_t v74 = (uint64_t)v136;
  }
  else
  {
    uint64_t v75 = AGGraphGetValue();
    uint64_t v74 = (uint64_t)v136;
    v42(v136, v75, v39);
    uint64_t v76 = sub_228BACAB8();
    v61((char *)v74, v39);
    v152[3] = MEMORY[0x263F188A8];
    v152[4] = MEMORY[0x263F18898];
    v152[0] = v76;
    sub_228B5061C((uint64_t)&v150);
  }
  uint64_t v77 = AGGraphGetValue();
  v42((char *)v74, v77, v39);
  uint64_t v78 = sub_228B6AC9C(v152, v74);
  int v80 = *(unsigned __int8 *)(v1 + 88);
  uint64_t v128 = v78;
  LODWORD(v142) = v79 & 1;
  if (v80 == 255) {
    goto LABEL_29;
  }
  uint64_t v81 = v78;
  uint64_t v82 = *(void *)(v1 + 80);
  if ((v79 & 1) == 0)
  {
    if ((v80 & 1) == 0)
    {
      sub_228ACF3A4(v78, 0);
      sub_228B507A8(v82, v80);
      int v83 = sub_228BAD0F8();
      goto LABEL_28;
    }
LABEL_29:
    int v84 = 0;
    goto LABEL_30;
  }
  if ((v80 & 1) == 0) {
    goto LABEL_29;
  }
  sub_228ACF3A4(v78, 1);
  sub_228B507A8(v82, v80);
  int v83 = MEMORY[0x22A6A69F0](v81, v82);
LABEL_28:
  int v84 = v83;
  sub_228B50790(v82, v80);
  sub_228AD26A8(v81, (char)v142);
LABEL_30:
  uint64_t v85 = v129 | (v130 << 32);
  uint64_t v86 = v134;
  uint64_t v87 = AGGraphGetValue();
  uint64_t v88 = v136;
  v42(v136, v87, v86);
  sub_228B5067C();
  sub_228BACB08();
  v135 = (char *)v152[0];
  v61(v88, v86);
  if ((*(unsigned char *)(v1 + 104) & 1) == 0
    && (v115 & ~(v119 | v116 | v117 ^ 1 | v118) & v84 & 1) != 0
    && v135 == *(char **)(v1 + 96)
    && AGGraphGetOutputValue())
  {
    *(void *)(v1 + 96) = v135;
    *(unsigned char *)(v1 + 104) = 0;
    sub_228B50790(*(void *)(v1 + 80), *(unsigned char *)(v1 + 88));
    *(void *)(v1 + 80) = v128;
    *(unsigned char *)(v1 + 88) = (_BYTE)v142;
    sub_228B50790(*(void *)(v1 + 64), *(unsigned char *)(v1 + 72));
    *(void *)(v1 + 64) = v131;
    *(unsigned char *)(v1 + 72) = v66;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 24) = v50;
    *(void *)(v1 + 32) = v85;
    *(void *)(v1 + 40) = v51;
    *(void *)(v1 + 48) = v126;
    *(void *)(v1 + 56) = v52;
    *(void *)(v1 + 16) = v132;
    uint64_t v89 = v141;
    uint64_t v90 = v133;
  }
  else
  {
    uint64_t v143 = v85;
    BOOL v91 = v142 != 0;
    char v92 = v66;
    uint64_t v93 = v126;
    LODWORD(v136) = *(_DWORD *)(v1 + 12) + 1;
    *(_DWORD *)(v1 + 12) = v136;
    (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v137, v140, v144);
    v94 = v133;
    v95 = v127;
    uint64_t v96 = v138;
    void *v127 = v133;
    v95[1] = v96;
    uint64_t v97 = v132;
    v95[2] = v139;
    v95[3] = v97;
    v95[4] = v50;
    int v98 = v130;
    *((_DWORD *)v95 + 10) = v129;
    *((_DWORD *)v95 + 11) = v98;
    v95[6] = v51;
    v95[7] = v93;
    v95[8] = v52;
    uint64_t v99 = v131;
    v95[9] = v131;
    *((unsigned char *)v95 + 80) = v66 != 0;
    uint64_t v100 = v128;
    v95[11] = v128;
    *((unsigned char *)v95 + 96) = v91;
    v95[13] = v135;
    swift_storeEnumTagMultiPayload();
    sub_228B09CA8(v94, v96);
    swift_retain();
    sub_228B17EA4((uint64_t)v145);
    sub_228ACF3A4(v99, v92);
    char v101 = (char)v142;
    sub_228ACF3A4(v100, (char)v142);
    sub_228B09CA8(v94, v96);
    swift_retain();
    uint64_t v102 = v93;
    swift_bridgeObjectRetain();
    char v103 = v92;
    sub_228ACF3A4(v99, v92);
    sub_228ACF3A4(v100, v101);
    sub_228ACAF54();
    sub_228BACE28();
    uint64_t v104 = v152[0];
    if (!v152[0])
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_268291998);
      uint64_t v104 = swift_allocObject();
      *(_OWORD *)(v104 + 16) = xmmword_228BAF4E0;
      *(void *)(v104 + 32) = 0;
      *(unsigned char *)(v104 + 72) = 0;
    }
    uint64_t v105 = (uint64_t)v125;
    uint64_t *v125 = v104;
    uint64_t v106 = v123;
    v121(v105 + *(int *)(v123 + 28), v137, v144);
    *(_DWORD *)(v105 + 8) = v136;
    sub_228AD8F10((uint64_t)v127, v105 + *(int *)(v106 + 24));
    __swift_instantiateConcreteTypeFromMangledName(&qword_268291F68);
    unint64_t v107 = (*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80);
    uint64_t v108 = swift_allocObject();
    *(_OWORD *)(v108 + 16) = xmmword_228BAF4E0;
    sub_228B506D0(v105, v108 + v107);
    v152[0] = sub_228B78CF8(v108);
    v152[1] = v109;
    AGGraphSetOutputValue();
    uint64_t v90 = v133;
    sub_228B09D08(v133, v138);
    uint64_t v110 = v102;
    swift_bridgeObjectRelease();
    uint64_t v111 = v132;
    swift_release();
    uint64_t v112 = v131;
    sub_228AD26A8(v131, v103);
    uint64_t v113 = v128;
    LOBYTE(v107) = (_BYTE)v142;
    sub_228AD26A8(v128, (char)v142);
    swift_bridgeObjectRelease();
    sub_228B50734(v105);
    *(void *)(v1 + 96) = v135;
    *(unsigned char *)(v1 + 104) = 0;
    sub_228B50790(*(void *)(v1 + 80), *(unsigned char *)(v1 + 88));
    *(void *)(v1 + 80) = v113;
    *(unsigned char *)(v1 + 88) = v107;
    sub_228B50790(*(void *)(v1 + 64), *(unsigned char *)(v1 + 72));
    *(void *)(v1 + 64) = v112;
    *(unsigned char *)(v1 + 72) = v103;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 24) = v50;
    *(void *)(v1 + 32) = v143;
    *(void *)(v1 + 40) = v51;
    *(void *)(v1 + 48) = v110;
    *(void *)(v1 + 56) = v52;
    *(void *)(v1 + 16) = v111;
    uint64_t v89 = v141;
  }
  swift_retain();
  swift_release();
  sub_228B09D08(v90, v138);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v140, v144);
}

uint64_t (*sub_228B4F324())()
{
  return sub_228B4F394;
}

uint64_t (*sub_228B4F340())()
{
  return sub_228B4F3B8;
}

uint64_t (*sub_228B4F35C())()
{
  return sub_228B4F3DC;
}

uint64_t (*sub_228B4F378())()
{
  return sub_228B4F400;
}

uint64_t sub_228B4F394()
{
  return sub_228B806D0();
}

uint64_t sub_228B4F3B8()
{
  return sub_228B90F78();
}

uint64_t sub_228B4F3DC()
{
  return sub_228B4E380();
}

uint64_t sub_228B4F400()
{
  return sub_228B9BA64();
}

uint64_t sub_228B4F424(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_228B4FCF4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_228B4F444(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_228B4FF34(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_228B4F464(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_228B50200(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t type metadata accessor for MapPolygon.CocoaWrapper()
{
  return self;
}

unint64_t sub_228B4F4A8()
{
  unint64_t result = qword_268293340;
  if (!qword_268293340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293340);
  }
  return result;
}

ValueMetadata *type metadata accessor for MapPolygon()
{
  return &type metadata for MapPolygon;
}

void destroy for MapPolygon.Storage(uint64_t a1)
{
}

void *_s15_MapKit_SwiftUI10MapPolygonV7StorageOwCP_0(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  sub_228B09CA8(*(void **)a2, v4);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t _s15_MapKit_SwiftUI10MapPolygonV7StorageOwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  sub_228B09CA8(*(void **)a2, v4);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_228B09D08(v6, v7);
  return a1;
}

uint64_t _s15_MapKit_SwiftUI10MapPolygonV7StorageOwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  sub_228B09D08(v4, v5);
  return a1;
}

uint64_t _s15_MapKit_SwiftUI10MapPolygonV7StorageOwet_0(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 8) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t sub_228B4F668(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 2 * -a2;
      *(void *)(result + 16) = 0;
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_228B4F6B0(uint64_t a1)
{
  return *(void *)(a1 + 8) >> 63;
}

uint64_t sub_228B4F6BC(uint64_t result)
{
  *(void *)(result + 8) &= ~0x8000000000000000;
  return result;
}

uint64_t sub_228B4F6CC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 1 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for MapPolygon.Storage()
{
  return &type metadata for MapPolygon.Storage;
}

uint64_t destroy for MapPolygon.MakeList(uint64_t a1)
{
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 != 255) {
    uint64_t result = sub_228AD26A8(*(void *)(a1 + 64), v3 & 1);
  }
  int v4 = *(unsigned __int8 *)(a1 + 88);
  if (v4 != 255)
  {
    uint64_t v5 = *(void *)(a1 + 80);
    return sub_228AD26A8(v5, v4 & 1);
  }
  return result;
}

uint64_t initializeWithCopy for MapPolygon.MakeList(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = a2 + 64;
  int v7 = *(unsigned __int8 *)(a2 + 72);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7 == 255)
  {
    *(void *)(a1 + 64) = *(void *)v6;
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(v6 + 8);
  }
  else
  {
    uint64_t v8 = *(void *)v6;
    sub_228ACF3A4(v8, v7 & 1);
    *(void *)(a1 + 64) = v8;
    *(unsigned char *)(a1 + 72) = v7 & 1;
  }
  uint64_t v9 = (uint64_t *)(a2 + 80);
  int v10 = *(unsigned __int8 *)(a2 + 88);
  if (v10 == 255)
  {
    *(void *)(a1 + 80) = *v9;
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  }
  else
  {
    char v11 = v10 & 1;
    uint64_t v12 = *v9;
    sub_228ACF3A4(*v9, v10 & 1);
    *(void *)(a1 + 80) = v12;
    *(unsigned char *)(a1 + 88) = v11;
  }
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t assignWithCopy for MapPolygon.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v4 = (uint64_t *)(a1 + 64);
  uint64_t v5 = (uint64_t *)(a2 + 64);
  int v6 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) == 255)
  {
    if (v6 == 255)
    {
      uint64_t v8 = *v5;
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *uint64_t v4 = v8;
    }
    else
    {
      char v13 = v6 & 1;
      uint64_t v14 = *v5;
      sub_228ACF3A4(v14, v6 & 1);
      *(void *)(a1 + 64) = v14;
      *(unsigned char *)(a1 + 72) = v13;
    }
  }
  else if (v6 == 255)
  {
    sub_228B4FA64(a1 + 64);
    char v7 = *(unsigned char *)(a2 + 72);
    *uint64_t v4 = *v5;
    *(unsigned char *)(a1 + 72) = v7;
  }
  else
  {
    char v9 = v6 & 1;
    uint64_t v10 = *v5;
    sub_228ACF3A4(v10, v6 & 1);
    uint64_t v11 = *(void *)(a1 + 64);
    char v12 = *(unsigned char *)(a1 + 72);
    *(void *)(a1 + 64) = v10;
    *(unsigned char *)(a1 + 72) = v9;
    sub_228AD26A8(v11, v12);
  }
  uint64_t v15 = (uint64_t *)(a1 + 80);
  int v16 = (uint64_t *)(a2 + 80);
  int v17 = *(unsigned __int8 *)(a2 + 88);
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    if (v17 == 255)
    {
      uint64_t v19 = *v16;
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *uint64_t v15 = v19;
    }
    else
    {
      char v24 = v17 & 1;
      uint64_t v25 = *v16;
      sub_228ACF3A4(v25, v17 & 1);
      *(void *)(a1 + 80) = v25;
      *(unsigned char *)(a1 + 88) = v24;
    }
  }
  else if (v17 == 255)
  {
    sub_228B4FA64(a1 + 80);
    char v18 = *(unsigned char *)(a2 + 88);
    *uint64_t v15 = *v16;
    *(unsigned char *)(a1 + 88) = v18;
  }
  else
  {
    char v20 = v17 & 1;
    uint64_t v21 = *v16;
    sub_228ACF3A4(v21, v17 & 1);
    uint64_t v22 = *(void *)(a1 + 80);
    char v23 = *(unsigned char *)(a1 + 88);
    *(void *)(a1 + 80) = v21;
    *(unsigned char *)(a1 + 88) = v20;
    sub_228AD26A8(v22, v23);
  }
  uint64_t v26 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v26;
  return a1;
}

uint64_t sub_228B4FA64(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy105_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for MapPolygon.MakeList(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  long long v5 = (void *)(a2 + 64);
  int v6 = *(unsigned __int8 *)(a1 + 72);
  if (v6 == 255) {
    goto LABEL_4;
  }
  int v7 = *(unsigned __int8 *)(a2 + 72);
  if (v7 == 255)
  {
    sub_228B4FA64(a1 + 64);
LABEL_4:
    *(void *)(a1 + 64) = *v5;
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *v5;
  *(unsigned char *)(a1 + 72) = v7 & 1;
  sub_228AD26A8(v8, v6 & 1);
LABEL_6:
  char v9 = (void *)(a2 + 80);
  int v10 = *(unsigned __int8 *)(a1 + 88);
  if (v10 != 255)
  {
    int v11 = *(unsigned __int8 *)(a2 + 88);
    if (v11 != 255)
    {
      uint64_t v12 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = *v9;
      *(unsigned char *)(a1 + 88) = v11 & 1;
      sub_228AD26A8(v12, v10 & 1);
      goto LABEL_11;
    }
    sub_228B4FA64(a1 + 80);
  }
  *(void *)(a1 + 80) = *v9;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
LABEL_11:
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapPolygon.MakeList(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapPolygon.MakeList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 105) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapPolygon.MakeList()
{
  return &type metadata for MapPolygon.MakeList;
}

uint64_t sub_228B4FCF4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    char v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268293F20);
  uint64_t v10 = *(void *)(type metadata accessor for _MapContentOutputs(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  char v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_34;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for _MapContentOutputs(0) - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  char v18 = (char *)v13 + v17;
  uint64_t v19 = (char *)a4 + v17;
  if (a1)
  {
    if (v13 < a4 || v18 >= &v19[*(void *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v20 = *(void *)(v16 + 72) * v8;
  uint64_t v21 = &v18[v20];
  unint64_t v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B4FF34(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268293348);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  char v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B500A0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268293378);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  char v13 = v10 + 32;
  size_t v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B50200(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_268293380);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

BOOL sub_228B50388(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (a2 < 0)
  {
    if (a5 < 0)
    {
      sub_228AD25BC(0, (unint64_t *)&qword_268293000);
      sub_228B09CA8(a1, a2);
      sub_228B09CA8(a4, a5);
      char v13 = sub_228BAD6F8();
      sub_228B09D08(a4, a5);
      sub_228B09D08(a1, a2);
      return v13 & 1;
    }
    return 0;
  }
  if (a5 < 0) {
    return 0;
  }
  if (a2)
  {
    if ((a5 & 1) == 0 || a1[2] != a4[2] || (sub_228B00F54((uint64_t)a1, (uint64_t)a4) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (a5) {
      return 0;
    }
    if (a1[2] != a4[2]) {
      return 0;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v12 = sub_228B00E94((uint64_t)a1, (uint64_t)a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v12 & 1) == 0) {
      return 0;
    }
  }
  BOOL result = (a3 | a6) == 0;
  if (a3 && a6)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = swift_bridgeObjectRetain();
    char v13 = sub_228B75EBC(v15, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v13 & 1;
  }
  return result;
}

unint64_t sub_228B50520()
{
  unint64_t result = qword_268293350;
  if (!qword_268293350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293350);
  }
  return result;
}

unint64_t sub_228B50574()
{
  unint64_t result = qword_268293358;
  if (!qword_268293358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293358);
  }
  return result;
}

unint64_t sub_228B505C8()
{
  unint64_t result = qword_268293360;
  if (!qword_268293360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293360);
  }
  return result;
}

uint64_t sub_228B5061C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293368);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_228B5067C()
{
  unint64_t result = qword_268293370;
  if (!qword_268293370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293370);
  }
  return result;
}

uint64_t sub_228B506D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MapContentList.Item(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_228B50734(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MapContentList.Item(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_228B50790(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_228AD26A8(result, a2 & 1);
  }
  return result;
}

uint64_t sub_228B507A8(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_228ACF3A4(result, a2 & 1);
  }
  return result;
}

uint64_t destroy for ResolvedPolygon(uint64_t a1)
{
  sub_228B09D08(*(void **)a1, *(void *)(a1 + 8));
  swift_release();
  swift_bridgeObjectRelease();
  sub_228AD26A8(*(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
  uint64_t v2 = *(void *)(a1 + 88);
  char v3 = *(unsigned char *)(a1 + 96);

  return sub_228AD26A8(v2, v3);
}

uint64_t initializeWithCopy for ResolvedPolygon(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  sub_228B09CA8(*(void **)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  LOBYTE(v6) = *(unsigned char *)(a2 + 80);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_228ACF3A4(v10, v6);
  *(void *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 80) = v6;
  uint64_t v11 = *(void *)(a2 + 88);
  LOBYTE(v10) = *(unsigned char *)(a2 + 96);
  sub_228ACF3A4(v11, v10);
  *(void *)(a1 + 88) = v11;
  *(unsigned char *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t assignWithCopy for ResolvedPolygon(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  sub_228B09CA8(*(void **)a2, v5);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  sub_228B09D08(v7, v8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v9 = *(void *)(a2 + 72);
  LOBYTE(v5) = *(unsigned char *)(a2 + 80);
  sub_228ACF3A4(v9, v5);
  uint64_t v10 = *(void *)(a1 + 72);
  char v11 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = v9;
  *(unsigned char *)(a1 + 80) = v5;
  sub_228AD26A8(v10, v11);
  uint64_t v12 = *(void *)(a2 + 88);
  LOBYTE(v5) = *(unsigned char *)(a2 + 96);
  sub_228ACF3A4(v12, v5);
  uint64_t v13 = *(void *)(a1 + 88);
  char v14 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 88) = v12;
  *(unsigned char *)(a1 + 96) = v5;
  sub_228AD26A8(v13, v14);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy112_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for ResolvedPolygon(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  long long v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  sub_228B09D08(v5, v6);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  uint64_t v9 = *(void *)(a1 + 72);
  char v10 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = v8;
  sub_228AD26A8(v9, v10);
  char v11 = *(unsigned char *)(a2 + 96);
  uint64_t v12 = *(void *)(a1 + 88);
  char v13 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = v11;
  sub_228AD26A8(v12, v13);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedPolygon(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 8) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedPolygon(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 2 * -a2;
      *(void *)(result + 16) = 0;
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedPolygon()
{
  return &type metadata for ResolvedPolygon;
}

uint64_t sub_228B50B9C(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v2 = sub_228BAC588();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v25 - v8;
  MEMORY[0x270FA5388](v7);
  char v11 = (char *)&v25 - v10;
  uint64_t v12 = v1 + *(int *)(type metadata accessor for MapScaleViewConfig(0) + 28);
  int v13 = *MEMORY[0x263F18568];
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v11, *MEMORY[0x263F18568], v2);
  char v14 = sub_228BAC578();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v11, v2);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  unint64_t v17 = (uint64_t (**)(char *, uint64_t))(v3 + 88);
  if (v14)
  {
    v16(v9, v26, v2);
    int v18 = (*v17)(v9, v2);
    if (v18 == *MEMORY[0x263F18550] || v18 == *MEMORY[0x263F18560] || v18 == v13) {
      return 1;
    }
    if (v18 == *MEMORY[0x263F18558]) {
      return 2;
    }
  }
  else
  {
    v16(v6, v12, v2);
    int v22 = (*v17)(v6, v2);
    if (v22 == *MEMORY[0x263F18550] || v22 == *MEMORY[0x263F18560] || v22 == v13) {
      return 1;
    }
    uint64_t v9 = v6;
    if (v22 == *MEMORY[0x263F18558]) {
      return 2;
    }
  }
  v15(v9, v2);
  return 1;
}

uint64_t MapScaleView.init(anchorEdge:scope:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v7 = a1 & 1;
  *(void *)a4 = swift_getKeyPath();
  *(unsigned char *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = swift_getKeyPath();
  *(unsigned char *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = swift_getKeyPath();
  *(unsigned char *)(a4 + 40) = 0;
  uint64_t v8 = (int *)type metadata accessor for MapScaleView(0);
  uint64_t v9 = (uint64_t *)(a4 + v8[7]);
  *uint64_t v9 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  uint64_t result = swift_storeEnumTagMultiPayload();
  *(unsigned char *)(a4 + v8[9]) = v7;
  uint64_t v11 = a4 + v8[8];
  *(void *)uint64_t v11 = a2;
  *(unsigned char *)(v11 + 8) = a3 & 1;
  return result;
}

uint64_t MapScaleView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v78 = a1;
  uint64_t v65 = type metadata accessor for _MapScaleView(0);
  uint64_t v3 = MEMORY[0x270FA5388](v65);
  int v67 = (uint64_t *)((char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v3);
  uint64_t v68 = (uint64_t)&v60 - v5;
  uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293388);
  uint64_t v6 = MEMORY[0x270FA5388](v77);
  uint64_t v66 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v69 = (uint64_t)&v60 - v8;
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293390);
  MEMORY[0x270FA5388](v75);
  uint64_t v76 = (uint64_t)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B48);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v63 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B50);
  uint64_t v12 = MEMORY[0x270FA5388](v74);
  uint64_t v62 = (uint64_t *)((char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v64 = (uint64_t)&v60 - v14;
  uint64_t v15 = type metadata accessor for MapControlsConfig();
  uint64_t v16 = (int *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  int v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_228BAC588();
  uint64_t v71 = *(void *)(v19 - 8);
  uint64_t v72 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for MapScaleViewConfig(0);
  uint64_t v73 = *(void *)(v70 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v70);
  uint64_t v61 = (uint64_t)&v60 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v60 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v60 - v27;
  uint64_t v29 = *(void *)(v1 + 32);
  char v30 = *(unsigned char *)(v2 + 40);
  sub_228AD266C(v29, v30);
  char v31 = sub_228ACD41C(v29, v30);
  sub_228AD25F8(v29, v30);
  uint64_t v32 = type metadata accessor for MapScaleView(0);
  char v33 = *(unsigned char *)(v2 + *(int *)(v32 + 36));
  uint64_t v60 = v32;
  sub_228ACCD10((uint64_t)v21);
  if (v31 == 3) {
    char v34 = 0;
  }
  else {
    char v34 = v31;
  }
  v26[1] = v34;
  v26[2] = v33;
  uint64_t v35 = v2;
  uint64_t v36 = v70;
  (*(void (**)(char *, char *, uint64_t))(v71 + 32))(&v26[*(int *)(v70 + 28)], v21, v72);
  *uint64_t v26 = 1;
  sub_228B51E8C((uint64_t)v26, (uint64_t)v28, type metadata accessor for MapScaleViewConfig);
  uint64_t v37 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v18, 1, 1, v37);
  uint64_t v38 = (uint64_t)&v18[v16[7]];
  sub_228B51EF4((uint64_t)v28, v38, type metadata accessor for MapScaleViewConfig);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v38, 0, 1, v36);
  uint64_t v39 = &v18[v16[8]];
  uint64_t v40 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
  uint64_t v41 = &v18[v16[9]];
  uint64_t v42 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 1, 1, v42);
  *(_WORD *)&v18[v16[10]] = 2;
  *(_WORD *)&v18[v16[11]] = 2;
  *(_WORD *)&v18[v16[12]] = 2;
  uint64_t v43 = *(void *)(v2 + 16);
  LOBYTE(v36) = *(unsigned char *)(v2 + 24);
  sub_228AD266C(v43, v36);
  char v44 = sub_228ACD218(v43, v36);
  sub_228AD25F8(v43, v36);
  if (v44)
  {
    uint64_t v45 = sub_228BAD108();
    uint64_t v46 = v63;
    sub_228B51EF4((uint64_t)v18, v63, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
    int v47 = v62;
    sub_228AD2708(v46, (uint64_t)v62 + *(int *)(v74 + 36), &qword_268291B48);
    *int v47 = v45;
    sub_228AC1A50(v46, &qword_268291B48);
    uint64_t v48 = &qword_268291B50;
    uint64_t v49 = (uint64_t)v47;
    uint64_t v50 = v64;
    sub_228ACD8BC(v49, v64, &qword_268291B50);
    sub_228AD2708(v50, v76, &qword_268291B50);
  }
  else
  {
    uint64_t v51 = v61;
    sub_228B51EF4((uint64_t)v28, v61, type metadata accessor for MapScaleViewConfig);
    uint64_t v52 = (uint64_t *)(v35 + *(int *)(v60 + 32));
    uint64_t v53 = *v52;
    char v54 = *((unsigned char *)v52 + 8);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v56 = (uint64_t)v67;
    *int v67 = KeyPath;
    *(unsigned char *)(v56 + 8) = 0;
    sub_228B51E8C(v51, v56 + *(int *)(v65 + 24), type metadata accessor for MapScaleViewConfig);
    *(void *)(v56 + 16) = v53;
    *(unsigned char *)(v56 + 24) = v54;
    uint64_t v57 = v68;
    sub_228B51E8C(v56, v68, type metadata accessor for _MapScaleView);
    uint64_t v58 = v66;
    sub_228B51EF4(v57, v66, type metadata accessor for _MapScaleView);
    *(_WORD *)(v58 + *(int *)(v77 + 36)) = 257;
    sub_228B51FF4(v57, type metadata accessor for _MapScaleView);
    uint64_t v48 = &qword_268293388;
    uint64_t v50 = v69;
    sub_228ACD8BC(v58, v69, &qword_268293388);
    sub_228AD2708(v50, v76, &qword_268293388);
  }
  swift_storeEnumTagMultiPayload();
  sub_228ACD6EC();
  sub_228B51F5C();
  sub_228BACCC8();
  sub_228AC1A50(v50, v48);
  sub_228B51FF4((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  return sub_228B51FF4((uint64_t)v28, type metadata accessor for MapScaleViewConfig);
}

uint64_t sub_228B51734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228B537FC(&qword_2682933E8);

  return MEMORY[0x270F01780](a1, a2, a3, v6);
}

uint64_t sub_228B517B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228B537FC(&qword_2682933E8);

  return MEMORY[0x270F01718](a1, a2, a3, v6);
}

void sub_228B51834()
{
}

id sub_228B51878()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_228BAC588();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F10A20]), sel_init);
  if (*(unsigned char *)(v0 + 24)) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v0 + 16);
  uint64_t v9 = *(void *)v0;
  char v10 = *(unsigned char *)(v0 + 8);
  sub_228ACF3A4(*(void *)v0, v10);
  uint64_t v11 = sub_228ACFC38(v9, v10);
  sub_228AD26A8(v9, v10);
  if (!*(void *)(v11 + 16) || (unint64_t v12 = sub_228AD183C(v8), (v13 & 1) == 0))
  {
    uint64_t v22 = 0;
    char v23 = 1;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  sub_228AD2234(*(void *)(v11 + 56) + 8 * v12, (uint64_t)&v22);
  char v23 = 0;
  swift_bridgeObjectRelease();
  if (v23)
  {
LABEL_12:
    sub_228AC1A50((uint64_t)&v22, &qword_268291BD0);
    goto LABEL_13;
  }
  sub_228AD2184((uint64_t)&v22, (uint64_t)v24);
  uint64_t v14 = MEMORY[0x22A6A7CA0](v24);
  if (v14)
  {
    uint64_t v15 = (void *)v14;
    objc_msgSend(v6, sel_setMapView_, v14);
    uint64_t v16 = v1 + *(int *)(type metadata accessor for _MapScaleView(0) + 24);
    objc_msgSend(v6, sel_setScaleVisibility_, qword_228BB2830[*(char *)(v16 + 1)]);
    objc_msgSend(v6, sel_setLegendAlignment_, *(unsigned __int8 *)(v16 + 2));
    uint64_t v17 = type metadata accessor for MapScaleViewConfig(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v16 + *(int *)(v17 + 28), v2);
    int v18 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
    uint64_t v19 = 1;
    if (v18 != *MEMORY[0x263F18550] && v18 != *MEMORY[0x263F18560] && v18 != *MEMORY[0x263F18568])
    {
      if (v18 == *MEMORY[0x263F18558])
      {
        uint64_t v19 = 2;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 8))(v5, v2, 1);
        uint64_t v19 = 1;
      }
    }
    objc_msgSend(v6, sel__setControlSize_, v19);
  }
  sub_228AD21E0((uint64_t)v24);
LABEL_13:
  LODWORD(v7) = 1144750080;
  objc_msgSend(v6, sel__mapkit_setContentHuggingPriority_forAxis_, 1, v7);
  return v6;
}

id sub_228B51B64(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_228BAC588();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  double v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + 24)) {
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)v1;
  char v10 = *(unsigned char *)(v1 + 8);
  sub_228ACF3A4(*(void *)v1, v10);
  uint64_t v11 = sub_228ACFC38(v9, v10);
  sub_228AD26A8(v9, v10);
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_228AD183C(v8), (v13 & 1) != 0))
  {
    sub_228AD2234(*(void *)(v11 + 56) + 8 * v12, (uint64_t)&v23);
    char v24 = 0;
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
      sub_228AD2184((uint64_t)&v23, (uint64_t)v25);
      uint64_t v14 = (void *)MEMORY[0x22A6A7CA0](v25);
      objc_msgSend(a1, sel_setMapView_, v14);

      sub_228AD21E0((uint64_t)v25);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v23 = 0;
    char v24 = 1;
    swift_bridgeObjectRelease();
  }
  sub_228AC1A50((uint64_t)&v23, &qword_268291BD0);
LABEL_8:
  uint64_t v15 = v2 + *(int *)(type metadata accessor for _MapScaleView(0) + 24);
  objc_msgSend(a1, sel_setScaleVisibility_, qword_228BB2830[*(char *)(v15 + 1)]);
  objc_msgSend(a1, sel_setLegendAlignment_, *(unsigned __int8 *)(v15 + 2));
  uint64_t v16 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v15 + *(int *)(v16 + 28), v4);
  int v17 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v17 == *MEMORY[0x263F18550] || v17 == *MEMORY[0x263F18560] || v17 == *MEMORY[0x263F18568]) {
    goto LABEL_18;
  }
  if (v17 != *MEMORY[0x263F18558])
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_18:
    uint64_t v20 = 1;
    return objc_msgSend(a1, sel__setControlSize_, v20);
  }
  uint64_t v20 = 2;
  return objc_msgSend(a1, sel__setControlSize_, v20);
}

uint64_t type metadata accessor for MapScaleView(uint64_t a1)
{
  return sub_228AC29CC(a1, (uint64_t *)&unk_2682933A8);
}

uint64_t type metadata accessor for _MapScaleView(uint64_t a1)
{
  return sub_228AC29CC(a1, (uint64_t *)&unk_2682933C8);
}

uint64_t type metadata accessor for MapScaleViewConfig(uint64_t a1)
{
  return sub_228AC29CC(a1, (uint64_t *)&unk_2682933D8);
}

uint64_t sub_228B51E8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_228B51EF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_228B51F5C()
{
  unint64_t result = qword_268293398;
  if (!qword_268293398)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268293388);
    sub_228B537FC(&qword_2682933A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293398);
  }
  return result;
}

uint64_t sub_228B51FF4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_228B52054()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t initializeBufferWithCopyOfBuffer for MapScaleView(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_228ACF3A4(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 16);
    char v10 = *(unsigned char *)(a2 + 24);
    sub_228AD266C(v9, v10);
    *(void *)(a1 + 16) = v9;
    *(unsigned char *)(a1 + 24) = v10;
    uint64_t v11 = *(void *)(a2 + 32);
    char v12 = *(unsigned char *)(a2 + 40);
    sub_228AD266C(v11, v12);
    *(void *)(a1 + 32) = v11;
    *(unsigned char *)(a1 + 40) = v12;
    uint64_t v13 = a3[7];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (void *)(a2 + v13);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v16 = sub_228BAC588();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    }
    else
    {
      *uint64_t v14 = *v15;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v18 = a3[8];
    uint64_t v19 = a3[9];
    uint64_t v20 = a1 + v18;
    uint64_t v21 = a2 + v18;
    *(void *)uint64_t v20 = *(void *)v21;
    *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
    *(unsigned char *)(a1 + v19) = *(unsigned char *)(a2 + v19);
  }
  return a1;
}

uint64_t destroy for MapScaleView(uint64_t a1, uint64_t a2)
{
  sub_228AD26A8(*(void *)a1, *(unsigned char *)(a1 + 8));
  sub_228AD25F8(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  sub_228AD25F8(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_228BAC588();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

uint64_t initializeWithCopy for MapScaleView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_228ACF3A4(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  sub_228AD266C(v8, v9);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  uint64_t v10 = *(void *)(a2 + 32);
  char v11 = *(unsigned char *)(a2 + 40);
  sub_228AD266C(v10, v11);
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v15 = sub_228BAC588();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  else
  {
    *uint64_t v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = a1 + v16;
  uint64_t v19 = a2 + v16;
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  *(unsigned char *)(a1 + v17) = *(unsigned char *)(a2 + v17);
  return a1;
}

uint64_t assignWithCopy for MapScaleView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_228ACF3A4(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_228AD26A8(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  char v11 = *(unsigned char *)(a2 + 24);
  sub_228AD266C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 16);
  char v13 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 24) = v11;
  sub_228AD25F8(v12, v13);
  uint64_t v14 = *(void *)(a2 + 32);
  char v15 = *(unsigned char *)(a2 + 40);
  sub_228AD266C(v14, v15);
  uint64_t v16 = *(void *)(a1 + 32);
  char v17 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v14;
  *(unsigned char *)(a1 + 40) = v15;
  sub_228AD25F8(v16, v17);
  if (a1 != a2)
  {
    uint64_t v18 = a3[7];
    uint64_t v19 = (void *)(a1 + v18);
    uint64_t v20 = (void *)(a2 + v18);
    sub_228AC1A50(a1 + v18, (uint64_t *)&unk_268293270);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v21 = sub_228BAC588();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
    }
    else
    {
      *uint64_t v19 = *v20;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v22 = a3[8];
  uint64_t v23 = a1 + v22;
  char v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  *(unsigned char *)(v23 + 8) = *((unsigned char *)v24 + 8);
  *(void *)uint64_t v23 = v25;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for MapScaleView(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v6 = a3[7];
  char v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_228BAC588();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v11 = a3[8];
  uint64_t v12 = a3[9];
  uint64_t v13 = a1 + v11;
  uint64_t v14 = a2 + v11;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for MapScaleView(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_228AD26A8(v8, v9);
  char v10 = *((unsigned char *)a2 + 24);
  uint64_t v11 = *(void *)(a1 + 16);
  char v12 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v10;
  sub_228AD25F8(v11, v12);
  char v13 = *((unsigned char *)a2 + 40);
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = v13;
  sub_228AD25F8(v14, v15);
  if ((uint64_t *)a1 != a2)
  {
    uint64_t v16 = a3[7];
    char v17 = (void *)(a1 + v16);
    uint64_t v18 = (char *)a2 + v16;
    sub_228AC1A50(a1 + v16, (uint64_t *)&unk_268293270);
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v20 = sub_228BAC588();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v17, v18, v20);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v17, v18, *(void *)(*(void *)(v19 - 8) + 64));
    }
  }
  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = (uint64_t)a2 + v21;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  *(unsigned char *)(a1 + v22) = *((unsigned char *)a2 + v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapScaleView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B52850);
}

uint64_t sub_228B52850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B80);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for MapScaleView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B52910);
}

uint64_t sub_228B52910(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B80);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_228B529B8()
{
  sub_228B52A68();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_228B52A68()
{
  if (!qword_268293800)
  {
    sub_228BAC588();
    unint64_t v0 = sub_228BAC598();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268293800);
    }
  }
}

unint64_t sub_228B52AC4()
{
  unint64_t result = qword_2682933B8;
  if (!qword_2682933B8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2682933C0);
    sub_228ACD6EC();
    sub_228B51F5C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682933B8);
  }
  return result;
}

unint64_t sub_228B52B40(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_228ACF3A4(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    *(_WORD *)uint64_t v10 = *(_WORD *)(a2 + v9);
    *(unsigned char *)(v10 + 2) = *(unsigned char *)(a2 + v9 + 2);
    uint64_t v12 = *(int *)(type metadata accessor for MapScaleViewConfig(0) + 28);
    uint64_t v13 = v10 + v12;
    uint64_t v14 = v11 + v12;
    uint64_t v15 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_228B52C64(uint64_t a1, uint64_t a2)
{
  sub_228AD26A8(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for MapScaleViewConfig(0) + 28);
  uint64_t v6 = sub_228BAC588();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_228B52CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_228ACF3A4(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_WORD *)uint64_t v9 = *(_WORD *)v10;
  *(unsigned char *)(v9 + 2) = *(unsigned char *)(v10 + 2);
  uint64_t v11 = *(int *)(type metadata accessor for MapScaleViewConfig(0) + 28);
  uint64_t v12 = v9 + v11;
  uint64_t v13 = v10 + v11;
  uint64_t v14 = sub_228BAC588();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_228B52DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_228ACF3A4(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_228AD26A8(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (unsigned char *)(a1 + v11);
  uint64_t v13 = (unsigned char *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  v12[2] = v13[2];
  uint64_t v14 = *(int *)(type metadata accessor for MapScaleViewConfig(0) + 28);
  uint64_t v15 = &v12[v14];
  uint64_t v16 = &v13[v14];
  uint64_t v17 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_228B52EAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_WORD *)uint64_t v5 = *(_WORD *)(a2 + v4);
  *(unsigned char *)(v5 + 2) = *(unsigned char *)(a2 + v4 + 2);
  uint64_t v7 = *(int *)(type metadata accessor for MapScaleViewConfig(0) + 28);
  uint64_t v8 = v5 + v7;
  uint64_t v9 = v6 + v7;
  uint64_t v10 = sub_228BAC588();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_228B52F64(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_228AD26A8(v8, v9);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (unsigned char *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  v11[2] = v12[2];
  uint64_t v13 = *(int *)(type metadata accessor for MapScaleViewConfig(0) + 28);
  uint64_t v14 = &v11[v13];
  uint64_t v15 = &v12[v13];
  uint64_t v16 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_228B53038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B5304C);
}

uint64_t sub_228B5304C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for MapScaleViewConfig(0);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_228B530F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B53108);
}

uint64_t sub_228B53108(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for MapScaleViewConfig(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_228B531AC()
{
  uint64_t result = type metadata accessor for MapScaleViewConfig(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_228B5324C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 28);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_228B53320(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 28);
  uint64_t v3 = sub_228BAC588();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_228B53388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_228BAC588();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *sub_228B5340C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

uint64_t sub_228B53498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_228BAC588();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *sub_228B5351C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_228B535A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B535BC);
}

uint64_t sub_228B535BC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_228BAC588();
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 28)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_228B5366C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B53680);
}

unsigned char *sub_228B53680(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_228BAC588();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 28)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_228B53724()
{
  uint64_t result = sub_228BAC588();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_228B537C8()
{
  return sub_228B537FC(&qword_2682933A0);
}

uint64_t sub_228B537FC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _MapScaleView(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_228B53840(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  if ((sub_228BAC558() & 1) == 0) {
    return 0;
  }
  int v2 = sub_228BAC788();
  if (v2 != sub_228BAC788()) {
    return 0;
  }
  type metadata accessor for MapScaleViewConfig(0);

  return sub_228BAC578();
}

uint64_t sub_228B538E4@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  sub_228ACB118(v3);
  if (*(void *)(*(void *)(a2 - 8) + 64)) {
    a1(1);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();

  return sub_228ACB078(OffsetAttribute2, a3);
}

uint64_t LookAroundPreview.init(initialScene:allowsNavigation:showsRoadLabels:pointsOfInterest:badgePosition:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  uint64_t v13 = (uint64_t *)(a6 + *(int *)(type metadata accessor for LookAroundPreview() + 36));
  *uint64_t v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268291BE8);
  uint64_t result = swift_storeEnumTagMultiPayload();
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(void *)a6 = a1;
  *(unsigned char *)(a6 + 24) = a2;
  *(unsigned char *)(a6 + 25) = a3;
  *(void *)(a6 + 32) = v11;
  *(void *)(a6 + 40) = v12;
  *(void *)(a6 + 48) = a5;
  return result;
}

uint64_t type metadata accessor for LookAroundPreview()
{
  uint64_t result = qword_2682933F8;
  if (!qword_2682933F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t LookAroundPreview.init(scene:allowsNavigation:showsRoadLabels:pointsOfInterest:badgePosition:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15 = *a6;
  uint64_t v16 = a6[1];
  uint64_t v17 = (uint64_t *)(a8 + *(int *)(type metadata accessor for LookAroundPreview() + 36));
  *uint64_t v17 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268291BE8);
  uint64_t result = swift_storeEnumTagMultiPayload();
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2 | 0x8000000000000000;
  *(void *)(a8 + 16) = a3;
  *(unsigned char *)(a8 + 24) = a4;
  *(unsigned char *)(a8 + 25) = a5;
  *(void *)(a8 + 32) = v15;
  *(void *)(a8 + 40) = v16;
  *(void *)(a8 + 48) = a7;
  return result;
}

uint64_t LookAroundPreview.body.getter@<X0>(uint64_t a1@<X8>)
{
  int v2 = v1;
  uint64_t v4 = sub_228BAC928();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v12 = (uint64_t)v1[1];
  uint64_t v21 = *v1;
  uint64_t v11 = v21;
  uint64_t v13 = v1[2];
  type metadata accessor for LookAroundPreview();
  sub_228B53EB0(v11, v12, v13);
  sub_228AD1168((uint64_t)v10);
  sub_228BAC908();
  char v14 = sub_228BAC918();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  v15(v10, v4);
  char v16 = *((unsigned char *)v2 + 24);
  char v17 = *((unsigned char *)v2 + 25);
  uint64_t v18 = v2[4];
  *(void *)a1 = v21;
  *(void *)(a1 + 8) = v12;
  *(void *)(a1 + 16) = v13;
  *(unsigned char *)(a1 + 24) = v14 & 1;
  *(unsigned char *)(a1 + 25) = v16;
  *(unsigned char *)(a1 + 26) = v17;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v2 + 5);
  *(void *)(a1 + 32) = v18;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_228B53CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v4 = sub_228BAC928();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void **)v2;
  uint64_t v12 = *(void *)(v2 + 8);
  uint64_t v13 = *(void **)(v2 + 16);
  sub_228B53EB0(*(void **)v2, v12, v13);
  sub_228AD1168((uint64_t)v10);
  sub_228BAC908();
  LODWORD(v20) = sub_228BAC918();
  char v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v8, v4);
  v14(v10, v4);
  char v15 = *(unsigned char *)(v2 + 24);
  char v16 = *(unsigned char *)(v2 + 25);
  uint64_t v17 = *(void *)(v2 + 32);
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v12;
  *(void *)(a2 + 16) = v13;
  *(unsigned char *)(a2 + 24) = v20 & 1;
  *(unsigned char *)(a2 + 25) = v15;
  *(unsigned char *)(a2 + 26) = v16;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(v2 + 40);
  *(void *)(a2 + 32) = v17;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_228B53E68()
{
  return sub_228BACA88();
}

uint64_t sub_228B53E8C()
{
  return sub_228BACA88();
}

id sub_228B53EB0(void *a1, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    id v5 = a3;
    swift_retain();
    return (id)swift_retain();
  }
  else
  {
    return a1;
  }
}

uint64_t sub_228B53F10()
{
  return swift_getOpaqueTypeConformance2();
}

char *initializeBufferWithCopyOfBuffer for LookAroundPreview(char *a1, void **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    char v15 = (char *)*a2;
    *(void *)a1 = *a2;
    a1 = &v15[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v7 = (char *)*a2;
    uint64_t v8 = (uint64_t)a2[1];
    uint64_t v9 = (char *)a2[2];
    sub_228B53EB0(*a2, v8, v9);
    *(void *)a1 = v7;
    *((void *)a1 + 1) = v8;
    *((void *)a1 + 2) = v9;
    *((_WORD *)a1 + 12) = *((_WORD *)a2 + 12);
    uint64_t v10 = (char *)a2[5];
    *((void *)a1 + 4) = a2[4];
    *((void *)a1 + 5) = v10;
    uint64_t v11 = *(int *)(a3 + 36);
    uint64_t v12 = &a1[v11];
    uint64_t v13 = (void **)((char *)a2 + v11);
    *((void *)a1 + 6) = a2[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_268291BE8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_228BAC928();
      (*(void (**)(char *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
    }
    else
    {
      *(void *)uint64_t v12 = *v13;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for LookAroundPreview(uint64_t a1, uint64_t a2)
{
  sub_228B54160(*(void **)a1, *(void *)(a1 + 8), *(void **)(a1 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268291BE8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = sub_228BAC928();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  else
  {
    return swift_release();
  }
}

void sub_228B54160(void *a1, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    swift_release();
    swift_release();
    a1 = a3;
  }
}

uint64_t initializeWithCopy for LookAroundPreview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void **)(a2 + 16);
  sub_228B53EB0(*(void **)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = *(int *)(a3 + 36);
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268291BE8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = sub_228BAC928();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
  }
  else
  {
    *uint64_t v11 = *v12;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for LookAroundPreview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void **)(a2 + 16);
  sub_228B53EB0(*(void **)a2, v7, v8);
  uint64_t v9 = *(void **)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void **)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  sub_228B54160(v9, v10, v11);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  if (a1 != a2)
  {
    uint64_t v12 = *(int *)(a3 + 36);
    uint64_t v13 = (void *)(a1 + v12);
    uint64_t v14 = (void *)(a2 + v12);
    sub_228B5441C(a1 + v12);
    __swift_instantiateConcreteTypeFromMangledName(&qword_268291BE8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v15 = sub_228BAC928();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else
    {
      *uint64_t v13 = *v14;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_228B5441C(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291BE8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for LookAroundPreview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (const void *)(a2 + v4);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291BE8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v8 = sub_228BAC928();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v5, v6, v8);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for LookAroundPreview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void **)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v6;
  sub_228B54160(v7, v8, v9);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  if (a1 != a2)
  {
    uint64_t v10 = *(int *)(a3 + 36);
    uint64_t v11 = (void *)(a1 + v10);
    uint64_t v12 = (const void *)(a2 + v10);
    sub_228B5441C(a1 + v10);
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291BE8);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v14 = sub_228BAC928();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for LookAroundPreview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B546BC);
}

uint64_t sub_228B546BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682933F0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 36);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for LookAroundPreview(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B54790);
}

uint64_t sub_228B54790(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 32) = a2;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682933F0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_228B5483C()
{
  sub_228B548F8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_228B548F8()
{
  if (!qword_268293408)
  {
    sub_228BAC928();
    unint64_t v0 = sub_228BAC598();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_268293408);
    }
  }
}

unint64_t sub_228B54954()
{
  unint64_t result = qword_2682934A0;
  if (!qword_2682934A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682934A0);
  }
  return result;
}

void static MapFeature.FeatureKind.pointOfInterest.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static MapFeature.FeatureKind.territory.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static MapFeature.FeatureKind.physicalFeature.getter(void *a1@<X8>)
{
  *a1 = 2;
}

id MapFeature.coordinate.getter()
{
  return objc_msgSend(*v0, sel_coordinate);
}

uint64_t MapFeature.title.getter()
{
  id v1 = objc_msgSend(*v0, sel_title);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = sub_228BAD408();

  return v3;
}

id MapFeature.kind.getter@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(*v1, sel_featureType);
  if ((unint64_t)result >= 3)
  {
    id result = (id)sub_228BAD938();
    __break(1u);
  }
  else
  {
    *a1 = result;
  }
  return result;
}

id MapFeature.backgroundColor.getter()
{
  return sub_228B54B10((SEL *)&selRef_backgroundColor, MEMORY[0x263F1B468]);
}

id MapFeature.image.getter()
{
  return sub_228B54B10((SEL *)&selRef_image, MEMORY[0x263F1B498]);
}

id sub_228B54B10(SEL *a1, uint64_t (*a2)(id))
{
  id result = objc_msgSend(*v2, sel_iconStyle);
  if (result)
  {
    uint64_t v6 = result;
    id v7 = [result *a1];

    if (v7) {
      return (id)a2(v7);
    }
    else {
      return 0;
    }
  }
  return result;
}

id MapFeature.pointOfInterestCategory.getter()
{
  id v1 = objc_msgSend(*v0, sel_pointOfInterestCategory);

  return v1;
}

id static MapFeature.== infix(_:_:)(id *a1, void *a2)
{
  return objc_msgSend(*a1, sel_isEqual_, *a2);
}

id sub_228B54BEC(id *a1, void *a2)
{
  return objc_msgSend(*a1, sel_isEqual_, *a2);
}

uint64_t MapFeature.hash(into:)()
{
  return sub_228BAD708();
}

uint64_t MapFeature.hashValue.getter()
{
  return sub_228BADA88();
}

uint64_t sub_228B54C7C()
{
  return sub_228BADA88();
}

uint64_t sub_228B54CC0()
{
  return sub_228BAD708();
}

uint64_t sub_228B54CE4()
{
  return sub_228BADA88();
}

uint64_t MapFeature.FeatureKind.description.getter()
{
  uint64_t v1 = *v0;
  if (!*v0) {
    return 0x49664F746E696F70;
  }
  if (v1 == 2) {
    return 0x6C61636973796870;
  }
  if (v1 == 1) {
    return 0x726F746972726574;
  }
  uint64_t result = sub_228BAD938();
  __break(1u);
  return result;
}

BOOL static MapFeature.FeatureKind.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_228B54E1C()
{
  sub_228B55204();
  sub_228BACB08();
  return v1;
}

uint64_t View.mapFeatureSelectionContent<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_getKeyPath();
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  swift_retain();
  sub_228BAD028();
  swift_release();
  return swift_release();
}

double sub_228B54F38@<D0>(_OWORD *a1@<X8>)
{
  sub_228B55204();
  sub_228BACB08();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_228B54F88(uint64_t *a1)
{
  return sub_228BACB18();
}

double sub_228B54FDC@<D0>(_OWORD *a1@<X8>)
{
  sub_228B55204();
  sub_228BACB08();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_228B55030()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_228B55068@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[5];
  uint64_t v5 = (uint64_t (*)(uint64_t *))v2[6];
  uint64_t v7 = *a1;
  a2[3] = v3;
  a2[4] = v4;
  __swift_allocate_boxed_opaque_existential_0(a2);
  return v5(&v7);
}

unint64_t sub_228B550C0()
{
  unint64_t result = qword_268293410;
  if (!qword_268293410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293410);
  }
  return result;
}

ValueMetadata *type metadata accessor for MapFeature()
{
  return &type metadata for MapFeature;
}

ValueMetadata *type metadata accessor for MapFeature.FeatureKind()
{
  return &type metadata for MapFeature.FeatureKind;
}

uint64_t sub_228B55134()
{
  return swift_getWitnessTable();
}

unint64_t sub_228B551A8()
{
  unint64_t result = qword_268293420;
  if (!qword_268293420)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268293418);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293420);
  }
  return result;
}

unint64_t sub_228B55204()
{
  unint64_t result = qword_268293428;
  if (!qword_268293428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293428);
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultMapFeatureSelectionContentKey()
{
  return &type metadata for DefaultMapFeatureSelectionContentKey;
}

uint64_t sub_228B55268(uint64_t result)
{
  if ((*(void *)(v1 + OBJC_IVAR____TtCV15_MapKit_SwiftUI18_LookAroundPreview11Coordinator_sceneStorage + 8) & 0x8000000000000000) != 0)
  {
    uint64_t v2 = (void *)result;
    id v3 = *(id *)(v1 + OBJC_IVAR____TtCV15_MapKit_SwiftUI18_LookAroundPreview11Coordinator_sceneStorage + 16);
    swift_retain();
    swift_retain();
    objc_msgSend(v2, sel_scene);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2682934B0);
    sub_228BAD1E8();

    swift_release();
    return swift_release();
  }
  return result;
}

id sub_228B553C8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _LookAroundPreview.Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for _LookAroundPreview.Coordinator()
{
  return self;
}

void destroy for _LookAroundPreview.SceneStorage(uint64_t a1)
{
}

void *_s15_MapKit_SwiftUI18_LookAroundPreviewV12SceneStorageOwCP_0(void *a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  sub_228B53EB0(*(void **)a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t assignWithCopy for _LookAroundPreview.SceneStorage(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void **)(a2 + 16);
  sub_228B53EB0(*(void **)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void **)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_228B54160(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for _LookAroundPreview.SceneStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void **)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  sub_228B54160(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for _LookAroundPreview.SceneStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 57) >> 6) | (2
                                                          * ((*(void *)(a1 + 8) >> 57) & 0x38 | *(void *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for _LookAroundPreview.SceneStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 16) = 0;
    }
  }
  return result;
}

uint64_t sub_228B555E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = *(void *)(result + 8) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for _LookAroundPreview.SceneStorage()
{
  return &type metadata for _LookAroundPreview.SceneStorage;
}

uint64_t destroy for _LookAroundPreview(uint64_t a1)
{
  sub_228B54160(*(void **)a1, *(void *)(a1 + 8), *(void **)(a1 + 16));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _LookAroundPreview(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 16);
  sub_228B53EB0(*(void **)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _LookAroundPreview(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void **)(a2 + 16);
  sub_228B53EB0(*(void **)a2, v5, v6);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void **)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  sub_228B54160(v7, v8, v9);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for _LookAroundPreview(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void **)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  sub_228B54160(v5, v6, v7);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for _LookAroundPreview(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _LookAroundPreview(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _LookAroundPreview()
{
  return &type metadata for _LookAroundPreview;
}

void sub_228B558D8(void *a1, uint64_t a2)
{
  int v4 = *v2;
  uint64_t v5 = *((unsigned __int8 *)v2 + 24);
  uint64_t v6 = *((unsigned __int8 *)v2 + 25);
  uint64_t v7 = *((unsigned __int8 *)v2 + 26);
  uint64_t v9 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v22 = v2[6];
  uint64_t v23 = v2[2];
  uint64_t v24 = (uint64_t)v2[1];
  if (v24 < 0)
  {
    uint64_t v21 = a2;
    uint64_t v25 = *v2;
    uint64_t v11 = v2[2];
    swift_retain();
    swift_retain();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682934B0);
    MEMORY[0x22A6A6930](&v26, v12);

    swift_release();
    swift_release();
    uint64_t v10 = v26;
  }
  else
  {
    uint64_t v10 = v4;
  }
  objc_msgSend(a1, sel_setScene_, v10, v21);

  objc_msgSend(a1, sel__setFullScreenCover_, v5);
  objc_msgSend(a1, sel_setNavigationEnabled_, v6);
  objc_msgSend(a1, sel_setShowsRoadLabels_, v7);
  if (v9)
  {
    id v13 = objc_allocWithZone(MEMORY[0x263F109F0]);
    type metadata accessor for MKPointOfInterestCategory(0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v14 = (void *)sub_228BAD498();
    swift_bridgeObjectRelease();
    id v15 = objc_msgSend(v13, sel_initIncludingCategories_, v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!v8)
    {
      id v15 = 0;
      goto LABEL_9;
    }
    id v16 = objc_allocWithZone(MEMORY[0x263F109F0]);
    type metadata accessor for MKPointOfInterestCategory(0);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = (void *)sub_228BAD498();
    swift_bridgeObjectRelease();
    id v15 = objc_msgSend(v16, sel_initExcludingCategories_, v14);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

LABEL_9:
  objc_msgSend(a1, sel_setPointOfInterestFilter_, v15);

  objc_msgSend(a1, sel_setBadgePosition_, v22);
  __swift_instantiateConcreteTypeFromMangledName(qword_2682934B8);
  sub_228BACF48();
  uint64_t v17 = &v25[OBJC_IVAR____TtCV15_MapKit_SwiftUI18_LookAroundPreview11Coordinator_sceneStorage];
  uint64_t v18 = *(void **)&v25[OBJC_IVAR____TtCV15_MapKit_SwiftUI18_LookAroundPreview11Coordinator_sceneStorage];
  uint64_t v19 = *(void *)&v25[OBJC_IVAR____TtCV15_MapKit_SwiftUI18_LookAroundPreview11Coordinator_sceneStorage + 8];
  uint64_t v20 = *(void **)&v25[OBJC_IVAR____TtCV15_MapKit_SwiftUI18_LookAroundPreview11Coordinator_sceneStorage + 16];
  *(void *)uint64_t v17 = v4;
  *((void *)v17 + 1) = v24;
  *((void *)v17 + 2) = v23;
  sub_228B53EB0(v4, v24, v23);
  sub_228B54160(v18, v19, v20);
}

id sub_228B55B78(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F10938]), sel_init);
  __swift_instantiateConcreteTypeFromMangledName(qword_2682934B8);
  sub_228BACF48();
  objc_msgSend(v2, sel_setDelegate_, v4);

  sub_228B558D8(v2, a1);
  return v2;
}

id sub_228B55C6C@<X0>(void *a1@<X8>)
{
  unint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void **)(v1 + 16);
  uint64_t v6 = (objc_class *)type metadata accessor for _LookAroundPreview.Coordinator();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  uint64_t v8 = &v7[OBJC_IVAR____TtCV15_MapKit_SwiftUI18_LookAroundPreview11Coordinator_sceneStorage];
  *(void *)uint64_t v8 = v3;
  *((void *)v8 + 1) = v4;
  *((void *)v8 + 2) = v5;
  sub_228B53EB0(v3, v4, v5);
  v10.receiver = v7;
  v10.super_class = v6;
  id result = objc_msgSendSuper2(&v10, sel_init);
  *a1 = result;
  return result;
}

uint64_t sub_228B55CF8()
{
  return sub_228BACEE8();
}

uint64_t sub_228B55D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_228B55E24();

  return MEMORY[0x270F02710](a1, a2, a3, v6);
}

uint64_t sub_228B55D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_228B55E24();

  return MEMORY[0x270F026D8](a1, a2, a3, v6);
}

void sub_228B55DFC()
{
}

unint64_t sub_228B55E24()
{
  unint64_t result = qword_2682934A8;
  if (!qword_2682934A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682934A8);
  }
  return result;
}

uint64_t MapReader.init(content:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t MapReader.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932E8);
  uint64_t v8 = (void *)swift_allocObject();
  uint64_t v9 = *(void *)(a1 + 24);
  v8[2] = *(void *)(a1 + 16);
  v8[3] = v9;
  v8[4] = v6;
  v8[5] = v5;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268293308);
  sub_228B56414((unint64_t *)&unk_268293310, &qword_268293308);
  uint64_t v10 = sub_228BACD18();
  uint64_t v11 = sub_228B56414(&qword_2682932F8, &qword_2682932E8);
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_228BAC738();
  swift_release();
  v16[0] = v21;
  v16[1] = v22;
  uint64_t v17 = v7;
  uint64_t v18 = v10;
  uint64_t v19 = v11;
  uint64_t v20 = WitnessTable;
  uint64_t v13 = sub_228BACD18();
  uint64_t v14 = swift_getWitnessTable();
  sub_228B1AC7C(&v17, v16, v13, v14);
  swift_release();
  uint64_t v21 = v17;
  uint64_t v22 = v18;
  sub_228B1AC7C(a2, &v21, v13, v14);
  return swift_release();
}

uint64_t sub_228B5602C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v16[0] = a2;
  v16[1] = a6;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293658);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268293308);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a4;
  *((void *)v14 + 3) = a5;
  *((void *)v14 + 4) = v16[0];
  *((void *)v14 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v14[v13], (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  sub_228B56414((unint64_t *)&unk_268293310, &qword_268293308);
  swift_retain();
  sub_228BAC738();
  return swift_release();
}

uint64_t sub_228B561D4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_228B5620C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_228B5602C(a1, v2[4], v2[5], v2[2], v2[3], a2);
}

uint64_t sub_228B56218@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v18[2] = a3;
  uint64_t v19 = a2;
  v18[1] = a5;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(qword_268293660);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (void *)((char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293658);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (void *)((char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  if (v13 == 8)
  {
    uint64_t v16 = *v14;
    (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v7);
    if (v9 == 8)
    {
      uint64_t v17 = *v10;
      (*(void (**)(uint64_t *, uint64_t))(v8 + 8))(v10, v7);
      v20[0] = v16;
      v20[1] = v17;
      return v19(v20);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_228B56414(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_228B56468@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MapSizingInformation();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932E0);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v16 - v10;
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (!WeakValue) {
    goto LABEL_4;
  }
  sub_228AD2708(WeakValue, (uint64_t)v11, &qword_2682932E0);
  sub_228ACD8BC((uint64_t)v11, (uint64_t)v9, &qword_2682932E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    sub_228AC1A50((uint64_t)v9, &qword_2682932E0);
LABEL_4:
    uint64_t v13 = sub_228BAC6E8();
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    v14(v5, 1, 1, v13);
    sub_228AC1A50((uint64_t)v5, &qword_2682932F0);
    v14(v5, 1, 1, v13);
    *(void *)&v5[*(int *)(v2 + 20)] = 0x3FF0000000000000;
    uint64_t v9 = v5;
  }
  return sub_228B58B24((uint64_t)v9, a1);
}

uint64_t sub_228B56684@<X0>(uint64_t a1@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_268291BD0);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    sub_228AD2708(WeakValue, (uint64_t)v6, &qword_268291BD0);
    sub_228ACD8BC((uint64_t)v6, (uint64_t)v5, &qword_268291BD0);
    if ((v5[8] & 1) == 0)
    {
      uint64_t v3 = v5;
      return sub_228AD2184((uint64_t)v3, a1);
    }
    sub_228AC1A50((uint64_t)v5, &qword_268291BD0);
  }
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  uint64_t v3 = v6;
  return sub_228AD2184((uint64_t)v3, a1);
}

BOOL sub_228B56738(double a1, double a2)
{
  uint64_t v3 = *(void *)&a1 & 0xFFFFFFFFFFFFFLL;
  BOOL result = 0;
  if ((*(void *)&a1 & 0x7FF0000000000000) != 0x7FF0000000000000 || v3 == 0)
  {
    BOOL v6 = (*(void *)&a1 & 0x7FF0000000000000) == 0x7FF0000000000000 && v3 == 0;
    if (!v6 && (*(void *)&a2 & 0x7FF0000000000000) != 0x7FF0000000000000)
    {
      uint64_t v8 = sub_228BAC3E8();
      return (double)sub_228BAC3E8() != a2 || (double)v8 != a1;
    }
  }
  return result;
}

uint64_t sub_228B567C8()
{
  uint64_t v0 = sub_228BACCD8();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = &v21[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932F0);
  MEMORY[0x270FA5388](v4 - 8);
  BOOL v6 = &v21[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v7 = type metadata accessor for MapSizingInformation();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_228B56684((uint64_t)v21);
  uint64_t v10 = (void *)MEMORY[0x22A6A7CA0](v21);
  sub_228AD21E0((uint64_t)v21);
  if (!v10) {
    goto LABEL_6;
  }
  id v11 = objc_msgSend(v10, sel_superview);
  if (!v11)
  {

LABEL_6:
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  uint64_t v12 = v11;
  objc_msgSend(v10, sel_frame);
  objc_msgSend(v12, sel_convertRect_toView_, 0);
  double v14 = v13;

  sub_228B56468((uint64_t)v9);
  sub_228AD2708((uint64_t)v9, (uint64_t)v6, &qword_2682932F0);
  uint64_t v15 = sub_228BAC6E8();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v6, 1, v15) == 1)
  {
    sub_228AC1A50((uint64_t)v6, &qword_2682932F0);
    double v17 = 0.0;
  }
  else
  {
    sub_228BACD38();
    sub_228BAC6D8();
    double v17 = v19;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v15);
  }

  sub_228B56D84((uint64_t)v9);
  *(double *)&uint64_t result = v17 - v14;
  return result;
}

void __swiftcall MapProxy.camera(framing:)(_MapKit_SwiftUI::MapCamera *__return_ptr retstr, __C::MKCoordinateRegion framing)
{
  double longitudeDelta = framing.span.longitudeDelta;
  double latitudeDelta = framing.span.latitudeDelta;
  double longitude = framing.center.longitude;
  double latitude = framing.center.latitude;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932F0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MapSizingInformation();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228B56468((uint64_t)v12);
  sub_228AD2708((uint64_t)v12, (uint64_t)v9, &qword_2682932F0);
  uint64_t v13 = sub_228BAC6E8();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) == 1)
  {
    sub_228AC1A50((uint64_t)v9, &qword_2682932F0);
    double v15 = 0.0;
    double v16 = 0.0;
  }
  else
  {
    sub_228BAC6B8();
    double v16 = v17;
    double v15 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v13);
  }
  uint64_t v19 = sub_228B56D84((uint64_t)v12);
  double v20 = MEMORY[0x22A6A7430](v19, latitude, longitude, latitudeDelta, longitudeDelta);
  id v24 = objc_msgSend(self, sel__cameraLookingAtMapRect_forViewSize_, v20, v21, v22, v23, v16, v15);
  if (v24)
  {
    uint64_t v25 = v24;
    objc_msgSend(v24, sel_centerCoordinate);
    Swift::Double v27 = v26;
    Swift::Double v29 = v28;
    objc_msgSend(v25, sel_centerCoordinateDistance);
    Swift::Double v31 = v30;
    objc_msgSend(v25, sel_heading);
    Swift::Double v33 = v32;
    objc_msgSend(v25, sel_pitch);
    Swift::Double v35 = v34;

    retstr->centerCoordinate.double latitude = v27;
    retstr->centerCoordinate.double longitude = v29;
    retstr->distance = v31;
    retstr->heading = v33;
    retstr->pitch = v35;
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for MapSizingInformation()
{
  uint64_t result = qword_2682935C0;
  if (!qword_2682935C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_228B56D84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MapSizingInformation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void __swiftcall MapProxy.camera(framing:)(_MapKit_SwiftUI::MapCamera *__return_ptr retstr, __C::MKMapRect framing)
{
  double height = framing.size.height;
  double width = framing.size.width;
  double y = framing.origin.y;
  double x = framing.origin.x;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932F0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MapSizingInformation();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228B56468((uint64_t)v12);
  sub_228AD2708((uint64_t)v12, (uint64_t)v9, &qword_2682932F0);
  uint64_t v13 = sub_228BAC6E8();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) == 1)
  {
    sub_228AC1A50((uint64_t)v9, &qword_2682932F0);
    double v15 = 0.0;
    double v16 = 0.0;
  }
  else
  {
    sub_228BAC6B8();
    double v16 = v17;
    double v15 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v13);
  }
  sub_228B56D84((uint64_t)v12);
  id v19 = objc_msgSend(self, sel__cameraLookingAtMapRect_forViewSize_, x, y, width, height, v16, v15);
  if (v19)
  {
    double v20 = v19;
    objc_msgSend(v19, sel_centerCoordinate);
    Swift::Double v22 = v21;
    Swift::Double v24 = v23;
    objc_msgSend(v20, sel_centerCoordinateDistance);
    Swift::Double v26 = v25;
    objc_msgSend(v20, sel_heading);
    Swift::Double v28 = v27;
    objc_msgSend(v20, sel_pitch);
    Swift::Double v30 = v29;

    retstr->centerCoordinate.double latitude = v22;
    retstr->centerCoordinate.double longitude = v24;
    retstr->distance = v26;
    retstr->heading = v28;
    retstr->pitch = v30;
  }
  else
  {
    __break(1u);
  }
}

void __swiftcall MapProxy.camera(framing:allowPitch:)(_MapKit_SwiftUI::MapCamera *__return_ptr retstr, MKMapItem framing, Swift::Bool allowPitch)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932F0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for MapSizingInformation();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = framing.super.isa;
  sub_228B56468((uint64_t)v11);
  sub_228AD2708((uint64_t)v11, (uint64_t)v8, &qword_2682932F0);
  uint64_t v13 = sub_228BAC6E8();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v8, 1, v13) == 1)
  {
    sub_228AC1A50((uint64_t)v8, &qword_2682932F0);
    double v15 = 0.0;
    double v16 = 0.0;
  }
  else
  {
    sub_228BAC6B8();
    double v16 = v17;
    double v15 = v18;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v13);
  }
  sub_228B56D84((uint64_t)v11);
  id v19 = objc_msgSend(self, sel_cameraLookingAtMapItem_forViewSize_allowPitch_, v12, allowPitch, v16, v15);
  objc_msgSend(v19, sel_centerCoordinate);
  Swift::Double v21 = v20;
  Swift::Double v23 = v22;
  objc_msgSend(v19, sel_centerCoordinateDistance);
  Swift::Double v25 = v24;
  objc_msgSend(v19, sel_heading);
  Swift::Double v27 = v26;
  objc_msgSend(v19, sel_pitch);
  Swift::Double v29 = v28;

  retstr->centerCoordinate.double latitude = v21;
  retstr->centerCoordinate.double longitude = v23;
  retstr->distance = v25;
  retstr->heading = v27;
  retstr->pitch = v29;
}

uint64_t MapProxy.convert<A>(_:from:)(uint64_t a1, double a2, double a3)
{
  uint64_t v7 = sub_228BAC7F8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  int v13 = *((_DWORD *)v3 + 2);
  int v12 = *((_DWORD *)v3 + 3);
  sub_228B56684((uint64_t)&v26);
  uint64_t v14 = (void *)MEMORY[0x22A6A7CA0](&v26);
  sub_228AD21E0((uint64_t)&v26);
  if (!v14) {
    return 0;
  }
  uint64_t v26 = v11;
  int v27 = v13;
  int v28 = v12;
  double v15 = sub_228B574A0(a2, a3, a1, sub_228B57498, 0);
  double v17 = v16;
  sub_228BACD28();
  char v18 = sub_228BAC7D8();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v19 = 0;
  if (v18) {
    id v19 = v14;
  }
  objc_msgSend(v14, sel_convertPoint_toCoordinateFromView_, v19, v15, v17);
  CLLocationDegrees v21 = v20;
  CLLocationDegrees v23 = v22;

  v29.double latitude = v21;
  v29.double longitude = v23;
  BOOL v24 = CLLocationCoordinate2DIsValid(v29);

  if (v24) {
    return *(void *)&v21;
  }
  else {
    return 0;
  }
}

double sub_228B57498(double a1, double a2)
{
  return a1 + a2;
}

double sub_228B574A0(double a1, double a2, uint64_t a3, double (*a4)(double, double), uint64_t a5)
{
  uint64_t v39 = a5;
  uint64_t v40 = a4;
  uint64_t v8 = type metadata accessor for MapSizingInformation();
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v38 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_228BAC7F8();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = ((uint64_t (*)(uint64_t))MEMORY[0x270FA5388])(v10);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v15 = MEMORY[0x270FA5388](v12);
  double v17 = (char *)&v37 - v16;
  int v18 = *v5;
  v15.n128_u64[0] = *(void *)(v5 + 1);
  __n128 v41 = v15;
  int v19 = v5[3];
  sub_228BACD28();
  if ((sub_228BAC7E8() & 1) == 0)
  {
    int v42 = v18;
    unint64_t v43 = v41.n128_u64[0];
    int v44 = v19;
    uint64_t v20 = sub_228B567C8();
    if ((v22 & 1) == 0)
    {
      double v23 = v21;
      BOOL v24 = v40;
      a1 = v40(a1, *(double *)&v20);
      a2 = v24(a2, v23);
    }
  }
  char v25 = sub_228BAC7E8();
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v17, v10);
  if (v25)
  {
    uint64_t v26 = *(void (**)(char *, uint64_t))(v11 + 8);
    v26(v14, v10);
  }
  else
  {
    char v27 = sub_228BAC7D8();
    uint64_t v26 = *(void (**)(char *, uint64_t))(v11 + 8);
    v26(v14, v10);
    if ((v27 & 1) == 0)
    {
      uint64_t v28 = v38;
      sub_228B56468(v38);
      uint64_t v29 = sub_228B5862C();
      double v31 = v30;
      char v33 = v32;
      uint64_t v34 = sub_228B56D84(v28);
      if ((v33 & 1) == 0)
      {
        Swift::Double v35 = (void (*)(double, double))v40;
        a1 = ((double (*)(uint64_t, double, double))v40)(v34, a1, *(double *)&v29);
        v35(a2, v31);
      }
    }
  }
  v26(v17, v10);
  return a1;
}

uint64_t MapProxy.convert<A>(_:to:)(uint64_t a1, double a2, double a3)
{
  uint64_t v7 = sub_228BAC7F8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v3;
  int v12 = *((_DWORD *)v3 + 2);
  int v13 = *((_DWORD *)v3 + 3);
  sub_228B56684((uint64_t)&v23);
  uint64_t v14 = (void *)MEMORY[0x22A6A7CA0](&v23);
  sub_228AD21E0((uint64_t)&v23);
  if (v14)
  {
    sub_228BACD28();
    char v15 = sub_228BAC7D8();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    if (v15) {
      id v16 = v14;
    }
    else {
      id v16 = 0;
    }
    objc_msgSend(v14, sel_convertCoordinate_toPointToView_, v16, a2, a3);
    double v18 = v17;
    double v20 = v19;

    if (sub_228B56738(v18, v20))
    {
      uint64_t v23 = v11;
      int v24 = v12;
      int v25 = v13;
      double v21 = sub_228B574A0(v18, v20, a1, sub_228B57970, 0);

      return *(void *)&v21;
    }
  }
  return 0;
}

double sub_228B57970(double a1, double a2)
{
  return a1 - a2;
}

uint64_t sub_228B57978()
{
  return swift_getOpaqueTypeConformance2();
}

void *sub_228B579BC(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t sub_228B579EC()
{
  return swift_release();
}

void *sub_228B579F4(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_228B57A30(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MapContentList(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MapContentList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for MapReader()
{
  return __swift_instantiateGenericMetadata();
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

ValueMetadata *type metadata accessor for MapProxy()
{
  return &type metadata for MapProxy;
}

uint64_t sub_228B57B1C()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for MapPreferencePromise()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *sub_228B57C10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_228BAC6E8();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932F0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_228B57D88(uint64_t a1)
{
  uint64_t v2 = sub_228BAC6E8();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

char *sub_228B57E58(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_228BAC6E8();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932F0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_228B57F80(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_228BAC6E8();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932F0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_228B5810C(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_228BAC6E8();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932F0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  return a1;
}

char *sub_228B58234(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_228BAC6E8();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932F0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t sub_228B583C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B583D4);
}

uint64_t sub_228B583D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932F0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_228B58444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B58458);
}

uint64_t sub_228B58458(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932F0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_228B584CC()
{
  sub_228B58564();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_228B58564()
{
  if (!qword_2682935D0[0])
  {
    sub_228BAC6E8();
    unint64_t v0 = sub_228BAD718();
    if (!v1) {
      atomic_store(v0, qword_2682935D0);
    }
  }
}

uint64_t sub_228B585BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 8);
}

uint64_t type metadata accessor for MapReaderPreferenceKey()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B585DC()
{
  return sub_228B56414(&qword_2682932F8, &qword_2682932E8);
}

uint64_t sub_228B58604()
{
  return sub_228B56414((unint64_t *)&unk_268293310, &qword_268293308);
}

uint64_t sub_228B5862C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_228BACCD8();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682932F0);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  int v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v22 - v10;
  if (sub_228BAC7E8()) {
    goto LABEL_7;
  }
  uint64_t v23 = v3;
  sub_228AD2708(v0, (uint64_t)v11, &qword_2682932F0);
  uint64_t v12 = sub_228BAC6E8();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v14(v11, 1, v12) == 1)
  {
    uint64_t v15 = (uint64_t)v11;
LABEL_6:
    sub_228AC1A50(v15, &qword_2682932F0);
LABEL_7:
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  sub_228BAC6C8();
  double v17 = v16;
  double v18 = *(void (**)(char *, uint64_t))(v13 + 8);
  v18(v11, v12);
  sub_228AD2708(v1, (uint64_t)v9, &qword_2682932F0);
  if (v14(v9, 1, v12) == 1)
  {
    uint64_t v15 = (uint64_t)v9;
    goto LABEL_6;
  }
  sub_228BACD38();
  sub_228BAC6D8();
  double v21 = v20;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v2);
  v18(v9, v12);
  *(double *)&uint64_t result = v21 - v17;
  return result;
}

uint64_t sub_228B588E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56))(a2, 1, 1, a1);
}

uint64_t sub_228B58920(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  double v18 = a2;
  uint64_t v6 = sub_228BAD718();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  int v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v17 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 32);
  v14(v9, a1, v6, v11);
  uint64_t v15 = *(void *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, a4) == 1)
  {
    v18();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v13, v9, a4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, a4);
  }
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v14)(a1, v13, v6);
}

uint64_t sub_228B58B0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_228B588E8(*(void *)(a1 + 16), a2);
}

uint64_t sub_228B58B14(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  return sub_228B58920(a1, a2, a3, *(void *)(a4 + 16));
}

uint64_t sub_228B58B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MapSizingInformation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_228B58B88()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293658);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_228B58C58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_268293658) - 8);
  uint64_t v6 = *(uint64_t (**)(void *))(v2 + 32);
  uint64_t v7 = *(void *)(v2 + 40);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_228B56218(a1, v6, v7, v8, a2);
}

void static MapStyle.StandardEmphasis.weatherStandard.getter(void *a1@<X8>)
{
  *a1 = *MEMORY[0x263F10878];
}

void static MapStyle.StandardEmphasis.weatherWind.getter(void *a1@<X8>)
{
  *a1 = *MEMORY[0x263F10880];
}

ValueMetadata *type metadata accessor for DynamicViewContentOffsetTraitKey()
{
  return &type metadata for DynamicViewContentOffsetTraitKey;
}

void sub_228B58D30(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t sub_228B58D40()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_228B58DE8(uint64_t a1, char a2)
{
  unint64_t v3 = v2;
  sub_228B65A44(a1, (uint64_t)&v76);
  if (v81)
  {
    if (v81 == 1)
    {
      double v5 = v76;
      double v6 = v77;
      double v7 = v78;
      double v8 = v79;
      objc_msgSend(v2, sel_visibleMapRect);
      if (v5 != v12 || v6 != v9 || v7 != v10 || v8 != v11)
      {
        if (qword_268291370 != -1) {
          swift_once();
        }
        uint64_t v16 = sub_228BAC508();
        __swift_project_value_buffer(v16, (uint64_t)qword_26829D4F8);
        uint64_t v17 = sub_228BAC4E8();
        os_log_type_t v18 = sub_228BAD668();
        if (os_log_type_enabled(v17, v18))
        {
          double v19 = (uint8_t *)swift_slowAlloc();
          uint64_t v20 = swift_slowAlloc();
          *(_DWORD *)double v19 = 136380675;
          uint64_t v75 = v20;
          type metadata accessor for MKMapRect(0);
          uint64_t v21 = sub_228BAD418();
          sub_228AD11A0(v21, v22, &v75);
          sub_228BAD738();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_228ABB000, v17, v18, "model -> mapview %{private}s", v19, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x22A6A7BE0](v20, -1, -1);
          MEMORY[0x22A6A7BE0](v19, -1, -1);
        }

        objc_msgSend(v3, sel_setVisibleMapRect_animated_, a2 & 1, v5, v6, v7, v8);
        return;
      }
      if (qword_268291370 != -1) {
        swift_once();
      }
      uint64_t v70 = sub_228BAC508();
      __swift_project_value_buffer(v70, (uint64_t)qword_26829D4F8);
      uint64_t v58 = sub_228BAC4E8();
      os_log_type_t v59 = sub_228BAD668();
      if (!os_log_type_enabled(v58, v59))
      {
LABEL_58:

        return;
      }
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 136380675;
      uint64_t v75 = v61;
      type metadata accessor for MKMapRect(0);
LABEL_57:
      uint64_t v71 = sub_228BAD418();
      sub_228AD11A0(v71, v72, &v75);
      sub_228BAD738();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_228ABB000, v58, v59, "model == mapview %{private}s", v60, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A6A7BE0](v61, -1, -1);
      MEMORY[0x22A6A7BE0](v60, -1, -1);
      goto LABEL_58;
    }
    double v49 = v76;
    double v50 = v77;
    double v51 = v78;
    double v52 = v79;
    objc_msgSend(v2, sel_region);
    if (vabdd_f64(v49, v56) < 0.00000000999999994
      && vabdd_f64(v50, v53) < 0.00000000999999994
      && vabdd_f64(v51, v54) < 0.00000000999999994
      && vabdd_f64(v52, v55) < 0.00000000999999994)
    {
      if (qword_268291370 != -1) {
        swift_once();
      }
      uint64_t v57 = sub_228BAC508();
      __swift_project_value_buffer(v57, (uint64_t)qword_26829D4F8);
      uint64_t v58 = sub_228BAC4E8();
      os_log_type_t v59 = sub_228BAD668();
      if (!os_log_type_enabled(v58, v59)) {
        goto LABEL_58;
      }
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 136380675;
      uint64_t v75 = v61;
      type metadata accessor for MKCoordinateRegion(0);
      goto LABEL_57;
    }
    if (qword_268291370 != -1) {
      swift_once();
    }
    uint64_t v62 = sub_228BAC508();
    __swift_project_value_buffer(v62, (uint64_t)qword_26829D4F8);
    uint64_t v63 = sub_228BAC4E8();
    os_log_type_t v64 = sub_228BAD668();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = (uint8_t *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v65 = 136380675;
      uint64_t v75 = v66;
      type metadata accessor for MKCoordinateRegion(0);
      uint64_t v67 = sub_228BAD418();
      sub_228AD11A0(v67, v68, &v75);
      sub_228BAD738();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_228ABB000, v63, v64, "model -> mapview %{private}s", v65, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A6A7BE0](v66, -1, -1);
      MEMORY[0x22A6A7BE0](v65, -1, -1);
    }

    objc_msgSend(v3, sel_setRegion_animated_, a2 & 1, v49, v50, v51, v52);
  }
  else
  {
    double v23 = v76;
    double v24 = v79;
    double v73 = v77;
    double v74 = v78;
    double v25 = v80;
    id v26 = objc_msgSend(v2, sel_camera);
    objc_msgSend(v26, sel_centerCoordinate);
    double v28 = v27;
    double v30 = v29;
    objc_msgSend(v26, sel_centerCoordinateDistance);
    double v32 = v31;
    objc_msgSend(v26, sel_heading);
    double v34 = v33;
    objc_msgSend(v26, sel_pitch);
    double v36 = v35;

    if (v23 == v28 && v73 == v30 && v24 == v34 && v25 == v36 && v74 == v32)
    {
      if (qword_268291370 != -1) {
        swift_once();
      }
      uint64_t v69 = sub_228BAC508();
      __swift_project_value_buffer(v69, (uint64_t)qword_26829D4F8);
      uint64_t v58 = sub_228BAC4E8();
      os_log_type_t v59 = sub_228BAD668();
      if (!os_log_type_enabled(v58, v59)) {
        goto LABEL_58;
      }
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      uint64_t v75 = v61;
      *(_DWORD *)uint64_t v60 = 136380675;
      goto LABEL_57;
    }
    if (qword_268291370 != -1) {
      swift_once();
    }
    uint64_t v41 = sub_228BAC508();
    __swift_project_value_buffer(v41, (uint64_t)qword_26829D4F8);
    int v42 = sub_228BAC4E8();
    os_log_type_t v43 = sub_228BAD668();
    if (os_log_type_enabled(v42, v43))
    {
      int v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v75 = v45;
      *(_DWORD *)int v44 = 136380675;
      uint64_t v46 = sub_228BAD418();
      sub_228AD11A0(v46, v47, &v75);
      sub_228BAD738();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_228ABB000, v42, v43, "model -> mapview %{private}s", v44, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22A6A7BE0](v45, -1, -1);
      MEMORY[0x22A6A7BE0](v44, -1, -1);
    }

    id v48 = objc_msgSend(self, sel_cameraLookingAtCenterCoordinate_fromDistance_pitch_heading_, v23, v73, v74, v25, v24);
    objc_msgSend(v3, sel_setCamera_animated_, v48, a2 & 1);
  }
}

uint64_t sub_228B596D4(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 68);
  unint64_t v3 = *(void *)v2;
  char v4 = *(unsigned char *)(v2 + 8);
  sub_228AD266C(*(void *)v2, v4);
  int v5 = sub_228AD05AC(v3, v4);
  sub_228AD25F8(v3, v4);
  return v5 & 0xFFFFFF01;
}

uint64_t sub_228B59734(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 76);
  uint64_t v3 = *(void *)v2;
  char v4 = *(unsigned char *)(v2 + 8);
  sub_228AD266C(*(void *)v2, v4);
  uint64_t v5 = sub_228ACD41C(v3, v4);
  sub_228AD25F8(v3, v4);
  return v5;
}

uint64_t sub_228B59794@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v32 = a1[2];
  uint64_t v33 = a1[1];
  uint64_t v30 = a1[4];
  uint64_t v31 = a1[3];
  uint64_t v29 = a1[5];
  uint64_t v34 = *a2;
  uint64_t v35 = a1[6];
  uint64_t v8 = *(void *)a4;
  uint64_t v9 = *(void *)(a4 + 8);
  char v28 = *(unsigned char *)(a4 + 16);
  double v10 = (int *)type metadata accessor for _MapView();
  double v11 = (char *)a6 + v10[11];
  uint64_t v12 = type metadata accessor for _DefaultAnnotatedMapContent();
  uint64_t v37 = v11;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = v10[12];
  if (qword_268291380 != -1) {
    swift_once();
  }
  *(void *)((char *)a6 + v13) = qword_268294708;
  uint64_t v14 = v10[13];
  *((unsigned char *)a6 + v14) = 0;
  uint64_t v15 = (void *)((char *)a6 + v10[14]);
  v15[1] = 0;
  v15[2] = 0;
  *uint64_t v15 = 0;
  uint64_t v16 = (void *)((char *)a6 + v10[15]);
  *uint64_t v16 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293840);
  swift_storeEnumTagMultiPayload();
  uint64_t v17 = (void *)((char *)a6 + v10[16]);
  *uint64_t v17 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  swift_storeEnumTagMultiPayload();
  os_log_type_t v18 = (char *)a6 + v10[17];
  *(void *)os_log_type_t v18 = swift_getKeyPath();
  v18[8] = 0;
  double v19 = (void *)((char *)a6 + v10[18]);
  *double v19 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293850);
  swift_storeEnumTagMultiPayload();
  uint64_t v20 = (char *)a6 + v10[19];
  *(void *)uint64_t v20 = swift_getKeyPath();
  v20[8] = 0;
  *a6 = v7;
  a6[1] = v33;
  a6[2] = v32;
  a6[3] = v31;
  a6[4] = v30;
  a6[5] = v29;
  a6[6] = v35;
  *(void *)((char *)a6 + v13) = v34;
  *((unsigned char *)a6 + v14) = a3 & 1;
  if (v9)
  {
    sub_228BAD5A8();
    swift_retain();
    swift_retain();
    uint64_t v21 = sub_228BAD598();
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = MEMORY[0x263F8F500];
    *(void *)(v22 + 16) = v21;
    *(void *)(v22 + 24) = v23;
    *(void *)(v22 + 32) = v8;
    *(void *)(v22 + 40) = v9;
    *(unsigned char *)(v22 + 48) = v28;
    swift_retain();
    swift_retain();
    uint64_t v24 = sub_228BAD598();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v24;
    *(void *)(v25 + 24) = v23;
    *(void *)(v25 + 32) = v8;
    *(void *)(v25 + 40) = v9;
    *(unsigned char *)(v25 + 48) = v28;
    type metadata accessor for MKUserTrackingMode(0);
    sub_228BAD208();
    sub_228B66410(v8, v9);
    sub_228B66410(*v15, v15[1]);
    *(_OWORD *)uint64_t v15 = v39;
    v15[2] = v40;
  }
  uint64_t v26 = sub_228BAD718();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 40))(v37, a5, v26);
}

void *sub_228B59B4C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293838);
  uint64_t result = MEMORY[0x22A6A6930](&v4, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_228B59B9C()
{
  return sub_228BAD1E8();
}

void *sub_228B59C00(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v50 = *(void *)(a1 + 32);
  uint64_t v51 = v4;
  uint64_t v6 = type metadata accessor for _DefaultAnnotatedMapContent();
  uint64_t v7 = sub_228BAD718();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v48 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v43 - v11;
  uint64_t v13 = sub_228BAD718();
  uint64_t v54 = *(void *)(v13 - 8);
  __n128 v14 = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v43 - v15;
  uint64_t v53 = a1;
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v46 = (char *)v1 + *(int *)(a1 + 44);
  uint64_t v47 = v7;
  uint64_t v45 = v17;
  ((void (*)(char *, __n128))v17)(v12, v14);
  uint64_t v18 = *(void *)(v6 - 8);
  int v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v19 = v44(v12, 1, v6);
  uint64_t v52 = v5;
  uint64_t v49 = v13;
  uint64_t v43 = v8;
  if (v19 == 1)
  {
    uint64_t v20 = v47;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v47);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v16, 1, 1, v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v16, &v12[*(int *)(v6 + 56)], v13);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v12, v6);
    uint64_t v20 = v47;
  }
  uint64_t v21 = v48;
  v45(v48, v46, v20);
  if (v44(v21, 1, v6) == 1)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = v49;
    uint64_t v25 = v54;
    uint64_t v26 = v43;
  }
  else
  {
    double v27 = (uint64_t *)&v21[*(int *)(v6 + 60)];
    uint64_t v22 = *v27;
    uint64_t v23 = v27[1];
    sub_228AD2688(*v27);
    uint64_t v26 = v18;
    uint64_t v20 = v6;
    uint64_t v24 = v49;
    uint64_t v25 = v54;
  }
  (*(void (**)(char *, uint64_t))(v26 + 8))(v21, v20);
  type metadata accessor for MapViewCoordinator();
  char v28 = sub_228B659AC((uint64_t)v16, v22, v23);
  sub_228AD2678(v22);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v16, v24);
  uint64_t v29 = (uint64_t *)((char *)v2 + *(int *)(v53 + 56));
  uint64_t v30 = *v29;
  uint64_t v31 = v29[1];
  uint64_t v32 = v29[2];
  sub_228B65A04(*v29, v31);
  uint64_t v33 = (void *)((char *)v28 + *(void *)((*MEMORY[0x263F8EED0] & *v28) + 0x70));
  uint64_t v34 = *v33;
  uint64_t v35 = v33[1];
  *uint64_t v33 = v30;
  v33[1] = v31;
  v33[2] = v32;
  sub_228B66410(v34, v35);
  unint64_t v36 = v2[1];
  uint64_t v37 = v2[2];
  uint64_t v38 = v2[3];
  uint64_t v39 = v2[4];
  uint64_t v40 = v2[5];
  uint64_t v41 = v2[6];
  v55[0] = *v2;
  v55[1] = v36;
  v55[2] = v37;
  v55[3] = v38;
  v55[4] = v39;
  v55[5] = v40;
  v55[6] = v41;
  sub_228B175AC(v55[0], v36);
  sub_228B5D894((uint64_t)v55);
  return v28;
}

uint64_t sub_228B5A030(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F01780](a1, a2, a3, WitnessTable);
}

uint64_t sub_228B5A0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x270F01718](a1, a2, a3, WitnessTable);
}

void sub_228B5A128()
{
}

uint64_t sub_228B5A168(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = a1;
  uint64_t v5 = sub_228BACAF8();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  uint64_t v9 = sub_228BACE98();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v17 - v11;
  sub_228BACE88();
  uint64_t v13 = sub_228BAC5D8();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  if (v13)
  {
    sub_228BACE88();
    char v14 = sub_228BAC5C8();
    swift_release();
    LOBYTE(v13) = v14 ^ 1;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_228BACE68();
  uint64_t v15 = v19;
  sub_228BACE78();
  sub_228B5A3A0(v18, v15, (uint64_t)v8, v13 & 1, a3);

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_228B5A3A0(void *a1, void *a2, uint64_t a3, char a4, uint64_t a5)
{
  void (*v37)(long long *__return_ptr, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void (*v62)(char *, char *, uint64_t);
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  void *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _OWORD v74[2];
  __int16 v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  long long v82;
  long long v83;
  long long v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  char v90[8];

  uint64_t v9 = *(void *)(a5 + 16);
  os_log_type_t v64 = type metadata accessor for _DefaultAnnotatedMapContent();
  uint64_t v65 = sub_228BAD718();
  uint64_t v70 = *(void *)(v65 - 8);
  MEMORY[0x270FA5388](v65);
  uint64_t v66 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v63 = (char *)&v59 - v13;
  uint64_t v60 = v9;
  uint64_t v69 = sub_228BAD718();
  uint64_t v71 = *(void *)(v69 - 8);
  *(void *)&double v14 = MEMORY[0x270FA5388](v69).n128_u64[0];
  unint64_t v72 = (char *)&v59 - v15;
  unint64_t v68 = a2;
  objc_msgSend(a1, sel_setDelegate_, a2, v14);
  uint64_t v16 = *((void *)v5 + 6);
  long long v17 = v5[1];
  uint64_t v82 = *v5;
  int v83 = v17;
  int v84 = v5[2];
  uint64_t v85 = v16;
  sub_228B18E3C((uint64_t)v74);
  sub_228B65A44((uint64_t)v74, (uint64_t)v90);
  sub_228B58DE8((uint64_t)v90, a4);
  double v73 = a5;
  sub_228B5A9F8(a1, a4, a5);
  uint64_t v18 = *(int *)(a5 + 48);
  uint64_t v61 = v5;
  *(void *)&uint64_t v82 = *(void *)((char *)v5 + v18);
  sub_228B5AAE8(a1, (unint64_t *)&v82);
  sub_228B65AA0();
  sub_228BACB08();
  long long v19 = v82;
  uint64_t v20 = v83;
  uint64_t v22 = v86;
  uint64_t v21 = v87;
  v74[0] = v82;
  v74[1] = v83;
  uint64_t v75 = v84;
  double v76 = *((void *)&v84 + 1);
  double v77 = v85;
  double v78 = v86;
  double v79 = v87;
  double v80 = v88;
  char v81 = v89;
  sub_228B65CEC(a1, (uint64_t)v74);
  uint64_t v23 = v61;
  uint64_t v24 = v20;
  uint64_t v25 = v64;
  uint64_t v26 = v70;
  sub_228AD252C(v19, *((uint64_t *)&v19 + 1), v24);
  uint64_t v27 = v73;
  uint64_t v28 = v21;
  uint64_t v29 = v65;
  sub_228AD2574(v22, v28);
  uint64_t v67 = a1;
  sub_228B5AB84(a1, v27);
  uint64_t v30 = (char *)v23 + *(int *)(v27 + 44);
  uint64_t v31 = v63;
  uint64_t v62 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
  v62(v63, v30, v29);
  uint64_t v32 = *(void *)(v25 - 8);
  uint64_t v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48);
  int v34 = v33(v31, 1, v25);
  os_log_type_t v59 = v32;
  if (v34 == 1)
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v31, v29);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v72, 1, 1);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v72, &v31[*(int *)(v25 + 56)], v69);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v25);
  }
  uint64_t v35 = v29;
  unint64_t v36 = v66;
  v62(v66, v30, v35);
  if (v33(v36, 1, v25) == 1)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = v69;
    uint64_t v40 = v71;
    uint64_t v41 = v70;
  }
  else
  {
    int v42 = (uint64_t *)&v36[*(int *)(v25 + 60)];
    uint64_t v35 = v25;
    uint64_t v37 = (void (*)(long long *__return_ptr, uint64_t))*v42;
    uint64_t v38 = v42[1];
    sub_228AD2688(*v42);
    uint64_t v41 = v59;
    uint64_t v39 = v69;
    uint64_t v40 = v71;
  }
  uint64_t v43 = (uint64_t)v72;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v36, v35);
  int v44 = v68;
  sub_228B5C53C(v67, v43, v37, v38);
  sub_228AD2678((uint64_t)v37);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v43, v39);
  uint64_t v45 = v23[1];
  uint64_t v46 = v23[2];
  uint64_t v47 = v23[3];
  id v48 = v23[4];
  uint64_t v49 = v23[5];
  uint64_t v50 = v23[6];
  *(void *)&uint64_t v82 = *v23;
  *((void *)&v82 + 1) = v45;
  *(void *)&int v83 = v46;
  *((void *)&v83 + 1) = v47;
  *(void *)&int v84 = v48;
  *((void *)&v84 + 1) = v49;
  uint64_t v85 = v50;
  sub_228B175AC(v82, v45);
  sub_228B5D894((uint64_t)&v82);
  uint64_t v51 = (void *)((char *)v23 + *(int *)(v73 + 56));
  uint64_t v52 = *v51;
  uint64_t v53 = v51[1];
  uint64_t v54 = v51[2];
  sub_228B65A04(*v51, v53);
  double v55 = (void *)((char *)v44 + *(void *)((*MEMORY[0x263F8EED0] & *v44) + 0x70));
  double v56 = *v55;
  uint64_t v57 = v55[1];
  *double v55 = v52;
  v55[1] = v53;
  v55[2] = v54;
  return sub_228B66410(v56, v57);
}

void *sub_228B5A9D0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_228B59C00(a1);
  *a2 = result;
  return result;
}

id sub_228B5A9F8(void *a1, char a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id result = objc_msgSend(a1, sel_setShowsUserLocation_, *(unsigned __int8 *)(v4 + *(int *)(a3 + 52)));
  uint64_t v9 = (uint64_t *)(v4 + *(int *)(a3 + 56));
  uint64_t v10 = v9[1];
  if (v10)
  {
    uint64_t v15 = *v9;
    uint64_t v16 = v9[2];
    swift_retain();
    swift_retain();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293820);
    MEMORY[0x22A6A6930](&v17, v11);
    swift_release();
    swift_release();
    if (v17 == 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = 2 * (v17 == 2);
    }
    if (v12 != 2 || *(void *)(v4 + 8) >> 62 == 0) {
      uint64_t v14 = v12;
    }
    else {
      uint64_t v14 = 1;
    }
    return objc_msgSend(a1, sel_setUserTrackingMode_animated_, v14, a2 & 1, v15, v10, v16);
  }
  return result;
}

id sub_228B5AAE8(void *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  objc_msgSend(a1, sel_setScrollEnabled_, *a2 & 1);
  objc_msgSend(a1, sel_setZoomEnabled_, (v4 >> 1) & 1);
  if (*(void *)(v2 + 8) >> 62) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = (v4 >> 2) & 1;
  }
  if (*(void *)(v2 + 8) >> 62) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = (v4 >> 3) & 1;
  }
  objc_msgSend(a1, sel_setRotateEnabled_, v5);

  return objc_msgSend(a1, sel_setPitchEnabled_, v6);
}

id sub_228B5AB84(void *a1, uint64_t a2)
{
  id v214 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F90);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v197 = (uint64_t)&v168 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v193 = (uint64_t)&v168 - v7;
  MEMORY[0x270FA5388](v8);
  uint64_t v190 = (uint64_t)&v168 - v9;
  uint64_t v196 = type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v195 = *(void *)(v196 - 8);
  MEMORY[0x270FA5388](v196);
  v198 = (char *)&v168 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  v194 = (char *)&v168 - v12;
  MEMORY[0x270FA5388](v13);
  v191 = (char *)&v168 - v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F98);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v184 = (uint64_t)&v168 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v179 = (uint64_t)&v168 - v18;
  uint64_t v183 = type metadata accessor for MapCompassConfig(0);
  uint64_t v182 = *(void *)(v183 - 8);
  MEMORY[0x270FA5388](v183);
  v185 = (_WORD *)((char *)&v168 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v20);
  v181 = (char *)&v168 - v21;
  uint64_t v216 = a2;
  uint64_t v189 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v22);
  v187 = (char *)&v168 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  v205 = (char *)&v168 - v25;
  uint64_t v203 = sub_228BAC9C8();
  uint64_t v209 = *(void *)(v203 - 8);
  MEMORY[0x270FA5388](v203);
  uint64_t v192 = (uint64_t)&v168 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  v202 = (char *)&v168 - v28;
  MEMORY[0x270FA5388](v29);
  uint64_t v175 = (uint64_t)&v168 - v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA0);
  MEMORY[0x270FA5388](v31 - 8);
  uint64_t v177 = (uint64_t)&v168 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v173 = (uint64_t)&v168 - v34;
  MEMORY[0x270FA5388](v35);
  uint64_t v170 = (uint64_t)&v168 - v36;
  uint64_t v200 = type metadata accessor for MapPitchToggleConfig(0);
  uint64_t v204 = *(void *)(v200 - 8);
  MEMORY[0x270FA5388](v200);
  v178 = (char *)&v168 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  v174 = (void (*)(char *, uint64_t))((char *)&v168 - v39);
  MEMORY[0x270FA5388](v40);
  v172 = (char *)&v168 - v41;
  uint64_t v42 = sub_228BAC588();
  uint64_t v211 = *(void *)(v42 - 8);
  uint64_t v212 = v42;
  MEMORY[0x270FA5388](v42);
  uint64_t v210 = (uint64_t)&v168 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA8);
  MEMORY[0x270FA5388](v44 - 8);
  uint64_t v208 = (uint64_t)&v168 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v46);
  id v48 = (char *)&v168 - v47;
  uint64_t v49 = type metadata accessor for MapScaleViewConfig(0);
  uint64_t v50 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v52 = (char *)&v168 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v53);
  double v55 = (char *)&v168 - v54;
  uint64_t v56 = type metadata accessor for MapControlsConfig();
  MEMORY[0x270FA5388](v56);
  uint64_t v188 = (uint64_t)&v168 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v58);
  uint64_t v186 = (uint64_t)&v168 - v59;
  MEMORY[0x270FA5388](v60);
  v180 = (char *)&v168 - v61;
  MEMORY[0x270FA5388](v62);
  uint64_t v201 = (uint64_t)&v168 - v63;
  MEMORY[0x270FA5388](v64);
  uint64_t v176 = (uint64_t)&v168 - v65;
  MEMORY[0x270FA5388](v66);
  uint64_t v171 = (uint64_t)&v168 - v67;
  MEMORY[0x270FA5388](v68);
  uint64_t v169 = (uint64_t)&v168 - v69;
  MEMORY[0x270FA5388](v70);
  uint64_t v168 = (uint64_t)&v168 - v71;
  MEMORY[0x270FA5388](v72);
  double v74 = (char *)&v168 - v73;
  MEMORY[0x270FA5388](v75);
  double v77 = (char *)&v168 - v76;
  uint64_t v215 = v2;
  sub_228AD07D0((uint64_t)&v168 - v76);
  v213 = (int *)v56;
  sub_228AD2708((uint64_t)&v77[*(int *)(v56 + 20)], (uint64_t)v48, &qword_268292FA8);
  double v78 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
  int v79 = v78(v48, 1, v49);
  double v80 = (unsigned int *)MEMORY[0x263F18568];
  if (v79 == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v211 + 104))(&v55[*(int *)(v49 + 28)], *MEMORY[0x263F18568], v212);
    v55[2] = 0;
    *(_WORD *)double v55 = 512;
    sub_228AC1A50((uint64_t)v48, &qword_268292FA8);
  }
  else
  {
    sub_228B66364((uint64_t)v48, (uint64_t)v55, type metadata accessor for MapScaleViewConfig);
  }
  sub_228B66304((uint64_t)v77, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  unsigned __int8 v81 = sub_228B59734(v216);
  id v82 = v214;
  if (*v55 == 1)
  {
    uint64_t v83 = v81;
    uint64_t v84 = v211;
    switch(v81)
    {
      case 1u:
        uint64_t v83 = 2;
        break;
      case 2u:
        uint64_t v83 = 1;
        break;
      case 3u:
        uint64_t v83 = qword_228BB3110[v55[1]];
        break;
      default:
        break;
    }
  }
  else
  {
    uint64_t v83 = 1;
    uint64_t v84 = v211;
  }
  sub_228B66304((uint64_t)v55, type metadata accessor for MapScaleViewConfig);
  objc_msgSend(v82, sel__setScaleVisibility_, v83);
  sub_228AD07D0((uint64_t)v74);
  uint64_t v85 = v208;
  sub_228AD2708((uint64_t)&v74[v213[5]], v208, &qword_268292FA8);
  if (v78((char *)v85, 1, v49) == 1)
  {
    uint64_t v86 = *v80;
    uint64_t v87 = v212;
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 104))(&v52[*(int *)(v49 + 28)], v86, v212);
    v52[2] = 0;
    *(_WORD *)uint64_t v52 = 512;
    sub_228AC1A50(v85, &qword_268292FA8);
  }
  else
  {
    sub_228B66364(v85, (uint64_t)v52, type metadata accessor for MapScaleViewConfig);
    uint64_t v87 = v212;
  }
  sub_228B66304((uint64_t)v74, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  uint64_t v88 = v210;
  uint64_t v208 = v215 + *(int *)(v216 + 64);
  sub_228ACCD10(v210);
  uint64_t v89 = sub_228B50B9C(v88);
  v206 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
  uint64_t v207 = v84 + 8;
  v206(v88, v87);
  sub_228B66304((uint64_t)v52, type metadata accessor for MapScaleViewConfig);
  objc_msgSend(v82, sel__setScaleControlSize_, v89);
  uint64_t v90 = v168;
  sub_228AD07D0(v168);
  uint64_t v91 = v170;
  sub_228AD2708(v90, v170, &qword_268292FA0);
  uint64_t v92 = v204 + 48;
  uint64_t v93 = (int *)v200;
  v199 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v204 + 48);
  if (v199(v91, 1, v200) == 1)
  {
    v94 = v172;
    sub_228BAC9B8();
    v95 = (unsigned int *)MEMORY[0x263F18568];
    (*(void (**)(unsigned char *, void, uint64_t))(v84 + 104))(&v94[v93[7]], *MEMORY[0x263F18568], v87);
    v94[1] = 2;
    *(void *)&v94[v93[8]] = 0;
    unsigned char *v94 = 0;
    sub_228AC1A50(v91, &qword_268292FA0);
  }
  else
  {
    v94 = v172;
    sub_228B66364(v91, (uint64_t)v172, type metadata accessor for MapPitchToggleConfig);
    v95 = (unsigned int *)MEMORY[0x263F18568];
  }
  sub_228B66304(v90, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  unsigned __int8 v96 = sub_228B59734(v216);
  if (*v94 == 1)
  {
    uint64_t v97 = v96;
    switch(v96)
    {
      case 1u:
        uint64_t v97 = 2;
        break;
      case 2u:
        goto LABEL_19;
      case 3u:
        uint64_t v97 = qword_228BB3110[(char)v94[1]];
        break;
      default:
        break;
    }
  }
  else
  {
LABEL_19:
    uint64_t v97 = 1;
  }
  sub_228B66304((uint64_t)v94, type metadata accessor for MapPitchToggleConfig);
  objc_msgSend(v82, sel_setPitchButtonVisibility_, v97);
  uint64_t v98 = v169;
  sub_228AD07D0(v169);
  uint64_t v99 = v173;
  sub_228AD2708(v98, v173, &qword_268292FA0);
  unsigned int v100 = v199(v99, 1, (uint64_t)v93);
  uint64_t v204 = v92;
  char v101 = v174;
  if (v100 == 1)
  {
    sub_228BAC9B8();
    (*(void (**)(unsigned char *, void, uint64_t))(v84 + 104))((unsigned char *)v101 + v93[7], *v95, v87);
    *((unsigned char *)v101 + 1) = 2;
    *(void *)((char *)v101 + v93[8]) = 0;
    *(unsigned char *)char v101 = 0;
    sub_228AC1A50(v99, &qword_268292FA0);
  }
  else
  {
    sub_228B66364(v99, (uint64_t)v174, type metadata accessor for MapPitchToggleConfig);
  }
  sub_228B66304(v98, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  uint64_t v102 = v175;
  uint64_t v173 = v215 + *(int *)(v216 + 60);
  sub_228ACCCD8(v175);
  uint64_t v103 = v93[6];
  uint64_t v104 = (uint64_t)v101;
  uint64_t v105 = (char *)v101 + v103;
  uint64_t v106 = v202;
  sub_228BAC9B8();
  char v107 = sub_228BAC988();
  uint64_t v108 = v209;
  uint64_t v110 = v209 + 8;
  uint64_t v109 = *(void (**)(char *, uint64_t))(v209 + 8);
  uint64_t v111 = v203;
  v109(v106, v203);
  v114 = *(unsigned char **)(v108 + 16);
  uint64_t v113 = v108 + 16;
  uint64_t v112 = v114;
  if (v107) {
    uint64_t v115 = v102;
  }
  else {
    uint64_t v115 = (uint64_t)v105;
  }
  uint64_t v209 = v113;
  v172 = v112;
  ((void (*)(char *, uint64_t, uint64_t))v112)(v106, v115, v111);
  uint64_t v116 = sub_228BA6EB4(v106, 1u);
  uint64_t v175 = v110;
  v174 = v109;
  v109((char *)v102, v111);
  sub_228B66304(v104, type metadata accessor for MapPitchToggleConfig);
  id v117 = v214;
  objc_msgSend(v214, sel__setPitchButtonBackgroundStyle_, v116);
  uint64_t v118 = v171;
  sub_228AD07D0(v171);
  uint64_t v119 = v200;
  uint64_t v120 = v177;
  sub_228AD2708(v118, v177, &qword_268292FA0);
  if (v199(v120, 1, v119) == 1)
  {
    v121 = v178;
    sub_228BAC9B8();
    uint64_t v122 = v212;
    (*(void (**)(unsigned char *, void, uint64_t))(v211 + 104))(&v121[*(int *)(v119 + 28)], *MEMORY[0x263F18568], v212);
    v121[1] = 2;
    *(void *)&v121[*(int *)(v119 + 32)] = 0;
    unsigned char *v121 = 0;
    sub_228AC1A50(v120, &qword_268292FA0);
    uint64_t v123 = v189;
    uint64_t v124 = v181;
  }
  else
  {
    v121 = v178;
    sub_228B66364(v120, (uint64_t)v178, type metadata accessor for MapPitchToggleConfig);
    uint64_t v123 = v189;
    uint64_t v124 = v181;
    uint64_t v122 = v212;
  }
  sub_228B66304(v118, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  uint64_t v125 = v210;
  sub_228ACCD10(v210);
  uint64_t v126 = sub_228ACB164(v125);
  v206(v125, v122);
  sub_228B66304((uint64_t)v121, type metadata accessor for MapPitchToggleConfig);
  objc_msgSend(v117, sel__setPitchButtonControlSize_, v126);
  v127 = *(void (**)(char *, uint64_t, uint64_t))(v123 + 16);
  v127(v205, v215, v216);
  uint64_t v128 = v176;
  sub_228AD07D0(v176);
  uint64_t v129 = v179;
  sub_228AD2708(v128 + v213[7], v179, &qword_268292F98);
  uint64_t v130 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v182 + 48);
  uint64_t v131 = v183;
  if (v130(v129, 1, v183) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v211 + 104))(&v124[*(int *)(v131 + 24)], *MEMORY[0x263F18568], v122);
    *(_WORD *)uint64_t v124 = 512;
    sub_228AC1A50(v129, &qword_268292F98);
  }
  else
  {
    sub_228B66364(v129, (uint64_t)v124, type metadata accessor for MapCompassConfig);
  }
  sub_228B66304(v128, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  sub_228B59734(v216);
  if (*v124 == 1) {
    char v132 = sub_228BAC558() ^ 1;
  }
  else {
    char v132 = 0;
  }
  sub_228B66304((uint64_t)v124, type metadata accessor for MapCompassConfig);
  uint64_t v204 = *(void *)(v123 + 8);
  ((void (*)(char *, uint64_t))v204)(v205, v216);
  objc_msgSend(v214, sel_setShowsCompass_, v132 & 1);
  uint64_t v133 = v201;
  sub_228AD07D0(v201);
  uint64_t v134 = v184;
  sub_228AD2708(v133 + v213[7], v184, &qword_268292F98);
  if (v130(v134, 1, v131) == 1)
  {
    v135 = v185;
    uint64_t v136 = v212;
    (*(void (**)(uint64_t, void, uint64_t))(v211 + 104))((uint64_t)v185 + *(int *)(v131 + 24), *MEMORY[0x263F18568], v212);
    _WORD *v135 = 512;
    sub_228AC1A50(v134, &qword_268292F98);
    v137 = (int *)v196;
    uint64_t v138 = (uint64_t)v180;
  }
  else
  {
    v135 = v185;
    sub_228B66364(v134, (uint64_t)v185, type metadata accessor for MapCompassConfig);
    v137 = (int *)v196;
    uint64_t v138 = (uint64_t)v180;
    uint64_t v136 = v212;
  }
  sub_228B66304(v201, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  uint64_t v139 = v210;
  sub_228ACCD10(v210);
  uint64_t v140 = sub_228B66AC0(v139);
  v206(v139, v136);
  sub_228B66304((uint64_t)v135, type metadata accessor for MapCompassConfig);
  objc_msgSend(v214, sel_setCompassViewSize_, v140);
  uint64_t v141 = v187;
  v127(v187, v215, v216);
  v142 = v141;
  sub_228AD07D0(v138);
  uint64_t v143 = v190;
  sub_228AD2708(v138 + v213[6], v190, &qword_268292F90);
  uint64_t v144 = *(unsigned int (**)(uint64_t, uint64_t, int *))(v195 + 48);
  if (v144(v143, 1, v137) == 1)
  {
    v145 = v191;
    sub_228BAC9B8();
    (*(void (**)(unsigned char *, void, uint64_t))(v211 + 104))(&v145[v137[7]], *MEMORY[0x263F18568], v136);
    v145[1] = 2;
    *(void *)&v145[v137[8]] = 0;
    unsigned char *v145 = 0;
    sub_228AC1A50(v143, &qword_268292F90);
  }
  else
  {
    v145 = v191;
    sub_228B66364(v143, (uint64_t)v191, type metadata accessor for MapUserLocationButtonConfig);
  }
  sub_228B66304(v138, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  sub_228B59734(v216);
  if (*v145 == 1) {
    char v146 = sub_228BAC558() ^ 1;
  }
  else {
    char v146 = 0;
  }
  sub_228B66304((uint64_t)v145, type metadata accessor for MapUserLocationButtonConfig);
  ((void (*)(char *, uint64_t))v204)(v142, v216);
  objc_msgSend(v214, sel_setShowsUserTrackingButton_, v146 & 1);
  uint64_t v147 = v186;
  sub_228AD07D0(v186);
  uint64_t v148 = v193;
  sub_228AD2708(v147 + v213[6], v193, &qword_268292F90);
  unsigned int v149 = v144(v148, 1, v137);
  v205 = (char *)v144;
  long long v150 = v194;
  if (v149 == 1)
  {
    sub_228BAC9B8();
    (*(void (**)(unsigned char *, void, uint64_t))(v211 + 104))(&v150[v137[7]], *MEMORY[0x263F18568], v212);
    v150[1] = 2;
    *(void *)&v150[v137[8]] = 0;
    *long long v150 = 0;
    sub_228AC1A50(v148, &qword_268292F90);
  }
  else
  {
    sub_228B66364(v148, (uint64_t)v194, type metadata accessor for MapUserLocationButtonConfig);
  }
  sub_228B66304(v147, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  uint64_t v151 = v192;
  sub_228ACCCD8(v192);
  v152 = &v150[v137[6]];
  v153 = v202;
  sub_228BAC9B8();
  char v154 = sub_228BAC988();
  uint64_t v155 = v203;
  v156 = (void (*)(uint64_t, uint64_t))v174;
  v174(v153, v203);
  if (v154) {
    uint64_t v157 = v151;
  }
  else {
    uint64_t v157 = (uint64_t)v152;
  }
  ((void (*)(char *, uint64_t, uint64_t))v172)(v153, v157, v155);
  uint64_t v158 = sub_228BA6EB4(v153, 1u);
  v156(v151, v155);
  sub_228B66304((uint64_t)v150, type metadata accessor for MapUserLocationButtonConfig);
  id v159 = v214;
  objc_msgSend(v214, sel__setUserTrackingButtonBackgroundStyle_, v158);
  uint64_t v160 = v188;
  sub_228AD07D0(v188);
  uint64_t v161 = v197;
  sub_228AD2708(v160 + v213[6], v197, &qword_268292F90);
  if (((unsigned int (*)(uint64_t, uint64_t, int *))v205)(v161, 1, v137) == 1)
  {
    v162 = v198;
    sub_228BAC9B8();
    uint64_t v163 = v212;
    (*(void (**)(unsigned char *, void, uint64_t))(v211 + 104))(&v162[v137[7]], *MEMORY[0x263F18568], v212);
    v162[1] = 2;
    *(void *)&v162[v137[8]] = 0;
    unsigned char *v162 = 0;
    sub_228AC1A50(v161, &qword_268292F90);
  }
  else
  {
    v162 = v198;
    sub_228B66364(v161, (uint64_t)v198, type metadata accessor for MapUserLocationButtonConfig);
    uint64_t v163 = v212;
  }
  sub_228B66304(v160, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  uint64_t v164 = v210;
  sub_228ACCD10(v210);
  uint64_t v165 = sub_228B97BB4(v164);
  v206(v164, v163);
  sub_228B66304((uint64_t)v162, type metadata accessor for MapUserLocationButtonConfig);
  objc_msgSend(v159, sel__setUserTrackingControlSize_, v165);
  uint64_t v166 = v216;
  sub_228B596D4(v216);
  LOBYTE(v165) = sub_228BAC558();
  sub_228B596D4(v166);
  objc_msgSend(v159, sel__setShowsAppleLogo_force_, (v165 & 1) == 0, (sub_228BAC558() & 1) == 0);
  return objc_msgSend(v159, sel_setShowsAttribution_, sub_228B596D4(v166) & 1);
}

uint64_t sub_228B5C53C(void *a1, uint64_t a2, void (*a3)(long long *__return_ptr, uint64_t), uint64_t a4)
{
  void (*v68)(long long *__return_ptr, uint64_t);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  char *v78;
  void (*v79)(char *, char *, uint64_t);
  uint64_t v80;
  void (*v81)(long long *__return_ptr, char *);
  void *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v86;
  void (*v87)(uint64_t, char *, uint64_t);
  char *v88;
  uint64_t *v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  void *v93;
  char *v94;
  id v95;
  char *v96;
  void *v97;
  void v98[2];
  void (**v99)(char *, uint64_t, uint64_t);
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t AssociatedTypeWitness;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  void (**v110)(uint64_t, uint64_t);
  void (*v111)(uint64_t, char *, uint64_t);
  unsigned int (*v112)(char *, uint64_t, uint64_t);
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  void (*v127)(long long *__return_ptr, char *);
  void *v128;
  uint64_t v129;
  void *v130;
  uint64_t v131[4];
  uint64_t v132;
  uint64_t v133;

  v121 = a4;
  v127 = (void (*)(long long *__return_ptr, char *))a3;
  uint64_t v128 = a1;
  uint64_t v6 = (void *)(*MEMORY[0x263F8EED0] & *v4);
  uint64_t v7 = v6[12];
  uint64_t v118 = v6[11];
  uint64_t v116 = *(void *)(*(void *)(v118 + 8) + 8);
  uint64_t v8 = *(void *)(v116 + 8);
  uint64_t v9 = v6[10];
  swift_getAssociatedTypeWitness();
  uint64_t v129 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v110 = *(void (***)(uint64_t, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  id v117 = (char *)v98 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v120 = (char *)v98 - v12;
  uint64_t v13 = swift_checkMetadataState();
  uint64_t v124 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v109 = (char *)v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v105 = (char *)v98 - v16;
  uint64_t v108 = v17;
  uint64_t v18 = sub_228BAD718();
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v123 = (char *)v98 - v19;
  v114 = v8;
  uint64_t v126 = swift_getAssociatedTypeWitness();
  uint64_t v104 = *(void *)(v126 - 8);
  MEMORY[0x270FA5388](v126);
  uint64_t v125 = (char *)v98 - v20;
  uint64_t v21 = sub_228BAD718();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v21);
  uint64_t v119 = (char *)v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v122 = (char *)v98 - v25;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)v98 - v27;
  uint64_t v29 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v32 = (char *)v98 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)v98 - v34;
  __n128 v37 = MEMORY[0x270FA5388](v36);
  uint64_t v39 = (char *)v98 - v38;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))(v28, a2, v21, v37);
  uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v40(v28, 1, v9) == 1)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v28, v21);
LABEL_7:
    uint64_t v48 = (uint64_t)v119;
    uint64_t v49 = v130;
    sub_228B5E468(v128);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v48, 1, 1, v9);
    sub_228B5D9F4(v48);
    uint64_t v50 = (void *)((char *)v49 + *(void *)((*MEMORY[0x263F8EED0] & *v49) + 0x80));
    uint64_t v51 = *v50;
    *uint64_t v50 = 0;
    v50[1] = 0;
    return sub_228AD2678(v51);
  }
  uint64_t v115 = v22;
  uint64_t v113 = v32;
  uint64_t v102 = v35;
  uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  v41(v39, v28, v9);
  if (!v127)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v39, v9);
    goto LABEL_7;
  }
  unsigned int v100 = v39;
  char v101 = v29;
  uint64_t v42 = v122;
  sub_228B5D934((uint64_t)v122);
  if (v40(v42, 1, v9) == 1)
  {
    uint64_t v43 = *(void (**)(void *, uint64_t))(v115 + 8);
    uint64_t v44 = v121;
    swift_retain();
    v43(v42, v21);
    uint64_t v45 = v9;
    uint64_t v46 = v44;
    uint64_t v47 = v101;
LABEL_12:
    double v77 = (uint64_t)v119;
    double v78 = v100;
    int v79 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    v79(v113, v100, v45);
    double v80 = sub_228BAD578();
    unsigned __int8 v81 = v127;
    id v82 = v130;
    sub_228B5E6C4(v128, v80, v127, v46);
    swift_bridgeObjectRelease();
    v79((char *)v77, v78, v45);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v77, 0, 1, v45);
    sub_228B5D9F4(v77);
    uint64_t v83 = (void *)((char *)v82 + *(void *)((*MEMORY[0x263F8EED0] & *v82) + 0x80));
    uint64_t v84 = *v83;
    *uint64_t v83 = (uint64_t)v81;
    v83[1] = v46;
    swift_retain();
    sub_228AD2678(v84);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v78, v45);
    uint64_t v51 = (uint64_t)v81;
    return sub_228AD2678(v51);
  }
  uint64_t v52 = v102;
  v41(v102, v42, v9);
  swift_retain();
  uint64_t v45 = v9;
  if (sub_228BAD628() < 1)
  {
    uint64_t v47 = v101;
    (*(void (**)(char *, uint64_t))(v101 + 8))(v52, v9);
    uint64_t v46 = v121;
    goto LABEL_12;
  }
  uint64_t v53 = v108;
  uint64_t v133 = sub_228BAD328();
  uint64_t v54 = type metadata accessor for AnnotationBridge();
  uint64_t v55 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v116 = v54;
  uint64_t v115 = AssociatedConformanceWitness;
  char v132 = sub_228BAD318();
  uint64_t v57 = *(void (**)(char *, char *, uint64_t))(v101 + 16);
  v98[1] = v101 + 16;
  v98[0] = v57;
  v57(v113, v100, v9);
  sub_228BAD458();
  uint64_t v58 = *(void *)((*MEMORY[0x263F8EED0] & *v130) + 0x88);
  char v107 = v9;
  uint64_t v59 = swift_getAssociatedConformanceWitness();
  uint64_t v60 = v123;
  v114 = v59;
  sub_228BAD728();
  uint64_t v61 = v124;
  uint64_t v62 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48);
  uint64_t v113 = (char *)(v124 + 48);
  uint64_t v112 = v62;
  unsigned int v63 = v62(v60, 1, v53);
  uint64_t v64 = v120;
  uint64_t v65 = (uint64_t)v105;
  if (v63 != 1)
  {
    uint64_t v103 = (char *)v130 + v58;
    uint64_t v87 = *(void (**)(uint64_t, char *, uint64_t))(v61 + 32);
    uint64_t v86 = v61 + 32;
    uint64_t v111 = v87;
    uint64_t v122 = (char *)(v110 + 1);
    uint64_t v110 = (void (**)(uint64_t, uint64_t))(v86 - 24);
    uint64_t v99 = (void (**)(char *, uint64_t, uint64_t))(v86 - 16);
    uint64_t v124 = v86;
    v87((uint64_t)v105, v60, v53);
    while (1)
    {
      sub_228BAD828();
      uint64_t v89 = (void *)((char *)v130 + *(void *)((*MEMORY[0x263F8EED0] & *v130) + 0x88));
      swift_beginAccess();
      uint64_t v90 = *v89;
      swift_bridgeObjectRetain();
      MEMORY[0x22A6A6AF0](v131, v64, v90, v55, v116, v115);
      swift_bridgeObjectRelease();
      uint64_t v91 = *(void (**)(char *, uint64_t))v122;
      (*(void (**)(char *, uint64_t))v122)(v64, v55);
      uint64_t v92 = v55;
      uint64_t v93 = (void *)v131[0];
      if (v131[0])
      {
        sub_228B65DF4(v131[0], v65, (void (*)(long long *__return_ptr, uint64_t))v127, v121, v128);
        v94 = v117;
        sub_228BAD828();
        v131[0] = (uint64_t)v93;
        sub_228BAD388();
        v95 = v93;
        sub_228BAD3A8();
        sub_228BAD828();
        swift_beginAccess();
        sub_228BAD338();
        unsigned __int8 v96 = v94;
        uint64_t v64 = v120;
        v91(v96, v92);
        uint64_t v97 = (void *)v131[3];
        swift_endAccess();
      }
      else
      {
        (*v99)(v109, v65, v53);
        sub_228BAD568();
        sub_228BAD548();
      }
      (*v110)(v65, v53);
      uint64_t v55 = v92;
      uint64_t v88 = v123;
      sub_228BAD728();
      if (v112(v88, 1, v53) == 1) {
        break;
      }
      v111(v65, v88, v53);
    }
  }
  (*(void (**)(char *, uint64_t))(v104 + 8))(v125, v126);
  uint64_t v66 = v128;
  uint64_t v67 = v130;
  sub_228B5E468(v128);
  sub_228B5DAF8(v132);
  uint64_t v68 = (void (*)(long long *__return_ptr, uint64_t))v127;
  uint64_t v69 = v121;
  sub_228B5E6C4(v66, v133, v127, v121);
  swift_bridgeObjectRelease();
  uint64_t v70 = (uint64_t)v119;
  uint64_t v71 = v100;
  uint64_t v72 = v107;
  ((void (*)(char *, char *, uint64_t))v98[0])(v119, v100, v107);
  uint64_t v73 = v101;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v101 + 56))(v70, 0, 1, v72);
  sub_228B5D9F4(v70);
  sub_228AD2688((uint64_t)v68);
  double v74 = (void *)((char *)v67 + *(void *)((*MEMORY[0x263F8EED0] & *v67) + 0x80));
  uint64_t v75 = *v74;
  *double v74 = (uint64_t)v68;
  v74[1] = v69;
  sub_228AD2678(v75);
  uint64_t v76 = *(void (**)(char *, uint64_t))(v73 + 8);
  v76(v102, v72);
  v76(v71, v72);
  uint64_t v51 = (uint64_t)v68;
  return sub_228AD2678(v51);
}

uint64_t sub_228B5D2D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v4 = (char *)v1 + *(void *)(v3 + 0x60);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t sub_228B5D38C(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t v4 = (char *)v1 + *(void *)(v3 + 0x60);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 40))(v4, a1);
  return swift_endAccess();
}

id sub_228B5D448()
{
  id result = objc_msgSend(v0, sel_coordinate);
  uint64_t v3 = (double *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x68));
  if (vabdd_f64(v4, *v3) >= 0.00000000999999994 || vabdd_f64(v2, v3[1]) >= 0.00000000999999994)
  {
    return objc_msgSend(v0, sel_setCoordinate_);
  }
  return result;
}

id sub_228B5D4E4(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 16);
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x68);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  v3[16] = v2;
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(a1 + 24);
  swift_release();

  return sub_228B5D448();
}

double sub_228B5D554()
{
  return sub_228B5D578();
}

double sub_228B5D578()
{
  return *(double *)((char *)v0 + *(void *)((*MEMORY[0x263F8EED0] & *v0) + 0x70));
}

void sub_228B5D5A8(double a1, double a2)
{
}

void sub_228B5D5CC(double a1, double a2)
{
  uint64_t v3 = (double *)((char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x70));
  *uint64_t v3 = a1;
  v3[1] = a2;
}

void sub_228B5D5FC()
{
}

id sub_228B5D640()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AnnotationBridge();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_228B5D6B4(char *a1)
{
  (*(void (**)(char *))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x50) - 8) + 8))(&a1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x60)]);

  return swift_release();
}

uint64_t type metadata accessor for AnnotationBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B5D788()
{
  uint64_t result = sub_228BAD718();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_228B5D848@<X0>(uint64_t *a1@<X8>)
{
  objc_super v2 = (void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x68));
  uint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  *a1 = *v2;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return sub_228B66454(v3, v4);
}

uint64_t sub_228B5D894(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x68);
  uint64_t v5 = *(void *)v3;
  unint64_t v4 = *((void *)v3 + 1);
  long long v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *((_OWORD *)v3 + 1) = v6;
  *((_OWORD *)v3 + 2) = *(_OWORD *)(a1 + 32);
  *((void *)v3 + 6) = v2;
  return sub_228B663CC(v5, v4);
}

uint64_t sub_228B5D8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (void *)((char *)v3 + *(void *)((*MEMORY[0x263F8EED0] & *v3) + 0x70));
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  *unint64_t v4 = a1;
  v4[1] = a2;
  v4[2] = a3;
  return sub_228B66410(v5, v6);
}

uint64_t sub_228B5D934@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x78);
  swift_beginAccess();
  uint64_t v4 = sub_228BAD718();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_228B5D9F4(uint64_t a1)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x78);
  swift_beginAccess();
  uint64_t v4 = sub_228BAD718();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t sub_228B5DABC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)((char *)v2 + *(void *)((*MEMORY[0x263F8EED0] & *v2) + 0x80));
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  v3[1] = a2;
  return sub_228AD2678(v4);
}

uint64_t sub_228B5DAF8(uint64_t a1)
{
  uint64_t v3 = (void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x88));
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

void *sub_228B5DB68(void *a1)
{
  void (*v9)(uint64_t *__return_ptr, char *);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  void (*v17)(void *, uint64_t *);
  void *v18;
  id v19;
  void (*v20)(void *, uint64_t *);
  void *v21;
  void (*v22)(void *, uint64_t *);
  double v23;
  void (*v25)(void *, uint64_t *);
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(void *, uint64_t *);
  uint64_t v30;

  uint64_t v3 = *MEMORY[0x263F8EED0] & *v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v25 - v6;
  type metadata accessor for AnnotationBridge();
  uint64_t v8 = swift_dynamicCastClass();
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *(void (**)(uint64_t *__return_ptr, char *))((char *)v1 + *(void *)(v3 + 128));
  if (!v9) {
    return 0;
  }
  uint64_t v10 = v8;
  sub_228B5D2D8((uint64_t)v7);
  sub_228AD2688((uint64_t)v9);
  swift_unknownObjectRetain();
  v9(&v26, v7);
  uint64_t v12 = v26;
  uint64_t v11 = v27;
  uint64_t v13 = v30;
  if (v28 == 2)
  {
    uint64_t v25 = v29;
    uint64_t v18 = (void *)sub_228BAD3D8();
    uint64_t v19 = objc_msgSend(a1, sel_dequeueReusableAnnotationViewWithIdentifier_forAnnotation_, v18, v10);

    type metadata accessor for SwiftUIAnnotationView();
    uint64_t v16 = (void *)swift_dynamicCastClass();
    if (!v16)
    {
      sub_228AD2678((uint64_t)v9);

      swift_unknownObjectRelease();
      swift_release();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
      return v16;
    }
    uint64_t v26 = v12;
    uint64_t v27 = v11;
    uint64_t v28 = 2;
    uint64_t v20 = v25;
    uint64_t v29 = v25;
    uint64_t v30 = v13;
    swift_retain();
    v20(v16, &v26);
    sub_228AD2678((uint64_t)v9);
    swift_unknownObjectRelease();
    swift_release();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
    swift_release();
    goto LABEL_16;
  }
  if (v28 == 1)
  {
    uint64_t v25 = v29;
    uint64_t v21 = (void *)sub_228BAD3D8();
    uint64_t v15 = objc_msgSend(a1, sel_dequeueReusableAnnotationViewWithIdentifier_forAnnotation_, v21, v10);

    self;
    uint64_t v16 = (void *)swift_dynamicCastObjCClass();
    if (v16)
    {
      uint64_t v26 = v12;
      uint64_t v27 = v11;
      uint64_t v28 = 1;
      uint64_t v22 = v25;
      uint64_t v29 = v25;
      uint64_t v30 = v13;
      swift_retain();
      v22(v16, &v26);
      swift_release();
      LODWORD(v23) = 1148846080;
      objc_msgSend(v16, sel_setDisplayPriority_, v23);
      goto LABEL_15;
    }
  }
  else
  {
    if (v28)
    {
      uint64_t v16 = 0;
      goto LABEL_15;
    }
    uint64_t v25 = v29;
    uint64_t v14 = (void *)sub_228BAD3D8();
    uint64_t v15 = objc_msgSend(a1, sel_dequeueReusableAnnotationViewWithIdentifier_forAnnotation_, v14, v10);

    self;
    uint64_t v16 = (void *)swift_dynamicCastObjCClass();
    if (v16)
    {
      uint64_t v26 = v12;
      uint64_t v27 = v11;
      uint64_t v28 = 0;
      uint64_t v17 = v25;
      uint64_t v29 = v25;
      uint64_t v30 = v13;
      swift_retain();
      v17(v16, &v26);
      swift_release();
      goto LABEL_15;
    }
  }

LABEL_15:
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  sub_228AD2678((uint64_t)v9);
  swift_unknownObjectRelease();
  swift_release();
  if (v16) {
LABEL_16:
  }
    objc_msgSend(v16, sel_setEnabled_, 0);
  return v16;
}

id sub_228B5E020(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  swift_unknownObjectRetain();
  id v5 = a1;
  uint64_t v6 = sub_228B5DB68(v4);

  swift_unknownObjectRelease();

  return v6;
}

uint64_t sub_228B5E098(void *a1)
{
  uint64_t result = sub_228B5D848(&v5);
  unint64_t v3 = v6;
  if ((~v6 & 0xF000000000000007) != 0)
  {
    uint64_t v4 = v5;
    sub_228B18F80(a1);
    return sub_228B663CC(v4, v3);
  }
  return result;
}

void sub_228B5E144(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  sub_228B5E098(v4);
}

void sub_228B5E1AC(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = a1;
  sub_228B66468(a4);
}

void sub_228B5E218()
{
}

id sub_228B5E270()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapViewCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_228B5E2F8(void *a1)
{
  objc_super v2 = (void *)MEMORY[0x263F8EED0];
  unint64_t v3 = (char *)a1 + *(void *)((*MEMORY[0x263F8EED0] & *a1) + 0x68);
  sub_228B663CC(*(void *)v3, *((void *)v3 + 1));
  id v4 = (void *)((char *)a1 + *(void *)((*v2 & *a1) + 0x70));
  sub_228B66410(*v4, v4[1]);
  id v5 = (char *)a1 + *(void *)((*v2 & *a1) + 0x78);
  uint64_t v6 = sub_228BAD718();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  sub_228AD2678(*(void *)((char *)a1 + *(void *)((*v2 & *a1) + 0x80)));

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for MapViewCoordinator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B5E468(void *a1)
{
  unint64_t v3 = (void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x88));
  swift_beginAccess();
  uint64_t v4 = *v3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnnotationBridge();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = v4;
  sub_228BAD368();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_228BAD578();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268292690);
  sub_228BAD918();
  swift_bridgeObjectRelease();
  id v5 = (void *)sub_228BAD498();
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_removeAnnotations_, v5, v7);

  swift_beginAccess();
  sub_228BAD388();
  sub_228BAD378();
  return swift_endAccess();
}

void sub_228B5E6C4(void *a1, uint64_t a2, void (*a3)(long long *__return_ptr, char *), uint64_t a4)
{
  void (*v33)(long long *__return_ptr, char *);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  long long v37;
  char v38;
  long long v39;
  long long v40;
  char v41;
  long long v42;
  uint64_t v43;

  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v7 = (void *)MEMORY[0x263F8EED0];
  uint64_t v8 = *(void *)((*MEMORY[0x263F8EED0] & *v4) + 0x60);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v31 = (char *)&v23 - v9;
  uint64_t v10 = swift_checkMetadataState();
  uint64_t v36 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v36 + 64);
  __n128 v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v23 - v13;
  if (MEMORY[0x22A6A6C90](a2, v10, v12) >= 1)
  {
    uint64_t v24 = v11;
    uint64_t v35 = type metadata accessor for AnnotationBridge();
    uint64_t v43 = sub_228BAD328();
    uint64_t v15 = swift_bridgeObjectRetain();
    if (MEMORY[0x22A6A6CB0](v15, v10))
    {
      uint64_t v29 = v8;
      uint64_t v25 = a1;
      uint64_t v16 = 0;
      uint64_t v28 = (char *)v4 + *(void *)((*v7 & *v4) + 0x88);
      uint64_t v30 = (void (**)(char *, long long *, uint64_t))(v36 + 16);
      uint64_t v26 = (void (**)(char *, uint64_t))(v36 + 8);
      uint64_t v27 = a2;
      while (1)
      {
        char v17 = sub_228BAD518();
        sub_228BAD4C8();
        if (v17)
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v36 + 16))(v14, a2+ ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))+ *(void *)(v36 + 72) * v16, v10);
          uint64_t v18 = v16 + 1;
          if (__OFADD__(v16, 1)) {
            goto LABEL_11;
          }
        }
        else
        {
          uint64_t v21 = sub_228BAD838();
          if (v24 != 8)
          {
            __break(1u);
            return;
          }
          *(void *)&uint64_t v40 = v21;
          (*v30)(v14, &v40, v10);
          swift_unknownObjectRelease();
          uint64_t v18 = v16 + 1;
          if (__OFADD__(v16, 1))
          {
LABEL_11:
            __break(1u);
LABEL_12:
            swift_bridgeObjectRelease();
            a1 = v25;
            goto LABEL_14;
          }
        }
        v33(&v40, v14);
        __n128 v37 = v40;
        uint64_t v38 = v41;
        uint64_t v39 = v42;
        id v19 = sub_228B662B8((uint64_t)v14, (uint64_t *)&v37);
        sub_228BAD828();
        *(void *)&__n128 v37 = v19;
        swift_beginAccess();
        swift_getAssociatedConformanceWitness();
        sub_228BAD388();
        id v20 = v19;
        sub_228BAD3A8();
        swift_endAccess();
        *(void *)&uint64_t v40 = v20;
        a2 = v27;
        sub_228BAD568();
        sub_228BAD548();
        (*v26)(v14, v10);
        ++v16;
        if (v18 == MEMORY[0x22A6A6CB0](a2, v10)) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_14:
    __swift_instantiateConcreteTypeFromMangledName(&qword_268292690);
    sub_228BAD918();
    swift_bridgeObjectRelease();
    uint64_t v22 = (void *)sub_228BAD498();
    swift_bridgeObjectRelease();
    objc_msgSend(a1, sel_addAnnotations_, v22);
  }
}

id sub_228B5ECCC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _SwiftUIMKMapView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for _SwiftUIMKMapView()
{
  return self;
}

void sub_228B5ED24()
{
  type metadata accessor for _DefaultAnnotatedMapContent();
  sub_228BAD718();
  if (v0 <= 0x3F)
  {
    sub_228B65660(319, (unint64_t *)&unk_268293240, MEMORY[0x263F19168]);
    if (v1 <= 0x3F)
    {
      sub_228B65660(319, (unint64_t *)&qword_268293800, MEMORY[0x263F18570]);
      if (v2 <= 0x3F)
      {
        sub_228B65660(319, &qword_268293250, (void (*)(uint64_t))type metadata accessor for MapControlsConfig);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

unint64_t sub_228B5EF00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v158 = *(void *)(a3 + 16);
  uint64_t v157 = *(void *)(v158 - 8);
  int v4 = *(_DWORD *)(v157 + 80);
  uint64_t v168 = v4;
  uint64_t v5 = v4 | 7;
  int v159 = *(_DWORD *)(v157 + 84);
  size_t v6 = *(void *)(v157 + 64);
  if (!v159) {
    ++v6;
  }
  size_t v169 = v6;
  uint64_t v163 = sub_228BAC9C8();
  uint64_t v7 = *(void *)(v163 - 8);
  uint64_t v8 = v7;
  int v9 = *(_DWORD *)(v7 + 80);
  unint64_t v10 = *(void *)(v7 + 64);
  if (v10 <= 8) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = *(void *)(v7 + 64);
  }
  uint64_t v166 = v11;
  uint64_t v12 = v9 | 7;
  uint64_t v165 = sub_228BAC588();
  uint64_t v13 = *(void *)(v165 - 8);
  int v14 = *(_DWORD *)(v13 + 80);
  unsigned int v15 = *(_DWORD *)(v13 + 84);
  unint64_t v16 = *(void *)(v13 + 64);
  if (v16 <= 8) {
    uint64_t v17 = 8;
  }
  else {
    uint64_t v17 = *(void *)(v13 + 64);
  }
  uint64_t v18 = v9 | 7 | v14;
  uint64_t v164 = *(void *)(v165 - 8);
  if (*(_DWORD *)(v8 + 84) <= v15) {
    unsigned int v19 = *(_DWORD *)(v13 + 84);
  }
  else {
    unsigned int v19 = *(_DWORD *)(v8 + 84);
  }
  if (v19 <= 0x7FFFFFFE) {
    int v20 = 2147483646;
  }
  else {
    int v20 = v19;
  }
  uint64_t v161 = v9 + 2;
  uint64_t v162 = v8;
  unint64_t v21 = v16 + 7;
  unint64_t v22 = ((v16
        + 7
        + ((v10 + v14 + (v161 & ~(unint64_t)v9)) & ~(unint64_t)v14)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  size_t v23 = ((v14 + 3) & ~(unint64_t)v14) + v16;
  size_t v24 = ((v14 + 2) & ~(unint64_t)v14) + v16;
  if (v24
     + ((v22
       + v14
       + ((v23 + v18 + ((v22 + v14) & ~(unint64_t)v14)) & ~v18)) & ~(unint64_t)v14)
     + 6 <= 8)
    unint64_t v25 = 8;
  else {
    unint64_t v25 = v24
  }
        + ((v22
          + v14
          + ((v23 + v18 + ((v22 + v14) & ~(unint64_t)v14)) & ~v18)) & ~(unint64_t)v14)
        + 6;
  unint64_t v26 = v5 | v9 | (unint64_t)v14;
  if (v26 == 7 && ((v9 | v14 | v4) & 0x100000) == 0)
  {
    uint64_t v27 = v4 | 7;
    unint64_t v152 = (v4 + 89) & ~(unint64_t)v4;
    unint64_t __n = ((v169 + 7 + v152) & 0xFFFFFFFFFFFFFFF8) + 16;
    size_t v139 = v169 + 7;
    if (((v25
         + 8
         + ((v18
           + 9
           + ((v17
             + 8
             + ((v166
               + (v14 | 7)
               + 1
               + ((v9 + 40 + ((v4 + 56) & ~v5) + __n) & ~v12)) & ~(v14 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~v18)) & 0xFFFFFFFFFFFFFFF8)
       + 9 <= 0x18)
    {
      uint64_t v150 = v9 + 40;
      uint64_t v141 = v14 | 7;
      uint64_t v142 = v17 + 8;
      uint64_t v143 = v18 + 9;
      uint64_t v144 = v9 | 7 | v14;
      uint64_t v145 = v17;
      uint64_t v132 = v14;
      uint64_t v133 = v9;
      size_t v130 = v23;
      uint64_t v131 = v14 + 3;
      size_t v134 = v23 + v18;
      int v153 = v20;
      int v154 = *(_DWORD *)(v8 + 84);
      size_t v137 = v22;
      unint64_t v151 = v10 + v14;
      unint64_t v140 = v21;
      unint64_t v146 = v22 + v14;
      unsigned int v155 = v15;
      unint64_t v147 = v25 + 8;
      uint64_t v135 = v14 + 2;
      size_t v136 = v24;
      unint64_t v156 = v25;
      uint64_t v149 = ~v5;
      unint64_t v148 = ~(unint64_t)v4;
      uint64_t v29 = *a2;
      unint64_t v28 = a2[1];
      uint64_t v30 = a2[2];
      uint64_t v31 = a2[3];
      uint64_t v33 = a2[4];
      uint64_t v32 = a2[5];
      uint64_t v34 = a2[6];
      sub_228B175AC(*a2, v28);
      *a1 = v29;
      a1[1] = v28;
      a1[2] = v30;
      a1[3] = v31;
      a1[4] = v33;
      a1[5] = v32;
      a1[6] = v34;
      uint64_t v35 = (char *)(((unint64_t)a1 + v27 + 56) & v149);
      uint64_t v36 = (uint64_t *)(((unint64_t)a2 + v27 + 56) & v149);
      unint64_t v37 = ((unint64_t)v36 + 79) & 0xFFFFFFFFFFFFFFF8;
      if (v159 < 0)
      {
        unint64_t v38 = v148;
        if ((*(unsigned int (**)(unint64_t))(v157 + 48))((v168 + v37 + 17) & v148) <= 1)
        {
LABEL_25:
          uint64_t v160 = (char *)(((unint64_t)a1 + v27 + 56) & v149);
          uint64_t v40 = *v36;
          unint64_t v41 = v36[1];
          uint64_t v42 = v36[2];
          uint64_t v43 = v36[3];
          uint64_t v44 = v36[4];
          uint64_t v45 = v36[5];
          uint64_t v46 = v36[6];
          sub_228B175AC(*v36, v41);
          *(void *)uint64_t v160 = v40;
          *((void *)v160 + 1) = v41;
          *((void *)v160 + 2) = v42;
          *((void *)v160 + 3) = v43;
          *((void *)v160 + 4) = v44;
          *((void *)v160 + 5) = v45;
          *((void *)v160 + 6) = v46;
          unint64_t v47 = (unint64_t)(v160 + 63) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v48 = ((unint64_t)v36 + 63) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v47 = *(void *)v48;
          *(unsigned char *)(v47 + 8) = *(unsigned char *)(v48 + 8);
          unint64_t v49 = (unint64_t)(v160 + 79) & 0xFFFFFFFFFFFFFFF8;
          if (*(void *)(v37 + 8) < 0xFFFFFFFFuLL)
          {
            long long v58 = *(_OWORD *)v37;
            *(unsigned char *)(v49 + 16) = *(unsigned char *)(v37 + 16);
            *(_OWORD *)unint64_t v49 = v58;
          }
          else
          {
            *(void *)unint64_t v49 = *(void *)v37;
            *(void *)(v49 + 8) = *(void *)(v37 + 8);
            *(unsigned char *)(v49 + 16) = *(unsigned char *)(v37 + 16);
            swift_retain();
            swift_retain();
          }
          uint64_t v59 = (void *)((v168 + 17 + v49) & v38);
          uint64_t v60 = (const void *)((v168 + 17 + v37) & v38);
          uint64_t v54 = v144;
          uint64_t v53 = v145;
          uint64_t v55 = v143;
          uint64_t v56 = v166;
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v157 + 48))(v60, 1, v158))
          {
            memcpy(v59, v60, v169);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v157 + 16))(v59, v60, v158);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v157 + 56))(v59, 0, 1, v158);
          }
          unint64_t v61 = ((unint64_t)v59 + v139) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v62 = ((unint64_t)v60 + v139) & 0xFFFFFFFFFFFFFFF8;
          if (*(void *)v62 < 0xFFFFFFFFuLL)
          {
            *(_OWORD *)unint64_t v61 = *(_OWORD *)v62;
          }
          else
          {
            uint64_t v63 = *(void *)(v62 + 8);
            *(void *)unint64_t v61 = *(void *)v62;
            *(void *)(v61 + 8) = v63;
            swift_retain();
          }
          unint64_t v57 = v152;
          uint64_t v35 = v160;
          uint64_t v52 = a1;
LABEL_38:
          uint64_t v64 = ~v12;
          unint64_t v65 = ((v57 + v169 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
          uint64_t v66 = &v35[v65];
          uint64_t v67 = (char *)v36 + v65;
          *(void *)uint64_t v66 = *(uint64_t *)((char *)v36 + v65);
          v66[8] = *((unsigned char *)v36 + v65 + 8);
          uint64_t v68 = (uint64_t)&v35[v65 + 16];
          uint64_t v69 = (long long *)(v67 + 16);
          if (*((void *)v67 + 3) < 0xFFFFFFFFuLL)
          {
            long long v70 = *v69;
            *(void *)(v68 + 16) = *((void *)v67 + 4);
            *(_OWORD *)uint64_t v68 = v70;
          }
          else
          {
            *(void *)uint64_t v68 = *(void *)v69;
            *(void *)(v68 + 8) = *((void *)v67 + 3);
            *(void *)(v68 + 16) = *((void *)v67 + 4);
            swift_retain();
            swift_retain();
          }
          uint64_t v71 = (void *)((unint64_t)&v66[v150] & v64);
          uint64_t v72 = (unsigned __int8 *)((unint64_t)&v67[v150] & v64);
          unsigned int v73 = v72[v56];
          unsigned int v74 = v73 - 2;
          if (v73 < 2)
          {
            uint64_t v77 = v166 + v141 + 1;
            uint64_t v76 = v142;
          }
          else
          {
            if (v56 <= 3) {
              uint64_t v75 = v56;
            }
            else {
              uint64_t v75 = 4;
            }
            uint64_t v77 = v166 + v141 + 1;
            uint64_t v76 = v142;
            switch(v75)
            {
              case 1:
                int v78 = *v72;
                if (v56 < 4) {
                  goto LABEL_52;
                }
                goto LABEL_54;
              case 2:
                int v78 = *(unsigned __int16 *)v72;
                if (v56 >= 4) {
                  goto LABEL_54;
                }
                goto LABEL_52;
              case 3:
                int v78 = *(unsigned __int16 *)v72 | (v72[2] << 16);
                if (v56 < 4) {
                  goto LABEL_52;
                }
                goto LABEL_54;
              case 4:
                int v78 = *(_DWORD *)v72;
                if (v56 < 4) {
LABEL_52:
                }
                  unsigned int v73 = (v78 | (v74 << (8 * v56))) + 2;
                else {
LABEL_54:
                }
                  unsigned int v73 = v78 + 2;
                break;
              default:
                break;
            }
          }
          uint64_t v79 = ~v141;
          if (v73 == 1)
          {
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v162 + 16))(v71, v72, v163);
            char v80 = 1;
          }
          else
          {
            *uint64_t v71 = *(void *)v72;
            swift_retain();
            char v80 = 0;
          }
          *((unsigned char *)v71 + v56) = v80;
          unsigned __int8 v81 = (void *)(((unint64_t)v71 + v77) & v79);
          id v82 = (unsigned __int8 *)((unint64_t)&v72[v77] & v79);
          unsigned int v83 = v82[v53];
          unsigned int v84 = v83 - 2;
          if (v83 >= 2)
          {
            if (v53 <= 3) {
              uint64_t v85 = v53;
            }
            else {
              uint64_t v85 = 4;
            }
            switch(v85)
            {
              case 1:
                int v86 = *v82;
                if (v53 < 4) {
                  goto LABEL_68;
                }
                goto LABEL_70;
              case 2:
                int v86 = *(unsigned __int16 *)v82;
                if (v53 >= 4) {
                  goto LABEL_70;
                }
                goto LABEL_68;
              case 3:
                int v86 = *(unsigned __int16 *)v82 | (v82[2] << 16);
                if (v53 < 4) {
                  goto LABEL_68;
                }
                goto LABEL_70;
              case 4:
                int v86 = *(_DWORD *)v82;
                if (v53 < 4) {
LABEL_68:
                }
                  unsigned int v83 = (v86 | (v84 << (8 * v53))) + 2;
                else {
LABEL_70:
                }
                  unsigned int v83 = v86 + 2;
                break;
              default:
                break;
            }
          }
          uint64_t v87 = ~v54;
          if (v83 == 1)
          {
            (*(void (**)(void *, unsigned __int8 *, uint64_t))(v164 + 16))(v81, v82, v165);
            char v88 = 1;
          }
          else
          {
            *unsigned __int8 v81 = *(void *)v82;
            swift_retain();
            char v88 = 0;
          }
          *((unsigned char *)v81 + v53) = v88;
          unint64_t v89 = ((unint64_t)v81 + v76) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v90 = (unint64_t)&v82[v76] & 0xFFFFFFFFFFFFFFF8;
          uint64_t v91 = *(void *)v90;
          char v92 = *(unsigned char *)(v90 + 8);
          sub_228AD266C(*(void *)v90, v92);
          *(void *)unint64_t v89 = v91;
          *(unsigned char *)(v89 + 8) = v92;
          unint64_t v93 = (v55 + v89) & v87;
          unint64_t v94 = (v55 + v90) & v87;
          unsigned int v95 = *(unsigned __int8 *)(v94 + v156);
          unsigned int v96 = v95 - 2;
          if (v95 < 2)
          {
            int v99 = v153;
            int v98 = v154;
            if (v95 != 1)
            {
LABEL_122:
              *(void *)unint64_t v93 = *(void *)v94;
              *(unsigned char *)(v93 + v156) = 0;
              swift_retain();
LABEL_126:
              unint64_t v51 = (unint64_t)v52;
              unint64_t v125 = (v147 + v93) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v126 = (v147 + v94) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v127 = *(void *)v126;
              char v128 = *(unsigned char *)(v126 + 8);
              sub_228AD266C(*(void *)v126, v128);
              *(void *)unint64_t v125 = v127;
              *(unsigned char *)(v125 + 8) = v128;
              return v51;
            }
          }
          else
          {
            if (v156 <= 3) {
              uint64_t v97 = v156;
            }
            else {
              uint64_t v97 = 4;
            }
            int v99 = v153;
            int v98 = v154;
            switch(v97)
            {
              case 1:
                int v100 = *(unsigned __int8 *)v94;
                if (v156 < 4) {
                  goto LABEL_86;
                }
                goto LABEL_121;
              case 2:
                int v100 = *(unsigned __int16 *)v94;
                if (v156 >= 4) {
                  goto LABEL_121;
                }
                goto LABEL_86;
              case 3:
                int v100 = *(unsigned __int16 *)v94 | (*(unsigned __int8 *)(v94 + 2) << 16);
                if (v156 < 4) {
                  goto LABEL_86;
                }
                goto LABEL_121;
              case 4:
                int v100 = *(_DWORD *)v94;
                if (v156 >= 4)
                {
LABEL_121:
                  if (v100 == -1) {
                    break;
                  }
                  goto LABEL_122;
                }
LABEL_86:
                unsigned int v95 = (v100 | (v96 << (8 * v156))) + 2;
LABEL_87:
                if (v95 != 1) {
                  goto LABEL_122;
                }
                break;
              default:
                goto LABEL_87;
            }
          }
          uint64_t v101 = ~v133;
          uint64_t v102 = ~v132;
          unint64_t v103 = (v161 + v94) & ~v133;
          if (v98 == v99)
          {
            if (!(*(unsigned int (**)(unint64_t))(v162 + 48))((v161 + v94) & ~v133)) {
              goto LABEL_93;
            }
          }
          else
          {
            unint64_t v104 = (v151 + v103) & v102;
            if (v155 == v99)
            {
              if (!(*(unsigned int (**)(unint64_t))(v164 + 48))((v151 + v103) & v102))
              {
LABEL_93:
                unint64_t v104 = (v151 + v103) & v102;
                uint64_t v105 = (void *)((v140 + v104) & 0xFFFFFFFFFFFFFFF8);
LABEL_97:
                *(unsigned char *)unint64_t v93 = *(unsigned char *)v94;
                *(unsigned char *)(v93 | 1) = *(unsigned char *)(v94 | 1);
                unint64_t v107 = (v161 + v93) & v101;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v162 + 16))(v107, v103, v163);
                unint64_t v108 = (v151 + v107) & v102;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v164 + 16))(v108, v104, v165);
                unint64_t v109 = v140 + v108;
                uint64_t v101 = ~v133;
                *(void *)(v109 & 0xFFFFFFFFFFFFFFF8) = *v105;
                swift_retain();
                goto LABEL_99;
              }
            }
            else
            {
              uint64_t v105 = (void *)((v140 + v104) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v106 = *v105;
              if (*v105 >= 0xFFFFFFFFuLL) {
                LODWORD(v106) = -1;
              }
              if ((v106 + 1) < 2) {
                goto LABEL_97;
              }
            }
          }
          memcpy((void *)v93, (const void *)v94, v137);
LABEL_99:
          uint64_t v110 = (unsigned char *)((v146 + v93) & v102);
          uint64_t v111 = (unsigned char *)((v146 + v94) & v102);
          if (v155 > 0xFE)
          {
            if (!(*(unsigned int (**)(unint64_t))(v164 + 48))((unint64_t)&v111[v131] & v102)) {
              goto LABEL_101;
            }
          }
          else if (*v111 < 2u)
          {
LABEL_101:
            *uint64_t v110 = *v111;
            *(unsigned char *)(((v146 + v93) & v102) + 1) = *(unsigned char *)(((v146 + v94) & v102) + 1);
            *(unsigned char *)(((v146 + v93) & v102) + 2) = *(unsigned char *)(((v146 + v94) & v102) + 2);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v164 + 16))((unint64_t)&v110[v131] & v102, (unint64_t)&v111[v131] & v102, v165);
            goto LABEL_104;
          }
          memcpy(v110, v111, v130);
LABEL_104:
          unint64_t v112 = (unint64_t)&v110[v134] & v87;
          unint64_t v113 = (unint64_t)&v111[v134] & v87;
          unint64_t v114 = (v161 + v113) & v101;
          if (v154 == v153)
          {
            if (!(*(unsigned int (**)(unint64_t))(v162 + 48))((v161 + v113) & v101)) {
              goto LABEL_109;
            }
          }
          else
          {
            unint64_t v115 = (v151 + v114) & v102;
            if (v155 == v153)
            {
              if (!(*(unsigned int (**)(unint64_t))(v164 + 48))((v151 + v114) & v102))
              {
LABEL_109:
                unint64_t v115 = (v151 + v114) & v102;
                uint64_t v116 = (void *)((v140 + v115) & 0xFFFFFFFFFFFFFFF8);
LABEL_113:
                *(unsigned char *)unint64_t v112 = *(unsigned char *)v113;
                *(unsigned char *)(v112 | 1) = *(unsigned char *)(v113 | 1);
                unint64_t v118 = (v161 + v112) & v101;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v162 + 16))(v118, v114, v163);
                unint64_t v119 = (v151 + v118) & v102;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v164 + 16))(v119, v115, v165);
                *(void *)((v140 + v119) & 0xFFFFFFFFFFFFFFF8) = *v116;
                swift_retain();
                goto LABEL_115;
              }
            }
            else
            {
              uint64_t v116 = (void *)((v140 + v115) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v117 = *v116;
              if (*v116 >= 0xFFFFFFFFuLL) {
                LODWORD(v117) = -1;
              }
              if ((v117 + 1) < 2) {
                goto LABEL_113;
              }
            }
          }
          memcpy((void *)v112, (const void *)v113, v137);
LABEL_115:
          uint64_t v120 = (unsigned char *)((v146 + v112) & v102);
          v121 = (unsigned __int8 *)((v146 + v113) & v102);
          if (v155 > 0xFE)
          {
            unint64_t v123 = (unint64_t)&v121[v135] & v102;
            if (!(*(unsigned int (**)(unint64_t))(v164 + 48))(v123))
            {
              LOBYTE(v122) = *v121;
              goto LABEL_124;
            }
          }
          else
          {
            unsigned int v122 = *v121;
            if (v122 <= 1)
            {
              unint64_t v123 = (unint64_t)&v121[v135] & v102;
LABEL_124:
              *uint64_t v120 = v122;
              v120[1] = v121[1];
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v164 + 16))((unint64_t)&v120[v135] & v102, v123, v165);
              goto LABEL_125;
            }
          }
          memcpy(v120, v121, v136);
LABEL_125:
          uint64_t v124 = &v120[v136];
          *uint64_t v124 = *(_WORD *)&v121[v136];
          v124[1] = *(_WORD *)&v121[v136 + 2];
          v124[2] = *(_WORD *)&v121[v136 + 4];
          *(unsigned char *)(v93 + v156) = 1;
          goto LABEL_126;
        }
      }
      else
      {
        unint64_t v38 = v148;
        unint64_t v39 = *(void *)(v37 + 8);
        if (v39 >= 0xFFFFFFFF) {
          LODWORD(v39) = -1;
        }
        if ((v39 + 1) < 2) {
          goto LABEL_25;
        }
      }
      uint64_t v52 = a1;
      memcpy(v35, v36, __n);
      uint64_t v54 = v144;
      uint64_t v53 = v145;
      uint64_t v55 = v143;
      uint64_t v56 = v166;
      unint64_t v57 = v152;
      goto LABEL_38;
    }
  }
  uint64_t v50 = *a2;
  *a1 = *a2;
  unint64_t v51 = v50 + ((v26 + 16) & ~v26);
  swift_retain();
  return v51;
}

uint64_t sub_228B5FCC0(uint64_t a1, uint64_t a2)
{
  sub_228B17624(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (a1 + (v6 | 7) + 56) & ~(v6 | 7);
  int v8 = *(_DWORD *)(v5 + 84);
  uint64_t v9 = ~v6;
  uint64_t v10 = *(void *)(v5 + 64);
  unint64_t v11 = (v7 + 79) & 0xFFFFFFFFFFFFFFF8;
  if (v8 < 0)
  {
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v5 + 48))((v6 + v11 + 17) & v9, *(unsigned int *)(v5 + 84), v4) > 1)goto LABEL_16; {
    goto LABEL_7;
    }
  }
  unint64_t v12 = *(void *)(v11 + 8);
  if (v12 >= 0xFFFFFFFF) {
    LODWORD(v12) = -1;
  }
  if ((v12 + 1) < 2)
  {
LABEL_7:
    sub_228B17624(*(void *)v7, *(void *)(v7 + 8));
    if (*(void *)(v11 + 8) >= 0xFFFFFFFFuLL)
    {
      swift_release();
      swift_release();
    }
    uint64_t v13 = (v6 + v11 + 17) & v9;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4)) {
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v13, v4);
    }
    if (v8) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v10 + 1;
    }
    if (*(void *)((v14 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL) {
      swift_release();
    }
  }
LABEL_16:
  if (v8) {
    uint64_t v15 = v10;
  }
  else {
    uint64_t v15 = v10 + 1;
  }
  unint64_t v16 = v7 + ((v15 + ((v6 + 89) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = v16 + 16;
  if (*(void *)(v16 + 40) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
  }
  uint64_t v18 = sub_228BAC9C8();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v20 | 7;
  unint64_t v22 = (unsigned __int8 *)((v17 + (v20 | 7) + 40) & ~(v20 | 7));
  if (*(void *)(v19 + 64) <= 8uLL) {
    uint64_t v23 = 8;
  }
  else {
    uint64_t v23 = *(void *)(*(void *)(v18 - 8) + 64);
  }
  unsigned int v24 = v22[v23];
  unsigned int v25 = v24 - 2;
  if (v24 >= 2)
  {
    if (v23 <= 3) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = 4;
    }
    switch(v26)
    {
      case 1:
        int v27 = *v22;
        goto LABEL_33;
      case 2:
        int v27 = *(unsigned __int16 *)v22;
        goto LABEL_33;
      case 3:
        int v27 = *(unsigned __int16 *)v22 | (v22[2] << 16);
        goto LABEL_33;
      case 4:
        int v27 = *(_DWORD *)v22;
LABEL_33:
        int v28 = (v27 | (v25 << (8 * v23))) + 2;
        unsigned int v24 = v27 + 2;
        if (v23 < 4) {
          unsigned int v24 = v28;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v83 = *(void *)(*(void *)(v18 - 8) + 64);
  if (v24 == 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(v19 + 8))(v22, v18);
  }
  else {
    swift_release();
  }
  uint64_t v85 = sub_228BAC588();
  uint64_t v29 = *(void *)(v85 - 8);
  uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v31 = (unsigned __int8 *)((unint64_t)&v22[v23 + 1 + (v30 | 7)] & ~(v30 | 7));
  unint64_t v32 = *(void *)(v29 + 64);
  if (v32 <= 8) {
    uint64_t v33 = 8;
  }
  else {
    uint64_t v33 = *(void *)(*(void *)(v85 - 8) + 64);
  }
  unsigned int v34 = v31[v33];
  unsigned int v35 = v34 - 2;
  if (v34 >= 2)
  {
    if (v33 <= 3) {
      uint64_t v36 = v33;
    }
    else {
      uint64_t v36 = 4;
    }
    switch(v36)
    {
      case 1:
        int v37 = *v31;
        goto LABEL_50;
      case 2:
        int v37 = *(unsigned __int16 *)v31;
        goto LABEL_50;
      case 3:
        int v37 = *(unsigned __int16 *)v31 | (v31[2] << 16);
        goto LABEL_50;
      case 4:
        int v37 = *(_DWORD *)v31;
LABEL_50:
        int v38 = (v37 | (v35 << (8 * v33))) + 2;
        unsigned int v34 = v37 + 2;
        if (v33 < 4) {
          unsigned int v34 = v38;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v82 = v18;
  if (v34 == 1) {
    (*(void (**)(unsigned __int8 *, uint64_t))(v29 + 8))(v31, v85);
  }
  else {
    swift_release();
  }
  unint64_t v39 = (unint64_t)&v31[v33 + 8] & 0xFFFFFFFFFFFFFFF8;
  sub_228AD25F8(*(void *)v39, *(unsigned char *)(v39 + 8));
  uint64_t v40 = v21 | v30;
  unint64_t v41 = (unsigned __int8 *)(((v21 | v30) + v39 + 9) & ~(v21 | v30));
  uint64_t v81 = v19;
  uint64_t v42 = *(unsigned int *)(v19 + 84);
  uint64_t v84 = v29;
  uint64_t v43 = *(unsigned int *)(v29 + 84);
  if (v42 <= v43) {
    unsigned int v44 = *(_DWORD *)(v29 + 84);
  }
  else {
    unsigned int v44 = *(_DWORD *)(v19 + 84);
  }
  if (v44 <= 0x7FFFFFFE) {
    int v45 = 2147483646;
  }
  else {
    int v45 = v44;
  }
  uint64_t v46 = v20 + 2;
  unint64_t v47 = v32 + 7;
  uint64_t v48 = (v30 + 2) & ~v30;
  unint64_t v49 = ((v32 + 7 + ((((v20 + 2) & ~v20) + v83 + v30) & ~v30)) & 0xFFFFFFFFFFFFFFF8) + v30 + 8;
  unint64_t v50 = ((v30 + 3) & ~v30) + v32 + v40;
  if (v32 + v48 + ((v49 + ((v50 + (v49 & ~v30)) & ~v40)) & ~v30) + 6 <= 8) {
    uint64_t v51 = 8;
  }
  else {
    uint64_t v51 = v32 + v48 + ((v49 + ((v50 + (v49 & ~v30)) & ~v40)) & ~v30) + 6;
  }
  unsigned int v52 = v41[v51];
  unsigned int v53 = v52 - 2;
  if (v52 >= 2)
  {
    if (v51 <= 3) {
      uint64_t v54 = v51;
    }
    else {
      uint64_t v54 = 4;
    }
    switch(v54)
    {
      case 1:
        int v55 = *v41;
        goto LABEL_73;
      case 2:
        int v55 = *(unsigned __int16 *)v41;
        goto LABEL_73;
      case 3:
        int v55 = *(unsigned __int16 *)v41 | (v41[2] << 16);
        goto LABEL_73;
      case 4:
        int v55 = *(_DWORD *)v41;
LABEL_73:
        int v56 = (v55 | (v53 << (8 * v51))) + 2;
        unsigned int v52 = v55 + 2;
        if (v51 < 4) {
          unsigned int v52 = v56;
        }
        break;
      default:
        break;
    }
  }
  if (v52 != 1)
  {
    swift_release();
    goto LABEL_107;
  }
  uint64_t v57 = ~v20;
  unint64_t v58 = (unint64_t)&v41[v46] & ~v20;
  uint64_t v79 = v30 + 2;
  uint64_t v80 = ~v30;
  unint64_t v74 = v32 + 7;
  uint64_t v75 = v30 + 3;
  int v78 = v45;
  uint64_t v76 = v57;
  unint64_t v77 = ((v30 + 3) & ~v30) + v32 + v40;
  if (v42 == v45)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v81 + 48))(v58, v42, v82)) {
      goto LABEL_87;
    }
LABEL_82:
    unint64_t v59 = (v83 + v30 + v58) & v80;
LABEL_86:
    (*(void (**)(unint64_t, uint64_t))(v81 + 8))(v58, v82);
    (*(void (**)(unint64_t, uint64_t))(v84 + 8))(v59, v85);
    swift_release();
    goto LABEL_87;
  }
  unint64_t v59 = (v83 + v30 + v58) & ~v30;
  if (v43 == v45)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v84 + 48))((v83 + v30 + v58) & ~v30, v43, v85))
    {
      goto LABEL_87;
    }
    goto LABEL_82;
  }
  unint64_t v60 = *(void *)((v47 + v59) & 0xFFFFFFFFFFFFFFF8);
  if (v60 >= 0xFFFFFFFF) {
    LODWORD(v60) = -1;
  }
  if ((v60 + 1) < 2) {
    goto LABEL_86;
  }
LABEL_87:
  unint64_t v61 = (unsigned __int8 *)((unint64_t)&v41[v49] & v80);
  if (v43 <= 0xFE)
  {
    if (*v61 >= 2u) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v84 + 48))((unint64_t)&v61[v75] & v80, v43, v85))LABEL_89:(*(void (**)(unint64_t, uint64_t))(v84 + 8))((unint64_t)&v61[v75] & v80, v85); {
LABEL_90:
  }
  unint64_t v62 = (unint64_t)&v61[v77] & ~v40;
  unint64_t v63 = (v46 + v62) & v76;
  if (v42 == v78)
  {
    uint64_t v64 = v82;
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v81 + 48))(v63, v42, v82)) {
      goto LABEL_102;
    }
LABEL_97:
    unint64_t v65 = (v83 + v30 + v63) & v80;
LABEL_101:
    (*(void (**)(unint64_t, uint64_t))(v81 + 8))(v63, v64);
    (*(void (**)(unint64_t, uint64_t))(v84 + 8))(v65, v85);
    swift_release();
    goto LABEL_102;
  }
  uint64_t v64 = v82;
  unint64_t v65 = (v83 + v30 + v63) & v80;
  if (v43 == v78)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v84 + 48))((v83 + v30 + v63) & v80, v43, v85))
    {
      goto LABEL_102;
    }
    goto LABEL_97;
  }
  unint64_t v66 = *(void *)((v74 + v65) & 0xFFFFFFFFFFFFFFF8);
  if (v66 >= 0xFFFFFFFF) {
    LODWORD(v66) = -1;
  }
  if ((v66 + 1) < 2) {
    goto LABEL_101;
  }
LABEL_102:
  uint64_t v67 = (unsigned __int8 *)((v49 + v62) & v80);
  if (v43 > 0xFE)
  {
    unint64_t v69 = (unint64_t)&v67[v79] & v80;
    uint64_t v68 = v84;
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v84 + 48))(v69, v43, v85)) {
      goto LABEL_107;
    }
  }
  else
  {
    uint64_t v68 = v84;
    if (*v67 > 1u) {
      goto LABEL_107;
    }
    unint64_t v69 = (unint64_t)&v67[v79] & v80;
  }
  (*(void (**)(unint64_t, uint64_t))(v68 + 8))(v69, v85);
LABEL_107:
  unint64_t v70 = (unint64_t)&v41[v51 + 8] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v71 = *(void *)v70;
  char v72 = *(unsigned char *)(v70 + 8);

  return sub_228AD25F8(v71, v72);
}

uint64_t *sub_228B605A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  sub_228B175AC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = (v15 | 7) + 56;
  unint64_t v147 = a1;
  unint64_t v17 = (void *)(((unint64_t)a1 + v16) & ~(v15 | 7));
  uint64_t v18 = (uint64_t *)(((unint64_t)a2 + v16) & ~(v15 | 7));
  uint64_t v19 = *(unsigned int *)(v14 + 84);
  uint64_t v20 = (v15 + 89) & ~v15;
  size_t v21 = *(void *)(v14 + 64);
  unint64_t v22 = ((unint64_t)v18 + 79) & 0xFFFFFFFFFFFFFFF8;
  if ((v19 & 0x80000000) != 0)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v14 + 48))((v15 + v22 + 17) & ~v15, v19, v13) <= 1)
    {
LABEL_5:
      uint64_t v143 = ~v15;
      size_t v145 = v21;
      int __src = v19;
      uint64_t v151 = v14;
      uint64_t v153 = v13;
      unint64_t v157 = ((unint64_t)v18 + 79) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v24 = *v18;
      unint64_t v25 = v18[1];
      uint64_t v26 = v18[2];
      uint64_t v27 = v18[3];
      uint64_t v29 = v18[4];
      uint64_t v28 = v18[5];
      uint64_t v30 = v18[6];
      sub_228B175AC(*v18, v25);
      *unint64_t v17 = v24;
      v17[1] = v25;
      v17[2] = v26;
      v17[3] = v27;
      v17[4] = v29;
      v17[5] = v28;
      v17[6] = v30;
      unint64_t v31 = ((unint64_t)v17 + 63) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v32 = ((unint64_t)v18 + 63) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v31 = *(void *)v32;
      *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
      unint64_t v33 = ((unint64_t)v17 + 79) & 0xFFFFFFFFFFFFFFF8;
      if (*(void *)(v157 + 8) < 0xFFFFFFFFuLL)
      {
        long long v35 = *(_OWORD *)v157;
        *(unsigned char *)(v33 + 16) = *(unsigned char *)(v157 + 16);
        *(_OWORD *)unint64_t v33 = v35;
      }
      else
      {
        *(void *)unint64_t v33 = *(void *)v157;
        *(void *)(v33 + 8) = *(void *)(v157 + 8);
        *(unsigned char *)(v33 + 16) = *(unsigned char *)(v157 + 16);
        swift_retain();
        swift_retain();
      }
      uint64_t v20 = (v15 + 89) & ~v15;
      uint64_t v36 = (void *)((v15 + 17 + v33) & v143);
      int v37 = (const void *)((v15 + 17 + v157) & v143);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v151 + 48))(v37, 1, v153))
      {
        if (__src) {
          size_t v34 = v145;
        }
        else {
          size_t v34 = v145 + 1;
        }
        memcpy(v36, v37, v34);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v151 + 16))(v36, v37, v153);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v151 + 56))(v36, 0, 1, v153);
        if (__src) {
          size_t v34 = v145;
        }
        else {
          size_t v34 = v145 + 1;
        }
      }
      unint64_t v38 = ((unint64_t)v36 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v39 = ((unint64_t)v37 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (*(void *)v39 < 0xFFFFFFFFuLL)
      {
        *(_OWORD *)unint64_t v38 = *(_OWORD *)v39;
      }
      else
      {
        uint64_t v40 = *(void *)(v39 + 8);
        *(void *)unint64_t v38 = *(void *)v39;
        *(void *)(v38 + 8) = v40;
        swift_retain();
      }
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v23 = *(void *)(v22 + 8);
    if (v23 >= 0xFFFFFFFF) {
      LODWORD(v23) = -1;
    }
    if ((v23 + 1) < 2) {
      goto LABEL_5;
    }
  }
  if (v19) {
    size_t v34 = v21;
  }
  else {
    size_t v34 = v21 + 1;
  }
  memcpy(v17, v18, ((v34 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
LABEL_24:
  unint64_t v41 = ((v20 + v34 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v42 = (char *)v17 + v41;
  uint64_t v43 = (char *)v18 + v41;
  *(void *)uint64_t v42 = *(uint64_t *)((char *)v18 + v41);
  v42[8] = *((unsigned char *)v18 + v41 + 8);
  uint64_t v44 = (uint64_t)v17 + v41 + 16;
  int v45 = (long long *)(v43 + 16);
  if (*((void *)v43 + 3) < 0xFFFFFFFFuLL)
  {
    long long v46 = *v45;
    *(void *)(v44 + 16) = *((void *)v43 + 4);
    *(_OWORD *)uint64_t v44 = v46;
  }
  else
  {
    *(void *)uint64_t v44 = *(void *)v45;
    *(void *)(v44 + 8) = *((void *)v43 + 3);
    *(void *)(v44 + 16) = *((void *)v43 + 4);
    swift_retain();
    swift_retain();
  }
  uint64_t v152 = sub_228BAC9C8();
  uint64_t v47 = *(void *)(v152 - 8);
  uint64_t v48 = *(unsigned __int8 *)(v47 + 80) | 7;
  unint64_t v49 = (void *)((unint64_t)&v42[v48 + 40] & ~v48);
  unint64_t v50 = (unsigned __int8 *)((unint64_t)&v43[v48 + 40] & ~v48);
  unint64_t v154 = *(void *)(v47 + 64);
  if (v154 <= 8) {
    uint64_t v51 = 8;
  }
  else {
    uint64_t v51 = *(void *)(*(void *)(v152 - 8) + 64);
  }
  unsigned int v52 = v50[v51];
  unsigned int v53 = v52 - 2;
  if (v52 >= 2)
  {
    if (v51 <= 3) {
      uint64_t v54 = v51;
    }
    else {
      uint64_t v54 = 4;
    }
    switch(v54)
    {
      case 1:
        int v55 = *v50;
        if (v51 < 4) {
          goto LABEL_38;
        }
        goto LABEL_42;
      case 2:
        int v55 = *(unsigned __int16 *)v50;
        if (v51 < 4) {
          goto LABEL_38;
        }
        goto LABEL_42;
      case 3:
        int v55 = *(unsigned __int16 *)v50 | (v50[2] << 16);
        if (v51 < 4) {
          goto LABEL_38;
        }
        goto LABEL_42;
      case 4:
        int v55 = *(_DWORD *)v50;
        if (v51 < 4) {
LABEL_38:
        }
          unsigned int v52 = (v55 | (v53 << (8 * v51))) + 2;
        else {
LABEL_42:
        }
          unsigned int v52 = v55 + 2;
        break;
      default:
        break;
    }
  }
  unint64_t __srca = *(unsigned __int8 *)(v47 + 80);
  if (v52 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v47 + 16))(v49, v50, v152);
    char v56 = 1;
  }
  else
  {
    *unint64_t v49 = *(void *)v50;
    swift_retain();
    char v56 = 0;
  }
  *((unsigned char *)v49 + v51) = v56;
  uint64_t v158 = sub_228BAC588();
  uint64_t v57 = *(void *)(v158 - 8);
  uint64_t v58 = *(unsigned __int8 *)(v57 + 80);
  uint64_t v59 = v51 + 1 + (v58 | 7);
  unint64_t v60 = (void *)(((unint64_t)v49 + v59) & ~(v58 | 7));
  unint64_t v61 = (unsigned __int8 *)((unint64_t)&v50[v59] & ~(v58 | 7));
  unint64_t v62 = *(void *)(v57 + 64);
  if (v62 <= 8) {
    uint64_t v63 = 8;
  }
  else {
    uint64_t v63 = *(void *)(*(void *)(v158 - 8) + 64);
  }
  unsigned int v64 = v61[v63];
  unsigned int v65 = v64 - 2;
  if (v64 >= 2)
  {
    if (v63 <= 3) {
      uint64_t v66 = v63;
    }
    else {
      uint64_t v66 = 4;
    }
    switch(v66)
    {
      case 1:
        int v67 = *v61;
        if (v63 >= 4) {
          goto LABEL_63;
        }
        goto LABEL_57;
      case 2:
        int v67 = *(unsigned __int16 *)v61;
        if (v63 < 4) {
          goto LABEL_57;
        }
        goto LABEL_63;
      case 3:
        int v67 = *(unsigned __int16 *)v61 | (v61[2] << 16);
        if (v63 < 4) {
          goto LABEL_57;
        }
        goto LABEL_63;
      case 4:
        int v67 = *(_DWORD *)v61;
        if (v63 < 4)
        {
LABEL_57:
          unsigned int v64 = (v67 | (v65 << (8 * v63))) + 2;
          break;
        }
LABEL_63:
        if (v67 != -1) {
          goto LABEL_64;
        }
        goto LABEL_59;
      default:
        break;
    }
  }
  if (v64 == 1)
  {
LABEL_59:
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v57 + 16))(v60, v61, v158);
    char v68 = 1;
  }
  else
  {
LABEL_64:
    *unint64_t v60 = *(void *)v61;
    swift_retain();
    char v68 = 0;
  }
  *((unsigned char *)v60 + v63) = v68;
  unint64_t v69 = ((unint64_t)v60 + v63 + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v70 = (unint64_t)&v61[v63 + 8] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v71 = *(void *)v70;
  char v72 = *(unsigned char *)(v70 + 8);
  sub_228AD266C(*(void *)v70, v72);
  *(void *)unint64_t v69 = v71;
  *(unsigned char *)(v69 + 8) = v72;
  uint64_t v73 = v48 | v58;
  uint64_t v74 = (v48 | v58) + 9;
  unint64_t v75 = (v74 + v69) & ~(v48 | v58);
  unint64_t v76 = (v74 + v70) & ~(v48 | v58);
  uint64_t v144 = v47;
  uint64_t v77 = *(unsigned int *)(v47 + 84);
  uint64_t v78 = *(unsigned int *)(v57 + 84);
  if (v77 <= v78) {
    unsigned int v79 = *(_DWORD *)(v57 + 84);
  }
  else {
    unsigned int v79 = v77;
  }
  if (v79 <= 0x7FFFFFFE) {
    int v80 = 2147483646;
  }
  else {
    int v80 = v79;
  }
  unint64_t v81 = __srca;
  uint64_t v82 = (char *)(__srca + 2);
  unint64_t v83 = v62 + 7;
  unint64_t v84 = ((v62 + 7 + ((((__srca + 2) & ~__srca) + v154 + v58) & ~v58)) & 0xFFFFFFFFFFFFFFF8) + 8;
  size_t v85 = ((v58 + 3) & ~v58) + v62;
  size_t v86 = ((v58 + 2) & ~v58) + v62;
  uint64_t v87 = v84 + v58;
  if (v86 + ((v84 + v58 + ((v85 + v73 + ((v84 + v58) & ~v58)) & ~v73)) & ~v58) + 6 <= 8) {
    uint64_t v88 = 8;
  }
  else {
    uint64_t v88 = v86 + ((v84 + v58 + ((v85 + v73 + ((v84 + v58) & ~v58)) & ~v73)) & ~v58) + 6;
  }
  unsigned int v89 = *(unsigned __int8 *)(v76 + v88);
  unsigned int v90 = v89 - 2;
  uint64_t v91 = v57;
  if (v89 >= 2)
  {
    if (v88 <= 3) {
      uint64_t v92 = v88;
    }
    else {
      uint64_t v92 = 4;
    }
    switch(v92)
    {
      case 1:
        int v93 = *(unsigned __int8 *)v76;
        goto LABEL_83;
      case 2:
        int v93 = *(unsigned __int16 *)v76;
        goto LABEL_83;
      case 3:
        int v93 = *(unsigned __int16 *)v76 | (*(unsigned __int8 *)(v76 + 2) << 16);
        goto LABEL_83;
      case 4:
        int v93 = *(_DWORD *)v76;
LABEL_83:
        int v94 = (v93 | (v90 << (8 * v88))) + 2;
        unsigned int v89 = v93 + 2;
        if (v88 < 4) {
          unsigned int v89 = v94;
        }
        break;
      default:
        break;
    }
  }
  unint64_t v156 = (unsigned char *)v75;
  if (v89 == 1)
  {
    size_t v133 = v85;
    uint64_t v134 = v58 + 2;
    uint64_t v135 = v58 + 3;
    size_t v138 = v85 + v73;
    size_t __n = v84;
    size_t v137 = v86;
    uint64_t v95 = ~v58;
    unint64_t __srcb = v76;
    uint64_t v141 = v82;
    unint64_t v142 = ~v81;
    unint64_t v96 = (unint64_t)&v82[v76] & ~v81;
    unint64_t v140 = v83;
    int v136 = v80;
    uint64_t v146 = v91;
    if (v77 == v80)
    {
      int v97 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v144 + 48))((unint64_t)&v82[v76] & ~v81, v77, v152);
    }
    else
    {
      uint64_t v100 = v154 + v58;
      unint64_t v101 = (v154 + v58 + v96) & v95;
      if (v78 != v80)
      {
        unint64_t v102 = *(void *)((v83 + v101) & 0xFFFFFFFFFFFFFFF8);
        if (v102 >= 0xFFFFFFFF) {
          LODWORD(v102) = -1;
        }
        if ((v102 + 1) < 2)
        {
          unint64_t v131 = (v154 + v58 + v96) & v95;
          uint64_t v132 = (void *)((v83 + v101) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_97;
        }
LABEL_98:
        unint64_t v104 = __srcb;
        memcpy((void *)v75, (const void *)__srcb, __n);
LABEL_99:
        uint64_t v107 = ~v73;
        unint64_t v108 = (unsigned char *)((unint64_t)&v156[v87] & v95);
        unint64_t v109 = (unsigned __int8 *)((v87 + v104) & v95);
        if (v78 > 0xFE)
        {
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v146 + 48))((unint64_t)&v109[v135] & v95, v78, v158))goto LABEL_101; {
        }
          }
        else if (*v109 < 2u)
        {
LABEL_101:
          *unint64_t v108 = *v109;
          *(unsigned char *)(((unint64_t)&v156[v87] & v95) + 1) = v109[1];
          *(unsigned char *)(((unint64_t)&v156[v87] & v95) + 2) = v109[2];
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v146 + 16))((unint64_t)&v108[v135] & v95, (unint64_t)&v109[v135] & v95, v158);
          goto LABEL_104;
        }
        memcpy(v108, v109, v133);
LABEL_104:
        unint64_t v110 = (unint64_t)&v108[v138] & v107;
        unint64_t v111 = (unint64_t)&v109[v138] & v107;
        unint64_t v112 = (unint64_t)&v141[v111] & v142;
        if (v77 == v136)
        {
          unint64_t v113 = v154;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v144 + 48))((unint64_t)&v141[v111] & v142, v77, v152))goto LABEL_109; {
        }
          }
        else
        {
          unint64_t v113 = v154;
          uint64_t v114 = v154 + v58;
          unint64_t v115 = (v154 + v58 + v112) & v95;
          if (v78 == v136)
          {
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v146 + 48))(v115, v78, v158))
            {
LABEL_109:
              uint64_t v114 = v113 + v58;
              unint64_t v116 = (v113 + v58 + v112) & v95;
              unsigned int v155 = (void *)((v140 + v116) & 0xFFFFFFFFFFFFFFF8);
LABEL_114:
              *(unsigned char *)unint64_t v110 = *(unsigned char *)v111;
              *(unsigned char *)(v110 | 1) = *(unsigned char *)(v111 | 1);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v144 + 16))((unint64_t)&v141[v110] & v142, v112, v152);
              unint64_t v118 = (v114 + ((unint64_t)&v141[v110] & v142)) & v95;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v146 + 16))(v118, v116, v158);
              *(void *)((v140 + v118) & 0xFFFFFFFFFFFFFFF8) = *v155;
              swift_retain();
              goto LABEL_116;
            }
          }
          else
          {
            unint64_t v117 = *(void *)((v140 + v115) & 0xFFFFFFFFFFFFFFF8);
            if (v117 >= 0xFFFFFFFF) {
              LODWORD(v117) = -1;
            }
            if ((v117 + 1) < 2)
            {
              unint64_t v116 = (v154 + v58 + v112) & v95;
              unsigned int v155 = (void *)((v140 + v115) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_114;
            }
          }
        }
        memcpy((void *)v110, (const void *)v111, __n);
LABEL_116:
        unint64_t v119 = (unsigned char *)((v87 + v110) & v95);
        uint64_t v120 = (unsigned __int8 *)((v87 + v111) & v95);
        if (v78 > 0xFE)
        {
          unint64_t v123 = (unint64_t)&v120[v134] & v95;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v146 + 48))(v123, v78, v158))
          {
            LOBYTE(v121) = *v120;
            int v99 = v147;
            uint64_t v122 = v134;
            goto LABEL_122;
          }
        }
        else
        {
          unsigned int v121 = *v120;
          if (v121 <= 1)
          {
            uint64_t v122 = v134;
            unint64_t v123 = (unint64_t)&v120[v134] & v95;
            int v99 = v147;
LABEL_122:
            *unint64_t v119 = v121;
            v119[1] = v120[1];
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v146 + 16))((unint64_t)&v119[v122] & v95, v123, v158);
            unint64_t v98 = (unint64_t)v156;
            size_t v124 = v137;
            goto LABEL_123;
          }
        }
        size_t v124 = v137;
        memcpy((void *)((v87 + v110) & v95), v120, v137);
        int v99 = v147;
        unint64_t v98 = (unint64_t)v156;
LABEL_123:
        unint64_t v125 = &v119[v124];
        _WORD *v125 = *(_WORD *)&v120[v124];
        v125[1] = *(_WORD *)&v120[v124 + 2];
        v125[2] = *(_WORD *)&v120[v124 + 4];
        *(unsigned char *)(v98 + v88) = 1;
        unint64_t v76 = __srcb;
        goto LABEL_124;
      }
      int v97 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v91 + 48))(v101, v78, v158);
    }
    unint64_t v75 = (unint64_t)v156;
    if (!v97)
    {
      uint64_t v100 = v154 + v58;
      unint64_t v131 = (v154 + v58 + v96) & v95;
      uint64_t v132 = (void *)((v140 + v131) & 0xFFFFFFFFFFFFFFF8);
LABEL_97:
      unint64_t v103 = v96;
      unint64_t v104 = __srcb;
      *(unsigned char *)unint64_t v75 = *(unsigned char *)__srcb;
      *(unsigned char *)(v75 | 1) = *(unsigned char *)(__srcb | 1);
      unint64_t v105 = (unint64_t)&v141[v75] & v142;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v144 + 16))(v105, v103, v152);
      unint64_t v106 = (v100 + v105) & v95;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v146 + 16))(v106, v131, v158);
      *(void *)((v140 + v106) & 0xFFFFFFFFFFFFFFF8) = *v132;
      swift_retain();
      goto LABEL_99;
    }
    goto LABEL_98;
  }
  *(void *)unint64_t v75 = *(void *)v76;
  *(unsigned char *)(v75 + v88) = 0;
  swift_retain();
  unint64_t v98 = (unint64_t)v156;
  int v99 = v147;
LABEL_124:
  unint64_t v126 = ((v98 | 7) + v88 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v127 = ((v76 | 7) + v88 + 1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v128 = *(void *)v127;
  char v129 = *(unsigned char *)(v127 + 8);
  sub_228AD266C(*(void *)v127, v129);
  *(void *)unint64_t v126 = v128;
  *(unsigned char *)(v126 + 8) = v129;
  return v99;
}

uint64_t *sub_228B612A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  sub_228B175AC(*a2, v7);
  uint64_t v13 = *a1;
  unint64_t v14 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  sub_228B17624(v13, v14);
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (v17 | 7) + 56;
  v222 = a1;
  uint64_t v19 = (uint64_t *)(((unint64_t)a1 + v18) & ~(v17 | 7));
  v232 = (uint64_t *)(((unint64_t)a2 + v18) & ~(v17 | 7));
  uint64_t v20 = *(unsigned int *)(v16 + 84);
  uint64_t v21 = ~v17;
  uint64_t v22 = (v17 + 89) & ~v17;
  size_t v23 = *(void *)(v16 + 64);
  unint64_t v24 = ((unint64_t)v19 + 79) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v228 = v15;
  uint64_t v230 = v16;
  uint64_t v223 = ~v17;
  unint64_t v219 = v24;
  if ((v20 & 0x80000000) == 0)
  {
    unint64_t v25 = *(void *)(v24 + 8);
    if (v25 >= 0xFFFFFFFF) {
      LODWORD(v25) = -1;
    }
    unsigned int v26 = v25 + 1;
    unint64_t v217 = ((unint64_t)v232 + 79) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = *(void *)(v217 + 8);
    if (v27 >= 0xFFFFFFFF) {
      LODWORD(v27) = -1;
    }
    unsigned int v28 = v27 + 1;
    if (v26 < 2)
    {
      if (v28 < 2) {
        goto LABEL_8;
      }
LABEL_13:
      sub_228B17624(*v19, v19[1]);
      if (*(void *)(v24 + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      uint64_t v47 = (v17 + v24 + 17) & v21;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v47, 1, v15)) {
        (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v47, v15);
      }
      if (v20) {
        size_t v48 = v23;
      }
      else {
        size_t v48 = v23 + 1;
      }
      if (*(void *)((v48 + 7 + v47) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL) {
        swift_release();
      }
      uint64_t v49 = v48 + 7 + v22;
      goto LABEL_31;
    }
    if (v28 < 2) {
      goto LABEL_24;
    }
LABEL_27:
    if (v20) {
      size_t v48 = v23;
    }
    else {
      size_t v48 = v23 + 1;
    }
    uint64_t v49 = v48 + v22 + 7;
LABEL_31:
    memcpy(v19, v232, (v49 & 0xFFFFFFFFFFFFFFF8) + 16);
    goto LABEL_66;
  }
  size_t v43 = *(void *)(v16 + 64);
  uint64_t v44 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48);
  unsigned int v45 = v44((v17 + 17 + v24) & v21, v20, v15);
  unint64_t v217 = ((unint64_t)v232 + 79) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v46 = v44((v17 + 17 + v217) & v21, v20, v15);
  if (v45 < 2)
  {
    unint64_t v24 = ((unint64_t)v19 + 79) & 0xFFFFFFFFFFFFFFF8;
    size_t v23 = v43;
    uint64_t v21 = ~v17;
    uint64_t v22 = (v17 + 89) & ~v17;
    if (v46 <= 1)
    {
LABEL_8:
      size_t v211 = v23;
      int v214 = v20;
      uint64_t v225 = v22;
      uint64_t v29 = *v232;
      unint64_t v30 = v232[1];
      uint64_t v31 = v232[2];
      uint64_t v32 = v232[3];
      uint64_t v34 = v232[4];
      uint64_t v33 = v232[5];
      uint64_t v35 = v232[6];
      sub_228B175AC(*v232, v30);
      uint64_t v36 = *v19;
      unint64_t v37 = v19[1];
      *uint64_t v19 = v29;
      v19[1] = v30;
      void v19[2] = v31;
      v19[3] = v32;
      v19[4] = v34;
      v19[5] = v33;
      v19[6] = v35;
      sub_228B17624(v36, v37);
      unint64_t v38 = ((unint64_t)v19 + 63) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v39 = ((unint64_t)v232 + 63) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v38 = *(void *)v39;
      *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
      unint64_t v40 = *(void *)(v217 + 8);
      if (*(void *)(v219 + 8) < 0xFFFFFFFFuLL)
      {
        uint64_t v41 = v230;
        uint64_t v42 = ~v17;
        if (v40 >= 0xFFFFFFFF)
        {
          *(void *)unint64_t v219 = *(void *)v217;
          *(void *)(v219 + 8) = *(void *)(v217 + 8);
          *(unsigned char *)(v219 + 16) = *(unsigned char *)(v217 + 16);
          swift_retain();
          swift_retain();
          goto LABEL_46;
        }
      }
      else
      {
        uint64_t v41 = v230;
        uint64_t v42 = ~v17;
        if (v40 >= 0xFFFFFFFF)
        {
          *(void *)unint64_t v219 = *(void *)v217;
          swift_retain();
          swift_release();
          *(void *)(v219 + 8) = *(void *)(v217 + 8);
          swift_retain();
          swift_release();
          *(unsigned char *)(v219 + 16) = *(unsigned char *)(v217 + 16);
          goto LABEL_46;
        }
        swift_release();
        swift_release();
      }
      long long v66 = *(_OWORD *)v217;
      *(unsigned char *)(v219 + 16) = *(unsigned char *)(v217 + 16);
      *(_OWORD *)unint64_t v219 = v66;
LABEL_46:
      int v67 = (void *)((v17 + 17 + v219) & v42);
      char v68 = (void *)((v17 + 17 + v217) & v42);
      unint64_t v69 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v41 + 48);
      int v70 = v69(v67, 1, v15);
      int v71 = v69(v68, 1, v15);
      if (v70)
      {
        if (!v71)
        {
          (*(void (**)(void *, void *, uint64_t))(v230 + 16))(v67, v68, v15);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v230 + 56))(v67, 0, 1, v15);
          goto LABEL_55;
        }
      }
      else
      {
        if (!v71)
        {
          (*(void (**)(void *, void *, uint64_t))(v230 + 24))(v67, v68, v15);
          goto LABEL_55;
        }
        (*(void (**)(void *, uint64_t))(v230 + 8))(v67, v15);
      }
      if (v214) {
        size_t v72 = v211;
      }
      else {
        size_t v72 = v211 + 1;
      }
      memcpy(v67, v68, v72);
LABEL_55:
      if (v214) {
        size_t v48 = v211;
      }
      else {
        size_t v48 = v211 + 1;
      }
      uint64_t v73 = (void *)(((unint64_t)v67 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v74 = (unint64_t *)(((unint64_t)v68 + v48 + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v75 = *v74;
      if (*v73 < 0xFFFFFFFFuLL)
      {
        if (v75 >= 0xFFFFFFFF)
        {
          unint64_t v77 = v74[1];
          *uint64_t v73 = v75;
          v73[1] = v77;
          swift_retain();
          goto LABEL_65;
        }
      }
      else
      {
        if (v75 >= 0xFFFFFFFF)
        {
          unint64_t v76 = v74[1];
          *uint64_t v73 = v75;
          v73[1] = v76;
          swift_retain();
          swift_release();
LABEL_65:
          uint64_t v22 = v225;
          goto LABEL_66;
        }
        swift_release();
      }
      *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
      goto LABEL_65;
    }
    goto LABEL_13;
  }
  size_t v23 = v43;
  uint64_t v22 = (v17 + 89) & ~v17;
  if (v46 > 1) {
    goto LABEL_27;
  }
LABEL_24:
  size_t v212 = v23;
  int v215 = v20;
  uint64_t v226 = v22;
  uint64_t v50 = *v232;
  unint64_t v51 = v232[1];
  uint64_t v52 = v232[2];
  uint64_t v53 = v232[3];
  uint64_t v54 = v232[4];
  uint64_t v55 = v232[5];
  uint64_t v56 = v232[6];
  sub_228B175AC(*v232, v51);
  *uint64_t v19 = v50;
  v19[1] = v51;
  void v19[2] = v52;
  v19[3] = v53;
  v19[4] = v54;
  v19[5] = v55;
  v19[6] = v56;
  unint64_t v57 = ((unint64_t)v19 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v58 = ((unint64_t)v232 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v57 = *(void *)v58;
  *(unsigned char *)(v57 + 8) = *(unsigned char *)(v58 + 8);
  if (*(void *)(v217 + 8) < 0xFFFFFFFFuLL)
  {
    long long v60 = *(_OWORD *)v217;
    unint64_t v59 = ((unint64_t)v19 + 79) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)(v219 + 16) = *(unsigned char *)(v217 + 16);
    *(_OWORD *)unint64_t v219 = v60;
  }
  else
  {
    unint64_t v59 = ((unint64_t)v19 + 79) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v219 = *(void *)v217;
    *(void *)(v219 + 8) = *(void *)(v217 + 8);
    *(unsigned char *)(v219 + 16) = *(unsigned char *)(v217 + 16);
    swift_retain();
    swift_retain();
  }
  unint64_t v61 = (void *)((v17 + 17 + v59) & v223);
  unint64_t v62 = (const void *)((v17 + 17 + v217) & v223);
  uint64_t v22 = v226;
  size_t v48 = v212;
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v230 + 48))(v62, 1, v228))
  {
    if (!v215) {
      size_t v48 = v212 + 1;
    }
    memcpy(v61, v62, v48);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v230 + 16))(v61, v62, v228);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v230 + 56))(v61, 0, 1, v228);
    if (!v215) {
      size_t v48 = v212 + 1;
    }
  }
  unint64_t v63 = ((unint64_t)v61 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v64 = ((unint64_t)v62 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v64 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v63 = *(_OWORD *)v64;
  }
  else
  {
    uint64_t v65 = *(void *)(v64 + 8);
    *(void *)unint64_t v63 = *(void *)v64;
    *(void *)(v63 + 8) = v65;
    swift_retain();
  }
LABEL_66:
  unint64_t v78 = ((v22 + v48 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  unsigned int v79 = (char *)v19 + v78;
  int v80 = (char *)v232 + v78;
  *(void *)unsigned int v79 = *(uint64_t *)((char *)v232 + v78);
  v79[8] = *((unsigned char *)v232 + v78 + 8);
  unint64_t v81 = (uint64_t *)((char *)v19 + v78 + 16);
  uint64_t v82 = (uint64_t *)((char *)v232 + v78 + 16);
  unint64_t v83 = *(uint64_t *)((char *)v19 + v78 + 24);
  unint64_t v84 = *(uint64_t *)((char *)v232 + v78 + 24);
  if (v83 < 0xFFFFFFFF)
  {
    if (v84 >= 0xFFFFFFFF)
    {
      *unint64_t v81 = *v82;
      v81[1] = *((void *)v80 + 3);
      v81[2] = *((void *)v80 + 4);
      swift_retain();
      swift_retain();
      goto LABEL_73;
    }
  }
  else
  {
    if (v84 >= 0xFFFFFFFF)
    {
      *unint64_t v81 = *v82;
      swift_retain();
      swift_release();
      v81[1] = *((void *)v80 + 3);
      swift_retain();
      swift_release();
      v81[2] = *((void *)v80 + 4);
      goto LABEL_73;
    }
    swift_release();
    swift_release();
  }
  long long v85 = *(_OWORD *)v82;
  v81[2] = *((void *)v80 + 4);
  *(_OWORD *)unint64_t v81 = v85;
LABEL_73:
  uint64_t v86 = sub_228BAC9C8();
  uint64_t v229 = *(void *)(v86 - 8);
  uint64_t v87 = *(unsigned __int8 *)(v229 + 80);
  uint64_t v88 = v87 | 7;
  unsigned int v89 = &v80[v87 | 7];
  unsigned int v90 = (unsigned __int8 *)((unint64_t)&v79[(v87 | 7) + 40] & ~(v87 | 7));
  uint64_t v91 = (unsigned __int8 *)((unint64_t)(v89 + 40) & ~(v87 | 7));
  unint64_t v92 = *(void *)(v229 + 64);
  if (v92 <= 8) {
    uint64_t v93 = 8;
  }
  else {
    uint64_t v93 = *(void *)(*(void *)(v86 - 8) + 64);
  }
  if (v90 != v91)
  {
    unsigned int v94 = v90[v93];
    unsigned int v95 = v94 - 2;
    if (v94 >= 2)
    {
      if (v93 <= 3) {
        uint64_t v96 = v93;
      }
      else {
        uint64_t v96 = 4;
      }
      switch(v96)
      {
        case 1:
          int v97 = *v90;
          if (v93 >= 4) {
            goto LABEL_91;
          }
          goto LABEL_85;
        case 2:
          int v97 = *(unsigned __int16 *)v90;
          if (v93 < 4) {
            goto LABEL_85;
          }
          goto LABEL_91;
        case 3:
          int v97 = *(unsigned __int16 *)v90 | (v90[2] << 16);
          if (v93 < 4) {
            goto LABEL_85;
          }
          goto LABEL_91;
        case 4:
          int v97 = *(_DWORD *)v90;
          if (v93 < 4)
          {
LABEL_85:
            unsigned int v94 = (v97 | (v95 << (8 * v93))) + 2;
            break;
          }
LABEL_91:
          if (v97 != -1) {
            goto LABEL_92;
          }
          goto LABEL_87;
        default:
          break;
      }
    }
    if (v94 == 1) {
LABEL_87:
    }
      (*(void (**)(unint64_t, uint64_t))(v229 + 8))((unint64_t)&v79[(v87 | 7) + 40] & ~(v87 | 7), v86);
    else {
LABEL_92:
    }
      swift_release();
    unsigned int v98 = v91[v93];
    unsigned int v99 = v98 - 2;
    if (v98 >= 2)
    {
      if (v93 <= 3) {
        uint64_t v100 = v93;
      }
      else {
        uint64_t v100 = 4;
      }
      switch(v100)
      {
        case 1:
          int v101 = *v91;
          if (v93 >= 4) {
            goto LABEL_107;
          }
          goto LABEL_101;
        case 2:
          int v101 = *(unsigned __int16 *)v91;
          if (v93 < 4) {
            goto LABEL_101;
          }
          goto LABEL_107;
        case 3:
          int v101 = *(unsigned __int16 *)v91 | (v91[2] << 16);
          if (v93 < 4) {
            goto LABEL_101;
          }
          goto LABEL_107;
        case 4:
          int v101 = *(_DWORD *)v91;
          if (v93 < 4)
          {
LABEL_101:
            unsigned int v98 = (v101 | (v99 << (8 * v93))) + 2;
            break;
          }
LABEL_107:
          if (v101 != -1) {
            goto LABEL_108;
          }
          goto LABEL_103;
        default:
          break;
      }
    }
    if (v98 == 1)
    {
LABEL_103:
      (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v229 + 16))((unint64_t)&v79[(v87 | 7) + 40] & ~(v87 | 7), v91, v86);
      v90[v93] = 1;
    }
    else
    {
LABEL_108:
      *(void *)unsigned int v90 = *(void *)v91;
      v90[v93] = 0;
      swift_retain();
    }
  }
  uint64_t v102 = sub_228BAC588();
  uint64_t v231 = v102;
  uint64_t v233 = *(void *)(v102 - 8);
  uint64_t v103 = *(unsigned __int8 *)(v233 + 80);
  uint64_t v104 = v93 + (v103 | 7) + 1;
  uint64_t v105 = (unint64_t)&v90[v104] & ~(v103 | 7);
  uint64_t v106 = (unint64_t)&v91[v104] & ~(v103 | 7);
  unint64_t v107 = *(void *)(v233 + 64);
  if (v107 <= 8) {
    uint64_t v108 = 8;
  }
  else {
    uint64_t v108 = *(void *)(*(void *)(v102 - 8) + 64);
  }
  if (v105 != v106)
  {
    unsigned int v109 = *(unsigned __int8 *)(v105 + v108);
    unsigned int v110 = v109 - 2;
    if (v109 >= 2)
    {
      if (v108 <= 3) {
        uint64_t v111 = v108;
      }
      else {
        uint64_t v111 = 4;
      }
      switch(v111)
      {
        case 1:
          int v112 = *(unsigned __int8 *)v105;
          if (v108 >= 4) {
            goto LABEL_127;
          }
          goto LABEL_121;
        case 2:
          int v112 = *(unsigned __int16 *)v105;
          if (v108 < 4) {
            goto LABEL_121;
          }
          goto LABEL_127;
        case 3:
          int v112 = *(unsigned __int16 *)v105 | (*(unsigned __int8 *)(v105 + 2) << 16);
          if (v108 < 4) {
            goto LABEL_121;
          }
          goto LABEL_127;
        case 4:
          int v112 = *(_DWORD *)v105;
          if (v108 < 4)
          {
LABEL_121:
            unsigned int v109 = (v112 | (v110 << (8 * v108))) + 2;
            break;
          }
LABEL_127:
          if (v112 != -1) {
            goto LABEL_128;
          }
          goto LABEL_123;
        default:
          break;
      }
    }
    if (v109 == 1) {
LABEL_123:
    }
      (*(void (**)(uint64_t, uint64_t))(v233 + 8))(v105, v102);
    else {
LABEL_128:
    }
      swift_release();
    unsigned int v113 = *(unsigned __int8 *)(v106 + v108);
    unsigned int v114 = v113 - 2;
    if (v113 >= 2)
    {
      if (v108 <= 3) {
        uint64_t v115 = v108;
      }
      else {
        uint64_t v115 = 4;
      }
      switch(v115)
      {
        case 1:
          int v116 = *(unsigned __int8 *)v106;
          if (v108 >= 4) {
            goto LABEL_143;
          }
          goto LABEL_137;
        case 2:
          int v116 = *(unsigned __int16 *)v106;
          if (v108 < 4) {
            goto LABEL_137;
          }
          goto LABEL_143;
        case 3:
          int v116 = *(unsigned __int16 *)v106 | (*(unsigned __int8 *)(v106 + 2) << 16);
          if (v108 < 4) {
            goto LABEL_137;
          }
          goto LABEL_143;
        case 4:
          int v116 = *(_DWORD *)v106;
          if (v108 < 4)
          {
LABEL_137:
            unsigned int v113 = (v116 | (v114 << (8 * v108))) + 2;
            break;
          }
LABEL_143:
          if (v116 != -1) {
            goto LABEL_144;
          }
          goto LABEL_139;
        default:
          break;
      }
    }
    if (v113 == 1)
    {
LABEL_139:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v233 + 16))(v105, v106, v231);
      *(unsigned char *)(v105 + v108) = 1;
    }
    else
    {
LABEL_144:
      *(void *)uint64_t v105 = *(void *)v106;
      *(unsigned char *)(v105 + v108) = 0;
      swift_retain();
    }
  }
  unint64_t v117 = ((v105 | 7) + v108 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v118 = ((v106 | 7) + v108 + 1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v119 = *(void *)v118;
  char v120 = *(unsigned char *)(v118 + 8);
  sub_228AD266C(*(void *)v118, v120);
  uint64_t v121 = *(void *)v117;
  char v122 = *(unsigned char *)(v117 + 8);
  *(void *)unint64_t v117 = v119;
  *(unsigned char *)(v117 + 8) = v120;
  sub_228AD25F8(v121, v122);
  uint64_t v123 = v88 | v103;
  uint64_t v124 = (v88 | v103) + 9;
  uint64_t v125 = ~(v88 | v103);
  unint64_t v126 = (v124 + v117) & v125;
  unint64_t v127 = (v124 + v118) & v125;
  if (v126 == v127)
  {
    uint64_t v139 = ~v103;
    uint64_t v140 = (v103 + 2) & ~v103;
    unint64_t v132 = ((((v92 + v103 + ((v87 + 2) & ~v87)) & ~v103) + v107 + 7) & 0xFFFFFFFFFFFFFFF8) + v103 + 8;
    unint64_t v141 = v132 & ~v103;
    uint64_t v142 = (v103 + 3) & ~v103;
    goto LABEL_260;
  }
  uint64_t v213 = v86;
  uint64_t v128 = *(unsigned int *)(v229 + 84);
  unsigned int v129 = *(_DWORD *)(v233 + 84);
  unsigned int v227 = v129;
  if (v128 > v129) {
    unsigned int v129 = *(_DWORD *)(v229 + 84);
  }
  if (v129 <= 0x7FFFFFFE) {
    int v130 = 2147483646;
  }
  else {
    int v130 = v129;
  }
  uint64_t v224 = v87 + 2;
  uint64_t v210 = v92 + v103;
  unint64_t __n = ((((v92 + v103 + ((v87 + 2) & ~v87)) & ~v103) + v107 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v201 = v103 + 3;
  uint64_t v131 = (v103 + 3) & ~v103;
  uint64_t v202 = v103 + 2;
  unint64_t v132 = __n + v103;
  unint64_t v133 = (__n + v103) & ~v103;
  unint64_t v207 = v107 + v131 + v123;
  unint64_t v209 = v127;
  size_t v198 = v107 + ((v103 + 2) & ~v103);
  if (v198 + ((__n + v103 + ((v207 + v133) & v125)) & ~v103) + 6 <= 8) {
    uint64_t v134 = 8;
  }
  else {
    uint64_t v134 = v198 + ((__n + v103 + ((v207 + v133) & v125)) & ~v103) + 6;
  }
  unsigned int v135 = *(unsigned __int8 *)(v126 + v134);
  unsigned int v136 = v135 - 2;
  if (v135 >= 2)
  {
    if (v134 <= 3) {
      uint64_t v137 = v134;
    }
    else {
      uint64_t v137 = 4;
    }
    switch(v137)
    {
      case 1:
        int v138 = *(unsigned __int8 *)v126;
        if (v134 < 4) {
          goto LABEL_163;
        }
        goto LABEL_167;
      case 2:
        int v138 = *(unsigned __int16 *)v126;
        if (v134 < 4) {
          goto LABEL_163;
        }
        goto LABEL_167;
      case 3:
        int v138 = *(unsigned __int16 *)v126 | (*(unsigned __int8 *)(v126 + 2) << 16);
        if (v134 < 4) {
          goto LABEL_163;
        }
        goto LABEL_167;
      case 4:
        int v138 = *(_DWORD *)v126;
        if (v134 < 4) {
LABEL_163:
        }
          unsigned int v135 = (v138 | (v136 << (8 * v134))) + 2;
        else {
LABEL_167:
        }
          unsigned int v135 = v138 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v139 = ~v103;
  uint64_t v143 = ~v87;
  uint64_t v216 = v143;
  uint64_t v218 = v125;
  int v220 = v130;
  uint64_t v205 = (v103 + 3) & ~v103;
  uint64_t v206 = (v103 + 2) & ~v103;
  uint64_t v203 = v134;
  unint64_t v204 = (__n + v103) & ~v103;
  size_t v197 = v107 + v131;
  if (v135 != 1)
  {
    swift_release();
    uint64_t v145 = v227;
    goto LABEL_206;
  }
  unint64_t v144 = (v224 + v126) & v143;
  if (v128 == v130)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v229 + 48))((v224 + v126) & v143, v128, v213))
    {
      goto LABEL_180;
    }
LABEL_175:
    unint64_t v146 = (v210 + v144) & v139;
LABEL_179:
    (*(void (**)(unint64_t, uint64_t))(v229 + 8))(v144, v213);
    (*(void (**)(unint64_t, uint64_t))(v233 + 8))(v146, v231);
    swift_release();
    goto LABEL_180;
  }
  unint64_t v146 = (v210 + v144) & v139;
  if (v227 == v130)
  {
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v233 + 48))((v210 + v144) & v139, v227, v231))
    {
      goto LABEL_180;
    }
    goto LABEL_175;
  }
  unint64_t v147 = *(void *)((v107 + v146 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v147 >= 0xFFFFFFFF) {
    LODWORD(v147) = -1;
  }
  if ((v147 + 1) < 2) {
    goto LABEL_179;
  }
LABEL_180:
  unint64_t v148 = (unsigned __int8 *)((v132 + v126) & v139);
  if (v227 > 0xFE)
  {
    uint64_t v151 = v216;
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v233 + 48))((unint64_t)&v148[v201] & v139, v227, v231))
    {
      goto LABEL_188;
    }
    goto LABEL_187;
  }
  unsigned int v149 = *v148;
  if (v149 >= 2) {
    int v150 = (v149 + 2147483646) & 0x7FFFFFFF;
  }
  else {
    int v150 = -1;
  }
  uint64_t v151 = v216;
  if (v150 == -1) {
LABEL_187:
  }
    (*(void (**)(unint64_t, uint64_t))(v233 + 8))((unint64_t)&v148[v201] & v139, v231);
LABEL_188:
  unint64_t v152 = (unint64_t)&v148[v207] & v218;
  unint64_t v153 = (v224 + v152) & v151;
  if (v128 == v220)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v229 + 48))((v224 + v152) & v151, v128, v213))
    {
      goto LABEL_198;
    }
LABEL_193:
    unint64_t v154 = (v210 + v153) & v139;
LABEL_197:
    (*(void (**)(unint64_t, uint64_t))(v229 + 8))(v153, v213);
    (*(void (**)(unint64_t, uint64_t))(v233 + 8))(v154, v231);
    swift_release();
    goto LABEL_198;
  }
  unint64_t v154 = (v210 + v153) & v139;
  if (v227 == v220)
  {
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v233 + 48))((v210 + v153) & v139, v227, v231))
    {
      goto LABEL_198;
    }
    goto LABEL_193;
  }
  unint64_t v155 = *(void *)((v107 + v154 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v155 >= 0xFFFFFFFF) {
    LODWORD(v155) = -1;
  }
  if ((v155 + 1) < 2) {
    goto LABEL_197;
  }
LABEL_198:
  unint64_t v156 = (unsigned __int8 *)((v132 + v152) & v139);
  uint64_t v145 = v227;
  if (v227 > 0xFE)
  {
    uint64_t v134 = v203;
    uint64_t v143 = v216;
    if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v233 + 48))((unint64_t)&v156[v202] & v139, v227, v231))
    {
      goto LABEL_206;
    }
    goto LABEL_205;
  }
  unsigned int v157 = *v156;
  if (v157 >= 2) {
    int v158 = (v157 + 2147483646) & 0x7FFFFFFF;
  }
  else {
    int v158 = -1;
  }
  uint64_t v134 = v203;
  uint64_t v143 = v216;
  if (v158 == -1) {
LABEL_205:
  }
    (*(void (**)(unint64_t, uint64_t))(v233 + 8))((unint64_t)&v156[v202] & v139, v231);
LABEL_206:
  unint64_t v127 = v209;
  unsigned int v159 = *(unsigned __int8 *)(v209 + v134);
  unsigned int v160 = v159 - 2;
  if (v159 < 2)
  {
    int v162 = v220;
    if (v159 != 1)
    {
LABEL_214:
      *(void *)unint64_t v126 = *(void *)v209;
      *(unsigned char *)(v126 + v134) = 0;
      swift_retain();
      uint64_t v125 = v218;
      uint64_t v142 = v205;
      uint64_t v140 = v206;
      unint64_t v141 = v204;
      goto LABEL_260;
    }
  }
  else
  {
    if (v134 <= 3) {
      uint64_t v161 = v134;
    }
    else {
      uint64_t v161 = 4;
    }
    int v162 = v220;
    switch(v161)
    {
      case 1:
        int v163 = *(unsigned __int8 *)v209;
        if (v134 < 4) {
          goto LABEL_216;
        }
        goto LABEL_255;
      case 2:
        int v163 = *(unsigned __int16 *)v209;
        if (v134 < 4) {
          goto LABEL_216;
        }
        goto LABEL_255;
      case 3:
        int v163 = *(unsigned __int16 *)v209 | (*(unsigned __int8 *)(v209 + 2) << 16);
        if (v134 < 4) {
          goto LABEL_216;
        }
        goto LABEL_255;
      case 4:
        int v163 = *(_DWORD *)v209;
        if (v134 >= 4)
        {
LABEL_255:
          if (v163 == -1) {
            break;
          }
          goto LABEL_214;
        }
LABEL_216:
        unsigned int v159 = (v163 | (v160 << (8 * v134))) + 2;
LABEL_217:
        if (v159 != 1) {
          goto LABEL_214;
        }
        break;
      default:
        goto LABEL_217;
    }
  }
  unint64_t v164 = (v224 + v209) & v143;
  unint64_t v199 = v132;
  if (v128 == v162)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v229 + 48))(v164, v128, v213)) {
      goto LABEL_223;
    }
  }
  else
  {
    unint64_t v165 = (v210 + v164) & v139;
    if (v145 == v162)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v233 + 48))((v210 + v164) & v139, v145, v231))
      {
LABEL_223:
        uint64_t v166 = v210;
        unint64_t v165 = (v210 + v164) & v139;
        unint64_t v167 = v107 + 7;
        uint64_t v196 = (void *)((v107 + 7 + v165) & 0xFFFFFFFFFFFFFFF8);
LABEL_228:
        *(unsigned char *)unint64_t v126 = *(unsigned char *)v209;
        *(unsigned char *)(v126 | 1) = *(unsigned char *)(v209 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v229 + 16))((v224 + v126) & v216, v164, v213);
        unint64_t v169 = (v166 + ((v224 + v126) & v216)) & v139;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v233 + 16))(v169, v165, v231);
        unint64_t v170 = v167 + v169;
        unint64_t v127 = v209;
        *(void *)(v170 & 0xFFFFFFFFFFFFFFF8) = *v196;
        swift_retain();
        goto LABEL_230;
      }
    }
    else
    {
      unint64_t v167 = v107 + 7;
      unint64_t v168 = *(void *)((v107 + 7 + v165) & 0xFFFFFFFFFFFFFFF8);
      if (v168 >= 0xFFFFFFFF) {
        LODWORD(v168) = -1;
      }
      if ((v168 + 1) < 2)
      {
        uint64_t v166 = v210;
        uint64_t v196 = (void *)((v107 + 7 + v165) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_228;
      }
    }
  }
  memcpy((void *)v126, (const void *)v209, __n);
LABEL_230:
  uint64_t v171 = (unsigned char *)((v199 + v126) & v139);
  v172 = (unsigned char *)((v199 + v127) & v139);
  if (v227 > 0xFE)
  {
    if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v233 + 48))((unint64_t)&v172[v201] & v139, v227, v231))goto LABEL_232; {
  }
    }
  else if (*v172 < 2u)
  {
LABEL_232:
    *uint64_t v171 = *v172;
    *(unsigned char *)(((v199 + v126) & v139) + 1) = *(unsigned char *)(((v199 + v127) & v139) + 1);
    *(unsigned char *)(((v199 + v126) & v139) + 2) = *(unsigned char *)(((v199 + v127) & v139) + 2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v233 + 16))((unint64_t)&v171[v201] & v139, (unint64_t)&v172[v201] & v139, v231);
    goto LABEL_235;
  }
  memcpy(v171, v172, v197);
LABEL_235:
  unint64_t v173 = (unint64_t)&v171[v207] & v218;
  unint64_t v174 = (unint64_t)&v172[v207] & v218;
  unint64_t v175 = (v224 + v174) & v216;
  if (v128 == v220)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v229 + 48))((v224 + v174) & v216, v128, v213))goto LABEL_240; {
  }
    }
  else
  {
    unint64_t v176 = (v210 + v175) & v139;
    if (v227 == v220)
    {
      if (!(*(unsigned int (**)(unint64_t, void, uint64_t))(v233 + 48))((v210 + v175) & v139, v227, v231))
      {
LABEL_240:
        uint64_t v177 = v210;
        unint64_t v176 = (v210 + v175) & v139;
        unint64_t v221 = v107 + 7;
        uint64_t v208 = (void *)((v107 + 7 + v176) & 0xFFFFFFFFFFFFFFF8);
LABEL_245:
        *(unsigned char *)unint64_t v173 = *(unsigned char *)v174;
        *(unsigned char *)(v173 | 1) = *(unsigned char *)(v174 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v229 + 16))((v224 + v173) & v216, v175, v213);
        unint64_t v179 = (v177 + ((v224 + v173) & v216)) & v139;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v233 + 16))(v179, v176, v231);
        *(void *)((v221 + v179) & 0xFFFFFFFFFFFFFFF8) = *v208;
        swift_retain();
        unint64_t v127 = v209;
        goto LABEL_247;
      }
    }
    else
    {
      unint64_t v178 = *(void *)((v107 + 7 + v176) & 0xFFFFFFFFFFFFFFF8);
      if (v178 >= 0xFFFFFFFF) {
        LODWORD(v178) = -1;
      }
      if ((v178 + 1) < 2)
      {
        uint64_t v177 = v210;
        unint64_t v221 = v107 + 7;
        uint64_t v208 = (void *)((v107 + 7 + v176) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_245;
      }
    }
  }
  memcpy((void *)v173, (const void *)v174, __n);
LABEL_247:
  unint64_t v180 = v199 + v173;
  unint64_t v132 = v199;
  v181 = (unsigned char *)(v180 & v139);
  uint64_t v182 = (unsigned __int8 *)((v199 + v174) & v139);
  if (v227 > 0xFE)
  {
    unint64_t v184 = (unint64_t)&v182[v202] & v139;
    if (!(*(unsigned int (**)(unint64_t))(v233 + 48))(v184))
    {
      LOBYTE(v183) = *v182;
      goto LABEL_258;
    }
  }
  else
  {
    unsigned int v183 = *v182;
    if (v183 <= 1)
    {
      unint64_t v184 = (unint64_t)&v182[v202] & v139;
LABEL_258:
      unsigned char *v181 = v183;
      v181[1] = v182[1];
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v233 + 16))((unint64_t)&v181[v202] & v139, v184, v231);
      uint64_t v125 = v218;
      uint64_t v142 = v205;
      uint64_t v140 = v206;
      unint64_t v141 = v204;
      size_t v185 = v198;
      goto LABEL_259;
    }
  }
  size_t v185 = v198;
  memcpy(v181, v182, v198);
  uint64_t v125 = v218;
  uint64_t v142 = v205;
  uint64_t v140 = v206;
  unint64_t v141 = v204;
LABEL_259:
  uint64_t v186 = &v181[v185];
  *uint64_t v186 = *(_WORD *)&v182[v185];
  v186[1] = *(_WORD *)&v182[v185 + 2];
  v186[2] = *(_WORD *)&v182[v185 + 4];
  *(unsigned char *)(v126 + v203) = 1;
LABEL_260:
  unint64_t v187 = v140 + v107 + ((v132 + ((v142 + v107 + v123 + v141) & v125)) & v139) + 6;
  if (v187 <= 8) {
    unint64_t v187 = 8;
  }
  unint64_t v188 = v187 + 1;
  unint64_t v189 = ((v126 | 7) + v188) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v190 = ((v127 | 7) + v188) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v191 = *(void *)v190;
  char v192 = *(unsigned char *)(v190 + 8);
  sub_228AD266C(*(void *)v190, v192);
  uint64_t v193 = *(void *)v189;
  char v194 = *(unsigned char *)(v189 + 8);
  *(void *)unint64_t v189 = v191;
  *(unsigned char *)(v189 + 8) = v192;
  sub_228AD25F8(v193, v194);
  return v222;
}

uint64_t sub_228B62ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 | 7) + 56;
  uint64_t v8 = (_OWORD *)((v7 + a1) & ~(v6 | 7));
  uint64_t v9 = (long long *)((v7 + a2) & ~(v6 | 7));
  uint64_t v10 = *(unsigned int *)(v5 + 84);
  uint64_t v11 = ~v6;
  uint64_t v12 = (v6 + 89) & ~v6;
  size_t v13 = *(void *)(v5 + 64);
  unint64_t v14 = ((unint64_t)v9 + 79) & 0xFFFFFFFFFFFFFFF8;
  if ((v10 & 0x80000000) == 0)
  {
    unint64_t v15 = *(void *)(v14 + 8);
    if (v15 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    if ((v15 + 1) < 2) {
      goto LABEL_5;
    }
LABEL_11:
    if (v10) {
      size_t v26 = v13;
    }
    else {
      size_t v26 = v13 + 1;
    }
    memcpy(v8, v9, ((v26 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    goto LABEL_21;
  }
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((v6 + v14 + 17) & v11, v10, v4) > 1) {
    goto LABEL_11;
  }
LABEL_5:
  long long v16 = *v9;
  long long v17 = v9[1];
  long long v18 = v9[2];
  *((void *)v8 + 6) = *((void *)v9 + 6);
  v8[1] = v17;
  v8[2] = v18;
  *uint64_t v8 = v16;
  unint64_t v19 = ((unint64_t)v8 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v9 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  unint64_t v21 = ((unint64_t)v8 + 79) & 0xFFFFFFFFFFFFFFF8;
  long long v22 = *(_OWORD *)v14;
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v14 + 16);
  *(_OWORD *)unint64_t v21 = v22;
  uint64_t v23 = v6 + 17;
  unint64_t v24 = (void *)((v6 + 17 + v21) & v11);
  unint64_t v25 = (const void *)((v23 + v14) & v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v25, 1, v4))
  {
    if (v10) {
      size_t v26 = v13;
    }
    else {
      size_t v26 = v13 + 1;
    }
    memcpy(v24, v25, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v24, v25, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v24, 0, 1, v4);
    if (v10) {
      size_t v26 = v13;
    }
    else {
      size_t v26 = v13 + 1;
    }
  }
  unint64_t v27 = ((unint64_t)v24 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v28 = (uint64_t *)(((unint64_t)v25 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = *v28;
  if ((unint64_t)*v28 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v27 = *(_OWORD *)v28;
  }
  else
  {
    uint64_t v30 = v28[1];
    *(void *)unint64_t v27 = v29;
    *(void *)(v27 + 8) = v30;
  }
LABEL_21:
  unint64_t v31 = ((v12 + v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v32 = (char *)v8 + v31;
  uint64_t v33 = (char *)v9 + v31;
  *(void *)uint64_t v32 = *(void *)((char *)v9 + v31);
  v32[8] = *((unsigned char *)v9 + v31 + 8);
  long long v34 = *(long long *)((char *)v9 + v31 + 16);
  *((void *)v32 + 4) = *(void *)((char *)v9 + v31 + 32);
  *((_OWORD *)v32 + 1) = v34;
  uint64_t v135 = sub_228BAC9C8();
  uint64_t v35 = *(void *)(v135 - 8);
  uint64_t v36 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v37 = v36 | 7;
  unint64_t v38 = (void *)((unint64_t)&v32[(v36 | 7) + 40] & ~(v36 | 7));
  unint64_t v39 = (unsigned __int8 *)((unint64_t)&v33[(v36 | 7) + 40] & ~(v36 | 7));
  if (*(void *)(v35 + 64) <= 8uLL) {
    uint64_t v40 = 8;
  }
  else {
    uint64_t v40 = *(void *)(*(void *)(v135 - 8) + 64);
  }
  unsigned int v41 = v39[v40];
  unsigned int v42 = v41 - 2;
  if (v41 >= 2)
  {
    if (v40 <= 3) {
      uint64_t v43 = v40;
    }
    else {
      uint64_t v43 = 4;
    }
    switch(v43)
    {
      case 1:
        int v44 = *v39;
        if (v40 < 4) {
          goto LABEL_34;
        }
        goto LABEL_36;
      case 2:
        int v44 = *(unsigned __int16 *)v39;
        if (v40 >= 4) {
          goto LABEL_36;
        }
        goto LABEL_34;
      case 3:
        int v44 = *(unsigned __int16 *)v39 | (v39[2] << 16);
        if (v40 < 4) {
          goto LABEL_34;
        }
        goto LABEL_36;
      case 4:
        int v44 = *(_DWORD *)v39;
        if (v40 < 4) {
LABEL_34:
        }
          unsigned int v41 = (v44 | (v42 << (8 * v40))) + 2;
        else {
LABEL_36:
        }
          unsigned int v41 = v44 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v136 = *(void *)(*(void *)(v135 - 8) + 64);
  if (v41 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v35 + 32))(v38, v39, v135);
    char v45 = 1;
  }
  else
  {
    char v45 = 0;
    *unint64_t v38 = *(void *)v39;
  }
  *((unsigned char *)v38 + v40) = v45;
  uint64_t v138 = sub_228BAC588();
  uint64_t v46 = *(void *)(v138 - 8);
  uint64_t v47 = *(unsigned __int8 *)(v46 + 80);
  uint64_t v48 = v40 + 1 + (v47 | 7);
  uint64_t v49 = (void *)(((unint64_t)v38 + v48) & ~(v47 | 7));
  uint64_t v50 = (unsigned __int8 *)((unint64_t)&v39[v48] & ~(v47 | 7));
  unint64_t v51 = *(void *)(v46 + 64);
  if (v51 <= 8) {
    uint64_t v52 = 8;
  }
  else {
    uint64_t v52 = *(void *)(*(void *)(v138 - 8) + 64);
  }
  unsigned int v53 = v50[v52];
  unsigned int v54 = v53 - 2;
  if (v53 >= 2)
  {
    if (v52 <= 3) {
      uint64_t v55 = v52;
    }
    else {
      uint64_t v55 = 4;
    }
    switch(v55)
    {
      case 1:
        int v56 = *v50;
        if (v52 >= 4) {
          goto LABEL_57;
        }
        goto LABEL_53;
      case 2:
        int v56 = *(unsigned __int16 *)v50;
        if (v52 >= 4) {
          goto LABEL_57;
        }
        goto LABEL_53;
      case 3:
        int v56 = *(unsigned __int16 *)v50 | (v50[2] << 16);
        if (v52 < 4) {
          goto LABEL_53;
        }
        goto LABEL_57;
      case 4:
        int v56 = *(_DWORD *)v50;
        if (v52 < 4)
        {
LABEL_53:
          unsigned int v53 = (v56 | (v54 << (8 * v52))) + 2;
          break;
        }
LABEL_57:
        if (v56 != -1) {
          goto LABEL_58;
        }
        goto LABEL_55;
      default:
        break;
    }
  }
  if (v53 == 1)
  {
LABEL_55:
    uint64_t v57 = *(void *)(v138 - 8);
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v46 + 32))(v49, v50, v138);
    uint64_t v46 = v57;
    char v58 = 1;
  }
  else
  {
LABEL_58:
    char v58 = 0;
    *uint64_t v49 = *(void *)v50;
  }
  *((unsigned char *)v49 + v52) = v58;
  unint64_t v59 = ((unint64_t)v49 + v52 + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = (unint64_t)&v50[v52 + 8] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v61 = *(void *)v60;
  *(unsigned char *)(v59 + 8) = *(unsigned char *)(v60 + 8);
  *(void *)unint64_t v59 = v61;
  uint64_t v62 = v37 | v47;
  uint64_t v63 = (v37 | v47) + 9;
  unint64_t v64 = (v63 + v59) & ~(v37 | v47);
  unint64_t v65 = (v63 + v60) & ~(v37 | v47);
  uint64_t v131 = v35;
  uint64_t v66 = *(unsigned int *)(v35 + 84);
  uint64_t v67 = *(unsigned int *)(v46 + 84);
  if (v66 <= v67) {
    unsigned int v68 = *(_DWORD *)(v46 + 84);
  }
  else {
    unsigned int v68 = v66;
  }
  if (v68 <= 0x7FFFFFFE) {
    int v69 = 2147483646;
  }
  else {
    int v69 = v68;
  }
  uint64_t v70 = v36 + 2;
  unint64_t v71 = v51 + 7;
  unint64_t v72 = ((v51 + 7 + ((((v36 + 2) & ~v36) + v136 + v47) & ~v47)) & 0xFFFFFFFFFFFFFFF8) + 8;
  size_t v73 = ((v47 + 3) & ~v47) + v51;
  size_t v74 = ((v47 + 2) & ~v47) + v51;
  uint64_t v75 = v72 + v47;
  if (v74 + ((v72 + v47 + ((v73 + v62 + ((v72 + v47) & ~v47)) & ~v62)) & ~v47) + 6 <= 8) {
    uint64_t v76 = 8;
  }
  else {
    uint64_t v76 = v74 + ((v72 + v47 + ((v73 + v62 + ((v72 + v47) & ~v47)) & ~v62)) & ~v47) + 6;
  }
  unsigned int v77 = *(unsigned __int8 *)(v65 + v76);
  unsigned int v78 = v77 - 2;
  if (v77 >= 2)
  {
    if (v76 <= 3) {
      uint64_t v79 = v76;
    }
    else {
      uint64_t v79 = 4;
    }
    switch(v79)
    {
      case 1:
        int v80 = *(unsigned __int8 *)v65;
        goto LABEL_77;
      case 2:
        int v80 = *(unsigned __int16 *)v65;
        goto LABEL_77;
      case 3:
        int v80 = *(unsigned __int16 *)v65 | (*(unsigned __int8 *)(v65 + 2) << 16);
        goto LABEL_77;
      case 4:
        int v80 = *(_DWORD *)v65;
LABEL_77:
        int v81 = (v80 | (v78 << (8 * v76))) + 2;
        unsigned int v77 = v80 + 2;
        if (v76 < 4) {
          unsigned int v77 = v81;
        }
        break;
      default:
        break;
    }
  }
  if (v77 == 1)
  {
    size_t v120 = v73;
    uint64_t v122 = v47 + 3;
    size_t v124 = v74;
    size_t v125 = v73 + v62;
    unint64_t v129 = v71;
    unint64_t __dst = v64;
    uint64_t v82 = ~v47;
    uint64_t v128 = ~v36;
    unint64_t v83 = (v70 + v65) & ~v36;
    uint64_t v134 = (unsigned __int8 *)v65;
    size_t __n = v72;
    uint64_t v127 = v36 + 2;
    int v123 = v69;
    uint64_t v132 = v46;
    uint64_t v121 = v47 + 2;
    if (v66 == v69)
    {
      unint64_t v119 = (v70 + v65) & ~v36;
      int v84 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v131 + 48))(v83, v66, v135);
    }
    else
    {
      uint64_t v87 = v136 + v47;
      unint64_t v88 = (v136 + v47 + v83) & v82;
      if (v67 != v69)
      {
        unint64_t v89 = *(void *)((v71 + v88) & 0xFFFFFFFFFFFFFFF8);
        if (v89 >= 0xFFFFFFFF) {
          LODWORD(v89) = -1;
        }
        if ((v89 + 1) < 2)
        {
          unint64_t v117 = (v136 + v47 + v83) & v82;
          unint64_t v118 = (void *)((v71 + v88) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_91;
        }
LABEL_92:
        unint64_t v90 = __dst;
        memcpy((void *)__dst, v134, __n);
        unint64_t v92 = v134;
LABEL_93:
        uint64_t v93 = ~v62;
        unsigned int v94 = (unsigned char *)((v75 + v90) & v82);
        unsigned int v95 = (unsigned __int8 *)((unint64_t)&v92[v75] & v82);
        if (v67 > 0xFE)
        {
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v132 + 48))((unint64_t)&v95[v122] & v82, v67, v138))goto LABEL_95; {
        }
          }
        else if (*v95 < 2u)
        {
LABEL_95:
          unsigned char *v94 = *v95;
          v94[1] = v95[1];
          v94[2] = v95[2];
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v132 + 32))((unint64_t)&v94[v122] & v82, (unint64_t)&v95[v122] & v82, v138);
          goto LABEL_98;
        }
        memcpy(v94, v95, v120);
LABEL_98:
        unint64_t v96 = (unint64_t)&v94[v125] & v93;
        unint64_t v97 = (unint64_t)&v95[v125] & v93;
        unint64_t v98 = (v127 + v97) & v128;
        if (v66 == v123)
        {
          uint64_t v99 = v136;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v131 + 48))((v127 + v97) & v128, v66, v135))goto LABEL_103; {
        }
          }
        else
        {
          uint64_t v99 = v136;
          uint64_t v100 = v136 + v47;
          unint64_t v101 = (v136 + v47 + v98) & v82;
          if (v67 == v123)
          {
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v132 + 48))(v101, v67, v138))
            {
LABEL_103:
              uint64_t v100 = v99 + v47;
              unint64_t v102 = (v99 + v47 + v98) & v82;
              uint64_t v137 = (void *)((v129 + v102) & 0xFFFFFFFFFFFFFFF8);
LABEL_108:
              *(unsigned char *)unint64_t v96 = *(unsigned char *)v97;
              *(unsigned char *)(v96 | 1) = *(unsigned char *)(v97 | 1);
              unint64_t v104 = (v127 + v96) & v128;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v131 + 32))(v104, v98, v135);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v132 + 32))((v100 + v104) & v82, v102, v138);
              *(void *)((v129 + ((v100 + v104) & v82)) & 0xFFFFFFFFFFFFFFF8) = *v137;
              goto LABEL_110;
            }
          }
          else
          {
            unint64_t v103 = *(void *)((v129 + v101) & 0xFFFFFFFFFFFFFFF8);
            if (v103 >= 0xFFFFFFFF) {
              LODWORD(v103) = -1;
            }
            if ((v103 + 1) < 2)
            {
              unint64_t v102 = (v136 + v47 + v98) & v82;
              uint64_t v137 = (void *)((v129 + v101) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_108;
            }
          }
        }
        memcpy((void *)v96, (const void *)v97, __n);
LABEL_110:
        uint64_t v105 = (unsigned char *)((v75 + v96) & v82);
        uint64_t v106 = (unsigned __int8 *)((v75 + v97) & v82);
        if (v67 > 0xFE)
        {
          unint64_t v109 = (unint64_t)&v106[v121] & v82;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v132 + 48))(v109, v67, v138))
          {
            LOBYTE(v107) = *v106;
            uint64_t v86 = a1;
            uint64_t v108 = v121;
            goto LABEL_116;
          }
        }
        else
        {
          unsigned int v107 = *v106;
          if (v107 <= 1)
          {
            uint64_t v108 = v121;
            unint64_t v109 = (unint64_t)&v106[v121] & v82;
            uint64_t v86 = a1;
LABEL_116:
            *uint64_t v105 = v107;
            v105[1] = v106[1];
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v132 + 32))((unint64_t)&v105[v108] & v82, v109, v138);
            unint64_t v65 = (unint64_t)v134;
            size_t v111 = v124;
            goto LABEL_117;
          }
        }
        unsigned int v110 = (void *)((v75 + v96) & v82);
        size_t v111 = v124;
        memcpy(v110, v106, v124);
        uint64_t v86 = a1;
        unint64_t v65 = (unint64_t)v134;
LABEL_117:
        int v112 = &v105[v111];
        *int v112 = *(_WORD *)&v106[v111];
        v112[1] = *(_WORD *)&v106[v111 + 2];
        v112[2] = *(_WORD *)&v106[v111 + 4];
        char v85 = 1;
        unint64_t v64 = __dst;
        goto LABEL_118;
      }
      unint64_t v119 = v83;
      int v84 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v46 + 48))((v136 + v47 + v83) & v82, v67, v138);
    }
    unint64_t v65 = (unint64_t)v134;
    if (!v84)
    {
      uint64_t v87 = v136 + v47;
      unint64_t v117 = (v136 + v47 + v119) & v82;
      unint64_t v118 = (void *)((v129 + v117) & 0xFFFFFFFFFFFFFFF8);
LABEL_91:
      unint64_t v90 = __dst;
      *(unsigned char *)unint64_t __dst = *(unsigned char *)v65;
      *(unsigned char *)(__dst | 1) = *(unsigned char *)(v65 | 1);
      (*(void (**)(unint64_t))(v131 + 32))((v127 + __dst) & v128);
      unint64_t v91 = (v87 + ((v127 + __dst) & v128)) & v82;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v132 + 32))(v91, v117, v138);
      unint64_t v92 = v134;
      *(void *)((v129 + v91) & 0xFFFFFFFFFFFFFFF8) = *v118;
      goto LABEL_93;
    }
    goto LABEL_92;
  }
  char v85 = 0;
  *(void *)unint64_t v64 = *(void *)v65;
  uint64_t v86 = a1;
LABEL_118:
  *(unsigned char *)(v64 + v76) = v85;
  unint64_t v113 = ((v65 | 7) + v76 + 1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v114 = *(void *)v113;
  unint64_t v115 = ((v64 | 7) + v76 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v115 + 8) = *(unsigned char *)(v113 + 8);
  *(void *)unint64_t v115 = v114;
  return v86;
}

uint64_t sub_228B63690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v6;
  sub_228B17624(v7, v8);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (v12 | 7) + 56;
  uint64_t v203 = a1;
  uint64_t v14 = (v13 + a1) & ~(v12 | 7);
  uint64_t v15 = v13 + a2;
  long long v16 = (_OWORD *)(v15 & ~(v12 | 7));
  uint64_t v17 = *(unsigned int *)(v11 + 84);
  uint64_t v18 = ~v12;
  uint64_t v19 = (v12 + 89) & ~v12;
  size_t v20 = *(void *)(v11 + 64);
  unint64_t v21 = (v14 + 79) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v212 = v11;
  uint64_t v214 = v10;
  if ((v17 & 0x80000000) == 0)
  {
    unint64_t v22 = *(void *)(v21 + 8);
    if (v22 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    unsigned int v23 = v22 + 1;
    unint64_t v24 = ((unint64_t)v16 + 79) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = *(void *)(v24 + 8);
    if (v25 >= 0xFFFFFFFF) {
      LODWORD(v25) = -1;
    }
    unsigned int v26 = v25 + 1;
    if (v23 < 2)
    {
      if (v26 < 2) {
        goto LABEL_8;
      }
LABEL_13:
      sub_228B17624(*(void *)v14, *(void *)(v14 + 8));
      if (*(void *)(v21 + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      uint64_t v41 = (v12 + v21 + 17) & v18;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v212 + 48))(v41, 1, v10)) {
        (*(void (**)(uint64_t, uint64_t))(v212 + 8))(v41, v10);
      }
      if (v17) {
        size_t v42 = v20;
      }
      else {
        size_t v42 = v20 + 1;
      }
      if (*(void *)((v42 + 7 + v41) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL) {
        swift_release();
      }
      uint64_t v43 = v42 + 7 + v19;
      goto LABEL_34;
    }
    if (v26 < 2) {
      goto LABEL_24;
    }
LABEL_30:
    if (v17) {
      size_t v42 = v20;
    }
    else {
      size_t v42 = v20 + 1;
    }
    uint64_t v43 = v42 + v19 + 7;
LABEL_34:
    memcpy((void *)v14, v16, (v43 & 0xFFFFFFFFFFFFFFF8) + 16);
    goto LABEL_65;
  }
  uint64_t v207 = v14;
  size_t v210 = *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t v36 = v15 & ~(v12 | 7);
  uint64_t v37 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
  unsigned int v38 = v37((v12 + 17 + v21) & v18, v17, v10);
  unint64_t v39 = (_OWORD *)v36;
  unint64_t v24 = (v36 + 79) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v40 = v37((v12 + 17 + v24) & ~v12, v17, v10);
  if (v38 < 2)
  {
    long long v16 = v39;
    uint64_t v14 = v207;
    size_t v20 = v210;
    uint64_t v18 = ~v12;
    if (v40 <= 1)
    {
LABEL_8:
      size_t v209 = v20;
      uint64_t v27 = *((void *)v16 + 6);
      uint64_t v28 = *(void *)v14;
      unint64_t v29 = *(void *)(v14 + 8);
      long long v30 = v16[1];
      long long v31 = v16[2];
      *(_OWORD *)uint64_t v14 = *v16;
      *(_OWORD *)(v14 + 16) = v30;
      *(_OWORD *)(v14 + 32) = v31;
      *(void *)(v14 + 48) = v27;
      sub_228B17624(v28, v29);
      unint64_t v32 = (v14 + 63) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v33 = ((unint64_t)v16 + 63) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v32 = *(void *)v33;
      *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
      uint64_t v206 = v14;
      int v34 = v17;
      if (*(void *)(v21 + 8) < 0xFFFFFFFFuLL)
      {
        uint64_t v35 = (v12 + 89) & ~v12;
      }
      else
      {
        uint64_t v35 = (v12 + 89) & ~v12;
        if (*(void *)(v24 + 8) >= 0xFFFFFFFFuLL)
        {
          *(void *)unint64_t v21 = *(void *)v24;
          swift_release();
          *(void *)(v21 + 8) = *(void *)(v24 + 8);
          swift_release();
          *(unsigned char *)(v21 + 16) = *(unsigned char *)(v24 + 16);
          goto LABEL_45;
        }
        swift_release();
        swift_release();
      }
      long long v58 = *(_OWORD *)v24;
      *(unsigned char *)(v21 + 16) = *(unsigned char *)(v24 + 16);
      *(_OWORD *)unint64_t v21 = v58;
LABEL_45:
      uint64_t v59 = v18;
      unint64_t v60 = (void *)((v12 + 17 + v21) & v18);
      uint64_t v61 = (void *)((v12 + 17 + v24) & v59);
      uint64_t v62 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v212 + 48);
      int v63 = v62(v60, 1, v10);
      int v64 = v62(v61, 1, v10);
      uint64_t v65 = v35;
      if (v63)
      {
        if (!v64)
        {
          (*(void (**)(void *, void *, uint64_t))(v212 + 32))(v60, v61, v10);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v212 + 56))(v60, 0, 1, v10);
          size_t v66 = v209;
          goto LABEL_54;
        }
      }
      else
      {
        if (!v64)
        {
          (*(void (**)(void *, void *, uint64_t))(v212 + 40))(v60, v61, v10);
          size_t v66 = v209;
          goto LABEL_54;
        }
        (*(void (**)(void *, uint64_t))(v212 + 8))(v60, v10);
      }
      size_t v66 = v209;
      if (v34) {
        size_t v67 = v209;
      }
      else {
        size_t v67 = v209 + 1;
      }
      memcpy(v60, v61, v67);
LABEL_54:
      if (v34) {
        size_t v42 = v66;
      }
      else {
        size_t v42 = v66 + 1;
      }
      unsigned int v68 = (void *)(((unint64_t)v60 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      int v69 = (unint64_t *)(((unint64_t)v61 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v70 = *v69;
      if (*v68 < 0xFFFFFFFFuLL)
      {
        uint64_t v14 = v206;
        if (v70 >= 0xFFFFFFFF)
        {
          unint64_t v72 = v69[1];
          *unsigned int v68 = v70;
          v68[1] = v72;
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v14 = v206;
        if (v70 >= 0xFFFFFFFF)
        {
          unint64_t v71 = v69[1];
          *unsigned int v68 = v70;
          v68[1] = v71;
          swift_release();
LABEL_64:
          uint64_t v19 = v65;
          goto LABEL_65;
        }
        swift_release();
      }
      *(_OWORD *)unsigned int v68 = *(_OWORD *)v69;
      goto LABEL_64;
    }
    goto LABEL_13;
  }
  long long v16 = v39;
  uint64_t v14 = v207;
  size_t v20 = v210;
  uint64_t v18 = ~v12;
  if (v40 > 1) {
    goto LABEL_30;
  }
LABEL_24:
  long long v44 = *v16;
  long long v45 = v16[1];
  long long v46 = v16[2];
  *(void *)(v14 + 48) = *((void *)v16 + 6);
  *(_OWORD *)(v14 + 16) = v45;
  *(_OWORD *)(v14 + 32) = v46;
  *(_OWORD *)uint64_t v14 = v44;
  uint64_t v47 = v14;
  unint64_t v48 = (v14 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v49 = ((unint64_t)v16 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v48 = *(void *)v49;
  *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
  long long v50 = *(_OWORD *)v24;
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v24 + 16);
  *(_OWORD *)unint64_t v21 = v50;
  uint64_t v51 = v18;
  uint64_t v52 = (void *)((v12 + 17 + v21) & v18);
  unsigned int v53 = (const void *)((v12 + 17 + v24) & v51);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v212 + 48))(v53, 1, v214))
  {
    if (v17) {
      size_t v42 = v20;
    }
    else {
      size_t v42 = v20 + 1;
    }
    memcpy(v52, v53, v42);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v212 + 32))(v52, v53, v214);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v212 + 56))(v52, 0, 1, v214);
    if (v17) {
      size_t v42 = v20;
    }
    else {
      size_t v42 = v20 + 1;
    }
  }
  unint64_t v54 = ((unint64_t)v52 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v55 = (uint64_t *)(((unint64_t)v53 + v42 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v56 = *v55;
  if ((unint64_t)*v55 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v54 = *(_OWORD *)v55;
  }
  else
  {
    uint64_t v57 = v55[1];
    *(void *)unint64_t v54 = v56;
    *(void *)(v54 + 8) = v57;
  }
  uint64_t v14 = v47;
LABEL_65:
  unint64_t v73 = ((v19 + v42 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v74 = v73 + v14;
  uint64_t v75 = (char *)v16 + v73;
  *(void *)unint64_t v74 = *(void *)((char *)v16 + v73);
  *(unsigned char *)(v74 + 8) = *((unsigned char *)v16 + v73 + 8);
  uint64_t v76 = (void *)(v73 + v14 + 16);
  unsigned int v77 = (void *)((char *)v16 + v73 + 16);
  if (*(void *)(v73 + v14 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)((char *)v16 + v73 + 24) >= 0xFFFFFFFFuLL)
    {
      *uint64_t v76 = *v77;
      swift_release();
      v76[1] = v77[1];
      swift_release();
      v76[2] = v77[2];
      goto LABEL_70;
    }
    swift_release();
    swift_release();
  }
  long long v78 = *(_OWORD *)v77;
  v76[2] = v77[2];
  *(_OWORD *)uint64_t v76 = v78;
LABEL_70:
  uint64_t v79 = sub_228BAC9C8();
  uint64_t v211 = *(void *)(v79 - 8);
  uint64_t v80 = *(unsigned __int8 *)(v211 + 80);
  uint64_t v81 = v80 | 7;
  uint64_t v82 = (unsigned __int8 *)((v74 + (v80 | 7) + 40) & ~(v80 | 7));
  unint64_t v83 = (unsigned __int8 *)((unint64_t)&v75[(v80 | 7) + 40] & ~(v80 | 7));
  unint64_t v84 = *(void *)(v211 + 64);
  if (v84 <= 8) {
    uint64_t v85 = 8;
  }
  else {
    uint64_t v85 = *(void *)(*(void *)(v79 - 8) + 64);
  }
  if (v82 != v83)
  {
    unsigned int v86 = v82[v85];
    unsigned int v87 = v86 - 2;
    if (v86 >= 2)
    {
      if (v85 <= 3) {
        uint64_t v88 = v85;
      }
      else {
        uint64_t v88 = 4;
      }
      switch(v88)
      {
        case 1:
          int v89 = *v82;
          if (v85 >= 4) {
            goto LABEL_88;
          }
          goto LABEL_82;
        case 2:
          int v89 = *(unsigned __int16 *)v82;
          if (v85 < 4) {
            goto LABEL_82;
          }
          goto LABEL_88;
        case 3:
          int v89 = *(unsigned __int16 *)v82 | (v82[2] << 16);
          if (v85 < 4) {
            goto LABEL_82;
          }
          goto LABEL_88;
        case 4:
          int v89 = *(_DWORD *)v82;
          if (v85 < 4)
          {
LABEL_82:
            unsigned int v86 = (v89 | (v87 << (8 * v85))) + 2;
            break;
          }
LABEL_88:
          if (v89 != -1) {
            goto LABEL_89;
          }
          goto LABEL_84;
        default:
          break;
      }
    }
    if (v86 == 1) {
LABEL_84:
    }
      (*(void (**)(unint64_t, uint64_t))(v211 + 8))((v74 + (v80 | 7) + 40) & ~(v80 | 7), v79);
    else {
LABEL_89:
    }
      swift_release();
    unsigned int v90 = v83[v85];
    unsigned int v91 = v90 - 2;
    if (v90 >= 2)
    {
      if (v85 <= 3) {
        uint64_t v92 = v85;
      }
      else {
        uint64_t v92 = 4;
      }
      switch(v92)
      {
        case 1:
          int v93 = *v83;
          if (v85 >= 4) {
            goto LABEL_104;
          }
          goto LABEL_98;
        case 2:
          int v93 = *(unsigned __int16 *)v83;
          if (v85 < 4) {
            goto LABEL_98;
          }
          goto LABEL_104;
        case 3:
          int v93 = *(unsigned __int16 *)v83 | (v83[2] << 16);
          if (v85 < 4) {
            goto LABEL_98;
          }
          goto LABEL_104;
        case 4:
          int v93 = *(_DWORD *)v83;
          if (v85 < 4)
          {
LABEL_98:
            unsigned int v90 = (v93 | (v91 << (8 * v85))) + 2;
            break;
          }
LABEL_104:
          if (v93 != -1) {
            goto LABEL_105;
          }
          goto LABEL_100;
        default:
          break;
      }
    }
    if (v90 == 1)
    {
LABEL_100:
      (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v211 + 32))((v74 + (v80 | 7) + 40) & ~(v80 | 7), v83, v79);
      char v94 = 1;
    }
    else
    {
LABEL_105:
      char v94 = 0;
      *(void *)uint64_t v82 = *(void *)v83;
    }
    v82[v85] = v94;
  }
  uint64_t v95 = sub_228BAC588();
  uint64_t v213 = v95;
  uint64_t v215 = *(void *)(v95 - 8);
  uint64_t v96 = *(unsigned __int8 *)(v215 + 80);
  uint64_t v97 = v85 + (v96 | 7) + 1;
  uint64_t v98 = (unint64_t)&v82[v97] & ~(v96 | 7);
  uint64_t v99 = (unint64_t)&v83[v97] & ~(v96 | 7);
  unint64_t v100 = *(void *)(v215 + 64);
  if (v100 <= 8) {
    uint64_t v101 = 8;
  }
  else {
    uint64_t v101 = *(void *)(*(void *)(v95 - 8) + 64);
  }
  if (v98 != v99)
  {
    unsigned int v102 = *(unsigned __int8 *)(v98 + v101);
    unsigned int v103 = v102 - 2;
    if (v102 >= 2)
    {
      if (v101 <= 3) {
        uint64_t v104 = v101;
      }
      else {
        uint64_t v104 = 4;
      }
      switch(v104)
      {
        case 1:
          int v105 = *(unsigned __int8 *)v98;
          if (v101 >= 4) {
            goto LABEL_125;
          }
          goto LABEL_119;
        case 2:
          int v105 = *(unsigned __int16 *)v98;
          if (v101 < 4) {
            goto LABEL_119;
          }
          goto LABEL_125;
        case 3:
          int v105 = *(unsigned __int16 *)v98 | (*(unsigned __int8 *)(v98 + 2) << 16);
          if (v101 < 4) {
            goto LABEL_119;
          }
          goto LABEL_125;
        case 4:
          int v105 = *(_DWORD *)v98;
          if (v101 < 4)
          {
LABEL_119:
            unsigned int v102 = (v105 | (v103 << (8 * v101))) + 2;
            break;
          }
LABEL_125:
          if (v105 != -1) {
            goto LABEL_126;
          }
          goto LABEL_121;
        default:
          break;
      }
    }
    if (v102 == 1) {
LABEL_121:
    }
      (*(void (**)(uint64_t, uint64_t))(v215 + 8))(v98, v95);
    else {
LABEL_126:
    }
      swift_release();
    unsigned int v106 = *(unsigned __int8 *)(v99 + v101);
    unsigned int v107 = v106 - 2;
    if (v106 >= 2)
    {
      if (v101 <= 3) {
        uint64_t v108 = v101;
      }
      else {
        uint64_t v108 = 4;
      }
      switch(v108)
      {
        case 1:
          int v109 = *(unsigned __int8 *)v99;
          if (v101 >= 4) {
            goto LABEL_141;
          }
          goto LABEL_135;
        case 2:
          int v109 = *(unsigned __int16 *)v99;
          if (v101 < 4) {
            goto LABEL_135;
          }
          goto LABEL_141;
        case 3:
          int v109 = *(unsigned __int16 *)v99 | (*(unsigned __int8 *)(v99 + 2) << 16);
          if (v101 < 4) {
            goto LABEL_135;
          }
          goto LABEL_141;
        case 4:
          int v109 = *(_DWORD *)v99;
          if (v101 < 4)
          {
LABEL_135:
            unsigned int v106 = (v109 | (v107 << (8 * v101))) + 2;
            break;
          }
LABEL_141:
          if (v109 != -1) {
            goto LABEL_142;
          }
          goto LABEL_137;
        default:
          break;
      }
    }
    if (v106 == 1)
    {
LABEL_137:
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v215 + 32))(v98, v99, v213);
      char v110 = 1;
    }
    else
    {
LABEL_142:
      char v110 = 0;
      *(void *)uint64_t v98 = *(void *)v99;
    }
    *(unsigned char *)(v98 + v101) = v110;
  }
  uint64_t v111 = v101 + 1;
  unint64_t v112 = ((v98 | 7) + v101 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v113 = ((v99 | 7) + v111) & 0xFFFFFFFFFFFFFFF8;
  char v114 = *(unsigned char *)(v113 + 8);
  uint64_t v115 = *(void *)v112;
  char v116 = *(unsigned char *)(v112 + 8);
  *(void *)unint64_t v112 = *(void *)v113;
  *(unsigned char *)(v112 + 8) = v114;
  sub_228AD25F8(v115, v116);
  uint64_t v117 = v81 | v96;
  uint64_t v118 = (v81 | v96) + 9;
  uint64_t v119 = ~(v81 | v96);
  unint64_t v120 = (v118 + v112) & v119;
  unint64_t v121 = (v118 + v113) & v119;
  if (v120 == v121)
  {
    uint64_t v131 = ~v96;
    uint64_t v132 = (v96 + 2) & ~v96;
    unint64_t v125 = ((((v84 + v96 + ((v80 + 2) & ~v80)) & ~v96) + v100 + 7) & 0xFFFFFFFFFFFFFFF8) + v96 + 8;
    unint64_t v133 = v125 & ~v96;
    uint64_t v134 = (v96 + 3) & ~v96;
    goto LABEL_258;
  }
  uint64_t v122 = *(unsigned int *)(v211 + 84);
  unsigned int v123 = *(_DWORD *)(v215 + 84);
  unsigned int v208 = v123;
  if (v122 > v123) {
    unsigned int v123 = *(_DWORD *)(v211 + 84);
  }
  if (v123 <= 0x7FFFFFFE) {
    int v124 = 2147483646;
  }
  else {
    int v124 = v123;
  }
  uint64_t v204 = v80 + 2;
  uint64_t v200 = v84 + v96;
  unint64_t __n = ((((v84 + v96 + ((v80 + 2) & ~v80)) & ~v96) + v100 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v190 = v96 + 3;
  uint64_t v194 = (v96 + 3) & ~v96;
  uint64_t v191 = v96 + 2;
  uint64_t v195 = (v96 + 2) & ~v96;
  unint64_t v125 = __n + v96;
  unint64_t v193 = (__n + v96) & ~v96;
  unint64_t v196 = v100 + v194 + v117;
  if (v100 + v195 + ((__n + v96 + ((v196 + v193) & v119)) & ~v96) + 6 <= 8) {
    uint64_t v126 = 8;
  }
  else {
    uint64_t v126 = v100 + v195 + ((__n + v96 + ((v196 + v193) & v119)) & ~v96) + 6;
  }
  unsigned int v127 = *(unsigned __int8 *)(v120 + v126);
  unsigned int v128 = v127 - 2;
  if (v127 >= 2)
  {
    if (v126 <= 3) {
      uint64_t v129 = v126;
    }
    else {
      uint64_t v129 = 4;
    }
    switch(v129)
    {
      case 1:
        int v130 = *(unsigned __int8 *)v120;
        if (v126 < 4) {
          goto LABEL_162;
        }
        goto LABEL_166;
      case 2:
        int v130 = *(unsigned __int16 *)v120;
        if (v126 < 4) {
          goto LABEL_162;
        }
        goto LABEL_166;
      case 3:
        int v130 = *(unsigned __int16 *)v120 | (*(unsigned __int8 *)(v120 + 2) << 16);
        if (v126 < 4) {
          goto LABEL_162;
        }
        goto LABEL_166;
      case 4:
        int v130 = *(_DWORD *)v120;
        if (v126 < 4) {
LABEL_162:
        }
          unsigned int v127 = (v130 | (v128 << (8 * v126))) + 2;
        else {
LABEL_166:
        }
          unsigned int v127 = v130 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v199 = v79;
  uint64_t v131 = ~v96;
  uint64_t v135 = ~v80;
  uint64_t v205 = v119;
  int v201 = v124;
  uint64_t v197 = ~v80;
  uint64_t v198 = v126;
  char v192 = (unsigned __int8 *)v121;
  size_t v188 = v100 + v195;
  if (v127 != 1)
  {
    swift_release();
    goto LABEL_204;
  }
  unint64_t v136 = (v204 + v120) & v135;
  if (v122 == v124)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v211 + 48))((v204 + v120) & v135, v122, v199))
    {
      goto LABEL_179;
    }
LABEL_174:
    unint64_t v137 = (v200 + v136) & v131;
LABEL_178:
    (*(void (**)(unint64_t, uint64_t))(v211 + 8))(v136, v199);
    (*(void (**)(unint64_t, uint64_t))(v215 + 8))(v137, v213);
    swift_release();
    goto LABEL_179;
  }
  unint64_t v137 = (v200 + v136) & v131;
  if (v208 == v124)
  {
    if ((*(unsigned int (**)(unint64_t))(v215 + 48))((v200 + v136) & v131)) {
      goto LABEL_179;
    }
    goto LABEL_174;
  }
  unint64_t v138 = *(void *)((v100 + v137 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v138 >= 0xFFFFFFFF) {
    LODWORD(v138) = -1;
  }
  if ((v138 + 1) < 2) {
    goto LABEL_178;
  }
LABEL_179:
  uint64_t v139 = (unsigned __int8 *)((v125 + v120) & v131);
  if (v208 > 0xFE)
  {
    if ((*(unsigned int (**)(unint64_t))(v215 + 48))((unint64_t)&v139[v190] & v131)) {
      goto LABEL_184;
    }
    goto LABEL_183;
  }
  unsigned int v140 = *v139;
  if (v140 < 2 || ((v140 + 2147483646) & 0x7FFFFFFF) == 0xFFFFFFFF) {
LABEL_183:
  }
    (*(void (**)(unint64_t, uint64_t))(v215 + 8))((unint64_t)&v139[v190] & v131, v213);
LABEL_184:
  unint64_t v141 = (unint64_t)&v139[v196] & v205;
  unint64_t v142 = (v204 + v141) & v135;
  if (v122 == v201)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v211 + 48))((v204 + v141) & v135, v122, v199))
    {
      goto LABEL_196;
    }
LABEL_189:
    unint64_t v143 = (v200 + v142) & v131;
LABEL_195:
    (*(void (**)(unint64_t, uint64_t))(v211 + 8))(v142, v199);
    (*(void (**)(unint64_t, uint64_t))(v215 + 8))(v143, v213);
    swift_release();
    goto LABEL_196;
  }
  unint64_t v143 = (v200 + v142) & v131;
  if (v208 == v201)
  {
    if ((*(unsigned int (**)(unint64_t))(v215 + 48))((v200 + v142) & v131)) {
      goto LABEL_196;
    }
    goto LABEL_189;
  }
  unint64_t v144 = *(void *)((v100 + v143 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v144 >= 0xFFFFFFFF) {
    LODWORD(v144) = -1;
  }
  if ((v144 + 1) < 2) {
    goto LABEL_195;
  }
LABEL_196:
  uint64_t v145 = (unsigned __int8 *)((v125 + v141) & v131);
  if (v208 > 0xFE)
  {
    uint64_t v148 = v191;
    unint64_t v121 = (unint64_t)v192;
    uint64_t v135 = v197;
    if ((*(unsigned int (**)(unint64_t))(v215 + 48))((unint64_t)&v145[v191] & v131)) {
      goto LABEL_204;
    }
    goto LABEL_203;
  }
  unsigned int v146 = *v145;
  if (v146 >= 2) {
    int v147 = (v146 + 2147483646) & 0x7FFFFFFF;
  }
  else {
    int v147 = -1;
  }
  uint64_t v148 = v191;
  unint64_t v121 = (unint64_t)v192;
  uint64_t v135 = v197;
  if (v147 == -1) {
LABEL_203:
  }
    (*(void (**)(unint64_t, uint64_t))(v215 + 8))((unint64_t)&v145[v148] & v131, v213);
LABEL_204:
  unsigned int v149 = *(unsigned __int8 *)(v121 + v198);
  unsigned int v150 = v149 - 2;
  if (v149 < 2)
  {
    uint64_t v119 = v205;
    int v152 = v201;
    if (v149 != 1)
    {
LABEL_212:
      *(void *)unint64_t v120 = *(void *)v121;
      *(unsigned char *)(v120 + v198) = 0;
      uint64_t v134 = v194;
      uint64_t v132 = v195;
      unint64_t v133 = v193;
      goto LABEL_258;
    }
  }
  else
  {
    if (v198 <= 3) {
      uint64_t v151 = v198;
    }
    else {
      uint64_t v151 = 4;
    }
    uint64_t v119 = v205;
    int v152 = v201;
    switch(v151)
    {
      case 1:
        int v153 = *(unsigned __int8 *)v121;
        if (v198 < 4) {
          goto LABEL_214;
        }
        goto LABEL_253;
      case 2:
        int v153 = *(unsigned __int16 *)v121;
        if (v198 < 4) {
          goto LABEL_214;
        }
        goto LABEL_253;
      case 3:
        int v153 = *(unsigned __int16 *)v121 | (*(unsigned __int8 *)(v121 + 2) << 16);
        if (v198 < 4) {
          goto LABEL_214;
        }
        goto LABEL_253;
      case 4:
        int v153 = *(_DWORD *)v121;
        if (v198 >= 4)
        {
LABEL_253:
          if (v153 == -1) {
            break;
          }
          goto LABEL_212;
        }
LABEL_214:
        unsigned int v149 = (v153 | (v150 << (8 * v198))) + 2;
LABEL_215:
        if (v149 != 1) {
          goto LABEL_212;
        }
        break;
      default:
        goto LABEL_215;
    }
  }
  unint64_t v154 = (v204 + v121) & v135;
  unint64_t v187 = v125;
  unint64_t v155 = v121;
  if (v122 == v152)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v211 + 48))(v154, v122, v199)) {
      goto LABEL_221;
    }
  }
  else
  {
    unint64_t v156 = (v200 + v154) & v131;
    if (v208 == v152)
    {
      if (!(*(unsigned int (**)(unint64_t))(v215 + 48))((v200 + v154) & v131))
      {
LABEL_221:
        uint64_t v157 = v200;
        unint64_t v156 = (v200 + v154) & v131;
        unint64_t v186 = v100 + 7;
        size_t v185 = (void *)((v100 + 7 + v156) & 0xFFFFFFFFFFFFFFF8);
LABEL_226:
        *(unsigned char *)unint64_t v120 = *(unsigned char *)v155;
        *(unsigned char *)(v120 | 1) = *(unsigned char *)(v155 | 1);
        unint64_t v159 = (v204 + v120) & v197;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v211 + 32))(v159, v154, v199);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v215 + 32))((v157 + v159) & v131, v156, v213);
        *(void *)((v186 + ((v157 + v159) & v131)) & 0xFFFFFFFFFFFFFFF8) = *v185;
        unint64_t v125 = v187;
        goto LABEL_228;
      }
    }
    else
    {
      unint64_t v158 = *(void *)((v100 + 7 + v156) & 0xFFFFFFFFFFFFFFF8);
      if (v158 >= 0xFFFFFFFF) {
        LODWORD(v158) = -1;
      }
      if ((v158 + 1) < 2)
      {
        uint64_t v157 = v200;
        size_t v185 = (void *)((v100 + 7 + v156) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v186 = v100 + 7;
        goto LABEL_226;
      }
    }
  }
  memcpy((void *)v120, (const void *)v155, __n);
LABEL_228:
  unsigned int v160 = (unsigned char *)((v125 + v120) & v131);
  uint64_t v161 = (unsigned char *)((v125 + v155) & v131);
  if (v208 > 0xFE)
  {
    if (!(*(unsigned int (**)(unint64_t))(v215 + 48))((unint64_t)&v161[v190] & v131)) {
      goto LABEL_230;
    }
  }
  else if (*v161 < 2u)
  {
LABEL_230:
    *unsigned int v160 = *v161;
    *(unsigned char *)(((v125 + v120) & v131) + 1) = *(unsigned char *)(((v125 + v155) & v131) + 1);
    *(unsigned char *)(((v125 + v120) & v131) + 2) = *(unsigned char *)(((v125 + v155) & v131) + 2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v215 + 32))((unint64_t)&v160[v190] & v131, (unint64_t)&v161[v190] & v131, v213);
    goto LABEL_233;
  }
  memcpy((void *)((v125 + v120) & v131), (const void *)((v125 + v155) & v131), v100 + v194);
LABEL_233:
  unint64_t v162 = (unint64_t)&v160[v196] & v205;
  unint64_t v163 = (unint64_t)&v161[v196] & v205;
  unint64_t v164 = (v204 + v163) & v197;
  if (v122 == v201)
  {
    int v165 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v211 + 48))((v204 + v163) & v197, v122, v199);
    uint64_t v166 = v200;
    if (!v165) {
      goto LABEL_238;
    }
  }
  else
  {
    uint64_t v166 = v200;
    unint64_t v167 = (v200 + v164) & v131;
    if (v208 == v201)
    {
      if (!(*(unsigned int (**)(unint64_t))(v215 + 48))((v200 + v164) & v131))
      {
LABEL_238:
        unint64_t v167 = (v166 + v164) & v131;
        unint64_t v168 = v100 + 7;
        uint64_t v202 = (void *)((v100 + 7 + v167) & 0xFFFFFFFFFFFFFFF8);
LABEL_243:
        *(unsigned char *)unint64_t v162 = *(unsigned char *)v163;
        *(unsigned char *)(v162 | 1) = *(unsigned char *)(v163 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v211 + 32))((v204 + v162) & v197, v164, v199);
        unint64_t v170 = (v200 + ((v204 + v162) & v197)) & v131;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v215 + 32))(v170, v167, v213);
        *(void *)((v168 + v170) & 0xFFFFFFFFFFFFFFF8) = *v202;
        goto LABEL_245;
      }
    }
    else
    {
      unint64_t v168 = v100 + 7;
      unint64_t v169 = *(void *)((v100 + 7 + v167) & 0xFFFFFFFFFFFFFFF8);
      if (v169 >= 0xFFFFFFFF) {
        LODWORD(v169) = -1;
      }
      if ((v169 + 1) < 2)
      {
        uint64_t v202 = (void *)((v100 + 7 + v167) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_243;
      }
    }
  }
  memcpy((void *)v162, (const void *)v163, __n);
LABEL_245:
  unint64_t v171 = v187 + v162;
  unint64_t v125 = v187;
  v172 = (unsigned char *)(v171 & v131);
  unint64_t v173 = (unsigned __int8 *)((v187 + v163) & v131);
  if (v208 > 0xFE)
  {
    unint64_t v175 = (unint64_t)&v173[v191] & v131;
    if (!(*(unsigned int (**)(unint64_t))(v215 + 48))(v175))
    {
      LOBYTE(v174) = *v173;
      goto LABEL_256;
    }
  }
  else
  {
    unsigned int v174 = *v173;
    if (v174 <= 1)
    {
      unint64_t v175 = (unint64_t)&v173[v191] & v131;
LABEL_256:
      unsigned char *v172 = v174;
      v172[1] = v173[1];
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v215 + 32))((unint64_t)&v172[v191] & v131, v175, v213);
      goto LABEL_257;
    }
  }
  memcpy(v172, v173, v188);
LABEL_257:
  uint64_t v119 = v205;
  uint64_t v134 = v194;
  uint64_t v132 = v195;
  unint64_t v176 = &v172[v188];
  *unint64_t v176 = *(_WORD *)&v173[v188];
  v176[1] = *(_WORD *)&v173[v188 + 2];
  v176[2] = *(_WORD *)&v173[v188 + 4];
  *(unsigned char *)(v120 + v198) = 1;
  unint64_t v121 = (unint64_t)v192;
  unint64_t v133 = v193;
LABEL_258:
  unint64_t v177 = v132 + v100 + ((v125 + ((v134 + v100 + v117 + v133) & v119)) & v131) + 6;
  if (v177 <= 8) {
    unint64_t v177 = 8;
  }
  unint64_t v178 = v177 + 1;
  unint64_t v179 = ((v120 | 7) + v178) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v180 = ((v121 | 7) + v178) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v181 = *(void *)v180;
  LOBYTE(v180) = *(unsigned char *)(v180 + 8);
  uint64_t v182 = *(void *)v179;
  char v183 = *(unsigned char *)(v179 + 8);
  *(void *)unint64_t v179 = v181;
  *(unsigned char *)(v179 + 8) = v180;
  sub_228AD25F8(v182, v183);
  return v203;
}

uint64_t sub_228B64CF4(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v39 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v39 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  unsigned int v40 = v6;
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v6 = 2147483646;
  }
  unsigned int v7 = v6 - 1;
  if (v6 - 1 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = v6 - 1;
  }
  uint64_t v9 = *(void *)(sub_228BAC9C8() - 8);
  uint64_t v10 = v9;
  unint64_t v11 = *(void *)(v9 + 64);
  if (v11 <= 8) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = *(void *)(v9 + 64);
  }
  uint64_t v41 = v12;
  uint64_t v13 = *(void *)(sub_228BAC588() - 8);
  unint64_t v14 = *(void *)(v13 + 64);
  if (v14 <= 8) {
    uint64_t v15 = 8;
  }
  else {
    uint64_t v15 = *(void *)(v13 + 64);
  }
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v19 = v16 | 7 | v17;
  uint64_t v20 = *(unsigned __int8 *)(v4 + 80);
  if (v5) {
    uint64_t v21 = 7;
  }
  else {
    uint64_t v21 = 8;
  }
  uint64_t v18 = ((v14 + ((v11 + v17 + ((v16 + 2) & ~v16)) & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8) + v17;
  unint64_t v22 = v14
      + ((v17 + 2) & ~v17)
      + ((v18 + 8 + ((v19 + v14 + ((v17 + 3) & ~v17) + ((v18 + 8) & ~v17)) & ~v19)) & ~v17)
      + 6;
  if (v22 <= 8) {
    uint64_t v23 = 8;
  }
  else {
    uint64_t v23 = v22;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v24 = v20 | 7;
  unint64_t v25 = ((v21 + *(void *)(v4 + 64) + ((v20 + 89) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 < a2)
  {
    unint64_t v26 = ((v23
          + ((v19
            + ((v15 + ((v41 + (v17 | 7) + ((v16 + ((v20 + 56) & ~v24) + v25 + 40) & ~(v16 | 7)) + 1) & ~(v17 | 7)) + 8) & 0xFFFFFFFFFFFFFFF8)
            + 9) & ~v19)
          + 8) & 0xFFFFFFFFFFFFFFF8)
        + 9;
    if (v26 < 4) {
      unsigned int v27 = ((a2 - v8 + 255) >> (8 * v26)) + 1;
    }
    else {
      unsigned int v27 = 2;
    }
    if (v27 >= 0x10000) {
      unsigned int v28 = 4;
    }
    else {
      unsigned int v28 = 2;
    }
    if (v27 < 0x100) {
      unsigned int v28 = 1;
    }
    if (v27 >= 2) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    switch(v29)
    {
      case 1:
        int v30 = a1[v26];
        if (!a1[v26]) {
          break;
        }
        goto LABEL_39;
      case 2:
        int v30 = *(unsigned __int16 *)&a1[v26];
        if (*(_WORD *)&a1[v26]) {
          goto LABEL_39;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x228B650C4);
      case 4:
        int v30 = *(_DWORD *)&a1[v26];
        if (!v30) {
          break;
        }
LABEL_39:
        int v32 = (v30 - 1) << (8 * v26);
        if (v26 >= 4) {
          int v32 = 0;
        }
        if (v26 == 1) {
          int v33 = *a1;
        }
        else {
          int v33 = *(_DWORD *)a1;
        }
        return v8 + (v33 | v32) + 1;
      default:
        break;
    }
  }
  uint64_t v34 = (unint64_t)&a1[v24 + 56] & ~v24;
  if (v7 < 0x7FFFFFFE)
  {
    unint64_t v38 = *(void *)(v34 + v25 + 24);
    if (v38 >= 0xFFFFFFFF) {
      LODWORD(v38) = -1;
    }
    if ((v38 + 1) >= 2) {
      return v38;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v35 = (v34 + 79) & 0xFFFFFFFFFFFFFFF8;
    if (v40 > 0x7FFFFFFE)
    {
      unsigned int v37 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))((v20 + v35 + 17) & ~v20, v5, v39);
      LODWORD(v36) = v37 - 1;
    }
    else
    {
      unint64_t v36 = *(void *)(v35 + 8);
      if (v36 >= 0xFFFFFFFF) {
        LODWORD(v36) = -1;
      }
      unsigned int v37 = v36 + 1;
    }
    if (v37 < 2) {
      LODWORD(v36) = 0;
    }
    if (v36 >= 2) {
      return (v36 - 1);
    }
    else {
      return 0;
    }
  }
}

void sub_228B650D8(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v49 = v5;
  int v6 = *(_DWORD *)(v5 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  unsigned int v47 = v7;
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  unsigned int v48 = v7;
  unsigned int v8 = v7 - 1;
  if (v7 - 1 <= 0x7FFFFFFE) {
    unsigned int v9 = 2147483646;
  }
  else {
    unsigned int v9 = v7 - 1;
  }
  uint64_t v10 = *(void *)(sub_228BAC9C8() - 8);
  uint64_t v11 = v10;
  unint64_t v12 = *(void *)(v10 + 64);
  if (v12 <= 8) {
    uint64_t v13 = 8;
  }
  else {
    uint64_t v13 = *(void *)(v10 + 64);
  }
  uint64_t v14 = sub_228BAC588();
  int v15 = v6;
  int v16 = 0;
  uint64_t v17 = *(void *)(v14 - 8);
  unint64_t v18 = *(void *)(v17 + 64);
  if (v18 <= 8) {
    uint64_t v19 = 8;
  }
  else {
    uint64_t v19 = *(void *)(v17 + 64);
  }
  uint64_t v20 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v23 = v20 | 7 | v21;
  uint64_t v24 = *(unsigned __int8 *)(v5 + 80);
  if (v15) {
    size_t v25 = *(void *)(v5 + 64);
  }
  else {
    size_t v25 = *(void *)(v5 + 64) + 1;
  }
  size_t v26 = ((v24 + 89) & ~v24) + v25;
  unint64_t v27 = ((v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v28 = (v23
       + ((v19 + ((v13 + (v21 | 7) + ((v20 + ((v24 + 56) & ~(v24 | 7)) + v27 + 40) & ~(v20 | 7)) + 1) & ~(v21 | 7)) + 8) & 0xFFFFFFFFFFFFFFF8)
       + 9) & ~v23;
  uint64_t v22 = ((v18 + ((v12 + v21 + ((v20 + 2) & ~v20)) & ~v21) + 7) & 0xFFFFFFFFFFFFFFF8) + v21;
  unint64_t v29 = v18
      + ((v21 + 2) & ~v21)
      + ((v22 + 8 + ((v23 + v18 + ((v21 + 3) & ~v21) + ((v22 + 8) & ~v21)) & ~v23)) & ~v21)
      + 6;
  if (v29 <= 8) {
    unint64_t v29 = 8;
  }
  size_t v30 = ((v29 + v28 + 8) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v31 = 8 * v30;
  if (v9 < a3)
  {
    if (v30 <= 3) {
      unsigned int v32 = ((a3 - v9 + 255) >> v31) + 1;
    }
    else {
      unsigned int v32 = 2;
    }
    if (v32 >= 0x10000) {
      int v33 = 4;
    }
    else {
      int v33 = 2;
    }
    if (v32 < 0x100) {
      int v33 = 1;
    }
    if (v32 >= 2) {
      int v16 = v33;
    }
    else {
      int v16 = 0;
    }
  }
  if (v9 < a2)
  {
    if (v30 < 4) {
      unsigned int v34 = ((~v9 + a2) >> v31) + 1;
    }
    else {
      unsigned int v34 = 1;
    }
    if (v30 >= 4) {
      unsigned int v35 = ~v9 + a2;
    }
    else {
      unsigned int v35 = (~(_BYTE)v9 + a2);
    }
    bzero(a1, v30);
    if (v30 == 1) {
      *a1 = v35;
    }
    else {
      *(_DWORD *)a1 = v35;
    }
    switch(v16)
    {
      case 1:
        a1[v30] = v34;
        return;
      case 2:
        *(_WORD *)&a1[v30] = v34;
        return;
      case 3:
        goto LABEL_84;
      case 4:
        *(_DWORD *)&a1[v30] = v34;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v30] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_49;
    case 2:
      *(_WORD *)&a1[v30] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_49;
    case 3:
LABEL_84:
      __break(1u);
      JUMPOUT(0x228B65610);
    case 4:
      *(_DWORD *)&a1[v30] = 0;
      goto LABEL_48;
    default:
LABEL_48:
      if (!a2) {
        return;
      }
LABEL_49:
      unint64_t v36 = (_DWORD *)((unint64_t)&a1[(v24 | 7) + 56] & ~(v24 | 7));
      if (v8 <= 0x7FFFFFFD)
      {
        unint64_t v39 = (unint64_t)v36 + v27 + 16;
        if (a2 <= 0x7FFFFFFE)
        {
          *(void *)((char *)v36 + v27 + 24) = a2;
          return;
        }
        unsigned int v40 = a2 - 0x7FFFFFFF;
        *(void *)unint64_t v39 = 0;
        *(void *)((char *)v36 + v27 + 24) = 0;
        *(void *)((char *)v36 + v27 + 32) = 0;
        goto LABEL_61;
      }
      size_t v37 = ((v26 + 7) & 0xFFFFFFF8) + 16;
      if (v8 < a2 || (uint64_t v38 = a2 + 1, v38 > v48))
      {
        if (v37)
        {
          bzero(v36, v37);
          *unint64_t v36 = a2 - v48;
        }
        return;
      }
      if (a2 == -1) {
        return;
      }
      unint64_t v39 = ((unint64_t)v36 + 79) & 0xFFFFFFFFFFFFFFF8;
      if (v47 <= 0x7FFFFFFE)
      {
        if (v38 <= 0x7FFFFFFE)
        {
          *(void *)(v39 + 8) = v38;
          return;
        }
        unsigned int v40 = a2 - 2147483646;
        *(void *)unint64_t v39 = 0;
        *(void *)(v39 + 8) = 0;
        *(unsigned char *)(v39 + 16) = 0;
LABEL_61:
        *(_DWORD *)unint64_t v39 = v40;
        return;
      }
      uint64_t v41 = v24 + v39 + 17;
      size_t v42 = (unsigned char *)(v41 & ~v24);
      if (v38 <= v47)
      {
        long long v46 = *(void (**)(uint64_t, void))(v49 + 56);
        v46(v41 & ~v24, a2 + 2);
      }
      else
      {
        if (v25 <= 3) {
          int v43 = ~(-1 << (8 * v25));
        }
        else {
          int v43 = -1;
        }
        if (v25)
        {
          int v44 = v43 & (a2 - v47);
          if (v25 <= 3) {
            int v45 = v25;
          }
          else {
            int v45 = 4;
          }
          bzero(v42, v25);
          switch(v45)
          {
            case 2:
              *(_WORD *)size_t v42 = v44;
              break;
            case 3:
              *(_WORD *)size_t v42 = v44;
              v42[2] = BYTE2(v44);
              break;
            case 4:
              *(_DWORD *)size_t v42 = v44;
              break;
            default:
              *size_t v42 = v44;
              break;
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for _MapView()
{
  return __swift_instantiateGenericMetadata();
}

void sub_228B65660(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_228BAC598();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_228B656B4()
{
  return swift_getWitnessTable();
}

id sub_228B656D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = *MEMORY[0x263F8EED0] & *v3;
  int v6 = (char *)v3 + *(void *)(v5 + 0x68);
  *(_OWORD *)int v6 = xmmword_228BB2DC0;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((void *)v6 + 6) = 0;
  unsigned int v7 = (void *)((char *)v3 + *(void *)((*v4 & *v3) + 0x70));
  v7[1] = 0;
  v7[2] = 0;
  *unsigned int v7 = 0;
  unsigned int v8 = (char *)v3 + *(void *)((*v4 & *v3) + 0x78);
  (*(void (**)(char *, uint64_t, uint64_t, void))(*(void *)(*(void *)(v5 + 80) - 8) + 56))(v8, 1, 1, *(void *)(v5 + 80));
  unsigned int v9 = (void *)((char *)v3 + *(void *)((*v4 & *v3) + 0x80));
  *unsigned int v9 = 0;
  v9[1] = 0;
  uint64_t v14 = *(void *)((*v4 & *v3) + 0x88);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for AnnotationBridge();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = v3;
  *(void *)((char *)v3 + v14) = sub_228BAD318();
  swift_beginAccess();
  uint64_t v11 = sub_228BAD718();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v8, a1, v11);
  swift_endAccess();
  uint64_t v12 = *v9;
  *unsigned int v9 = a2;
  v9[1] = a3;
  sub_228AD2688(a2);
  sub_228AD2678(v12);

  v18.receiver = v10;
  v18.super_class = (Class)type metadata accessor for MapViewCoordinator();
  return objc_msgSendSuper2(&v18, sel_init);
}

id sub_228B659AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone((Class)type metadata accessor for MapViewCoordinator());
  return sub_228B656D0(a1, a2, a3);
}

uint64_t sub_228B65A04(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_228B65A44(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_228B65AA0()
{
  unint64_t result = qword_268293810;
  if (!qword_268293810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293810);
  }
  return result;
}

id sub_228B65AF4()
{
  type metadata accessor for _SwiftUIMKMapView();
  id v0 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  objc_msgSend(v0, sel_setPitchEnabled_, 0);
  objc_msgSend(v0, sel_setRotateEnabled_, 0);
  objc_msgSend(v0, sel_setMapType_, 0);
  objc_msgSend(v0, sel_setPointOfInterestFilter_, 0);
  objc_msgSend(v0, sel_setCameraZoomRange_, 0);
  objc_msgSend(v0, sel_setCameraBoundary_, 0);
  id v1 = v0;
  objc_msgSend(v1, sel_setShowsBuildings_, _MKLinkedOnOrAfterReleaseSet());

  objc_msgSend(v1, sel_setShowsTraffic_, 0);
  sub_228AD25BC(0, &qword_268293828);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  long long v3 = (void *)sub_228BAD3D8();
  objc_msgSend(v1, sel_registerClass_forAnnotationViewWithReuseIdentifier_, ObjCClassFromMetadata, v3);

  type metadata accessor for SwiftUIAnnotationView();
  uint64_t v4 = swift_getObjCClassFromMetadata();
  uint64_t v5 = (void *)sub_228BAD3D8();
  objc_msgSend(v1, sel_registerClass_forAnnotationViewWithReuseIdentifier_, v4, v5);

  sub_228AD25BC(0, &qword_268293830);
  uint64_t v6 = swift_getObjCClassFromMetadata();
  unsigned int v7 = (void *)sub_228BAD3D8();
  objc_msgSend(v1, sel_registerClass_forAnnotationViewWithReuseIdentifier_, v6, v7);

  return v1;
}

void sub_228B65CEC(void *a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) == 1)
  {
    if (*(unsigned char *)(a2 + 48))
    {
      if (*(void *)(a2 + 64) == 1) {
        id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F10A30]), sel_init);
      }
      else {
        id v3 = sub_228B8A22C();
      }
    }
    else
    {
      id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F10908]), sel_initWithElevationStyle_, *(void *)(a2 + 40));
    }
  }
  else
  {
    id v3 = sub_228B8A0B4();
  }
  id v4 = v3;
  objc_msgSend(a1, sel_setPreferredConfiguration_);
}

id sub_228B65DF4(uint64_t a1, uint64_t a2, void (*a3)(long long *__return_ptr, uint64_t), uint64_t a4, void *a5)
{
  __n128 v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v23 - v10;
  (*(void (**)(char *, __n128))(v12 + 16))((char *)&v23 - v10, v9);
  sub_228B5D38C((uint64_t)v11);
  id result = objc_msgSend(a5, sel_viewForAnnotation_, a1);
  if (result)
  {
    id v14 = result;
    a3(&v26, a2);
    long long v23 = v26;
    long long v24 = v27;
    uint64_t v25 = v28;
    sub_228B66098((uint64_t)&v26);
    sub_228B5D4E4((uint64_t)&v23);
    if (v27 == 2)
    {
      type metadata accessor for SwiftUIAnnotationView();
      uint64_t v15 = swift_dynamicCastClass();
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = swift_allocObject();
        long long v18 = v27;
        *(_OWORD *)(v17 + 16) = v26;
        *(_OWORD *)(v17 + 32) = v18;
        *(void *)(v17 + 48) = v28;
        *(void *)(v17 + 56) = v16;
        sub_228B66098((uint64_t)&v26);
        id v19 = v14;
        sub_228BAC618();
        sub_228B660C4((uint64_t)&v26);

        return (id)swift_release();
      }
    }
    else if (v27 <= 1u)
    {
      self;
      uint64_t v20 = swift_dynamicCastObjCClass();
      if (v20)
      {
        uint64_t v21 = v20;
        uint64_t v22 = (void (*)(uint64_t, long long *))*((void *)&v27 + 1);
        long long v23 = v26;
        long long v24 = v27;
        uint64_t v25 = v28;
        sub_228B66098((uint64_t)&v26);
        id v14 = v14;
        v22(v21, &v23);

        sub_228B660C4((uint64_t)&v26);
LABEL_10:

        return (id)sub_228B660C4((uint64_t)&v26);
      }
    }
    objc_msgSend(a5, sel_removeAnnotation_, a1);
    objc_msgSend(a5, sel_addAnnotation_, a1);
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_228B66098(uint64_t a1)
{
  return a1;
}

uint64_t sub_228B660C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_228B660F0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_228B66130()
{
  id v1 = *(uint64_t (**)(uint64_t, _OWORD *))(v0 + 40);
  long long v2 = *(_OWORD *)(v0 + 32);
  v5[0] = *(_OWORD *)(v0 + 16);
  v5[1] = v2;
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 48);
  return v1(v3, v5);
}

id sub_228B66178(uint64_t a1, uint64_t *a2)
{
  id v4 = (void *)MEMORY[0x263F8EED0];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  char v7 = *((unsigned char *)a2 + 16);
  (*(void (**)(char *, uint64_t, void))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)v2)
                                                                          + 0x50)
                                                              - 8)
                                                  + 16))(&v2[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v2) + 0x60)], a1, *(void *)((*MEMORY[0x263F8EED0] & *(void *)v2) + 0x50));
  unsigned int v8 = &v2[*(void *)((*v4 & *(void *)v2) + 0x68)];
  *(void *)unsigned int v8 = v5;
  *((void *)v8 + 1) = v6;
  v8[16] = v7;
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 3);
  __n128 v9 = &v2[*(void *)((*v4 & *(void *)v2) + 0x70)];
  *(void *)__n128 v9 = v5;
  *((void *)v9 + 1) = v6;
  v11.receiver = v2;
  v11.super_class = (Class)type metadata accessor for AnnotationBridge();
  return objc_msgSendSuper2(&v11, sel_init);
}

id sub_228B662B8(uint64_t a1, uint64_t *a2)
{
  id v4 = objc_allocWithZone((Class)type metadata accessor for AnnotationBridge());
  return sub_228B66178(a1, a2);
}

uint64_t sub_228B66304(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_228B66364(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_228B663CC(uint64_t a1, unint64_t a2)
{
  if ((~a2 & 0xF000000000000007) != 0) {
    return sub_228B17624(a1, a2);
  }
  return a1;
}

void sub_228B663E0()
{
}

uint64_t sub_228B66410(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_228B66454(uint64_t a1, unint64_t a2)
{
  if ((~a2 & 0xF000000000000007) != 0) {
    return sub_228B175AC(a1, a2);
  }
  return a1;
}

uint64_t sub_228B66468(uint64_t result)
{
  if (*(void *)((char *)v1 + *(void *)((*MEMORY[0x263F8EED0] & *v1) + 0x70) + 8))
  {
    uint64_t v2 = result;
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_268293820);
    MEMORY[0x22A6A6930](&v3);
    if (v3 != v2)
    {
      uint64_t v3 = v2;
      sub_228BAD1E8();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_228B66540()
{
}

void *sub_228B66598@<X0>(void *a1@<X8>)
{
  return sub_228B59B4C(a1);
}

uint64_t objectdestroy_21Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_228B665F4()
{
  return sub_228B59B9C();
}

double sub_228B66604(double result, double a2, double a3, double a4)
{
  if (a2 < -180.0)
  {
    if (result < -90.0) {
      goto LABEL_12;
    }
    if (result <= 90.0) {
      return result;
    }
    if (a3 < 0.0)
    {
      if (a4 < 0.0) {
        return 90.0;
      }
      return 90.0;
    }
    if (a3 <= 180.0) {
      return 90.0;
    }
    if (a4 < 0.0) {
      return 90.0;
    }
    return 90.0;
  }
  if (a2 <= 180.0)
  {
    if (result < -90.0) {
      goto LABEL_12;
    }
    double v4 = 90.0;
    if (result <= 90.0) {
      return result;
    }
    if (a3 < 0.0)
    {
      if (a4 < 0.0) {
        return v4;
      }
      return 90.0;
    }
    if (a3 <= 180.0) {
      return 90.0;
    }
    if (a4 < 0.0) {
      return 90.0;
    }
    return 90.0;
  }
  if (result >= -90.0)
  {
    if (result <= 90.0) {
      return result;
    }
    if (a3 >= 0.0) {
      return 90.0;
    }
    if (a4 < 0.0) {
      return 90.0;
    }
    return 90.0;
  }
LABEL_12:
  if (a3 >= 0.0)
  {
    if (a3 <= 180.0) {
      return -90.0;
    }
    if (a4 < 0.0) {
      return -90.0;
    }
    return -90.0;
  }
  if (a4 < 0.0) {
    return -90.0;
  }
  return -90.0;
}

uint64_t sub_228B66AC0(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v2 = sub_228BAC588();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  __n128 v9 = (char *)&v25 - v8;
  MEMORY[0x270FA5388](v7);
  objc_super v11 = (char *)&v25 - v10;
  uint64_t v12 = v1 + *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
  int v13 = *MEMORY[0x263F18568];
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v11, *MEMORY[0x263F18568], v2);
  char v14 = sub_228BAC578();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v11, v2);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v17 = (uint64_t (**)(char *, uint64_t))(v3 + 88);
  if (v14)
  {
    v16(v9, v26, v2);
    int v18 = (*v17)(v9, v2);
    if (v18 == *MEMORY[0x263F18550] || v18 == *MEMORY[0x263F18560] || v18 == v13) {
      return 1;
    }
    if (v18 == *MEMORY[0x263F18558]) {
      return 2;
    }
  }
  else
  {
    v16(v6, v12, v2);
    int v22 = (*v17)(v6, v2);
    if (v22 == *MEMORY[0x263F18550] || v22 == *MEMORY[0x263F18560] || v22 == v13) {
      return 1;
    }
    __n128 v9 = v6;
    if (v22 == *MEMORY[0x263F18558]) {
      return 2;
    }
  }
  v15(v9, v2);
  return 1;
}

uint64_t sub_228B66D30(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || (sub_228BAC558() & 1) == 0) {
    return 0;
  }

  return sub_228BAC578();
}

uint64_t MapCompass.init(scope:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (int *)type metadata accessor for MapCompass(0);
  uint64_t v7 = (char *)a3 + v6[5];
  *(void *)uint64_t v7 = swift_getKeyPath();
  v7[8] = 0;
  uint64_t v8 = (char *)a3 + v6[6];
  *(void *)uint64_t v8 = swift_getKeyPath();
  v8[8] = 0;
  __n128 v9 = (char *)a3 + v6[7];
  uint64_t result = swift_getKeyPath();
  *(void *)__n128 v9 = result;
  v9[8] = 0;
  objc_super v11 = (char *)a3 + v6[8];
  *(void *)objc_super v11 = a1;
  v11[8] = a2 & 1;
  return result;
}

uint64_t type metadata accessor for MapCompass(uint64_t a1)
{
  return sub_228AC29CC(a1, (uint64_t *)&unk_268293880);
}

uint64_t MapCompass.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v79 = a1;
  uint64_t v65 = type metadata accessor for _MapCompass(0);
  MEMORY[0x270FA5388](v65);
  size_t v67 = (uint64_t *)((char *)&v61 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v3);
  uint64_t v68 = (uint64_t)&v61 - v4;
  uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293860);
  MEMORY[0x270FA5388](v78);
  uint64_t v66 = (uint64_t)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v69 = (uint64_t)&v61 - v7;
  uint64_t v76 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293868);
  MEMORY[0x270FA5388](v76);
  uint64_t v77 = (uint64_t)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B48);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v63 = (uint64_t)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B50);
  MEMORY[0x270FA5388](v75);
  uint64_t v62 = (uint64_t *)((char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v12);
  uint64_t v64 = (uint64_t)&v61 - v13;
  uint64_t v14 = type metadata accessor for MapControlsConfig();
  uint64_t v15 = (int *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v73 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_228BAC588();
  uint64_t v71 = *(void *)(v17 - 8);
  uint64_t v72 = v17;
  MEMORY[0x270FA5388](v17);
  id v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for MapCompassConfig(0);
  uint64_t v74 = *(void *)(v70 - 8);
  MEMORY[0x270FA5388](v70);
  uint64_t v61 = (uint64_t)&v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  long long v23 = (char *)&v61 - v22;
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v61 - v25;
  uint64_t v27 = type metadata accessor for MapCompass(0);
  uint64_t v28 = v1 + *(int *)(v27 + 28);
  uint64_t v29 = *(void *)v28;
  char v30 = *(unsigned char *)(v28 + 8);
  sub_228AD266C(*(void *)v28, v30);
  char v31 = sub_228ACD41C(v29, v30);
  char v32 = v30;
  uint64_t v33 = v27;
  sub_228AD25F8(v29, v32);
  sub_228ACCD10((uint64_t)v19);
  if (v31 == 3) {
    char v34 = 0;
  }
  else {
    char v34 = v31;
  }
  v23[1] = v34;
  uint64_t v35 = v70;
  unint64_t v36 = v19;
  uint64_t v37 = (uint64_t)v73;
  (*(void (**)(char *, char *, uint64_t))(v71 + 32))(&v23[*(int *)(v70 + 24)], v36, v72);
  *long long v23 = 1;
  sub_228B67DEC((uint64_t)v23, (uint64_t)v26, type metadata accessor for MapCompassConfig);
  uint64_t v38 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
  uint64_t v39 = v37 + v15[7];
  uint64_t v40 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
  uint64_t v41 = v37 + v15[8];
  uint64_t v42 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v41, 1, 1, v42);
  uint64_t v43 = v37 + v15[9];
  sub_228B67E54((uint64_t)v26, v43, type metadata accessor for MapCompassConfig);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v43, 0, 1, v35);
  *(_WORD *)(v37 + v15[10]) = 2;
  *(_WORD *)(v37 + v15[11]) = 2;
  *(_WORD *)(v37 + v15[12]) = 2;
  uint64_t v44 = v1 + *(int *)(v33 + 24);
  uint64_t v45 = *(void *)v44;
  LOBYTE(v43) = *(unsigned char *)(v44 + 8);
  sub_228AD266C(*(void *)v44, v43);
  LOBYTE(v35) = sub_228ACD218(v45, v43);
  sub_228AD25F8(v45, v43);
  if (v35)
  {
    uint64_t v46 = sub_228BAD108();
    uint64_t v47 = v63;
    sub_228B67E54(v37, v63, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
    unsigned int v48 = v62;
    sub_228AD2708(v47, (uint64_t)v62 + *(int *)(v75 + 36), &qword_268291B48);
    *unsigned int v48 = v46;
    sub_228AC1A50(v47, &qword_268291B48);
    uint64_t v49 = &qword_268291B50;
    uint64_t v50 = (uint64_t)v48;
    uint64_t v51 = v64;
    sub_228ACD8BC(v50, v64, &qword_268291B50);
    sub_228AD2708(v51, v77, &qword_268291B50);
  }
  else
  {
    uint64_t v52 = v61;
    sub_228B67E54((uint64_t)v26, v61, type metadata accessor for MapCompassConfig);
    unsigned int v53 = (uint64_t *)(v1 + *(int *)(v33 + 32));
    uint64_t v54 = *v53;
    char v55 = *((unsigned char *)v53 + 8);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v57 = (uint64_t)v67;
    *size_t v67 = KeyPath;
    *(unsigned char *)(v57 + 8) = 0;
    sub_228B67DEC(v52, v57 + *(int *)(v65 + 24), type metadata accessor for MapCompassConfig);
    *(void *)(v57 + 16) = v54;
    *(unsigned char *)(v57 + 24) = v55;
    uint64_t v58 = v68;
    sub_228B67DEC(v57, v68, type metadata accessor for _MapCompass);
    uint64_t v59 = v66;
    sub_228B67E54(v58, v66, type metadata accessor for _MapCompass);
    *(_WORD *)(v59 + *(int *)(v78 + 36)) = 257;
    sub_228B67F54(v58, type metadata accessor for _MapCompass);
    uint64_t v49 = &qword_268293860;
    uint64_t v51 = v69;
    sub_228ACD8BC(v59, v69, &qword_268293860);
    sub_228AD2708(v51, v77, &qword_268293860);
  }
  swift_storeEnumTagMultiPayload();
  sub_228ACD6EC();
  sub_228B67EBC();
  sub_228BACCC8();
  sub_228AC1A50(v51, v49);
  sub_228B67F54(v37, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  return sub_228B67F54((uint64_t)v26, type metadata accessor for MapCompassConfig);
}

uint64_t sub_228B676F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228B696C4(qword_2682938C0);

  return MEMORY[0x270F01780](a1, a2, a3, v6);
}

uint64_t sub_228B67778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228B696C4(qword_2682938C0);

  return MEMORY[0x270F01718](a1, a2, a3, v6);
}

void sub_228B677F8()
{
}

id sub_228B6783C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_228BAC588();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v0 + 24)) {
    goto LABEL_9;
  }
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = *(void *)v0;
  char v8 = *(unsigned char *)(v0 + 8);
  sub_228ACF3A4(*(void *)v0, v8);
  uint64_t v9 = sub_228ACFC38(v7, v8);
  sub_228AD26A8(v7, v8);
  if (!*(void *)(v9 + 16) || (unint64_t v10 = sub_228AD183C(v6), (v11 & 1) == 0))
  {
    uint64_t v23 = 0;
    char v24 = 1;
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  sub_228AD2234(*(void *)(v9 + 56) + 8 * v10, (uint64_t)&v23);
  char v24 = 0;
  swift_bridgeObjectRelease();
  if (v24)
  {
LABEL_8:
    sub_228AC1A50((uint64_t)&v23, &qword_268291BD0);
    goto LABEL_9;
  }
  sub_228AD2184((uint64_t)&v23, (uint64_t)v25);
  uint64_t v12 = MEMORY[0x22A6A7CA0](v25);
  if (v12)
  {
    uint64_t v13 = (void *)v12;
    id v14 = objc_msgSend(self, sel_compassButtonWithMapView_, v12);

    sub_228AD21E0((uint64_t)v25);
    goto LABEL_10;
  }
  sub_228AD21E0((uint64_t)v25);
LABEL_9:
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F108B0]), sel_init);
LABEL_10:
  uint64_t v15 = v1 + *(int *)(type metadata accessor for _MapCompass(0) + 24);
  objc_msgSend(v14, sel_setCompassVisibility_, qword_228BB33D8[*(char *)(v15 + 1)]);
  uint64_t v16 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v15 + *(int *)(v16 + 24), v2);
  int v17 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v17 == *MEMORY[0x263F18550] || v17 == *MEMORY[0x263F18560] || v17 == *MEMORY[0x263F18568]) {
    goto LABEL_20;
  }
  if (v17 != *MEMORY[0x263F18558])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_20:
    uint64_t v20 = 1;
    goto LABEL_21;
  }
  uint64_t v20 = 2;
LABEL_21:
  objc_msgSend(v14, sel_setCompassSize_, v20);
  return v14;
}

id sub_228B67B00(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_228BAC588();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v1 + 24)) {
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)v1;
  char v10 = *(unsigned char *)(v1 + 8);
  sub_228ACF3A4(*(void *)v1, v10);
  uint64_t v11 = sub_228ACFC38(v9, v10);
  sub_228AD26A8(v9, v10);
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_228AD183C(v8), (v13 & 1) != 0))
  {
    sub_228AD2234(*(void *)(v11 + 56) + 8 * v12, (uint64_t)&v23);
    char v24 = 0;
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
      sub_228AD2184((uint64_t)&v23, (uint64_t)v25);
      id v14 = (void *)MEMORY[0x22A6A7CA0](v25);
      objc_msgSend(a1, sel_setMapView_, v14);

      sub_228AD21E0((uint64_t)v25);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v23 = 0;
    char v24 = 1;
    swift_bridgeObjectRelease();
  }
  sub_228AC1A50((uint64_t)&v23, &qword_268291BD0);
LABEL_8:
  uint64_t v15 = v2 + *(int *)(type metadata accessor for _MapCompass(0) + 24);
  objc_msgSend(a1, sel_setCompassVisibility_, qword_228BB33D8[*(char *)(v15 + 1)]);
  uint64_t v16 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v15 + *(int *)(v16 + 24), v4);
  int v17 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v7, v4);
  if (v17 == *MEMORY[0x263F18550] || v17 == *MEMORY[0x263F18560] || v17 == *MEMORY[0x263F18568]) {
    goto LABEL_18;
  }
  if (v17 != *MEMORY[0x263F18558])
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
LABEL_18:
    uint64_t v20 = 1;
    return objc_msgSend(a1, sel_setCompassSize_, v20);
  }
  uint64_t v20 = 2;
  return objc_msgSend(a1, sel_setCompassSize_, v20);
}

uint64_t type metadata accessor for _MapCompass(uint64_t a1)
{
  return sub_228AC29CC(a1, (uint64_t *)&unk_2682938A0);
}

uint64_t type metadata accessor for MapCompassConfig(uint64_t a1)
{
  return sub_228AC29CC(a1, (uint64_t *)&unk_2682938B0);
}

uint64_t sub_228B67DEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_228B67E54(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_228B67EBC()
{
  unint64_t result = qword_268293870;
  if (!qword_268293870)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268293860);
    sub_228B696C4(&qword_268293878);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293870);
  }
  return result;
}

uint64_t sub_228B67F54(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_228B67FB4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for MapCompass(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_228BAC588();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    char v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = *(void *)v11;
    char v13 = v11[8];
    sub_228ACF3A4(*(void *)v11, v13);
    *(void *)char v10 = v12;
    v10[8] = v13;
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *(void *)v16;
    char v18 = v16[8];
    sub_228AD266C(*(void *)v16, v18);
    *(void *)uint64_t v15 = v17;
    v15[8] = v18;
    uint64_t v19 = a3[7];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = *(void *)v21;
    char v23 = v21[8];
    sub_228AD266C(*(void *)v21, v23);
    *(void *)uint64_t v20 = v22;
    v20[8] = v23;
    uint64_t v24 = a3[8];
    uint64_t v25 = (char *)a1 + v24;
    uint64_t v26 = (char *)a2 + v24;
    *(void *)uint64_t v25 = *(void *)v26;
    unsigned char v25[8] = v26[8];
  }
  return a1;
}

uint64_t destroy for MapCompass(uint64_t a1, int *a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  sub_228AD26A8(*(void *)(a1 + a2[5]), *(unsigned char *)(a1 + a2[5] + 8));
  sub_228AD25F8(*(void *)(a1 + a2[6]), *(unsigned char *)(a1 + a2[6] + 8));
  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = *(void *)v5;
  char v7 = *(unsigned char *)(v5 + 8);

  return sub_228AD25F8(v6, v7);
}

void *initializeWithCopy for MapCompass(void *a1, void *a2, int *a3)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_228BAC588();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)v9;
  char v11 = v9[8];
  sub_228ACF3A4(*(void *)v9, v11);
  *(void *)uint64_t v8 = v10;
  v8[8] = v11;
  uint64_t v12 = a3[6];
  char v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = *(void *)v14;
  char v16 = v14[8];
  sub_228AD266C(*(void *)v14, v16);
  *(void *)char v13 = v15;
  v13[8] = v16;
  uint64_t v17 = a3[7];
  char v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)v19;
  char v21 = v19[8];
  sub_228AD266C(*(void *)v19, v21);
  *(void *)char v18 = v20;
  v18[8] = v21;
  uint64_t v22 = a3[8];
  char v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  *(void *)char v23 = *(void *)v24;
  v23[8] = v24[8];
  return a1;
}

void *assignWithCopy for MapCompass(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_228AC1A50((uint64_t)a1, (uint64_t *)&unk_268293270);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_228BAC588();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = *(void *)v9;
  char v11 = v9[8];
  sub_228ACF3A4(*(void *)v9, v11);
  uint64_t v12 = *(void *)v8;
  char v13 = v8[8];
  *(void *)uint64_t v8 = v10;
  v8[8] = v11;
  sub_228AD26A8(v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = (char *)a1 + v14;
  char v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)v16;
  char v18 = v16[8];
  sub_228AD266C(*(void *)v16, v18);
  uint64_t v19 = *(void *)v15;
  char v20 = v15[8];
  *(void *)uint64_t v15 = v17;
  v15[8] = v18;
  sub_228AD25F8(v19, v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = (char *)a1 + v21;
  char v23 = (char *)a2 + v21;
  uint64_t v24 = *(void *)v23;
  char v25 = v23[8];
  sub_228AD266C(*(void *)v23, v25);
  uint64_t v26 = *(void *)v22;
  char v27 = v22[8];
  *(void *)uint64_t v22 = v24;
  v22[8] = v25;
  sub_228AD25F8(v26, v27);
  uint64_t v28 = a3[8];
  uint64_t v29 = (char *)a1 + v28;
  char v30 = (char *)a2 + v28;
  uint64_t v31 = *(void *)v30;
  v29[8] = v30[8];
  *(void *)uint64_t v29 = v31;
  return a1;
}

char *initializeWithTake for MapCompass(char *a1, char *a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_228BAC588();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v8];
  char v11 = &a2[v8];
  *(void *)uint64_t v10 = *(void *)v11;
  v10[8] = v11[8];
  uint64_t v12 = &a1[v9];
  char v13 = &a2[v9];
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[7];
  uint64_t v15 = a3[8];
  char v16 = &a1[v14];
  uint64_t v17 = &a2[v14];
  *(void *)char v16 = *(void *)v17;
  v16[8] = v17[8];
  char v18 = &a1[v15];
  uint64_t v19 = &a2[v15];
  *(void *)char v18 = *(void *)v19;
  v18[8] = v19[8];
  return a1;
}

char *assignWithTake for MapCompass(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_228AC1A50((uint64_t)a1, (uint64_t *)&unk_268293270);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_228BAC588();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v8 = a3[5];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = *(void *)v10;
  LOBYTE(v10) = v10[8];
  uint64_t v12 = *(void *)v9;
  char v13 = v9[8];
  *(void *)uint64_t v9 = v11;
  v9[8] = (char)v10;
  sub_228AD26A8(v12, v13);
  uint64_t v14 = a3[6];
  uint64_t v15 = &a1[v14];
  char v16 = &a2[v14];
  uint64_t v17 = *(void *)v16;
  LOBYTE(v16) = v16[8];
  uint64_t v18 = *(void *)v15;
  char v19 = v15[8];
  *(void *)uint64_t v15 = v17;
  v15[8] = (char)v16;
  sub_228AD25F8(v18, v19);
  uint64_t v20 = a3[7];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = *(void *)v22;
  LOBYTE(v22) = v22[8];
  uint64_t v24 = *(void *)v21;
  char v25 = v21[8];
  *(void *)uint64_t v21 = v23;
  unsigned char v21[8] = (char)v22;
  sub_228AD25F8(v24, v25);
  uint64_t v26 = a3[8];
  char v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  *(void *)char v27 = *(void *)v28;
  v27[8] = v28[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for MapCompass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B687F8);
}

uint64_t sub_228B687F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B80);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for MapCompass(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B688D0);
}

uint64_t sub_228B688D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B80);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  }
  return result;
}

void sub_228B68994()
{
  sub_228B52A68();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_228B68A3C()
{
  unint64_t result = qword_268293890;
  if (!qword_268293890)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268293898);
    sub_228ACD6EC();
    sub_228B67EBC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293890);
  }
  return result;
}

unint64_t sub_228B68AB8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_228ACF3A4(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    *(_WORD *)(a1 + v9) = *(_WORD *)(a2 + v9);
    uint64_t v12 = *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
    uint64_t v13 = v10 + v12;
    uint64_t v14 = v11 + v12;
    uint64_t v15 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_228B68BD4(uint64_t a1, uint64_t a2)
{
  sub_228AD26A8(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
  uint64_t v6 = sub_228BAC588();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_228B68C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_228ACF3A4(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (_WORD *)(a2 + v8);
  *(_WORD *)(a1 + v8) = *v10;
  uint64_t v11 = *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
  uint64_t v12 = v9 + v11;
  uint64_t v13 = (char *)v10 + v11;
  uint64_t v14 = sub_228BAC588();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  return a1;
}

uint64_t sub_228B68D2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_228ACF3A4(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_228AD26A8(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (unsigned char *)(a1 + v11);
  uint64_t v13 = (unsigned char *)(a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  uint64_t v14 = *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
  uint64_t v15 = &v12[v14];
  uint64_t v16 = &v13[v14];
  uint64_t v17 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_228B68E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_WORD *)(a1 + v4) = *(_WORD *)(a2 + v4);
  uint64_t v7 = *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
  uint64_t v8 = v5 + v7;
  uint64_t v9 = v6 + v7;
  uint64_t v10 = sub_228BAC588();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_228B68EBC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_228AD26A8(v8, v9);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (unsigned char *)(a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  uint64_t v13 = *(int *)(type metadata accessor for MapCompassConfig(0) + 24);
  uint64_t v14 = &v11[v13];
  uint64_t v15 = &v12[v13];
  uint64_t v16 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t sub_228B68F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B68F9C);
}

uint64_t sub_228B68F9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for MapCompassConfig(0);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_228B69044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B69058);
}

uint64_t sub_228B69058(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for MapCompassConfig(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_228B690FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_228B695FC(a1, a2, a3, (uint64_t)"\t", (uint64_t)&unk_228BB3250, type metadata accessor for MapCompassConfig);
}

uint64_t *sub_228B69124(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = sub_228BAC588();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_228B691F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = sub_228BAC588();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_WORD *sub_228B69258(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_228BAC588();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

unsigned char *sub_228B692D4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_WORD *sub_228B69358(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_228BAC588();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

unsigned char *sub_228B693D4(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_228B69458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B6946C);
}

uint64_t sub_228B6946C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = sub_228BAC588();
    uint64_t v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = &a1[*(int *)(a3 + 24)];
    return v11(v13, a2, v12);
  }
}

uint64_t sub_228B6951C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B69530);
}

unsigned char *sub_228B69530(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *unint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = sub_228BAC588();
    uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = &v5[*(int *)(a4 + 24)];
    return (unsigned char *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_228B695D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_228B695FC(a1, a2, a3, (uint64_t)&unk_228BB3298, (uint64_t)&unk_228BB32B0, MEMORY[0x263F18570]);
}

uint64_t sub_228B695FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  uint64_t result = a6(319);
  if (v7 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_228B69690()
{
  return sub_228B696C4(&qword_268293878);
}

uint64_t sub_228B696C4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _MapCompass(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_228B69708@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v7 = (char *)&v11 - v6;
  type metadata accessor for TagValueTraitKey();
  swift_getWitnessTable();
  sub_228BACE28();
  uint64_t v8 = *(void *)(a1 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a1) == 1)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v9 = 1;
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v7, a1);
    uint64_t v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a2, v9, 1, a1);
}

uint64_t MapContent.tag<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = type metadata accessor for TagValueTraitKey();
  uint64_t v11 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v9, a1, a3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, a3);
  swift_getWitnessTable();
  sub_228B82488(v10, (uint64_t)v9, a2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t type metadata accessor for TagValueTraitKey.Value()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TagValueTraitKey()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B69A9C()
{
  return swift_getWitnessTable();
}

uint64_t sub_228B69B44()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_228B69BC0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_228B69CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_228B69DC0(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_228B69EB8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *sub_228B6A024(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_228B6A11C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t sub_228B6A288(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 1;
  if (!v5) {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v7;
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v6;
  if (a2 > v6)
  {
    char v9 = 8 * v7;
    if (v7 > 3) {
      goto LABEL_8;
    }
    unsigned int v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v7);
      if (v10) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v10 = *((unsigned __int8 *)a1 + v7);
        if (!*((unsigned char *)a1 + v7)) {
          goto LABEL_25;
        }
LABEL_15:
        int v12 = (v10 - 1) << v9;
        if (v7 > 3) {
          int v12 = 0;
        }
        if (v7)
        {
          if (v7 <= 3) {
            int v13 = v7;
          }
          else {
            int v13 = 4;
          }
          switch(v13)
          {
            case 2:
              int v14 = *a1;
              break;
            case 3:
              int v14 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v14 = *(_DWORD *)a1;
              break;
            default:
              int v14 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v14 = 0;
        }
        return v6 + (v14 | v12) + 1;
      }
      int v10 = *(unsigned __int16 *)((char *)a1 + v7);
      if (*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v5 < 2) {
    return 0;
  }
  unsigned int v16 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v16 >= 2) {
    return v16 - 1;
  }
  else {
    return 0;
  }
}

void sub_228B6A428(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (v8)
  {
    size_t v10 = *(void *)(v7 + 64);
  }
  else
  {
    unsigned int v9 = 0;
    size_t v10 = *(void *)(v7 + 64) + 1;
  }
  BOOL v11 = a3 >= v9;
  unsigned int v12 = a3 - v9;
  if (v12 == 0 || !v11)
  {
LABEL_13:
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  if (v10 > 3)
  {
    int v6 = 1;
    if (v9 < a2) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
  unsigned int v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
  if (!HIWORD(v13))
  {
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
    goto LABEL_13;
  }
  int v6 = 4;
  if (v9 < a2)
  {
LABEL_14:
    unsigned int v14 = ~v9 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v16 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
LABEL_21:
  switch(v6)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x228B6A664);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v8 >= 2)
        {
          uint64_t v17 = *(void (**)(void))(v7 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t sub_228B6A68C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 1);
}

uint64_t sub_228B6A6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedShapeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_228ACF3A4(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithCopy for ResolvedShapeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_228ACF3A4(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_228AD26A8(v5, v6);
  return a1;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for ResolvedShapeStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_228AD26A8(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ResolvedShapeStyle()
{
  return &type metadata for ResolvedShapeStyle;
}

id sub_228B6A7F4(void *a1, uint64_t a2, uint64_t a3)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a3)
    {
      uint64_t v6 = *(void *)(a3 + 16);
      if (v6)
      {
        uint64_t v23 = MEMORY[0x263F8EE78];
        swift_bridgeObjectRetain();
        sub_228BAD8A8();
        sub_228B6ABA4();
        uint64_t v7 = (uint64_t *)(a3 + 48);
        do
        {
          unsigned int v8 = (void *)*(v7 - 2);
          uint64_t v9 = *(v7 - 1);
          uint64_t v10 = *v7;
          v7 += 3;
          sub_228B09CA8(v8, v9);
          sub_228B6A7F4(v8, v9, v10);
          sub_228BAD878();
          sub_228BAD8B8();
          sub_228BAD8C8();
          sub_228BAD888();
          --v6;
        }
        while (v6);
        swift_bridgeObjectRelease();
        uint64_t v11 = a1[2];
        if ((a2 & 1) == 0)
        {
          if (!v23)
          {
            unsigned int v12 = 0;
LABEL_14:
            uint64_t ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
            swift_bridgeObjectRetain();
            id v18 = objc_msgSend(ObjCClassFromMetadata, sel_polygonWithPoints_count_interiorPolygons_, a1 + 4, v11, v12);
            sub_228B09D08(a1, a2);

LABEL_19:
            swift_bridgeObjectRelease();
            return v18;
          }
LABEL_13:
          sub_228B6ABA4();
          unsigned int v12 = (void *)sub_228BAD498();
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
        if (!v23)
        {
          char v19 = 0;
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v11 = a1[2];
        if ((a2 & 1) == 0) {
          goto LABEL_13;
        }
      }
      sub_228B6ABA4();
      char v19 = (void *)sub_228BAD498();
      swift_bridgeObjectRelease();
    }
    else
    {
      char v19 = 0;
      unsigned int v12 = 0;
      uint64_t v11 = a1[2];
      if ((a2 & 1) == 0) {
        goto LABEL_14;
      }
    }
LABEL_18:
    uint64_t v21 = (void *)swift_getObjCClassFromMetadata();
    swift_bridgeObjectRetain();
    id v18 = objc_msgSend(v21, sel_polygonWithCoordinates_count_interiorPolygons_, a1 + 4, v11, v19);
    sub_228B09D08(a1, a2);

    goto LABEL_19;
  }
  unsigned int v13 = (void *)swift_getObjCClassFromMetadata();
  unsigned int v14 = a1;
  id v15 = objc_msgSend(v14, sel_points);
  id v16 = objc_msgSend(v14, sel_pointCount);
  id v17 = objc_msgSend(v14, sel_interiorPolygons);
  id v18 = objc_msgSend(v13, sel_polygonWithPoints_count_interiorPolygons_, v15, v16, v17);
  sub_228B09D08(a1, a2);

  return v18;
}

uint64_t sub_228B6AAD4(uint64_t a1, uint64_t a2)
{
  return sub_228B6ABE4(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8));
}

uint64_t sub_228B6AAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)a2;
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a2 + 8))
    {
      JUMPOUT(0x22A6A69F0);
    }
    return 0;
  }
  if (*(unsigned char *)(a2 + 8)) {
    return 0;
  }
  sub_228ACF3A4(*(void *)a1, 0);
  sub_228ACF3A4(v3, 0);
  char v5 = sub_228BAD0F8();
  sub_228AD26A8(v3, 0);
  sub_228AD26A8(v2, 0);
  return v5 & 1;
}

unint64_t sub_228B6ABA4()
{
  unint64_t result = qword_2682926B0;
  if (!qword_2682926B0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2682926B0);
  }
  return result;
}

uint64_t sub_228B6ABE4(uint64_t a1, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if ((a4 & 1) != 0 && *(void *)(a1 + 16) == *(void *)(a3 + 16))
    {
      char v6 = sub_228B00F54(a1, a3);
      return v6 & 1;
    }
LABEL_8:
    char v6 = 0;
    return v6 & 1;
  }
  if ((a4 & 1) != 0 || *(void *)(a1 + 16) != *(void *)(a3 + 16)) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v6 = sub_228B00E94(a1, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t sub_228B6AC9C(void *a1, uint64_t a2)
{
  sub_228B099C8((uint64_t)a1, (uint64_t)v9);
  __swift_instantiateConcreteTypeFromMangledName(qword_2682939C8);
  if (swift_dynamicCast())
  {
    uint64_t v4 = v8;
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v5 = sub_228BAC548();
    if (!v5) {
      uint64_t v5 = sub_228BAD108();
    }
    uint64_t v4 = v5;
  }
  uint64_t v6 = sub_228BACAF8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a2, v6);
  __swift_destroy_boxed_opaque_existential_0((uint64_t)a1);
  return v4;
}

uint64_t initializeBufferWithCopyOfBuffer for MultiPoint(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for MultiPoint()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for MultiPoint(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MultiPoint(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentifiableMapItem.MapItemIdentity(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentifiableMapItem.MapItemIdentity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_228B6AEE4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_228B6AEEC(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for MultiPoint()
{
  return &type metadata for MultiPoint;
}

uint64_t Annotation.init(coordinate:anchor:accessoryAnchor:content:label:)@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t)@<X0>, uint64_t (*a2)(uint64_t)@<X2>, double *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>, double a8@<D4>, double a9@<D5>)
{
  uint64_t v18 = type metadata accessor for Annotation();
  *(double *)((char *)a3 + *(int *)(v18 + 64)) = 0.0;
  char v19 = (double *)((char *)a3 + *(int *)(v18 + 68));
  *a3 = a4;
  a3[1] = a5;
  a3[2] = a6;
  a3[3] = a7;
  *char v19 = a8;
  v19[1] = a9;
  *((unsigned char *)v19 + 16) = 0;
  uint64_t v23 = a1(v18, v20, v21, v22);
  return a2(v23);
}

uint64_t type metadata accessor for Annotation()
{
  return swift_getGenericMetadata();
}

uint64_t Annotation.init(coordinate:anchor:content:label:)@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t)@<X0>, uint64_t (*a2)(uint64_t)@<X2>, double *a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  sub_228BAD2D8();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v18 = type metadata accessor for Annotation();
  *(double *)((char *)a3 + *(int *)(v18 + 64)) = 0.0;
  char v19 = (char *)a3 + *(int *)(v18 + 68);
  *a3 = a4;
  a3[1] = a5;
  a3[2] = a6;
  a3[3] = a7;
  *(void *)char v19 = v15;
  *((void *)v19 + 1) = v17;
  v19[16] = 0;
  uint64_t v23 = a1(v18, v20, v21, v22);
  return a2(v23);
}

uint64_t Annotation.init<>(_:coordinate:anchor:accessoryAnchor:content:)@<X0>(void (*a1)(void)@<X4>, double *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, double a8@<D5>)
{
  uint64_t v16 = (int *)type metadata accessor for Annotation();
  *(double *)((char *)a2 + v16[16]) = 0.0;
  uint64_t v17 = (double *)((char *)a2 + v16[17]);
  *a2 = a3;
  a2[1] = a4;
  a2[2] = a5;
  a2[3] = a6;
  *uint64_t v17 = a7;
  v17[1] = a8;
  *((unsigned char *)v17 + 16) = 0;
  a1();
  uint64_t result = sub_228BACFA8();
  char v19 = (char *)a2 + v16[15];
  *(void *)char v19 = result;
  *((void *)v19 + 1) = v20;
  v19[16] = v21 & 1;
  *((void *)v19 + 3) = v22;
  return result;
}

uint64_t Annotation.init<>(_:coordinate:anchor:content:)@<X0>(void (*a1)(void)@<X4>, double *a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  sub_228BAD2D8();

  return Annotation.init<>(_:coordinate:anchor:accessoryAnchor:content:)(a1, a2, a3, a4, a5, a6, v12, v13);
}

uint64_t Annotation.init<A>(_:coordinate:anchor:accessoryAnchor:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X4>, double *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>, double a10@<D5>)
{
  uint64_t v20 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v22 = (char *)v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35[0] = MEMORY[0x263F1A830];
  v35[1] = v23;
  v35[2] = MEMORY[0x263F1A820];
  v35[3] = v24;
  char v25 = (int *)type metadata accessor for Annotation();
  *(double *)((char *)a4 + v25[16]) = 0.0;
  uint64_t v26 = (double *)((char *)a4 + v25[17]);
  *a4 = a5;
  a4[1] = a6;
  a4[2] = a7;
  a4[3] = a8;
  *uint64_t v26 = a9;
  v26[1] = a10;
  *((unsigned char *)v26 + 16) = 0;
  a2();
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, a1, a3);
  uint64_t v27 = sub_228BACFB8();
  uint64_t v29 = v28;
  LOBYTE(a2) = v30;
  uint64_t v32 = v31;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(a1, a3);
  char v34 = (char *)a4 + v25[15];
  *(void *)char v34 = v27;
  *((void *)v34 + 1) = v29;
  v34[16] = a2 & 1;
  *((void *)v34 + 3) = v32;
  return result;
}

uint64_t Annotation.init<A>(_:coordinate:anchor:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X4>, double *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  uint64_t v16 = *(void *)(a3 - 8);
  __n128 v17 = MEMORY[0x270FA5388](a1);
  char v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))(v19, a1, v20, v17);
  sub_228BAD2D8();
  Annotation.init<A>(_:coordinate:anchor:accessoryAnchor:content:)((uint64_t)v19, a2, a3, a4, a5, a6, a7, a8, v21, v22);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(a1, a3);
}

uint64_t Annotation.init<>(item:anchor:accessoryAnchor:content:)@<X0>(void *a1@<X0>, void (*a2)(int *, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  id v18 = objc_msgSend(a1, sel_placemark);
  id v19 = objc_msgSend(v18, sel_location);

  if (v19)
  {
    objc_msgSend(v19, sel_coordinate);
    uint64_t v21 = v20;
    uint64_t v23 = v22;
  }
  else
  {
    uint64_t v23 = 0;
    uint64_t v21 = 0;
  }
  *(void *)a5 = v21;
  *(void *)(a5 + 8) = v23;
  *(double *)(a5 + 16) = a6;
  *(double *)(a5 + 24) = a7;
  uint64_t v37 = MEMORY[0x263F1A830];
  uint64_t v38 = MEMORY[0x263F1A820];
  uint64_t v39 = a4;
  uint64_t v24 = (int *)type metadata accessor for Annotation();
  a2(v24, v25, v26, v27);
  id v28 = objc_msgSend(a1, sel_name, v37, a3, v38, v39);
  if (v28)
  {
    uint64_t v29 = v28;
    sub_228BAD408();
  }
  uint64_t v30 = v24[16];
  uint64_t v31 = a5 + v24[17];
  sub_228AD4E0C();
  uint64_t result = sub_228BACFB8();
  uint64_t v33 = a5 + v24[15];
  *(void *)uint64_t v33 = result;
  *(void *)(v33 + 8) = v34;
  *(unsigned char *)(v33 + 16) = v35 & 1;
  *(void *)(v33 + 24) = v36;
  *(void *)(a5 + v30) = a1;
  *(double *)uint64_t v31 = a8;
  *(double *)(v31 + 8) = a9;
  *(unsigned char *)(v31 + 16) = 0;
  return result;
}

uint64_t static Annotation._mapContentCount(inputs:)()
{
  return 1;
}

uint64_t static Annotation._makeMapContent(content:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v51 = a2;
  uint64_t v49 = a1;
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291D38);
  uint64_t v47 = *(void *)(v48 - 8);
  uint64_t v50 = *(unint64_t **)(v47 + 64);
  MEMORY[0x270FA5388](v48);
  double v13 = (unsigned int *)((char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291D40);
  uint64_t v53 = *(void *)(v14 - 8);
  uint64_t v54 = v14;
  uint64_t v15 = *(void *)(v53 + 64);
  MEMORY[0x270FA5388](v14);
  uint64_t v46 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v18 = (char *)&v40 - v17;
  uint64_t v44 = sub_228BAC5E8();
  uint64_t v43 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v45 = a7;
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  uint64_t v55 = a3;
  unint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v58 = a6;
  unint64_t v63 = a3;
  unint64_t v64 = a4;
  unint64_t v40 = a4;
  uint64_t v65 = a5;
  uint64_t v66 = a6;
  uint64_t v41 = a6;
  type metadata accessor for Annotation();
  sub_228BAC5E8();
  uint64_t v21 = v49;
  sub_228B538E4((void (*)(uint64_t))sub_228B6BDE4, a3, (uint64_t)v20);
  uint64_t v22 = type metadata accessor for _MapContentInputs(0);
  uint64_t v23 = v51;
  uint64_t v52 = v18;
  uint64_t v42 = v20;
  uint64_t v24 = a5;
  uint64_t v25 = a3;
  sub_228BACB98();
  unsigned int v26 = sub_228ACB118(v21);
  uint64_t v27 = v23;
  sub_228BACB28();
  if (v50 != (unint64_t *)4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  unsigned int v28 = *v13;
  (*(void (**)(unsigned int *, uint64_t))(v47 + 8))(v13, v48);
  uint64_t v29 = v46;
  uint64_t v30 = v54;
  (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v46, v52, v54);
  if (v15 != 4) {
    goto LABEL_5;
  }
  unsigned int v31 = *(_DWORD *)v29;
  uint64_t v53 = *(void *)(v53 + 8);
  uint64_t v32 = ((uint64_t (*)(char *, uint64_t))v53)(v29, v30);
  uint64_t v50 = &v40;
  unsigned int v33 = *(_DWORD *)(v27 + *(int *)(v22 + 28));
  unint64_t v63 = __PAIR64__(v28, v26);
  unint64_t v64 = __PAIR64__(v33, v31);
  LODWORD(v65) = 0;
  uint64_t v66 = 0;
  __int16 v67 = 771;
  char v68 = 6;
  MEMORY[0x270FA5388](v32);
  uint64_t v59 = v25;
  unint64_t v60 = v40;
  uint64_t v61 = v24;
  uint64_t v62 = v41;
  uint64_t List = type metadata accessor for Annotation.MakeList();
  *(&v40 - 2) = List;
  *(&v40 - 1) = swift_getWitnessTable();
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291D48);
  sub_228AC7E20((uint64_t)&v63, (uint64_t)sub_228AD7F3C, (uint64_t)(&v40 - 4), List, MEMORY[0x263F8E628], v35, MEMORY[0x263F8E658], v36);
  uint64_t v37 = swift_release();
  MEMORY[0x270FA5388](v37);
  *((_DWORD *)&v40 - 4) = v38;
  sub_228AC1BFC();
  sub_228BACD88();
  ((void (*)(char *, uint64_t))v53)(v52, v54);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v44);
}

uint64_t sub_228B6BD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for Annotation();
  uint64_t v8 = a1 + *(int *)(v7 + 60);
  v12[2] = v7;
  v12[3] = a2;
  uint64_t v9 = sub_228BAC4A8();
  sub_228B3C21C(v8, (uint64_t)sub_228AD903C, (uint64_t)v12, a2, MEMORY[0x263F8E628], v9, MEMORY[0x263F8E658], v10);
  return v13;
}

uint64_t sub_228B6BDE4(uint64_t a1)
{
  return sub_228B6BD3C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_228B6BDF0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v150 = *MEMORY[0x263EF8340];
  uint64_t v129 = type metadata accessor for MapContentList.Item.Content(0);
  MEMORY[0x270FA5388](v129);
  uint64_t v132 = (uint64_t)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v130 = type metadata accessor for MapContentList.Item(0);
  uint64_t v131 = *(void *)(v130 - 8);
  MEMORY[0x270FA5388](v130);
  unint64_t v133 = (uint64_t *)((char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = (void *)a1[3];
  uint64_t v125 = *(v6 - 1);
  MEMORY[0x270FA5388](v7);
  unsigned int v123 = (char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = type metadata accessor for ResolvedAnnotation();
  MEMORY[0x270FA5388](v128);
  int v124 = (char *)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = sub_228BACAF8();
  uint64_t v141 = *(void *)(v145 - 8);
  MEMORY[0x270FA5388](v145);
  uint64_t v11 = (char *)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_228BACBE8();
  uint64_t v140 = *(void *)(v144 - 8);
  MEMORY[0x270FA5388](v144);
  unint64_t v143 = (char *)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291F60);
  MEMORY[0x270FA5388](v139);
  uint64_t v14 = (char *)&v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v112 - v16;
  uint64_t v18 = sub_228BACE18();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v126 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  unint64_t v142 = (char *)&v112 - v22;
  uint64_t v23 = a1[4];
  uint64_t v24 = a1[5];
  *(void *)&long long v146 = a1[2];
  *((void *)&v146 + 1) = v6;
  id v127 = v6;
  uint64_t v147 = v23;
  uint64_t v148 = v24;
  uint64_t v120 = v24;
  uint64_t v25 = type metadata accessor for Annotation();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  unsigned int v28 = (char *)&v112 - v27;
  LODWORD(a1) = *((_DWORD *)v2 + 3);
  uint64_t Value = AGGraphGetValue();
  uint64_t v117 = v30;
  uint64_t v134 = v26;
  unsigned int v31 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
  unint64_t v136 = v28;
  uint64_t v137 = v25;
  uint64_t v32 = v28;
  uint64_t v33 = v139;
  v31(v32, Value, v25);
  uint64_t v34 = *(int *)(v33 + 48);
  int v35 = *MEMORY[0x263F288F8];
  uint64_t v138 = v19;
  if (a1 == v35)
  {
    sub_228BACE08();
    int v42 = 0;
    unint64_t v40 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    uint64_t v41 = (v19 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  }
  else
  {
    uint64_t v36 = AGGraphGetValue();
    char v38 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v14, v36, v18);
    v14[v34] = v38 & 1;
    uint64_t v39 = *(int *)(v33 + 48);
    unint64_t v40 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    uint64_t v41 = (v19 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v40(v17, v14, v18);
    int v42 = v14[v39];
  }
  int v116 = v42;
  v17[v34] = v42;
  uint64_t v139 = v18;
  uint64_t v121 = v41;
  uint64_t v122 = (void (*)(uint64_t, char *, uint64_t))v40;
  __n128 v43 = ((__n128 (*)(char *, char *, uint64_t))v40)(v142, v17, v18);
  int v44 = *((_DWORD *)v2 + 4);
  uint64_t v45 = v2[3];
  __int16 v46 = *((_WORD *)v2 + 16);
  char v47 = *((unsigned char *)v2 + 34);
  uint64_t v48 = v140 + 16;
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v140 + 16);
  uint64_t v50 = *v2;
  v43.n128_u64[0] = v2[1];
  __n128 v135 = v43;
  uint64_t v51 = v144;
  uint64_t v52 = AGGraphGetValue();
  *(void *)&long long v115 = v53;
  uint64_t v119 = v48;
  uint64_t v118 = v49;
  v49(v143, (char *)v52, v51);
  *(void *)&long long v146 = v50;
  *((void *)&v146 + 1) = v135.n128_u64[0];
  LODWORD(v147) = v44;
  uint64_t v148 = v45;
  *(_WORD *)unsigned int v149 = v46;
  v149[2] = v47;
  sub_228ADAE44((uint64_t)v11);
  uint64_t v54 = sub_228BAC9D8();
  uint64_t v55 = *(void *)(v141 + 8);
  ((void (*)(char *, uint64_t))v55)(v11, v145);
  uint64_t v56 = v2[3];
  unsigned __int32 v57 = (v54 | v56) == 0;
  if (v54)
  {
    uint64_t v58 = v138;
    if (v56)
    {
      swift_retain();
      swift_retain();
      unsigned __int32 v57 = sub_228BAD0F8();
      swift_release();
      swift_release();
    }
  }
  else
  {
    uint64_t v58 = v138;
  }
  v135.n128_u32[0] = v57;
  int v59 = *((_DWORD *)v2 + 4);
  __int16 v60 = *((_WORD *)v2 + 16);
  char v61 = *((unsigned char *)v2 + 34);
  long long v146 = *(_OWORD *)v2;
  LODWORD(v147) = v59;
  uint64_t v148 = v56;
  *(_WORD *)unsigned int v149 = v60;
  v149[2] = v61;
  sub_228ADAE44((uint64_t)v11);
  sub_228AD2DAC();
  sub_228BACB08();
  unsigned __int32 v62 = v146;
  ((void (*)(char *, uint64_t))v55)(v11, v145);
  int v63 = *((unsigned __int8 *)v2 + 32);
  uint64_t v64 = v139;
  if (v63 == 3) {
    int v65 = 1;
  }
  else {
    int v65 = sub_228BAC558() ^ 1;
  }
  int v114 = v65;
  int v66 = *((_DWORD *)v2 + 4);
  uint64_t v67 = v2[3];
  __int16 v68 = *(_WORD *)((char *)v2 + 33);
  long long v146 = *(_OWORD *)v2;
  LODWORD(v147) = v66;
  uint64_t v148 = v67;
  v149[0] = v63;
  *(_WORD *)&v149[1] = v68;
  sub_228ADAE44((uint64_t)v11);
  sub_228AD2D58();
  sub_228BACB08();
  int v69 = v146;
  ((void (*)(char *, uint64_t))v55)(v11, v145);
  int v70 = *((unsigned __int8 *)v2 + 33);
  LODWORD(v141) = v69;
  if (v70 == 3) {
    int v71 = 1;
  }
  else {
    int v71 = sub_228BAC558() ^ 1;
  }
  int v113 = v71;
  int v72 = *((_DWORD *)v2 + 4);
  uint64_t v73 = v2[3];
  char v74 = *((unsigned char *)v2 + 32);
  char v75 = *((unsigned char *)v2 + 34);
  long long v146 = *(_OWORD *)v2;
  LODWORD(v147) = v72;
  uint64_t v148 = v73;
  v149[0] = v74;
  v149[1] = v70;
  v149[2] = v75;
  sub_228ADAE44((uint64_t)v11);
  sub_228AD4B34();
  sub_228BACB08();
  ((void (*)(char *, uint64_t))v55)(v11, v145);
  LODWORD(v55) = v146;
  int v76 = *((unsigned __int8 *)v2 + 34);
  uint64_t v77 = v64;
  if (v146 == 6)
  {
    char v78 = v141;
    if ((v76 != 6) | v117 & 1 | (v116 != 0) | v115 & 1 | v114 & 1 | v113 & 1 | (v135.n128_u32[0] ^ 1) & 1) {
      goto LABEL_29;
    }
LABEL_28:
    if (AGGraphGetOutputValue()) {
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  char v78 = v141;
  if (v76 != 6)
  {
    switch(v146)
    {
      case 5u:
        BOOL v79 = v116 != 0;
        BOOL v80 = v76 == 5;
        break;
      case 4u:
        BOOL v79 = v116 != 0;
        BOOL v80 = v76 == 4;
        break;
      case 3u:
        BOOL v79 = v116 != 0;
        BOOL v80 = v76 == 3;
        break;
      default:
        if ((v76 - 3) < 3
          || v117 & 1 | (v116 != 0) | v115 & 1 | v114 & 1 | v113 & 1 | (v135.n128_u32[0] ^ 1) & 1
          || v146 != v76)
        {
          goto LABEL_29;
        }
        goto LABEL_28;
    }
    int v81 = !v80;
    if (((v81 | v117 | v79 | v115 | v114 | v113 | v135.n128_u32[0] ^ 1) & 1) == 0) {
      goto LABEL_28;
    }
  }
LABEL_29:
  int v116 = *((_DWORD *)v2 + 4) + 1;
  *((_DWORD *)v2 + 4) = v116;
  uint64_t v82 = v136;
  long long v115 = *(_OWORD *)v136;
  uint64_t v83 = *((void *)v136 + 2);
  uint64_t v84 = *((void *)v136 + 3);
  LODWORD(v117) = v55;
  uint64_t v55 = v128;
  uint64_t v85 = *(int *)(v128 + 24);
  v135.n128_u32[0] = v62;
  unsigned int v86 = v124;
  v118(&v124[v85], v143, v144);
  uint64_t v87 = v137;
  uint64_t v88 = &v82[*(int *)(v137 + 56)];
  int v89 = *(void (**)(char *, char *, id))(v125 + 16);
  uint64_t v145 = v54;
  v89(v123, v88, v127);
  uint64_t v90 = sub_228BAD1C8();
  uint64_t v91 = *(int *)(v87 + 64);
  uint64_t v92 = &v82[*(int *)(v87 + 68)];
  uint64_t v93 = *(void *)v92;
  uint64_t v125 = *((void *)v92 + 1);
  id v127 = *(id *)&v82[v91];
  id v94 = v127;
  LODWORD(v123) = v92[16];
  uint64_t v95 = &v86[*(int *)(v55 + 56)];
  uint64_t v96 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
  uint64_t v97 = (uint64_t)v86;
  uint64_t v98 = v142;
  v96(v95, v142, v77);
  *(_OWORD *)uint64_t v97 = v115;
  *(void *)(v97 + 16) = v83;
  *(void *)(v97 + 24) = v84;
  *(void *)(v97 + *(int *)(v55 + 28)) = v90;
  *(void *)(v97 + *(int *)(v55 + 32)) = v145;
  *(unsigned char *)(v97 + *(int *)(v55 + 36)) = v135.n128_u8[0];
  *(unsigned char *)(v97 + *(int *)(v55 + 40)) = v141;
  uint64_t v99 = v97 + *(int *)(v55 + 44);
  uint64_t v100 = v125;
  *(void *)uint64_t v99 = v93;
  *(void *)(v99 + 8) = v100;
  *(unsigned char *)(v99 + 16) = (_BYTE)v123;
  *(void *)(v97 + *(int *)(v55 + 48)) = v94;
  uint64_t v101 = *(int *)(v55 + 52);
  LOBYTE(v55) = v117;
  *(unsigned char *)(v97 + v101) = v117;
  unsigned int v102 = v126;
  v96(v126, v98, v77);
  uint64_t v54 = v145;
  uint64_t v103 = v132;
  sub_228B6DACC(v97, v132, (uint64_t (*)(void))type metadata accessor for ResolvedAnnotation);
  swift_storeEnumTagMultiPayload();
  sub_228ACAF54();
  swift_retain();
  id v104 = v127;
  sub_228BACE28();
  uint64_t v105 = v146;
  if (!(void)v146)
  {
    __swift_instantiateConcreteTypeFromMangledName(qword_268291998);
    uint64_t v105 = swift_allocObject();
    *(_OWORD *)(v105 + 16) = xmmword_228BAF4E0;
    *(void *)(v105 + 32) = 0;
    *(unsigned char *)(v105 + 72) = 0;
  }
  uint64_t v106 = (uint64_t)v133;
  uint64_t *v133 = v105;
  uint64_t v107 = v130;
  uint64_t v77 = v139;
  v122(v106 + *(int *)(v130 + 28), v102, v139);
  *(_DWORD *)(v106 + 8) = v116;
  sub_228AD8F10(v103, v106 + *(int *)(v107 + 24));
  __swift_instantiateConcreteTypeFromMangledName(&qword_268291F68);
  unint64_t v108 = (*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80);
  uint64_t v109 = swift_allocObject();
  *(_OWORD *)(v109 + 16) = xmmword_228BAF4E0;
  sub_228B6DACC(v106, v109 + v108, type metadata accessor for MapContentList.Item);
  *(void *)&long long v146 = sub_228B78CF8(v109);
  *((void *)&v146 + 1) = v110;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  sub_228B6DB34(v106, type metadata accessor for MapContentList.Item);
  sub_228B6DB34(v97, (uint64_t (*)(void))type metadata accessor for ResolvedAnnotation);
  uint64_t v58 = v138;
  LOBYTE(v62) = v135.n128_u8[0];
  char v78 = v141;
LABEL_32:
  *((unsigned char *)v2 + 34) = v55;
  *((unsigned char *)v2 + 33) = v78;
  *((unsigned char *)v2 + 32) = v62;
  v2[3] = v54;
  swift_release();
  (*(void (**)(char *, uint64_t))(v140 + 8))(v143, v144);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v142, v77);
  return (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v136, v137);
}

uint64_t sub_228B6CC30@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static Annotation._makeMapContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), a4);
}

uint64_t type metadata accessor for Annotation.MakeList()
{
  return swift_getGenericMetadata();
}

uint64_t sub_228B6CC58()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_228B6CD48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 7;
  if ((v9 | v5) > 7
    || ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || ((((v11 + ((v6 + v9 + ((v5 + 32) & ~v5)) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v14 = *a2;
    *unsigned int v3 = *a2;
    unsigned int v3 = (uint64_t *)(v14 + (((v9 | v5) & 0xF8 ^ 0x1F8) & ((v9 | v5) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v9;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v16 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v16 = *v17;
    uint64_t v18 = ((unint64_t)v16 + v5 + 16) & ~v5;
    uint64_t v19 = ((unint64_t)v17 + v5 + 16) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v18, v19);
    uint64_t v20 = (v18 + v10) & v15;
    uint64_t v21 = (v19 + v10) & v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v20, v21, v7);
    uint64_t v22 = (void *)((v11 + v20) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = (void **)((v11 + v21) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = *v23;
    *uint64_t v22 = *v23;
    unint64_t v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    long long v26 = *(_OWORD *)v25;
    unint64_t v27 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)(v27 + 16) = *(unsigned char *)(v25 + 16);
    *(_OWORD *)unint64_t v27 = v26;
    id v28 = v24;
  }
  return v3;
}

void sub_228B6CF4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v4 = v3 + 8;
  unint64_t v5 = (((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  (*(void (**)(unint64_t))(v3 + 8))(v5);
  uint64_t v6 = *(void *)(v4 + 56);
  uint64_t v7 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v8 = v7 + 8;
  unint64_t v9 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v9);
  uint64_t v10 = *(void **)((*(void *)(v8 + 56) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
}

_OWORD *sub_228B6D024(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v5 = *v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v5 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)v6 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 48);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = v13 + 16;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = (v16 + v10) & ~v15;
  uint64_t v18 = (v16 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 16))(v17, v18);
  uint64_t v19 = *(void *)(v14 + 48) + 7;
  uint64_t v20 = (void *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void **)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = *v21;
  *uint64_t v20 = *v21;
  unint64_t v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v25 = *(unsigned char *)(v24 + 16);
  *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
  *(unsigned char *)(v23 + 16) = v25;
  id v26 = v22;
  return a1;
}

void *sub_228B6D154(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  unint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v5 = *v6;
  v5[1] = v6[1];
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v5 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)v6 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 40);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = (v16 + v10) & ~v15;
  uint64_t v18 = (v16 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v17, v18);
  uint64_t v19 = *(void *)(v14 + 40) + 7;
  uint64_t v20 = (void **)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v21 = (v19 + v18) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void **)v21;
  v21 += 15;
  unint64_t v23 = *v20;
  *uint64_t v20 = v22;
  id v24 = v22;

  unint64_t v25 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v26 = *(_OWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v25 + 16) = *(unsigned char *)((v21 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_OWORD *)unint64_t v25 = v26;
  return a1;
}

_OWORD *sub_228B6D29C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v5 = *v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v5 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)v6 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 32);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = v13 + 32;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = (v16 + v10) & ~v15;
  uint64_t v18 = (v16 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v17, v18);
  uint64_t v19 = *(void *)(v14 + 32) + 7;
  uint64_t v20 = (void *)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v21 = (void *)((v19 + v18) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  unint64_t v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v24 = *(unsigned char *)(v23 + 16);
  *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
  *(unsigned char *)(v22 + 16) = v24;
  return a1;
}

_OWORD *sub_228B6D3C8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v5 = *v6;
  v5[1] = v6[1];
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v5 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)v6 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = v13 + 40;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = (v16 + v10) & ~v15;
  uint64_t v18 = (v16 + v11) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v17, v18);
  uint64_t v19 = *(void *)(v14 + 24) + 7;
  uint64_t v20 = (void **)((v19 + v17) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v21 = (v19 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = *(void **)v21;
  v21 += 15;
  unint64_t v23 = *v20;
  *uint64_t v20 = v22;

  unint64_t v24 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v25 = *(_OWORD *)(v21 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v24 + 16) = *(unsigned char *)((v21 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(_OWORD *)unint64_t v24 = v25;
  return a1;
}

uint64_t sub_228B6D500(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= v5) {
    unsigned int v11 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v6 + 84);
  }
  if (v11 <= 0x7FFFFFFE) {
    unsigned int v11 = 2147483646;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(v6 + 64) + 7;
  if (v11 < a2)
  {
    unint64_t v13 = ((((v12 + ((v9 + v10 + ((v8 + 32) & ~v8)) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v14 = (a2 - v11 + 255) >> (8 * v13);
    if (v13 < 4) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = a1[v13];
        if (!a1[v13]) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v17 = *(unsigned __int16 *)&a1[v13];
        if (*(_WORD *)&a1[v13]) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x228B6D728);
      case 4:
        int v17 = *(_DWORD *)&a1[v13];
        if (!v17) {
          break;
        }
LABEL_24:
        int v19 = (v17 - 1) << (8 * v13);
        if (v13 >= 4) {
          int v19 = 0;
        }
        if (((((v12 + ((v9 + v10 + ((v8 + 32) & ~v8)) & ~v10)) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
          int v20 = *a1;
        else {
          int v20 = *(_DWORD *)a1;
        }
        return v11 + (v20 | v19) + 1;
      default:
        break;
    }
  }
  unint64_t v21 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v8 + 16) & ~v8;
  if (v5 == v11) {
    return (*(uint64_t (**)(unint64_t, uint64_t, void))(v4 + 48))(v21, v5, *(void *)(a3 + 24));
  }
  unint64_t v22 = (v21 + v9 + v10) & ~v10;
  if (v7 == v11) {
    return (*(uint64_t (**)(unint64_t))(v6 + 48))(v22);
  }
  unint64_t v23 = *(void *)((v12 + v22) & 0xFFFFFFFFFFFFFFF8);
  if (v23 >= 0xFFFFFFFF) {
    LODWORD(v23) = -1;
  }
  if ((v23 + 1) >= 2) {
    return v23;
  }
  else {
    return 0;
  }
}

void sub_228B6D73C(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v14 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  if (v14 <= 0x7FFFFFFE) {
    unsigned int v14 = 2147483646;
  }
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  size_t v16 = ((((v15 + ((v12 + v13 + ((v11 + 32) & ~v11)) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v17 = 8 * v16;
  if (v14 >= a3)
  {
    int v21 = 0;
    if (v14 >= a2)
    {
LABEL_19:
      switch(v21)
      {
        case 1:
          a1[v16] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 2:
          *(_WORD *)&a1[v16] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_52;
        case 4:
          *(_DWORD *)&a1[v16] = 0;
          goto LABEL_35;
        default:
LABEL_35:
          if (a2)
          {
LABEL_36:
            unint64_t v24 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v11 + 16) & ~v11;
            if (v7 == v14)
            {
              long long v25 = *(void (**)(unint64_t))(v6 + 56);
              v25(v24);
            }
            else
            {
              unint64_t v26 = (v24 + v12 + v13) & ~v13;
              if (v10 == v14)
              {
                unint64_t v27 = *(void (**)(unint64_t))(v9 + 56);
                v27(v26);
              }
              else
              {
                id v28 = (void *)((v15 + v26) & 0xFFFFFFFFFFFFFFF8);
                if (a2 > 0x7FFFFFFE)
                {
                  *id v28 = 0;
                  *(_DWORD *)id v28 = a2 - 0x7FFFFFFF;
                }
                else
                {
                  *id v28 = a2;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v18 = (a3 - v14 + 255) >> v17;
    if (v16 <= 3) {
      unsigned int v19 = v18 + 1;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v19 >= 0x10000) {
      int v20 = 4;
    }
    else {
      int v20 = 2;
    }
    if (v19 < 0x100) {
      int v20 = 1;
    }
    if (v19 >= 2) {
      int v21 = v20;
    }
    else {
      int v21 = 0;
    }
    if (v14 >= a2) {
      goto LABEL_19;
    }
  }
  if (v16 < 4) {
    unsigned int v22 = ((~v14 + a2) >> v17) + 1;
  }
  else {
    unsigned int v22 = 1;
  }
  if (v16 >= 4) {
    unsigned int v23 = ~v14 + a2;
  }
  else {
    unsigned int v23 = (~(_BYTE)v14 + a2);
  }
  bzero(a1, v16);
  if (v16 == 1) {
    *a1 = v23;
  }
  else {
    *(_DWORD *)a1 = v23;
  }
  switch(v21)
  {
    case 1:
      a1[v16] = v22;
      break;
    case 2:
      *(_WORD *)&a1[v16] = v22;
      break;
    case 3:
LABEL_52:
      __break(1u);
      JUMPOUT(0x228B6DA3CLL);
    case 4:
      *(_DWORD *)&a1[v16] = v22;
      break;
    default:
      return;
  }
}

uint64_t sub_228B6DA64()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ResolvedAnnotation()
{
  uint64_t result = qword_268293AD0;
  if (!qword_268293AD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_228B6DACC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_228B6DB34(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_228B6DB94(_OWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v7;
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    uint64_t v11 = sub_228BACBE8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[8];
    *(void *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(void *)((char *)v4 + v12) = *(uint64_t *)((char *)a2 + v12);
    uint64_t v13 = a3[10];
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)v4 + v13) = *((unsigned char *)a2 + v13);
    uint64_t v14 = a3[11];
    uint64_t v15 = a3[12];
    size_t v16 = (char *)v4 + v14;
    uint64_t v17 = (uint64_t)a2 + v14;
    *(_OWORD *)size_t v16 = *(_OWORD *)v17;
    v16[16] = *(unsigned char *)(v17 + 16);
    unsigned int v18 = *(void **)((char *)a2 + v15);
    *(void *)((char *)v4 + v15) = v18;
    uint64_t v19 = a3[13];
    uint64_t v20 = a3[14];
    int v21 = (char *)v4 + v20;
    uint64_t v22 = (uint64_t)a2 + v20;
    *((unsigned char *)v4 + v19) = *((unsigned char *)a2 + v19);
    uint64_t v23 = sub_228BACE18();
    unint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16);
    swift_retain();
    swift_retain();
    id v25 = v18;
    v24(v21, v22, v23);
  }
  return v4;
}

uint64_t sub_228B6DD34(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_228BACBE8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  swift_release();

  uint64_t v6 = a1 + a2[14];
  uint64_t v7 = sub_228BACE18();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

_OWORD *sub_228B6DE10(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_228BACBE8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v13 = a3[11];
  uint64_t v14 = a3[12];
  uint64_t v15 = (char *)a1 + v13;
  size_t v16 = (char *)a2 + v13;
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  v15[16] = v16[16];
  uint64_t v17 = *(void **)((char *)a2 + v14);
  *(void *)((char *)a1 + v14) = v17;
  uint64_t v18 = a3[13];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  int v21 = (char *)a2 + v19;
  *((unsigned char *)a1 + v18) = *((unsigned char *)a2 + v18);
  uint64_t v22 = sub_228BACE18();
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
  swift_retain();
  swift_retain();
  id v24 = v17;
  v23(v20, v21, v22);
  return a1;
}

void *sub_228B6DF60(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_228BACBE8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
  uint64_t v10 = a3[11];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  long long v13 = *(_OWORD *)v12;
  v11[16] = v12[16];
  *(_OWORD *)uint64_t v11 = v13;
  uint64_t v14 = a3[12];
  uint64_t v15 = *(void **)((char *)a1 + v14);
  size_t v16 = *(void **)((char *)a2 + v14);
  *(void *)((char *)a1 + v14) = v16;
  id v17 = v16;

  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  uint64_t v18 = a3[14];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = sub_228BACE18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_OWORD *sub_228B6E0DC(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_228BACBE8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v11) = *(void *)((char *)a2 + v11);
  uint64_t v12 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v13 = a3[11];
  uint64_t v14 = a3[12];
  uint64_t v15 = (char *)a1 + v13;
  size_t v16 = (char *)a2 + v13;
  long long v17 = *(_OWORD *)v16;
  v15[16] = v16[16];
  *(_OWORD *)uint64_t v15 = v17;
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  uint64_t v18 = a3[13];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *((unsigned char *)a1 + v18) = *((unsigned char *)a2 + v18);
  uint64_t v22 = sub_228BACE18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

_OWORD *sub_228B6E204(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_228BACBE8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_release();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_release();
  uint64_t v11 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
  uint64_t v12 = a3[11];
  uint64_t v13 = a3[12];
  uint64_t v14 = (char *)a1 + v12;
  uint64_t v15 = (char *)a2 + v12;
  v14[16] = v15[16];
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  size_t v16 = *(void **)((char *)a1 + v13);
  *(void *)((char *)a1 + v13) = *(void *)((char *)a2 + v13);

  uint64_t v17 = a3[14];
  *((unsigned char *)a1 + a3[13]) = *((unsigned char *)a2 + a3[13]);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = sub_228BACE18();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t sub_228B6E348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B6E35C);
}

uint64_t sub_228B6E35C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_228BACBE8();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + a3[6];
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v12 = *(void *)(a1 + a3[7]);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
  else
  {
    uint64_t v13 = sub_228BACE18();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a3[14];
    return v14(v16, a2, v15);
  }
}

uint64_t sub_228B6E48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B6E4A0);
}

uint64_t sub_228B6E4A0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_228BACBE8();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + a4[6];
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[7]) = (a2 - 1);
  }
  else
  {
    uint64_t v13 = sub_228BACE18();
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + a4[14];
    return v14(v16, a2, a2, v15);
  }
  return result;
}

uint64_t sub_228B6E5D0()
{
  uint64_t result = sub_228BACBE8();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_228BACE18();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t _ConditionalMapContent.storage.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for _ConditionalMapContent.Storage();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t type metadata accessor for _ConditionalMapContent.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ConditionalMapContent.init(trueContent:falseType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1);
  type metadata accessor for _ConditionalMapContent.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t _ConditionalMapContent.init(falseContent:trueType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for _ConditionalMapContent.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t static _ConditionalMapContent<>._makeMapContent(content:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  uint64_t v48 = a4;
  uint64_t v53 = a1;
  uint64_t v56 = a7;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v55 = type metadata accessor for _MapContentOutputs.SetDependency(0);
  MEMORY[0x270FA5388](v55);
  uint64_t v54 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x270FA5388](v13);
  uint64_t v49 = (uint64_t)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  uint64_t v63 = a5;
  uint64_t v64 = a6;
  uint64_t v15 = _s9ContainerVMa();
  uint64_t v50 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  char v47 = (_DWORD *)((char *)&v46 - v19);
  uint64_t v20 = type metadata accessor for _MapContentOutputs(0);
  MEMORY[0x270FA5388](v20 - 8);
  uint64_t v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for _MapContentInputs.AddPreference(0);
  MEMORY[0x270FA5388](v23);
  id v25 = (char *)&v46 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  sub_228B744F8(&qword_268293AE0, (void (*)(uint64_t))type metadata accessor for _MapContentInputs.AddPreference);
  sub_228BACD68();
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  uint64_t v26 = sub_228BACDB8();
  uint64_t v27 = *(void *)(v26 - 8);
  (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v22, v25, v26);
  uint64_t v28 = v56;
  sub_228AC9B7C((uint64_t)v22, v56, type metadata accessor for _MapContentOutputs);
  uint64_t v29 = a3;
  uint64_t v30 = v48;
  type metadata accessor for _ConditionalMapContent();
  LODWORD(v25) = sub_228ACB118(v53);
  uint64_t v31 = a2;
  uint64_t v32 = v49;
  sub_228AC7FCC(v31, v49, type metadata accessor for _MapContentInputs);
  sub_228AC7FCC(v28, (uint64_t)v22, type metadata accessor for _MapContentOutputs);
  uint64_t v33 = v47;
  uint64_t v34 = v32;
  uint64_t v35 = (uint64_t)v22;
  uint64_t v36 = v30;
  uint64_t v38 = v51;
  uint64_t v37 = v52;
  sub_228B6EDF8((int)v25, v34, v35, v47);
  uint64_t v39 = v50;
  (*(void (**)(char *, _DWORD *, uint64_t))(v50 + 16))(v17, v33, v15);
  uint64_t v61 = v29;
  uint64_t v62 = v36;
  uint64_t v63 = v38;
  uint64_t v64 = v37;
  uint64_t v58 = _s4InfoVMa();
  uint64_t v59 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v40 = sub_228BAC488();
  sub_228AC7E20((uint64_t)v17, (uint64_t)sub_228B71690, (uint64_t)v57, v15, MEMORY[0x263F8E628], v40, MEMORY[0x263F8E658], v41);
  int v42 = *(void (**)(char *, uint64_t))(v39 + 8);
  v42(v17, v15);
  LODWORD(v38) = v61;
  uint64_t v43 = (uint64_t)v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v54, v56, v26);
  uint64_t v44 = v43 + *(int *)(v55 + 20);
  *(_DWORD *)uint64_t v44 = v38;
  *(unsigned char *)(v44 + 4) = 0;
  sub_228B744F8(qword_268293AE8, (void (*)(uint64_t))type metadata accessor for _MapContentOutputs.SetDependency);
  sub_228BACD98();
  sub_228B74540(v43, type metadata accessor for _MapContentOutputs.SetDependency);
  return ((uint64_t (*)(_DWORD *, uint64_t))v42)(v33, v15);
}

uint64_t _s9ContainerVMa()
{
  return swift_getGenericMetadata();
}

id sub_228B6EDF8@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = a1;
  uint64_t v7 = (int *)_s9ContainerVMa();
  sub_228AC9B7C(a2, (uint64_t)a4 + v7[13], type metadata accessor for _MapContentInputs);
  sub_228AC9B7C(a3, (uint64_t)a4 + v7[14], type metadata accessor for _MapContentOutputs);
  id result = (id)AGSubgraphGetCurrent();
  if (result) {
    *(void *)((char *)a4 + v7[15]) = result;
  }
  else {
    __break(1u);
  }
  return result;
}

uint64_t static _ConditionalMapContent<>._mapContentCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(a4 + 40))();
  if ((v9 & 1) == 0)
  {
    BOOL v10 = v8 != (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 40))(a1, a3, a5);
    if ((v11 | v10)) {
      return 0;
    }
  }
  return v8;
}

uint64_t sub_228B6EF54(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for _ConditionalMapContent.Storage();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = type metadata accessor for _ConditionalMapContent();
  __n128 v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v19 - v11;
  (*(void (**)(char *, uint64_t, __n128))(v13 + 16))((char *)&v19 - v11, v2, v10);
  uint64_t v14 = &v8[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v15 = *(void *)(v4 - 8);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v8, v12, v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v14, a1, v4);
  LODWORD(a1) = swift_getEnumCaseMultiPayload();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (a1 == 1)
  {
    if (EnumCaseMultiPayload != 1)
    {
LABEL_3:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, TupleTypeMetadata2);
      return 0;
    }
  }
  else if (EnumCaseMultiPayload == 1)
  {
    goto LABEL_3;
  }
  uint64_t v18 = *(void (**)(char *, uint64_t))(v15 + 8);
  v18(v14, v4);
  v18(v8, v4);
  return 1;
}

uint64_t sub_228B6F1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for _ConditionalMapContent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = _s4InfoVMa();
  *(void *)(a3 + *(int *)(result + 52)) = a2;
  return result;
}

uint64_t sub_228B6F274@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ConditionalMapContent();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t sub_228B6F300(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v57 = *(void *)(a1 + 16);
  long long v56 = *(_OWORD *)(a1 + 24);
  long long v58 = v56;
  uint64_t v59 = v3;
  uint64_t v4 = _s4InfoVMa();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v50 = (uint64_t)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  char v47 = (char *)v45 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v46 = (char *)v45 - v10;
  uint64_t v54 = sub_228BAD718();
  uint64_t v11 = *(void *)(v54 - 8);
  MEMORY[0x270FA5388](v54);
  uint64_t v48 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v45 - v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v45 - v17;
  uint64_t v19 = type metadata accessor for _ConditionalMapContent();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v55 = (uint64_t)v45 - v21;
  uint64_t v49 = v1;
  sub_228B6F274((uint64_t)v45 - v21);
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v51 = v20;
  uint64_t v52 = v19;
  if (OutputValue)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v18, OutputValue, v4);
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v23 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v18, v23, 1, v4);
  uint64_t v24 = v11;
  id v25 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  *(void *)&long long v56 = v18;
  uint64_t v26 = v54;
  v25(v15, v18, v54);
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v28 = v27(v15, 1, v4);
  uint64_t v53 = v24;
  if (v28 == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v15, v26);
  }
  else
  {
    char v29 = sub_228B6EF54(v55);
    v45[0] = *(void *)(v5 + 8);
    v45[1] = v5 + 8;
    ((void (*)(char *, uint64_t))v45[0])(v15, v4);
    if (v29)
    {
      uint64_t result = AGGraphGetOutputValue();
      if (result)
      {
        uint64_t v31 = (uint64_t)v46;
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v46, result, v4);
        uint64_t v33 = v51;
        uint64_t v32 = v52;
        uint64_t v34 = v55;
        uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 24))(v31, v55, v52);
        MEMORY[0x270FA5388](v35);
        v45[-2] = a1;
        v45[-1] = swift_getWitnessTable();
        sub_228AC7E20(v31, (uint64_t)sub_228B74608, (uint64_t)&v45[-4], v4, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v36);
        ((void (*)(uint64_t, uint64_t))v45[0])(v31, v4);
        (*(void (**)(void, uint64_t))(v53 + 8))(v56, v26);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v34, v32);
      }
      else
      {
        __break(1u);
      }
      return result;
    }
  }
  uint64_t v37 = v48;
  v25(v48, (char *)v56, v26);
  if (v27(v37, 1, v4) == 1)
  {
    uint64_t v38 = v53;
    (*(void (**)(char *, uint64_t))(v53 + 8))(v37, v26);
  }
  else
  {
    uint64_t v39 = (uint64_t)v47;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v47, v37, v4);
    sub_228B6F9A0(v39, a1);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v39, v4);
    uint64_t v38 = v53;
  }
  uint64_t v40 = v26;
  uint64_t v41 = v50;
  uint64_t v42 = v55;
  uint64_t v43 = sub_228B6FAEC(v55, a1, v50);
  MEMORY[0x270FA5388](v43);
  v45[-2] = a1;
  v45[-1] = swift_getWitnessTable();
  sub_228AC7E20(v41, (uint64_t)sub_228B744C0, (uint64_t)&v45[-4], v4, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v44);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v41, v4);
  (*(void (**)(void, uint64_t))(v38 + 8))(v56, v40);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8))(v42, v52);
}

uint64_t sub_228B6F9A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _MapContentOutputs.ResetPreference(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v2 + *(int *)(a2 + 56);
  uint64_t v8 = sub_228BACDB8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  sub_228B744F8(&qword_268293D70, (void (*)(uint64_t))type metadata accessor for _MapContentOutputs.ResetPreference);
  sub_228BACD98();
  sub_228B74540((uint64_t)v6, type metadata accessor for _MapContentOutputs.ResetPreference);
  long long v9 = *(_OWORD *)(a2 + 32);
  v11[0] = *(_OWORD *)(a2 + 16);
  v11[1] = v9;
  _s4InfoVMa();
  return AGSubgraphInvalidate();
}

uint64_t sub_228B6FAEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for _MapContentOutputs(0);
  MEMORY[0x270FA5388](v7 - 8);
  long long v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x263F288F8])
  {
    __break(1u);
  }
  else
  {
    int v14 = result;
    id v15 = (id)AGSubgraphGetGraph();
    uint64_t v16 = (void *)AGSubgraphCreate();

    AGSubgraphAddChild();
    sub_228AC7FCC(v3 + *(int *)(a2 + 52), (uint64_t)v12, type metadata accessor for _MapContentInputs);
    sub_228AC7FCC(v3 + *(int *)(a2 + 56), (uint64_t)v9, type metadata accessor for _MapContentOutputs);
    AGGraphClearUpdate();
    id v17 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    sub_228B6FCF8(a1, v14, (uint64_t)v12, (uint64_t)v9, (uint64_t)v16, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a2 + 32), a3, *(void *)(a2 + 40));
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    sub_228B74540((uint64_t)v9, type metadata accessor for _MapContentOutputs);
    return sub_228B74540((uint64_t)v12, type metadata accessor for _MapContentInputs);
  }
  return result;
}

id sub_228B6FCF8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v88 = a8;
  int v89 = (void *)a5;
  uint64_t v83 = a4;
  uint64_t v79 = a3;
  int v77 = a2;
  uint64_t v87 = a9;
  uint64_t v91 = a10;
  uint64_t v97 = *MEMORY[0x263EF8340];
  uint64_t v13 = type metadata accessor for _ConditionalMapContent();
  uint64_t v84 = *(void *)(v13 - 8);
  uint64_t v85 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v82 = (char *)&v70 - v14;
  uint64_t v81 = type metadata accessor for _MapContentOutputs.SetSource(0);
  MEMORY[0x270FA5388](v81);
  BOOL v80 = (char *)&v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_228BAC5E8();
  uint64_t v75 = *(void *)(v76 - 8);
  MEMORY[0x270FA5388](v76);
  uint64_t v73 = (uint64_t)&v70 - v16;
  uint64_t v74 = *(void *)(a7 - 8);
  MEMORY[0x270FA5388](v17);
  int v70 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  char v78 = (char *)&v70 - v20;
  uint64_t v72 = sub_228BAC5E8();
  uint64_t v71 = *(void *)(v72 - 8);
  MEMORY[0x270FA5388](v72);
  uint64_t v22 = (char *)&v70 - v21;
  uint64_t v23 = *(void *)(a6 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v26 = (char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  char v29 = (char *)&v70 - v28;
  uint64_t v30 = type metadata accessor for _ConditionalMapContent.Storage();
  uint64_t v31 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v33 = (char *)&v70 - v32;
  uint64_t v34 = type metadata accessor for _MapContentOutputs(0);
  __n128 v35 = MEMORY[0x270FA5388](v34 - 8);
  uint64_t v90 = (char *)&v70 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v31 + 16);
  uint64_t v86 = a1;
  v37(v33, a1, v30, v35);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v38 = v74;
    uint64_t v39 = v78;
    uint64_t v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v74 + 32))(v78, v33, a7);
    int v92 = v77;
    MEMORY[0x270FA5388](v40);
    *(&v70 - 4) = (char *)a7;
    uint64_t v93 = a6;
    uint64_t v94 = a7;
    uint64_t v41 = v91;
    uint64_t v95 = v88;
    uint64_t v96 = v91;
    uint64_t v42 = _s10FalseChildVMa();
    *(&v70 - 3) = (char *)v42;
    *(&v70 - 2) = (char *)swift_getWitnessTable();
    uint64_t v43 = sub_228BAC488();
    uint64_t v44 = MEMORY[0x263F8E628];
    sub_228AC7E20((uint64_t)&v92, (uint64_t)sub_228B745F0, (uint64_t)(&v70 - 6), v42, MEMORY[0x263F8E628], v43, MEMORY[0x263F8E658], v45);
    int v46 = v93;
    uint64_t v47 = (uint64_t)v70;
    uint64_t v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v38 + 16))(v70, v39, a7);
    MEMORY[0x270FA5388](v48);
    *(&v70 - 2) = (char *)a7;
    *((_DWORD *)&v70 - 2) = v46;
    sub_228AC7E20(v47, (uint64_t)sub_228B3D544, (uint64_t)(&v70 - 4), a7, v44, MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v49);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
    v50(v47, a7);
    uint64_t v51 = v73;
    sub_228ACB078(v46, v73);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 32))(v51, v79, a7, v41);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v51, v76);
    v50((uint64_t)v78, a7);
  }
  else
  {
    uint64_t v52 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 32))(v29, v33, a6);
    int v92 = v77;
    MEMORY[0x270FA5388](v52);
    *(&v70 - 4) = (char *)a6;
    uint64_t v93 = a6;
    uint64_t v94 = a7;
    uint64_t v95 = v88;
    uint64_t v96 = v91;
    uint64_t v53 = _s9TrueChildVMa();
    *(&v70 - 3) = (char *)v53;
    *(&v70 - 2) = (char *)swift_getWitnessTable();
    uint64_t v54 = sub_228BAC488();
    uint64_t v55 = MEMORY[0x263F8E628];
    sub_228AC7E20((uint64_t)&v92, (uint64_t)sub_228B745F0, (uint64_t)(&v70 - 6), v53, MEMORY[0x263F8E628], v54, MEMORY[0x263F8E658], v56);
    int v57 = v93;
    uint64_t v58 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 16))(v26, v29, a6);
    MEMORY[0x270FA5388](v58);
    *(&v70 - 2) = (char *)a6;
    *((_DWORD *)&v70 - 2) = v57;
    sub_228AC7E20((uint64_t)v26, (uint64_t)sub_228B74620, (uint64_t)(&v70 - 4), a6, v55, MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v59);
    uint64_t v60 = *(void (**)(char *, uint64_t))(v23 + 8);
    uint64_t v61 = v26;
    uint64_t v62 = v88;
    v60(v61, a6);
    sub_228ACB078(v57, (uint64_t)v22);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 32))(v22, v79, a6, v62);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v22, v72);
    v60(v29, a6);
  }
  uint64_t v63 = sub_228BACDB8();
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 16);
  uint64_t v65 = (uint64_t)v80;
  v64(v80, v83, v63);
  uint64_t v66 = (uint64_t)v90;
  v64((char *)(v65 + *(int *)(v81 + 20)), (uint64_t)v90, v63);
  sub_228B744F8(qword_268293D78, (void (*)(uint64_t))type metadata accessor for _MapContentOutputs.SetSource);
  sub_228BACD98();
  sub_228B74540(v65, type metadata accessor for _MapContentOutputs.SetSource);
  sub_228B74540(v66, type metadata accessor for _MapContentOutputs);
  uint64_t v67 = (uint64_t)v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v82, v86, v85);
  sub_228B6F1BC(v67, (uint64_t)v89, v87);
  __int16 v68 = v89;

  return v68;
}

uint64_t sub_228B706F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = _s4InfoVMa();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_228B7076C(char *a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)a1 + 2);
  uint64_t v3 = *((void *)a1 + 3);
  uint64_t v34 = type metadata accessor for _ConditionalMapContent.Storage();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v5 = (char *)&v29 - v4;
  uint64_t v33 = type metadata accessor for _ConditionalMapContent();
  uint64_t v6 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = *((void *)a1 + 4);
  uint64_t v10 = *((void *)a1 + 5);
  uint64_t v32 = a1;
  uint64_t v36 = v2;
  uint64_t v37 = v3;
  uint64_t v38 = v9;
  uint64_t v39 = v10;
  uint64_t v11 = _s4InfoVMa();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v31 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v30 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  char v29 = (char *)&v29 - v18;
  uint64_t v19 = v34;
  sub_228B70BB0((uint64_t)v14);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v14, v33);
  uint64_t v20 = v14;
  uint64_t v21 = v35;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v5, v8, v19);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v5, v19);
  }
  uint64_t v23 = v31;
  uint64_t v24 = v29;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v29, v5, v2);
  uint64_t v25 = (uint64_t)v30;
  uint64_t v26 = (*(uint64_t (**)(char *, char *, uint64_t))(v23 + 16))(v30, v24, v2);
  MEMORY[0x270FA5388](v26);
  *(&v29 - 2) = v32;
  *(&v29 - 1) = (char *)swift_getWitnessTable();
  sub_228AC7E20(v25, (uint64_t)sub_228B74608, (uint64_t)(&v29 - 4), v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v27);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v28(v25, v2);
  return ((uint64_t (*)(char *, uint64_t))v28)(v24, v2);
}

uint64_t sub_228B70BB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = _s4InfoVMa();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t sub_228B70C40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 56))(a2, 1, 1);
}

uint64_t sub_228B70C7C(char *a1)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 2);
  uint64_t v2 = *((void *)a1 + 3);
  uint64_t v34 = type metadata accessor for _ConditionalMapContent.Storage();
  uint64_t v35 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34);
  uint64_t v5 = (char *)&v29 - v4;
  uint64_t v33 = type metadata accessor for _ConditionalMapContent();
  uint64_t v6 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = *((void *)a1 + 4);
  uint64_t v10 = *((void *)a1 + 5);
  uint64_t v32 = a1;
  uint64_t v36 = v3;
  uint64_t v37 = v2;
  uint64_t v38 = v9;
  uint64_t v39 = v10;
  uint64_t v11 = _s4InfoVMa();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v29 - v13;
  uint64_t v31 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v30 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  char v29 = (char *)&v29 - v18;
  uint64_t v19 = v34;
  sub_228B70BB0((uint64_t)v14);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v14, v33);
  uint64_t v20 = v14;
  uint64_t v21 = v35;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v5, v8, v19);
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v5, v19);
  }
  uint64_t v22 = v31;
  uint64_t v23 = v29;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v29, v5, v2);
  uint64_t v24 = (uint64_t)v30;
  uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v22 + 16))(v30, v23, v2);
  MEMORY[0x270FA5388](v25);
  *(&v29 - 2) = v32;
  *(&v29 - 1) = (char *)swift_getWitnessTable();
  sub_228AC7E20(v24, (uint64_t)sub_228B74608, (uint64_t)(&v29 - 4), v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v26);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v27(v24, v2);
  return ((uint64_t (*)(char *, uint64_t))v27)(v23, v2);
}

uint64_t sub_228B710C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 56))(a2, 1, 1);
}

uint64_t sub_228B710FC@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ConditionalMapContent<>._makeMapContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t sub_228B7110C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _ConditionalMapContent<>._mapContentCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t static Optional<A>._makeMapContent(content:inputs:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v10 = type metadata accessor for _ConditionalMapContent();
  uint64_t v11 = sub_228BAC5E8();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (unsigned int *)((char *)v19 - v13);
  sub_228BAD718();
  int v20 = sub_228ACB118(a1);
  uint64_t v22 = v10;
  uint64_t v15 = _s5ChildVMa_0();
  uint64_t v23 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = sub_228BAC488();
  sub_228AC7E20((uint64_t)&v20, (uint64_t)sub_228AC986C, (uint64_t)v21, v15, MEMORY[0x263F8E628], v16, MEMORY[0x263F8E658], v17);
  sub_228ACB078(v19[2], (uint64_t)v14);
  static _ConditionalMapContent<>._makeMapContent(content:inputs:)(v14, a2, a3, (uint64_t)&type metadata for EmptyMapContent, a4, (uint64_t)&protocol witness table for EmptyMapContent, a5);
  return (*(uint64_t (**)(unsigned int *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_228B7133C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_228BAD718();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t sub_228B713C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_228BAD718();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v18 - v13;
  sub_228B7133C((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a1) == 1)
  {
    uint64_t v15 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return _ConditionalMapContent.init(falseContent:trueType:)(v15, (uint64_t)&type metadata for EmptyMapContent, a2);
  }
  else
  {
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v17(v14, v7, a1);
    v17(v11, v14, a1);
    return _ConditionalMapContent.init(trueContent:falseType:)((uint64_t)v11, a1, a2);
  }
}

uint64_t sub_228B715CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ConditionalMapContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_228B71644@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_228B713C4(*(void *)(a1 + 16), a2);
}

uint64_t sub_228B71654@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static Optional<A>._makeMapContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t type metadata accessor for _ConditionalMapContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _s4InfoVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_228B71690@<X0>(_DWORD *a1@<X8>)
{
  return sub_228AC7EFC(a1);
}

uint64_t _s5ChildVMa_0()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B716CC(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228B7171C(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228B7176C()
{
  uint64_t result = type metadata accessor for _ConditionalMapContent.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_228B7181C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_228B718E8(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v5 + 64) <= *(void *)(v4 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(v5 + 64);
  }
  uint64_t v7 = (*(unsigned char *)(v5 + 80) | *(unsigned char *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    unsigned int v11 = a2[v6];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a2;
          goto LABEL_21;
        case 2:
          int v14 = *(unsigned __int16 *)a2;
          goto LABEL_21;
        case 3:
          int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_21;
        case 4:
          int v14 = *(_DWORD *)a2;
LABEL_21:
          int v15 = (v14 | (v12 << (8 * v6))) + 2;
          unsigned int v11 = v14 + 2;
          if (v6 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1)
    {
      (*(void (**)(void *))(v5 + 16))(a1);
      *((unsigned char *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v6) = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v3;
}

uint64_t sub_228B71ABC(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24) - 8;
  uint64_t v3 = *(void *)v2;
  unint64_t v4 = *(void *)(*(void *)v2 + 64);
  if (v4 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v4 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v5 = a1[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1) {
    uint64_t v10 = v3;
  }
  else {
    uint64_t v10 = *(void *)(*(void *)(a2 + 16) - 8);
  }
  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t sub_228B71BF8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_228B71D6C(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 16))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_228B71FAC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v4 - 8) + 64) <= *(void *)(v5 + 64)) {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 64);
  }
  unsigned int v7 = a2[v6];
  unsigned int v8 = v7 - 2;
  if (v7 >= 2)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a2;
        goto LABEL_13;
      case 2:
        int v10 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v10 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v10 = *(_DWORD *)a2;
LABEL_13:
        int v11 = (v10 | (v8 << (8 * v6))) + 2;
        unsigned int v7 = v10 + 2;
        if (v6 < 4) {
          unsigned int v7 = v11;
        }
        break;
      default:
        break;
    }
  }
  BOOL v12 = v7 == 1;
  if (v7 == 1) {
    uint64_t v5 = *(void *)(v4 - 8);
  }
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(unsigned char *)(a1 + v6) = v12;
  return a1;
}

unsigned __int8 *sub_228B72120(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = *(void *)(v6 - 8);
    if (*(void *)(v8 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      uint64_t v9 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          goto LABEL_14;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v13 = *(_DWORD *)a1;
LABEL_14:
          int v14 = (v13 | (v11 << (8 * v9))) + 2;
          unsigned int v10 = v13 + 2;
          if (v9 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1) {
      uint64_t v15 = *(void *)(v6 - 8);
    }
    else {
      uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v10 == 1) {
      uint64_t v16 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v16 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v15 + 8))(a1, v16);
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_31;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_31:
          int v21 = (v20 | (v18 << (8 * v9))) + 2;
          unsigned int v17 = v20 + 2;
          if (v9 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    BOOL v22 = v17 == 1;
    if (v17 == 1) {
      uint64_t v23 = v8;
    }
    else {
      uint64_t v23 = v7;
    }
    if (v17 == 1) {
      uint64_t v24 = v6;
    }
    else {
      uint64_t v24 = v5;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v23 + 32))(a1, a2, v24);
    a1[v9] = v22;
  }
  return a1;
}

uint64_t sub_228B72360(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (v3 <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
    unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_22:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_22;
  }
LABEL_14:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void sub_228B724A4(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x228B7267CLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_228B726A4(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 24) - 8) + 64);
  if (v2 <= *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64)) {
    unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void sub_228B7276C(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (a2 > 1)
  {
    uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
    if (*(void *)(v6 + 64) <= *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) {
      size_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a2 - 2;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 2;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 2;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    if (*(void *)(v4 + 64) > v5) {
      unint64_t v5 = *(void *)(v4 + 64);
    }
    a1[v5] = a2;
  }
}

uint64_t sub_228B72894()
{
  uint64_t result = type metadata accessor for _ConditionalMapContent.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_228B72930(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v6 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  int v8 = *(_DWORD *)(*(void *)(v5 - 8) + 80) | *(_DWORD *)(v6 + 80);
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 16 <= 0x18 && (v8 & 0x1000F8) == 0)
  {
    uint64_t v11 = v7 + 1;
    unsigned int v12 = a2[v7];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v14 = v7;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a2;
          goto LABEL_18;
        case 2:
          int v15 = *(unsigned __int16 *)a2;
          goto LABEL_18;
        case 3:
          int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_18;
        case 4:
          int v15 = *(_DWORD *)a2;
LABEL_18:
          int v16 = (v15 | (v13 << (8 * v7))) + 2;
          unsigned int v12 = v15 + 2;
          if (v7 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    BOOL v17 = v12 == 1;
    if (v12 == 1)
    {
      uint64_t v6 = *(void *)(v5 - 8);
      uint64_t v18 = *(void *)(a3 + 24);
    }
    else
    {
      uint64_t v18 = *(void *)(a3 + 16);
    }
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v18);
    *((unsigned char *)v4 + v7) = v17;
    uint64_t v19 = *(void **)((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
    *(void *)(((unint64_t)v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) = v19;
    id v20 = v19;
  }
  else
  {
    uint64_t v10 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v10 + (((v8 & 0xF8 | 7u) + 16) & ~(unint64_t)(v8 & 0xF8 | 7u)));
    swift_retain();
  }
  return v4;
}

void sub_228B72B28(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  if (*(void *)(*(void *)(v3 - 8) + 64) <= *(void *)(v4 + 64)) {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(v3 - 8) + 64);
  }
  unsigned int v6 = a1[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a1;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a1;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    uint64_t v4 = *(void *)(v3 - 8);
    uint64_t v11 = *(void *)(a2 + 24);
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 16);
  }
  (*(void (**)(unsigned __int8 *, uint64_t))(v4 + 8))(a1, v11);
  unsigned int v12 = *(void **)((unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_228B72CA8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v6 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  BOOL v13 = v8 == 1;
  if (v8 == 1)
  {
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v14 = *(void *)(a3 + 24);
  }
  else
  {
    uint64_t v14 = *(void *)(a3 + 16);
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v14);
  *(unsigned char *)(a1 + v7) = v13;
  int v15 = *(void **)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  *(void *)((v7 + 8 + a1) & 0xFFFFFFFFFFFFFFF8) = v15;
  id v16 = v15;
  return a1;
}

unsigned __int8 *sub_228B72E44(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  if (a1 != a2)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(void *)(v9 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v10 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v10 = *(void *)(v9 + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
    }
    else {
      uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v11 == 1) {
      uint64_t v17 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v17 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 < 2)
    {
      uint64_t v21 = v7;
    }
    else
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      uint64_t v21 = v7;
      switch(v20)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_32;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_32:
          int v23 = (v22 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v22 + 2;
          if (v10 < 4) {
            unsigned int v18 = v23;
          }
          break;
        default:
          break;
      }
    }
    BOOL v24 = v18 == 1;
    if (v18 == 1) {
      uint64_t v25 = v9;
    }
    else {
      uint64_t v25 = v21;
    }
    if (v18 == 1) {
      uint64_t v26 = v8;
    }
    else {
      uint64_t v26 = v6;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 16))(a1, a2, v26);
    a1[v10] = v24;
  }
  unint64_t v27 = *(void *)(v7 + 64);
  uint64_t v28 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v28 + 64) > v27) {
    unint64_t v27 = *(void *)(v28 + 64);
  }
  unint64_t v29 = v27 + 8;
  uint64_t v30 = (void **)((unint64_t)&a1[v29] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = *(void **)((unint64_t)&a2[v29] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v32 = *v30;
  *uint64_t v30 = v31;
  id v33 = v31;

  return a1;
}

uint64_t sub_228B73100(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(*(void *)(v5 - 8) + 64) <= *(void *)(v6 + 64)) {
    uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  unsigned int v8 = a2[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a2;
        goto LABEL_13;
      case 2:
        int v11 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v11 = *(_DWORD *)a2;
LABEL_13:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  BOOL v13 = v8 == 1;
  if (v8 == 1)
  {
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v14 = *(void *)(a3 + 24);
  }
  else
  {
    uint64_t v14 = *(void *)(a3 + 16);
  }
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v14);
  *(unsigned char *)(a1 + v7) = v13;
  *(void *)((v7 + 8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v7 + 8] & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned __int8 *sub_228B73298(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  if (a1 != a2)
  {
    uint64_t v8 = *(void *)(a3 + 24);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(void *)(v9 + 64) <= *(void *)(v7 + 64)) {
      uint64_t v10 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v10 = *(void *)(v9 + 64);
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 2;
    if (v11 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          goto LABEL_14;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v14 = *(_DWORD *)a1;
LABEL_14:
          int v15 = (v14 | (v12 << (8 * v10))) + 2;
          unsigned int v11 = v14 + 2;
          if (v10 < 4) {
            unsigned int v11 = v15;
          }
          break;
        default:
          break;
      }
    }
    if (v11 == 1) {
      uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
    }
    else {
      uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
    }
    if (v11 == 1) {
      uint64_t v17 = *(void *)(a3 + 24);
    }
    else {
      uint64_t v17 = *(void *)(a3 + 16);
    }
    (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(a1, v17);
    unsigned int v18 = a2[v10];
    unsigned int v19 = v18 - 2;
    if (v18 < 2)
    {
      uint64_t v21 = v7;
    }
    else
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      uint64_t v21 = v7;
      switch(v20)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_32;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_32;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_32;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_32:
          int v23 = (v22 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v22 + 2;
          if (v10 < 4) {
            unsigned int v18 = v23;
          }
          break;
        default:
          break;
      }
    }
    BOOL v24 = v18 == 1;
    if (v18 == 1) {
      uint64_t v25 = v9;
    }
    else {
      uint64_t v25 = v21;
    }
    if (v18 == 1) {
      uint64_t v26 = v8;
    }
    else {
      uint64_t v26 = v6;
    }
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v25 + 32))(a1, a2, v26);
    a1[v10] = v24;
  }
  unint64_t v27 = *(void *)(v7 + 64);
  uint64_t v28 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v28 + 64) > v27) {
    unint64_t v27 = *(void *)(v28 + 64);
  }
  unint64_t v29 = v27 + 8;
  uint64_t v30 = (void **)((unint64_t)&a1[v29] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = *v30;
  *uint64_t v30 = *(void **)((unint64_t)&a2[v29] & 0xFFFFFFFFFFFFFFF8);

  return a1;
}

uint64_t sub_228B73550(_DWORD *a1, int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (*(void *)(v4 + 64) > v3) {
    unint64_t v3 = *(void *)(v4 + 64);
  }
  if (!a2) {
    return 0;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_5;
  }
  unint64_t v7 = (v3 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v8 = v7 & 0xFFFFFFF8;
  unsigned int v9 = a2 - 2147483646;
  if ((v7 & 0xFFFFFFF8) != 0) {
    unsigned int v9 = 2;
  }
  if (v9 >= 0x10000) {
    int v10 = 4;
  }
  else {
    int v10 = 2;
  }
  if (v9 < 0x100) {
    int v11 = 1;
  }
  else {
    int v11 = v10;
  }
  if (v11 == 4)
  {
    int v12 = *(_DWORD *)((char *)a1 + v7);
    if (!v12) {
      goto LABEL_5;
    }
  }
  else if (v11 == 2)
  {
    int v12 = *(unsigned __int16 *)((char *)a1 + v7);
    if (!v12) {
      goto LABEL_5;
    }
  }
  else
  {
    int v12 = *((unsigned __int8 *)a1 + v7);
    if (!v12)
    {
LABEL_5:
      unint64_t v5 = *(void *)(((unint64_t)a1 + v3 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v5 >= 0xFFFFFFFF) {
        LODWORD(v5) = -1;
      }
      return (v5 + 1);
    }
  }
  int v13 = v12 - 1;
  if (v8)
  {
    int v13 = 0;
    LODWORD(v8) = *a1;
  }
  return (v8 | v13) ^ 0x80000000;
}

void sub_228B7363C(unsigned char *a1, int a2, int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (*(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) > v5) {
    unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  }
  size_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (a3 < 0)
  {
    unsigned int v8 = a3 - 2147483646;
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0) {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      int v9 = 4;
    }
    else {
      int v9 = 2;
    }
    if (v8 < 0x100) {
      int v7 = 1;
    }
    else {
      int v7 = v9;
    }
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    int v7 = 0;
    if ((a2 & 0x80000000) == 0)
    {
LABEL_5:
      switch(v7)
      {
        case 1:
          a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v6] = 0;
          goto LABEL_25;
        case 3:
          goto LABEL_32;
        case 4:
          *(_DWORD *)&a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        default:
LABEL_25:
          if (a2) {
LABEL_26:
          }
            *(void *)((unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8) = (a2 - 1);
          break;
      }
      return;
    }
  }
  if ((v5 & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v10 = a2 - 0x7FFFFFFF;
  }
  else {
    int v10 = 1;
  }
  if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v11 = a2 ^ 0x80000000;
    bzero(a1, v6);
    *(_DWORD *)a1 = v11;
  }
  switch(v7)
  {
    case 1:
      a1[v6] = v10;
      break;
    case 2:
      *(_WORD *)&a1[v6] = v10;
      break;
    case 3:
LABEL_32:
      __break(1u);
      JUMPOUT(0x228B737A4);
    case 4:
      *(_DWORD *)&a1[v6] = v10;
      break;
    default:
      return;
  }
}

uint64_t sub_228B737CC()
{
  uint64_t result = type metadata accessor for _MapContentInputs(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_228BACDB8();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_228B738B0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a3[13];
    unsigned int v8 = (char *)a1 + v7;
    int v9 = (char *)a2 + v7;
    uint64_t v10 = sub_228BACB48();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    unsigned int v11 = (int *)type metadata accessor for _MapContentInputs(0);
    uint64_t v12 = v11[5];
    int v13 = &v8[v12];
    int v14 = &v9[v12];
    uint64_t v15 = sub_228BAC608();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = v11[6];
    uint64_t v17 = &v8[v16];
    unsigned int v18 = &v9[v16];
    uint64_t v19 = sub_228BACD78();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    *(_DWORD *)&v8[v11[7]] = *(_DWORD *)&v9[v11[7]];
    uint64_t v20 = a3[14];
    uint64_t v21 = (char *)v4 + v20;
    int v22 = (char *)a2 + v20;
    uint64_t v23 = sub_228BACDB8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    uint64_t v24 = a3[15];
    uint64_t v25 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)v4 + v24) = (uint64_t)v25;
    id v26 = v25;
  }
  return v4;
}

void sub_228B73A94(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[13];
  uint64_t v5 = sub_228BACB48();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = type metadata accessor for _MapContentInputs(0);
  uint64_t v7 = v4 + *(int *)(v6 + 20);
  uint64_t v8 = sub_228BAC608();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v4 + *(int *)(v6 + 24);
  uint64_t v10 = sub_228BACD78();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = a1 + a2[14];
  uint64_t v12 = sub_228BACDB8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  int v13 = *(void **)(a1 + a2[15]);
}

_DWORD *sub_228B73BEC(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[13];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_228BACB48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  int v13 = &v8[v11];
  uint64_t v14 = sub_228BAC608();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  uint64_t v18 = sub_228BACD78();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_228BACDB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  uint64_t v23 = a3[15];
  uint64_t v24 = *(void **)((char *)a2 + v23);
  *(void *)((char *)a1 + v23) = v24;
  id v25 = v24;
  return a1;
}

_DWORD *sub_228B73D80(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[13];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_228BACB48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  int v13 = &v8[v11];
  uint64_t v14 = sub_228BAC608();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  uint64_t v18 = sub_228BACD78();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_228BACDB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  uint64_t v23 = a3[15];
  uint64_t v24 = *(void **)((char *)a2 + v23);
  id v25 = *(void **)((char *)a1 + v23);
  *(void *)((char *)a1 + v23) = v24;
  id v26 = v24;

  return a1;
}

_DWORD *sub_228B73F1C(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[13];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_228BACB48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  int v13 = &v8[v11];
  uint64_t v14 = sub_228BAC608();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  uint64_t v18 = sub_228BACD78();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_228BACDB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  *(void *)((char *)a1 + a3[15]) = *(void *)((char *)a2 + a3[15]);
  return a1;
}

_DWORD *sub_228B740AC(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[13];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_228BACB48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  int v13 = &v8[v11];
  uint64_t v14 = sub_228BAC608();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  uint64_t v18 = sub_228BACD78();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[14];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_228BACDB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  uint64_t v23 = a3[15];
  uint64_t v24 = *(void **)((char *)a1 + v23);
  *(void *)((char *)a1 + v23) = *(void *)((char *)a2 + v23);

  return a1;
}

uint64_t sub_228B74244(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B74258);
}

uint64_t sub_228B74258(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for _MapContentInputs(0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[13];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for _MapContentOutputs(0);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[14];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[15]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_228B74368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B7437C);
}

uint64_t sub_228B7437C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for _MapContentInputs(0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[13];
  }
  else
  {
    uint64_t result = type metadata accessor for _MapContentOutputs(0);
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[15]) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[14];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t sub_228B74488()
{
  return swift_getWitnessTable();
}

uint64_t sub_228B744A4()
{
  return swift_getWitnessTable();
}

uint64_t sub_228B744C0()
{
  return sub_228AC7DC8();
}

uint64_t _s10FalseChildVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_228B744F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_228B74540(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s9TrueChildVMa()
{
  return swift_getGenericMetadata();
}

uint64_t sub_228B745B8()
{
  return swift_getWitnessTable();
}

uint64_t sub_228B745D4()
{
  return swift_getWitnessTable();
}

uint64_t sub_228B745F0@<X0>(_DWORD *a1@<X8>)
{
  return sub_228B71690(a1);
}

uint64_t sub_228B74608()
{
  return sub_228B744C0();
}

uint64_t sub_228B74620@<X0>(unsigned char *a1@<X8>)
{
  return sub_228B3D544(a1);
}

ValueMetadata *type metadata accessor for PolylineMapContentKey()
{
  return &type metadata for PolylineMapContentKey;
}

ValueMetadata *type metadata accessor for CircleMapContentKey()
{
  return &type metadata for CircleMapContentKey;
}

ValueMetadata *type metadata accessor for AnnotationMapContentKey()
{
  return &type metadata for AnnotationMapContentKey;
}

ValueMetadata *type metadata accessor for PolygonMapContentKey()
{
  return &type metadata for PolygonMapContentKey;
}

ValueMetadata *type metadata accessor for SelectedUserAnnotationMapContentKey()
{
  return &type metadata for SelectedUserAnnotationMapContentKey;
}

ValueMetadata *type metadata accessor for UserAnnotationMapContentKey()
{
  return &type metadata for UserAnnotationMapContentKey;
}

ValueMetadata *type metadata accessor for SelectedMarkerMapContentKey()
{
  return &type metadata for SelectedMarkerMapContentKey;
}

ValueMetadata *type metadata accessor for MarkerMapContentKey()
{
  return &type metadata for MarkerMapContentKey;
}

void *initializeBufferWithCopyOfBuffer for MapContentList(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MapContentList(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for MapContentList(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for MapContentList()
{
  return &type metadata for MapContentList;
}

unint64_t sub_228B74788(uint64_t a1)
{
  unint64_t result = sub_228AC1BA8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_228B747B0(uint64_t a1)
{
  unint64_t result = sub_228AC2024();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_228B747D8(uint64_t a1)
{
  unint64_t result = sub_228AC19FC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_228B74800(uint64_t a1)
{
  unint64_t result = sub_228AC1FD0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_228B74828(uint64_t a1)
{
  unint64_t result = sub_228AC1B00();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_228B74850(uint64_t a1)
{
  unint64_t result = sub_228AC1BFC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_228B74878(uint64_t a1)
{
  unint64_t result = sub_228AC1AAC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_228B748A0(uint64_t a1)
{
  unint64_t result = sub_228AC1B54();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228B748C8()
{
  return sub_228B0A36C(&qword_268293E80, &qword_268293E88);
}

uint64_t sub_228B74904()
{
  sub_228B09AEC(v0, (uint64_t)v5);
  if (v7)
  {
    v3[0] = v5[0];
    v3[1] = v5[1];
    uint64_t v4 = v6;
    sub_228BAD7A8();
    sub_228BAD438();
    swift_bridgeObjectRelease();
    sub_228BAD438();
    uint64_t v1 = 0x63696D616E79642ELL;
    sub_228B09B48((uint64_t)v3);
  }
  else
  {
    *((void *)&v3[0] + 1) = 0xE900000000000028;
    sub_228BAD9C8();
    sub_228BAD438();
    swift_bridgeObjectRelease();
    sub_228BAD438();
    return 0x6C61636978656C2ELL;
  }
  return v1;
}

uint64_t sub_228B74A08()
{
  sub_228BADA48();
  sub_228B09AEC(v0, (uint64_t)v4);
  if (v6)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    uint64_t v3 = v5;
    sub_228BADA58();
    sub_228BAD7C8();
    sub_228B09B48((uint64_t)v2);
  }
  else
  {
    sub_228BADA58();
    sub_228BADA58();
  }
  return sub_228BADA88();
}

uint64_t sub_228B74AAC()
{
  sub_228B09AEC(v0, (uint64_t)v4);
  if (v6)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    uint64_t v3 = v5;
    sub_228BADA58();
    sub_228BAD7C8();
    return sub_228B09B48((uint64_t)v2);
  }
  else
  {
    sub_228BADA58();
    return sub_228BADA58();
  }
}

uint64_t sub_228B74B3C()
{
  sub_228BADA48();
  sub_228B09AEC(v0, (uint64_t)v4);
  if (v6)
  {
    v2[0] = v4[0];
    v2[1] = v4[1];
    uint64_t v3 = v5;
    sub_228BADA58();
    sub_228BAD7C8();
    sub_228B09B48((uint64_t)v2);
  }
  else
  {
    sub_228BADA58();
    sub_228BADA58();
  }
  return sub_228BADA88();
}

void sub_228B74BE8()
{
}

uint64_t sub_228B74BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_228BADA58();
  if (v3)
  {
    uint64_t v5 = a2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      sub_228B09AEC(v5, (uint64_t)v11);
      sub_228B09AEC((uint64_t)v11, (uint64_t)v8);
      if (v10)
      {
        v6[0] = v8[0];
        v6[1] = v8[1];
        uint64_t v7 = v9;
        sub_228BADA58();
        sub_228BAD7C8();
        sub_228B09B48((uint64_t)v6);
      }
      else
      {
        sub_228BADA58();
        sub_228BADA58();
      }
      sub_228ACAF00((uint64_t)v11);
      v5 += 48;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_228B74CE0()
{
  uint64_t v1 = *v0;
  sub_228BADA48();
  swift_bridgeObjectRetain();
  sub_228B7878C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_228BADA88();
}

uint64_t sub_228B74D38(uint64_t a1)
{
  return sub_228B74BF8(a1, *v1);
}

uint64_t sub_228B74D54()
{
  uint64_t v1 = *v0;
  sub_228BADA48();
  swift_bridgeObjectRetain();
  sub_228B7878C((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return sub_228BADA88();
}

uint64_t sub_228B74DA8(uint64_t *a1, uint64_t *a2)
{
  return sub_228B76290(*a1, *a2);
}

uint64_t sub_228B74DB4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for MapContentList.Item(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *v0;
  int64_t v7 = *(void *)(*v0 + 16);
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (v7)
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_228B4F444(0, v7, 0);
    uint64_t v9 = v6 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v10 = *(void *)(v3 + 72);
    uint64_t v8 = v17;
    do
    {
      sub_228B506D0(v9, (uint64_t)v5);
      uint64_t v11 = *v5;
      swift_bridgeObjectRetain();
      sub_228B7B19C((uint64_t)v5, type metadata accessor for MapContentList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_228B4F444(0, *(void *)(v8 + 16) + 1, 1);
        uint64_t v8 = v17;
      }
      unint64_t v13 = *(void *)(v8 + 16);
      unint64_t v12 = *(void *)(v8 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_228B4F444(v12 > 1, v13 + 1, 1);
        uint64_t v8 = v17;
      }
      *(void *)(v8 + 16) = v13 + 1;
      *(void *)(v8 + 8 * v13 + 32) = v11;
      v9 += v10;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  sub_228B78C70(v8);
  swift_bridgeObjectRelease();
  sub_228B17910();
  uint64_t v14 = sub_228BAD5E8();
  uint64_t result = swift_bridgeObjectRelease();
  v1[1] = v14;
  return result;
}

uint64_t sub_228B74FA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MapContentList.Item(0) - 8;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6) {
    return 0;
  }
  uint64_t v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v8 = *(void *)(v3 + 72);
  swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  do
  {
    sub_228B506D0(v7, (uint64_t)v5);
    uint64_t v10 = *((unsigned int *)v5 + 2);
    sub_228B7B19C((uint64_t)v5, type metadata accessor for MapContentList.Item);
    if (v9 != 0xFFFFFFFFLL && v10)
    {
      if (!v9 || v10 == 0xFFFFFFFFLL)
      {
        uint64_t v9 = v10;
      }
      else
      {
        unint64_t v11 = (v10 | (v9 << 32)) + ~(v10 << 32);
        unint64_t v12 = (v11 ^ (v11 >> 22)) + ~((v11 ^ (v11 >> 22)) << 13);
        unint64_t v13 = (9 * (v12 ^ (v12 >> 8))) ^ ((9 * (v12 ^ (v12 >> 8))) >> 15);
        uint64_t v9 = ((v13 + ~(v13 << 27)) >> 31) ^ (v13 + ~(v13 << 27));
      }
    }
    v7 += v8;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_228B7512C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v22 = v4 + v2;
  }
  else {
    int64_t v22 = v4;
  }
  unint64_t v3 = sub_228B76A70(isUniquelyReferenced_nonNull_native, v22, 1, v3, &qword_268291F68, type metadata accessor for MapContentList.Item, type metadata accessor for MapContentList.Item);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = (*(void *)(v3 + 24) >> 1) - v8;
  uint64_t v10 = *(void *)(type metadata accessor for MapContentList.Item(0) - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = v3 + v12 + v11 * v8;
  unint64_t v14 = a1 + v12;
  uint64_t v15 = v11 * v2;
  unint64_t v16 = v13 + v15;
  unint64_t v17 = v14 + v15;
  if (v14 < v16 && v13 < v17) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFADD__(v19, v2);
  uint64_t v21 = v19 + v2;
  if (!v20)
  {
    *(void *)(v3 + 16) = v21;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B75300(unint64_t a1)
{
  return sub_228B75360(a1, &qword_268293FE0, &qword_268293FF0, &qword_268293FE8, (uint64_t *)sub_228B07748);
}

uint64_t sub_228B75330(unint64_t a1)
{
  return sub_228B75360(a1, &qword_268292690, &qword_268294000, &qword_268293FF8, (uint64_t *)sub_228B076DC);
}

uint64_t sub_228B75360(unint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_228BAD958();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v12 = *v5;
  if (*v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_228BAD958();
    swift_bridgeObjectRelease();
    uint64_t v14 = v13 + v11;
    if (!__OFADD__(v13, v11)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v14 = v13 + v11;
  if (__OFADD__(v13, v11)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v12 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *int64_t v5 = v12;
  uint64_t v13 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v12 & 0x8000000000000000) == 0
    && (v12 & 0x4000000000000000) == 0)
  {
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    if (v14 <= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v13 = 1;
  }
  uint64_t v23 = v11;
  uint64_t v11 = (uint64_t)a2;
  a2 = (uint64_t *)a3;
  a3 = (unint64_t *)a4;
  a4 = a5;
  if (v12 >> 62) {
    goto LABEL_27;
  }
  uint64_t v17 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v17 <= v14) {
      uint64_t v17 = v14;
    }
    swift_bridgeObjectRetain();
    unint64_t v12 = MEMORY[0x22A6A6FB0](v13, v17, 1, v12);
    swift_bridgeObjectRelease();
    *int64_t v5 = v12;
    uint64_t v16 = v12 & 0xFFFFFFFFFFFFFF8;
    a5 = a4;
    a4 = (uint64_t *)a3;
    a3 = (unint64_t *)a2;
    a2 = (uint64_t *)v11;
    uint64_t v11 = v23;
LABEL_15:
    uint64_t result = sub_228B78864(v16 + 8 * *(void *)(v16 + 16) + 32, (*(void *)(v16 + 24) >> 1) - *(void *)(v16 + 16), a1, a2, a3, a4, (uint64_t (*)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))a5);
    if (v19 >= v11) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_228BAD958();
    swift_bridgeObjectRelease();
  }
  if (v19 >= 1)
  {
    uint64_t v20 = *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v21 = __OFADD__(v20, v19);
    uint64_t v22 = v20 + v19;
    if (v21)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) = v22;
  }
  swift_bridgeObjectRelease();

  return sub_228BAD4B8();
}

unint64_t sub_228B7558C(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_13:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7) {
    goto LABEL_16;
  }
  if (result > v4) {
LABEL_17:
  }
    __break(1u);
  return result;
}

void *sub_228B755FC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result - 1;
  }
  return result;
}

void *sub_228B75614(void *result)
{
  if (__OFSUB__(*result, 1)) {
    __break(1u);
  }
  else {
    --*result;
  }
  return result;
}

void sub_228B7562C(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_228B75634(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)v1 + 16);
}

uint64_t (*sub_228B75644(uint64_t a1, void *a2))(void)
{
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*a2 < *(void *)(*(void *)v2 + 16))
  {
    type metadata accessor for MapContentList.Item(0);
    return nullsub_1;
  }
  __break(1u);
  return result;
}

uint64_t *sub_228B75700@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], result = *v2, (*v2)[2] < v4))
  {
    __break(1u);
  }
  else
  {
    int64_t v5 = v2[1];
    *a2 = v3;
    a2[1] = v4;
    a2[2] = result;
    a2[3] = v5;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void sub_228B75730(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL sub_228B75740()
{
  return *(void *)(*(void *)v0 + 16) == 0;
}

void sub_228B75754(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *sub_228B75764@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(void *)(*(void *)v3 + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_228B75790@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = sub_228B7558C(*a1, a2, *a3, *v4);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *sub_228B757CC(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*(void *)v2 + 16);
  if (*result <= v4 && v3 <= v4) {
    return (unint64_t *)(v3 - *result);
  }
  __break(1u);
  return result;
}

uint64_t *sub_228B757F4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *sub_228B75810(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

void *sub_228B7582C(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void *sub_228B75848@<X0>(void *result@<X0>, void *a2@<X8>)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    *a2 = *result + 1;
  }
  return result;
}

void *sub_228B75860(void *result)
{
  if (__OFADD__(*result, 1)) {
    __break(1u);
  }
  else {
    ++*result;
  }
  return result;
}

void sub_228B75878(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t sub_228B75888()
{
  return *(void *)(*(void *)v0 + 16);
}

size_t sub_228B75894()
{
  size_t v1 = sub_228B7836C(*v0, v0[1]);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_228B758CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_228B758D4(a1, a2, a3, *v3, v3[1]);
}

uint64_t sub_228B758D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v7 = (void *)result;
  if (!a2)
  {
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  uint64_t v8 = a3;
  if (!a3)
  {
LABEL_11:
    *char v7 = a4;
    v7[1] = a5;
    v7[2] = v8;
    return v8;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a4 + 16);
    if (v9)
    {
      uint64_t v10 = a2;
      unint64_t v11 = 0;
      uint64_t v12 = a3 - 1;
      while (v11 < *(void *)(a4 + 16))
      {
        uint64_t v13 = *(void *)(type metadata accessor for MapContentList.Item(0) - 8);
        uint64_t v14 = *(void *)(v13 + 72);
        unint64_t result = sub_228B506D0(a4+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ v14 * v11, v10);
        if (v12 == v11) {
          goto LABEL_11;
        }
        v10 += v14;
        if (v9 == ++v11) {
          goto LABEL_9;
        }
      }
      __break(1u);
      goto LABEL_13;
    }
LABEL_9:
    uint64_t v8 = v9;
    goto LABEL_11;
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_228B759E8()
{
  return sub_228BAD478();
}

unint64_t sub_228B75A10()
{
  unint64_t result = qword_268293E90;
  if (!qword_268293E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293E90);
  }
  return result;
}

uint64_t sub_228B75A64()
{
  return MEMORY[0x263F8D6E0];
}

uint64_t sub_228B75A70()
{
  return sub_228B75C40(&qword_268293E98);
}

uint64_t sub_228B75AA4()
{
  return sub_228B0A36C(&qword_268293EB0, &qword_268293EB8);
}

unint64_t sub_228B75AE4()
{
  unint64_t result = qword_268293EC0;
  if (!qword_268293EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293EC0);
  }
  return result;
}

uint64_t sub_228B75B38()
{
  return sub_228B75C40(&qword_268293EC8);
}

uint64_t sub_228B75B6C()
{
  return sub_228B75CF8(&qword_268293ED0, (void (*)(void))sub_228B75BB4);
}

unint64_t sub_228B75BB4()
{
  unint64_t result = qword_268293ED8;
  if (!qword_268293ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293ED8);
  }
  return result;
}

uint64_t sub_228B75C0C()
{
  return sub_228B75C40((unint64_t *)&qword_268293EE0);
}

uint64_t sub_228B75C40(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_268293EA0);
    sub_228AC8168();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_228B75CB0()
{
  return sub_228B75CF8(&qword_268293EE8, (void (*)(void))sub_228B75D68);
}

uint64_t sub_228B75CF8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268293EB8);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_228B75D68()
{
  unint64_t result = qword_268293EF0;
  if (!qword_268293EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293EF0);
  }
  return result;
}

unint64_t sub_228B75DC0()
{
  unint64_t result = qword_268293EF8;
  if (!qword_268293EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268293EF8);
  }
  return result;
}

uint64_t sub_228B75E14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_228B78CF8(MEMORY[0x263F8EE78]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_228B75E50(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v4);
  uint64_t v2 = swift_bridgeObjectRetain();
  sub_228B7512C(v2);
  sub_228B74DB4();

  return swift_bridgeObjectRelease();
}

uint64_t sub_228B75EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = 0;
  uint64_t v35 = a1 + 32;
  uint64_t v4 = a2 + 32;
  while (1)
  {
    BOOL v5 = (uint64_t *)(v35 + 24 * v3);
    uint64_t v7 = *v5;
    uint64_t v6 = v5[1];
    uint64_t v8 = v5[2];
    uint64_t v9 = (uint64_t *)(v4 + 24 * v3);
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    uint64_t v12 = v9[2];
    if (v6 < 0)
    {
      if ((v10 & 0x8000000000000000) == 0) {
        return 0;
      }
      sub_228B79E18();
      sub_228B09CA8((void *)v11, v10);
      sub_228B09CA8((void *)v7, v6);
      char v20 = sub_228BAD6F8();
      goto LABEL_34;
    }
    if (v10 < 0) {
      return 0;
    }
    if (v6)
    {
      if ((v10 & 1) == 0) {
        return 0;
      }
      uint64_t v21 = *(void *)(v7 + 16);
      if (v21 != *(void *)(v11 + 16)) {
        return 0;
      }
      if (v21)
      {
        if (*(double *)(v7 + 32) != *(double *)(v11 + 32) || *(double *)(v7 + 40) != *(double *)(v11 + 40)) {
          goto LABEL_54;
        }
        if (v21 != 1)
        {
          uint64_t v31 = (float64x2_t *)(v7 + 48);
          uint64_t v32 = (float64x2_t *)(v11 + 48);
          for (uint64_t i = v21 - 2; ; --i)
          {
            int32x2_t v34 = vmovn_s64(vceqq_f64(*v31, *v32));
            if ((v34.i32[0] & v34.i32[1] & 1) == 0) {
              break;
            }
            if (!i) {
              goto LABEL_31;
            }
            ++v32;
            ++v31;
          }
LABEL_54:
          sub_228B09CA8((void *)v11, v10);
          sub_228B09CA8((void *)v7, v6);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
LABEL_56:
          swift_bridgeObjectRelease();
LABEL_57:
          swift_bridgeObjectRelease();
          sub_228B09D08((void *)v11, v10);
          sub_228B09D08((void *)v7, v6);
          return 0;
        }
      }
LABEL_31:
      sub_228B09CA8((void *)v11, v10);
      sub_228B09CA8((void *)v7, v6);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v8) {
        goto LABEL_18;
      }
LABEL_32:
      if (!v12) {
        goto LABEL_57;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v20 = sub_228B75EBC(v8, v12);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
LABEL_34:
      sub_228B09D08((void *)v11, v10);
      sub_228B09D08((void *)v7, v6);
      if ((v20 & 1) == 0) {
        return 0;
      }
      goto LABEL_35;
    }
    if (v10) {
      return 0;
    }
    uint64_t v13 = *(void *)(v7 + 16);
    if (v13 != *(void *)(v11 + 16)) {
      return 0;
    }
    if (!v13) {
      goto LABEL_31;
    }
    double v15 = *(double *)(v7 + 32);
    double v14 = *(double *)(v7 + 40);
    double v16 = *(double *)(v11 + 32);
    double v17 = *(double *)(v11 + 40);
    sub_228B09CA8((void *)v11, v10);
    sub_228B09CA8((void *)v7, v6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    if (v15 != v16 || v14 != v17) {
      goto LABEL_55;
    }
    if (v13 != 1) {
      break;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v8) {
      goto LABEL_32;
    }
LABEL_18:
    if (v12) {
      goto LABEL_57;
    }
    sub_228B09D08((void *)v11, v10);
    sub_228B09D08((void *)v7, v6);
LABEL_35:
    ++v3;
    uint64_t result = 1;
    if (v3 == v2) {
      return result;
    }
  }
  unint64_t v23 = *(void *)(v7 + 16);
  BOOL v24 = v23 >= 2;
  unint64_t v25 = v23 - 2;
  if (v24)
  {
    unint64_t v26 = *(void *)(v11 + 16);
    if (v26 <= 1) {
      uint64_t v27 = 1;
    }
    else {
      uint64_t v27 = *(void *)(v11 + 16);
    }
    if (v26 >= 2)
    {
      uint64_t v28 = 0;
      uint64_t v29 = v27 - 1;
      while (1)
      {
        int32x2_t v30 = vmovn_s64(vceqq_f64(*(float64x2_t *)(v7 + 48 + 16 * v28), *(float64x2_t *)(v11 + 48 + 16 * v28)));
        if ((v30.i32[0] & v30.i32[1] & 1) == 0) {
          break;
        }
        if (v13 - 2 == v28) {
          goto LABEL_17;
        }
        if (v25 == v28) {
          goto LABEL_61;
        }
        if (v29 == ++v28) {
          goto LABEL_60;
        }
      }
LABEL_55:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_228B76290(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 32;
  for (uint64_t i = a2 + 32; ; i += 48)
  {
    sub_228B09AEC(v3, (uint64_t)v17);
    sub_228B09AEC(i, (uint64_t)v16);
    sub_228B09AEC((uint64_t)v17, (uint64_t)v12);
    sub_228B09AEC((uint64_t)v16, (uint64_t)v13);
    if (v12[40]) {
      break;
    }
    sub_228B09AEC((uint64_t)v12, (uint64_t)v11);
    if (v15) {
      goto LABEL_15;
    }
    uint64_t v6 = v11[0];
    uint64_t v7 = *(void *)&v13[0];
    sub_228ACAF00((uint64_t)v12);
    if (v6 != v7) {
      goto LABEL_16;
    }
LABEL_5:
    sub_228ACAF00((uint64_t)v16);
    sub_228ACAF00((uint64_t)v17);
    v3 += 48;
    if (!--v2) {
      return 1;
    }
  }
  sub_228B09AEC((uint64_t)v12, (uint64_t)v11);
  if (v15)
  {
    v9[0] = v13[0];
    v9[1] = v13[1];
    uint64_t v10 = v14;
    char v5 = MEMORY[0x22A6A6F10](v11, v9);
    sub_228B09B48((uint64_t)v9);
    sub_228B09B48((uint64_t)v11);
    sub_228ACAF00((uint64_t)v12);
    if ((v5 & 1) == 0) {
      goto LABEL_16;
    }
    goto LABEL_5;
  }
  sub_228B09B48((uint64_t)v11);
LABEL_15:
  sub_228AC1A50((uint64_t)v12, (uint64_t *)&unk_268293F10);
LABEL_16:
  sub_228ACAF00((uint64_t)v16);
  sub_228ACAF00((uint64_t)v17);
  return 0;
}

void *sub_228B7640C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268294008);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_228B78A98(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_228B76534(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_228B76A70(a1, a2, a3, a4, &qword_268293F20, type metadata accessor for _MapContentOutputs, type metadata accessor for _MapContentOutputs);
}

void *sub_228B76568(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_268291998);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4]) {
          memmove(v12, a4 + 4, 48 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_228B78EF8(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_228B7668C(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268294010);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4]) {
          memmove(v12, a4 + 4, 24 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_228B793C0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_228B767B4(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_228B76A70(a1, a2, a3, a4, &qword_268293FD0, type metadata accessor for CustomAnnotationViewModel, type metadata accessor for CustomAnnotationViewModel);
}

void *sub_228B767E8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268293F70);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4]) {
          memmove(v13, a4 + 4, 8 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_228B79814(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_228B768F8(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268293F28);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4]) {
          memmove(v13, a4 + 4, 16 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_228B794B8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_228B76A08(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_228B76A70(a1, a2, a3, a4, &qword_268293FB8, type metadata accessor for MarkerAnnotationViewModel, type metadata accessor for MarkerAnnotationViewModel);
}

uint64_t sub_228B76A3C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_228B76A70(a1, a2, a3, a4, &qword_268293FA0, type metadata accessor for UserAnnotationViewModel, type metadata accessor for UserAnnotationViewModel);
}

uint64_t sub_228B76A70(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    uint64_t v18 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  size_t v19 = _swift_stdlib_malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = sub_228BAD928();
    __break(1u);
    return result;
  }
  v18[2] = v13;
  void v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_228B79264(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

void *sub_228B76CF0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268293F88);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 96);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[12 * v8 + 4]) {
          memmove(v12, a4 + 4, 96 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_228B7971C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_228B76E18(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268293F68);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 120);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[15 * v8 + 4]) {
          memmove(v12, a4 + 4, 120 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_228B79A0C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_228B76F40(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293F48);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 136);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[17 * v8 + 4]) {
          memmove(v12, a4 + 4, 136 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_228B79C10(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_228B77064(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268293378);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 1;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4]) {
          memmove(v13, a4 + 4, 32 * v8);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_228B79E58(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_228B77174(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268293F38);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[18 * v8 + 4]) {
          memmove(v12, a4 + 4, 144 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_228B79D08(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_228B772A0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268293F58);
      uint64_t v10 = (void *)swift_allocObject();
      int64_t v11 = _swift_stdlib_malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 + 95;
      }
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 7);
      uint64_t v13 = v10 + 4;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v13 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 4]) {
          memmove(v13, a4 + 4, v8 << 7);
        }
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_228B79B04(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

void *sub_228B773B0(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268293F78);
      uint64_t v10 = (void *)swift_allocObject();
      size_t v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 104);
      uint64_t v12 = v10 + 4;
      if (v5)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[13 * v8 + 4]) {
          memmove(v12, a4 + 4, 104 * v8);
        }
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v10 = (void *)MEMORY[0x263F8EE78];
      uint64_t v12 = (void *)(MEMORY[0x263F8EE78] + 32);
      if (result) {
        goto LABEL_13;
      }
    }
    sub_228B79900(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_228B774DC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_228B77504(a1, a2, a3, a4, (uint64_t *)&unk_268293F90, &qword_2682926F8);
}

uint64_t sub_228B774F0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_228B77504(a1, a2, a3, a4, &qword_268293FA8, &qword_268293FB0);
}

uint64_t sub_228B77504(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = *(void *)(a4 + 24);
    uint64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v10 = a2;
      }
    }
  }
  else
  {
    uint64_t v10 = a2;
  }
  uint64_t v11 = *(void *)(a4 + 16);
  if (v10 <= v11) {
    uint64_t v12 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (BOOL v18 = v14 == -1) : (BOOL v18 = 0), v18))
  {
LABEL_29:
    uint64_t result = sub_228BAD928();
    __break(1u);
    return result;
  }
  void v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v16 + v20;
  if (a1)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(void *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_228B795C4(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_228B77770(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_228B77504(a1, a2, a3, a4, (uint64_t *)&unk_268293FC0, &qword_268292788);
}

uint64_t sub_228B77784(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  sub_228BADA48();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_228B7878C((uint64_t)v17, a2);
  swift_bridgeObjectRelease();
  uint64_t v6 = sub_228BADA88();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if ((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
  {
    uint64_t v9 = swift_bridgeObjectRetain();
    char v10 = sub_228B76290(v9, a2);
    swift_bridgeObjectRelease();
    if (v10)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v8);
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v11 = ~v7;
    while (1)
    {
      unint64_t v8 = (v8 + 1) & v11;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        break;
      }
      uint64_t v12 = swift_bridgeObjectRetain();
      char v13 = sub_228B76290(v12, a2);
      swift_bridgeObjectRelease();
      if (v13) {
        goto LABEL_6;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v17[0] = *v2;
  *uint64_t v2 = 0x8000000000000000;
  uint64_t v16 = swift_bridgeObjectRetain();
  sub_228B781D0(v16, v8, isUniquelyReferenced_nonNull_native);
  *uint64_t v2 = v17[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

void *sub_228B77928()
{
  size_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268293F08);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_228BAD7E8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *size_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_228B77AD4()
{
  size_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268293F08);
  uint64_t v3 = sub_228BAD7F8();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_43:
    *size_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v27 = v2 + 56;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(v2 + 56);
  int64_t v28 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v12 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    int64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v14 >= v28) {
      goto LABEL_41;
    }
    unint64_t v15 = *(void *)(v27 + 8 * v14);
    ++v10;
    if (!v15)
    {
      int64_t v10 = v14 + 1;
      if (v14 + 1 >= v28) {
        goto LABEL_41;
      }
      unint64_t v15 = *(void *)(v27 + 8 * v10);
      if (!v15)
      {
        int64_t v10 = v14 + 2;
        if (v14 + 2 >= v28) {
          goto LABEL_41;
        }
        unint64_t v15 = *(void *)(v27 + 8 * v10);
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v7 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
    sub_228BADA48();
    sub_228BADA58();
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v19 = v17 + 32;
      swift_bridgeObjectRetain_n();
      do
      {
        sub_228B09AEC(v19, (uint64_t)v34);
        sub_228B09AEC((uint64_t)v34, (uint64_t)v31);
        if (v33)
        {
          v29[0] = v31[0];
          v29[1] = v31[1];
          uint64_t v30 = v32;
          sub_228BADA58();
          sub_228BAD7C8();
          sub_228B09B48((uint64_t)v29);
        }
        else
        {
          sub_228BADA58();
          sub_228BADA58();
        }
        sub_228ACAF00((uint64_t)v34);
        v19 += 48;
        --v18;
      }
      while (v18);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t result = sub_228BADA88();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v11 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v8 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
    ++*(void *)(v4 + 16);
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v28)
  {
LABEL_41:
    uint64_t result = swift_release_n();
    size_t v1 = v0;
    goto LABEL_43;
  }
  unint64_t v15 = *(void *)(v27 + 8 * v16);
  if (v15)
  {
    int64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v28) {
      goto LABEL_41;
    }
    unint64_t v15 = *(void *)(v27 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_228B77E3C()
{
  size_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268293F08);
  uint64_t v3 = sub_228BAD7F8();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v29 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v28 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v8 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v10 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v12 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v13 = v12 | (v10 << 6);
      }
      else
      {
        int64_t v14 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v14 >= v28) {
          goto LABEL_40;
        }
        unint64_t v15 = v29[v14];
        ++v10;
        if (!v15)
        {
          int64_t v10 = v14 + 1;
          if (v14 + 1 >= v28) {
            goto LABEL_40;
          }
          unint64_t v15 = v29[v10];
          if (!v15)
          {
            int64_t v10 = v14 + 2;
            if (v14 + 2 >= v28) {
              goto LABEL_40;
            }
            unint64_t v15 = v29[v10];
            if (!v15)
            {
              int64_t v16 = v14 + 3;
              if (v16 >= v28)
              {
LABEL_40:
                swift_release();
                size_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero(v29, ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v29 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v15 = v29[v16];
              if (!v15)
              {
                while (1)
                {
                  int64_t v10 = v16 + 1;
                  if (__OFADD__(v16, 1)) {
                    goto LABEL_46;
                  }
                  if (v10 >= v28) {
                    goto LABEL_40;
                  }
                  unint64_t v15 = v29[v10];
                  ++v16;
                  if (v15) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v10 = v16;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v15 - 1) & v15;
        unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
      }
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v13);
      sub_228BADA48();
      sub_228BADA58();
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        uint64_t v19 = v17 + 32;
        swift_bridgeObjectRetain();
        do
        {
          sub_228B09AEC(v19, (uint64_t)v35);
          sub_228B09AEC((uint64_t)v35, (uint64_t)v32);
          if (v34)
          {
            v30[0] = v32[0];
            v30[1] = v32[1];
            uint64_t v31 = v33;
            sub_228BADA58();
            sub_228BAD7C8();
            sub_228B09B48((uint64_t)v30);
          }
          else
          {
            sub_228BADA58();
            sub_228BADA58();
          }
          sub_228ACAF00((uint64_t)v35);
          v19 += 48;
          --v18;
        }
        while (v18);
        swift_bridgeObjectRelease();
      }
      uint64_t result = sub_228BADA88();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v11 = __clz(__rbit64((-1 << v21) & ~*(void *)(v8 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v8 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v11 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v8 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      *(void *)(*(void *)(v4 + 48) + 8 * v11) = v17;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *size_t v1 = v4;
  return result;
}

uint64_t sub_228B781D0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_228B77E3C();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_228B77928();
      goto LABEL_14;
    }
    sub_228B77AD4();
  }
  uint64_t v8 = *v3;
  sub_228BADA48();
  swift_bridgeObjectRetain();
  sub_228B7878C((uint64_t)v19, v5);
  swift_bridgeObjectRelease();
  uint64_t result = sub_228BADA88();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = swift_bridgeObjectRetain();
    char v11 = sub_228B76290(v10, v5);
    uint64_t result = swift_bridgeObjectRelease();
    if (v11)
    {
LABEL_13:
      uint64_t result = sub_228BADA08();
      __break(1u);
    }
    else
    {
      uint64_t v12 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        uint64_t v13 = swift_bridgeObjectRetain();
        char v14 = sub_228B76290(v13, v5);
        uint64_t result = swift_bridgeObjectRelease();
        if (v14) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v15 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v15 + 48) + 8 * a2) = v5;
  uint64_t v16 = *(void *)(v15 + 16);
  BOOL v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    *(void *)(v15 + 16) = v18;
  }
  return result;
}

size_t sub_228B7836C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268291F68);
  uint64_t v5 = *(void *)(type metadata accessor for MapContentList.Item(0) - 8);
  uint64_t v6 = *(void *)(v5 + 72);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v8);
  if (v6)
  {
    if (result - v7 != 0x8000000000000000 || v6 != -1)
    {
      _OWORD v8[2] = v2;
      v8[3] = 2 * ((uint64_t)(result - v7) / v6);
      uint64_t v11 = sub_228B758D4((uint64_t)v12, (uint64_t)v8 + v7, v2, a1, a2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v11 == v2) {
        return (size_t)v8;
      }
      __break(1u);
      return MEMORY[0x263F8EE78];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_228B784A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268293FD8);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  _OWORD v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  uint64_t v6 = sub_228B78590(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_228AC98B8();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x263F8EE78];
  }
  return v3;
}

void *sub_228B78590(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    _OWORD v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *uint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    size_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_228B7878C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = sub_228BADA58();
  if (v3)
  {
    uint64_t v5 = a2 + 32;
    do
    {
      sub_228B09AEC(v5, (uint64_t)v11);
      sub_228B09AEC((uint64_t)v11, (uint64_t)v8);
      if (v10)
      {
        v6[0] = v8[0];
        v6[1] = v8[1];
        uint64_t v7 = v9;
        sub_228BADA58();
        sub_228BAD7C8();
        sub_228B09B48((uint64_t)v6);
      }
      else
      {
        sub_228BADA58();
        sub_228BADA58();
      }
      uint64_t result = sub_228ACAF00((uint64_t)v11);
      v5 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_228B78864(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t *a5, uint64_t *a6, uint64_t (*a7)(unsigned char *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = sub_228BAD958();
    swift_bridgeObjectRelease();
    if (!v15) {
      return a3;
    }
  }
  else
  {
    uint64_t v15 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v15) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_228BAD958();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        uint64_t v19 = sub_228B0A36C(a5, a6);
        swift_bridgeObjectRetain();
        for (uint64_t i = 0; i != v15; ++i)
        {
          uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          unint64_t v22 = (void (*)(unsigned char *, void))a7(v26, i, a3, v21, v19);
          uint64_t v24 = *v23;
          swift_unknownObjectRetain();
          v22(v26, 0);
          *(void *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v17 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(a4);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

char *sub_228B78A98(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = (char *)(a4 + 24 * a1 + 32);
    size_t v6 = 24 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B78B88(uint64_t a1, uint64_t a2)
{
  sub_228B09AEC(a1, (uint64_t)v8);
  sub_228B09AEC(a2, (uint64_t)v9);
  if ((v8[40] & 1) == 0)
  {
    sub_228B09AEC((uint64_t)v8, (uint64_t)v7);
    if ((v11 & 1) == 0)
    {
      char v3 = v7[0] == *(void *)&v9[0];
      goto LABEL_6;
    }
LABEL_8:
    sub_228AC1A50((uint64_t)v8, (uint64_t *)&unk_268293F10);
    char v3 = 0;
    return v3 & 1;
  }
  sub_228B09AEC((uint64_t)v8, (uint64_t)v7);
  if (v11 != 1)
  {
    sub_228B09B48((uint64_t)v7);
    goto LABEL_8;
  }
  v5[0] = v9[0];
  v5[1] = v9[1];
  uint64_t v6 = v10;
  char v3 = MEMORY[0x22A6A6F10](v7, v5);
  sub_228B09B48((uint64_t)v5);
  sub_228B09B48((uint64_t)v7);
LABEL_6:
  sub_228ACAF00((uint64_t)v8);
  return v3 & 1;
}

uint64_t sub_228B78C70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_228B17910();
  uint64_t result = sub_228BAD5B8();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      swift_bridgeObjectRetain();
      sub_228B77784(&v6, v5);
      swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_228B78CF8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MapContentList.Item(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x263F8EE78];
  if (v6)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    sub_228B4F444(0, v6, 0);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v9 = *(void *)(v3 + 72);
    uint64_t v7 = v15;
    do
    {
      sub_228B506D0(v8, (uint64_t)v5);
      uint64_t v10 = *v5;
      swift_bridgeObjectRetain();
      sub_228B7B19C((uint64_t)v5, type metadata accessor for MapContentList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_228B4F444(0, *(void *)(v7 + 16) + 1, 1);
        uint64_t v7 = v15;
      }
      unint64_t v12 = *(void *)(v7 + 16);
      unint64_t v11 = *(void *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        sub_228B4F444(v11 > 1, v12 + 1, 1);
        uint64_t v7 = v15;
      }
      *(void *)(v7 + 16) = v12 + 1;
      *(void *)(v7 + 8 * v12 + 32) = v10;
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  sub_228B78C70(v7);
  swift_bridgeObjectRelease();
  sub_228B17910();
  sub_228BAD5E8();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t type metadata accessor for MapContentList.Item(uint64_t a1)
{
  return sub_228AC29CC(a1, (uint64_t *)&unk_268294028);
}

uint64_t sub_228B78EF8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 48 * a1 + 32;
    unint64_t v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B78FF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268294040);
  MEMORY[0x270FA5388](v4 - 8);
  unint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_228BACE18();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228B7DC30(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_228AC1A50((uint64_t)v6, (uint64_t *)&unk_268294040);
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(qword_268291998);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_228BAF4E0;
    sub_228B09AEC(a2, v11 + 32);
    return v11;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  sub_228ACAF54();
  sub_228BACE28();
  uint64_t v11 = *(void *)&v15[0];
  if (!*(void *)&v15[0])
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_10;
  }
  sub_228B09AEC(a2, (uint64_t)v15);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v11 = (uint64_t)sub_228B76568(0, *(void *)(v11 + 16) + 1, 1, (void *)v11);
  }
  unint64_t v13 = *(void *)(v11 + 16);
  unint64_t v12 = *(void *)(v11 + 24);
  if (v13 >= v12 >> 1) {
    uint64_t v11 = (uint64_t)sub_228B76568((void *)(v12 > 1), v13 + 1, 1, (void *)v11);
  }
  *(void *)(v11 + 16) = v13 + 1;
  sub_228B7DC98(v15, (_OWORD *)(v11 + 48 * v13 + 32));
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11;
}

uint64_t sub_228B79264(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B793C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B794B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268293F30);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B795C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B7971C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 96 * a1 + 32;
    unint64_t v6 = a3 + 96 * v4;
    if (v5 >= v6 || v5 + 96 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

char *sub_228B79814(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    size_t v6 = 8 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  uint64_t result = (char *)sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B79900(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 104 * a1 + 32;
    unint64_t v6 = a3 + 104 * v4;
    if (v5 >= v6 || v5 + 104 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268293F80);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B79A0C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 120 * a1 + 32;
    unint64_t v6 = a3 + 120 * v4;
    if (v5 >= v6 || v5 + 120 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B79B04(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 7) + 32;
    unint64_t v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268293F60);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B79C10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 136 * a1 + 32;
    unint64_t v6 = a3 + 136 * v4;
    if (v5 >= v6 || v5 + 136 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

uint64_t sub_228B79D08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 144 * a1 + 32;
    unint64_t v6 = a3 + 144 * v4;
    if (v5 >= v6 || v5 + 144 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_268293F40);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = sub_228BAD998();
  __break(1u);
  return result;
}

unint64_t sub_228B79E18()
{
  unint64_t result = qword_268293000;
  if (!qword_268293000)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_268293000);
  }
  return result;
}

char *sub_228B79E58(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 32 * a1 + 32);
    size_t v6 = 32 * v4;
    uint64_t v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  unint64_t result = (char *)sub_228BAD998();
  __break(1u);
  return result;
}

ValueMetadata *_s10ChildIDKeyVMa()
{
  return &_s10ChildIDKeyVN;
}

char *sub_228B79F54(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    char v23 = *a2;
    *(void *)a1 = *a2;
    a1 = &v23[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[16] = *((unsigned char *)a2 + 16);
        *(_WORD *)(a1 + 17) = *(_WORD *)((char *)a2 + 17);
        uint64_t v24 = (int *)type metadata accessor for ResolvedMarker();
        uint64_t v25 = v24[8];
        uint64_t v26 = &a1[v25];
        uint64_t v27 = (uint64_t)a2 + v25;
        uint64_t v28 = sub_228BACBE8();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(v26, v27, v28);
        uint64_t v29 = v24[9];
        uint64_t v30 = *(char **)((char *)a2 + v29);
        *(void *)&a1[v29] = v30;
        a1[v24[10]] = *((unsigned char *)a2 + v24[10]);
        *(void *)&a1[v24[11]] = *(char **)((char *)a2 + v24[11]);
        uint64_t v31 = v24[12];
        uint64_t v32 = &a1[v31];
        uint64_t v33 = (uint64_t)a2 + v31;
        uint64_t v34 = sub_228BACE18();
        uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16);
        id v36 = v30;
        swift_retain();
        v35(v32, v33, v34);
        break;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v37 = a2[2];
        if (v37)
        {
          uint64_t v38 = a2[3];
          *((void *)a1 + 2) = v37;
          *((void *)a1 + 3) = v38;
          swift_retain();
        }
        else
        {
          *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        }
        *((void *)a1 + 4) = a2[4];
        a1[40] = *((unsigned char *)a2 + 40);
        uint64_t v59 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
        uint64_t v60 = &a1[v59];
        uint64_t v61 = (uint64_t)a2 + v59;
        uint64_t v62 = sub_228BACE18();
        uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16);
        swift_retain();
        v63(v60, v61, v62);
        break;
      case 3u:
        uint64_t v39 = *a2;
        __int16 v40 = *((_WORD *)a2 + 4);
        sub_228B0A008(*a2, v40);
        *(void *)a1 = v39;
        *((_WORD *)a1 + 4) = v40;
        uint64_t v41 = a2[3];
        *((void *)a1 + 2) = a2[2];
        *((void *)a1 + 3) = v41;
        *((void *)a1 + 4) = a2[4];
        uint64_t v42 = a2[6];
        *((void *)a1 + 5) = a2[5];
        *((void *)a1 + 6) = v42;
        uint64_t v43 = (uint64_t)a2[8];
        *((void *)a1 + 7) = a2[7];
        char v44 = *((unsigned char *)a2 + 72);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_228ACF3A4(v43, v44);
        *((void *)a1 + 8) = v43;
        a1[72] = v44;
        *((void *)a1 + 10) = a2[10];
        break;
      case 4u:
        uint64_t v45 = *a2;
        uint64_t v46 = (uint64_t)a2[1];
        uint64_t v47 = a2[2];
        sub_228B09CA8(*a2, v46);
        *(void *)a1 = v45;
        *((void *)a1 + 1) = v46;
        uint64_t v48 = a2[3];
        uint64_t v49 = a2[4];
        *((void *)a1 + 2) = v47;
        *((void *)a1 + 3) = v48;
        *((void *)a1 + 4) = v49;
        *((void *)a1 + 5) = a2[5];
        uint64_t v50 = a2[7];
        *((void *)a1 + 6) = a2[6];
        *((void *)a1 + 7) = v50;
        uint64_t v51 = (uint64_t)a2[9];
        *((void *)a1 + 8) = a2[8];
        LOBYTE(v47) = *((unsigned char *)a2 + 80);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_228ACF3A4(v51, (char)v47);
        *((void *)a1 + 9) = v51;
        a1[80] = (char)v47;
        uint64_t v52 = (uint64_t)a2[11];
        LOBYTE(v51) = *((unsigned char *)a2 + 96);
        sub_228ACF3A4(v52, v51);
        *((void *)a1 + 11) = v52;
        a1[96] = v51;
        *((void *)a1 + 13) = a2[13];
        break;
      case 5u:
        long long v53 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v53;
        a1[32] = *((unsigned char *)a2 + 32);
        uint64_t v54 = a2[6];
        *((void *)a1 + 5) = a2[5];
        *((void *)a1 + 6) = v54;
        *((void *)a1 + 7) = a2[7];
        uint64_t v55 = a2[9];
        *((void *)a1 + 8) = a2[8];
        *((void *)a1 + 9) = v55;
        uint64_t v56 = (uint64_t)a2[11];
        *((void *)a1 + 10) = a2[10];
        char v57 = *((unsigned char *)a2 + 96);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_228ACF3A4(v56, v57);
        *((void *)a1 + 11) = v56;
        a1[96] = v57;
        uint64_t v58 = (uint64_t)a2[13];
        LOBYTE(v56) = *((unsigned char *)a2 + 112);
        sub_228ACF3A4(v58, v56);
        *((void *)a1 + 13) = v58;
        a1[112] = v56;
        *((void *)a1 + 15) = a2[15];
        break;
      default:
        long long v6 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v6;
        uint64_t v7 = (int *)type metadata accessor for ResolvedAnnotation();
        uint64_t v8 = v7[6];
        uint64_t v9 = &a1[v8];
        uint64_t v10 = (uint64_t)a2 + v8;
        uint64_t v11 = sub_228BACBE8();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
        *(void *)&a1[v7[7]] = *(char **)((char *)a2 + v7[7]);
        *(void *)&a1[v7[8]] = *(char **)((char *)a2 + v7[8]);
        a1[v7[9]] = *((unsigned char *)a2 + v7[9]);
        a1[v7[10]] = *((unsigned char *)a2 + v7[10]);
        uint64_t v12 = v7[11];
        unint64_t v13 = &a1[v12];
        uint64_t v14 = (uint64_t)a2 + v12;
        *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
        v13[16] = *(unsigned char *)(v14 + 16);
        uint64_t v15 = v7[12];
        uint64_t v16 = *(char **)((char *)a2 + v15);
        *(void *)&a1[v15] = v16;
        a1[v7[13]] = *((unsigned char *)a2 + v7[13]);
        uint64_t v17 = v7[14];
        uint64_t v18 = &a1[v17];
        uint64_t v19 = (uint64_t)a2 + v17;
        uint64_t v20 = sub_228BACE18();
        uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16);
        swift_retain();
        swift_retain();
        id v22 = v16;
        v21(v18, v19, v20);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_228B7A4A4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v3 = (int *)type metadata accessor for ResolvedAnnotation();
      uint64_t v4 = a1 + v3[6];
      uint64_t v5 = sub_228BACBE8();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
      swift_release();
      swift_release();

      uint64_t v6 = v3[14];
      goto LABEL_7;
    case 1:
      uint64_t v7 = (int *)type metadata accessor for ResolvedMarker();
      uint64_t v8 = a1 + v7[8];
      uint64_t v9 = sub_228BACBE8();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);

      swift_release();
      uint64_t v6 = v7[12];
      goto LABEL_7;
    case 2:
      if (*(void *)(a1 + 16)) {
        swift_release();
      }
      swift_release();
      uint64_t v6 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
LABEL_7:
      uint64_t v10 = a1 + v6;
      uint64_t v11 = sub_228BACE18();
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
      return v12(v10, v11);
    case 3:
      sub_228B0A024(*(void **)a1, *(_WORD *)(a1 + 8));
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v13 = *(void *)(a1 + 64);
      char v14 = *(unsigned char *)(a1 + 72);
      goto LABEL_13;
    case 4:
      sub_228B09D08(*(void **)a1, *(void *)(a1 + 8));
      swift_release();
      swift_bridgeObjectRelease();
      sub_228AD26A8(*(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
      uint64_t v13 = *(void *)(a1 + 88);
      char v14 = *(unsigned char *)(a1 + 96);
      goto LABEL_13;
    case 5:
      swift_release();
      swift_bridgeObjectRelease();
      sub_228AD26A8(*(void *)(a1 + 88), *(unsigned char *)(a1 + 96));
      uint64_t v13 = *(void *)(a1 + 104);
      char v14 = *(unsigned char *)(a1 + 112);
LABEL_13:
      uint64_t result = sub_228AD26A8(v13, v14);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_228B7A714(uint64_t a1, uint64_t *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(_WORD *)(a1 + 17) = *(_WORD *)((char *)a2 + 17);
      uint64_t v21 = (int *)type metadata accessor for ResolvedMarker();
      uint64_t v22 = v21[8];
      uint64_t v23 = a1 + v22;
      uint64_t v24 = (uint64_t)a2 + v22;
      uint64_t v25 = sub_228BACBE8();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
      uint64_t v26 = v21[9];
      uint64_t v27 = *(void **)((char *)a2 + v26);
      *(void *)(a1 + v26) = v27;
      *(unsigned char *)(a1 + v21[10]) = *((unsigned char *)a2 + v21[10]);
      *(void *)(a1 + v21[11]) = *(uint64_t *)((char *)a2 + v21[11]);
      uint64_t v28 = v21[12];
      uint64_t v29 = a1 + v28;
      uint64_t v30 = (uint64_t)a2 + v28;
      uint64_t v31 = sub_228BACE18();
      uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16);
      id v33 = v27;
      swift_retain();
      v32(v29, v30, v31);
      break;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v34 = a2[2];
      if (v34)
      {
        uint64_t v35 = a2[3];
        *(void *)(a1 + 16) = v34;
        *(void *)(a1 + 24) = v35;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      }
      *(void *)(a1 + 32) = a2[4];
      *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
      uint64_t v56 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
      uint64_t v57 = a1 + v56;
      uint64_t v58 = (uint64_t)a2 + v56;
      uint64_t v59 = sub_228BACE18();
      uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 16);
      swift_retain();
      v60(v57, v58, v59);
      break;
    case 3u:
      uint64_t v36 = *a2;
      __int16 v37 = *((_WORD *)a2 + 4);
      sub_228B0A008((void *)*a2, v37);
      *(void *)a1 = v36;
      *(_WORD *)(a1 + 8) = v37;
      uint64_t v38 = a2[3];
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v38;
      *(void *)(a1 + 32) = a2[4];
      uint64_t v39 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = v39;
      uint64_t v40 = a2[8];
      *(void *)(a1 + 56) = a2[7];
      char v41 = *((unsigned char *)a2 + 72);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_228ACF3A4(v40, v41);
      *(void *)(a1 + 64) = v40;
      *(unsigned char *)(a1 + 72) = v41;
      *(void *)(a1 + 80) = a2[10];
      break;
    case 4u:
      uint64_t v42 = (void *)*a2;
      uint64_t v43 = a2[1];
      uint64_t v44 = a2[2];
      sub_228B09CA8((void *)*a2, v43);
      *(void *)a1 = v42;
      *(void *)(a1 + 8) = v43;
      uint64_t v45 = a2[3];
      uint64_t v46 = a2[4];
      *(void *)(a1 + 16) = v44;
      *(void *)(a1 + 24) = v45;
      *(void *)(a1 + 32) = v46;
      *(void *)(a1 + 40) = a2[5];
      uint64_t v47 = a2[7];
      *(void *)(a1 + 48) = a2[6];
      *(void *)(a1 + 56) = v47;
      uint64_t v48 = a2[9];
      *(void *)(a1 + 64) = a2[8];
      LOBYTE(v44) = *((unsigned char *)a2 + 80);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_228ACF3A4(v48, v44);
      *(void *)(a1 + 72) = v48;
      *(unsigned char *)(a1 + 80) = v44;
      uint64_t v49 = a2[11];
      LOBYTE(v48) = *((unsigned char *)a2 + 96);
      sub_228ACF3A4(v49, v48);
      *(void *)(a1 + 88) = v49;
      *(unsigned char *)(a1 + 96) = v48;
      *(void *)(a1 + 104) = a2[13];
      break;
    case 5u:
      long long v50 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v50;
      *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
      uint64_t v51 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = v51;
      *(void *)(a1 + 56) = a2[7];
      uint64_t v52 = a2[9];
      *(void *)(a1 + 64) = a2[8];
      *(void *)(a1 + 72) = v52;
      uint64_t v53 = a2[11];
      *(void *)(a1 + 80) = a2[10];
      char v54 = *((unsigned char *)a2 + 96);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_228ACF3A4(v53, v54);
      *(void *)(a1 + 88) = v53;
      *(unsigned char *)(a1 + 96) = v54;
      uint64_t v55 = a2[13];
      LOBYTE(v53) = *((unsigned char *)a2 + 112);
      sub_228ACF3A4(v55, v53);
      *(void *)(a1 + 104) = v55;
      *(unsigned char *)(a1 + 112) = v53;
      *(void *)(a1 + 120) = a2[15];
      break;
    default:
      long long v4 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      uint64_t v5 = (int *)type metadata accessor for ResolvedAnnotation();
      uint64_t v6 = v5[6];
      uint64_t v7 = a1 + v6;
      uint64_t v8 = (uint64_t)a2 + v6;
      uint64_t v9 = sub_228BACBE8();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
      *(void *)(a1 + v5[7]) = *(uint64_t *)((char *)a2 + v5[7]);
      *(void *)(a1 + v5[8]) = *(uint64_t *)((char *)a2 + v5[8]);
      *(unsigned char *)(a1 + v5[9]) = *((unsigned char *)a2 + v5[9]);
      *(unsigned char *)(a1 + v5[10]) = *((unsigned char *)a2 + v5[10]);
      uint64_t v10 = v5[11];
      uint64_t v11 = a1 + v10;
      uint64_t v12 = (uint64_t)a2 + v10;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
      uint64_t v13 = v5[12];
      char v14 = *(void **)((char *)a2 + v13);
      *(void *)(a1 + v13) = v14;
      *(unsigned char *)(a1 + v5[13]) = *((unsigned char *)a2 + v5[13]);
      uint64_t v15 = v5[14];
      uint64_t v16 = a1 + v15;
      uint64_t v17 = (uint64_t)a2 + v15;
      uint64_t v18 = sub_228BACE18();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
      swift_retain();
      swift_retain();
      id v20 = v14;
      v19(v16, v17, v18);
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_228B7AC14(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    sub_228B7B19C(a1, type metadata accessor for MapContentList.Item.Content);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
        *(unsigned char *)(a1 + 18) = *((unsigned char *)a2 + 18);
        uint64_t v21 = (int *)type metadata accessor for ResolvedMarker();
        uint64_t v22 = v21[8];
        uint64_t v23 = a1 + v22;
        uint64_t v24 = (uint64_t)a2 + v22;
        uint64_t v25 = sub_228BACBE8();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
        uint64_t v26 = v21[9];
        uint64_t v27 = *(void **)((char *)a2 + v26);
        *(void *)(a1 + v26) = v27;
        *(unsigned char *)(a1 + v21[10]) = *((unsigned char *)a2 + v21[10]);
        *(void *)(a1 + v21[11]) = *(uint64_t *)((char *)a2 + v21[11]);
        uint64_t v28 = v21[12];
        uint64_t v29 = a1 + v28;
        uint64_t v30 = (uint64_t)a2 + v28;
        uint64_t v31 = sub_228BACE18();
        uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16);
        id v33 = v27;
        swift_retain();
        v32(v29, v30, v31);
        break;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v34 = a2[2];
        if (v34)
        {
          uint64_t v35 = a2[3];
          *(void *)(a1 + 16) = v34;
          *(void *)(a1 + 24) = v35;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
        }
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        uint64_t v50 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
        uint64_t v51 = a1 + v50;
        uint64_t v52 = (uint64_t)a2 + v50;
        uint64_t v53 = sub_228BACE18();
        char v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16);
        swift_retain();
        v54(v51, v52, v53);
        break;
      case 3u:
        uint64_t v36 = *a2;
        __int16 v37 = *((_WORD *)a2 + 4);
        sub_228B0A008((void *)*a2, v37);
        *(void *)a1 = v36;
        *(_WORD *)(a1 + 8) = v37;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
        *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        uint64_t v38 = a2[8];
        char v39 = *((unsigned char *)a2 + 72);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_228ACF3A4(v38, v39);
        *(void *)(a1 + 64) = v38;
        *(unsigned char *)(a1 + 72) = v39;
        *(void *)(a1 + 80) = a2[10];
        break;
      case 4u:
        uint64_t v40 = *a2;
        uint64_t v41 = a2[1];
        uint64_t v42 = a2[2];
        sub_228B09CA8((void *)*a2, v41);
        *(void *)a1 = v40;
        *(void *)(a1 + 8) = v41;
        *(void *)(a1 + 16) = v42;
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
        *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        *(void *)(a1 + 64) = a2[8];
        uint64_t v43 = a2[9];
        LOBYTE(v42) = *((unsigned char *)a2 + 80);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_228ACF3A4(v43, v42);
        *(void *)(a1 + 72) = v43;
        *(unsigned char *)(a1 + 80) = v42;
        uint64_t v44 = a2[11];
        LOBYTE(v43) = *((unsigned char *)a2 + 96);
        sub_228ACF3A4(v44, v43);
        *(void *)(a1 + 88) = v44;
        *(unsigned char *)(a1 + 96) = v43;
        *(void *)(a1 + 104) = a2[13];
        break;
      case 5u:
        long long v45 = *(_OWORD *)a2;
        long long v46 = *((_OWORD *)a2 + 1);
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        *(_OWORD *)a1 = v45;
        *(_OWORD *)(a1 + 16) = v46;
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
        *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 15);
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = a2[9];
        *(void *)(a1 + 80) = a2[10];
        uint64_t v47 = a2[11];
        char v48 = *((unsigned char *)a2 + 96);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_228ACF3A4(v47, v48);
        *(void *)(a1 + 88) = v47;
        *(unsigned char *)(a1 + 96) = v48;
        uint64_t v49 = a2[13];
        LOBYTE(v47) = *((unsigned char *)a2 + 112);
        sub_228ACF3A4(v49, v47);
        *(void *)(a1 + 104) = v49;
        *(unsigned char *)(a1 + 112) = v47;
        *(void *)(a1 + 120) = a2[15];
        break;
      default:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
        long long v4 = (int *)type metadata accessor for ResolvedAnnotation();
        uint64_t v5 = v4[6];
        uint64_t v6 = a1 + v5;
        uint64_t v7 = (uint64_t)a2 + v5;
        uint64_t v8 = sub_228BACBE8();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
        *(void *)(a1 + v4[7]) = *(uint64_t *)((char *)a2 + v4[7]);
        *(void *)(a1 + v4[8]) = *(uint64_t *)((char *)a2 + v4[8]);
        *(unsigned char *)(a1 + v4[9]) = *((unsigned char *)a2 + v4[9]);
        *(unsigned char *)(a1 + v4[10]) = *((unsigned char *)a2 + v4[10]);
        uint64_t v9 = v4[11];
        uint64_t v10 = a1 + v9;
        uint64_t v11 = (uint64_t)a2 + v9;
        char v12 = *(unsigned char *)(v11 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        *(unsigned char *)(v10 + 16) = v12;
        uint64_t v13 = v4[12];
        char v14 = *(void **)((char *)a2 + v13);
        *(void *)(a1 + v13) = v14;
        *(unsigned char *)(a1 + v4[13]) = *((unsigned char *)a2 + v4[13]);
        uint64_t v15 = v4[14];
        uint64_t v16 = a1 + v15;
        uint64_t v17 = (uint64_t)a2 + v15;
        uint64_t v18 = sub_228BACE18();
        uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
        swift_retain();
        swift_retain();
        id v20 = v14;
        v19(v16, v17, v18);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_228B7B19C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for MapContentList.Item.Content(uint64_t a1)
{
  return sub_228AC29CC(a1, (uint64_t *)&unk_268294018);
}

char *sub_228B7B21C(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      uint64_t v20 = *((void *)a2 + 2);
      if (v20)
      {
        uint64_t v21 = *((void *)a2 + 3);
        *((void *)a1 + 2) = v20;
        *((void *)a1 + 3) = v21;
      }
      else
      {
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      }
      *((void *)a1 + 4) = *((void *)a2 + 4);
      a1[40] = a2[40];
      uint64_t v31 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
      uint64_t v32 = &a1[v31];
      id v33 = &a2[v31];
      uint64_t v34 = sub_228BACE18();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v32, v33, v34);
      goto LABEL_11;
    case 1:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
      uint64_t v22 = (int *)type metadata accessor for ResolvedMarker();
      uint64_t v23 = v22[8];
      uint64_t v24 = &a1[v23];
      uint64_t v25 = &a2[v23];
      uint64_t v26 = sub_228BACBE8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
      *(void *)&a1[v22[9]] = *(void *)&a2[v22[9]];
      a1[v22[10]] = a2[v22[10]];
      *(void *)&a1[v22[11]] = *(void *)&a2[v22[11]];
      uint64_t v27 = v22[12];
      uint64_t v28 = &a1[v27];
      uint64_t v29 = &a2[v27];
      uint64_t v30 = sub_228BACE18();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
      goto LABEL_11;
    case 0:
      long long v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      uint64_t v8 = (int *)type metadata accessor for ResolvedAnnotation();
      uint64_t v9 = v8[6];
      uint64_t v10 = &a1[v9];
      uint64_t v11 = &a2[v9];
      uint64_t v12 = sub_228BACBE8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
      *(void *)&a1[v8[7]] = *(void *)&a2[v8[7]];
      *(void *)&a1[v8[8]] = *(void *)&a2[v8[8]];
      a1[v8[9]] = a2[v8[9]];
      a1[v8[10]] = a2[v8[10]];
      uint64_t v13 = v8[11];
      char v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      *(_OWORD *)char v14 = *(_OWORD *)v15;
      v14[16] = v15[16];
      *(void *)&a1[v8[12]] = *(void *)&a2[v8[12]];
      a1[v8[13]] = a2[v8[13]];
      uint64_t v16 = v8[14];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = sub_228BACE18();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *sub_228B7B538(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_228B7B19C((uint64_t)a1, type metadata accessor for MapContentList.Item.Content);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        uint64_t v20 = *((void *)a2 + 2);
        if (v20)
        {
          uint64_t v21 = *((void *)a2 + 3);
          *((void *)a1 + 2) = v20;
          *((void *)a1 + 3) = v21;
        }
        else
        {
          *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        }
        *((void *)a1 + 4) = *((void *)a2 + 4);
        a1[40] = a2[40];
        uint64_t v31 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
        uint64_t v32 = &a1[v31];
        id v33 = &a2[v31];
        uint64_t v34 = sub_228BACE18();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v32, v33, v34);
        goto LABEL_12;
      case 1:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        a1[16] = a2[16];
        *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
        uint64_t v22 = (int *)type metadata accessor for ResolvedMarker();
        uint64_t v23 = v22[8];
        uint64_t v24 = &a1[v23];
        uint64_t v25 = &a2[v23];
        uint64_t v26 = sub_228BACBE8();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
        *(void *)&a1[v22[9]] = *(void *)&a2[v22[9]];
        a1[v22[10]] = a2[v22[10]];
        *(void *)&a1[v22[11]] = *(void *)&a2[v22[11]];
        uint64_t v27 = v22[12];
        uint64_t v28 = &a1[v27];
        uint64_t v29 = &a2[v27];
        uint64_t v30 = sub_228BACE18();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
        goto LABEL_12;
      case 0:
        long long v7 = *((_OWORD *)a2 + 1);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_OWORD *)a1 + 1) = v7;
        uint64_t v8 = (int *)type metadata accessor for ResolvedAnnotation();
        uint64_t v9 = v8[6];
        uint64_t v10 = &a1[v9];
        uint64_t v11 = &a2[v9];
        uint64_t v12 = sub_228BACBE8();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
        *(void *)&a1[v8[7]] = *(void *)&a2[v8[7]];
        *(void *)&a1[v8[8]] = *(void *)&a2[v8[8]];
        a1[v8[9]] = a2[v8[9]];
        a1[v8[10]] = a2[v8[10]];
        uint64_t v13 = v8[11];
        char v14 = &a1[v13];
        uint64_t v15 = &a2[v13];
        *(_OWORD *)char v14 = *(_OWORD *)v15;
        v14[16] = v15[16];
        *(void *)&a1[v8[12]] = *(void *)&a2[v8[12]];
        a1[v8[13]] = a2[v8[13]];
        uint64_t v16 = v8[14];
        uint64_t v17 = &a1[v16];
        uint64_t v18 = &a2[v16];
        uint64_t v19 = sub_228BACE18();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
LABEL_12:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t sub_228B7B878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t sub_228B7B8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_228B7B8CC()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_228B7B8DC()
{
  uint64_t result = type metadata accessor for ResolvedAnnotation();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ResolvedMarker();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for ResolvedUserAnnotation();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t destroy for MapContentList.ID.Component(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return __swift_destroy_boxed_opaque_existential_0(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for MapContentList.ID.Component(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    *(void *)a1 = *(void *)a2;
  }
  *(unsigned char *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for MapContentList.ID.Component(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_0(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      *(void *)a1 = *(void *)a2;
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t assignWithTake for MapContentList.ID.Component(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_0(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      *(void *)a1 = *(void *)a2;
    }
    *(unsigned char *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for MapContentList.ID.Component(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MapContentList.ID.Component(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_228B7BC94(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t sub_228B7BCB0(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for MapContentList.ID.Component()
{
  return &type metadata for MapContentList.ID.Component;
}

ValueMetadata *type metadata accessor for MapContentList.ID()
{
  return &type metadata for MapContentList.ID;
}

ValueMetadata *type metadata accessor for MapContentList.UpdateToken()
{
  return &type metadata for MapContentList.UpdateToken;
}

uint64_t sub_228B7BD08(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v8 = *(int *)(a3 + 24);
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    type metadata accessor for MapContentList.Item.Content(0);
    swift_bridgeObjectRetain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        *(unsigned char *)(v9 + 16) = *((unsigned char *)v10 + 16);
        *(_WORD *)(v9 + 17) = *(_WORD *)((char *)v10 + 17);
        uint64_t v25 = (int *)type metadata accessor for ResolvedMarker();
        uint64_t v26 = v25[8];
        uint64_t v27 = v9 + v26;
        uint64_t v28 = (uint64_t)v10 + v26;
        uint64_t v29 = sub_228BACBE8();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
        uint64_t v30 = v25[9];
        uint64_t v31 = *(void **)((char *)v10 + v30);
        *(void *)(v9 + v30) = v31;
        *(unsigned char *)(v9 + v25[10]) = *((unsigned char *)v10 + v25[10]);
        *(void *)(v9 + v25[11]) = *(uint64_t *)((char *)v10 + v25[11]);
        uint64_t v32 = v25[12];
        uint64_t v70 = (uint64_t)v10 + v32;
        uint64_t v72 = v9 + v32;
        uint64_t v33 = sub_228BACE18();
        uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16);
        id v35 = v31;
        swift_retain();
        v34(v72, v70, v33);
        break;
      case 2u:
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        uint64_t v36 = v10[2];
        if (v36)
        {
          uint64_t v37 = v10[3];
          *(void *)(v9 + 16) = v36;
          *(void *)(v9 + 24) = v37;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v9 + 16) = *((_OWORD *)v10 + 1);
        }
        *(void *)(v9 + 32) = v10[4];
        *(unsigned char *)(v9 + 40) = *((unsigned char *)v10 + 40);
        uint64_t v58 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
        uint64_t v59 = v9 + v58;
        uint64_t v60 = (uint64_t)v10 + v58;
        uint64_t v61 = sub_228BACE18();
        uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16);
        swift_retain();
        v62(v59, v60, v61);
        break;
      case 3u:
        uint64_t v38 = *v10;
        __int16 v39 = *((_WORD *)v10 + 4);
        sub_228B0A008((void *)*v10, v39);
        *(void *)uint64_t v9 = v38;
        *(_WORD *)(v9 + 8) = v39;
        uint64_t v40 = v10[3];
        *(void *)(v9 + 16) = v10[2];
        *(void *)(v9 + 24) = v40;
        *(void *)(v9 + 32) = v10[4];
        uint64_t v41 = v10[6];
        *(void *)(v9 + 40) = v10[5];
        *(void *)(v9 + 48) = v41;
        uint64_t v42 = v10[8];
        *(void *)(v9 + 56) = v10[7];
        char v43 = *((unsigned char *)v10 + 72);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_228ACF3A4(v42, v43);
        *(void *)(v9 + 64) = v42;
        *(unsigned char *)(v9 + 72) = v43;
        *(void *)(v9 + 80) = v10[10];
        break;
      case 4u:
        uint64_t v44 = (void *)*v10;
        uint64_t v45 = v10[1];
        uint64_t v46 = v10[2];
        sub_228B09CA8((void *)*v10, v45);
        *(void *)uint64_t v9 = v44;
        *(void *)(v9 + 8) = v45;
        uint64_t v47 = v10[3];
        uint64_t v48 = v10[4];
        *(void *)(v9 + 16) = v46;
        *(void *)(v9 + 24) = v47;
        *(void *)(v9 + 32) = v48;
        *(void *)(v9 + 40) = v10[5];
        uint64_t v49 = v10[7];
        *(void *)(v9 + 48) = v10[6];
        *(void *)(v9 + 56) = v49;
        uint64_t v50 = v10[9];
        *(void *)(v9 + 64) = v10[8];
        LOBYTE(v46) = *((unsigned char *)v10 + 80);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_228ACF3A4(v50, v46);
        *(void *)(v9 + 72) = v50;
        *(unsigned char *)(v9 + 80) = v46;
        uint64_t v51 = v10[11];
        LOBYTE(v50) = *((unsigned char *)v10 + 96);
        sub_228ACF3A4(v51, v50);
        *(void *)(v9 + 88) = v51;
        *(unsigned char *)(v9 + 96) = v50;
        *(void *)(v9 + 104) = v10[13];
        break;
      case 5u:
        long long v52 = *((_OWORD *)v10 + 1);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        *(_OWORD *)(v9 + 16) = v52;
        *(unsigned char *)(v9 + 32) = *((unsigned char *)v10 + 32);
        uint64_t v53 = v10[6];
        *(void *)(v9 + 40) = v10[5];
        *(void *)(v9 + 48) = v53;
        *(void *)(v9 + 56) = v10[7];
        uint64_t v54 = v10[9];
        *(void *)(v9 + 64) = v10[8];
        *(void *)(v9 + 72) = v54;
        uint64_t v55 = v10[11];
        *(void *)(v9 + 80) = v10[10];
        char v56 = *((unsigned char *)v10 + 96);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_228ACF3A4(v55, v56);
        *(void *)(v9 + 88) = v55;
        *(unsigned char *)(v9 + 96) = v56;
        uint64_t v57 = v10[13];
        LOBYTE(v55) = *((unsigned char *)v10 + 112);
        sub_228ACF3A4(v57, v55);
        *(void *)(v9 + 104) = v57;
        *(unsigned char *)(v9 + 112) = v55;
        *(void *)(v9 + 120) = v10[15];
        break;
      default:
        long long v11 = *((_OWORD *)v10 + 1);
        *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
        *(_OWORD *)(v9 + 16) = v11;
        uint64_t v12 = (int *)type metadata accessor for ResolvedAnnotation();
        uint64_t v13 = v12[6];
        uint64_t v14 = v9 + v13;
        uint64_t v15 = (uint64_t)v10 + v13;
        uint64_t v16 = sub_228BACBE8();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
        *(void *)(v9 + v12[7]) = *(uint64_t *)((char *)v10 + v12[7]);
        *(void *)(v9 + v12[8]) = *(uint64_t *)((char *)v10 + v12[8]);
        *(unsigned char *)(v9 + v12[9]) = *((unsigned char *)v10 + v12[9]);
        *(unsigned char *)(v9 + v12[10]) = *((unsigned char *)v10 + v12[10]);
        uint64_t v17 = v12[11];
        uint64_t v18 = v9 + v17;
        uint64_t v19 = (uint64_t)v10 + v17;
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        *(unsigned char *)(v18 + 16) = *(unsigned char *)(v19 + 16);
        uint64_t v20 = v12[12];
        uint64_t v21 = *(void **)((char *)v10 + v20);
        *(void *)(v9 + v20) = v21;
        *(unsigned char *)(v9 + v12[13]) = *((unsigned char *)v10 + v12[13]);
        uint64_t v22 = v12[14];
        uint64_t v69 = (uint64_t)v10 + v22;
        uint64_t v71 = v9 + v22;
        uint64_t v23 = sub_228BACE18();
        __int16 v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16);
        swift_retain();
        swift_retain();
        id v24 = v21;
        v68(v71, v69, v23);
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v63 = *(int *)(a3 + 28);
    uint64_t v64 = v7 + v63;
    uint64_t v65 = (uint64_t)a2 + v63;
    uint64_t v66 = sub_228BACE18();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(v64, v65, v66);
  }
  return v7;
}

uint64_t sub_228B7C2D4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  type metadata accessor for MapContentList.Item.Content(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      unsigned int v5 = (int *)type metadata accessor for ResolvedAnnotation();
      uint64_t v6 = v4 + v5[6];
      uint64_t v7 = sub_228BACBE8();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
      swift_release();
      swift_release();

      uint64_t v8 = v5[14];
      goto LABEL_7;
    case 1u:
      uint64_t v9 = (int *)type metadata accessor for ResolvedMarker();
      uint64_t v10 = v4 + v9[8];
      uint64_t v11 = sub_228BACBE8();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

      swift_release();
      uint64_t v8 = v9[12];
      goto LABEL_7;
    case 2u:
      if (*(void *)(v4 + 16)) {
        swift_release();
      }
      swift_release();
      uint64_t v8 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
LABEL_7:
      uint64_t v12 = v4 + v8;
      uint64_t v13 = sub_228BACE18();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
      break;
    case 3u:
      sub_228B0A024(*(void **)v4, *(_WORD *)(v4 + 8));
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(v4 + 64);
      char v15 = *(unsigned char *)(v4 + 72);
      goto LABEL_11;
    case 4u:
      sub_228B09D08(*(void **)v4, *(void *)(v4 + 8));
      swift_release();
      swift_bridgeObjectRelease();
      sub_228AD26A8(*(void *)(v4 + 72), *(unsigned char *)(v4 + 80));
      uint64_t v14 = *(void *)(v4 + 88);
      char v15 = *(unsigned char *)(v4 + 96);
      goto LABEL_11;
    case 5u:
      swift_release();
      swift_bridgeObjectRelease();
      sub_228AD26A8(*(void *)(v4 + 88), *(unsigned char *)(v4 + 96));
      uint64_t v14 = *(void *)(v4 + 104);
      char v15 = *(unsigned char *)(v4 + 112);
LABEL_11:
      sub_228AD26A8(v14, v15);
      break;
    default:
      break;
  }
  uint64_t v16 = a1 + *(int *)(a2 + 28);
  uint64_t v17 = sub_228BACE18();
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);

  return v18(v16, v17);
}

uint64_t sub_228B7C588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = (uint64_t *)(a2 + v6);
  type metadata accessor for MapContentList.Item.Content(0);
  swift_bridgeObjectRetain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(unsigned char *)(v7 + 16) = *((unsigned char *)v8 + 16);
      *(_WORD *)(v7 + 17) = *(_WORD *)((char *)v8 + 17);
      uint64_t v23 = (int *)type metadata accessor for ResolvedMarker();
      uint64_t v24 = v23[8];
      uint64_t v25 = v7 + v24;
      uint64_t v26 = (uint64_t)v8 + v24;
      uint64_t v27 = sub_228BACBE8();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
      uint64_t v28 = v23[9];
      uint64_t v72 = v3;
      uint64_t v29 = *(void **)((char *)v8 + v28);
      *(void *)(v7 + v28) = v29;
      *(unsigned char *)(v7 + v23[10]) = *((unsigned char *)v8 + v23[10]);
      *(void *)(v7 + v23[11]) = *(uint64_t *)((char *)v8 + v23[11]);
      uint64_t v30 = v23[12];
      uint64_t v68 = (uint64_t)v8 + v30;
      uint64_t v70 = v7 + v30;
      uint64_t v31 = sub_228BACE18();
      uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16);
      id v33 = v29;
      uint64_t v3 = v72;
      swift_retain();
      v32(v70, v68, v31);
      break;
    case 2u:
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      uint64_t v34 = v8[2];
      uint64_t v73 = v3;
      if (v34)
      {
        uint64_t v35 = v8[3];
        *(void *)(v7 + 16) = v34;
        *(void *)(v7 + 24) = v35;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v7 + 16) = *((_OWORD *)v8 + 1);
      }
      *(void *)(v7 + 32) = v8[4];
      *(unsigned char *)(v7 + 40) = *((unsigned char *)v8 + 40);
      uint64_t v56 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
      uint64_t v57 = v7 + v56;
      uint64_t v58 = (uint64_t)v8 + v56;
      uint64_t v59 = sub_228BACE18();
      uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 16);
      swift_retain();
      v60(v57, v58, v59);
      uint64_t v3 = v73;
      break;
    case 3u:
      uint64_t v36 = *v8;
      __int16 v37 = *((_WORD *)v8 + 4);
      sub_228B0A008((void *)*v8, v37);
      *(void *)uint64_t v7 = v36;
      *(_WORD *)(v7 + 8) = v37;
      uint64_t v38 = v8[3];
      *(void *)(v7 + 16) = v8[2];
      *(void *)(v7 + 24) = v38;
      *(void *)(v7 + 32) = v8[4];
      uint64_t v39 = v8[6];
      *(void *)(v7 + 40) = v8[5];
      *(void *)(v7 + 48) = v39;
      uint64_t v40 = v8[8];
      *(void *)(v7 + 56) = v8[7];
      char v41 = *((unsigned char *)v8 + 72);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_228ACF3A4(v40, v41);
      *(void *)(v7 + 64) = v40;
      *(unsigned char *)(v7 + 72) = v41;
      *(void *)(v7 + 80) = v8[10];
      break;
    case 4u:
      uint64_t v42 = (void *)*v8;
      uint64_t v43 = v8[1];
      uint64_t v44 = v8[2];
      sub_228B09CA8((void *)*v8, v43);
      *(void *)uint64_t v7 = v42;
      *(void *)(v7 + 8) = v43;
      uint64_t v45 = v8[3];
      uint64_t v46 = v8[4];
      *(void *)(v7 + 16) = v44;
      *(void *)(v7 + 24) = v45;
      *(void *)(v7 + 32) = v46;
      *(void *)(v7 + 40) = v8[5];
      uint64_t v47 = v8[7];
      *(void *)(v7 + 48) = v8[6];
      *(void *)(v7 + 56) = v47;
      uint64_t v48 = v8[9];
      *(void *)(v7 + 64) = v8[8];
      LOBYTE(v44) = *((unsigned char *)v8 + 80);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_228ACF3A4(v48, v44);
      *(void *)(v7 + 72) = v48;
      *(unsigned char *)(v7 + 80) = v44;
      uint64_t v49 = v8[11];
      LOBYTE(v48) = *((unsigned char *)v8 + 96);
      sub_228ACF3A4(v49, v48);
      *(void *)(v7 + 88) = v49;
      *(unsigned char *)(v7 + 96) = v48;
      *(void *)(v7 + 104) = v8[13];
      break;
    case 5u:
      long long v50 = *((_OWORD *)v8 + 1);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v50;
      *(unsigned char *)(v7 + 32) = *((unsigned char *)v8 + 32);
      uint64_t v51 = v8[6];
      *(void *)(v7 + 40) = v8[5];
      *(void *)(v7 + 48) = v51;
      *(void *)(v7 + 56) = v8[7];
      uint64_t v52 = v8[9];
      *(void *)(v7 + 64) = v8[8];
      *(void *)(v7 + 72) = v52;
      uint64_t v53 = v8[11];
      *(void *)(v7 + 80) = v8[10];
      char v54 = *((unsigned char *)v8 + 96);
      swift_retain();
      swift_bridgeObjectRetain();
      sub_228ACF3A4(v53, v54);
      *(void *)(v7 + 88) = v53;
      *(unsigned char *)(v7 + 96) = v54;
      uint64_t v55 = v8[13];
      LOBYTE(v53) = *((unsigned char *)v8 + 112);
      sub_228ACF3A4(v55, v53);
      *(void *)(v7 + 104) = v55;
      *(unsigned char *)(v7 + 112) = v53;
      *(void *)(v7 + 120) = v8[15];
      break;
    default:
      long long v9 = *((_OWORD *)v8 + 1);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *(_OWORD *)(v7 + 16) = v9;
      uint64_t v10 = (int *)type metadata accessor for ResolvedAnnotation();
      uint64_t v11 = v10[6];
      uint64_t v12 = v7 + v11;
      uint64_t v13 = (uint64_t)v8 + v11;
      uint64_t v14 = sub_228BACBE8();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      *(void *)(v7 + v10[7]) = *(uint64_t *)((char *)v8 + v10[7]);
      *(void *)(v7 + v10[8]) = *(uint64_t *)((char *)v8 + v10[8]);
      *(unsigned char *)(v7 + v10[9]) = *((unsigned char *)v8 + v10[9]);
      *(unsigned char *)(v7 + v10[10]) = *((unsigned char *)v8 + v10[10]);
      uint64_t v15 = v10[11];
      uint64_t v16 = v7 + v15;
      uint64_t v17 = (uint64_t)v8 + v15;
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
      uint64_t v18 = v10[12];
      uint64_t v71 = v3;
      uint64_t v19 = *(void **)((char *)v8 + v18);
      *(void *)(v7 + v18) = v19;
      *(unsigned char *)(v7 + v10[13]) = *((unsigned char *)v8 + v10[13]);
      uint64_t v20 = v10[14];
      uint64_t v67 = (uint64_t)v8 + v20;
      uint64_t v69 = v7 + v20;
      uint64_t v21 = sub_228BACE18();
      uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16);
      swift_retain();
      swift_retain();
      id v22 = v19;
      uint64_t v3 = v71;
      v66(v69, v67, v21);
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v61 = *(int *)(v3 + 28);
  uint64_t v62 = a1 + v61;
  uint64_t v63 = a2 + v61;
  uint64_t v64 = sub_228BACE18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16))(v62, v63, v64);
  return a1;
}

uint64_t sub_228B7CB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t *)(a2 + v6);
    sub_228B7B19C(a1 + v6, type metadata accessor for MapContentList.Item.Content);
    type metadata accessor for MapContentList.Item.Content(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        *(unsigned char *)(v7 + 16) = *((unsigned char *)v8 + 16);
        *(unsigned char *)(v7 + 17) = *((unsigned char *)v8 + 17);
        *(unsigned char *)(v7 + 18) = *((unsigned char *)v8 + 18);
        uint64_t v23 = (int *)type metadata accessor for ResolvedMarker();
        uint64_t v24 = v23[8];
        uint64_t v25 = v7 + v24;
        uint64_t v26 = (uint64_t)v8 + v24;
        uint64_t v27 = sub_228BACBE8();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
        uint64_t v28 = v23[9];
        uint64_t v29 = *(void **)((char *)v8 + v28);
        *(void *)(v7 + v28) = v29;
        *(unsigned char *)(v7 + v23[10]) = *((unsigned char *)v8 + v23[10]);
        *(void *)(v7 + v23[11]) = *(uint64_t *)((char *)v8 + v23[11]);
        uint64_t v30 = v23[12];
        uint64_t v62 = (uint64_t)v8 + v30;
        uint64_t v64 = v7 + v30;
        uint64_t v31 = sub_228BACE18();
        uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16);
        id v33 = v29;
        swift_retain();
        v32(v64, v62, v31);
        break;
      case 2u:
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        uint64_t v34 = v8[2];
        if (v34)
        {
          uint64_t v35 = v8[3];
          *(void *)(v7 + 16) = v34;
          *(void *)(v7 + 24) = v35;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v7 + 16) = *((_OWORD *)v8 + 1);
        }
        *(void *)(v7 + 32) = v8[4];
        *(unsigned char *)(v7 + 40) = *((unsigned char *)v8 + 40);
        uint64_t v50 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
        uint64_t v51 = v7 + v50;
        uint64_t v52 = (uint64_t)v8 + v50;
        uint64_t v53 = sub_228BACE18();
        char v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16);
        swift_retain();
        v54(v51, v52, v53);
        break;
      case 3u:
        uint64_t v36 = *v8;
        __int16 v37 = *((_WORD *)v8 + 4);
        sub_228B0A008((void *)*v8, v37);
        *(void *)uint64_t v7 = v36;
        *(_WORD *)(v7 + 8) = v37;
        *(void *)(v7 + 16) = v8[2];
        *(void *)(v7 + 24) = v8[3];
        *(_DWORD *)(v7 + 32) = *((_DWORD *)v8 + 8);
        *(_DWORD *)(v7 + 36) = *((_DWORD *)v8 + 9);
        *(void *)(v7 + 40) = v8[5];
        *(void *)(v7 + 48) = v8[6];
        *(void *)(v7 + 56) = v8[7];
        uint64_t v38 = v8[8];
        char v39 = *((unsigned char *)v8 + 72);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_228ACF3A4(v38, v39);
        *(void *)(v7 + 64) = v38;
        *(unsigned char *)(v7 + 72) = v39;
        *(void *)(v7 + 80) = v8[10];
        break;
      case 4u:
        uint64_t v40 = (void *)*v8;
        uint64_t v41 = v8[1];
        uint64_t v42 = v8[2];
        sub_228B09CA8((void *)*v8, v41);
        *(void *)uint64_t v7 = v40;
        *(void *)(v7 + 8) = v41;
        *(void *)(v7 + 16) = v42;
        *(void *)(v7 + 24) = v8[3];
        *(void *)(v7 + 32) = v8[4];
        *(_DWORD *)(v7 + 40) = *((_DWORD *)v8 + 10);
        *(_DWORD *)(v7 + 44) = *((_DWORD *)v8 + 11);
        *(void *)(v7 + 48) = v8[6];
        *(void *)(v7 + 56) = v8[7];
        *(void *)(v7 + 64) = v8[8];
        uint64_t v43 = v8[9];
        LOBYTE(v42) = *((unsigned char *)v8 + 80);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_228ACF3A4(v43, v42);
        *(void *)(v7 + 72) = v43;
        *(unsigned char *)(v7 + 80) = v42;
        uint64_t v44 = v8[11];
        LOBYTE(v43) = *((unsigned char *)v8 + 96);
        sub_228ACF3A4(v44, v43);
        *(void *)(v7 + 88) = v44;
        *(unsigned char *)(v7 + 96) = v43;
        *(void *)(v7 + 104) = v8[13];
        break;
      case 5u:
        long long v45 = *(_OWORD *)v8;
        long long v46 = *((_OWORD *)v8 + 1);
        *(unsigned char *)(v7 + 32) = *((unsigned char *)v8 + 32);
        *(_OWORD *)uint64_t v7 = v45;
        *(_OWORD *)(v7 + 16) = v46;
        *(void *)(v7 + 40) = v8[5];
        *(void *)(v7 + 48) = v8[6];
        *(_DWORD *)(v7 + 56) = *((_DWORD *)v8 + 14);
        *(_DWORD *)(v7 + 60) = *((_DWORD *)v8 + 15);
        *(void *)(v7 + 64) = v8[8];
        *(void *)(v7 + 72) = v8[9];
        *(void *)(v7 + 80) = v8[10];
        uint64_t v47 = v8[11];
        char v48 = *((unsigned char *)v8 + 96);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_228ACF3A4(v47, v48);
        *(void *)(v7 + 88) = v47;
        *(unsigned char *)(v7 + 96) = v48;
        uint64_t v49 = v8[13];
        LOBYTE(v47) = *((unsigned char *)v8 + 112);
        sub_228ACF3A4(v49, v47);
        *(void *)(v7 + 104) = v49;
        *(unsigned char *)(v7 + 112) = v47;
        *(void *)(v7 + 120) = v8[15];
        break;
      default:
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        *(_OWORD *)(v7 + 16) = *((_OWORD *)v8 + 1);
        long long v9 = (int *)type metadata accessor for ResolvedAnnotation();
        uint64_t v10 = v9[6];
        uint64_t v11 = v7 + v10;
        uint64_t v12 = (uint64_t)v8 + v10;
        uint64_t v13 = sub_228BACBE8();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
        *(void *)(v7 + v9[7]) = *(uint64_t *)((char *)v8 + v9[7]);
        *(void *)(v7 + v9[8]) = *(uint64_t *)((char *)v8 + v9[8]);
        *(unsigned char *)(v7 + v9[9]) = *((unsigned char *)v8 + v9[9]);
        *(unsigned char *)(v7 + v9[10]) = *((unsigned char *)v8 + v9[10]);
        uint64_t v14 = v9[11];
        uint64_t v15 = v7 + v14;
        uint64_t v16 = (uint64_t)v8 + v14;
        char v17 = *(unsigned char *)(v16 + 16);
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
        *(unsigned char *)(v15 + 16) = v17;
        uint64_t v18 = v9[12];
        uint64_t v19 = *(void **)((char *)v8 + v18);
        *(void *)(v7 + v18) = v19;
        *(unsigned char *)(v7 + v9[13]) = *((unsigned char *)v8 + v9[13]);
        uint64_t v20 = v9[14];
        uint64_t v61 = (uint64_t)v8 + v20;
        uint64_t v63 = v7 + v20;
        uint64_t v21 = sub_228BACE18();
        uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16);
        swift_retain();
        swift_retain();
        id v22 = v19;
        v60(v63, v61, v21);
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v55 = *(int *)(a3 + 28);
  uint64_t v56 = a1 + v55;
  uint64_t v57 = a2 + v55;
  uint64_t v58 = sub_228BACE18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 24))(v56, v57, v58);
  return a1;
}

uint64_t sub_228B7D110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = type metadata accessor for MapContentList.Item.Content(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      uint64_t v24 = *((void *)v8 + 2);
      if (v24)
      {
        uint64_t v25 = *((void *)v8 + 3);
        *((void *)v7 + 2) = v24;
        *((void *)v7 + 3) = v25;
      }
      else
      {
        *((_OWORD *)v7 + 1) = *((_OWORD *)v8 + 1);
      }
      *((void *)v7 + 4) = *((void *)v8 + 4);
      v7[40] = v8[40];
      uint64_t v35 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
      uint64_t v36 = &v7[v35];
      __int16 v37 = &v8[v35];
      uint64_t v38 = sub_228BACE18();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
      goto LABEL_11;
    case 1:
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      v7[16] = v8[16];
      *(_WORD *)(v7 + 17) = *(_WORD *)(v8 + 17);
      uint64_t v26 = (int *)type metadata accessor for ResolvedMarker();
      uint64_t v27 = v26[8];
      uint64_t v28 = &v7[v27];
      uint64_t v29 = &v8[v27];
      uint64_t v30 = sub_228BACBE8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
      *(void *)&v7[v26[9]] = *(void *)&v8[v26[9]];
      v7[v26[10]] = v8[v26[10]];
      *(void *)&v7[v26[11]] = *(void *)&v8[v26[11]];
      uint64_t v31 = v26[12];
      uint64_t v32 = &v7[v31];
      id v33 = &v8[v31];
      uint64_t v34 = sub_228BACE18();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v32, v33, v34);
      goto LABEL_11;
    case 0:
      long long v11 = *((_OWORD *)v8 + 1);
      *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
      *((_OWORD *)v7 + 1) = v11;
      uint64_t v12 = (int *)type metadata accessor for ResolvedAnnotation();
      uint64_t v13 = v12[6];
      uint64_t v14 = &v7[v13];
      uint64_t v15 = &v8[v13];
      uint64_t v16 = sub_228BACBE8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      *(void *)&v7[v12[7]] = *(void *)&v8[v12[7]];
      *(void *)&v7[v12[8]] = *(void *)&v8[v12[8]];
      v7[v12[9]] = v8[v12[9]];
      v7[v12[10]] = v8[v12[10]];
      uint64_t v17 = v12[11];
      uint64_t v18 = &v7[v17];
      uint64_t v19 = &v8[v17];
      *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
      v18[16] = v19[16];
      *(void *)&v7[v12[12]] = *(void *)&v8[v12[12]];
      v7[v12[13]] = v8[v12[13]];
      uint64_t v20 = v12[14];
      uint64_t v21 = &v7[v20];
      id v22 = &v8[v20];
      uint64_t v23 = sub_228BACE18();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
LABEL_11:
      swift_storeEnumTagMultiPayload();
      goto LABEL_12;
  }
  memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
LABEL_12:
  uint64_t v39 = *(int *)(a3 + 28);
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  uint64_t v42 = sub_228BACE18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 32))(v40, v41, v42);
  return a1;
}

uint64_t sub_228B7D4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (char *)(a1 + v6);
    uint64_t v8 = (char *)(a2 + v6);
    sub_228B7B19C(a1 + v6, type metadata accessor for MapContentList.Item.Content);
    uint64_t v9 = type metadata accessor for MapContentList.Item.Content(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        uint64_t v24 = *((void *)v8 + 2);
        if (v24)
        {
          uint64_t v25 = *((void *)v8 + 3);
          *((void *)v7 + 2) = v24;
          *((void *)v7 + 3) = v25;
        }
        else
        {
          *((_OWORD *)v7 + 1) = *((_OWORD *)v8 + 1);
        }
        *((void *)v7 + 4) = *((void *)v8 + 4);
        v7[40] = v8[40];
        uint64_t v35 = *(int *)(type metadata accessor for ResolvedUserAnnotation() + 32);
        uint64_t v36 = &v7[v35];
        __int16 v37 = &v8[v35];
        uint64_t v38 = sub_228BACE18();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v38 - 8) + 32))(v36, v37, v38);
        goto LABEL_12;
      case 1:
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        v7[16] = v8[16];
        *(_WORD *)(v7 + 17) = *(_WORD *)(v8 + 17);
        uint64_t v26 = (int *)type metadata accessor for ResolvedMarker();
        uint64_t v27 = v26[8];
        uint64_t v28 = &v7[v27];
        uint64_t v29 = &v8[v27];
        uint64_t v30 = sub_228BACBE8();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 32))(v28, v29, v30);
        *(void *)&v7[v26[9]] = *(void *)&v8[v26[9]];
        v7[v26[10]] = v8[v26[10]];
        *(void *)&v7[v26[11]] = *(void *)&v8[v26[11]];
        uint64_t v31 = v26[12];
        uint64_t v32 = &v7[v31];
        id v33 = &v8[v31];
        uint64_t v34 = sub_228BACE18();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v32, v33, v34);
        goto LABEL_12;
      case 0:
        long long v11 = *((_OWORD *)v8 + 1);
        *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
        *((_OWORD *)v7 + 1) = v11;
        uint64_t v12 = (int *)type metadata accessor for ResolvedAnnotation();
        uint64_t v13 = v12[6];
        uint64_t v14 = &v7[v13];
        uint64_t v15 = &v8[v13];
        uint64_t v16 = sub_228BACBE8();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
        *(void *)&v7[v12[7]] = *(void *)&v8[v12[7]];
        *(void *)&v7[v12[8]] = *(void *)&v8[v12[8]];
        v7[v12[9]] = v8[v12[9]];
        v7[v12[10]] = v8[v12[10]];
        uint64_t v17 = v12[11];
        uint64_t v18 = &v7[v17];
        uint64_t v19 = &v8[v17];
        *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        v18[16] = v19[16];
        *(void *)&v7[v12[12]] = *(void *)&v8[v12[12]];
        v7[v12[13]] = v8[v12[13]];
        uint64_t v20 = v12[14];
        uint64_t v21 = &v7[v20];
        id v22 = &v8[v20];
        uint64_t v23 = sub_228BACE18();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
LABEL_12:
        swift_storeEnumTagMultiPayload();
        goto LABEL_13;
    }
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
LABEL_13:
  uint64_t v39 = *(int *)(a3 + 28);
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  uint64_t v42 = sub_228BACE18();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 40))(v40, v41, v42);
  return a1;
}

uint64_t sub_228B7D874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B7D888);
}

uint64_t sub_228B7D888(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for MapContentList.Item.Content(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      long long v11 = (char *)a1 + *(int *)(a3 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_228BACE18();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 28);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_228B7D9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B7D9C8);
}

void *sub_228B7D9C8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for MapContentList.Item.Content(0);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      long long v11 = (char *)v5 + *(int *)(a4 + 24);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_228BACE18();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 28);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_228B7DAF4()
{
  uint64_t result = type metadata accessor for MapContentList.Item.Content(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_228BACE18();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_228B7DBDC()
{
  unint64_t result = qword_268294038;
  if (!qword_268294038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294038);
  }
  return result;
}

uint64_t sub_228B7DC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268294040);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_OWORD *sub_228B7DC98(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(_OWORD *)((char *)a2 + 25) = *(long long *)((char *)a1 + 25);
  *a2 = v2;
  a2[1] = v3;
  return a2;
}

ValueMetadata *type metadata accessor for MapContentList.IDGenerator()
{
  return &type metadata for MapContentList.IDGenerator;
}

unint64_t sub_228B7DCC4()
{
  unint64_t result = qword_268294058[0];
  if (!qword_268294058[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268294058);
  }
  return result;
}

uint64_t sub_228B7DD30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v13 = *a2;
  char v14 = *(unsigned char *)(a4 + 16);
  long long v15 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a8 = *(_OWORD *)a1;
  *(_OWORD *)(a8 + 16) = v15;
  *(_OWORD *)(a8 + 32) = *(_OWORD *)(a1 + 32);
  *(void *)(a8 + 48) = v12;
  *(void *)(a8 + 56) = v13;
  *(unsigned char *)(a8 + 64) = a3;
  *(_OWORD *)(a8 + 72) = *(_OWORD *)a4;
  *(unsigned char *)(a8 + 88) = v14;
  uint64_t v16 = type metadata accessor for _DefaultAnnotatedMapContent();
  uint64_t v17 = a8 + *(int *)(v16 + 56);
  uint64_t v18 = sub_228BAD718();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a5, v18);
  uint64_t v20 = (void *)(a8 + *(int *)(v16 + 60));
  *uint64_t v20 = a6;
  v20[1] = a7;
  return result;
}

uint64_t sub_228B7DE18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(_OWORD *)(a8 + 56) = 0u;
  uint64_t v15 = a8 + 56;
  *(_OWORD *)(a8 + 104) = 0u;
  *(_OWORD *)(a8 + 120) = 0u;
  *(_OWORD *)(a8 + 72) = 0u;
  *(_OWORD *)(a8 + 88) = 0u;
  *(void *)(a8 + 136) = 1;
  *(_OWORD *)(a8 + 144) = 0u;
  *(_OWORD *)(a8 + 160) = 0u;
  if (qword_268291380 != -1) {
    swift_once();
  }
  *(void *)(a8 + 176) = qword_268294708;
  *(unsigned char *)(a8 + 184) = 0;
  *(void *)(a8 + 200) = 0;
  *(void *)(a8 + 208) = 0;
  *(void *)(a8 + 192) = 0;
  uint64_t v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_2682940E8);
  uint64_t v17 = (uint64_t *)(a8 + v16[15]);
  *uint64_t v17 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293840);
  swift_storeEnumTagMultiPayload();
  uint64_t v18 = (uint64_t *)(a8 + v16[16]);
  *uint64_t v18 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  swift_storeEnumTagMultiPayload();
  uint64_t v19 = a8 + v16[17];
  *(void *)uint64_t v19 = swift_getKeyPath();
  *(unsigned char *)(v19 + 8) = 0;
  uint64_t v20 = (uint64_t *)(a8 + v16[18]);
  *uint64_t v20 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293850);
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = a8 + v16[19];
  *(void *)uint64_t v21 = swift_getKeyPath();
  *(unsigned char *)(v21 + 8) = 0;
  sub_228B7E348(a1, a8);
  *(void *)(a8 + 176) = a2;
  *(unsigned char *)(a8 + 184) = a3 & 1;
  if (a5)
  {
    sub_228BAD5A8();
    swift_retain();
    swift_retain();
    uint64_t v22 = sub_228BAD598();
    uint64_t v23 = swift_allocObject();
    uint64_t v24 = MEMORY[0x263F8F500];
    *(void *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = v24;
    *(void *)(v23 + 32) = a4;
    *(void *)(v23 + 40) = a5;
    *(unsigned char *)(v23 + 48) = a6;
    swift_retain();
    swift_retain();
    uint64_t v25 = sub_228BAD598();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v25;
    *(void *)(v26 + 24) = v24;
    *(void *)(v26 + 32) = a4;
    *(void *)(v26 + 40) = a5;
    *(unsigned char *)(v26 + 48) = a6;
    type metadata accessor for MKUserTrackingMode(0);
    sub_228BAD208();
    sub_228B66410(a4, a5);
    sub_228B66410(*(void *)(a8 + 192), *(void *)(a8 + 200));
    *(_OWORD *)(a8 + 192) = v29;
    *(void *)(a8 + 208) = v30;
  }
  return sub_228B7FE34(a7, v15);
}

uint64_t _DefaultAnnotatedMapContent.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v25 = a2;
  uint64_t v5 = sub_228BAD718();
  __n128 v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = *(void *)v3;
  unint64_t v22 = *(void *)(v3 + 8);
  uint64_t v23 = v9;
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v20 = *(void *)(v3 + 24);
  uint64_t v21 = v10;
  uint64_t v11 = *(void *)(v3 + 32);
  uint64_t v12 = *(void *)(v3 + 40);
  v29[0] = v9;
  v29[1] = v22;
  _OWORD v29[2] = v10;
  v29[3] = v20;
  v29[4] = v11;
  v29[5] = v12;
  uint64_t v13 = *(void *)(v3 + 56);
  v29[6] = *(void *)(v3 + 48);
  uint64_t v28 = v13;
  int v24 = *(unsigned __int8 *)(v3 + 64);
  uint64_t v15 = *(void *)(v3 + 80);
  char v16 = *(unsigned char *)(v3 + 88);
  v26[0] = *(void *)(v3 + 72);
  uint64_t v14 = v26[0];
  v26[1] = v15;
  char v27 = v16;
  uint64_t v17 = *(void *)(a1 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))(v8, v3, a1, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v8, 0, 1, a1);
  sub_228B175AC(v23, v22);
  sub_228B65A04(v14, v15);
  return sub_228B59794(v29, &v28, v24, (uint64_t)v26, (uint64_t)v8, v25);
}

uint64_t _DefaultMapContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  sub_228B7E348(v1, (uint64_t)v9);
  uint64_t v3 = *(void *)(v1 + 56);
  char v4 = *(unsigned char *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = *(void *)(v1 + 80);
  memset(v10, 0, sizeof(v10));
  uint64_t v11 = 1;
  long long v12 = 0u;
  long long v13 = 0u;
  char v7 = *(unsigned char *)(v1 + 88);
  sub_228B7E3A4((uint64_t)v9);
  sub_228B65A04(v5, v6);
  return sub_228B7DE18((uint64_t)v9, v3, v4, v5, v6, v7, (uint64_t)v10, a1);
}

uint64_t sub_228B7E348(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_228B7E3A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_228B7E3DC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_228B7E428()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_228B7E444@<X0>(uint64_t a1@<X8>)
{
  sub_228B7E348(v1, (uint64_t)v9);
  uint64_t v3 = *(void *)(v1 + 56);
  char v4 = *(unsigned char *)(v1 + 64);
  uint64_t v5 = *(void *)(v1 + 72);
  uint64_t v6 = *(void *)(v1 + 80);
  memset(v10, 0, sizeof(v10));
  uint64_t v11 = 1;
  long long v12 = 0u;
  long long v13 = 0u;
  char v7 = *(unsigned char *)(v1 + 88);
  sub_228B7E3A4((uint64_t)v9);
  sub_228B65A04(v5, v6);
  return sub_228B7DE18((uint64_t)v9, v3, v4, v5, v6, v7, (uint64_t)v10, a1);
}

uint64_t sub_228B7E500()
{
  uint64_t result = sub_228BAD718();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_228B7E5C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v8 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v8 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v9 = ((v8 + 7 + ((v6 + 89) & ~(unint64_t)v6)) & 0xFFFFFFFFFFFFFFF8) + 16;
  int v10 = v6 & 0x100000;
  if (v7 > 7 || v10 != 0 || v9 > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    uint64_t v35 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v36 = v8 + 7;
    uint64_t v37 = *(void *)(a3 + 16);
    size_t __n = v8;
    uint64_t v34 = ~v7;
    uint64_t v14 = *a2;
    unint64_t v15 = a2[1];
    uint64_t v16 = a2[2];
    uint64_t v17 = a2[3];
    uint64_t v18 = a2[4];
    uint64_t v19 = a2[5];
    uint64_t v20 = a2[6];
    sub_228B175AC(*a2, v15);
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v16;
    a1[3] = v17;
    a1[4] = v18;
    a1[5] = v19;
    a1[6] = v20;
    unint64_t v21 = ((unint64_t)a1 + 63) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = ((unint64_t)a2 + 63) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v21 = *(void *)v22;
    *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
    unint64_t v23 = ((unint64_t)a1 + 79) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = ((unint64_t)a2 + 79) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v24 + 8) < 0xFFFFFFFFuLL)
    {
      long long v25 = *(_OWORD *)v24;
      *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 16);
      *(_OWORD *)unint64_t v23 = v25;
    }
    else
    {
      *(void *)unint64_t v23 = *(void *)v24;
      *(void *)(v23 + 8) = *(void *)(v24 + 8);
      *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 16);
      swift_retain();
      swift_retain();
    }
    uint64_t v26 = v24 + v7;
    char v27 = (void *)((v23 + v7 + 17) & v34);
    uint64_t v28 = (const void *)((v26 + 17) & v34);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v28, 1, v37))
    {
      memcpy(v27, v28, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v27, v28, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v35 + 56))(v27, 0, 1, v37);
    }
    unint64_t v29 = ((unint64_t)v27 + v36) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v30 = ((unint64_t)v28 + v36) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v30 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v29 = *(_OWORD *)v30;
      return a1;
    }
    uint64_t v31 = *(void *)(v30 + 8);
    *(void *)unint64_t v29 = *(void *)v30;
    *(void *)(v29 + 8) = v31;
  }
  swift_retain();
  return a1;
}

uint64_t sub_228B7E850(uint64_t a1, uint64_t a2)
{
  sub_228B17624(*(void *)a1, *(void *)(a1 + 8));
  unint64_t v4 = (a1 + 79) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v4 + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
  }
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
  if (!result) {
    uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  }
  unint64_t v9 = v7 + *(void *)(v6 + 64);
  if (!*(_DWORD *)(v6 + 84)) {
    ++v9;
  }
  if (*(void *)((v9 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t *sub_228B7E99C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  sub_228B175AC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  unint64_t v13 = ((unint64_t)a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  unint64_t v15 = ((unint64_t)a1 + 79) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)a2 + 79) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v16 + 8) < 0xFFFFFFFFuLL)
  {
    long long v17 = *(_OWORD *)v16;
    *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
    *(_OWORD *)unint64_t v15 = v17;
  }
  else
  {
    *(void *)unint64_t v15 = *(void *)v16;
    *(void *)(v15 + 8) = *(void *)(v16 + 8);
    *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
    swift_retain();
    swift_retain();
  }
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (void *)((v15 + v20 + 17) & ~v20);
  unint64_t v22 = (const void *)((v16 + v20 + 17) & ~v20);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v22, 1, v18))
  {
    int v23 = *(_DWORD *)(v19 + 84);
    size_t v24 = *(void *)(v19 + 64);
    if (v23) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v24 + 1;
    }
    memcpy(v21, v22, v25);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v21, v22, v18);
    char v27 = *(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56);
    uint64_t v26 = v19 + 56;
    v27(v21, 0, 1, v18);
    int v23 = *(_DWORD *)(v26 + 28);
    size_t v24 = *(void *)(v26 + 8);
  }
  if (v23) {
    size_t v28 = v24;
  }
  else {
    size_t v28 = v24 + 1;
  }
  unint64_t v29 = ((unint64_t)v21 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = ((unint64_t)v22 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v30 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v29 = *(_OWORD *)v30;
  }
  else
  {
    uint64_t v31 = *(void *)(v30 + 8);
    *(void *)unint64_t v29 = *(void *)v30;
    *(void *)(v29 + 8) = v31;
    swift_retain();
  }
  return a1;
}

uint64_t *sub_228B7EBD4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  sub_228B175AC(*a2, v7);
  uint64_t v13 = *a1;
  unint64_t v14 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v12;
  sub_228B17624(v13, v14);
  unint64_t v15 = ((unint64_t)a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  unint64_t v17 = ((unint64_t)a1 + 79) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)a2 + 79) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = *(void *)(v18 + 8);
  if (*(void *)(v17 + 8) < 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      *(void *)unint64_t v17 = *(void *)v18;
      *(void *)(v17 + 8) = *(void *)(v18 + 8);
      *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v19 >= 0xFFFFFFFF)
    {
      *(void *)unint64_t v17 = *(void *)v18;
      swift_retain();
      swift_release();
      *(void *)(v17 + 8) = *(void *)(v18 + 8);
      swift_retain();
      swift_release();
      *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
      goto LABEL_8;
    }
    swift_release();
    swift_release();
  }
  long long v20 = *(_OWORD *)v18;
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  *(_OWORD *)unint64_t v17 = v20;
LABEL_8:
  uint64_t v21 = *(void *)(a3 + 16);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  size_t v24 = (void *)((v17 + v23 + 17) & ~v23);
  size_t v25 = (void *)((v18 + v23 + 17) & ~v23);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  int v27 = v26(v24, 1, v21);
  int v28 = v26(v25, 1, v21);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v24, v25, v21);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v21);
      goto LABEL_19;
    }
    int v29 = *(_DWORD *)(v22 + 84);
    size_t v30 = *(void *)(v22 + 64);
  }
  else
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v24, v25, v21);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
    int v29 = *(_DWORD *)(v22 + 84);
    size_t v30 = *(void *)(v22 + 64);
  }
  if (v29) {
    size_t v31 = v30;
  }
  else {
    size_t v31 = v30 + 1;
  }
  memcpy(v24, v25, v31);
LABEL_19:
  if (*(_DWORD *)(v22 + 84)) {
    uint64_t v32 = *(void *)(v22 + 64);
  }
  else {
    uint64_t v32 = *(void *)(v22 + 64) + 1;
  }
  id v33 = (void *)(((unint64_t)v24 + v32 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = (unint64_t *)(((unint64_t)v25 + v32 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v35 = *v34;
  if (*v33 < 0xFFFFFFFFuLL)
  {
    if (v35 >= 0xFFFFFFFF)
    {
      unint64_t v37 = v34[1];
      *id v33 = v35;
      v33[1] = v37;
      swift_retain();
      return a1;
    }
LABEL_28:
    *(_OWORD *)id v33 = *(_OWORD *)v34;
    return a1;
  }
  if (v35 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_28;
  }
  unint64_t v36 = v34[1];
  *id v33 = v35;
  v33[1] = v36;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_228B7EF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  unint64_t v5 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v5 = *(void *)v6;
  *(unsigned char *)(v5 + 8) = *(unsigned char *)(v6 + 8);
  unint64_t v7 = (a1 + 79) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (a2 + 79) & 0xFFFFFFFFFFFFFFF8;
  long long v9 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = v9;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (void *)((v7 + v12 + 17) & ~v12);
  unint64_t v14 = (const void *)((v8 + v12 + 17) & ~v12);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v14, 1, v10))
  {
    int v15 = *(_DWORD *)(v11 + 84);
    size_t v16 = *(void *)(v11 + 64);
    if (v15) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v16 + 1;
    }
    memcpy(v13, v14, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v13, v14, v10);
    unint64_t v19 = *(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56);
    uint64_t v18 = v11 + 56;
    v19(v13, 0, 1, v10);
    int v15 = *(_DWORD *)(v18 + 28);
    size_t v16 = *(void *)(v18 + 8);
  }
  if (v15) {
    size_t v20 = v16;
  }
  else {
    size_t v20 = v16 + 1;
  }
  unint64_t v21 = ((unint64_t)v13 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = (uint64_t *)(((unint64_t)v14 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = *v22;
  if ((unint64_t)*v22 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
  }
  else
  {
    uint64_t v24 = v22[1];
    *(void *)unint64_t v21 = v23;
    *(void *)(v21 + 8) = v24;
  }
  return a1;
}

uint64_t sub_228B7F0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v6;
  sub_228B17624(v7, v8);
  unint64_t v10 = (a1 + 63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v10 = *(void *)v11;
  *(unsigned char *)(v10 + 8) = *(unsigned char *)(v11 + 8);
  unint64_t v12 = (a1 + 79) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (a2 + 79) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v12 + 8) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v13 + 8) >= 0xFFFFFFFFuLL)
    {
      *(void *)unint64_t v12 = *(void *)v13;
      swift_release();
      *(void *)(v12 + 8) = *(void *)(v13 + 8);
      swift_release();
      *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
      goto LABEL_6;
    }
    swift_release();
    swift_release();
  }
  long long v14 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
  *(_OWORD *)unint64_t v12 = v14;
LABEL_6:
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (void *)((v12 + v17 + 17) & ~v17);
  unint64_t v19 = (void *)((v13 + v17 + 17) & ~v17);
  size_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v21 = v20(v18, 1, v15);
  int v22 = v20(v19, 1, v15);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v18, v19, v15);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, v15);
      goto LABEL_17;
    }
    int v23 = *(_DWORD *)(v16 + 84);
    size_t v24 = *(void *)(v16 + 64);
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v18, v19, v15);
      goto LABEL_17;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
    int v23 = *(_DWORD *)(v16 + 84);
    size_t v24 = *(void *)(v16 + 64);
  }
  if (v23) {
    size_t v25 = v24;
  }
  else {
    size_t v25 = v24 + 1;
  }
  memcpy(v18, v19, v25);
LABEL_17:
  if (*(_DWORD *)(v16 + 84)) {
    uint64_t v26 = *(void *)(v16 + 64);
  }
  else {
    uint64_t v26 = *(void *)(v16 + 64) + 1;
  }
  int v27 = (void *)(((unint64_t)v18 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v28 = (unint64_t *)(((unint64_t)v19 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v29 = *v28;
  if (*v27 < 0xFFFFFFFFuLL)
  {
    if (v29 >= 0xFFFFFFFF)
    {
      unint64_t v31 = v28[1];
      *int v27 = v29;
      v27[1] = v31;
      return a1;
    }
LABEL_26:
    *(_OWORD *)int v27 = *(_OWORD *)v28;
    return a1;
  }
  if (v29 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_26;
  }
  unint64_t v30 = v28[1];
  *int v27 = v29;
  v27[1] = v30;
  swift_release();
  return a1;
}

uint64_t sub_228B7F3C8(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = 7;
  if (!v6) {
    uint64_t v10 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v11 = ((v10 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 89) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    unsigned int v12 = a2 - v8;
    uint64_t v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v11);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x228B7F578);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v11);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *a1;
        }
        return v8 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  unint64_t v20 = ((unint64_t)a1 + 79) & 0xFFFFFFFFFFFFFFF8;
  if (v7 > 0x7FFFFFFE)
  {
    unsigned int v22 = (*(uint64_t (**)(unint64_t))(v5 + 48))((v20 + v9 + 17) & ~v9);
    if (v22 >= 2) {
      return v22 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v21 = *(void *)(v20 + 8);
    if (v21 >= 0xFFFFFFFF) {
      LODWORD(v21) = -1;
    }
    if ((v21 + 1) >= 2) {
      return v21;
    }
    else {
      return 0;
    }
  }
}

void sub_228B7F58C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v12 + ((v11 + 89) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((v12 + ((v11 + 89) & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((v12 + ((v11 + 89) & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((v12 + ((v11 + 89) & ~v11) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_58;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x228B7F840);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        unint64_t v19 = (unint64_t)(a1 + 79) & 0xFFFFFFFFFFFFFFF8;
        if (v9 > 0x7FFFFFFE)
        {
          unint64_t v20 = (unsigned char *)((v19 + v11 + 17) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v24 = a2 + 1;
            size_t v25 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v25((v19 + v11 + 17) & ~v11, v24);
          }
          else
          {
            if (v12 <= 3) {
              int v21 = ~(-1 << (8 * v12));
            }
            else {
              int v21 = -1;
            }
            if (v12)
            {
              int v22 = v21 & (~v9 + a2);
              if (v12 <= 3) {
                int v23 = v12;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v12);
              switch(v23)
              {
                case 2:
                  *(_WORD *)unint64_t v20 = v22;
                  break;
                case 3:
                  *(_WORD *)unint64_t v20 = v22;
                  void v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)unint64_t v20 = v22;
                  break;
                default:
                  *unint64_t v20 = v22;
                  break;
              }
            }
          }
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(void *)unint64_t v19 = 0;
          *(void *)(v19 + 8) = 0;
          *(unsigned char *)(v19 + 16) = 0;
          *(_DWORD *)unint64_t v19 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *(void *)(v19 + 8) = a2;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for _DefaultAnnotatedMapContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for _DefaultMapContent(uint64_t *a1)
{
  sub_228B17624(*a1, a1[1]);
  uint64_t result = a1[10];
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for _DefaultMapContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  sub_228B175AC(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v11 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v12 = *(void *)(a2 + 80);
  if (v12)
  {
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v12;
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  }
  return a1;
}

uint64_t assignWithCopy for _DefaultMapContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  sub_228B175AC(*(void *)a2, v5);
  uint64_t v11 = *(void *)a1;
  unint64_t v12 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  sub_228B17624(v11, v12);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  size_t v13 = (_OWORD *)(a1 + 72);
  unsigned int v14 = (_OWORD *)(a2 + 72);
  uint64_t v15 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v15)
    {
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_retain();
      swift_release();
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    }
    else
    {
      sub_228B7FB20(a1 + 72);
      char v16 = *(unsigned char *)(a2 + 88);
      *size_t v13 = *v14;
      *(unsigned char *)(a1 + 88) = v16;
    }
  }
  else if (v15)
  {
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v17 = *v14;
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *size_t v13 = v17;
  }
  return a1;
}

uint64_t sub_228B7FB20(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293838);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _DefaultMapContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v4;
  sub_228B17624(v5, v6);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  if (!*(void *)(a1 + 80)) {
    goto LABEL_5;
  }
  uint64_t v8 = *(void *)(a2 + 80);
  if (!v8)
  {
    sub_228B7FB20(a1 + 72);
LABEL_5:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    return a1;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(void *)(a1 + 80) = v8;
  swift_release();
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for _DefaultMapContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 80);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _DefaultMapContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(void *)(result + 80) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _DefaultMapContent()
{
  return &type metadata for _DefaultMapContent;
}

uint64_t sub_228B7FD48()
{
  type metadata accessor for _MapView();

  return swift_getWitnessTable();
}

unint64_t sub_228B7FD98()
{
  unint64_t result = qword_2682940E0;
  if (!qword_2682940E0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2682940E8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682940E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for AnnotationData()
{
  return &type metadata for AnnotationData;
}

uint64_t sub_228B7FE04()
{
  return MEMORY[0x263F8D6D8];
}

uint64_t sub_228B7FE34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682940F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t AnyMapContent.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  __n128 v7 = MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))((char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v7);
  if (swift_dynamicCast())
  {
    uint64_t v9 = v11[1];
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  }
  else
  {
    type metadata accessor for AnyViewStorage();
    uint64_t result = sub_228B7FFF4(a1);
    uint64_t v9 = result;
  }
  *a3 = v9;
  return result;
}

uint64_t type metadata accessor for AnyViewStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B7FFF4(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 104) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 120), a1);
  return v2;
}

uint64_t static AnyMapContent._makeMapContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = a3;
  uint64_t v37 = a1;
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v34 = type metadata accessor for _MapContentOutputs.SetDependency(0);
  MEMORY[0x270FA5388](v34);
  id v33 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682940F8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (int *)((char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = (int *)type metadata accessor for AnyMapContent.Container();
  MEMORY[0x270FA5388](v9);
  uint64_t v32 = (uint64_t)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  size_t v13 = (_DWORD *)((char *)&v31 - v12);
  uint64_t v14 = type metadata accessor for _MapContentOutputs(0);
  MEMORY[0x270FA5388](v14 - 8);
  char v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for _MapContentInputs.AddPreference(0);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  type metadata accessor for _MapContentInputs(0);
  uint64_t v35 = a2;
  sub_228B821D4(&qword_268293AE0, (void (*)(uint64_t))type metadata accessor for _MapContentInputs.AddPreference);
  sub_228BACD68();
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  uint64_t v20 = sub_228BACDB8();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(char *, char *, uint64_t))(v21 + 40))(v16, v19, v20);
  uint64_t v22 = (uint64_t)v16;
  uint64_t v23 = v36;
  sub_228B805F8(v22, v36);
  (*(void (**)(int *, uint64_t, uint64_t))(v6 + 16))(v8, v37, v5);
  if (v7 != 4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  int v24 = *v8;
  (*(void (**)(int *, uint64_t))(v6 + 8))(v8, v5);
  *size_t v13 = v24;
  sub_228B8065C(v35, (uint64_t)v13 + v9[5], type metadata accessor for _MapContentInputs);
  sub_228B8065C(v23, (uint64_t)v13 + v9[6], type metadata accessor for _MapContentOutputs);
  id v25 = (id)AGSubgraphGetCurrent();
  if (!v25) {
    goto LABEL_5;
  }
  *(void *)((char *)v13 + v9[7]) = v25;
  uint64_t v26 = v32;
  sub_228B8065C((uint64_t)v13, v32, (uint64_t (*)(void))type metadata accessor for AnyMapContent.Container);
  sub_228AC5A84();
  sub_228B821D4(qword_268294100, (void (*)(uint64_t))type metadata accessor for AnyMapContent.Container);
  int v27 = sub_228BAC478();
  sub_228B8221C(v26, (uint64_t (*)(void))type metadata accessor for AnyMapContent.Container);
  uint64_t v28 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v33, v23, v20);
  uint64_t v29 = v28 + *(int *)(v34 + 20);
  *(_DWORD *)uint64_t v29 = v27;
  *(unsigned char *)(v29 + 4) = 0;
  sub_228B821D4(qword_268293AE8, (void (*)(uint64_t))type metadata accessor for _MapContentOutputs.SetDependency);
  sub_228BACD98();
  sub_228B8221C(v28, type metadata accessor for _MapContentOutputs.SetDependency);
  return sub_228B8221C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AnyMapContent.Container);
}

uint64_t type metadata accessor for AnyMapContent.Container()
{
  uint64_t result = qword_268294188;
  if (!qword_268294188) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_228B805F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _MapContentOutputs(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_228B8065C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t static AnyMapContent._mapContentCount(inputs:)()
{
  return 0;
}

uint64_t sub_228B806D0()
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v1 = type metadata accessor for _MapContentOutputs.ResetPreference(0);
  MEMORY[0x270FA5388](v1);
  unint64_t v3 = (char *)&v19[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)AGGraphGetValue();
  Outputuint64_t Value = (uint64_t *)AGGraphGetOutputValue();
  if (!OutputValue)
  {
    swift_retain();
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    goto LABEL_5;
  }
  uint64_t v6 = *OutputValue;
  uint64_t v7 = (void *)OutputValue[1];
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)*OutputValue + 80))();
  if (v8 != (*(uint64_t (**)(void))(*(void *)v4 + 80))())
  {
    uint64_t v9 = v0 + *(int *)(type metadata accessor for AnyMapContent.Container() + 24);
    uint64_t v10 = sub_228BACDB8();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v3, v9, v10);
    sub_228B821D4(&qword_268293D70, (void (*)(uint64_t))type metadata accessor for _MapContentOutputs.ResetPreference);
    swift_retain_n();
    id v11 = v7;
    swift_retain();
    id v12 = v11;
    sub_228BACD98();
    sub_228B8221C((uint64_t)v3, type metadata accessor for _MapContentOutputs.ResetPreference);
    AGSubgraphInvalidate();

    swift_release();
LABEL_5:
    v19[0] = v4;
    sub_228B809D0(v19, &v20);
    size_t v13 = (void *)v21;
    v19[0] = v20;
    v19[1] = v21;
    AGGraphSetOutputValue();
    swift_release();
    sub_228B82194(v6, v7);

    return swift_release();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (result)
  {
    uint64_t v15 = *(void **)(result + 8);
    swift_retain_n();
    swift_retain();
    id v16 = v7;
    id v17 = v15;
    uint64_t v20 = v4;
    uint64_t v21 = (uint64_t)v17;
    AGGraphSetOutputValue();

    swift_release();
    return swift_release_n();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_228B809D0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v27 = type metadata accessor for _MapContentOutputs.SetSource(0);
  MEMORY[0x270FA5388](v27);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for _MapContentOutputs(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  id v11 = (char *)v26 - v10;
  uint64_t v12 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  uint64_t v16 = type metadata accessor for AnyMapContent.Container();
  id v17 = (id)AGSubgraphGetGraph();
  uint64_t v18 = (void *)AGSubgraphCreate();

  AGSubgraphAddChild();
  uint64_t v19 = (uint64_t)v2 + *(int *)(v16 + 20);
  v26[0] = (uint64_t)v14;
  sub_228B8065C(v19, (uint64_t)v14, type metadata accessor for _MapContentInputs);
  sub_228B8065C((uint64_t)v2 + *(int *)(v16 + 24), (uint64_t)v11, type metadata accessor for _MapContentOutputs);
  v26[1] = AGGraphClearUpdate();
  id v20 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  (*(void (**)(void, char *))(*(void *)v15 + 88))(*v2, v14);
  uint64_t v21 = sub_228BACDB8();
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16);
  v22(v5, v11, v21);
  v22(&v5[*(int *)(v27 + 20)], v8, v21);
  sub_228B821D4(qword_268293D78, (void (*)(uint64_t))type metadata accessor for _MapContentOutputs.SetSource);
  sub_228BACD98();
  sub_228B8221C((uint64_t)v5, type metadata accessor for _MapContentOutputs.SetSource);
  uint64_t v23 = v28;
  *uint64_t v28 = v15;
  v23[1] = v18;
  swift_retain();
  id v24 = v18;
  sub_228B8221C((uint64_t)v8, type metadata accessor for _MapContentOutputs);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  sub_228B8221C((uint64_t)v11, type metadata accessor for _MapContentOutputs);
  return sub_228B8221C(v26[0], type metadata accessor for _MapContentInputs);
}

void sub_228B80D38()
{
}

void sub_228B80D84()
{
}

uint64_t sub_228B80DD0()
{
  return *(void *)(*(void *)v0 + 104);
}

uint64_t sub_228B80DE8@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v22 = a2;
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 104);
  uint64_t v7 = sub_228BAC5E8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = *(void *)(v5 + 112);
  int v24 = a1;
  uint64_t v29 = v6;
  uint64_t v12 = type metadata accessor for AnyViewStorage.AnyMapContentChild();
  uint64_t v30 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = sub_228BAC488();
  uint64_t v14 = MEMORY[0x263F8E628];
  uint64_t v15 = MEMORY[0x263F8E658];
  sub_228AC7E20((uint64_t)&v24, (uint64_t)sub_228B71690, (uint64_t)v28, v12, MEMORY[0x263F8E628], v13, MEMORY[0x263F8E658], v16);
  int v17 = v23;
  uint64_t v18 = (uint64_t)v3 + *(void *)(*v3 + 120);
  uint64_t v26 = v6;
  int v27 = v23;
  sub_228AC7E20(v18, (uint64_t)sub_228B3D544, (uint64_t)v25, v6, v14, MEMORY[0x263F8D4F8], v15, v19);
  sub_228ACB078(v17, (uint64_t)v10);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, v22, v6, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_228B81040(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  AGGraphGetValue();
  type metadata accessor for AnyViewStorage();
  swift_retain();
  uint64_t v3 = swift_dynamicCastClass();
  if (v3)
  {
    uint64_t v4 = v3 + *(void *)(*(void *)v3 + 120);
    MEMORY[0x270FA5388](v3);
    v7[2] = a1;
    v7[3] = swift_getWitnessTable();
    sub_228AC7E20(v4, (uint64_t)sub_228B744C0, (uint64_t)v7, v2, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v5);
    return swift_release();
  }
  else
  {
    return swift_release();
  }
}

uint64_t sub_228B811A8()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 104) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 120));
}

uint64_t sub_228B81200()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 104) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 120));
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x270FA0228](v0, v1, v2);
}

ValueMetadata *type metadata accessor for AnyMapContent()
{
  return &type metadata for AnyMapContent;
}

uint64_t type metadata accessor for AnyMapContentStorageBase()
{
  return self;
}

uint64_t sub_228B812E0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AnyMapContent.Info(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  id v4 = v3;
  return a1;
}

void destroy for AnyMapContent.Info(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void **)(a1 + 8);
}

void *assignWithCopy for AnyMapContent.Info(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  id v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for AnyMapContent.Info(uint64_t a1, _OWORD *a2)
{
  swift_release();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for AnyMapContent.Info()
{
  return &type metadata for AnyMapContent.Info;
}

uint64_t *sub_228B81490(uint64_t *a1, uint64_t *a2, int *a3)
{
  id v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *id v4 = *a2;
    id v4 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_228BACB48();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = (int *)type metadata accessor for _MapContentInputs(0);
    uint64_t v12 = v11[5];
    uint64_t v13 = &v8[v12];
    uint64_t v14 = &v9[v12];
    uint64_t v15 = sub_228BAC608();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = v11[6];
    int v17 = &v8[v16];
    uint64_t v18 = &v9[v16];
    uint64_t v19 = sub_228BACD78();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
    *(_DWORD *)&v8[v11[7]] = *(_DWORD *)&v9[v11[7]];
    uint64_t v20 = a3[6];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = sub_228BACDB8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
    uint64_t v24 = a3[7];
    id v25 = *(void **)((char *)a2 + v24);
    *(uint64_t *)((char *)v4 + v24) = (uint64_t)v25;
    id v26 = v25;
  }
  return v4;
}

void sub_228B81674(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_228BACB48();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = type metadata accessor for _MapContentInputs(0);
  uint64_t v7 = v4 + *(int *)(v6 + 20);
  uint64_t v8 = sub_228BAC608();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v4 + *(int *)(v6 + 24);
  uint64_t v10 = sub_228BACD78();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  uint64_t v11 = a1 + a2[6];
  uint64_t v12 = sub_228BACDB8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = *(void **)(a1 + a2[7]);
}

_DWORD *sub_228B817CC(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_228BACB48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_228BAC608();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  int v17 = &v8[v15];
  uint64_t v18 = sub_228BACD78();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[6];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_228BACDB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  uint64_t v23 = a3[7];
  uint64_t v24 = *(void **)((char *)a2 + v23);
  *(void *)((char *)a1 + v23) = v24;
  id v25 = v24;
  return a1;
}

_DWORD *sub_228B81960(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_228BACB48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_228BAC608();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  int v17 = &v8[v15];
  uint64_t v18 = sub_228BACD78();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[6];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_228BACDB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
  uint64_t v23 = a3[7];
  uint64_t v24 = *(void **)((char *)a2 + v23);
  id v25 = *(void **)((char *)a1 + v23);
  *(void *)((char *)a1 + v23) = v24;
  id v26 = v24;

  return a1;
}

_DWORD *sub_228B81AFC(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_228BACB48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_228BAC608();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  int v17 = &v8[v15];
  uint64_t v18 = sub_228BACD78();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[6];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_228BACDB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

_DWORD *sub_228B81C8C(_DWORD *a1, _DWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_228BACB48();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = &v7[v11];
  uint64_t v13 = &v8[v11];
  uint64_t v14 = sub_228BAC608();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = v10[6];
  uint64_t v16 = &v7[v15];
  int v17 = &v8[v15];
  uint64_t v18 = sub_228BACD78();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 40))(v16, v17, v18);
  *(_DWORD *)&v7[v10[7]] = *(_DWORD *)&v8[v10[7]];
  uint64_t v19 = a3[6];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = sub_228BACDB8();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 40))(v20, v21, v22);
  uint64_t v23 = a3[7];
  uint64_t v24 = *(void **)((char *)a1 + v23);
  *(void *)((char *)a1 + v23) = *(void *)((char *)a2 + v23);

  return a1;
}

uint64_t sub_228B81E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B81E38);
}

uint64_t sub_228B81E38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for _MapContentInputs(0);
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for _MapContentOutputs(0);
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[7]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_228B81F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B81F5C);
}

uint64_t sub_228B81F5C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for _MapContentInputs(0);
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t result = type metadata accessor for _MapContentOutputs(0);
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[7]) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[6];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t sub_228B82068()
{
  uint64_t result = type metadata accessor for _MapContentInputs(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_228BACDB8();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_228B8214C()
{
  return sub_228B821D4(qword_268294100, (void (*)(uint64_t))type metadata accessor for AnyMapContent.Container);
}

void sub_228B82194(uint64_t a1, void *a2)
{
  if (a1)
  {
    swift_release();
  }
}

uint64_t sub_228B821D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_228B8221C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for AnyViewStorage.AnyMapContentChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B82294()
{
  return swift_getWitnessTable();
}

uint64_t sub_228B822B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*MEMORY[0x263F8DE50] + *a1 + 8);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v15 - v8;
  uint64_t v10 = type metadata accessor for _EnvironmentKeyWritingMapContentModifier();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v13 = (uint64_t **)((char *)&v15 - v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  sub_228B85128(a1, (uint64_t)v9, v13);
  swift_retain();
  MapContent.modifier<A>(_:)((uint64_t)v13, a3, v10);
  return (*(uint64_t (**)(uint64_t **, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_228B82488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = type metadata accessor for _TraitWritingMapContentModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  __n128 v11 = MEMORY[0x270FA5388](v9);
  unint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v8, a2, AssociatedTypeWitness, v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v13, v8, AssociatedTypeWitness);
  MapContent.modifier<A>(_:)((uint64_t)v13, a3, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_228B8264C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _MapContentModifier._makeMapContent(modifier:inputs:body:)(a1, a2, a3, a4, a5);
}

uint64_t sub_228B82664@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v24 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682915D8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291638);
  uint64_t v11 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  unint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_228BACE48();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228BACE58();
  sub_228ABF54C(a1, (uint64_t)v16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_2682943A0);
  sub_228B86610();
  sub_228BACB88();
  sub_228B82664(v13, v16, v25, v26);
  sub_228ABFB2C((uint64_t)v10, (uint64_t)v7);
  uint64_t v21 = sub_228BACEB8();
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v7, 1, v21) == 1)
  {
    sub_228AC1A50((uint64_t)v10, &qword_2682915D8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    sub_228ABFB94((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return sub_228AC1A50((uint64_t)v7, &qword_2682915D8);
  }
  else
  {
    sub_228BACEA8();
    sub_228AC1A50((uint64_t)v10, &qword_2682915D8);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v27);
    sub_228ABFB94((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v7, v21);
  }
}

uint64_t static _MapContentModifier._makeMapContent(modifier:inputs:body:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  v27[1] = a1;
  v27[2] = a5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682915D8);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v27 - v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_228BAC5E8();
  uint64_t v31 = *(void *)(v13 - 8);
  uint64_t v32 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)v27 - v14;
  uint64_t v16 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_228BACE48();
  uint64_t v19 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v21 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228BACE58();
  sub_228ABF54C(a2, (uint64_t)v18);
  type metadata accessor for MapContentModifierBodyAccessor();
  swift_getWitnessTable();
  uint64_t v22 = (uint64_t)v8;
  sub_228BACB88();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(char *, char *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v15, v18, v29, v30, AssociatedTypeWitness, AssociatedConformanceWitness);
  sub_228ABFB2C((uint64_t)v11, (uint64_t)v8);
  uint64_t v24 = sub_228BACEB8();
  uint64_t v25 = *(void *)(v24 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24) == 1)
  {
    sub_228AC1A50((uint64_t)v11, &qword_2682915D8);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v32);
    sub_228ABFB94((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v28);
    return sub_228AC1A50(v22, &qword_2682915D8);
  }
  else
  {
    sub_228BACEA8();
    sub_228AC1A50((uint64_t)v11, &qword_2682915D8);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v32);
    sub_228ABFB94((uint64_t)v18);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v28);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v22, v24);
  }
}

uint64_t sub_228B82DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static _MapContentModifier._mapContentCount(inputs:body:)(a1, a2, a3);
}

uint64_t static _MapContentModifier._mapContentCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(a1, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t type metadata accessor for MapContentModifierBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B82EE4(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x270FA5388](result);
    type metadata accessor for MapContentModifierBodyAccessor();
    swift_getWitnessTable();
    return sub_228BACB78();
  }
  return result;
}

uint64_t sub_228B82F98(uint64_t result, char a2)
{
  return sub_228B82EE4(result, a2);
}

uint64_t sub_228B82FA8()
{
  return sub_228B82FA8();
}

uint64_t static ModifiedContent<>._makeMapContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a3;
  uint64_t v24 = a5;
  uint64_t v26 = a7;
  uint64_t v27 = a2;
  sub_228BAC868();
  uint64_t v11 = sub_228BAC5E8();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v25 = sub_228BAC5E8();
  uint64_t v15 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v17 = (char *)&v22 - v16;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v18 = v24;
  uint64_t v30 = v24;
  uint64_t v31 = a6;
  sub_228B538E4((void (*)(uint64_t))sub_228B832C0, a4, (uint64_t)&v22 - v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v19 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = v23;
  *((void *)v20 + 3) = a4;
  *((void *)v20 + 4) = v18;
  *((void *)v20 + 5) = a6;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v20[v19], v14, v11);
  (*(void (**)(char *, uint64_t, uint64_t (*)(uint64_t), char *, uint64_t, uint64_t))(a6 + 32))(v17, v27, sub_228B834D8, v20, a4, a6);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v25);
}

uint64_t sub_228B83224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_228BAC868();
  uint64_t v6 = a1 + *(int *)(v5 + 36);
  v10[2] = v5;
  v10[3] = a3;
  uint64_t v7 = sub_228BAC4A8();
  sub_228B3C21C(v6, (uint64_t)sub_228AD9AAC, (uint64_t)v10, a3, MEMORY[0x263F8E628], v7, MEMORY[0x263F8E658], v8);
  return v10[5];
}

uint64_t sub_228B832C0(uint64_t a1)
{
  return sub_228B83224(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_228B832CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = sub_228BAC5E8();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = &v16[-v13];
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  sub_228BAC868();
  sub_228BAC5E8();
  sub_228B538E4((void (*)(uint64_t))sub_228B8666C, a3, (uint64_t)v14);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(a5 + 32))(v14, a1, a3, a5);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_228B83438()
{
  sub_228BAC868();
  uint64_t v1 = sub_228BAC5E8();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t sub_228B834D8(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  sub_228BAC868();
  uint64_t v7 = *(void *)(sub_228BAC5E8() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return sub_228B832CC(a1, v8, v3, v4, v5, v6);
}

uint64_t sub_228B83594(uint64_t a1, uint64_t a2)
{
  v7[2] = sub_228BAC868();
  v7[3] = a2;
  uint64_t v4 = sub_228BAC4A8();
  sub_228B3C21C(a1, (uint64_t)sub_228AD903C, (uint64_t)v7, a2, MEMORY[0x263F8E628], v4, MEMORY[0x263F8E658], v5);
  return v7[5];
}

uint64_t static ModifiedContent<>._mapContentCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  _OWORD v10[5] = a5;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t (*)(), void *, uint64_t, uint64_t))(a5 + 40))(a1, sub_228B836EC, v10, a3, a5);
  swift_release();
  return v11;
}

uint64_t sub_228B836DC()
{
  return swift_deallocObject();
}

uint64_t sub_228B836EC()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 40))();
}

uint64_t sub_228B8372C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static ModifiedContent<>._makeMapContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t sub_228B8373C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ModifiedContent<>._mapContentCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t MapContent.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, a3);
  return sub_228BAC858();
}

uint64_t ModifiedContent<>.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))(*(void *)(a1 + 16));
}

_UNKNOWN **sub_228B838EC()
{
  return &protocol witness table for Never;
}

uint64_t sub_228B838F8(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228B83948()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_228B8396C(uint64_t a1, uint64_t a2)
{
  return ModifiedContent<>.data.getter(a1, *(void *)(a2 - 8));
}

uint64_t sub_228B83974(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t dispatch thunk of _MapContentModifier.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static _MapContentModifier._makeMapContent(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static _MapContentModifier._mapContentCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t sub_228B83A24()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_228B83AC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t sub_228B83BA0(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t sub_228B83C1C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_228B83C94(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_228B83D0C(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_228B83D84(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t sub_228B83DFC(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        uint64_t v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void sub_228B83FAC(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x228B841E8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t type metadata accessor for _TraitWritingMapContentModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B84228()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_228B842C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t sub_228B843CC(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *sub_228B84440(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  swift_retain();
  v5(v7, v8, v4);
  return a1;
}

void *sub_228B844D0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *sub_228B84560(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_228B845D0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t sub_228B84658(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void sub_228B847F8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x228B84A54);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for _EnvironmentKeyWritingMapContentModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B84A94(unsigned int *a1, uint64_t a2, void (*a3)(char *))
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for _MapContentInputs(0);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228ABF54C(a2, (uint64_t)v9);
  type metadata accessor for _TraitWritingMapContentModifier();
  int v10 = sub_228ACB118(a1);
  int v11 = *(_DWORD *)(a2 + *(int *)(v7 + 36));
  v17[0] = v10;
  v17[1] = v11;
  uint64_t v12 = type metadata accessor for _TraitWritingMapContentModifier.AddTrait();
  uint64_t v19 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291990);
  sub_228AC7E20((uint64_t)v17, (uint64_t)sub_228B86554, (uint64_t)v18, v12, MEMORY[0x263F8E628], v13, MEMORY[0x263F8E658], v14);
  *(_DWORD *)&v9[*(int *)(v7 + 36)] = v16[5];
  a3(v9);
  return sub_228ABFB94((uint64_t)v9);
}

uint64_t sub_228B84C4C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_228B84C78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TraitWritingMapContentModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t sub_228B84D00@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = HIDWORD(a1);
  int v4 = *MEMORY[0x263F288F8];
  uint64_t v5 = sub_228BACE18();
  uint64_t v6 = v5;
  if (v4 == v3)
  {
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, Value, v6);
    uint64_t v7 = v12;
    uint64_t v8 = 0;
  }
  int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);

  return v10(a2, v8, 1, v6);
}

uint64_t sub_228B84E28@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v16 - v5;
  uint64_t v7 = type metadata accessor for _TraitWritingMapContentModifier();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268294040);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228B84D00(a1, (uint64_t)v12);
  uint64_t v13 = sub_228BACE18();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_228BACE08();
    sub_228AC1A50((uint64_t)v12, (uint64_t *)&unk_268294040);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v17, v12, v13);
  }
  sub_228B84C78((uint64_t)v9);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, AssociatedTypeWitness);
  return sub_228BACE38();
}

uint64_t sub_228B8508C@<X0>(uint64_t a1@<X8>)
{
  return sub_228B86480(MEMORY[0x263F1A200], a1);
}

uint64_t sub_228B850A4@<X0>(uint64_t a1@<X8>)
{
  return sub_228B84E28(*v1, a1);
}

void sub_228B850B4()
{
}

uint64_t sub_228B85100(unsigned int *a1, uint64_t a2, void (*a3)(char *))
{
  return sub_228B84A94(a1, a2, a3);
}

uint64_t sub_228B8510C(uint64_t a1, uint64_t (*a2)(void))
{
  return sub_228B84C4C(a1, a2);
}

uint64_t sub_228B85128@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v4 = *a1;
  *a3 = a1;
  uint64_t v5 = *(void *)(*MEMORY[0x263F8DE50] + v4 + 8);
  uint64_t v6 = (char *)a3 + *(int *)(type metadata accessor for _EnvironmentKeyWritingMapContentModifier() + 28);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v7(v6, a2, v5);
}

uint64_t sub_228B851E0@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v30 = a4;
  uint64_t v31 = a3;
  uint64_t v32 = a1;
  uint64_t v29 = a5;
  uint64_t v34 = *MEMORY[0x263EF8340];
  type metadata accessor for _EnvironmentKeyWritingMapContentModifier();
  uint64_t v6 = sub_228BAD718();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291D38);
  uint64_t v9 = *(void *)(v28 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v28);
  uint64_t v11 = (int *)((char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for ChildEnvironment();
  uint64_t v27 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (_DWORD *)((char *)&v26 - v13);
  uint64_t v15 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228ABF54C(a2, (uint64_t)v17);
  int v18 = sub_228ACB118(v32);
  sub_228BACB28();
  if (v10 != 4) {
    __break(1u);
  }
  int v19 = *v11;
  uint64_t v20 = v28;
  (*(void (**)(uint64_t *, uint64_t))(v9 + 8))(&v26 - 2, v28);
  uint64_t v21 = type metadata accessor for _EnvironmentKeyWritingMapContentModifier();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v8, 1, 1, v21);
  uint64_t v22 = sub_228B8559C(v18, v19, (uint64_t)v8, v14);
  MEMORY[0x270FA5388](v22);
  *(&v26 - 2) = v12;
  *(&v26 - 1) = swift_getWitnessTable();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294398);
  sub_228AC7E20((uint64_t)v14, (uint64_t)sub_228B864FC, (uint64_t)(&v26 - 4), v12, MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
  (*(void (**)(_DWORD *, uint64_t))(v27 + 8))(v14, v12);
  (*(void (**)(int *, unsigned char *, uint64_t))(v9 + 16))(v11, v33, v20);
  sub_228BACB38();
  v31(v17);
  return sub_228ABFB94((uint64_t)v17);
}

uint64_t sub_228B8559C@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v5 = (char *)a4 + *(int *)(type metadata accessor for ChildEnvironment() + 32);
  type metadata accessor for _EnvironmentKeyWritingMapContentModifier();
  uint64_t v6 = sub_228BAD718();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);

  return v7(v5, a3, v6);
}

uint64_t sub_228B8563C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_228B851E0(a1, a2, a3, a4, a5);
}

uint64_t sub_228B85644()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

uint64_t type metadata accessor for ChildEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B85694(uint64_t a1)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  uint64_t v98 = sub_228BACAF8();
  uint64_t v96 = *(void *)(v98 - 8);
  MEMORY[0x270FA5388](v98);
  uint64_t v85 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = a1;
  uint64_t v83 = *(void *)(*(void *)(a1 + 16) - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v84 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = v6;
  uint64_t v7 = type metadata accessor for _EnvironmentKeyWritingMapContentModifier();
  uint64_t v8 = sub_228BAD718();
  uint64_t v92 = *(void *)(v8 - 8);
  uint64_t v93 = v8;
  MEMORY[0x270FA5388](v8);
  int v77 = (char *)&v73 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682944B0);
  uint64_t v11 = v10 - 8;
  MEMORY[0x270FA5388](v10);
  uint64_t v97 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v89 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  BOOL v80 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v82 = (char *)&v73 - v15;
  MEMORY[0x270FA5388](v16);
  uint64_t v76 = (char *)&v73 - v17;
  MEMORY[0x270FA5388](v18);
  uint64_t v88 = (char *)&v73 - v19;
  MEMORY[0x270FA5388](v20);
  uint64_t v22 = (char *)&v73 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v73 - v24;
  uint64_t v27 = *(int *)(v26 + 48);
  uint64_t Value = AGGraphGetValue();
  LOBYTE(a1) = v29;
  uint64_t v81 = *(void *)(v7 - 8);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
  v30(v25, Value, v7);
  uint64_t v31 = a1 & 1;
  v25[v27] = v31;
  uint64_t v32 = *(int *)(v11 + 56);
  uint64_t v95 = v1;
  uint64_t v33 = v98;
  uint64_t v34 = AGGraphGetValue();
  char v36 = v35;
  uint64_t v37 = (uint64_t)v97;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v96 + 16);
  uint64_t v79 = v96 + 16;
  char v78 = v38;
  v38(v97, v34, v33);
  uint64_t v39 = TupleTypeMetadata2;
  *(unsigned char *)(v37 + v32) = v36 & 1;
  uint64_t v40 = *(int *)(v39 + 48);
  uint64_t v87 = v25;
  uint64_t v41 = v25;
  uint64_t v42 = v30;
  v30(v22, (uint64_t)v41, v7);
  v22[v40] = v31;
  uint64_t v90 = v31;
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v89 + 8))(v22, v39);
    uint64_t v45 = v39;
    uint64_t v46 = v7;
  }
  else
  {
    uint64_t v43 = *(int *)(v39 + 48);
    uint64_t v44 = v88;
    uint64_t v75 = v22;
    v30(v88, (uint64_t)v22, v7);
    v44[v43] = v31;
    uint64_t v45 = v39;
    uint64_t v46 = v7;
    if (v31)
    {
      uint64_t v49 = v92;
      uint64_t v48 = v93;
      uint64_t v50 = v42;
      uint64_t v51 = v77;
      uint64_t v52 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v77, v95 + *(int *)(v94 + 32), v93);
      uint64_t v53 = *(int *)(v45 + 48);
      char v54 = v76;
      uint64_t v55 = v88;
      uint64_t v73 = v52;
      uint64_t v74 = v50;
      uint64_t v56 = ((uint64_t (*)(char *, char *, uint64_t))v50)(v76, v88, v52);
      v54[v53] = 1;
      MEMORY[0x270FA5388](v56);
      *(&v73 - 2) = v91;
      *(&v73 - 1) = (uint64_t)v54;
      sub_228AD9AD8((void (*)(char *, char *))sub_228B87614, (uint64_t)(&v73 - 4), MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], v57, (uint64_t)&v99);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v48);
      uint64_t v47 = *(void (**)(char *, uint64_t))(v89 + 8);
      v47(v55, v45);
      v47(v75, v45);
      v47(v54, v45);
      if (v99 == 2)
      {
        uint64_t v42 = v74;
        LOBYTE(v31) = v90;
        uint64_t v46 = v73;
        goto LABEL_10;
      }
      uint64_t v42 = v74;
      LOBYTE(v31) = v90;
      uint64_t v46 = v73;
      if (v99) {
        goto LABEL_10;
      }
    }
    else
    {
      uint64_t v47 = *(void (**)(char *, uint64_t))(v89 + 8);
      v47(v88, v39);
      v47(v75, v39);
    }
    if (AGGraphGetOutputValue())
    {
      sub_228AC1A50((uint64_t)v97, &qword_2682944B0);
      return ((uint64_t (*)(char *, uint64_t))v47)(v87, v45);
    }
  }
LABEL_10:
  uint64_t v59 = *(int *)(v45 + 48);
  uint64_t v60 = v82;
  uint64_t v61 = v87;
  v42(v82, (uint64_t)v87, v46);
  v60[v59] = v31;
  uint64_t v62 = v81;
  uint64_t v63 = *(void (**)(char *, uint64_t))(v81 + 8);
  swift_retain();
  v63(v60, v46);
  uint64_t v64 = *(int *)(v45 + 48);
  uint64_t v65 = (void (*)(char *, char *, uint64_t))v42;
  uint64_t v66 = v80;
  v65(v80, v61, v46);
  uint64_t v67 = v91;
  v66[v64] = v90;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v84, &v66[*(int *)(v46 + 28)], v67);
  v63(v66, v46);
  uint64_t v68 = (uint64_t)v97;
  swift_setAtWritableKeyPath();
  swift_release();
  uint64_t v69 = v85;
  uint64_t v70 = v98;
  v78(v85, v68, v98);
  AGGraphSetOutputValue();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v69, v70);
  sub_228AC1A50(v68, &qword_2682944B0);
  uint64_t v71 = (char *)(v95 + *(int *)(v94 + 32));
  (*(void (**)(char *, uint64_t))(v92 + 8))(v71, v93);
  uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v62 + 32);
  v72(v60, v61, v46);
  v72(v71, v60, v46);
  return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v71, 0, 1, v46);
}

uint64_t sub_228B85F3C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v58 = a4;
  uint64_t v5 = a1;
  uint64_t v60 = (uint64_t)a1;
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v61 = a3;
  uint64_t v57 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v50 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v55 = (uint64_t)&v47 - v8;
  uint64_t v9 = type metadata accessor for _EnvironmentKeyWritingMapContentModifier();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v62 = (char *)&v47 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v54 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v59 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v15 = MEMORY[0x270FA5388](v14);
  uint64_t v17 = (uint64_t *)((char *)&v47 - v16);
  uint64_t v64 = *v5;
  uint64_t v19 = *(int *)(v18 + 48);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16);
  uint64_t v51 = a2;
  v20((char *)&v47 - v16, a2, v9, v15);
  uint64_t v52 = v19;
  *((unsigned char *)v17 + v19) = *(unsigned char *)(a2 + v19);
  uint64_t v21 = *v17;
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  swift_retain();
  swift_retain();
  uint64_t v56 = v10 + 8;
  uint64_t v53 = v22;
  v22((char *)v17, v9);
  uint64_t v63 = v21;
  sub_228BACAF8();
  sub_228BAD908();
  LOBYTE(v5) = sub_228BAD3C8();
  swift_release();
  swift_release();
  ((void (*)(char *, uint64_t, uint64_t))v20)(v62, v60, v9);
  uint64_t v60 = TupleTypeMetadata2;
  uint64_t v23 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v24 = v59;
  uint64_t v25 = v51;
  uint64_t v26 = v9;
  uint64_t v49 = v20;
  ((void (*)(char *, uint64_t, uint64_t))v20)(v59, v51, v9);
  char v27 = *(unsigned char *)(v25 + v52);
  uint64_t v28 = v24;
  v24[v23] = v27;
  if (v5)
  {
    uint64_t v29 = v26;
    uint64_t v30 = v61;
    uint64_t v31 = &v62[*(int *)(v26 + 28)];
    uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v57 + 16);
    v32(v55, v31, v61);
    uint64_t v33 = *(int *)(v60 + 48);
    uint64_t v34 = v28;
    uint64_t v35 = v29;
    ((void (*)(void *, char *, uint64_t))v49)(v17, v34, v29);
    *((unsigned char *)v17 + v33) = v27;
    uint64_t v36 = *(int *)(v29 + 28);
    uint64_t v48 = v29;
    uint64_t v37 = v50;
    v32((uint64_t)v50, (char *)v17 + v36, v30);
    uint64_t v38 = (char *)v17;
    uint64_t v39 = v53;
    uint64_t v40 = v53(v38, v35);
    MEMORY[0x270FA5388](v40);
    *(&v47 - 4) = v30;
    *(&v47 - 3) = (uint64_t)v37;
    *((_DWORD *)&v47 - 4) = 2;
    uint64_t v41 = v55;
    sub_228AC7E20(v55, (uint64_t)sub_228B87634, (uint64_t)(&v47 - 6), v30, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], v42);
    char v43 = v64;
    uint64_t v44 = *(void (**)(char *, uint64_t))(v57 + 8);
    v44(v37, v30);
    v44((char *)v41, v30);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v59, v60);
    uint64_t result = v39(v62, v48);
    char v46 = v43 ^ 1;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v54 + 8))(v24, v60);
    uint64_t result = v53(v62, v26);
    char v46 = 1;
  }
  unsigned char *v58 = v46 & 1;
  return result;
}

uint64_t sub_228B86468@<X0>(uint64_t a1@<X8>)
{
  return sub_228B86480(MEMORY[0x263F19668], a1);
}

uint64_t sub_228B86480@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

unint64_t sub_228B864F4()
{
  return sub_228B876D8();
}

uint64_t sub_228B864FC(uint64_t a1, uint64_t a2)
{
  return sub_228B86594(a1, a2, MEMORY[0x263F19668], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_228AC7EFC);
}

uint64_t type metadata accessor for _TraitWritingMapContentModifier.AddTrait()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B86554(uint64_t a1, uint64_t a2)
{
  return sub_228B86594(a1, a2, MEMORY[0x263F1A200], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_228B05680);
}

uint64_t sub_228B86594(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 24);
  uint64_t v10 = a3(0);
  return a4(a1, v10, v9, v8, a2);
}

unint64_t sub_228B86610()
{
  unint64_t result = qword_2682943A8[0];
  if (!qword_2682943A8[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2682943A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_2682943A8);
  }
  return result;
}

uint64_t sub_228B8666C(uint64_t a1)
{
  return sub_228B83594(a1, *(void *)(v1 + 16));
}

uint64_t sub_228B86678()
{
  type metadata accessor for _EnvironmentKeyWritingMapContentModifier();
  uint64_t result = sub_228BAD718();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_228B86724(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v8 = *(_DWORD *)(v6 + 80);
  int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = v8;
  unint64_t v10 = v8 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = v8 + 8;
  size_t v12 = ((v9 + 8) & ~v9) + *(void *)(v6 + 64);
  int v13 = v8 & 0x100000;
  if (v9 <= 7 && v13 == 0 && (v10 & (v9 + 8)) + v12 <= 0x18)
  {
    uint64_t v17 = ~v9;
    *a1 = *a2;
    uint64_t v18 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v19 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v18 = *v19;
    uint64_t v20 = (void *)(v10 & ((unint64_t)v18 + 11));
    uint64_t v21 = (uint64_t *)(v10 & ((unint64_t)v19 + 11));
    if (v7 < 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v21 + v11) & v17))
      {
LABEL_14:
        memcpy(v20, v21, v12);
        return v4;
      }
    }
    else
    {
      uint64_t v22 = *v21;
      if ((unint64_t)*v21 >= 0xFFFFFFFF) {
        LODWORD(v22) = -1;
      }
      if (v22 != -1) {
        goto LABEL_14;
      }
    }
    *uint64_t v20 = *v21;
    uint64_t v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    v23(((unint64_t)v20 + v11) & v17, ((unint64_t)v21 + v11) & v17, v5);
    return v4;
  }
  uint64_t v16 = *(void *)a2;
  *uint64_t v4 = *(void *)a2;
  uint64_t v4 = (void *)(v16 + (v10 & (v9 + 16)));
  swift_retain();
  return v4;
}

uint64_t sub_228B868B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (uint64_t *)((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + (v5 | 7) + 4) & ~(v5 | 7));
  uint64_t v7 = ~v5;
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v6 + v5 + 8) & v7);
    uint64_t v4 = v11;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v8 = *v6;
  if ((unint64_t)*v6 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  uint64_t result = (v8 + 1);
  if (v8 == -1)
  {
LABEL_7:
    uint64_t v12 = v4;
    swift_release();
    unint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t))(v12 + 8);
    return v10(((unint64_t)v6 + v5 + 8) & v7, v2);
  }
  return result;
}

_DWORD *sub_228B869D0(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 4;
  unint64_t v10 = (void *)(((unint64_t)v4 + v9) & ~(v8 | 7));
  uint64_t v11 = (uint64_t *)(((unint64_t)v5 + v9) & ~(v8 | 7));
  uint64_t v12 = ~v8;
  uint64_t v13 = *(void *)(v7 + 64);
  uint64_t v14 = v8 + 8;
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v15 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    if (v15 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *unint64_t v10 = *v11;
    uint64_t v16 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    v16(((unint64_t)v10 + v14) & v12, ((unint64_t)v11 + v14) & v12, v6);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v14) & v12)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v10, v11, (v14 & ~v8) + v13);
  return a1;
}

_DWORD *sub_228B86B30(_DWORD *a1, int *a2, uint64_t a3)
{
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 4;
  uint64_t v11 = (void *)(((unint64_t)v6 + v10) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + (v4 & 0xFFFFFFFFFFFFFFFCLL)) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  uint64_t v15 = v9 + 8;
  size_t v16 = ((v9 + 8) & ~v9) + *(void *)(v8 + 64);
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v23 = ((v9 + 8) & ~v9) + *(void *)(v8 + 64);
    uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    int v20 = v19(((unint64_t)v11 + v15) & v14, v13, v7);
    int v18 = v19(((unint64_t)v12 + v15) & v14, v13, v7);
    size_t v16 = v23;
    if (!v20)
    {
LABEL_5:
      if (!v18)
      {
        *uint64_t v11 = *v12;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
        return a1;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, v7);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL) {
      LODWORD(v17) = -1;
    }
    int v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v18)
  {
    *uint64_t v11 = *v12;
    uint64_t v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    v21(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
    return a1;
  }
LABEL_9:
  memcpy(v11, v12, v16);
  return a1;
}

_DWORD *sub_228B86D44(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v5 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + 4;
  uint64_t v10 = (void *)(((unint64_t)v4 + v9) & ~(v8 | 7));
  uint64_t v11 = (uint64_t *)(((unint64_t)v5 + v9) & ~(v8 | 7));
  uint64_t v12 = ~v8;
  uint64_t v13 = *(void *)(v7 + 64);
  uint64_t v14 = v8 + 8;
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v15 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    if (v15 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v10 = *v11;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v10 + v14) & v12, ((unint64_t)v11 + v14) & v12, v6);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v11 + v14) & v12)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v10, v11, (v14 & ~v8) + v13);
  return a1;
}

_DWORD *sub_228B86E98(_DWORD *a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 7;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 4;
  uint64_t v11 = (void *)(((unint64_t)v6 + v10) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + (v4 & 0xFFFFFFFFFFFFFFFCLL)) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = ~v9;
  uint64_t v15 = v9 + 8;
  size_t v16 = ((v9 + 8) & ~v9) + *(void *)(v8 + 64);
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    int v20 = v19(((unint64_t)v11 + v15) & v14, v13, v7);
    int v18 = v19(((unint64_t)v12 + v15) & v14, v13, v7);
    uint64_t v3 = a1;
    if (!v20)
    {
LABEL_5:
      if (!v18)
      {
        *uint64_t v11 = *v12;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
        return v3;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v11 + v15) & v14, v7);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = *v12;
    if (*v12 >= 0xFFFFFFFFuLL) {
      LODWORD(v17) = -1;
    }
    int v18 = v17 + 1;
    if (*v11 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v18)
  {
    *uint64_t v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v11 + v15) & v14, ((unint64_t)v12 + v15) & v14, v7);
    return v3;
  }
LABEL_9:
  memcpy(v11, v12, v16);
  return v3;
}

uint64_t sub_228B87098(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  uint64_t v9 = v6 + 8;
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v10 = (v9 & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + (v9 & ~v8);
  char v11 = 8 * v10;
  if (v10 > 3) {
    goto LABEL_7;
  }
  unsigned int v14 = (((1 << v11) + a2 - v7) >> v11) + 1;
  if (HIWORD(v14))
  {
    int v12 = *(_DWORD *)((char *)a1 + v10);
    if (v12) {
      goto LABEL_15;
    }
LABEL_25:
    int v18 = (unint64_t *)(((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 4) & ~v8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v20 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v18 + v9) & ~v6);
    }
    else
    {
      unint64_t v19 = *v18;
      if (v19 >= 0xFFFFFFFF) {
        LODWORD(v19) = -1;
      }
      unsigned int v20 = v19 + 1;
    }
    if (v20 >= 2) {
      return v20 - 1;
    }
    else {
      return 0;
    }
  }
  if (v14 > 0xFF)
  {
    int v12 = *(unsigned __int16 *)((char *)a1 + v10);
    if (*(unsigned __int16 *)((char *)a1 + v10)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v14 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_25;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 <= 3) {
      int v16 = (v9 & ~v6) + *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + (v9 & ~v8);
    }
    else {
      int v16 = 4;
    }
    switch(v16)
    {
      case 2:
        int v17 = *a1;
        break;
      case 3:
        int v17 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v17 = *(_DWORD *)a1;
        break;
      default:
        int v17 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v17 = 0;
  }
  return (v17 | v15) + v7;
}

void sub_228B87288(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = v10 | 7;
  uint64_t v12 = v10 + 8;
  size_t v13 = ((v10 + 8) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v14 = v13 + ((v10 + 8) & ~(v10 | 7));
  if (v8 - 1 >= a3)
  {
    int v15 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v15 = 1;
  if (v14 > 3) {
    goto LABEL_13;
  }
  unsigned int v16 = (((1 << (8 * v14)) + a3 - v8) >> (8 * v14)) + 1;
  if (HIWORD(v16))
  {
    int v15 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v16 >= 0x100) {
      int v15 = 2;
    }
    else {
      int v15 = v16 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      uint64_t v20 = ~v10;
      switch(v15)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            uint64_t v21 = (unsigned char *)((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v11 + 4) & ~v11);
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v27 = a2 + 1;
                  v26((unint64_t)&v21[v12] & v20, v27);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v25 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v25 = a2;
                  }
                  *(void *)uint64_t v21 = v25;
                }
              }
            }
            else
            {
              if (v13 <= 3) {
                int v22 = ~(-1 << (8 * v13));
              }
              else {
                int v22 = -1;
              }
              if (v13)
              {
                int v23 = v22 & (a2 - v8);
                if (v13 <= 3) {
                  int v24 = v13;
                }
                else {
                  int v24 = 4;
                }
                bzero(v21, v13);
                switch(v24)
                {
                  case 2:
                    *(_WORD *)uint64_t v21 = v23;
                    break;
                  case 3:
                    *(_WORD *)uint64_t v21 = v23;
                    v21[2] = BYTE2(v23);
                    break;
                  case 4:
                    *(_DWORD *)uint64_t v21 = v23;
                    break;
                  default:
                    *uint64_t v21 = v23;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v17 = a2 - v8;
  if (v14 < 4)
  {
    int v18 = (v17 >> (8 * v14)) + 1;
    if (v14)
    {
      int v19 = v17 & ~(-1 << (8 * v14));
      bzero(a1, v14);
      if (v14 == 3)
      {
        *(_WORD *)a1 = v19;
        a1[2] = BYTE2(v19);
      }
      else if (v14 == 2)
      {
        *(_WORD *)a1 = v19;
      }
      else
      {
        *a1 = v19;
      }
    }
  }
  else
  {
    bzero(a1, v13 + ((v10 + 8) & ~(v10 | 7)));
    *(_DWORD *)a1 = v17;
    int v18 = 1;
  }
  switch(v15)
  {
    case 1:
      a1[v14] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v18;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x228B875A4);
    case 4:
      *(_DWORD *)&a1[v14] = v18;
      break;
    default:
      return;
  }
}

uint64_t sub_228B875DC()
{
  return swift_getWitnessTable();
}

uint64_t sub_228B875F8()
{
  return swift_getWitnessTable();
}

uint64_t sub_228B87614@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_228B85F3C(a1, *(void *)(v2 + 24), *(void *)(v2 + 16), a2);
}

uint64_t sub_228B87634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 24);
  int v10 = *(_DWORD *)(v8 + 32);
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = a1;
  int v15 = v10;
  return sub_228AC7E20(v9, (uint64_t)sub_228B87698, (uint64_t)&v12, v13, MEMORY[0x263F8E628], MEMORY[0x263F8D4F8], MEMORY[0x263F8E658], a8);
}

uint64_t sub_228B87698@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AGCompareValues();
  *a1 = result;
  return result;
}

unint64_t sub_228B876D8()
{
  return 0xD000000000000014;
}

uint64_t MapZoomStepper.init(scope:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a3 = KeyPath;
  *(unsigned char *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = a1;
  *(unsigned char *)(a3 + 40) = a2 & 1;
  return result;
}

uint64_t MapZoomStepper.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682944B8);
  MEMORY[0x270FA5388](v36);
  uint64_t v3 = &v31[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B48);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v34 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B50);
  MEMORY[0x270FA5388](v37);
  unsigned int v7 = (uint64_t *)&v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v35 = &v31[-v9];
  uint64_t v10 = type metadata accessor for MapControlsConfig();
  uint64_t v11 = (int *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = *(void *)v1;
  char v15 = *(unsigned char *)(v1 + 8);
  uint64_t v16 = *(void *)(v1 + 16);
  char v17 = *(unsigned char *)(v1 + 24);
  uint64_t v33 = *(void *)(v1 + 32);
  int v32 = *(unsigned __int8 *)(v1 + 40);
  sub_228AD266C(v14, v15);
  sub_228AD266C(v16, v17);
  sub_228AD266C(v16, v17);
  __int16 v18 = sub_228ACD41C(v16, v17);
  sub_228AD25F8(v16, v17);
  sub_228AD25F8(v14, v15);
  sub_228AD25F8(v16, v17);
  if (v18 == 3) {
    __int16 v19 = 0;
  }
  else {
    __int16 v19 = v18;
  }
  uint64_t v20 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v13, 1, 1, v20);
  uint64_t v21 = &v13[v11[7]];
  uint64_t v22 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  int v23 = &v13[v11[8]];
  uint64_t v24 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  uint64_t v25 = &v13[v11[9]];
  uint64_t v26 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *(_WORD *)&v13[v11[10]] = (v19 << 8) | 1;
  *(_WORD *)&v13[v11[11]] = 2;
  *(_WORD *)&v13[v11[12]] = 2;
  sub_228AD266C(v14, v15);
  sub_228AD266C(v16, v17);
  sub_228AD266C(v14, v15);
  LOBYTE(v25) = sub_228ACD218(v14, v15);
  sub_228AD25F8(v14, v15);
  sub_228AD25F8(v14, v15);
  sub_228AD25F8(v16, v17);
  if (v25)
  {
    uint64_t v27 = sub_228BAD108();
    uint64_t v28 = v34;
    sub_228AD35E8((uint64_t)v13, (uint64_t)v34);
    sub_228AD2708((uint64_t)v28, (uint64_t)v7 + *(int *)(v37 + 36), &qword_268291B48);
    *unsigned int v7 = v27;
    sub_228AC1A50((uint64_t)v28, &qword_268291B48);
    uint64_t v29 = v35;
    sub_228AD364C((uint64_t)v7, (uint64_t)v35);
    sub_228AD2708((uint64_t)v29, (uint64_t)v3, &qword_268291B50);
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2682944C0);
    sub_228ACD6EC();
    sub_228B87CE8();
    sub_228BACCC8();
    sub_228AC1A50((uint64_t)v29, &qword_268291B50);
  }
  else
  {
    *(void *)uint64_t v3 = swift_getKeyPath();
    v3[8] = 0;
    *((void *)v3 + 2) = v33;
    v3[24] = v32;
    v3[25] = 1;
    v3[26] = v19;
    *(_WORD *)(v3 + 27) = 257;
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2682944C0);
    sub_228ACD6EC();
    sub_228B87CE8();
    sub_228BACCC8();
  }
  return sub_228AD358C((uint64_t)v13);
}

unint64_t sub_228B87CE8()
{
  unint64_t result = qword_2682944C8;
  if (!qword_2682944C8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2682944C0);
    sub_228B87D64();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682944C8);
  }
  return result;
}

unint64_t sub_228B87D64()
{
  unint64_t result = qword_2682944D0;
  if (!qword_2682944D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682944D0);
  }
  return result;
}

uint64_t sub_228B87DB8()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for MapZoomStepper()
{
  return &type metadata for MapZoomStepper;
}

unint64_t sub_228B87DE8()
{
  unint64_t result = qword_2682944D8;
  if (!qword_2682944D8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2682944E0);
    sub_228ACD6EC();
    sub_228B87CE8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682944D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for _MapZoomStepper()
{
  return &type metadata for _MapZoomStepper;
}

uint64_t sub_228B87E74()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for MapZoomStepperConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228B87F5CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapZoomStepperConfig()
{
  return &type metadata for MapZoomStepperConfig;
}

void __swiftcall MapCamera.init(_:)(_MapKit_SwiftUI::MapCamera *__return_ptr retstr, MKMapCamera a2)
{
  [(objc_class *)a2.super.isa centerCoordinate];
  Swift::Double v5 = v4;
  Swift::Double v7 = v6;
  [(objc_class *)a2.super.isa centerCoordinateDistance];
  Swift::Double v9 = v8;
  [(objc_class *)a2.super.isa heading];
  Swift::Double v11 = v10;
  [(objc_class *)a2.super.isa pitch];
  Swift::Double v13 = v12;

  retstr->centerCoordinate.double latitude = v5;
  retstr->centerCoordinate.double longitude = v7;
  retstr->distance = v9;
  retstr->heading = v11;
  retstr->pitch = v13;
}

double MapCamera.centerCoordinate.getter()
{
  return *(double *)v0;
}

void MapCamera.centerCoordinate.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*MapCamera.centerCoordinate.modify())()
{
  return nullsub_1;
}

double MapCamera.distance.getter()
{
  return *(double *)(v0 + 16);
}

void MapCamera.distance.setter(double a1)
{
  *(double *)(v1 + 16) = a1;
}

uint64_t (*MapCamera.distance.modify())()
{
  return nullsub_1;
}

double MapCamera.heading.getter()
{
  return *(double *)(v0 + 24);
}

void MapCamera.heading.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*MapCamera.heading.modify())()
{
  return nullsub_1;
}

double MapCamera.pitch.getter()
{
  return *(double *)(v0 + 32);
}

void MapCamera.pitch.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*MapCamera.pitch.modify())()
{
  return nullsub_1;
}

void __swiftcall MapCamera.init(centerCoordinate:distance:heading:pitch:)(_MapKit_SwiftUI::MapCamera *__return_ptr retstr, __C::CLLocationCoordinate2D centerCoordinate, Swift::Double distance, Swift::Double heading, Swift::Double pitch)
{
  retstr->centerCoordinate.double latitude = centerCoordinate.latitude;
  retstr->centerCoordinate.double longitude = centerCoordinate.longitude;
  retstr->distance = distance;
  retstr->heading = heading;
  retstr->pitch = pitch;
}

__n128 sub_228B88108@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

__n128 sub_228B88118@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

uint64_t MapCameraBounds.init(centerCoordinateBounds:minimumDistance:maximumDistance:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>)
{
  return sub_228B8819C(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for MKCoordinateRegion, &qword_2682944E8, type metadata accessor for MKCoordinateRegion, a5, a6, a7, a8, a9);
}

{
  return sub_228B8819C(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for MKMapRect, &qword_2682944F0, type metadata accessor for MKMapRect, a5, a6, a7, a8, a9);
}

uint64_t sub_228B8819C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t (*a5)(void)@<X4>, unint64_t *a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>, double a12@<D3>)
{
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)a8 = 0u;
  *(unsigned char *)(a8 + 48) = 1;
  *(void *)(a8 + 56) = 0;
  *(unsigned char *)(a8 + 64) = 1;
  v25[3] = a5(0);
  v25[4] = sub_228B883F0(a6, a7);
  int v23 = (double *)swift_allocObject();
  v25[0] = v23;
  v23[2] = a9;
  v23[3] = a10;
  v23[4] = a11;
  v23[5] = a12;
  uint64_t result = sub_228B88388((uint64_t)v25, a8);
  *(void *)(a8 + 40) = a1;
  *(unsigned char *)(a8 + 48) = a2 & 1;
  *(void *)(a8 + 56) = a3;
  *(unsigned char *)(a8 + 64) = a4 & 1;
  return result;
}

double MapCameraBounds.init(minimumDistance:maximumDistance:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  *(unsigned char *)(a5 + 48) = 1;
  *(void *)(a5 + 56) = 0;
  *(unsigned char *)(a5 + 64) = 1;
  sub_228B88438(a5);
  double result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(void *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = a1;
  *(unsigned char *)(a5 + 48) = a2 & 1;
  *(void *)(a5 + 56) = a3;
  *(unsigned char *)(a5 + 64) = a4 & 1;
  return result;
}

BOOL _s15_MapKit_SwiftUI0A6CameraV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL), (float64x2_t)vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a2 + 24)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

uint64_t sub_228B88378()
{
  return swift_deallocObject();
}

uint64_t sub_228B88388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_228B883F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_228B88438(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_228B88498()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_228B884B4()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for MapCamera()
{
  return &type metadata for MapCamera;
}

uint64_t destroy for MapCameraBounds(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    return __swift_destroy_boxed_opaque_existential_0(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for MapCameraBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for MapCameraBounds(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      goto LABEL_8;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_0(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
LABEL_8:
  uint64_t v7 = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = *((void *)a2 + 7);
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  *(void *)(a1 + 56) = v8;
  return a1;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for MapCameraBounds(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_0(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapCameraBounds(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapCameraBounds(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapCameraBounds()
{
  return &type metadata for MapCameraBounds;
}

uint64_t sub_228B887A4()
{
  return sub_228B883F0(&qword_2682944E8, type metadata accessor for MKCoordinateRegion);
}

uint64_t sub_228B887EC()
{
  return sub_228B883F0(&qword_2682944F0, type metadata accessor for MKMapRect);
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_228B88850(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_228B88858(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for _ResolvedMapCameraRegion.Storage()
{
  return &type metadata for _ResolvedMapCameraRegion.Storage;
}

uint64_t _s15_MapKit_SwiftUI9MapCircleV12LocationAreaOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s15_MapKit_SwiftUI9MapCircleV12LocationAreaOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ResolvedMapCameraRegion()
{
  return &type metadata for _ResolvedMapCameraRegion;
}

void static MapCameraPosition.automatic.getter(void *a1@<X8>)
{
  *a1 = 0xA000000000000000;
}

BOOL MapCameraPosition.followsUserLocation.getter()
{
  return *v0 >> 61 == 4;
}

__n128 static MapCameraPosition.camera(_:)@<Q0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  __n128 v6 = (__n128)a1[1];
  long long v7 = *a1;
  uint64_t v3 = *((void *)a1 + 4);
  uint64_t v4 = swift_allocObject();
  __n128 result = v6;
  *(_OWORD *)(v4 + 16) = v7;
  *(__n128 *)(v4 + 32) = v6;
  *(void *)(v4 + 48) = v3;
  *a2 = v4 | 0x6000000000000000;
  return result;
}

uint64_t sub_228B889A0()
{
  return swift_deallocObject();
}

void MapCameraPosition.camera.getter(uint64_t a1@<X8>)
{
  unint64_t v2 = *v1 & 0xE000000000000000;
  if (v2 == 0x6000000000000000)
  {
    long long v4 = *(_OWORD *)((*v1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    long long v5 = *(_OWORD *)((*v1 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
    uint64_t v3 = *(void *)((*v1 & 0x1FFFFFFFFFFFFFFFLL) + 0x30);
  }
  else
  {
    uint64_t v3 = 0;
    long long v4 = 0uLL;
    long long v5 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = v2 != 0x6000000000000000;
}

unint64_t static MapCameraPosition.userLocation(followsHeading:fallback:)@<X0>(char a1@<W0>, unint64_t *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v5 = *a2;
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = v5;
  *a3 = v6 | 0x8000000000000000;

  return sub_228B0596C(v5);
}

uint64_t sub_228B88A60()
{
  sub_228B05A34(*(void *)(v0 + 24));

  return swift_deallocObject();
}

uint64_t sub_228B88A98(unint64_t a1, double *a2)
{
  switch(a1 >> 61)
  {
    case 1uLL:
      if ((unint64_t)a2 >> 61 != 1) {
        goto LABEL_30;
      }
      if (*(double *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) != *(double *)(((unint64_t)a2 & 0x1FFFFFFFFFFFFFFFLL)
                                                                        + 0x10)
        || *(double *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x18) != *(double *)(((unint64_t)a2 & 0x1FFFFFFFFFFFFFFFLL)
                                                                        + 0x18))
      {
        goto LABEL_30;
      }
      uint64_t result = *(double *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x28) == *(double *)(((unint64_t)a2 & 0x1FFFFFFFFFFFFFFFLL)
                                                                            + 0x28)
            && *(double *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x20) == *(double *)(((unint64_t)a2 & 0x1FFFFFFFFFFFFFFFLL)
                                                                            + 0x20);
      break;
    case 2uLL:
      if ((unint64_t)a2 >> 61 != 2) {
        goto LABEL_30;
      }
      int v3 = *(unsigned __int8 *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      int v4 = *(unsigned __int8 *)(((unint64_t)a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      if (objc_msgSend(*(id *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10), sel_isEqual_, *(void *)(((unint64_t)a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x10)))uint64_t result = v3 ^ v4 ^ 1u; {
      else
      }
        uint64_t result = 0;
      break;
    case 3uLL:
      if ((unint64_t)a2 >> 61 != 3
        || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)vextq_s8(*(int8x16_t *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10), *(int8x16_t *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10), 8uLL), (float64x2_t)vextq_s8(*(int8x16_t *)(((unint64_t)a2 & 0x1FFFFFFFFFFFFFFFLL)+ 0x10), *(int8x16_t *)(((unint64_t)a2 & 0x1FFFFFFFFFFFFFFFLL)+ 0x10), 8uLL)), (int32x4_t)vceqq_f64(*(float64x2_t *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x28), *(float64x2_t *)(((unint64_t)a2 & 0x1FFFFFFFFFFFFFFFLL)+ 0x28)))), 0xFuLL))) & 1) == 0)
      {
        goto LABEL_30;
      }
      uint64_t result = *(double *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x20) == *(double *)(((unint64_t)a2 & 0x1FFFFFFFFFFFFFFFLL)
                                                                            + 0x20);
      break;
    case 4uLL:
      if ((unint64_t)a2 >> 61 != 4
        || *(unsigned __int8 *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10) != *(unsigned __int8 *)(((unint64_t)a2 & 0x1FFFFFFFFFFFFFFFLL)
                                                                                          + 0x10))
      {
        goto LABEL_30;
      }
      unint64_t v5 = *(void *)((a1 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      unint64_t v6 = *(void *)(((unint64_t)a2 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
      sub_228B0596C(v5);
      sub_228B0596C(v6);
      char v7 = sub_228B88A98(v5, v6);
      sub_228B05A34(v6);
      sub_228B05A34(v5);
      uint64_t result = v7 & 1;
      break;
    case 5uLL:
      if (a1 == 0xA000000000000000)
      {
        if (a2 != (double *)0xA000000000000000) {
          goto LABEL_30;
        }
      }
      else if (a2 != (double *)0xA000000000000008)
      {
        goto LABEL_30;
      }
      uint64_t result = 1;
      break;
    default:
      if ((unint64_t)a2 >> 61
        || vabdd_f64(*(double *)(a1 + 16), a2[2]) >= 0.00000000999999994
        || vabdd_f64(*(double *)(a1 + 24), a2[3]) >= 0.00000000999999994
        || vabdd_f64(*(double *)(a1 + 32), a2[4]) >= 0.00000000999999994)
      {
LABEL_30:
        uint64_t result = 0;
      }
      else
      {
        uint64_t result = vabdd_f64(*(double *)(a1 + 40), a2[5]) < 0.00000000999999994;
      }
      break;
  }
  return result;
}

uint64_t static MapCameraPosition.== infix(_:_:)(unint64_t *a1, double **a2)
{
  return sub_228B88A98(*a1, *a2);
}

uint64_t sub_228B88CE8(unint64_t *a1, double **a2)
{
  return sub_228B88A98(*a1, *a2);
}

double *static MapCameraPosition.region(_:)@<X0>(double **a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t result = (double *)swift_allocObject();
  result[2] = a2;
  result[3] = a3;
  result[4] = a4;
  result[5] = a5;
  *a1 = result;
  return result;
}

uint64_t sub_228B88D54()
{
  return swift_deallocObject();
}

uint64_t static MapCameraPosition.rect(_:)@<X0>(unint64_t *a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t result = swift_allocObject();
  *(double *)(result + 16) = a2;
  *(double *)(result + 24) = a3;
  *(double *)(result + 32) = a4;
  *(double *)(result + 40) = a5;
  *a1 = result | 0x2000000000000000;
  return result;
}

id static MapCameraPosition.item(_:allowsAutomaticPitch:)@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a1;
  *(unsigned char *)(v5 + 24) = a2;
  *a3 = v5 | 0x4000000000000000;

  return a1;
}

uint64_t sub_228B88E30()
{
  return swift_deallocObject();
}

void MapCameraPosition.region.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  long long v3 = 0uLL;
  unint64_t v4 = (unint64_t)*v1 >> 61;
  long long v5 = 0uLL;
  if (!v4)
  {
    long long v3 = *(_OWORD *)(v2 + 16);
    long long v5 = *(_OWORD *)(v2 + 32);
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 32) = v4 != 0;
}

void MapCameraPosition.rect.getter(uint64_t a1@<X8>)
{
  unint64_t v2 = *v1 & 0xE000000000000000;
  long long v3 = 0uLL;
  long long v4 = 0uLL;
  if (v2 == 0x2000000000000000)
  {
    long long v3 = *(_OWORD *)((*v1 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
    long long v4 = *(_OWORD *)((*v1 & 0x1FFFFFFFFFFFFFFFLL) + 0x20);
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v2 != 0x2000000000000000;
}

void *MapCameraPosition.item.getter()
{
  if (*v0 >> 61 != 2) {
    return 0;
  }
  uint64_t v1 = *(void **)((*v0 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  id v2 = v1;
  return v1;
}

BOOL MapCameraPosition.positionedByUser.getter()
{
  return *v0 == 0xA000000000000008;
}

uint64_t MapCameraPosition.followsUserHeading.getter()
{
  if (*v0 >> 61 == 4) {
    return *(unsigned __int8 *)((*v0 & 0x1FFFFFFFFFFFFFFFLL) + 0x10);
  }
  else {
    return 0;
  }
}

unint64_t MapCameraPosition.fallbackPosition.getter@<X0>(unint64_t *a1@<X8>)
{
  if (*v1 >> 61 == 4)
  {
    unint64_t v3 = *(void *)((*v1 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
    unint64_t result = sub_228B0596C(v3);
  }
  else
  {
    unint64_t v3 = 0xF000000000000007;
  }
  *a1 = v3;
  return result;
}

uint64_t MapCameraPosition.allowsAutomaticPitch.getter()
{
  if (*v0 >> 61 == 2) {
    return *(unsigned __int8 *)((*v0 & 0x1FFFFFFFFFFFFFFFLL) + 0x18);
  }
  else {
    return 0;
  }
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for MapCameraPosition()
{
  return &type metadata for MapCameraPosition;
}

unint64_t *initializeBufferWithCopyOfBuffer for MapCameraPosition.Storage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_228B0596C(*a2);
  *a1 = v3;
  return a1;
}

unint64_t *assignWithCopy for MapCameraPosition.Storage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  sub_228B0596C(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  sub_228B05A34(v4);
  return a1;
}

unint64_t *assignWithTake for MapCameraPosition.Storage(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  sub_228B05A34(v3);
  return a1;
}

uint64_t _s15_MapKit_SwiftUI17MapCameraPositionV7StorageOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7B && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 123);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 4) | (8 * ((*(void *)a1 >> 57) & 8 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7A) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s15_MapKit_SwiftUI17MapCameraPositionV7StorageOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7A)
  {
    *(void *)unint64_t result = a2 - 123;
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7B) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_228B89130(void *a1)
{
  uint64_t v1 = *a1 >> 61;
  if (v1 <= 4) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 5;
  }
}

void *sub_228B8914C(void *result)
{
  *result &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

unint64_t *sub_228B8915C(unint64_t *result, uint64_t a2)
{
  if (a2 < 5)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 61;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 5);
    unint64_t v3 = 0xA000000000000000;
  }
  *unint64_t result = v2 | v3;
  return result;
}

ValueMetadata *type metadata accessor for MapCameraPosition.Storage()
{
  return &type metadata for MapCameraPosition.Storage;
}

uint64_t sub_228B891AC()
{
  sub_228B65AA0();

  return sub_228BACB08();
}

void static MapStyle.Elevation.automatic.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static MapStyle.StandardEmphasis.automatic.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void static MapStyle.StandardEmphasis.muted.getter(void *a1@<X8>)
{
  *a1 = 1;
}

double static MapStyle.standard.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v1;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = xmmword_228BB4DD0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  return result;
}

uint64_t static MapStyle.standard(elevation:emphasis:pointsOfInterest:showsTraffic:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  *(void *)a5 = v5;
  *(void *)(a5 + 8) = v6;
  *(void *)(a5 + 16) = v8;
  *(void *)(a5 + 24) = v7;
  *(_WORD *)(a5 + 32) = a4 & 1;
  *(void *)(a5 + 40) = 0;
  *(unsigned char *)(a5 + 48) = 1;
  *(_OWORD *)(a5 + 56) = xmmword_228BB4DD0;
  *(void *)(a5 + 72) = 0;
  *(unsigned char *)(a5 + 80) = 0;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

double static MapStyle.imagery.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_228BB2450;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = xmmword_228BB4DD0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  return result;
}

double static MapStyle.imagery(elevation:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = xmmword_228BB2450;
  *(_WORD *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v2;
  *(unsigned char *)(a2 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 56) = xmmword_228BB4DD0;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  return result;
}

double static MapStyle.hybrid.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 16) = xmmword_228BB2450;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = MEMORY[0x263F8EE78];
  *(unsigned char *)(a1 + 80) = 0;
  return result;
}

uint64_t static MapStyle.hybrid(elevation:pointsOfInterest:showsTraffic:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_OWORD *)(a4 + 16) = xmmword_228BB2450;
  *(_WORD *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = 0;
  *(unsigned char *)(a4 + 48) = 1;
  *(void *)(a4 + 56) = v4;
  *(void *)(a4 + 64) = v6;
  *(void *)(a4 + 72) = v5;
  *(unsigned char *)(a4 + 80) = a3;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t View.mapStyle(_:)()
{
  return swift_release();
}

double sub_228B8948C@<D0>(uint64_t a1@<X8>)
{
  sub_228B65AA0();
  sub_228BACB08();
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  double result = *(double *)&v8;
  *(_OWORD *)(a1 + 56) = v8;
  *(void *)(a1 + 72) = v9;
  *(unsigned char *)(a1 + 80) = v10;
  return result;
}

uint64_t sub_228B89510(uint64_t *a1)
{
  uint64_t v1 = a1[7];
  uint64_t v2 = a1[8];
  sub_228AD23BC(*a1, a1[1], a1[2]);
  sub_228AD2404(v1, v2);
  sub_228B65AA0();
  return sub_228BACB18();
}

uint64_t static MapStyle._standard(elevation:emphasis:pointsOfInterest:showsTraffic:showsHiking:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *a2;
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  if (a5) {
    __int16 v10 = 256;
  }
  else {
    __int16 v10 = 0;
  }
  *(void *)a6 = v6;
  *(void *)(a6 + 8) = v7;
  *(void *)(a6 + 16) = v9;
  *(void *)(a6 + 24) = v8;
  *(_WORD *)(a6 + 32) = v10 & 0xFFFE | a4 & 1;
  *(void *)(a6 + 40) = 0;
  *(unsigned char *)(a6 + 48) = 1;
  *(_OWORD *)(a6 + 56) = xmmword_228BB4DD0;
  *(void *)(a6 + 72) = 0;
  *(unsigned char *)(a6 + 80) = 0;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t destroy for MapStyle(uint64_t a1)
{
  if (*(void *)(a1 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = *(void *)(a1 + 64);
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for MapStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v6;
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 64);
  if (v7 == 1)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  else
  {
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = v7;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for MapStyle(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 2);
  if (*(void *)(a1 + 16) == 1)
  {
    if (v4 == 1)
    {
      long long v5 = *a2;
      long long v6 = a2[1];
      *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
      *(_OWORD *)a1 = v5;
      *(_OWORD *)(a1 + 16) = v6;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
      *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v4 == 1)
  {
    sub_228B89960(a1);
    __int16 v7 = *((_WORD *)a2 + 16);
    long long v8 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v8;
    *(_WORD *)(a1 + 32) = v7;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
  }
  uint64_t v9 = *((void *)a2 + 5);
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 40) = v9;
  __int16 v10 = (long long *)(a1 + 56);
  Swift::Double v11 = (long long *)((char *)a2 + 56);
  uint64_t v12 = *((void *)a2 + 8);
  if (*(void *)(a1 + 64) == 1)
  {
    if (v12 == 1)
    {
      long long v13 = *v11;
      *(_OWORD *)(a1 + 65) = *(long long *)((char *)a2 + 65);
      *__int16 v10 = v13;
    }
    else
    {
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v12 == 1)
  {
    sub_228B89994(a1 + 56);
    long long v14 = *(long long *)((char *)a2 + 65);
    *__int16 v10 = *v11;
    *(_OWORD *)(a1 + 65) = v14;
  }
  else
  {
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 72) = *((void *)a2 + 9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  }
  return a1;
}

uint64_t sub_228B89960(uint64_t a1)
{
  return a1;
}

uint64_t sub_228B89994(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy81_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for MapStyle(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) == 1) {
    goto LABEL_4;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (v4 == 1)
  {
    sub_228B89960(a1);
LABEL_4:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
    goto LABEL_6;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
LABEL_6:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  if (*(void *)(a1 + 64) != 1)
  {
    uint64_t v6 = *(void *)(a2 + 64);
    if (v6 != 1)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v6;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      return a1;
    }
    sub_228B89994(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for MapStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapStyle()
{
  return &type metadata for MapStyle;
}

ValueMetadata *type metadata accessor for MapStyle.Elevation()
{
  return &type metadata for MapStyle.Elevation;
}

ValueMetadata *type metadata accessor for MapStyle.StandardEmphasis()
{
  return &type metadata for MapStyle.StandardEmphasis;
}

uint64_t sub_228B89BEC()
{
  return swift_getWitnessTable();
}

unint64_t sub_228B89C5C()
{
  unint64_t result = qword_268294558[0];
  if (!qword_268294558[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294550);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268294558);
  }
  return result;
}

ValueMetadata *type metadata accessor for MapStyle.Imagery()
{
  return &type metadata for MapStyle.Imagery;
}

uint64_t destroy for MapStyle.Hybrid()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MapStyle.Hybrid(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MapStyle.Hybrid(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for MapStyle.Hybrid(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapStyle.Hybrid(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapStyle.Hybrid(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapStyle.Hybrid()
{
  return &type metadata for MapStyle.Hybrid;
}

uint64_t initializeWithCopy for MapStyle.Standard(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MapStyle.Standard(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

uint64_t assignWithTake for MapStyle.Standard(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapStyle.Standard(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapStyle.Standard(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 34) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapStyle.Standard()
{
  return &type metadata for MapStyle.Standard;
}

id sub_228B8A0B4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 32);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F10A30]), sel_initWithElevationStyle_emphasisStyle_, *(void *)v0, *(void *)(v0 + 8));
  if (v2)
  {
    id v5 = objc_allocWithZone(MEMORY[0x263F109F0]);
    type metadata accessor for MKPointOfInterestCategory(0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    int v6 = (void *)sub_228BAD498();
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v5, sel_initIncludingCategories_, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!v1)
    {
      id v7 = 0;
      goto LABEL_6;
    }
    id v8 = objc_allocWithZone(MEMORY[0x263F109F0]);
    type metadata accessor for MKPointOfInterestCategory(0);
    swift_bridgeObjectRetain_n();
    int v6 = (void *)sub_228BAD498();
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v8, sel_initExcludingCategories_, v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

LABEL_6:
  objc_msgSend(v4, sel_setPointOfInterestFilter_, v7);

  objc_msgSend(v4, sel_setShowsTraffic_, v3);
  return v4;
}

id sub_228B8A22C()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 24);
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F108F8]), sel_initWithElevationStyle_, *(void *)v0);
  if (v1)
  {
    id v5 = objc_allocWithZone(MEMORY[0x263F109F0]);
    type metadata accessor for MKPointOfInterestCategory(0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    int v6 = (void *)sub_228BAD498();
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v5, sel_initIncludingCategories_, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (!v2)
    {
      id v7 = 0;
      goto LABEL_6;
    }
    id v8 = objc_allocWithZone(MEMORY[0x263F109F0]);
    type metadata accessor for MKPointOfInterestCategory(0);
    swift_bridgeObjectRetain_n();
    int v6 = (void *)sub_228BAD498();
    swift_bridgeObjectRelease();
    id v7 = objc_msgSend(v8, sel_initExcludingCategories_, v6);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

LABEL_6:
  objc_msgSend(v4, sel_setPointOfInterestFilter_, v7);

  objc_msgSend(v4, sel_setShowsTraffic_, v3);
  return v4;
}

ValueMetadata *type metadata accessor for MapStyleKey()
{
  return &type metadata for MapStyleKey;
}

double sub_228B8A3B0()
{
  qword_2682944F8 = 0;
  unk_268294500 = 0;
  qword_268294508 = 0;
  unk_268294510 = MEMORY[0x263F8EE78];
  word_268294518 = 0;
  qword_268294520 = 0;
  byte_268294528 = 1;
  double result = 0.0;
  *(_OWORD *)&qword_268294530 = xmmword_228BB4DD0;
  qword_268294540 = 0;
  byte_268294548 = 0;
  return result;
}

uint64_t sub_228B8A3F0@<X0>(uint64_t a1@<X8>)
{
  if (qword_268291378 != -1) {
    swift_once();
  }
  uint64_t v2 = qword_2682944F8;
  uint64_t v3 = unk_268294500;
  uint64_t v4 = qword_268294508;
  uint64_t v5 = unk_268294510;
  uint64_t v6 = qword_268294520;
  char v7 = byte_268294528;
  uint64_t v8 = qword_268294530;
  uint64_t v9 = unk_268294538;
  uint64_t v10 = qword_268294540;
  *(void *)a1 = qword_2682944F8;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(_WORD *)(a1 + 32) = word_268294518;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 80) = byte_268294548;
  sub_228AD23BC(v2, v3, v4);

  return sub_228AD2404(v8, v9);
}

uint64_t sub_228B8A4C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_228BAD718();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for MapSelectionManagerBox();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_228B8A570@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v52 = *(void *)(a1[3] - 8);
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  uint64_t v48 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v49 = (char *)&v47 - v5;
  uint64_t v55 = v6;
  uint64_t v51 = sub_228BAD718();
  uint64_t v54 = *(void *)(v51 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v51);
  uint64_t v50 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v53 = (char *)&v47 - v10;
  uint64_t v11 = *(a1 - 1);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  long long v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v47 - v15;
  uint64_t v17 = a1[2];
  uint64_t v18 = sub_228BAD718();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v47 - v20;
  uint64_t v22 = *(void (**)(char *, uint64_t, void *))(v11 + 16);
  v22(v16, v57, a1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    int v23 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v23(v21, v16, v18);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v23)(v56, v21, v18);
  }
  uint64_t v25 = v53;
  uint64_t v26 = v54;
  uint64_t v47 = v17;
  uint64_t v27 = v55;
  uint64_t v28 = *(void (**)(char *, void *))(v11 + 8);
  v28(v16, a1);
  v22(v14, v57, a1);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v29 = v26;
    uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    uint64_t v31 = v25;
    uint64_t v32 = v51;
    v30(v25, v14, v51);
    uint64_t v33 = v50;
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v50, v31, v32);
    uint64_t v34 = v52;
    uint64_t v35 = v27;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v33, 1, v27) == 1)
    {
      uint64_t v36 = *(void (**)(char *, uint64_t))(v29 + 8);
      v36(v31, v32);
      v36(v33, v32);
    }
    else
    {
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      uint64_t v38 = v31;
      uint64_t v39 = v49;
      v37(v49, v33, v35);
      (*(void (**)(id *__return_ptr, uint64_t))(a1[5] + 16))(&v58, v35);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v38, v32);
      id v40 = v58;

      if (!v40)
      {
        v37(v48, v39, v35);
        uint64_t v44 = v56;
        uint64_t v45 = v47;
        int v46 = swift_dynamicCast();
        uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56);
        if (v46)
        {
          uint64_t v42 = v44;
          uint64_t v43 = 0;
        }
        else
        {
          uint64_t v42 = v44;
          uint64_t v43 = 1;
        }
        return v41(v42, v43, 1);
      }
      (*(void (**)(char *, uint64_t))(v34 + 8))(v39, v35);
    }
  }
  else
  {
    v28(v14, a1);
  }
  uint64_t v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56);
  uint64_t v42 = v56;
  uint64_t v43 = 1;
  return v41(v42, v43, 1);
}

uint64_t sub_228B8AAC4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v36 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v31 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_228BAD718();
  uint64_t v34 = *(void *)(v8 - 8);
  uint64_t v35 = v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v9);
  uint64_t v33 = (char *)&v31 - v13;
  uint64_t v14 = *(void *)(a1 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v20((char *)&v31 - v18, v3, a1);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (!result)
  {
    *a2 = *(void *)v19;
    return result;
  }
  uint64_t v32 = a2;
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  v22(v19, a1);
  v20(v17, v3, a1);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    uint64_t result = v22(v17, a1);
    uint64_t v28 = v32;
    goto LABEL_7;
  }
  uint64_t v24 = v33;
  uint64_t v23 = v34;
  uint64_t v25 = v35;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v33, v17, v35);
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v11, v24, v25);
  uint64_t v26 = v36;
  int v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v11, 1, v6);
  uint64_t v28 = v32;
  if (v27 == 1)
  {
    uint64_t v29 = *(void (**)(char *, uint64_t))(v23 + 8);
    v29(v24, v25);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v29)(v11, v25);
LABEL_7:
    *uint64_t v28 = 0;
    return result;
  }
  uint64_t v30 = v31;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v31, v11, v6);
  (*(void (**)(uint64_t))(*(void *)(a1 + 40) + 16))(v6);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v30, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v24, v25);
}

uint64_t sub_228B8AE74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_228BAD718();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for MapSelectionManagerBox();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_228B8AF24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v7 = sub_228BAD718();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a2, v6, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 56))(a2, 1, 1);
  }
}

uint64_t sub_228B8B088(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v14 - v7, v1, a1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v8, a1);
  if (EnumCaseMultiPayload == 1) {
    return 1;
  }
  v9(v6, v1, a1);
  BOOL v12 = swift_getEnumCaseMultiPayload() == 2;
  v11(v6, a1);
  return v12;
}

uint64_t sub_228B8B1F4@<X0>(uint64_t (*a1)(void)@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result & 1;
  return result;
}

uint64_t sub_228B8B228(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v14 - v7;
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v9((char *)&v14 - v7, v1, a1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v8, a1);
  if (!EnumCaseMultiPayload) {
    return 1;
  }
  v9(v6, v1, a1);
  BOOL v12 = swift_getEnumCaseMultiPayload() == 2;
  v11(v6, a1);
  return v12;
}

uint64_t sub_228B8B390(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void **)MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v22 - v10;
  BOOL v12 = *v9;
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v13((char *)&v22 - v10, v3, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  if (EnumCaseMultiPayload)
  {
    v15(v11, a2);
  }
  else
  {
    v15(v3, a2);
    v15(v11, a2);
    *(void *)uint64_t v3 = v12;
    swift_storeEnumTagMultiPayload();
    id v16 = v12;
  }
  v13(v8, v3, a2);
  if (swift_getEnumCaseMultiPayload() != 2) {
    return ((uint64_t (*)(char *, uint64_t))v15)(v8, a2);
  }
  v15(v3, a2);
  v15(v8, a2);
  uint64_t v17 = *(void *)(a2 + 24);
  uint64_t v23 = v12;
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v19 = *(void (**)(void **, uint64_t, uint64_t))(v18 + 24);
  id v20 = v12;
  v19(&v23, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v3, 0, 1, v17);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_228B8B5E0(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a1;
  uint64_t v4 = sub_228BAD718();
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v23 = (char *)&v23 - v6;
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v24 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  BOOL v12 = (char *)&v23 - v11;
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v15((char *)&v23 - v13, v2, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  if (EnumCaseMultiPayload == 1)
  {
    v17(v2, a2);
    v17((uint64_t)v14, a2);
    uint64_t v18 = v25;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v2, v25, v4);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    v17((uint64_t)v14, a2);
    uint64_t v18 = v25;
  }
  v15(v12, v2, a2);
  if (swift_getEnumCaseMultiPayload() != 2) {
    return ((uint64_t (*)(char *, uint64_t))v17)(v12, a2);
  }
  v17(v2, a2);
  v17((uint64_t)v12, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v23, v18, v4);
  uint64_t v19 = *(void *)(a2 + 24);
  id v20 = v24;
  int v21 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v20, v21 ^ 1u, 1, v19);
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v2, v20, a2);
}

void Never.feature.getter(void *a1@<X8>)
{
  *a1 = 0;
}

void Never.feature.setter(id *a1)
{
}

void (*Never.feature.modify(void *a1))(id *a1)
{
  *a1 = 0;
  return sub_228B8B950;
}

void sub_228B8B950(id *a1)
{
}

void Never.init(_:)()
{
}

void sub_228B8B9BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (void **)((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void **, uint64_t, uint64_t, __n128))(v11 + 16))(v10, v12, a2, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *v10;
    sub_228BADA58();
    sub_228BADA68();
    if (v13)
    {
      id v14 = v13;
      sub_228BAD708();
    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v4 + 32))(v6, v10, v3);
    sub_228BADA58();
    sub_228BAD3B8();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

uint64_t _s15_MapKit_SwiftUI0A9SelectionV2eeoiySbACyxG_AEtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v33 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = v6;
  uint64_t v7 = type metadata accessor for MapSelection.Storage();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (void **)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v30 - v12;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v31 = *(void *)(TupleTypeMetadata2 - 8);
  __n128 v15 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v17 = (char *)&v30 - v16;
  uint64_t v19 = (void **)((char *)&v30 + *(int *)(v18 + 48) - v16);
  uint64_t v32 = v8;
  id v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
  v20((char *)&v30 - v16, v34, v7, v15);
  ((void (*)(void **, uint64_t, uint64_t))v20)(v19, v35, v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    ((void (*)(void **, char *, uint64_t))v20)(v10, v17, v7);
    int v21 = *v10;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v22 = *v19;
      if (v21)
      {
        uint64_t v23 = v32;
        if (v22)
        {
          id v24 = v21;
          unsigned __int8 v25 = objc_msgSend(v24, sel_isEqual_, v22);

          if (v25) {
            goto LABEL_16;
          }
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v23 = v32;
        if (!v22)
        {
LABEL_16:
          char v27 = 1;
          goto LABEL_17;
        }
        int v21 = 0;
      }

LABEL_15:
      char v27 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v26 = v33;
    ((void (*)(char *, char *, uint64_t))v20)(v13, v17, v7);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      (*(void (**)(char *, void **, uint64_t))(v26 + 32))(v5, v19, a3);
      char v27 = sub_228BAD3C8();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v26 + 8);
      v28(v5, a3);
      v28(v13, a3);
      uint64_t v23 = v32;
      goto LABEL_17;
    }
    (*(void (**)(char *, uint64_t))(v26 + 8))(v13, a3);
  }
  char v27 = 0;
  uint64_t v23 = v31;
  uint64_t v7 = TupleTypeMetadata2;
LABEL_17:
  (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v7);
  return v27 & 1;
}

uint64_t sub_228B8BF4C(uint64_t a1)
{
  sub_228BADA48();
  sub_228B8B9BC((uint64_t)v3, a1);
  return sub_228BADA88();
}

void sub_228B8BF94()
{
}

uint64_t sub_228B8C000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_228B8C4A8(a1, a2, a3, (void (*)(unsigned char *, uint64_t))sub_228B8B9BC);
}

uint64_t sub_228B8C018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s15_MapKit_SwiftUI0A9SelectionV2eeoiySbACyxG_AEtFZ_0(a1, a2, *(void *)(a3 + 16));
}

uint64_t MapSelection.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for MapSelection.Storage();
  uint64_t v7 = *(void *)(v6 - 8);
  __n128 v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v14 - v9, v3, v6, v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v11 = *(void *)(v5 - 8);
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v11 = *(void *)(v5 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v10, v5);
    uint64_t v12 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(a2, v12, 1, v5);
}

uint64_t type metadata accessor for MapSelection.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MapSelection.feature.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for MapSelection.Storage();
  uint64_t v5 = *(void *)(v4 - 8);
  __n128 v6 = MEMORY[0x270FA5388](v4);
  __n128 v8 = (uint64_t *)((char *)&v10 - v7);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v10 - v7, v2, v4, v6);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 1)
  {
    *a1 = *v8;
  }
  else
  {
    *a1 = 0;
    return (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v8, v4);
  }
  return result;
}

uint64_t MapSelection.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  type metadata accessor for MapSelection.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t MapSelection.init(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  type metadata accessor for MapSelection.Storage();

  return swift_storeEnumTagMultiPayload();
}

void MapSelection.hash(into:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MapSelection.Storage();

  sub_228B8B9BC(a1, v2);
}

uint64_t MapSelection.hashValue.getter()
{
  sub_228BADA48();
  uint64_t v0 = type metadata accessor for MapSelection.Storage();
  sub_228B8B9BC((uint64_t)v2, v0);
  return sub_228BADA88();
}

uint64_t sub_228B8C47C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return MapSelection.init(_:)(a1, a2);
}

uint64_t sub_228B8C490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_228B8C4A8(a1, a2, a3, (void (*)(unsigned char *, uint64_t))MapSelection.hash(into:));
}

uint64_t sub_228B8C4A8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unsigned char *, uint64_t))
{
  sub_228BADA48();
  a4(v7, a2);
  return sub_228BADA88();
}

uint64_t sub_228B8C4FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static MapSelection.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_228B8C508(unsigned int (*a1)(char *, uint64_t, uint64_t), char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v120 = a1;
  uint64_t v121 = a2;
  uint64_t v105 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v96 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_228BAD718();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v102 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  id v104 = (char *)&v94 - v12;
  uint64_t v114 = v11;
  uint64_t v117 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v101 = (char *)&v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v108 = (char *)&v94 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v109 = (char *)&v94 - v18;
  uint64_t v103 = *(void *)(a3 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v95 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_228BAD718();
  uint64_t v110 = swift_getTupleTypeMetadata2();
  uint64_t v100 = *(void *)(v110 - 8);
  MEMORY[0x270FA5388](v110);
  long long v115 = (char *)&v94 - v22;
  uint64_t v116 = *(void *)(v21 - 8);
  MEMORY[0x270FA5388](v23);
  char v99 = (char *)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v106 = (char *)&v94 - v26;
  MEMORY[0x270FA5388](v27);
  uint64_t v107 = (char *)&v94 - v28;
  uint64_t v112 = a3;
  uint64_t v113 = a4;
  uint64_t v123 = a3;
  uint64_t v124 = a4;
  uint64_t v97 = a5;
  uint64_t v125 = a5;
  uint64_t v126 = a6;
  uint64_t v98 = a6;
  uint64_t v29 = type metadata accessor for MapSelectionManagerBox();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v94 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v35 = (char *)&v94 - v34;
  MEMORY[0x270FA5388](v36);
  uint64_t v38 = (void **)((char *)&v94 - v37);
  uint64_t v39 = swift_getTupleTypeMetadata2();
  uint64_t v119 = *(void *)(v39 - 8);
  __n128 v40 = MEMORY[0x270FA5388](v39);
  uint64_t v42 = (char *)&v94 - v41;
  uint64_t v44 = (void **)((char *)&v94 + *(int *)(v43 + 48) - v41);
  uint64_t v118 = v30;
  uint64_t v45 = *(void (**)(void **, char *, uint64_t))(v30 + 16);
  ((void (*)(char *, unsigned int (*)(char *, uint64_t, uint64_t), uint64_t, __n128))v45)((char *)&v94 - v41, v120, v29, v40);
  v45(v44, v121, v29);
  uint64_t v122 = v42;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v47 = v122;
    v45(v38, v122, v29);
    uint64_t v62 = *v38;
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v75 = *v44;
      if (v62)
      {
        uint64_t v61 = v118;
        if (v75)
        {
          id v76 = v62;
          unsigned __int8 v60 = objc_msgSend(v76, sel_isEqual_, v75);

          goto LABEL_32;
        }
      }
      else
      {
        uint64_t v61 = v118;
        if (!v75)
        {
          unsigned __int8 v60 = 1;
          goto LABEL_32;
        }
        uint64_t v62 = 0;
      }

      unsigned __int8 v60 = 0;
      goto LABEL_32;
    }

    goto LABEL_14;
  }
  if (EnumCaseMultiPayload != 1)
  {
    v45((void **)v32, v122, v29);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      (*(void (**)(char *, uint64_t))(v117 + 8))(v32, v114);
      unsigned __int8 v60 = 0;
      uint64_t v61 = v119;
      uint64_t v29 = v39;
LABEL_31:
      uint64_t v47 = v122;
      goto LABEL_32;
    }
    uint64_t v63 = v117;
    uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v117 + 32);
    uint64_t v65 = v109;
    uint64_t v66 = v32;
    uint64_t v67 = v114;
    v64(v109, v66, v114);
    uint64_t v68 = v108;
    v64(v108, (char *)v44, v67);
    uint64_t v69 = v104;
    uint64_t v70 = &v104[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
    v71(v104, v65, v67);
    uint64_t v121 = v70;
    v71(v70, v68, v67);
    uint64_t v72 = v105;
    uint64_t v120 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v105 + 48);
    if (v120(v69, 1, v113) == 1)
    {
      uint64_t v73 = *(void (**)(char *, uint64_t))(v63 + 8);
      v73(v68, v67);
      v73(v65, v67);
      uint64_t v74 = v69;
      if (v120(v121, 1, v113) == 1)
      {
        v73(v69, v67);
        unsigned __int8 v60 = 1;
LABEL_30:
        uint64_t v61 = v118;
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v82 = v101;
      v71(v101, v69, v67);
      uint64_t v83 = v121;
      uint64_t v84 = v113;
      uint64_t v74 = v69;
      if (v120(v121, 1, v113) != 1)
      {
        uint64_t v89 = v72;
        uint64_t v90 = v96;
        (*(void (**)(char *, char *, uint64_t))(v72 + 32))(v96, v83, v84);
        unsigned __int8 v60 = sub_228BAD3C8();
        uint64_t v91 = *(void (**)(char *, uint64_t))(v89 + 8);
        v91(v90, v84);
        uint64_t v92 = *(void (**)(char *, uint64_t))(v117 + 8);
        v92(v108, v67);
        v92(v109, v67);
        v91(v82, v84);
        v92(v74, v67);
        goto LABEL_30;
      }
      uint64_t v85 = *(void (**)(char *, uint64_t))(v117 + 8);
      v85(v108, v67);
      v85(v109, v67);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v82, v84);
    }
    (*(void (**)(char *, uint64_t))(v102 + 8))(v74, TupleTypeMetadata2);
    unsigned __int8 v60 = 0;
    goto LABEL_30;
  }
  uint64_t v47 = v122;
  v45((void **)v35, v122, v29);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v116 + 8))(v35, v21);
LABEL_14:
    unsigned __int8 v60 = 0;
    uint64_t v61 = v119;
    uint64_t v29 = v39;
    goto LABEL_32;
  }
  uint64_t v48 = v116;
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v116 + 32);
  uint64_t v50 = v107;
  v49(v107, v35, v21);
  uint64_t v51 = v106;
  v49(v106, (char *)v44, v21);
  uint64_t v52 = v115;
  uint64_t v53 = &v115[*(int *)(v110 + 48)];
  uint64_t v54 = *(void (**)(char *, char *, uint64_t))(v48 + 16);
  v54(v115, v50, v21);
  uint64_t v121 = v53;
  v54(v53, v51, v21);
  uint64_t v55 = v103;
  uint64_t v56 = v52;
  uint64_t v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v103 + 48);
  if (v57(v56, 1, v112) != 1)
  {
    uint64_t v77 = v55;
    char v78 = v99;
    v54(v99, v115, v21);
    uint64_t v79 = v121;
    uint64_t v80 = v112;
    if (v57(v121, 1, v112) == 1)
    {
      uint64_t v81 = *(void (**)(char *, uint64_t))(v116 + 8);
      v81(v106, v21);
      v81(v107, v21);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v78, v80);
      uint64_t v47 = v122;
      goto LABEL_21;
    }
    uint64_t v86 = v95;
    (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v95, v79, v80);
    unsigned __int8 v60 = sub_228BAD3C8();
    uint64_t v87 = *(void (**)(char *, uint64_t))(v55 + 8);
    v87(v86, v80);
    uint64_t v88 = *(void (**)(char *, uint64_t))(v116 + 8);
    v88(v106, v21);
    v88(v107, v21);
    v87(v78, v80);
    v88(v115, v21);
    goto LABEL_30;
  }
  id v58 = *(void (**)(char *, uint64_t))(v48 + 8);
  v58(v51, v21);
  v58(v50, v21);
  unsigned int v59 = v57(v121, 1, v112);
  uint64_t v47 = v122;
  if (v59 != 1)
  {
LABEL_21:
    (*(void (**)(char *, uint64_t))(v100 + 8))(v115, v110);
    unsigned __int8 v60 = 0;
    uint64_t v61 = v118;
    goto LABEL_32;
  }
  v58(v115, v21);
  unsigned __int8 v60 = 1;
  uint64_t v61 = v118;
LABEL_32:
  (*(void (**)(char *, uint64_t))(v61 + 8))(v47, v29);
  return v60 & 1;
}

uint64_t sub_228B8D1AC(unsigned int (*a1)(char *, uint64_t, uint64_t), char *a2, uint64_t *a3)
{
  return sub_228B8C508(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t (*sub_228B8D1BC())()
{
  sub_228B90ABC();
  sub_228BACB08();
  if (!v2) {
    return 0;
  }
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = v3;
  return sub_228B90B38;
}

uint64_t View.mapFeatureSelectionDisabled(_:)(uint64_t a1, uint64_t a2)
{
  swift_getKeyPath();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  sub_228BAD028();
  swift_release();
  return swift_release();
}

double sub_228B8D304@<D0>(_OWORD *a1@<X8>)
{
  sub_228B90ABC();
  sub_228BACB08();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

double sub_228B8D354@<D0>(_OWORD *a1@<X8>)
{
  sub_228B90ABC();
  sub_228BACB08();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_228B8D3A4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1)
  {
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = sub_228B90B10;
    *(void *)(v4 + 24) = v3;
  }
  sub_228AD28A4(v1);
  sub_228B90ABC();
  return sub_228BACB18();
}

uint64_t sub_228B8D46C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_228B8D4A4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_228B8D4D8(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_228B8D514()
{
  return swift_getWitnessTable();
}

void sub_228B8D530(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t dispatch thunk of MapSelectable.feature.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MapSelectable.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_228B8D564()
{
  uint64_t result = type metadata accessor for MapSelection.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_228B8D5F8(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {

  }
  else {
    (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *sub_228B8D6F8(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    uint64_t v10 = *(void **)a2;
    *a1 = *(void *)a2;
    id v11 = v10;
    char v12 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v12 = 0;
  }
  *((unsigned char *)a1 + v4) = v12;
  return a1;
}

unsigned __int8 *sub_228B8D834(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      uint64_t v18 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      a1[v7] = 1;
      id v19 = v18;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

void *sub_228B8DA4C(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(void *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_228B8DB84(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_228B8DD9C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void sub_228B8DED0(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x228B8E098);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t type metadata accessor for MapSelection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B8E0D8()
{
  return swift_getWitnessTable();
}

unint64_t sub_228B8E148()
{
  unint64_t result = qword_2682945E8[0];
  if (!qword_2682945E8[0])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2682945E0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_2682945E8);
  }
  return result;
}

uint64_t sub_228B8E1A4()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_228B8E238(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 8uLL) {
    uint64_t v5 = 8;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v9 = a2[v5];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_19;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_19:
          int v13 = (v12 | (v10 << (8 * v5))) + 2;
          unsigned int v9 = v12 + 2;
          if (v5 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1)
    {
      unsigned int v14 = *(void **)a2;
      *a1 = *(void *)a2;
      *((unsigned char *)a1 + v5) = 1;
      id v15 = v14;
    }
    else
    {
      (*(void (**)(void *))(v4 + 16))(a1);
      *((unsigned char *)v3 + v5) = 0;
    }
  }
  return v3;
}

void sub_228B8E3B4(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 8) {
    unint64_t v2 = 8;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {

  }
  else {
    (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
}

void *sub_228B8E4B4(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    unsigned int v10 = *(void **)a2;
    *a1 = *(void *)a2;
    id v11 = v10;
    char v12 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v12 = 0;
  }
  *((unsigned char *)a1 + v4) = v12;
  return a1;
}

unsigned __int8 *sub_228B8E5F0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      char v18 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      a1[v7] = 1;
      id v19 = v18;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      a1[v7] = 0;
    }
  }
  return a1;
}

void *sub_228B8E808(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    uint64_t v4 = 8;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    *a1 = *(void *)a2;
    char v10 = 1;
  }
  else
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unsigned __int8 *sub_228B8E940(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 8uLL) {
      uint64_t v7 = 8;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {

    }
    else {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 0;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t sub_228B8EB58(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 8;
  if (*(void *)(v3 + 64) > 8uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void sub_228B8EC8C(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x228B8EE54);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_228B8EE7C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 8;
  if (*(void *)(v2 + 64) > 8uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

void sub_228B8EF34(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 8uLL) {
    size_t v4 = 8;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t sub_228B8F00C()
{
  uint64_t result = sub_228BAD718();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_228BAD718();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_228B8F0E4(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  size_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v7 + 84)) {
    size_t v8 = *(void *)(v7 + 64);
  }
  else {
    size_t v8 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v9 + 84)) {
    size_t v10 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  else {
    size_t v10 = *(void *)(*(void *)(v6 - 8) + 64) + 1;
  }
  if (v8 <= v10) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = v8;
  }
  if (v11 <= 8) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = v11;
  }
  int v13 = *(_DWORD *)(v9 + 80) | *(_DWORD *)(v7 + 80);
  if ((v13 & 0x1000F8) != 0 || (unint64_t)(v12 + 1) > 0x18)
  {
    uint64_t v15 = *(void *)a2;
    *size_t v4 = *(void *)a2;
    size_t v4 = (void *)(v15 + (((v13 & 0xF8 | 7u) + 16) & ~(unint64_t)(v13 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    unsigned int v16 = a2[v12];
    unsigned int v17 = v16 - 3;
    if (v16 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v18 = v12;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *a2;
          goto LABEL_28;
        case 2:
          int v19 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v19 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v19 = *(_DWORD *)a2;
LABEL_28:
          int v20 = (v19 | (v17 << (8 * v12))) + 3;
          unsigned int v16 = v19 + 3;
          if (v12 < 4) {
            unsigned int v16 = v20;
          }
          break;
        default:
          break;
      }
    }
    if (v16 == 2)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v6))
      {
        memcpy(v4, a2, v10);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v9 + 16))(v4, a2, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v6);
      }
      char v23 = 2;
      goto LABEL_41;
    }
    if (v16 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v5))
      {
        memcpy(v4, a2, v8);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(v4, a2, v5);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v4, 0, 1, v5);
      }
      char v23 = 1;
LABEL_41:
      *((unsigned char *)v4 + v12) = v23;
      return v4;
    }
    uint64_t v21 = *(void **)a2;
    *a1 = *(void *)a2;
    *((unsigned char *)a1 + v12) = 0;
    id v22 = v21;
  }
  return v4;
}

void sub_228B8F3DC(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v3 - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (!*(_DWORD *)(v5 + 84)) {
    ++v6;
  }
  uint64_t v7 = *(void *)(v4 - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  if (!*(_DWORD *)(v7 + 84)) {
    ++v8;
  }
  if (v6 > v8) {
    unint64_t v8 = v6;
  }
  if (v8 <= 8) {
    unint64_t v8 = 8;
  }
  unsigned int v9 = a1[v8];
  unsigned int v10 = v9 - 3;
  if (v9 >= 3)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a1;
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)a1;
        goto LABEL_18;
      case 3:
        int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_18;
      case 4:
        int v12 = *(_DWORD *)a1;
LABEL_18:
        int v13 = (v12 | (v10 << (8 * v8))) + 3;
        unsigned int v9 = v12 + 3;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 2)
  {
    uint64_t v19 = *(void *)(v4 - 8);
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a1, 1, v4)) {
      return;
    }
    unsigned int v14 = *(void (**)(unsigned __int8 *, uint64_t))(v19 + 8);
    uint64_t v15 = a1;
    uint64_t v16 = v4;
    goto LABEL_30;
  }
  if (v9 == 1)
  {
    uint64_t v18 = *(void *)(*(void *)(a2 + 16) - 8);
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a1, 1, v3)) {
      return;
    }
    unsigned int v14 = *(void (**)(unsigned __int8 *, uint64_t))(v18 + 8);
    uint64_t v15 = a1;
    uint64_t v16 = v3;
LABEL_30:
    v14(v15, v16);
    return;
  }
  unsigned int v17 = *(void **)a1;
}

void *sub_228B8F628(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v7 + 84)) {
    size_t v8 = *(void *)(v7 + 64);
  }
  else {
    size_t v8 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v9 + 84)) {
    size_t v10 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  else {
    size_t v10 = *(void *)(*(void *)(v6 - 8) + 64) + 1;
  }
  if (v8 <= v10) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = v8;
  }
  if (v11 <= 8) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = v11;
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 3;
  if (v13 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_22;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_22;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_22;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_22:
        int v17 = (v16 | (v14 << (8 * v12))) + 3;
        unsigned int v13 = v16 + 3;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 2)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, v10);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v6);
    }
    char v18 = 2;
    goto LABEL_35;
  }
  if (v13 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v5);
    }
    char v18 = 1;
LABEL_35:
    *((unsigned char *)a1 + v12) = v18;
    return a1;
  }
  uint64_t v19 = *(void **)a2;
  *a1 = *(void *)a2;
  *((unsigned char *)a1 + v12) = 0;
  id v20 = v19;
  return a1;
}

unsigned __int8 *sub_228B8F8DC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    if (*(_DWORD *)(v7 + 84)) {
      size_t v8 = *(void *)(v7 + 64);
    }
    else {
      size_t v8 = *(void *)(v7 + 64) + 1;
    }
    uint64_t v9 = *(void *)(v6 - 8);
    if (*(_DWORD *)(v9 + 84)) {
      size_t v10 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    else {
      size_t v10 = *(void *)(*(void *)(v6 - 8) + 64) + 1;
    }
    if (v8 <= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v8;
    }
    if (v11 <= 8) {
      uint64_t v12 = 8;
    }
    else {
      uint64_t v12 = v11;
    }
    unsigned int v13 = a1[v12];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a1;
          if (v12 >= 4) {
            goto LABEL_31;
          }
          goto LABEL_24;
        case 2:
          int v16 = *(unsigned __int16 *)a1;
          if (v12 >= 4) {
            goto LABEL_31;
          }
          goto LABEL_24;
        case 3:
          int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v12 < 4) {
            goto LABEL_24;
          }
          goto LABEL_31;
        case 4:
          int v16 = *(_DWORD *)a1;
          if (v12 < 4)
          {
LABEL_24:
            unsigned int v13 = (v16 | (v14 << (8 * v12))) + 3;
            break;
          }
LABEL_31:
          unsigned int v13 = v16 + 3;
          if (v13 == 2) {
            goto LABEL_32;
          }
          goto LABEL_26;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
LABEL_32:
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(a1, 1, v6)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(a1, v6);
      }
    }
    else
    {
LABEL_26:
      if (v13 == 1)
      {
        if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a1, 1, v5)) {
          (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v5);
        }
      }
      else
      {
      }
    }
    unsigned int v17 = a2[v12];
    unsigned int v18 = v17 - 3;
    if (v17 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v19 = v12;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          if (v12 >= 4) {
            goto LABEL_53;
          }
          goto LABEL_44;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          if (v12 >= 4) {
            goto LABEL_53;
          }
          goto LABEL_44;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v12 < 4) {
            goto LABEL_44;
          }
          goto LABEL_53;
        case 4:
          int v20 = *(_DWORD *)a2;
          if (v12 < 4)
          {
LABEL_44:
            unsigned int v17 = (v20 | (v18 << (8 * v12))) + 3;
            break;
          }
LABEL_53:
          unsigned int v17 = v20 + 3;
          if (v17 == 2) {
            goto LABEL_54;
          }
          goto LABEL_46;
        default:
          break;
      }
    }
    if (v17 == 2)
    {
LABEL_54:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v10);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 16))(a1, a2, v6);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v6);
      }
      char v21 = 2;
LABEL_58:
      a1[v12] = v21;
      return a1;
    }
LABEL_46:
    if (v17 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v5);
      }
      char v21 = 1;
      goto LABEL_58;
    }
    id v22 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    a1[v12] = 0;
    id v23 = v22;
  }
  return a1;
}

void *sub_228B8FCF0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v7 + 84)) {
    size_t v8 = *(void *)(v7 + 64);
  }
  else {
    size_t v8 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v9 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v9 + 84)) {
    size_t v10 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  else {
    size_t v10 = *(void *)(*(void *)(v6 - 8) + 64) + 1;
  }
  if (v8 <= v10) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = v8;
  }
  if (v11 <= 8) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = v11;
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 3;
  if (v13 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_22;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_22;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_22;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_22:
        int v17 = (v16 | (v14 << (8 * v12))) + 3;
        unsigned int v13 = v16 + 3;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 2)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, v10);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v9 + 32))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v6);
    }
    char v18 = 2;
  }
  else if (v13 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v8);
      char v18 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
      char v18 = 1;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    char v18 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v12) = v18;
  return a1;
}

unsigned __int8 *sub_228B8FFA0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(a3 + 24);
    uint64_t v7 = *(void *)(v5 - 8);
    if (*(_DWORD *)(v7 + 84)) {
      size_t v8 = *(void *)(v7 + 64);
    }
    else {
      size_t v8 = *(void *)(v7 + 64) + 1;
    }
    uint64_t v9 = *(void *)(v6 - 8);
    if (*(_DWORD *)(v9 + 84)) {
      size_t v10 = *(void *)(*(void *)(v6 - 8) + 64);
    }
    else {
      size_t v10 = *(void *)(*(void *)(v6 - 8) + 64) + 1;
    }
    if (v8 <= v10) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = v8;
    }
    if (v11 <= 8) {
      uint64_t v12 = 8;
    }
    else {
      uint64_t v12 = v11;
    }
    unsigned int v13 = a1[v12];
    unsigned int v14 = v13 - 3;
    if (v13 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a1;
          goto LABEL_23;
        case 2:
          int v16 = *(unsigned __int16 *)a1;
          goto LABEL_23;
        case 3:
          int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_23;
        case 4:
          int v16 = *(_DWORD *)a1;
LABEL_23:
          int v17 = (v16 | (v14 << (8 * v12))) + 3;
          unsigned int v13 = v16 + 3;
          if (v12 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 2)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(a1, 1, v6)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(a1, v6);
      }
    }
    else if (v13 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a1, 1, v5)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v5);
      }
    }
    else
    {
    }
    unsigned int v18 = a2[v12];
    unsigned int v19 = v18 - 3;
    if (v18 >= 3)
    {
      if (v12 <= 3) {
        uint64_t v20 = v12;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          goto LABEL_42;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          goto LABEL_42;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_42;
        case 4:
          int v21 = *(_DWORD *)a2;
LABEL_42:
          int v22 = (v21 | (v19 << (8 * v12))) + 3;
          unsigned int v18 = v21 + 3;
          if (v12 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    if (v18 == 2)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v10);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v9 + 32))(a1, a2, v6);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v6);
      }
      char v23 = 2;
    }
    else if (v18 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v8);
        char v23 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
        char v23 = 1;
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      char v23 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v12] = v23;
  }
  return a1;
}

uint64_t sub_228B90378(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  if (!*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 84)) {
    ++v3;
  }
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64) + 1;
  }
  if (v3 > v5) {
    unint64_t v5 = v3;
  }
  uint64_t v6 = 8;
  if (v5 > 8) {
    uint64_t v6 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_29;
  }
  uint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 253) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_29;
      }
      goto LABEL_21;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_29;
      }
      goto LABEL_21;
    }
    if (v11 < 2)
    {
LABEL_29:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 3) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_29;
  }
LABEL_21:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 254;
}

void sub_228B90538(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  if (!*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 84)) {
    ++v5;
  }
  if (*(_DWORD *)(v6 + 84)) {
    unint64_t v7 = *(void *)(v6 + 64);
  }
  else {
    unint64_t v7 = *(void *)(v6 + 64) + 1;
  }
  if (v5 > v7) {
    unint64_t v7 = v5;
  }
  if (v7 <= 8) {
    unint64_t v7 = 8;
  }
  size_t v8 = v7 + 1;
  if (a3 < 0xFE)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 253) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v10 = a2 - 254;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v7 != -1)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_41:
        __break(1u);
        JUMPOUT(0x228B9078CLL);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_29;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      default:
LABEL_29:
        if (a2) {
LABEL_30:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_228B907B4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  if (!*(_DWORD *)(v2 + 84)) {
    ++v3;
  }
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  if (!*(_DWORD *)(v4 + 84)) {
    ++v5;
  }
  if (v3 > v5) {
    unint64_t v5 = v3;
  }
  uint64_t v6 = 8;
  if (v5 > 8) {
    uint64_t v6 = v5;
  }
  uint64_t v7 = a1[v6];
  int v8 = v7 - 3;
  if (v7 >= 3)
  {
    if (v6 <= 3) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_18;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_18;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_18;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_18:
        unsigned int v11 = (v10 | (v8 << (8 * v6))) + 3;
        LODWORD(v7) = v10 + 3;
        if (v6 >= 4) {
          uint64_t v7 = v7;
        }
        else {
          uint64_t v7 = v11;
        }
        break;
      default:
        return v7;
    }
  }
  return v7;
}

void sub_228B908F8(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  size_t v5 = *(void *)(v4 + 64);
  if (!*(_DWORD *)(v4 + 84)) {
    ++v5;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  size_t v7 = *(void *)(v6 + 64);
  if (!*(_DWORD *)(v6 + 84)) {
    ++v7;
  }
  if (v5 > v7) {
    size_t v7 = v5;
  }
  if (v7 <= 8) {
    size_t v7 = 8;
  }
  if (a2 > 2)
  {
    if (v7 <= 3) {
      char v8 = ((a2 - 3) >> (8 * v7)) + 3;
    }
    else {
      char v8 = 3;
    }
    if (v7 <= 3) {
      int v9 = (a2 - 3) & ~(-1 << (8 * v7));
    }
    else {
      int v9 = a2 - 3;
    }
    a1[v7] = v8;
    if (v7 >= 4) {
      int v10 = 4;
    }
    else {
      int v10 = v7;
    }
    bzero(a1, v7);
    switch(v10)
    {
      case 2:
        *(_WORD *)a1 = v9;
        break;
      case 3:
        *(_WORD *)a1 = v9;
        a1[2] = BYTE2(v9);
        break;
      case 4:
        *(_DWORD *)a1 = v9;
        break;
      default:
        *a1 = v9;
        break;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

uint64_t type metadata accessor for MapSelectionManagerBox()
{
  return swift_getGenericMetadata();
}

uint64_t sub_228B90A98(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 32);
}

uint64_t sub_228B90AA0()
{
  return swift_getWitnessTable();
}

unint64_t sub_228B90ABC()
{
  unint64_t result = qword_2682946F0;
  if (!qword_2682946F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_2682946F0);
  }
  return result;
}

uint64_t sub_228B90B10(uint64_t a1)
{
  return sub_228B2A674(a1, *(void (**)(uint64_t *__return_ptr))(v1 + 16));
}

ValueMetadata *type metadata accessor for DefaultMapFeatureSelectionDisabledKey()
{
  return &type metadata for DefaultMapFeatureSelectionDisabledKey;
}

BOOL sub_228B90B3C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 32))
  {
    if (*(unsigned char *)(a2 + 32)) {
      return MKMapRectEqualToRect(*(double *)a1, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 24), *(double *)a2, *(double *)(a2 + 8), *(double *)(a2 + 16), *(double *)(a2 + 24));
    }
    return 0;
  }
  if (*(unsigned char *)(a2 + 32)) {
    return 0;
  }
  if (*(double *)a1 != *(double *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
    return 0;
  }
  return *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

void MapCircle.init(center:radius:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
}

void MapCircle.init(mapRect:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 32) = 1;
}

void MapCircle.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  objc_msgSend(a1, sel_coordinate);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  objc_msgSend(a1, sel_radius);
  uint64_t v9 = v8;

  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
}

uint64_t static MapCircle._mapContentCount(inputs:)()
{
  return 1;
}

uint64_t static MapCircle._makeMapContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291D38);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (int *)((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_2682946F8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  unsigned int v12 = (int *)((char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20[1] = a3;
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  (*(void (**)(int *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  if (v11 != 4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  int v13 = *v12;
  (*(void (**)(int *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v14 = v21;
  sub_228BACB28();
  if (v7 != 4) {
    goto LABEL_5;
  }
  int v15 = *v8;
  (*(void (**)(int *, uint64_t))(v6 + 8))(v8, v5);
  int v16 = *(_DWORD *)(v14 + *(int *)(type metadata accessor for _MapContentInputs(0) + 28));
  int v22 = v13;
  int v23 = v15;
  int v24 = v16;
  long long v25 = 0u;
  long long v26 = 0u;
  memset(v27, 0, 28);
  v27[28] = -1;
  uint64_t v28 = 0;
  char v29 = -1;
  uint64_t v30 = 0;
  char v31 = 1;
  sub_228AC5A84();
  sub_228B91C44();
  uint64_t v17 = sub_228BAC478();
  MEMORY[0x270FA5388](v17);
  LODWORD(v20[-2]) = v18;
  sub_228AC1AAC();
  return sub_228BACD88();
}

uint64_t sub_228B90F78()
{
  uint64_t v1 = v0;
  uint64_t v148 = *MEMORY[0x263EF8340];
  uint64_t v114 = type metadata accessor for MapContentList.Item.Content(0);
  MEMORY[0x270FA5388](v114);
  uint64_t v125 = &v104[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for MapContentList.Item(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v115 = v3;
  uint64_t v116 = v4;
  MEMORY[0x270FA5388](v3);
  uint64_t v117 = (uint64_t *)&v104[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_228BACAF8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v123 = &v104[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v9);
  uint64_t v130 = &v104[-v10];
  MEMORY[0x270FA5388](v11);
  uint64_t v132 = &v104[-v12];
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291F60);
  MEMORY[0x270FA5388](v13);
  int v15 = &v104[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v16);
  int v18 = &v104[-v17];
  uint64_t v19 = sub_228BACE18();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v124 = &v104[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v22);
  uint64_t v134 = &v104[-v23];
  uint64_t Value = AGGraphGetValue();
  uint64_t v108 = v25;
  long long v26 = *(_OWORD *)Value;
  long long v110 = *(_OWORD *)(Value + 16);
  long long v111 = v26;
  int v109 = *(unsigned __int8 *)(Value + 32);
  uint64_t v27 = *(int *)(v13 + 48);
  LODWORD(Value) = *(_DWORD *)(v1 + 8);
  int v28 = *MEMORY[0x263F288F8];
  uint64_t v120 = v20;
  if (Value == v28)
  {
    sub_228BACE08();
    int v29 = 0;
    uint64_t v30 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v20 + 32);
    uint64_t v31 = (v20 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  }
  else
  {
    uint64_t v32 = AGGraphGetValue();
    uint64_t v133 = v7;
    char v34 = v33;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v20 + 16))(v15, v32, v19);
    v15[v27] = v34 & 1;
    uint64_t v35 = *(int *)(v13 + 48);
    uint64_t v30 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v20 + 32);
    uint64_t v31 = (v20 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v30((uint64_t)v18, v15, v19);
    int v29 = v15[v35];
    uint64_t v7 = v133;
  }
  int v107 = v29;
  v18[v27] = v29;
  uint64_t v128 = v19;
  uint64_t v112 = v31;
  uint64_t v113 = v30;
  v30((uint64_t)v134, v18, v19);
  uint64_t v36 = AGGraphGetValue();
  uint64_t v37 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v38 = (uint64_t)v132;
  v37(v132, v36, v6);
  uint64_t v39 = sub_228BAC9D8();
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  uint64_t v41 = v7 + 8;
  __n128 v40 = v42;
  v42(v38, v6);
  uint64_t v43 = *(void *)(v1 + 16);
  int v119 = (v39 | v43) == 0;
  uint64_t v131 = v39;
  if (v39 && v43)
  {
    swift_retain();
    swift_retain();
    int v119 = sub_228BAD0F8();
    swift_release();
    swift_release();
  }
  uint64_t v44 = AGGraphGetValue();
  v37((unsigned char *)v38, v44, v6);
  sub_228B50520();
  sub_228BACB08();
  v135[0] = v138;
  v135[1] = v139;
  uint64_t v45 = *((void *)&v139 + 1);
  uint64_t v136 = v140;
  uint64_t v46 = v138;
  uint64_t v121 = DWORD2(v138);
  uint64_t v122 = HIDWORD(v138);
  uint64_t v47 = v139;
  uint64_t v48 = v140;
  v40(v38, v6);
  uint64_t v49 = *(void *)(v1 + 48);
  uint64_t v133 = v41;
  uint64_t v127 = v45;
  if (v49)
  {
    uint64_t v50 = *(void *)(v1 + 56);
    uint64_t v51 = *(void *)(v1 + 40);
    uint64_t v52 = *(void *)(v1 + 32);
    v137[0] = *(void *)(v1 + 24);
    v137[1] = v52;
    v137[2] = v51;
    v137[3] = v49;
    v137[4] = v50;
    sub_228B17EA4((uint64_t)v135);
    swift_bridgeObjectRetain();
    int v53 = MEMORY[0x22A6A5D00](v135, v137);
    swift_bridgeObjectRelease();
    sub_228B17ED0((uint64_t)v135);
    int v106 = v53 ^ 1;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v106 = 1;
  }
  uint64_t v54 = AGGraphGetValue();
  v37((unsigned char *)v38, v54, v6);
  sub_228B50574();
  sub_228BACB08();
  uint64_t v129 = v40;
  v40(v38, v6);
  uint64_t v55 = AGGraphGetValue();
  uint64_t v56 = (uint64_t)v130;
  v37(v130, v55, v6);
  uint64_t v57 = sub_228B6AC9C(&v138, v56);
  int v59 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v126 = v57;
  LODWORD(v130) = v58 & 1;
  if (v59 == 255)
  {
    int v105 = 0;
    goto LABEL_20;
  }
  uint64_t v60 = *(void *)(v1 + 64);
  if ((v58 & 1) == 0)
  {
    if ((v59 & 1) == 0)
    {
      uint64_t v61 = v57;
      sub_228ACF3A4(v57, 0);
      sub_228B507A8(v60, v59);
      int v62 = sub_228BAD0F8();
      goto LABEL_17;
    }
LABEL_18:
    int v105 = 0;
    goto LABEL_19;
  }
  if ((v59 & 1) == 0) {
    goto LABEL_18;
  }
  uint64_t v61 = v57;
  sub_228ACF3A4(v57, 1);
  sub_228B507A8(v60, v59);
  int v62 = MEMORY[0x22A6A69F0](v61, v60);
LABEL_17:
  int v105 = v62;
  sub_228B50790(v60, v59);
  sub_228AD26A8(v61, (char)v130);
LABEL_19:
  uint64_t v38 = (uint64_t)v132;
LABEL_20:
  uint64_t v63 = AGGraphGetValue();
  uint64_t v64 = v123;
  v37(v123, v63, v6);
  sub_228B505C8();
  sub_228BACB08();
  uint64_t v65 = v129;
  v129((uint64_t)v64, v6);
  if (v147)
  {
    sub_228B09A30(&v146, (uint64_t)&v138);
  }
  else
  {
    uint64_t v66 = AGGraphGetValue();
    v37((unsigned char *)v38, v66, v6);
    uint64_t v67 = sub_228BACAB8();
    v65(v38, v6);
    *((void *)&v139 + 1) = MEMORY[0x263F188A8];
    *(void *)&long long v140 = MEMORY[0x263F18898];
    *(void *)&long long v138 = v67;
    sub_228B5061C((uint64_t)&v146);
  }
  uint64_t v68 = AGGraphGetValue();
  v37((unsigned char *)v38, v68, v6);
  uint64_t v123 = (unsigned char *)sub_228B6AC9C(&v138, v38);
  int v70 = v69 & 1;
  int v71 = *(unsigned __int8 *)(v1 + 88);
  if (v71 == 255) {
    goto LABEL_30;
  }
  uint64_t v72 = *(void *)(v1 + 80);
  if ((v69 & 1) == 0)
  {
    if ((v71 & 1) == 0)
    {
      LODWORD(v118) = 0;
      uint64_t v73 = v123;
      sub_228ACF3A4((uint64_t)v123, 0);
      sub_228B507A8(v72, v71);
      int v74 = sub_228BAD0F8();
      goto LABEL_29;
    }
LABEL_30:
    int v75 = 0;
    goto LABEL_31;
  }
  if ((v71 & 1) == 0) {
    goto LABEL_30;
  }
  LODWORD(v118) = v69 & 1;
  uint64_t v73 = v123;
  sub_228ACF3A4((uint64_t)v123, 1);
  sub_228B507A8(v72, v71);
  int v74 = MEMORY[0x22A6A69F0](v73, v72);
LABEL_29:
  int v75 = v74;
  sub_228B50790(v72, v71);
  uint64_t v76 = (uint64_t)v73;
  int v70 = v118;
  sub_228AD26A8(v76, v118);
LABEL_31:
  unsigned int v78 = v121;
  unsigned int v77 = v122;
  uint64_t v118 = v121 | (v122 << 32);
  uint64_t v79 = AGGraphGetValue();
  uint64_t v80 = v132;
  v37(v132, v79, v6);
  sub_228B5067C();
  sub_228BACB08();
  uint64_t v81 = v138;
  v129((uint64_t)v80, v6);
  if ((*(unsigned char *)(v1 + 104) & 1) == 0
    && (v105 & ~(v108 | v119 ^ 1 | v106 | (v107 != 0)) & v75 & 1) != 0
    && v81 == *(void *)(v1 + 96)
    && AGGraphGetOutputValue())
  {
    *(void *)(v1 + 96) = v81;
    *(unsigned char *)(v1 + 104) = 0;
    sub_228B50790(*(void *)(v1 + 80), *(unsigned char *)(v1 + 88));
    *(void *)(v1 + 80) = v123;
    *(unsigned char *)(v1 + 88) = v70;
    sub_228B50790(*(void *)(v1 + 64), *(unsigned char *)(v1 + 72));
    *(void *)(v1 + 64) = v126;
    *(unsigned char *)(v1 + 72) = (_BYTE)v130;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 24) = v46;
    *(void *)(v1 + 32) = v118;
    *(void *)(v1 + 40) = v47;
    *(void *)(v1 + 48) = v127;
    *(void *)(v1 + 56) = v48;
    swift_release();
    uint64_t v82 = v128;
    uint64_t v83 = v120;
  }
  else
  {
    BOOL v84 = v70 != 0;
    int v85 = *(_DWORD *)(v1 + 12) + 1;
    *(_DWORD *)(v1 + 12) = v85;
    char v86 = (char)v130;
    long long v138 = v111;
    long long v139 = v110;
    LOBYTE(v140) = v109;
    *((void *)&v140 + 1) = v131;
    *(void *)&long long v141 = v46;
    *((void *)&v141 + 1) = __PAIR64__(v77, v78);
    *(void *)&long long v142 = v47;
    *((void *)&v142 + 1) = v127;
    *(void *)&long long v143 = v48;
    char v87 = v70;
    uint64_t v88 = v126;
    *((void *)&v143 + 1) = v126;
    LOBYTE(v144) = v130 != 0;
    uint64_t v89 = v123;
    *((void *)&v144 + 1) = v123;
    LOBYTE(v145) = v84;
    uint64_t v133 = v81;
    *((void *)&v145 + 1) = v81;
    uint64_t v83 = v120;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v120 + 16))(v124, v134, v128);
    long long v90 = v143;
    uint64_t v91 = v125;
    *((_OWORD *)v125 + 4) = v142;
    v91[5] = v90;
    long long v92 = v145;
    v91[6] = v144;
    v91[7] = v92;
    long long v93 = v139;
    *uint64_t v91 = v138;
    v91[1] = v93;
    long long v94 = v141;
    v91[2] = v140;
    v91[3] = v94;
    swift_storeEnumTagMultiPayload();
    swift_retain();
    sub_228B17EA4((uint64_t)v135);
    sub_228ACF3A4(v88, v86);
    char v95 = v87;
    sub_228ACF3A4((uint64_t)v89, v87);
    sub_228B91CF4((uint64_t)&v138);
    sub_228ACAF54();
    sub_228BACE28();
    uint64_t v96 = v146;
    if (!(void)v146)
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_268291998);
      uint64_t v96 = swift_allocObject();
      *(_OWORD *)(v96 + 16) = xmmword_228BAF4E0;
      *(void *)(v96 + 32) = 0;
      *(unsigned char *)(v96 + 72) = 0;
    }
    uint64_t v97 = (uint64_t)v117;
    *uint64_t v117 = v96;
    uint64_t v98 = v115;
    uint64_t v82 = v128;
    v113(v97 + *(int *)(v115 + 28), v124, v128);
    *(_DWORD *)(v97 + 8) = v85;
    sub_228AD8F10((uint64_t)v125, v97 + *(int *)(v98 + 24));
    __swift_instantiateConcreteTypeFromMangledName(&qword_268291F68);
    unint64_t v99 = (*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
    uint64_t v100 = swift_allocObject();
    *(_OWORD *)(v100 + 16) = xmmword_228BAF4E0;
    sub_228B506D0(v97, v100 + v99);
    *(void *)&long long v146 = sub_228B78CF8(v100);
    *((void *)&v146 + 1) = v101;
    AGGraphSetOutputValue();
    sub_228B19BD8((uint64_t)&v138);
    swift_bridgeObjectRelease();
    sub_228B50734(v97);
    *(void *)(v1 + 96) = v133;
    *(unsigned char *)(v1 + 104) = 0;
    sub_228B50790(*(void *)(v1 + 80), *(unsigned char *)(v1 + 88));
    *(void *)(v1 + 80) = v89;
    *(unsigned char *)(v1 + 88) = v95;
    sub_228B50790(*(void *)(v1 + 64), *(unsigned char *)(v1 + 72));
    *(void *)(v1 + 64) = v126;
    *(unsigned char *)(v1 + 72) = (_BYTE)v130;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 24) = v46;
    *(void *)(v1 + 32) = v118;
    *(void *)(v1 + 40) = v47;
    *(void *)(v1 + 48) = v127;
    *(void *)(v1 + 56) = v48;
    swift_release();
  }
  uint64_t v102 = v134;
  *(void *)(v1 + 16) = v131;
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v83 + 8))(v102, v82);
}

unint64_t sub_228B91C44()
{
  unint64_t result = qword_268294700;
  if (!qword_268294700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294700);
  }
  return result;
}

ValueMetadata *type metadata accessor for MapCircle()
{
  return &type metadata for MapCircle;
}

ValueMetadata *type metadata accessor for MapCircle.LocationArea()
{
  return &type metadata for MapCircle.LocationArea;
}

ValueMetadata *type metadata accessor for MapCircle.MakeList()
{
  return &type metadata for MapCircle.MakeList;
}

BOOL MKMapRectEqualToRect(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (a1 != a5 || a2 != a6) {
    return 0;
  }
  if (a4 == a8) {
    return a3 == a7;
  }
  return 0;
}

uint64_t sub_228B91CF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  char v3 = *(unsigned char *)(a1 + 96);
  uint64_t v4 = *(void *)(a1 + 104);
  char v5 = *(unsigned char *)(a1 + 112);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_228ACF3A4(v2, v3);
  sub_228ACF3A4(v4, v5);
  return a1;
}

uint64_t destroy for ResolvedCircle(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  sub_228AD26A8(*(void *)(a1 + 88), *(unsigned char *)(a1 + 96));
  uint64_t v2 = *(void *)(a1 + 104);
  char v3 = *(unsigned char *)(a1 + 112);

  return sub_228AD26A8(v2, v3);
}

uint64_t initializeWithCopy for ResolvedCircle(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  char v8 = *(unsigned char *)(a2 + 96);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_228ACF3A4(v7, v8);
  *(void *)(a1 + 88) = v7;
  *(unsigned char *)(a1 + 96) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  LOBYTE(v7) = *(unsigned char *)(a2 + 112);
  sub_228ACF3A4(v9, v7);
  *(void *)(a1 + 104) = v9;
  *(unsigned char *)(a1 + 112) = v7;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t assignWithCopy for ResolvedCircle(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *((void *)a2 + 6);
  *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
  *(_DWORD *)(a1 + 60) = *((_DWORD *)a2 + 15);
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *((void *)a2 + 10);
  uint64_t v6 = *((void *)a2 + 11);
  char v7 = *((unsigned char *)a2 + 96);
  sub_228ACF3A4(v6, v7);
  uint64_t v8 = *(void *)(a1 + 88);
  char v9 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 88) = v6;
  *(unsigned char *)(a1 + 96) = v7;
  sub_228AD26A8(v8, v9);
  uint64_t v10 = *((void *)a2 + 13);
  char v11 = *((unsigned char *)a2 + 112);
  sub_228ACF3A4(v10, v11);
  uint64_t v12 = *(void *)(a1 + 104);
  char v13 = *(unsigned char *)(a1 + 112);
  *(void *)(a1 + 104) = v10;
  *(unsigned char *)(a1 + 112) = v11;
  sub_228AD26A8(v12, v13);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  return a1;
}

__n128 __swift_memcpy128_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for ResolvedCircle(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  char v6 = *(unsigned char *)(a2 + 96);
  uint64_t v7 = *(void *)(a1 + 88);
  char v8 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = v6;
  sub_228AD26A8(v7, v8);
  char v9 = *(unsigned char *)(a2 + 112);
  uint64_t v10 = *(void *)(a1 + 104);
  char v11 = *(unsigned char *)(a1 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = v9;
  sub_228AD26A8(v10, v11);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedCircle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedCircle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedCircle()
{
  return &type metadata for ResolvedCircle;
}

uint64_t sub_228B920E4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t static MapInteractionModes.all.getter@<X0>(void *a1@<X8>)
{
  if (qword_268291380 != -1) {
    uint64_t result = swift_once();
  }
  *a1 = qword_268294708;
  return result;
}

uint64_t MapInteractionModes.rawValue.getter()
{
  return *(void *)v0;
}

_MapKit_SwiftUI::MapInteractionModes __swiftcall MapInteractionModes.init(rawValue:)(_MapKit_SwiftUI::MapInteractionModes rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static MapInteractionModes.pan.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static MapInteractionModes.zoom.getter(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_228B921C0()
{
  uint64_t v0 = unk_26DD1F3C0;
  if ((unk_26DD1F3C0 & ~qword_26DD1F3B8) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = v0 | qword_26DD1F3B8;
  uint64_t result = _MKLinkedOnOrAfterReleaseSet();
  if (result)
  {
    uint64_t v3 = unk_26DD1F390;
    if ((unk_26DD1F390 & ~qword_26DD1F388) == 0) {
      uint64_t v3 = 0;
    }
    v1 |= v3 | qword_26DD1F388;
  }
  qword_268294708 = v1;
  return result;
}

void *sub_228B9222C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *sub_228B92238@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_228B9224C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_228B92260@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_228B92274(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_228B922A4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_228B922D0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_228B922F4(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_228B92308(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_228B9231C(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_228B92330@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_228B92344(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_228B92358(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_228B9236C(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_228B92380()
{
  return *v0 == 0;
}

uint64_t sub_228B92390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *sub_228B923A8(void *result)
{
  *v1 &= ~*result;
  return result;
}

void static MapInteractionModes.rotate.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static MapInteractionModes.pitch.getter(void *a1@<X8>)
{
  *a1 = 8;
}

unint64_t sub_228B923DC()
{
  unint64_t result = qword_268294710;
  if (!qword_268294710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294710);
  }
  return result;
}

unint64_t sub_228B92434()
{
  unint64_t result = qword_268294718;
  if (!qword_268294718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294718);
  }
  return result;
}

unint64_t sub_228B9248C()
{
  unint64_t result = qword_268294720;
  if (!qword_268294720)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294720);
  }
  return result;
}

unint64_t sub_228B924E4()
{
  unint64_t result = qword_268294728;
  if (!qword_268294728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294728);
  }
  return result;
}

ValueMetadata *type metadata accessor for MapInteractionModes()
{
  return &type metadata for MapInteractionModes;
}

uint64_t View.mapItemDetailSheet(isPresented:item:displaysMap:)(uint64_t a1, uint64_t a2, char a3, void *a4, char a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  *(unsigned char *)(v10 + 32) = a3;
  *(void *)(v10 + 40) = a4;
  *(unsigned char *)(v10 + 48) = a5;
  id v11 = a4;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294730);
  sub_228B93750(&qword_268294738, &qword_268294730, (void (*)(void))sub_228B92750);
  sub_228BAD0A8();

  return swift_release();
}

unint64_t sub_228B92680()
{
  unint64_t result = qword_268294740;
  if (!qword_268294740)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294748);
    sub_228B926FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294740);
  }
  return result;
}

unint64_t sub_228B926FC()
{
  unint64_t result = qword_268294750;
  if (!qword_268294750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294750);
  }
  return result;
}

unint64_t sub_228B92750()
{
  unint64_t result = qword_268294758;
  if (!qword_268294758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294758);
  }
  return result;
}

uint64_t View.mapItemDetailSheet(item:displaysMap:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  char v8 = (void *)swift_allocObject();
  _OWORD v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = a2;
  v8[6] = a3;
  char v9 = (void *)swift_allocObject();
  _OWORD v9[2] = 0;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  v9[6] = a3;
  id v10 = a3;
  swift_retain_n();
  swift_retain_n();
  id v11 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294760);
  sub_228BAD208();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v15;
  *(void *)(v12 + 24) = v16;
  *(void *)(v12 + 32) = v17;
  *(unsigned char *)(v12 + 40) = a4;
  id v13 = v17;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294730);
  sub_228B936D0();
  sub_228B93750(&qword_268294738, &qword_268294730, (void (*)(void))sub_228B92750);
  sub_228BAD0B8();

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t View.mapItemDetailPopover(isPresented:item:displaysMap:attachmentAnchor:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  *(unsigned char *)(v12 + 32) = a3;
  *(void *)(v12 + 40) = a4;
  *(unsigned char *)(v12 + 48) = a5;
  id v13 = a4;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294770);
  sub_228B93750(&qword_268294778, &qword_268294770, (void (*)(void))sub_228B937D0);
  sub_228ABD558(a1, a2, a3, a6, 4);

  return swift_release();
}

uint64_t View.mapItemDetailPopover(isPresented:item:displaysMap:attachmentAnchor:arrowEdge:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  *(unsigned char *)(v14 + 32) = a3;
  *(void *)(v14 + 40) = a4;
  *(unsigned char *)(v14 + 48) = a5;
  id v15 = a4;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294770);
  sub_228B93750(&qword_268294778, &qword_268294770, (void (*)(void))sub_228B937D0);
  sub_228ABD558(a1, a2, a3, a6, a7);

  return swift_release();
}

uint64_t sub_228B92C18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  id v12 = a4;
  swift_retain();
  swift_retain();
  uint64_t v13 = sub_228BAC878();
  uint64_t result = sub_228BACF88();
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = 0;
  *(void *)(a6 + 40) = 0;
  *(void *)(a6 + 48) = 0;
  *(unsigned char *)(a6 + 56) = a5;
  *(void *)(a6 + 64) = v13;
  *(unsigned char *)(a6 + 72) = result;
  return result;
}

uint64_t View.mapItemDetailPopover(item:displaysMap:attachmentAnchor:)(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5)
{
  id v10 = (void *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = a1;
  _OWORD v10[5] = a2;
  void v10[6] = a3;
  id v11 = (void *)swift_allocObject();
  void v11[2] = 0;
  v11[3] = 0;
  v11[4] = a1;
  v11[5] = a2;
  void v11[6] = a3;
  id v12 = a3;
  swift_retain_n();
  swift_retain_n();
  id v13 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294760);
  sub_228BAD208();
  uint64_t v14 = v19[1];
  id v15 = (void *)v19[2];
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v19[0];
  *(void *)(v16 + 24) = v14;
  *(void *)(v16 + 32) = v15;
  *(unsigned char *)(v16 + 40) = a4;
  id v17 = v15;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294770);
  sub_228B936D0();
  sub_228B93750(&qword_268294778, &qword_268294770, (void (*)(void))sub_228B937D0);
  sub_228ABD74C((uint64_t)v19, a5, 4);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t View.mapItemDetailPopover(item:displaysMap:attachmentAnchor:arrowEdge:)(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t a5, unsigned int a6)
{
  id v11 = (void *)swift_allocObject();
  void v11[2] = 0;
  v11[3] = 0;
  v11[4] = a1;
  v11[5] = a2;
  void v11[6] = a3;
  id v12 = (void *)swift_allocObject();
  v12[2] = 0;
  void v12[3] = 0;
  v12[4] = a1;
  v12[5] = a2;
  void v12[6] = a3;
  id v13 = a3;
  swift_retain_n();
  swift_retain_n();
  id v14 = v13;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294760);
  sub_228BAD208();
  uint64_t v15 = v21[1];
  uint64_t v16 = (void *)v21[2];
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v21[0];
  *(void *)(v17 + 24) = v15;
  *(void *)(v17 + 32) = v16;
  *(unsigned char *)(v17 + 40) = a4;
  id v18 = v16;
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294770);
  sub_228B936D0();
  sub_228B93750(&qword_268294778, &qword_268294770, (void (*)(void))sub_228B937D0);
  sub_228ABD74C((uint64_t)v21, a5, a6);

  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_228B930AC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  id v10 = a3;
  swift_retain();
  swift_retain();
  uint64_t v11 = sub_228BAC878();
  uint64_t result = sub_228BACF88();
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = a1;
  *(void *)(a5 + 40) = a2;
  *(void *)(a5 + 48) = a3;
  *(unsigned char *)(a5 + 56) = a4;
  *(void *)(a5 + 64) = v11;
  *(unsigned char *)(a5 + 72) = result;
  return result;
}

uint64_t sub_228B93130()
{
  return sub_228BAC688();
}

uint64_t sub_228B9314C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294820);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t sub_228B931BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v19[1] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294828);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294830);
  MEMORY[0x270FA5388](v6);
  char v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294838);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = objc_msgSend(self, sel_currentDevice);
  id v14 = objc_msgSend(v13, sel_userInterfaceIdiom);

  if (v14)
  {
    sub_228BAD2A8();
    sub_228BAC698();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v5, a1, v9);
    uint64_t v15 = &v5[*(int *)(v3 + 36)];
    long long v16 = v21;
    *(_OWORD *)uint64_t v15 = v20;
    *((_OWORD *)v15 + 1) = v16;
    *((_OWORD *)v15 + 2) = v22;
    sub_228B94804((uint64_t)v5, (uint64_t)v8);
    swift_storeEnumTagMultiPayload();
    sub_228B94ABC(&qword_268294840, &qword_268294838);
    sub_228B9486C();
    sub_228BACCC8();
    return sub_228AC1A50((uint64_t)v5, &qword_268294828);
  }
  else
  {
    id v18 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
    v18(v12, a1, v9);
    v18(v8, (uint64_t)v12, v9);
    swift_storeEnumTagMultiPayload();
    sub_228B94ABC(&qword_268294840, &qword_268294838);
    sub_228B9486C();
    sub_228BACCC8();
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

uint64_t sub_228B934C0()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  sub_228BADA48();
  sub_228BADA58();
  if (v1 == 1) {
    sub_228BADA58();
  }
  else {
    sub_228BADA78();
  }
  return sub_228BADA88();
}

uint64_t sub_228B9353C()
{
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    sub_228BADA58();
    return sub_228BADA58();
  }
  else
  {
    sub_228BADA58();
    return sub_228BADA78();
  }
}

uint64_t sub_228B93594()
{
  int v1 = *(unsigned __int8 *)(v0 + 8);
  sub_228BADA48();
  sub_228BADA58();
  if (v1 == 1) {
    sub_228BADA58();
  }
  else {
    sub_228BADA78();
  }
  return sub_228BADA88();
}

BOOL sub_228B9360C(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 8);
  BOOL v3 = *(void *)a1 == *(void *)a2;
  if ((v2 & 1) == 0) {
    BOOL v3 = 0;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    return v3;
  }
  else {
    return (*(void *)a1 == *(void *)a2) & ~v2;
  }
}

uint64_t sub_228B9364C(id *a1)
{
  id v1 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294860);
  return sub_228BAD1E8();
}

uint64_t sub_228B936AC@<X0>(uint64_t a1@<X8>)
{
  return sub_228B930AC(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(unsigned char *)(v1 + 40), a1);
}

unint64_t sub_228B936D0()
{
  unint64_t result = qword_268294768;
  if (!qword_268294768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294768);
  }
  return result;
}

uint64_t sub_228B93728@<X0>(uint64_t a1@<X8>)
{
  return sub_228B92C18(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), *(void **)(v1 + 40), *(unsigned char *)(v1 + 48), a1);
}

uint64_t sub_228B93750(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    sub_228B92680();
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_228B937D0()
{
  unint64_t result = qword_268294780;
  if (!qword_268294780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294780);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void *sub_228B93880@<X0>(void *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294860);
  unint64_t result = MEMORY[0x22A6A6930](&v4, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_228B938DC(id *a1)
{
  return sub_228B9364C(a1);
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

id sub_228B93938@<X0>(uint64_t a1@<X8>)
{
  BOOL v3 = *v1;
  id result = objc_msgSend(v3, sel__hasMUID);
  if (result && (id result = objc_msgSend(v3, sel__muid)) != 0)
  {
    id result = objc_msgSend(v3, sel__muid);
    BOOL v3 = result;
    char v5 = 0;
  }
  else
  {
    char v5 = 1;
  }
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v5;
  return result;
}

id sub_228B93AAC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapItemDetailView.Coordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for MapItemDetailView.Coordinator()
{
  return self;
}

uint64_t sub_228B93B1C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE5sheet11isPresented9onDismiss7contentQrAA7BindingVySbG_yycSgqd__yctAaBRd__lFQOyx_AA15ModifiedContentVyAMy08_MapKit_aB00m10ItemDetailC033_88864655A4452E6E3BB4AF822A3E7692LLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(a1, &qword_268294730, &qword_268294738, (void (*)(void))sub_228B92750);
}

uint64_t sub_228B93B58(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD4_AaBPAAE5sheet4item9onDismiss7contentQrAA7BindingVyqd__SgG_yycSgqd_0_qd__cts12IdentifiableRd__AaBRd_0_r0_lFQOyx_08_MapKit_aB00jK4Item33_88864655A4452E6E3BB4AF822A3E7692LLVAA15ModifiedContentVyASyAN0km6DetailC0APLLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(a1, &qword_268294730, &qword_268294738, (void (*)(void))sub_228B92750);
}

uint64_t sub_228B93B94(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE5sheet11isPresented9onDismiss7contentQrAA7BindingVySbG_yycSgqd__yctAaBRd__lFQOyx_AA15ModifiedContentVyAMy08_MapKit_aB00m10ItemDetailC033_88864655A4452E6E3BB4AF822A3E7692LLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(a1, &qword_268294770, &qword_268294778, (void (*)(void))sub_228B937D0);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE5sheet11isPresented9onDismiss7contentQrAA7BindingVySbG_yycSgqd__yctAaBRd__lFQOyx_AA15ModifiedContentVyAMy08_MapKit_aB00m10ItemDetailC033_88864655A4452E6E3BB4AF822A3E7692LLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(uint64_t a1, uint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_228B93C54(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD4_AaBPAAE5sheet4item9onDismiss7contentQrAA7BindingVyqd__SgG_yycSgqd_0_qd__cts12IdentifiableRd__AaBRd_0_r0_lFQOyx_08_MapKit_aB00jK4Item33_88864655A4452E6E3BB4AF822A3E7692LLVAA15ModifiedContentVyASyAN0km6DetailC0APLLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(a1, &qword_268294770, &qword_268294778, (void (*)(void))sub_228B937D0);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD4_AaBPAAE5sheet4item9onDismiss7contentQrAA7BindingVyqd__SgG_yycSgqd_0_qd__cts12IdentifiableRd__AaBRd_0_r0_lFQOyx_08_MapKit_aB00jK4Item33_88864655A4452E6E3BB4AF822A3E7692LLVAA15ModifiedContentVyASyAN0km6DetailC0APLLVAA30_SafeAreaRegionsIgnoringLayoutVGAN17SheetSizeModifierAPLLVGQo_HOTm(uint64_t a1, uint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PopoverSizeModifier()
{
  return &type metadata for PopoverSizeModifier;
}

ValueMetadata *type metadata accessor for IdentifiableMapItem()
{
  return &type metadata for IdentifiableMapItem;
}

ValueMetadata *type metadata accessor for SheetSizeModifier()
{
  return &type metadata for SheetSizeModifier;
}

void destroy for MapItemDetailView(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_release();
    swift_release();
  }

  if (*(void *)(a1 + 40))
  {
    swift_release();
    swift_release();
    objc_super v2 = *(void **)(a1 + 48);
  }
}

uint64_t initializeWithCopy for MapItemDetailView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  }
  char v5 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  id v7 = v5;
  if (v6)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v6;
    char v8 = *(void **)(a2 + 48);
    *(void *)(a1 + 48) = v8;
    swift_retain();
    swift_retain();
    id v9 = v8;
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for MapItemDetailView(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      swift_retain();
      swift_release();
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    }
    else
    {
      sub_228AC1A50(a1, &qword_2682947F8);
      char v5 = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(unsigned char *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v6 = *a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  id v7 = *(void **)(a1 + 24);
  char v8 = (void *)*((void *)a2 + 3);
  *(void *)(a1 + 24) = v8;
  id v9 = v8;

  uint64_t v10 = (_OWORD *)(a1 + 32);
  uint64_t v11 = a2 + 2;
  uint64_t v12 = *((void *)a2 + 5);
  if (*(void *)(a1 + 40))
  {
    if (v12)
    {
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      swift_retain();
      swift_release();
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      swift_retain();
      swift_release();
      id v13 = *(void **)(a1 + 48);
      id v14 = (void *)*((void *)a2 + 6);
      *(void *)(a1 + 48) = v14;
      id v15 = v14;
    }
    else
    {
      sub_228AC1A50(a1 + 32, &qword_268294800);
      uint64_t v18 = *((void *)a2 + 6);
      *uint64_t v10 = *v11;
      *(void *)(a1 + 48) = v18;
    }
  }
  else if (v12)
  {
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    long long v16 = (void *)*((void *)a2 + 6);
    *(void *)(a1 + 48) = v16;
    swift_retain();
    swift_retain();
    id v17 = v16;
  }
  else
  {
    long long v19 = *v11;
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *uint64_t v10 = v19;
  }
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MapItemDetailView(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      swift_release();
      *(void *)(a1 + 8) = v4;
      swift_release();
      goto LABEL_6;
    }
    sub_228AC1A50(a1, &qword_2682947F8);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  char v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  if (!*(void *)(a1 + 40))
  {
LABEL_10:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    goto LABEL_11;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  if (!v6)
  {
    sub_228AC1A50(a1 + 32, &qword_268294800);
    goto LABEL_10;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = v6;
  swift_release();
  id v7 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

LABEL_11:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapItemDetailView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapItemDetailView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapItemDetailView()
{
  return &type metadata for MapItemDetailView;
}

uint64_t sub_228B94244()
{
  uint64_t v1 = v0;
  sub_228B94A1C(v0, (uint64_t)v9);
  uint64_t result = sub_228B94A1C((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F10970]), sel_initWithMapItem_displaysMap_, *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 56));
LABEL_5:
    __swift_instantiateConcreteTypeFromMangledName(&qword_268294850);
    sub_228BACF48();
    objc_msgSend(v3, sel_setDelegate_, v7);

    return (uint64_t)v3;
  }
  if (*(void *)(v0 + 40))
  {
    id v7 = *(void **)(v0 + 32);
    id v4 = *(id *)(v0 + 48);
    swift_retain();
    swift_retain();
    uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294800);
    MEMORY[0x22A6A6930](&v8, v5);
    uint64_t v6 = v8;
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F10970]), sel_initWithMapItem_displaysMap_, v8, *(unsigned __int8 *)(v1 + 56));

    swift_release();
    swift_release();

    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_228B94398(uint64_t result)
{
  if (*(void *)(result + 8))
  {
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_2682947F8);
    sub_228BAD1E8();
LABEL_5:
    swift_release();
    return swift_release();
  }
  if (*(void *)(result + 40))
  {
    id v1 = *(id *)(result + 48);
    swift_retain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_268294800);
    sub_228BAD1E8();

    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t sub_228B9447C()
{
  return sub_228B94244();
}

void sub_228B944C0()
{
  long long v1 = v0[1];
  long long v8 = *v0;
  long long v9 = v1;
  v10[0] = v0[2];
  *(_OWORD *)((char *)v10 + 9) = *(long long *)((char *)v0 + 41);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294850);
  sub_228BACF48();
  objc_super v2 = (_OWORD *)swift_allocObject();
  *(_OWORD *)((char *)v2 + 57) = *(_OWORD *)((char *)v10 + 9);
  long long v3 = v10[0];
  long long v4 = v8;
  _OWORD v2[2] = v9;
  v2[3] = v3;
  v2[1] = v4;
  uint64_t v5 = (uint64_t (**)())&v7[OBJC_IVAR____TtCV15_MapKit_SwiftUIP33_88864655A4452E6E3BB4AF822A3E769217MapItemDetailView11Coordinator_didRequestDismissal];
  uint64_t v6 = *(void *)&v7[OBJC_IVAR____TtCV15_MapKit_SwiftUIP33_88864655A4452E6E3BB4AF822A3E769217MapItemDetailView11Coordinator_didRequestDismissal];
  *uint64_t v5 = sub_228B94968;
  v5[1] = (uint64_t (*)())v2;
  sub_228B94970((uint64_t *)&v8);
  sub_228AD2678(v6);
}

id sub_228B94594@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MapItemDetailView.Coordinator()), sel_init);
  *a1 = result;
  return result;
}

uint64_t sub_228B945D8()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t sub_228B945F8()
{
  unint64_t result = qword_268294808;
  if (!qword_268294808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294808);
  }
  return result;
}

unint64_t sub_228B94650()
{
  unint64_t result = qword_268294810;
  if (!qword_268294810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294810);
  }
  return result;
}

uint64_t sub_228B946A4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_228B946C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_228B947B0();

  return MEMORY[0x270F02710](a1, a2, a3, v6);
}

uint64_t sub_228B94724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_228B947B0();

  return MEMORY[0x270F026D8](a1, a2, a3, v6);
}

void sub_228B94788()
{
}

unint64_t sub_228B947B0()
{
  unint64_t result = qword_268294818;
  if (!qword_268294818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294818);
  }
  return result;
}

uint64_t sub_228B94804(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294828);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_228B9486C()
{
  unint64_t result = qword_268294848;
  if (!qword_268294848)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294828);
    sub_228B94ABC(&qword_268294840, &qword_268294838);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294848);
  }
  return result;
}

uint64_t sub_228B948F8()
{
  if (*(void *)(v0 + 24))
  {
    swift_release();
    swift_release();
  }

  if (*(void *)(v0 + 56))
  {
    swift_release();
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_228B94968()
{
  return sub_228B94398(v0 + 16);
}

uint64_t *sub_228B94970(uint64_t *a1)
{
  long long v3 = (void *)a1[3];
  uint64_t v2 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = (void *)a1[6];
  sub_228B65A04(*a1, a1[1]);
  id v6 = v3;
  sub_228B949D0(v2, v4, v5);
  return a1;
}

uint64_t sub_228B949D0(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    id v3 = a3;
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_228B94A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294858);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for IdentifiableMapItem.MapItemIdentity()
{
  return &type metadata for IdentifiableMapItem.MapItemIdentity;
}

uint64_t sub_228B94A94()
{
  return sub_228B94ABC(&qword_268294868, &qword_268294820);
}

uint64_t sub_228B94ABC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_228B94B10()
{
  unint64_t result = qword_268294870;
  if (!qword_268294870)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_268294878);
    sub_228B94ABC(&qword_268294840, &qword_268294838);
    sub_228B9486C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294870);
  }
  return result;
}

uint64_t type metadata accessor for MapKitTypeConformance()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for MapKitTupleTypeDescription()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B94BD4(uint64_t a1)
{
  if (qword_268291360 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = qword_26829D4E8;
  if (*(void *)(qword_26829D4E8 + 16) && (unint64_t v3 = sub_228AD17F8(a1), (v4 & 1) != 0))
  {
    uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = sub_228B94CEC();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = qword_26829D4E8;
    qword_26829D4E8 = 0x8000000000000000;
    sub_228B047EC(v5, a1, isUniquelyReferenced_nonNull_native);
    qword_26829D4E8 = v8;
    swift_bridgeObjectRelease();
    swift_endAccess();
  }
  return v5;
}

uint64_t sub_228B94CEC()
{
  uint64_t result = AGTupleCount();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = result;
    if (!result) {
      return MEMORY[0x263F8EE78];
    }
    uint64_t v2 = 0;
    unint64_t v3 = (void *)MEMORY[0x263F8EE78];
    do
    {
      uint64_t v5 = AGTupleElementType();
      _mapContentProtocolDescriptor();
      uint64_t v6 = swift_conformsToProtocol();
      if (v6)
      {
        uint64_t v7 = v6;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v3 = sub_228B7640C(0, v3[2] + 1, 1, v3);
        }
        unint64_t v9 = v3[2];
        unint64_t v8 = v3[3];
        if (v9 >= v8 >> 1) {
          unint64_t v3 = sub_228B7640C((void *)(v8 > 1), v9 + 1, 1, v3);
        }
        _OWORD v3[2] = v9 + 1;
        char v4 = &v3[3 * v9];
        v4[4] = v2;
        v4[5] = v5;
        v4[6] = v7;
      }
      ++v2;
    }
    while (v1 != v2);
    return (uint64_t)v3;
  }
  return result;
}

uint64_t TupleMapContent.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t TupleMapContent.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*TupleMapContent.value.modify())()
{
  return nullsub_1;
}

uint64_t TupleMapContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t static TupleMapContent._makeMapContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v42 = a4;
  uint64_t v43 = a1;
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v6 = type metadata accessor for _MapContentOutputs(0);
  uint64_t v36 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6 - 8);
  unint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for MultiPreferenceCombinerVisitor();
  MEMORY[0x270FA5388](v39);
  __n128 v40 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x270FA5388](v38);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TupleMapContent();
  uint64_t v12 = sub_228BAC5E8();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  id v15 = (char *)&v36 - v14;
  uint64_t List = type metadata accessor for TupleMapContent.MakeList();
  uint64_t v37 = *(void *)(List - 8);
  MEMORY[0x270FA5388](List);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = sub_228B94BD4(a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v43, v12);
  uint64_t v41 = a2;
  sub_228AC7FCC(a2, (uint64_t)v11, type metadata accessor for _MapContentInputs);
  sub_228B953C0((uint64_t)v15, (uint64_t)v11, 0, MEMORY[0x263F8EE78], (uint64_t)v18);
  uint64_t v43 = v19;
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    uint64_t v21 = *(int *)(List + 32);
    long long v22 = (uint64_t *)(v43 + 48);
    do
    {
      uint64_t v23 = *(v22 - 1);
      uint64_t v24 = *v22;
      v22 += 3;
      *(void *)&v18[v21] = AGTupleElementOffset();
      sub_228ABFD80((uint64_t)v18, v23, v24, List, (uint64_t)&off_26DD1E5C8);
      --v20;
    }
    while (v20);
  }
  swift_bridgeObjectRelease();
  uint64_t v25 = *(void *)&v18[*(int *)(List + 36)];
  int64_t v26 = *(void *)(v25 + 16);
  uint64_t v27 = MEMORY[0x263F8EE78];
  if (v26)
  {
    uint64_t v44 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_228B4F424(0, v26, 0);
    uint64_t v27 = v44;
    unint64_t v28 = (*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
    uint64_t v43 = v25;
    uint64_t v29 = v25 + v28;
    uint64_t v30 = *(void *)(v36 + 72);
    do
    {
      sub_228AC7FCC(v29, (uint64_t)v8, type metadata accessor for _MapContentOutputs);
      uint64_t v44 = v27;
      unint64_t v32 = *(void *)(v27 + 16);
      unint64_t v31 = *(void *)(v27 + 24);
      if (v32 >= v31 >> 1)
      {
        sub_228B4F424(v31 > 1, v32 + 1, 1);
        uint64_t v27 = v44;
      }
      *(void *)(v27 + 16) = v32 + 1;
      sub_228AC9B7C((uint64_t)v8, v27 + v28 + v32 * v30, type metadata accessor for _MapContentOutputs);
      v29 += v30;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
  }
  char v33 = v40;
  uint64_t v34 = (uint64_t)&v40[*(int *)(v39 + 20)];
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  *char v33 = v27;
  sub_228B95F0C();
  sub_228BACD68();
  sub_228AC7FCC(v34, v42, type metadata accessor for _MapContentOutputs);
  sub_228B979E4((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for MultiPreferenceCombinerVisitor);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v18, List);
}

uint64_t type metadata accessor for TupleMapContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TupleMapContent.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B953C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  type metadata accessor for TupleMapContent();
  uint64_t v10 = sub_228BAC5E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(a5, a1, v10);
  uint64_t List = (int *)type metadata accessor for TupleMapContent.MakeList();
  uint64_t result = sub_228AC9B7C(a2, a5 + List[7], type metadata accessor for _MapContentInputs);
  *(void *)(a5 + List[8]) = a3;
  *(void *)(a5 + List[9]) = a4;
  return result;
}

uint64_t static TupleMapContent._mapContentCount(inputs:)(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = type metadata accessor for _MapContentInputs(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TupleMapContent.CountContents();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v17 - v9;
  uint64_t v11 = sub_228B94BD4(a2);
  sub_228AC7FCC(a1, (uint64_t)v6, type metadata accessor for _MapContentInputs);
  sub_228AC9B7C((uint64_t)v6, (uint64_t)v10, type metadata accessor for _MapContentInputs);
  uint64_t v12 = &v10[*(int *)(v7 + 28)];
  *(void *)uint64_t v12 = 0;
  v12[8] = 0;
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    uint64_t v14 = (uint64_t *)(v11 + 48);
    do
    {
      sub_228ABFD80((uint64_t)v10, *(v14 - 1), *v14, v7, (uint64_t)&off_26DD1E560);
      v14 += 3;
      --v13;
    }
    while (v13);
  }
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)&v10[*(int *)(v7 + 28)];
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v15;
}

uint64_t sub_228B95688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v38 = a4;
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v39 = sub_228BAC5E8();
  uint64_t v37 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v36 = (uint64_t)&v34 - v7;
  uint64_t v8 = type metadata accessor for _MapContentOutputs(0);
  uint64_t v40 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v35 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v34 - v11;
  uint64_t v13 = type metadata accessor for _MapContentInputs(0);
  uint64_t v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  long long v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (uint64_t)v4 + *(int *)(a2 + 28);
  sub_228AC7FCC(v17, (uint64_t)v16, type metadata accessor for _MapContentInputs);
  LODWORD(v17) = *(_DWORD *)(v17 + *(int *)(v14 + 36));
  uint64_t v34 = a2;
  uint64_t v18 = *(void *)((char *)v4 + *(int *)(a2 + 32));
  __swift_instantiateConcreteTypeFromMangledName(qword_268291998);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_228BAF4E0;
  *(void *)(v19 + 32) = -1;
  *(unsigned char *)(v19 + 72) = 0;
  int v42 = v17;
  uint64_t v43 = v18;
  uint64_t v44 = v19;
  uint64_t v20 = (uint64_t)v12;
  uint64_t v21 = v4;
  uint64_t v22 = type metadata accessor for TupleMapContent.ChildTraits();
  uint64_t v46 = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291990);
  sub_228AC7E20((uint64_t)&v42, (uint64_t)sub_228AC9950, (uint64_t)v45, v22, MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
  swift_bridgeObjectRelease();
  *(_DWORD *)&v16[*(int *)(v14 + 36)] = v41;
  type metadata accessor for TupleMapContent();
  sub_228ACB118(v4);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v26 = v36;
  sub_228ACB078(OffsetAttribute2, v36);
  uint64_t v27 = a3;
  uint64_t v28 = (uint64_t)v35;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v26, v16, v27);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v26, v39);
  sub_228AC7FCC(v20, v28, type metadata accessor for _MapContentOutputs);
  uint64_t v29 = *(int *)(v34 + 36);
  unint64_t v30 = *(void *)((char *)v4 + v29);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v30 = sub_228B76534(0, *(void *)(v30 + 16) + 1, 1, v30);
  }
  unint64_t v32 = *(void *)(v30 + 16);
  unint64_t v31 = *(void *)(v30 + 24);
  if (v32 >= v31 >> 1) {
    unint64_t v30 = sub_228B76534(v31 > 1, v32 + 1, 1, v30);
  }
  *(void *)(v30 + 16) = v32 + 1;
  sub_228AC9B7C(v28, v30+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v32, type metadata accessor for _MapContentOutputs);
  *(void *)((char *)v21 + v29) = v30;
  sub_228B979E4(v20, type metadata accessor for _MapContentOutputs);
  return sub_228B979E4((uint64_t)v16, type metadata accessor for _MapContentInputs);
}

uint64_t sub_228B95B10@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  int v4 = *MEMORY[0x263F288F8];
  uint64_t v5 = sub_228BACE18();
  uint64_t v6 = v5;
  if (v4 == a1)
  {
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v12 = *(void *)(v6 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(a2, Value, v6);
    uint64_t v7 = v12;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);

  return v10(a2, v8, 1, v6);
}

uint64_t sub_228B95C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_228B95688(a1, a4, a2, a3);
}

uint64_t sub_228B95C4C@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268294040);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v16 - v10;
  sub_228B95B10(a1, (uint64_t)v16 - v10);
  uint64_t v12 = sub_228BACE18();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_228BACE08();
    sub_228ACAE4C((uint64_t)v11);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v11, v12);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v8, a3, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
  v16[0] = a2;
  char v17 = 0;
  uint64_t v14 = sub_228B78FF0((uint64_t)v8, (uint64_t)v16);
  sub_228ACAF00((uint64_t)v16);
  sub_228ACAE4C((uint64_t)v8);
  v16[0] = v14;
  sub_228ACAF54();
  return sub_228BACE38();
}

uint64_t sub_228B95E38@<X0>(uint64_t a1@<X8>)
{
  return sub_228B95C4C(*(_DWORD *)v1, *(void *)(v1 + 8), a1);
}

void sub_228B95E4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (uint64_t *)(v4 + *(int *)(a2 + 28));
  if ((v5[1] & 1) != 0
    || (uint64_t v6 = *v5, v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(v4, a3, a4), (v8 & 1) != 0))
  {
    uint64_t v9 = 0;
    char v10 = 1;
    goto LABEL_6;
  }
  uint64_t v9 = v6 + v7;
  if (!__OFADD__(v6, v7))
  {
    char v10 = 0;
LABEL_6:
    *uint64_t v5 = v9;
    *((unsigned char *)v5 + 8) = v10;
    return;
  }
  __break(1u);
}

void sub_228B95ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_228B95EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleMapContent._makeMapContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), a4);
}

uint64_t sub_228B95EEC(uint64_t a1, uint64_t a2)
{
  return static TupleMapContent._mapContentCount(inputs:)(a1, *(void *)(a2 + 16));
}

unint64_t sub_228B95F0C()
{
  unint64_t result = qword_268294980[0];
  if (!qword_268294980[0])
  {
    type metadata accessor for MultiPreferenceCombinerVisitor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_268294980);
  }
  return result;
}

uint64_t type metadata accessor for TupleMapContent.CountContents()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B95F7C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_228B9600C(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void sub_228B96168(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x228B96380);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_228B963A8()
{
  uint64_t result = type metadata accessor for _MapContentInputs(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_228B9643C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_228BACB48();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    size_t v8 = (int *)type metadata accessor for _MapContentInputs(0);
    uint64_t v9 = v8[5];
    unsigned int v10 = (char *)a1 + v9;
    int v11 = (char *)a2 + v9;
    uint64_t v12 = sub_228BAC608();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = v8[6];
    unsigned int v14 = (char *)a1 + v13;
    int v15 = (char *)a2 + v13;
    uint64_t v16 = sub_228BACD78();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    *(_DWORD *)((char *)a1 + v8[7]) = *(_DWORD *)((char *)a2 + v8[7]);
    uint64_t v17 = *(int *)(a3 + 28);
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    v18[8] = v19[8];
    *(void *)uint64_t v18 = *(void *)v19;
  }
  return a1;
}

uint64_t sub_228B965C8(uint64_t a1)
{
  uint64_t v2 = sub_228BACB48();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  uint64_t v3 = type metadata accessor for _MapContentInputs(0);
  uint64_t v4 = a1 + *(int *)(v3 + 20);
  uint64_t v5 = sub_228BAC608();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(v3 + 24);
  uint64_t v7 = sub_228BACD78();
  size_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t sub_228B966C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228BACB48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_228BAC608();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_228BACD78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  return a1;
}

uint64_t sub_228B967FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228BACB48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_228BAC608();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_228BACD78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  char v19 = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v19;
  return a1;
}

uint64_t sub_228B96938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228BACB48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_228BAC608();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_228BACD78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  return a1;
}

uint64_t sub_228B96A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228BACB48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_228BAC608();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = v7[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_228BACD78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  *(_DWORD *)(a1 + v7[7]) = *(_DWORD *)(a2 + v7[7]);
  uint64_t v16 = *(int *)(a3 + 28);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  *(void *)uint64_t v17 = *(void *)v18;
  return a1;
}

uint64_t sub_228B96BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B96BC4);
}

uint64_t sub_228B96BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _MapContentInputs(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_228B96C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B96C44);
}

uint64_t sub_228B96C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _MapContentInputs(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_228B96CB4()
{
  type metadata accessor for TupleMapContent();
  uint64_t result = sub_228BAC5E8();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for _MapContentInputs(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_228B96DA8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for TupleMapContent();
    uint64_t v7 = sub_228BAC5E8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[7];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_228BACB48();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = (int *)type metadata accessor for _MapContentInputs(0);
    uint64_t v13 = v12[5];
    uint64_t v14 = &v9[v13];
    uint64_t v15 = &v10[v13];
    uint64_t v16 = sub_228BAC608();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = v12[6];
    uint64_t v18 = &v9[v17];
    char v19 = &v10[v17];
    uint64_t v20 = sub_228BACD78();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    *(_DWORD *)&v9[v12[7]] = *(_DWORD *)&v10[v12[7]];
    uint64_t v21 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_228B96F90(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TupleMapContent();
  uint64_t v4 = sub_228BAC5E8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 28);
  uint64_t v6 = sub_228BACB48();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = type metadata accessor for _MapContentInputs(0);
  uint64_t v8 = v5 + *(int *)(v7 + 20);
  uint64_t v9 = sub_228BAC608();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v5 + *(int *)(v7 + 24);
  uint64_t v11 = sub_228BACD78();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);

  return swift_bridgeObjectRelease();
}

uint64_t sub_228B970F0(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for TupleMapContent();
  uint64_t v6 = sub_228BAC5E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_228BACB48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_228BAC608();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = v8 + v16;
  uint64_t v18 = v9 + v16;
  uint64_t v19 = sub_228BACD78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  *(_DWORD *)(v8 + v11[7]) = *(_DWORD *)(v9 + v11[7]);
  uint64_t v20 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_228B97288(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for TupleMapContent();
  uint64_t v6 = sub_228BAC5E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_228BACB48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_228BAC608();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = v8 + v16;
  uint64_t v18 = v9 + v16;
  uint64_t v19 = sub_228BACD78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24))(v17, v18, v19);
  *(_DWORD *)(v8 + v11[7]) = *(_DWORD *)(v9 + v11[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_228B97430(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for TupleMapContent();
  uint64_t v6 = sub_228BAC5E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_228BACB48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_228BAC608();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = v8 + v16;
  uint64_t v18 = v9 + v16;
  uint64_t v19 = sub_228BACD78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v17, v18, v19);
  *(_DWORD *)(v8 + v11[7]) = *(_DWORD *)(v9 + v11[7]);
  uint64_t v20 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  return a1;
}

uint64_t sub_228B975C4(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for TupleMapContent();
  uint64_t v6 = sub_228BAC5E8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[7];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_228BACB48();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = (int *)type metadata accessor for _MapContentInputs(0);
  uint64_t v12 = v11[5];
  uint64_t v13 = v8 + v12;
  uint64_t v14 = v9 + v12;
  uint64_t v15 = sub_228BAC608();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = v11[6];
  uint64_t v17 = v8 + v16;
  uint64_t v18 = v9 + v16;
  uint64_t v19 = sub_228BACD78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  *(_DWORD *)(v8 + v11[7]) = *(_DWORD *)(v9 + v11[7]);
  uint64_t v20 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v20) = *(void *)(a2 + v20);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_228B97760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B97774);
}

uint64_t sub_228B97774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TupleMapContent();
  uint64_t v6 = sub_228BAC5E8();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for _MapContentInputs(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 28);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_228B97898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B978AC);
}

uint64_t sub_228B978AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for TupleMapContent();
  uint64_t v8 = sub_228BAC5E8();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = type metadata accessor for _MapContentInputs(0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 28);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for TupleMapContent.ChildTraits()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_228B979E4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_228B97A48()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_228B97A50(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_228B97A88(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_228B97AD4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_228B97B10(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_228B97B58(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_228B97B98()
{
  return swift_getWitnessTable();
}

uint64_t sub_228B97BB4(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v2 = sub_228BAC588();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v25 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = v1 + *(int *)(type metadata accessor for MapUserLocationButtonConfig(0) + 28);
  int v13 = *MEMORY[0x263F18568];
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v11, *MEMORY[0x263F18568], v2);
  char v14 = sub_228BAC578();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v3 + 8);
  v15(v11, v2);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v17 = (uint64_t (**)(char *, uint64_t))(v3 + 88);
  if (v14)
  {
    v16(v9, v26, v2);
    int v18 = (*v17)(v9, v2);
    if (v18 == *MEMORY[0x263F18550] || v18 == *MEMORY[0x263F18560] || v18 == v13) {
      return 1;
    }
    if (v18 == *MEMORY[0x263F18558]) {
      return 2;
    }
  }
  else
  {
    v16(v6, v12, v2);
    int v22 = (*v17)(v6, v2);
    if (v22 == *MEMORY[0x263F18550] || v22 == *MEMORY[0x263F18560] || v22 == v13) {
      return 1;
    }
    uint64_t v9 = v6;
    if (v22 == *MEMORY[0x263F18558]) {
      return 2;
    }
  }
  v15(v9, v2);
  return 1;
}

uint64_t MapUserLocationButton.init(scope:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293840);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (int *)type metadata accessor for MapUserLocationButton(0);
  uint64_t v7 = (uint64_t *)((char *)a3 + v6[5]);
  *uint64_t v7 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  swift_storeEnumTagMultiPayload();
  uint64_t v8 = (char *)a3 + v6[6];
  *(void *)uint64_t v8 = swift_getKeyPath();
  v8[8] = 0;
  uint64_t v9 = (char *)a3 + v6[7];
  *(void *)uint64_t v9 = swift_getKeyPath();
  v9[8] = 0;
  uint64_t v10 = (char *)a3 + v6[8];
  *(void *)uint64_t v10 = swift_getKeyPath();
  unsigned char v10[8] = 0;
  uint64_t v11 = (char *)a3 + v6[9];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v11 = result;
  v11[8] = 0;
  int v13 = (char *)a3 + v6[10];
  *(void *)int v13 = a1;
  v13[8] = a2 & 1;
  return result;
}

uint64_t type metadata accessor for MapUserLocationButton(uint64_t a1)
{
  return sub_228AC29CC(a1, (uint64_t *)&unk_268294BA8);
}

uint64_t MapUserLocationButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v89 = a1;
  uint64_t v72 = type metadata accessor for _MapUserLocationButton(0);
  MEMORY[0x270FA5388](v72);
  uint64_t v73 = (uint64_t *)((char *)&v67 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294B88);
  MEMORY[0x270FA5388](v88);
  uint64_t v71 = (uint64_t)&v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v74 = (uint64_t)&v67 - v5;
  uint64_t v86 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294B90);
  MEMORY[0x270FA5388](v86);
  uint64_t v87 = (uint64_t)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B48);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v69 = (uint64_t)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B50);
  MEMORY[0x270FA5388](v85);
  uint64_t v68 = (uint64_t *)((char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v10);
  uint64_t v70 = (uint64_t)&v67 - v11;
  uint64_t v12 = type metadata accessor for MapControlsConfig();
  int v13 = (int *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v82 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = sub_228BAC588();
  uint64_t v81 = *(void *)(v83 - 8);
  MEMORY[0x270FA5388](v83);
  uint64_t v76 = (uint64_t)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_228BAC9C8();
  uint64_t v79 = *(void *)(v16 - 8);
  uint64_t v80 = v16;
  MEMORY[0x270FA5388](v16);
  int v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v75 = v18;
  uint64_t v77 = type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v84 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  uint64_t v67 = (uint64_t)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  int v22 = (char *)&v67 - v21;
  MEMORY[0x270FA5388](v23);
  uint64_t v25 = (char *)&v67 - v24;
  uint64_t v26 = type metadata accessor for MapUserLocationButton(0);
  uint64_t v27 = v1 + *(int *)(v26 + 36);
  uint64_t v28 = *(void *)v27;
  char v29 = *(unsigned char *)(v27 + 8);
  sub_228AD266C(*(void *)v27, v29);
  char v30 = sub_228ACD41C(v28, v29);
  sub_228AD25F8(v28, v29);
  uint64_t v78 = v1;
  sub_228ACCCD8((uint64_t)v18);
  uint64_t v31 = v76;
  sub_228ACCD10(v76);
  uint64_t v32 = v1 + *(int *)(v26 + 24);
  uint64_t v33 = *(void *)v32;
  char v34 = *(unsigned char *)(v32 + 8);
  j__swift_retain();
  uint64_t v35 = sub_228ACD004(v33, v34);
  uint64_t v36 = (uint64_t)v25;
  j__swift_release();
  if (v30 == 3) {
    char v37 = 0;
  }
  else {
    char v37 = v30;
  }
  v22[1] = v37;
  uint64_t v38 = v77;
  (*(void (**)(char *, char *, uint64_t))(v79 + 32))(&v22[*(int *)(v77 + 24)], v75, v80);
  uint64_t v39 = (uint64_t)v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 32))(&v22[*(int *)(v38 + 28)], v31, v83);
  uint64_t v40 = v38;
  *(void *)&v22[*(int *)(v38 + 32)] = v35;
  uint64_t v41 = v26;
  *int v22 = 1;
  sub_228B990EC((uint64_t)v22, v36);
  uint64_t v42 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v39, 1, 1, v42);
  uint64_t v43 = v39 + v13[7];
  uint64_t v44 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
  uint64_t v45 = v39 + v13[8];
  sub_228B99150(v36, v45, type metadata accessor for MapUserLocationButtonConfig);
  uint64_t v46 = v78;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56))(v45, 0, 1, v40);
  uint64_t v47 = v39 + v13[9];
  uint64_t v48 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v47, 1, 1, v48);
  *(_WORD *)(v39 + v13[10]) = 2;
  *(_WORD *)(v39 + v13[11]) = 2;
  *(_WORD *)(v39 + v13[12]) = 2;
  uint64_t v49 = v46 + *(int *)(v41 + 32);
  uint64_t v50 = *(void *)v49;
  LOBYTE(v47) = *(unsigned char *)(v49 + 8);
  sub_228AD266C(*(void *)v49, v47);
  LOBYTE(v40) = sub_228ACD218(v50, v47);
  sub_228AD25F8(v50, v47);
  if (v40)
  {
    uint64_t v51 = sub_228BAD108();
    uint64_t v52 = v69;
    sub_228B99150(v39, v69, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
    int v53 = v68;
    sub_228AD2708(v52, (uint64_t)v68 + *(int *)(v85 + 36), &qword_268291B48);
    *int v53 = v51;
    sub_228AC1A50(v52, &qword_268291B48);
    uint64_t v54 = &qword_268291B50;
    uint64_t v55 = (uint64_t)v53;
    uint64_t v56 = v70;
    sub_228ACD8BC(v55, v70, &qword_268291B50);
    sub_228AD2708(v56, v87, &qword_268291B50);
  }
  else
  {
    uint64_t v57 = v67;
    sub_228B99150(v36, v67, type metadata accessor for MapUserLocationButtonConfig);
    char v58 = (uint64_t *)(v46 + *(int *)(v41 + 40));
    uint64_t v59 = *v58;
    char v60 = *((unsigned char *)v58 + 8);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v62 = v72;
    uint64_t v63 = (uint64_t)v73;
    *uint64_t v73 = KeyPath;
    *(unsigned char *)(v63 + 8) = 0;
    sub_228B990EC(v57, v63 + *(int *)(v62 + 20));
    uint64_t v64 = v63 + *(int *)(v62 + 24);
    *(void *)uint64_t v64 = v59;
    *(unsigned char *)(v64 + 8) = v60;
    uint64_t v65 = v71;
    sub_228B99150(v63, v71, type metadata accessor for _MapUserLocationButton);
    *(_WORD *)(v65 + *(int *)(v88 + 36)) = 257;
    sub_228B99250(v63, type metadata accessor for _MapUserLocationButton);
    uint64_t v54 = &qword_268294B88;
    uint64_t v56 = v74;
    sub_228ACD8BC(v65, v74, &qword_268294B88);
    sub_228AD2708(v56, v87, &qword_268294B88);
  }
  swift_storeEnumTagMultiPayload();
  sub_228ACD6EC();
  sub_228B991B8();
  sub_228BACCC8();
  sub_228AC1A50(v56, v54);
  sub_228B99250(v39, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  return sub_228B99250(v36, type metadata accessor for MapUserLocationButtonConfig);
}

uint64_t sub_228B98874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228B9B054(&qword_268294BE8);

  return MEMORY[0x270F01780](a1, a2, a3, v6);
}

uint64_t sub_228B988F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_228B9B054(&qword_268294BE8);

  return MEMORY[0x270F01718](a1, a2, a3, v6);
}

void sub_228B98974()
{
}

id sub_228B989B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_228BAC588();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_228BAC9C8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for _MapUserLocationButton(0);
  uint64_t v11 = v0 + *(int *)(v10 + 24);
  if (*(unsigned char *)(v11 + 8)) {
    goto LABEL_10;
  }
  uint64_t v29 = v6;
  uint64_t v30 = v3;
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = *(void *)v0;
  char v14 = *(unsigned char *)(v0 + 8);
  sub_228ACF3A4(*(void *)v0, v14);
  uint64_t v15 = sub_228ACFC38(v13, v14);
  sub_228AD26A8(v13, v14);
  if (*(void *)(v15 + 16) && (unint64_t v16 = sub_228AD183C(v12), (v17 & 1) != 0))
  {
    sub_228AD2234(*(void *)(v15 + 56) + 8 * v16, (uint64_t)&v31);
    char v32 = 0;
    swift_bridgeObjectRelease();
    uint64_t v6 = v29;
    if ((v32 & 1) == 0)
    {
      sub_228AD2184((uint64_t)&v31, (uint64_t)v33);
      uint64_t v18 = MEMORY[0x22A6A7CA0](v33);
      if (v18)
      {
        uint64_t v19 = (void *)v18;
        id v20 = objc_msgSend(self, sel_userTrackingButtonWithMapView_, v18);

        sub_228AD21E0((uint64_t)v33);
        uint64_t v3 = v30;
        goto LABEL_11;
      }
      sub_228AD21E0((uint64_t)v33);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v31 = 0;
    char v32 = 1;
    swift_bridgeObjectRelease();
    uint64_t v6 = v29;
  }
  sub_228AC1A50((uint64_t)&v31, &qword_268291BD0);
LABEL_9:
  uint64_t v3 = v30;
LABEL_10:
  id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F10A48]), sel_init);
LABEL_11:
  uint64_t v21 = v1 + *(int *)(v10 + 20);
  uint64_t v22 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v21 + *(int *)(v22 + 24), v6);
  objc_msgSend(v20, sel_setBackgroundStyle_, sub_228BA6EB4(v9, 0));
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v21 + *(int *)(v22 + 28), v2);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v23 == *MEMORY[0x263F18550] || v23 == *MEMORY[0x263F18560] || v23 == *MEMORY[0x263F18568]) {
    goto LABEL_21;
  }
  if (v23 != *MEMORY[0x263F18558])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_21:
    uint64_t v26 = 1;
    goto LABEL_22;
  }
  uint64_t v26 = 2;
LABEL_22:
  objc_msgSend(v20, sel__setControlSize_, v26);
  return v20;
}

id sub_228B98D40(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_228BAC588();
  uint64_t v30 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_228BAC9C8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for _MapUserLocationButton(0);
  uint64_t v12 = v1 + *(int *)(v11 + 24);
  if (*(unsigned char *)(v12 + 8)) {
    goto LABEL_8;
  }
  uint64_t v28 = *(void *)v12;
  uint64_t v29 = a1;
  uint64_t v13 = *(void *)v1;
  char v14 = *(unsigned char *)(v1 + 8);
  sub_228ACF3A4(*(void *)v1, v14);
  uint64_t v15 = sub_228ACFC38(v13, v14);
  sub_228AD26A8(v13, v14);
  if (*(void *)(v15 + 16) && (unint64_t v16 = sub_228AD183C(v28), (v17 & 1) != 0))
  {
    sub_228AD2234(*(void *)(v15 + 56) + 8 * v16, (uint64_t)&v31);
    char v32 = 0;
    swift_bridgeObjectRelease();
    a1 = v29;
    if ((v32 & 1) == 0)
    {
      sub_228AD2184((uint64_t)&v31, (uint64_t)v33);
      uint64_t v18 = (void *)MEMORY[0x22A6A7CA0](v33);
      objc_msgSend(a1, sel_setMapView_, v18);

      sub_228AD21E0((uint64_t)v33);
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v31 = 0;
    char v32 = 1;
    swift_bridgeObjectRelease();
    a1 = v29;
  }
  sub_228AC1A50((uint64_t)&v31, &qword_268291BD0);
LABEL_8:
  uint64_t v19 = v2 + *(int *)(v11 + 20);
  uint64_t v20 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v19 + *(int *)(v20 + 24), v7);
  objc_msgSend(a1, sel_setBackgroundStyle_, sub_228BA6EB4(v10, 0));
  uint64_t v21 = v19 + *(int *)(v20 + 28);
  uint64_t v22 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v6, v21, v4);
  int v23 = (*(uint64_t (**)(char *, uint64_t))(v22 + 88))(v6, v4);
  if (v23 == *MEMORY[0x263F18550] || v23 == *MEMORY[0x263F18560] || v23 == *MEMORY[0x263F18568]) {
    goto LABEL_18;
  }
  if (v23 != *MEMORY[0x263F18558])
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
LABEL_18:
    uint64_t v26 = 1;
    return objc_msgSend(a1, sel__setControlSize_, v26);
  }
  uint64_t v26 = 2;
  return objc_msgSend(a1, sel__setControlSize_, v26);
}

uint64_t type metadata accessor for _MapUserLocationButton(uint64_t a1)
{
  return sub_228AC29CC(a1, (uint64_t *)&unk_268294BC8);
}

uint64_t type metadata accessor for MapUserLocationButtonConfig(uint64_t a1)
{
  return sub_228AC29CC(a1, (uint64_t *)&unk_268294BD8);
}

uint64_t sub_228B990EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_228B99150(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_228B991B8()
{
  unint64_t result = qword_268294B98;
  if (!qword_268294B98)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294B88);
    sub_228B9B054(&qword_268294BA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294B98);
  }
  return result;
}

uint64_t sub_228B99250(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_228B992B0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for MapUserLocationButton(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293840);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_228BAC9C8();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v9 = a3[5];
    uint64_t v10 = (uint64_t *)((char *)a1 + v9);
    uint64_t v11 = (uint64_t *)((char *)a2 + v9);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_228BAC588();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else
    {
      *uint64_t v10 = *v11;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v13 = a3[6];
    char v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = *(void *)v15;
    char v17 = v15[8];
    j__swift_retain();
    *(void *)char v14 = v16;
    v14[8] = v17;
    uint64_t v18 = a3[7];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = *(void *)v20;
    char v22 = v20[8];
    sub_228ACF3A4(*(void *)v20, v22);
    *(void *)uint64_t v19 = v21;
    v19[8] = v22;
    uint64_t v23 = a3[8];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = *(void *)v25;
    char v27 = v25[8];
    sub_228AD266C(*(void *)v25, v27);
    *(void *)uint64_t v24 = v26;
    unsigned char v24[8] = v27;
    uint64_t v28 = a3[9];
    uint64_t v29 = (char *)a1 + v28;
    uint64_t v30 = (char *)a2 + v28;
    uint64_t v31 = *(void *)v30;
    char v32 = v30[8];
    sub_228AD266C(*(void *)v30, v32);
    *(void *)uint64_t v29 = v31;
    v29[8] = v32;
    uint64_t v33 = a3[10];
    char v34 = (char *)a1 + v33;
    uint64_t v35 = (char *)a2 + v33;
    *(void *)char v34 = *(void *)v35;
    v34[8] = v35[8];
  }
  return a1;
}

uint64_t destroy for MapUserLocationButton(uint64_t a1, int *a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293840);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = sub_228BAC9C8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  else
  {
    swift_release();
  }
  uint64_t v5 = a1 + a2[5];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  else
  {
    swift_release();
  }
  j__swift_release();
  sub_228AD26A8(*(void *)(a1 + a2[7]), *(unsigned char *)(a1 + a2[7] + 8));
  sub_228AD25F8(*(void *)(a1 + a2[8]), *(unsigned char *)(a1 + a2[8] + 8));
  uint64_t v7 = a1 + a2[9];
  uint64_t v8 = *(void *)v7;
  char v9 = *(unsigned char *)(v7 + 8);

  return sub_228AD25F8(v8, v9);
}

void *initializeWithCopy for MapUserLocationButton(void *a1, void *a2, int *a3)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293840);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = sub_228BAC9C8();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  else
  {
    *a1 = *a2;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)((char *)a1 + v7);
  char v9 = (void *)((char *)a2 + v7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = sub_228BAC588();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  else
  {
    *uint64_t v8 = *v9;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)v13;
  char v15 = v13[8];
  j__swift_retain();
  *(void *)uint64_t v12 = v14;
  v12[8] = v15;
  uint64_t v16 = a3[7];
  char v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  char v20 = v18[8];
  sub_228ACF3A4(*(void *)v18, v20);
  *(void *)char v17 = v19;
  v17[8] = v20;
  uint64_t v21 = a3[8];
  char v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = *(void *)v23;
  char v25 = v23[8];
  sub_228AD266C(*(void *)v23, v25);
  *(void *)char v22 = v24;
  v22[8] = v25;
  uint64_t v26 = a3[9];
  char v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = *(void *)v28;
  char v30 = v28[8];
  sub_228AD266C(*(void *)v28, v30);
  *(void *)char v27 = v29;
  v27[8] = v30;
  uint64_t v31 = a3[10];
  char v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  *(void *)char v32 = *(void *)v33;
  v32[8] = v33[8];
  return a1;
}

void *assignWithCopy for MapUserLocationButton(void *a1, void *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_228AC1A50((uint64_t)a1, (uint64_t *)&unk_268293840);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293840);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = sub_228BAC9C8();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      *a1 = *a2;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v7 = a3[5];
    uint64_t v8 = (void *)((char *)a1 + v7);
    char v9 = (void *)((char *)a2 + v7);
    sub_228AC1A50((uint64_t)a1 + v7, (uint64_t *)&unk_268293270);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v10 = sub_228BAC588();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *uint64_t v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)v13;
  char v15 = v13[8];
  j__swift_retain();
  *(void *)uint64_t v12 = v14;
  v12[8] = v15;
  j__swift_release();
  uint64_t v16 = a3[7];
  char v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = *(void *)v18;
  char v20 = v18[8];
  sub_228ACF3A4(*(void *)v18, v20);
  uint64_t v21 = *(void *)v17;
  char v22 = v17[8];
  *(void *)char v17 = v19;
  v17[8] = v20;
  sub_228AD26A8(v21, v22);
  uint64_t v23 = a3[8];
  uint64_t v24 = (char *)a1 + v23;
  char v25 = (char *)a2 + v23;
  uint64_t v26 = *(void *)v25;
  char v27 = v25[8];
  sub_228AD266C(*(void *)v25, v27);
  uint64_t v28 = *(void *)v24;
  char v29 = v24[8];
  *(void *)uint64_t v24 = v26;
  unsigned char v24[8] = v27;
  sub_228AD25F8(v28, v29);
  uint64_t v30 = a3[9];
  uint64_t v31 = (char *)a1 + v30;
  char v32 = (char *)a2 + v30;
  uint64_t v33 = *(void *)v32;
  char v34 = v32[8];
  sub_228AD266C(*(void *)v32, v34);
  uint64_t v35 = *(void *)v31;
  char v36 = v31[8];
  *(void *)uint64_t v31 = v33;
  v31[8] = v34;
  sub_228AD25F8(v35, v36);
  uint64_t v37 = a3[10];
  uint64_t v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  uint64_t v40 = *(void *)v39;
  v38[8] = v39[8];
  *(void *)uint64_t v38 = v40;
  return a1;
}

char *initializeWithTake for MapUserLocationButton(char *a1, char *a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293840);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = sub_228BAC9C8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v8 = a3[5];
  char v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v12 = sub_228BAC588();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  char v15 = &a1[v13];
  uint64_t v16 = &a2[v13];
  *(void *)char v15 = *(void *)v16;
  v15[8] = v16[8];
  char v17 = &a1[v14];
  uint64_t v18 = &a2[v14];
  *(void *)char v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = &a1[v19];
  char v22 = &a2[v19];
  *(void *)uint64_t v21 = *(void *)v22;
  unsigned char v21[8] = v22[8];
  uint64_t v23 = &a1[v20];
  uint64_t v24 = &a2[v20];
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  uint64_t v25 = a3[10];
  uint64_t v26 = &a1[v25];
  char v27 = &a2[v25];
  uint64_t v28 = *(void *)v27;
  v26[8] = v27[8];
  *(void *)uint64_t v26 = v28;
  return a1;
}

char *assignWithTake for MapUserLocationButton(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_228AC1A50((uint64_t)a1, (uint64_t *)&unk_268293840);
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293840);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = sub_228BAC9C8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    uint64_t v8 = a3[5];
    char v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    sub_228AC1A50((uint64_t)&a1[v8], (uint64_t *)&unk_268293270);
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_268293270);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v12 = sub_228BAC588();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v9, v10, v12);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = &a1[v13];
  char v15 = &a2[v13];
  uint64_t v16 = *(void *)v15;
  LOBYTE(v15) = v15[8];
  *(void *)uint64_t v14 = v16;
  v14[8] = (char)v15;
  j__swift_release();
  uint64_t v17 = a3[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = *(void *)v19;
  LOBYTE(v19) = v19[8];
  uint64_t v21 = *(void *)v18;
  char v22 = v18[8];
  *(void *)uint64_t v18 = v20;
  v18[8] = (char)v19;
  sub_228AD26A8(v21, v22);
  uint64_t v23 = a3[8];
  uint64_t v24 = &a1[v23];
  uint64_t v25 = &a2[v23];
  uint64_t v26 = *(void *)v25;
  LOBYTE(v25) = v25[8];
  uint64_t v27 = *(void *)v24;
  char v28 = v24[8];
  *(void *)uint64_t v24 = v26;
  unsigned char v24[8] = (char)v25;
  sub_228AD25F8(v27, v28);
  uint64_t v29 = a3[9];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v32 = *(void *)v31;
  LOBYTE(v31) = v31[8];
  uint64_t v33 = *(void *)v30;
  char v34 = v30[8];
  *(void *)uint64_t v30 = v32;
  v30[8] = (char)v31;
  sub_228AD25F8(v33, v34);
  uint64_t v35 = a3[10];
  char v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  *(void *)char v36 = *(void *)v37;
  v36[8] = v37[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for MapUserLocationButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B99F7C);
}

uint64_t sub_228B99F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B78);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }
  else
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B80);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) != a2)
    {
      unsigned int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 8);
      if (v14 > 1) {
        return (v14 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for MapUserLocationButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B9A0AC);
}

uint64_t sub_228B9A0AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B78);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B80);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 24) + 8) = -(char)a2;
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_228B9A1C8()
{
  sub_228ACE874(319, (unint64_t *)&unk_268293240, MEMORY[0x263F19168]);
  if (v0 <= 0x3F)
  {
    sub_228ACE874(319, (unint64_t *)&qword_268293800, MEMORY[0x263F18570]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unint64_t sub_228B9A2E4()
{
  unint64_t result = qword_268294BB8;
  if (!qword_268294BB8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294BC0);
    sub_228ACD6EC();
    sub_228B991B8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294BB8);
  }
  return result;
}

unint64_t sub_228B9A360(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    char v8 = *(unsigned char *)(a2 + 8);
    sub_228ACF3A4(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(unsigned char *)(a1 + 8) = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    *(_WORD *)(a1 + v9) = *(_WORD *)(a2 + v9);
    uint64_t v12 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
    uint64_t v13 = v12[6];
    uint64_t v14 = v10 + v13;
    uint64_t v15 = v11 + v13;
    uint64_t v16 = sub_228BAC9C8();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = v12[7];
    uint64_t v18 = v10 + v17;
    uint64_t v19 = v11 + v17;
    uint64_t v20 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    *(void *)(v10 + v12[8]) = *(void *)(v11 + v12[8]);
    uint64_t v21 = *(int *)(a3 + 24);
    uint64_t v22 = a1 + v21;
    uint64_t v23 = a2 + v21;
    *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
    *(void *)uint64_t v22 = *(void *)v23;
  }
  swift_retain();
  return a1;
}

uint64_t sub_228B9A4E8(uint64_t a1, uint64_t a2)
{
  sub_228AD26A8(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v6 = v4 + *(int *)(v5 + 24);
  uint64_t v7 = sub_228BAC9C8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v4 + *(int *)(v5 + 28);
  uint64_t v9 = sub_228BAC588();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);

  return swift_release();
}

uint64_t sub_228B9A5CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_228ACF3A4(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_WORD *)(a1 + v8) = *(_WORD *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v12 = v11[6];
  uint64_t v13 = v9 + v12;
  uint64_t v14 = v10 + v12;
  uint64_t v15 = sub_228BAC9C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = v11[7];
  uint64_t v17 = v9 + v16;
  uint64_t v18 = v10 + v16;
  uint64_t v19 = sub_228BAC588();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  *(void *)(v9 + v11[8]) = *(void *)(v10 + v11[8]);
  uint64_t v20 = *(int *)(a3 + 24);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  *(void *)uint64_t v21 = *(void *)v22;
  swift_retain();
  return a1;
}

uint64_t sub_228B9A708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  sub_228ACF3A4(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_228AD26A8(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (unsigned char *)(a1 + v10);
  uint64_t v12 = a2 + v10;
  *uint64_t v11 = *(unsigned char *)(a2 + v10);
  v11[1] = *(unsigned char *)(a2 + v10 + 1);
  uint64_t v13 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v14 = v13[6];
  uint64_t v15 = &v11[v14];
  uint64_t v16 = v12 + v14;
  uint64_t v17 = sub_228BAC9C8();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = v13[7];
  uint64_t v19 = &v11[v18];
  uint64_t v20 = v12 + v18;
  uint64_t v21 = sub_228BAC588();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 24))(v19, v20, v21);
  *(void *)&v11[v13[8]] = *(void *)(v12 + v13[8]);
  swift_retain();
  swift_release();
  uint64_t v22 = *(int *)(a3 + 24);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  *(unsigned char *)(v23 + 8) = *((unsigned char *)v24 + 8);
  *(void *)uint64_t v23 = v25;
  return a1;
}

uint64_t sub_228B9A864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_WORD *)(a1 + v6) = *(_WORD *)(a2 + v6);
  char v9 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v10 = v9[6];
  uint64_t v11 = v7 + v10;
  uint64_t v12 = v8 + v10;
  uint64_t v13 = sub_228BAC9C8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = v9[7];
  uint64_t v15 = v7 + v14;
  uint64_t v16 = v8 + v14;
  uint64_t v17 = sub_228BAC588();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  *(void *)(v7 + v9[8]) = *(void *)(v8 + v9[8]);
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(void *)uint64_t v19 = *(void *)v20;
  return a1;
}

uint64_t sub_228B9A990(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  sub_228AD26A8(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (unsigned char *)(a1 + v10);
  uint64_t v12 = (uint64_t)a2 + v10;
  *uint64_t v11 = *((unsigned char *)a2 + v10);
  v11[1] = *((unsigned char *)a2 + v10 + 1);
  uint64_t v13 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v14 = v13[6];
  uint64_t v15 = &v11[v14];
  uint64_t v16 = v12 + v14;
  uint64_t v17 = sub_228BAC9C8();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  uint64_t v18 = v13[7];
  uint64_t v19 = &v11[v18];
  uint64_t v20 = v12 + v18;
  uint64_t v21 = sub_228BAC588();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 40))(v19, v20, v21);
  *(void *)&v11[v13[8]] = *(void *)(v12 + v13[8]);
  swift_release();
  uint64_t v22 = *(int *)(a3 + 24);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t)a2 + v22;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  return a1;
}

uint64_t sub_228B9AAD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B9AAEC);
}

uint64_t sub_228B9AAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for MapUserLocationButtonConfig(0);
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_228B9AB94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B9ABA8);
}

uint64_t sub_228B9ABA8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 254)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for MapUserLocationButtonConfig(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_228B9AC4C()
{
  uint64_t result = type metadata accessor for MapUserLocationButtonConfig(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_228B9ACEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228B9AD00);
}

uint64_t sub_228B9AD00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_228BAC9C8();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[6];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = sub_228BAC588();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[7];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[8]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t sub_228B9AE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228B9AE30);
}

uint64_t sub_228B9AE30(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_228BAC9C8();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
  }
  else
  {
    uint64_t result = sub_228BAC588();
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[8]) = a2;
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[7];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t sub_228B9AF3C()
{
  uint64_t result = sub_228BAC9C8();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_228BAC588();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_228B9B020()
{
  return sub_228B9B054(&qword_268294BA0);
}

uint64_t sub_228B9B054(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _MapUserLocationButton(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_228B9B098(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && (sub_228BAC558() & 1) != 0)
  {
    uint64_t v4 = type metadata accessor for MapUserLocationButtonConfig(0);
    if (sub_228BAC988() & 1) != 0 && (sub_228BAC578())
    {
      uint64_t v5 = *(int *)(v4 + 32);
      uint64_t v6 = *(void *)&a2[v5];
      if (*(void *)&a1[v5])
      {
        if (v6)
        {
          swift_retain();
          swift_retain();
          char v7 = sub_228BAD0F8();
          swift_release();
          swift_release();
          if (v7) {
            return 1;
          }
        }
      }
      else if (!v6)
      {
        return 1;
      }
    }
  }
  return 0;
}

id sub_228B9B1A8(char *a1, uint64_t a2, SEL *a3)
{
  uint64_t v4 = *(void **)&a1[OBJC_IVAR____TtCV15_MapKit_SwiftUI11MapPolyline12CocoaWrapper_wrapped];
  uint64_t v5 = a1;
  id v6 = [v4 *a3];
  if (v6)
  {
    char v7 = v6;
    sub_228BAD408();

    uint64_t v8 = (void *)sub_228BAD3D8();
    swift_bridgeObjectRelease();
  }
  else
  {

    uint64_t v8 = 0;
  }

  return v8;
}

void sub_228B9B258(char *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  if (a3)
  {
    sub_228BAD408();
    id v6 = *(void **)&a1[OBJC_IVAR____TtCV15_MapKit_SwiftUI11MapPolyline12CocoaWrapper_wrapped];
    char v7 = a1;
    id v9 = (id)sub_228BAD3D8();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = *(void **)&a1[OBJC_IVAR____TtCV15_MapKit_SwiftUI11MapPolyline12CocoaWrapper_wrapped];
    uint64_t v8 = a1;
    id v9 = 0;
  }
  objc_msgSend(v6, *a4, v9);
}

id sub_228B9B5B4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MapPolyline.CocoaWrapper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void static MapPolyline.ContourStyle.straight.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static MapPolyline.ContourStyle.geodesic.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t MapPolyline.init(coordinates:contourStyle:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a2) {
    __int16 v3 = 257;
  }
  else {
    __int16 v3 = 1;
  }
  *(void *)a3 = result;
  *(_WORD *)(a3 + 8) = v3;
  return result;
}

uint64_t MapPolyline.init(points:contourStyle:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X8>)
{
  if (*a2) {
    __int16 v3 = 256;
  }
  else {
    __int16 v3 = 0;
  }
  *(void *)a3 = result;
  *(_WORD *)(a3 + 8) = v3;
  return result;
}

id MapPolyline.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (objc_class *)type metadata accessor for MapPolyline.CocoaWrapper();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[OBJC_IVAR____TtCV15_MapKit_SwiftUI11MapPolyline12CocoaWrapper_wrapped] = a1;
  v7.receiver = v5;
  v7.super_class = v4;
  id result = objc_msgSendSuper2(&v7, sel_init);
  *(void *)a2 = result;
  *(_WORD *)(a2 + 8) = 0x8000;
  return result;
}

uint64_t type metadata accessor for MapPolyline.CocoaWrapper()
{
  return self;
}

void MapPolyline.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_polyline);
  uint64_t v5 = (objc_class *)type metadata accessor for MapPolyline.CocoaWrapper();
  id v6 = (char *)objc_allocWithZone(v5);
  *(void *)&v6[OBJC_IVAR____TtCV15_MapKit_SwiftUI11MapPolyline12CocoaWrapper_wrapped] = v4;
  v8.receiver = v6;
  v8.super_class = v5;
  id v7 = objc_msgSendSuper2(&v8, sel_init);

  *(void *)a2 = v7;
  *(_WORD *)(a2 + 8) = 0x8000;
}

uint64_t static MapPolyline._mapContentCount(inputs:)()
{
  return 1;
}

uint64_t static MapPolyline._makeMapContent(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291D38);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v5);
  objc_super v8 = (int *)((char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294BF8);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (int *)((char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20[1] = a3;
  _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0();
  (*(void (**)(int *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  if (v11 != 4)
  {
    __break(1u);
LABEL_5:
    __break(1u);
  }
  int v13 = *v12;
  (*(void (**)(int *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v14 = v21;
  sub_228BACB28();
  if (v7 != 4) {
    goto LABEL_5;
  }
  int v15 = *v8;
  (*(void (**)(int *, uint64_t))(v6 + 8))(v8, v5);
  int v16 = *(_DWORD *)(v14 + *(int *)(type metadata accessor for _MapContentInputs(0) + 28));
  int v22 = v13;
  int v23 = v15;
  int v24 = v16;
  long long v25 = 0u;
  long long v26 = 0u;
  memset(v27, 0, 28);
  v27[28] = -1;
  uint64_t v28 = 0;
  char v29 = 1;
  sub_228AC5A84();
  sub_228B9C6D4();
  uint64_t v17 = sub_228BAC478();
  MEMORY[0x270FA5388](v17);
  LODWORD(v20[-2]) = v18;
  sub_228AC1B54();
  return sub_228BACD88();
}

uint64_t sub_228B9BA64()
{
  uint64_t v1 = v0;
  v116[5] = *MEMORY[0x263EF8340];
  uint64_t v93 = type metadata accessor for MapContentList.Item.Content(0);
  MEMORY[0x270FA5388](v93);
  uint64_t v98 = (uint64_t *)((char *)&v85 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v94 = type metadata accessor for MapContentList.Item(0);
  uint64_t v95 = *(void *)(v94 - 8);
  MEMORY[0x270FA5388](v94);
  uint64_t v96 = (uint64_t *)((char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = sub_228BACAF8();
  uint64_t v108 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v101 = (char *)&v85 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  int v107 = (char *)&v85 - v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291F60);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  int v13 = (char *)&v85 - v12;
  uint64_t v14 = sub_228BACE18();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v97 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  long long v110 = (char *)&v85 - v18;
  uint64_t Value = AGGraphGetValue();
  uint64_t v90 = v20;
  uint64_t v21 = *(void **)Value;
  int v22 = *(unsigned __int16 *)(Value + 8);
  uint64_t v23 = *(int *)(v8 + 48);
  BOOL v24 = *(_DWORD *)(v1 + 8) == *MEMORY[0x263F288F8];
  id v104 = *(void **)Value;
  int v103 = v22;
  uint64_t v109 = v4;
  uint64_t v105 = v15;
  if (v24)
  {
    sub_228B0A008(v21, v22);
    sub_228BACE08();
    int v89 = 0;
    v13[v23] = 0;
    char v29 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    uint64_t v30 = (v15 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  }
  else
  {
    uint64_t v25 = AGGraphGetValue();
    char v27 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v10, v25, v14);
    v10[v23] = v27 & 1;
    uint64_t v28 = *(int *)(v8 + 48);
    char v29 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    uint64_t v30 = (v15 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v29(v13, v10, v14);
    char v31 = v10[v28];
    uint64_t v4 = v109;
    v13[v23] = v31;
    sub_228B0A008(v21, v22);
    int v89 = v13[v23];
  }
  uint64_t v106 = v14;
  long long v92 = (void (*)(uint64_t, char *, uint64_t))v29;
  uint64_t v91 = v30;
  v29(v110, v13, v14);
  uint64_t v32 = AGGraphGetValue();
  uint64_t v33 = v108;
  char v34 = *(void (**)(char *, uint64_t, uint64_t))(v108 + 16);
  uint64_t v35 = v107;
  v34(v107, v32, v4);
  uint64_t v36 = sub_228BAC9D8();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v33 + 8);
  v37(v35, v4);
  uint64_t v38 = *(void *)(v1 + 16);
  int v39 = (v36 | v38) == 0;
  if (v36 && v38)
  {
    swift_retain();
    swift_retain();
    int v39 = sub_228BAD0F8();
    swift_release();
    swift_release();
  }
  int v88 = v39;
  uint64_t v40 = AGGraphGetValue();
  v34(v35, v40, v4);
  sub_228B50520();
  sub_228BACB08();
  v111[0] = v113;
  v111[1] = v114;
  uint64_t v41 = *((void *)&v114 + 1);
  uint64_t v112 = v115;
  uint64_t v42 = v113;
  uint64_t v99 = DWORD2(v113);
  uint64_t v100 = HIDWORD(v113);
  uint64_t v43 = v114;
  uint64_t v44 = v115;
  v37(v35, v4);
  uint64_t v45 = *(void *)(v1 + 48);
  uint64_t v102 = v41;
  if (v45)
  {
    uint64_t v46 = *(void *)(v1 + 56);
    uint64_t v47 = *(void *)(v1 + 40);
    uint64_t v48 = *(void *)(v1 + 32);
    *(void *)&long long v113 = *(void *)(v1 + 24);
    *((void *)&v113 + 1) = v48;
    *(void *)&long long v114 = v47;
    *((void *)&v114 + 1) = v45;
    uint64_t v115 = v46;
    sub_228B17EA4((uint64_t)v111);
    swift_bridgeObjectRetain();
    int v49 = MEMORY[0x22A6A5D00](v111, &v113);
    swift_bridgeObjectRelease();
    sub_228B17ED0((uint64_t)v111);
    int v87 = v49 ^ 1;
    uint64_t v4 = v109;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v87 = 1;
  }
  uint64_t v50 = AGGraphGetValue();
  v34(v35, v50, v4);
  sub_228B50574();
  sub_228BACB08();
  v37(v35, v4);
  uint64_t v51 = AGGraphGetValue();
  uint64_t v52 = (uint64_t)v101;
  v34(v101, v51, v4);
  uint64_t v53 = sub_228B6AC9C(v116, v52);
  int v55 = *(unsigned __int8 *)(v1 + 72);
  uint64_t v101 = (char *)v53;
  LODWORD(v108) = v54 & 1;
  if (v55 != 255)
  {
    uint64_t v56 = v53;
    uint64_t v57 = *(void *)(v1 + 64);
    if (v54)
    {
      if (v55)
      {
        sub_228ACF3A4(v53, 1);
        sub_228B507A8(v57, v55);
        int v58 = MEMORY[0x22A6A69F0](v56, v57);
LABEL_17:
        int v86 = v58;
        sub_228B50790(v57, v55);
        sub_228AD26A8(v56, v108);
LABEL_19:
        uint64_t v4 = v109;
        goto LABEL_20;
      }
    }
    else if ((v55 & 1) == 0)
    {
      sub_228ACF3A4(v53, 0);
      sub_228B507A8(v57, v55);
      int v58 = sub_228BAD0F8();
      goto LABEL_17;
    }
    int v86 = 0;
    goto LABEL_19;
  }
  int v86 = 0;
LABEL_20:
  uint64_t v59 = (char *)(v99 | (v100 << 32));
  uint64_t v60 = AGGraphGetValue();
  uint64_t v61 = v107;
  v34(v107, v60, v4);
  sub_228B5067C();
  sub_228BACB08();
  uint64_t v109 = v116[0];
  v37(v61, v4);
  uint64_t v62 = v105;
  if ((*(unsigned char *)(v1 + 88) & 1) == 0
    && (v86 & ~(v90 | v87 | v88 ^ 1 | v89) & 1) != 0
    && v109 == *(void *)(v1 + 80)
    && AGGraphGetOutputValue())
  {
    *(void *)(v1 + 80) = v109;
    *(unsigned char *)(v1 + 88) = 0;
    sub_228B50790(*(void *)(v1 + 64), *(unsigned char *)(v1 + 72));
    *(void *)(v1 + 64) = v101;
    *(unsigned char *)(v1 + 72) = v108;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 24) = v42;
    *(void *)(v1 + 32) = v59;
    *(void *)(v1 + 40) = v43;
    *(void *)(v1 + 48) = v102;
    *(void *)(v1 + 56) = v44;
    *(void *)(v1 + 16) = v36;
    uint64_t v63 = v106;
    uint64_t v64 = v104;
    __int16 v65 = v103;
    uint64_t v66 = v110;
  }
  else
  {
    int v107 = v59;
    char v67 = v108;
    BOOL v68 = v108 != 0;
    int v69 = *(_DWORD *)(v1 + 12) + 1;
    *(_DWORD *)(v1 + 12) = v69;
    (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v97, v110, v106);
    uint64_t v70 = v104;
    uint64_t v71 = v98;
    *uint64_t v98 = v104;
    __int16 v72 = v103;
    *((_WORD *)v71 + 4) = v103;
    v71[2] = v36;
    v71[3] = v42;
    int v73 = v100;
    *((_DWORD *)v71 + 8) = v99;
    *((_DWORD *)v71 + 9) = v73;
    v71[5] = v43;
    v71[6] = v102;
    v71[7] = v44;
    uint64_t v74 = (uint64_t)v101;
    v71[8] = v101;
    *((unsigned char *)v71 + 72) = v68;
    v71[10] = v109;
    swift_storeEnumTagMultiPayload();
    sub_228B0A008(v70, v72);
    swift_retain();
    sub_228B17EA4((uint64_t)v111);
    sub_228ACF3A4(v74, v67);
    sub_228B0A008(v70, v72);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_228ACF3A4(v74, v67);
    sub_228ACAF54();
    sub_228BACE28();
    uint64_t v75 = v116[0];
    if (!v116[0])
    {
      __swift_instantiateConcreteTypeFromMangledName(qword_268291998);
      uint64_t v75 = swift_allocObject();
      *(_OWORD *)(v75 + 16) = xmmword_228BAF4E0;
      *(void *)(v75 + 32) = 0;
      *(unsigned char *)(v75 + 72) = 0;
    }
    uint64_t v76 = (uint64_t)v96;
    *uint64_t v96 = v75;
    uint64_t v77 = v94;
    uint64_t v63 = v106;
    v92(v76 + *(int *)(v94 + 28), v97, v106);
    *(_DWORD *)(v76 + 8) = v69;
    sub_228AD8F10((uint64_t)v98, v76 + *(int *)(v77 + 24));
    __swift_instantiateConcreteTypeFromMangledName(&qword_268291F68);
    unint64_t v78 = (*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
    uint64_t v79 = swift_allocObject();
    *(_OWORD *)(v79 + 16) = xmmword_228BAF4E0;
    sub_228B506D0(v76, v79 + v78);
    v116[0] = sub_228B78CF8(v79);
    v116[1] = v80;
    AGGraphSetOutputValue();
    uint64_t v64 = v104;
    __int16 v65 = v103;
    sub_228B0A024(v104, v103);
    uint64_t v81 = v102;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v82 = (uint64_t)v101;
    char v83 = v108;
    sub_228AD26A8((uint64_t)v101, v108);
    swift_bridgeObjectRelease();
    sub_228B50734(v76);
    *(void *)(v1 + 80) = v109;
    *(unsigned char *)(v1 + 88) = 0;
    sub_228B50790(*(void *)(v1 + 64), *(unsigned char *)(v1 + 72));
    *(void *)(v1 + 64) = v82;
    *(unsigned char *)(v1 + 72) = v83;
    swift_bridgeObjectRelease();
    *(void *)(v1 + 24) = v42;
    *(void *)(v1 + 32) = v107;
    *(void *)(v1 + 40) = v43;
    *(void *)(v1 + 48) = v81;
    *(void *)(v1 + 56) = v44;
    *(void *)(v1 + 16) = v36;
    uint64_t v66 = v110;
    uint64_t v62 = v105;
  }
  swift_retain();
  swift_release();
  sub_228B0A024(v64, v65);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v66, v63);
}

unint64_t sub_228B9C6D4()
{
  unint64_t result = qword_268294C00;
  if (!qword_268294C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294C00);
  }
  return result;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for MapPolyline()
{
  return &type metadata for MapPolyline;
}

ValueMetadata *type metadata accessor for MapPolyline.ContourStyle()
{
  return &type metadata for MapPolyline.ContourStyle;
}

unsigned char *_s15_MapKit_SwiftUI11MapPolylineV12ContourStyleV7StorageOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228B9C838);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapPolyline.ContourStyle.Storage()
{
  return &type metadata for MapPolyline.ContourStyle.Storage;
}

uint64_t initializeBufferWithCopyOfBuffer for MapPolyline.Storage(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  __int16 v4 = *(_WORD *)(a2 + 8);
  sub_228B0A008(*(void **)a2, v4);
  *(void *)a1 = v3;
  *(_WORD *)(a1 + 8) = v4;
  return a1;
}

void destroy for MapPolyline.Storage(uint64_t a1)
{
}

uint64_t _s15_MapKit_SwiftUI11MapPolylineV7StorageOwca_0(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)a2;
  __int16 v4 = *(_WORD *)(a2 + 8);
  sub_228B0A008(*(void **)a2, v4);
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v3;
  __int16 v6 = *(_WORD *)(a1 + 8);
  *(_WORD *)(a1 + 8) = v4;
  sub_228B0A024(v5, v6);
  return a1;
}

uint64_t assignWithTake for MapPolyline.Storage(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)(a2 + 8);
  __int16 v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  __int16 v5 = *(_WORD *)(a1 + 8);
  *(_WORD *)(a1 + 8) = v3;
  sub_228B0A024(v4, v5);
  return a1;
}

uint64_t _s15_MapKit_SwiftUI11MapPolylineV7StorageOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FFF && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 0x3FFF);
  }
  unsigned int v3 = (*(_WORD *)(a1 + 8) & 0xFE | (*(unsigned __int16 *)(a1 + 8) >> 15) | (*(unsigned __int16 *)(a1 + 8) >> 1) & 0x3F00) ^ 0x3FFF;
  if (v3 >= 0x3FFE) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t _s15_MapKit_SwiftUI11MapPolylineV7StorageOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 0x3FFF;
    if (a3 >= 0x3FFF) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FFF) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2)
    {
      unsigned int v3 = ((-a2 >> 1) & 0x1FFF) - (a2 << 13);
      *(void *)unint64_t result = 0;
      *(_WORD *)(result + 8) = (4 * v3) & 0xFE00 | (2 * (v3 & 0x7F));
    }
  }
  return result;
}

uint64_t sub_228B9CA30(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8) >> 15;
}

uint64_t sub_228B9CA3C(uint64_t result)
{
  *(_WORD *)(result + 8) &= ~0x8000u;
  return result;
}

uint64_t sub_228B9CA4C(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 8) = *(_WORD *)(result + 8) & 0x101 | (a2 << 15);
  return result;
}

ValueMetadata *type metadata accessor for MapPolyline.Storage()
{
  return &type metadata for MapPolyline.Storage;
}

uint64_t destroy for MapPolyline.MakeList(uint64_t a1)
{
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 != 255)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    return sub_228AD26A8(v4, v3 & 1);
  }
  return result;
}

uint64_t initializeWithCopy for MapPolyline.MakeList(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = a2 + 64;
  int v7 = *(unsigned __int8 *)(a2 + 72);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7 == 255)
  {
    *(void *)(a1 + 64) = *(void *)v6;
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(v6 + 8);
  }
  else
  {
    uint64_t v8 = *(void *)v6;
    sub_228ACF3A4(v8, v7 & 1);
    *(void *)(a1 + 64) = v8;
    *(unsigned char *)(a1 + 72) = v7 & 1;
  }
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t assignWithCopy for MapPolyline.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v4 = (uint64_t *)(a1 + 64);
  uint64_t v5 = (uint64_t *)(a2 + 64);
  int v6 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) == 255)
  {
    if (v6 == 255)
    {
      uint64_t v8 = *v5;
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
      *uint64_t v4 = v8;
    }
    else
    {
      char v13 = v6 & 1;
      uint64_t v14 = *v5;
      sub_228ACF3A4(v14, v6 & 1);
      *(void *)(a1 + 64) = v14;
      *(unsigned char *)(a1 + 72) = v13;
    }
  }
  else if (v6 == 255)
  {
    sub_228B4FA64(a1 + 64);
    char v7 = *(unsigned char *)(a2 + 72);
    *uint64_t v4 = *v5;
    *(unsigned char *)(a1 + 72) = v7;
  }
  else
  {
    char v9 = v6 & 1;
    uint64_t v10 = *v5;
    sub_228ACF3A4(v10, v6 & 1);
    uint64_t v11 = *(void *)(a1 + 64);
    char v12 = *(unsigned char *)(a1 + 72);
    *(void *)(a1 + 64) = v10;
    *(unsigned char *)(a1 + 72) = v9;
    sub_228AD26A8(v11, v12);
  }
  uint64_t v15 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v15;
  return a1;
}

uint64_t assignWithTake for MapPolyline.MakeList(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v5 = (void *)(a2 + 64);
  int v6 = *(unsigned __int8 *)(a1 + 72);
  if (v6 != 255)
  {
    int v7 = *(unsigned __int8 *)(a2 + 72);
    if (v7 != 255)
    {
      uint64_t v8 = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = *v5;
      *(unsigned char *)(a1 + 72) = v7 & 1;
      sub_228AD26A8(v8, v6 & 1);
      goto LABEL_6;
    }
    sub_228B4FA64(a1 + 64);
  }
  *(void *)(a1 + 64) = *v5;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
LABEL_6:
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapPolyline.MakeList(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapPolyline.MakeList(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapPolyline.MakeList()
{
  return &type metadata for MapPolyline.MakeList;
}

unint64_t sub_228B9CEA0()
{
  unint64_t result = qword_268294C08;
  if (!qword_268294C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294C08);
  }
  return result;
}

BOOL sub_228B9CEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  int v3 = *(__int16 *)(a1 + 8);
  int v4 = *(void **)a2;
  int v5 = *(__int16 *)(a2 + 8);
  if (v3 < 0)
  {
    if (v5 < 0)
    {
      sub_228AD25BC(0, (unint64_t *)&qword_268293000);
      sub_228B0A008(v4, v5);
      sub_228B0A008(v2, v3);
      char v9 = sub_228BAD6F8();
      sub_228B0A024(v2, v3);
      sub_228B0A024(v4, v5);
      return v9 & 1;
    }
    goto LABEL_14;
  }
  if (v5 < 0)
  {
LABEL_14:
    sub_228B0A008(*(void **)a2, *(_WORD *)(a2 + 8));
    sub_228B0A008(v2, v3);
    goto LABEL_15;
  }
  if ((v3 & 1) == 0)
  {
    if ((v5 & 1) == 0)
    {
      uint64_t v6 = v2[2];
      uint64_t v7 = v4[2];
      sub_228B0A008(*(void **)a2, *(_WORD *)(a2 + 8));
      sub_228B0A008(v2, v3);
      if (v6 == v7)
      {
        char v8 = sub_228B00E94((uint64_t)v2, (uint64_t)v4);
        goto LABEL_12;
      }
LABEL_15:
      sub_228B0A024(v2, v3);
      sub_228B0A024(v4, v5);
      return 0;
    }
    goto LABEL_14;
  }
  if ((v5 & 1) == 0 || v2[2] != v4[2]) {
    goto LABEL_14;
  }
  char v8 = sub_228B00F54(*(void *)a1, *(void *)a2);
  sub_228B0A008(v4, v5);
  sub_228B0A008(v2, v3);
LABEL_12:
  sub_228B0A024(v2, v3);
  sub_228B0A024(v4, v5);
  if (v8) {
    return ((v5 ^ v3) & 0x100) == 0;
  }
  return 0;
}

uint64_t destroy for ResolvedPolyline(uint64_t a1)
{
  sub_228B0A024(*(void **)a1, *(_WORD *)(a1 + 8));
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 72);

  return sub_228AD26A8(v2, v3);
}

uint64_t initializeWithCopy for ResolvedPolyline(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  __int16 v5 = *(_WORD *)(a2 + 8);
  sub_228B0A008(*(void **)a2, v5);
  *(void *)a1 = v4;
  *(_WORD *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  char v9 = *(unsigned char *)(a2 + 72);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_228ACF3A4(v8, v9);
  *(void *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t assignWithCopy for ResolvedPolyline(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  __int16 v5 = *(_WORD *)(a2 + 8);
  sub_228B0A008(*(void **)a2, v5);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v4;
  __int16 v7 = *(_WORD *)(a1 + 8);
  *(_WORD *)(a1 + 8) = v5;
  sub_228B0A024(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 64);
  LOBYTE(v5) = *(unsigned char *)(a2 + 72);
  sub_228ACF3A4(v8, v5);
  uint64_t v9 = *(void *)(a1 + 64);
  char v10 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 72) = v5;
  sub_228AD26A8(v9, v10);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ResolvedPolyline(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a2 + 8);
  long long v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  __int16 v6 = *(_WORD *)(a1 + 8);
  *(_WORD *)(a1 + 8) = v4;
  sub_228B0A024(v5, v6);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  char v8 = *(unsigned char *)(a2 + 72);
  uint64_t v9 = *(void *)(a1 + 64);
  char v10 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = v8;
  sub_228AD26A8(v9, v10);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedPolyline(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedPolyline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ResolvedPolyline()
{
  return &type metadata for ResolvedPolyline;
}

ValueMetadata *type metadata accessor for MapContentBuilder()
{
  return &type metadata for MapContentBuilder;
}

uint64_t sub_228B9D3F0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for MapPitchToggleConfig(0);
  sub_228BAC9B8();
  char v3 = &a1[*(int *)(v2 + 28)];
  uint64_t v4 = *MEMORY[0x263F18568];
  uint64_t v5 = sub_228BAC588();
  __int16 v6 = *(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);
  v6(v3, v4, v5);
  a1[1] = 2;
  *(void *)&a1[*(int *)(v2 + 32)] = 0;
  *a1 = 0;
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 0, 1, v2);
  uint64_t v7 = (int *)type metadata accessor for MapControlsConfig();
  char v8 = &a1[v7[5]];
  uint64_t v9 = type metadata accessor for MapScaleViewConfig(0);
  v6(&v8[*(int *)(v9 + 28)], v4, v5);
  _OWORD v8[2] = 0;
  *(_WORD *)char v8 = 1;
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
  char v10 = &a1[v7[6]];
  uint64_t v11 = type metadata accessor for MapUserLocationButtonConfig(0);
  sub_228BAC9B8();
  v6(&v10[*(int *)(v11 + 28)], v4, v5);
  v10[1] = 2;
  *(void *)&v10[*(int *)(v11 + 32)] = 0;
  *char v10 = 0;
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 0, 1, v11);
  char v12 = &a1[v7[7]];
  uint64_t v13 = type metadata accessor for MapCompassConfig(0);
  v6((unsigned char *)v12 + *(int *)(v13 + 24), v4, v5);
  *char v12 = 1;
  uint64_t result = (*(uint64_t (**)(_WORD *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 0, 1, v13);
  *(_WORD *)&a1[v7[8]] = 512;
  *(_WORD *)&a1[v7[9]] = 512;
  *(_WORD *)&a1[v7[10]] = 2;
  return result;
}

uint64_t sub_228B9D678()
{
  uint64_t v0 = (int *)type metadata accessor for MapControlsConfig();
  __swift_allocate_value_buffer((uint64_t)v0, qword_26829D510);
  uint64_t v1 = __swift_project_value_buffer((uint64_t)v0, (uint64_t)qword_26829D510);
  uint64_t v2 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v1 + v0[5];
  uint64_t v4 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  uint64_t v5 = v1 + v0[6];
  uint64_t v6 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = v1 + v0[7];
  uint64_t v8 = type metadata accessor for MapCompassConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_WORD *)(v1 + v0[8]) = 2;
  *(_WORD *)(v1 + v0[9]) = 2;
  *(_WORD *)(v1 + v0[10]) = 2;
  return result;
}

uint64_t sub_228B9D7FC@<X0>(uint64_t a1@<X8>)
{
  return sub_228B9D894(&qword_268291388, (uint64_t)qword_26829D510, a1);
}

uint64_t sub_228B9D824()
{
  uint64_t v0 = type metadata accessor for MapControlsConfig();
  __swift_allocate_value_buffer(v0, qword_26829D528);
  uint64_t v1 = (unsigned char *)__swift_project_value_buffer(v0, (uint64_t)qword_26829D528);
  return sub_228B9D3F0(v1);
}

uint64_t sub_228B9D870@<X0>(uint64_t a1@<X8>)
{
  return sub_228B9D894(&qword_268291390, (uint64_t)qword_26829D528, a1);
}

uint64_t sub_228B9D894@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for MapControlsConfig();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);

  return sub_228AD35E8(v6, a3);
}

uint64_t sub_228B9D8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_228BA7718(&qword_268294D28, (void (*)(uint64_t))type metadata accessor for MapControlsConfig);

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

uint64_t sub_228B9D98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, MEMORY[0x263F8D510]);
}

void sub_228B9D998(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_228B9D9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_228BA7AA8();

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

uint64_t sub_228B9DA08()
{
  sub_228BA7760();

  return sub_228BACB08();
}

uint64_t sub_228B9DA50()
{
  sub_228AD27C0();
  sub_228BACB08();
  return v1;
}

uint64_t sub_228B9DA8C()
{
  sub_228AD276C();
  sub_228BACB08();
  return v1;
}

uint64_t sub_228B9DAC8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MapControlsConfig();
  MEMORY[0x270FA5388](v2);
  sub_228AD35E8(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_228BAD178();
  return sub_228BA71BC(a1, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
}

uint64_t sub_228B9DB7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MapControlsConfig();
  MEMORY[0x270FA5388](v2 - 8);
  sub_228AD35E8(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294D18);
  sub_228BAD198();
  return sub_228BA71BC(a1, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
}

uint64_t sub_228B9DC2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for MapControlsConfig();
  uint64_t v7 = (int *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = &v9[v7[7]];
  uint64_t v12 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = &v9[v7[8]];
  uint64_t v14 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = &v9[v7[9]];
  uint64_t v16 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_WORD *)&v9[v7[10]] = 2;
  *(_WORD *)&v9[v7[11]] = 2;
  *(_WORD *)&v9[v7[12]] = 2;
  sub_228B9DAC8((uint64_t)v9);
  uint64_t v17 = type metadata accessor for _MapControlsModifier();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3 + *(int *)(v17 + 36), a1, a2);
}

uint64_t sub_228B9DE44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v43 = a1;
  uint64_t v45 = a3;
  uint64_t v5 = type metadata accessor for MapControlsConfig();
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  uint64_t v42 = sub_228BACCE8();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294CE0);
  uint64_t v33 = sub_228BAC868();
  uint64_t v44 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v40 = (char *)&v32 - v9;
  uint64_t v41 = v8;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294CE8);
  sub_228BAC868();
  sub_228BAC868();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294CF0);
  uint64_t v10 = sub_228BAC868();
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v37 = v11;
  uint64_t v39 = MEMORY[0x263F1A420];
  uint64_t v12 = sub_228B0A36C(&qword_268294CF8, &qword_268294CE8);
  uint64_t v57 = v11;
  uint64_t v58 = v12;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v14 = sub_228BA7124();
  uint64_t v55 = WitnessTable;
  unint64_t v56 = v14;
  uint64_t v15 = swift_getWitnessTable();
  uint64_t v16 = sub_228B0A36C(&qword_268294D08, &qword_268294CF0);
  uint64_t v53 = v15;
  uint64_t v54 = v16;
  uint64_t v35 = v10;
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v36 = sub_228BACCB8();
  uint64_t v17 = sub_228BAC868();
  uint64_t v38 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  int v22 = (uint64_t *)((char *)&v32 - v21);
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294D18);
  sub_228BAD188();
  uint64_t v23 = swift_getWitnessTable();
  BOOL v24 = v40;
  sub_228BAD028();
  swift_release();
  sub_228BA71BC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  uint64_t v46 = v41;
  uint64_t v47 = v37;
  uint64_t v48 = v3;
  sub_228BAD2A8();
  uint64_t v25 = sub_228B0A36C(&qword_268294D10, &qword_268294CE0);
  uint64_t v51 = v23;
  uint64_t v52 = v25;
  uint64_t v26 = v33;
  uint64_t v27 = swift_getWitnessTable();
  sub_228BAD008();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v26);
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v49 = v27;
  uint64_t v50 = v28;
  uint64_t v29 = swift_getWitnessTable();
  sub_228B1AC7C(v22, v19, v17, v29);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v38 + 8);
  v30(v19, v17);
  sub_228B1AC7C(v45, v22, v17, v29);
  return ((uint64_t (*)(void *, uint64_t))v30)(v22, v17);
}

uint64_t sub_228B9E368()
{
  return sub_228BACB08();
}

uint64_t sub_228B9E3A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MapControlsConfig();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_228AD35E8(a1, (uint64_t)&v9 - v6);
  sub_228AD35E8((uint64_t)v7, (uint64_t)v4);
  sub_228BA7760();
  sub_228BACB18();
  return sub_228BA71BC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
}

uint64_t sub_228B9E48C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v42 = a1;
  uint64_t v54 = a4;
  uint64_t v7 = type metadata accessor for _MapControlsModifier();
  uint64_t v43 = v7;
  uint64_t v50 = *(void *)(v7 - 8);
  uint64_t v51 = *(void *)(v50 + 64);
  MEMORY[0x270FA5388](v7);
  uint64_t v48 = (char *)&v41 - v8;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294CE8);
  uint64_t v13 = sub_228BAC868();
  uint64_t v45 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v46 = sub_228BAC868();
  uint64_t v52 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v44 = (char *)&v41 - v16;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294CF0);
  uint64_t v17 = sub_228BAC868();
  uint64_t v53 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v47 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __n128 v20 = MEMORY[0x270FA5388](v19);
  uint64_t v49 = (uint64_t *)((char *)&v41 - v21);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16))(v12, a1 + *(int *)(v7 + 36), a2, v20);
  swift_getKeyPath();
  char v61 = 1;
  uint64_t v22 = a3;
  sub_228BAD028();
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  uint64_t v23 = sub_228B0A36C(&qword_268294CF8, &qword_268294CE8);
  uint64_t v59 = a3;
  uint64_t v60 = v23;
  uint64_t WitnessTable = swift_getWitnessTable();
  sub_228BAD0C8();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v13);
  uint64_t v25 = v50;
  uint64_t v26 = v48;
  uint64_t v27 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v48, v42, v43);
  uint64_t v28 = v25;
  unint64_t v29 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a2;
  *(void *)(v30 + 24) = v22;
  (*(void (**)(unint64_t, char *, uint64_t))(v28 + 32))(v30 + v29, v26, v27);
  unint64_t v31 = sub_228BA7124();
  uint64_t v57 = WitnessTable;
  unint64_t v58 = v31;
  uint64_t v32 = v46;
  uint64_t v33 = swift_getWitnessTable();
  sub_228BA76C4();
  sub_228BA7718(&qword_268294D28, (void (*)(uint64_t))type metadata accessor for MapControlsConfig);
  uint64_t v34 = v47;
  uint64_t v35 = v44;
  sub_228BAD088();
  swift_release();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v32);
  uint64_t v36 = sub_228B0A36C(&qword_268294D08, &qword_268294CF0);
  uint64_t v55 = v33;
  uint64_t v56 = v36;
  uint64_t v37 = swift_getWitnessTable();
  uint64_t v38 = v49;
  sub_228B1AC7C(v49, v34, v17, v37);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v53 + 8);
  v39(v34, v17);
  sub_228B1AC7C(v54, v38, v17, v37);
  return ((uint64_t (*)(void *, uint64_t))v39)(v38, v17);
}

uint64_t sub_228B9EA60(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MapControlsConfig();
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_228AD35E8(a1, (uint64_t)v4);
  return sub_228B9DB7C((uint64_t)v4);
}

uint64_t View.mapControls<A>(_:)(void (*a1)(__n128), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v16 = a5;
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for _MapControlsModifier();
  uint64_t v11 = *(void *)(v10 - 8);
  __n128 v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v16 - v13;
  a1(v12);
  sub_228B9DC2C((uint64_t)v9, a4, (uint64_t)v14);
  MEMORY[0x22A6A6830](v14, a3, v10, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t type metadata accessor for _MapControlsModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.mapControlVisibility(_:)()
{
  return swift_release();
}

uint64_t sub_228B9ECEC()
{
  return swift_getWitnessTable();
}

uint64_t sub_228B9ED80()
{
  return swift_getWitnessTable();
}

void sub_228B9EE1C()
{
  sub_228BA5714(319, &qword_268294CA0, (uint64_t (*)(uint64_t))type metadata accessor for MapControlsConfig, MEMORY[0x263F1B5D0]);
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

unsigned char *sub_228B9EF18(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v79 = sub_228BAC9C8();
  uint64_t v5 = *(void *)(v79 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v77 = sub_228BAC588();
  uint64_t v78 = v5;
  uint64_t v7 = *(void *)(v77 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  if (v6 <= v8) {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v9 = v6;
  }
  if (v9 <= 0x7FFFFFFE) {
    int v10 = 2147483646;
  }
  else {
    int v10 = v9;
  }
  uint64_t v11 = *(_DWORD *)(v5 + 80);
  uint64_t v12 = *(void *)(v5 + 64);
  uint64_t v76 = *(void *)(v77 - 8);
  uint64_t v13 = *(_DWORD *)(v7 + 80);
  uint64_t v14 = *(void *)(v76 + 64);
  uint64_t v15 = v11 | v13 | 7;
  uint64_t v16 = *(void *)(a3 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(_DWORD *)(v17 + 80);
  if ((v15 | v18) == 7 && ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v17 + 80)) & 0x100000) == 0)
  {
    uint64_t v73 = v11 + 2;
    uint64_t v72 = v12 + v13;
    uint64_t v75 = v14 + 7;
    uint64_t v68 = v13 + 3;
    uint64_t v20 = ((v13 + 3) & ~v13) + v14;
    uint64_t v70 = v13 + 2;
    unint64_t __n = ((v14 + 7 + ((v12 + v13 + ((v11 + 2) & ~v11)) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v21 = ((v13 + 2) & ~v13) + v14;
    uint64_t v69 = __n + v13;
    uint64_t v22 = ((__n + v13 + ((v20 + v15 + ((__n + v13) & ~v13)) & ~v15)) & ~v13) + v21;
    if (((((v22 + 13) & 0xFFFFFFFFFFFFFFF8) + v18 + 8) & ~v18) + *(void *)(v17 + 64) <= 0x18)
    {
      size_t v57 = ((v13 + 3) & ~v13) + v14;
      uint64_t v58 = v20 + v15;
      size_t v67 = ((v13 + 2) & ~v13) + v14;
      uint64_t v23 = ~v13;
      uint64_t v74 = ~v11;
      uint64_t v24 = (unint64_t)&a2[v11 + 2] & ~v11;
      uint64_t v63 = *(void *)(v16 - 8);
      uint64_t v64 = v16;
      uint64_t v61 = ((__n + v13 + ((v20 + v15 + ((__n + v13) & ~v13)) & ~v15)) & ~v13) + v21;
      unint64_t v62 = ((v22 + 13) & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
      uint64_t v60 = *(_DWORD *)(v17 + 80);
      int v59 = v10;
      if (v6 == v10)
      {
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((unint64_t)&a2[v11 + 2] & ~v11, v6, v79))goto LABEL_19; {
      }
        }
      else
      {
        uint64_t v27 = (v24 + v12 + v13) & v23;
        if (v8 == v10)
        {
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v27, v8, v77))
          {
LABEL_19:
            uint64_t v27 = (v24 + v12 + v13) & v23;
            uint64_t v28 = (void *)((v75 + v27) & 0xFFFFFFFFFFFFFFF8);
LABEL_23:
            uint64_t v56 = v27;
            __int16 v65 = v28;
            uint64_t v30 = a1;
            *a1 = *a2;
            a1[1] = a2[1];
            uint64_t v31 = (unint64_t)&a1[v11 + 2] & v74;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v31, v24, v79);
            uint64_t v32 = (v31 + v12 + v13) & v23;
            uint64_t v33 = v76;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v32, v56, v77);
            *(void *)((v75 + v32) & 0xFFFFFFFFFFFFFFF8) = *v65;
            swift_retain();
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v28 = (void *)((v75 + v27) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v29 = *v28;
          if (*v28 >= 0xFFFFFFFFuLL) {
            LODWORD(v29) = -1;
          }
          if ((v29 + 1) < 2) {
            goto LABEL_23;
          }
        }
      }
      uint64_t v30 = a1;
      memcpy(a1, a2, __n);
      uint64_t v33 = v76;
LABEL_25:
      uint64_t v34 = ~v15;
      uint64_t v35 = (unsigned char *)((unint64_t)&v30[v69] & v23);
      uint64_t v66 = a2;
      uint64_t v36 = (unsigned __int8 *)((unint64_t)&a2[v69] & v23);
      if (v8 > 0xFE)
      {
        uint64_t v37 = v77;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v33 + 48))((unint64_t)&v36[v68] & v23, v8, v77))goto LABEL_27; {
      }
        }
      else
      {
        uint64_t v37 = v77;
        if (*v36 < 2u)
        {
LABEL_27:
          *uint64_t v35 = *v36;
          v35[1] = v36[1];
          v35[2] = v36[2];
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v33 + 16))((unint64_t)&v35[v68] & v23, (unint64_t)&v36[v68] & v23, v37);
          goto LABEL_30;
        }
      }
      memcpy(v35, v36, v57);
LABEL_30:
      unint64_t v38 = (unint64_t)&v35[v58] & v34;
      unint64_t v39 = (unint64_t)&v36[v58] & v34;
      unint64_t v40 = (v73 + v39) & v74;
      if (v6 == v59)
      {
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v78 + 48))((v73 + v39) & v74, v6, v79))goto LABEL_35; {
      }
        }
      else
      {
        unint64_t v41 = (v72 + v40) & v23;
        if (v8 == v59)
        {
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v33 + 48))((v72 + v40) & v23, v8, v37))
          {
LABEL_35:
            unint64_t v41 = (v72 + v40) & v23;
            uint64_t v42 = (void *)((v75 + v41) & 0xFFFFFFFFFFFFFFF8);
LABEL_39:
            *(unsigned char *)unint64_t v38 = *(unsigned char *)v39;
            *(unsigned char *)(v38 | 1) = *(unsigned char *)(v39 | 1);
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v78 + 16))((v73 + v38) & v74, v40, v79);
            uint64_t v33 = v76;
            unint64_t v44 = (v72 + ((v73 + v38) & v74)) & v23;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v76 + 16))(v44, v41, v37);
            *(void *)((v75 + v44) & 0xFFFFFFFFFFFFFFF8) = *v42;
            swift_retain();
            goto LABEL_41;
          }
        }
        else
        {
          uint64_t v42 = (void *)((v75 + v41) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v43 = *v42;
          if (*v42 >= 0xFFFFFFFFuLL) {
            LODWORD(v43) = -1;
          }
          if ((v43 + 1) < 2) {
            goto LABEL_39;
          }
        }
      }
      memcpy((void *)v38, (const void *)v39, __n);
LABEL_41:
      uint64_t v45 = ~v60;
      uint64_t v46 = (unsigned char *)((v69 + v38) & v23);
      uint64_t v47 = (unsigned __int8 *)((v69 + v39) & v23);
      if (v8 > 0xFE)
      {
        unint64_t v49 = (unint64_t)&v47[v70] & v23;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v33 + 48))(v49, v8, v37))
        {
          LOBYTE(v48) = *v47;
          goto LABEL_47;
        }
      }
      else
      {
        unsigned int v48 = *v47;
        if (v48 <= 1)
        {
          unint64_t v49 = (unint64_t)&v47[v70] & v23;
LABEL_47:
          *uint64_t v46 = v48;
          *(unsigned char *)(((v69 + v38) & v23) + 1) = v47[1];
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v33 + 16))((unint64_t)&v46[v70] & v23, v49, v37);
          size_t v50 = v67;
          goto LABEL_48;
        }
      }
      size_t v50 = v67;
      memcpy(v46, v47, v67);
LABEL_48:
      uint64_t v51 = &v46[v50];
      *uint64_t v51 = *(_WORD *)&v47[v50];
      v51[1] = *(_WORD *)&v47[v50 + 2];
      v51[2] = *(_WORD *)&v47[v50 + 4];
      uint64_t v26 = a1;
      *(void *)((unint64_t)&a1[v61 + 13] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v66[v61 + 13] & 0xFFFFFFFFFFFFFFF8);
      unint64_t v52 = (unint64_t)&a1[v62] & v45;
      unint64_t v53 = (unint64_t)&v66[v62] & v45;
      uint64_t v54 = *(void (**)(unint64_t, unint64_t, uint64_t))(v63 + 16);
      swift_retain();
      v54(v52, v53, v64);
      return v26;
    }
  }
  uint64_t v25 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v26 = (unsigned char *)(v25 + (((v15 | v18) + 16) & ~(v15 | v18)));
  swift_retain();
  return v26;
}

uint64_t sub_228B9F63C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_228BAC9C8();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned int *)(v4 + 84);
  uint64_t v6 = sub_228BAC588();
  uint64_t v7 = v4;
  uint64_t v52 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v5 <= v9) {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v10 = v5;
  }
  if (v10 <= 0x7FFFFFFE) {
    int v11 = 2147483646;
  }
  else {
    int v11 = v10;
  }
  uint64_t v12 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = v12 + 2;
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = ~v14;
  uint64_t v16 = *(void *)(v4 + 64) + v14;
  uint64_t v50 = v3;
  uint64_t v51 = *(void *)(v53 + 64);
  uint64_t v44 = v51 + 7;
  unint64_t v17 = ((v51 + 7 + ((v16 + ((v12 + 2) & ~v12)) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v18 = (v12 + 2 + a1) & ~v12;
  uint64_t v48 = v16;
  uint64_t v49 = v7;
  int v43 = v11;
  if (v5 == v11)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v12 + 2 + a1) & ~v12, v5, v3)) {
      goto LABEL_17;
    }
LABEL_12:
    uint64_t v19 = (v48 + v18) & v15;
LABEL_16:
    (*(void (**)(uint64_t, uint64_t))(v49 + 8))((v12 + 2 + a1) & ~v12, v50);
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v19, v52);
    swift_release();
    goto LABEL_17;
  }
  uint64_t v19 = (v16 + v18) & v15;
  if (v9 == v11)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v16 + v18) & v15, v9, v6)) {
      goto LABEL_17;
    }
    goto LABEL_12;
  }
  unint64_t v20 = *(void *)((v44 + v19) & 0xFFFFFFFFFFFFFFF8);
  if (v20 >= 0xFFFFFFFF) {
    LODWORD(v20) = -1;
  }
  if ((v20 + 1) < 2) {
    goto LABEL_16;
  }
LABEL_17:
  uint64_t v21 = ~v12;
  uint64_t v47 = a1;
  uint64_t v45 = v17 + v14;
  uint64_t v22 = (unsigned __int8 *)((v17 + v14 + a1) & v15);
  uint64_t v23 = v14 + 3;
  uint64_t v24 = ((v14 + 3) & v15) + v51;
  if (v9 <= 0xFE)
  {
    if (*v22 >= 2u) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v53 + 48))((unint64_t)&v22[v23] & v15, v9, v52))LABEL_19:(*(void (**)(unint64_t, uint64_t))(v53 + 8))((unint64_t)&v22[v23] & v15, v52); {
LABEL_20:
  }
  uint64_t v25 = v12 | v14 | 7;
  unint64_t v26 = (unint64_t)&v22[v24 + v25] & ~v25;
  unint64_t v27 = (v13 + v26) & v21;
  uint64_t v42 = v24 + v25;
  if (v5 == v43)
  {
    uint64_t v28 = v47;
    uint64_t v29 = v52;
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v49 + 48))(v27, v5, v50)) {
      goto LABEL_32;
    }
LABEL_27:
    unint64_t v30 = (v48 + v27) & v15;
LABEL_31:
    (*(void (**)(unint64_t, uint64_t))(v49 + 8))(v27, v50);
    (*(void (**)(unint64_t, uint64_t))(v53 + 8))(v30, v29);
    swift_release();
    goto LABEL_32;
  }
  uint64_t v28 = v47;
  unint64_t v30 = (v48 + v27) & v15;
  uint64_t v29 = v52;
  if (v9 == v43)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v53 + 48))((v48 + v27) & v15, v9, v52)) {
      goto LABEL_32;
    }
    goto LABEL_27;
  }
  unint64_t v31 = *(void *)((v44 + v30) & 0xFFFFFFFFFFFFFFF8);
  if (v31 >= 0xFFFFFFFF) {
    LODWORD(v31) = -1;
  }
  if ((v31 + 1) < 2) {
    goto LABEL_31;
  }
LABEL_32:
  uint64_t v32 = ~v25;
  uint64_t v33 = (unsigned __int8 *)((v45 + v26) & v15);
  if (v9 > 0xFE)
  {
    uint64_t v34 = v14 + 2;
    unint64_t v37 = (unint64_t)&v33[v34] & v15;
    uint64_t v36 = v53;
    uint64_t v35 = a2;
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v53 + 48))(v37, v9, v29)) {
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v34 = v14 + 2;
    uint64_t v35 = a2;
    uint64_t v36 = v53;
    if (*v33 > 1u) {
      goto LABEL_37;
    }
    unint64_t v37 = (unint64_t)&v33[v34] & v15;
  }
  (*(void (**)(unint64_t, uint64_t))(v36 + 8))(v37, v29);
LABEL_37:
  swift_release();
  uint64_t v38 = *(void *)(*(void *)(v35 + 16) - 8);
  unint64_t v39 = *(uint64_t (**)(unint64_t))(v38 + 8);
  unint64_t v40 = (v28
       + *(unsigned __int8 *)(v38 + 80)
       + (((v34 & v15) + v51 + ((v45 + ((v42 + (v45 & v15)) & v32)) & v15) + 13) & 0xFFFFFFFFFFFFFFF8)
       + 8) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);

  return v39(v40);
}

unsigned char *sub_228B9FB20(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = sub_228BAC9C8();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned int *)(v6 + 84);
  uint64_t v77 = sub_228BAC588();
  uint64_t v9 = *(void *)(v77 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  if (v8 <= v10) {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v11 = v8;
  }
  if (v11 <= 0x7FFFFFFE) {
    int v12 = 2147483646;
  }
  else {
    int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v72 = ~v13;
  uint64_t v14 = *(void *)(v6 + 64);
  uint64_t v76 = *(void *)(v77 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = ~v15;
  uint64_t v17 = v14 + v15;
  uint64_t v75 = *(void *)(v76 + 64);
  uint64_t v73 = v75 + 7;
  uint64_t v69 = v14 + v15;
  unint64_t __n = ((v75 + 7 + ((v14 + v15 + ((v13 + 2) & ~v13)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v65 = v5;
  uint64_t v66 = v13 + 2;
  unint64_t v18 = (unint64_t)&a2[v13 + 2];
  unint64_t v19 = v18 & ~v13;
  uint64_t v67 = v7;
  uint64_t v68 = a1;
  int v61 = v12;
  uint64_t v63 = v14;
  if (v8 == v12)
  {
    int v20 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v18 & ~v13, v8, v5);
    size_t v21 = __n;
    if (!v20) {
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v22 = (v17 + v19) & v16;
    if (v10 == v12)
    {
      size_t v21 = ((v75 + 7 + ((v14 + v15 + ((v13 + 2) & ~v13)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))((v17 + v19) & v16, v10, v77))
      {
LABEL_12:
        unint64_t v22 = (v69 + v19) & v16;
        uint64_t v23 = (void *)((v73 + v22) & 0xFFFFFFFFFFFFFFF8);
LABEL_16:
        int v59 = v23;
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v25 = (unint64_t)&a1[v13 + 2] & v72;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v67 + 16))(v25, v19, v65);
        uint64_t v26 = v25 + v63 + v15;
        a1 = v68;
        uint64_t v27 = v26 & v16;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v76 + 16))(v26 & v16, v22, v77);
        *(void *)((v73 + v27) & 0xFFFFFFFFFFFFFFF8) = *v59;
        swift_retain();
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v23 = (void *)((v73 + v22) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v24 = *v23;
      if (*v23 >= 0xFFFFFFFFuLL) {
        LODWORD(v24) = -1;
      }
      size_t v21 = ((v75 + 7 + ((v14 + v15 + ((v13 + 2) & ~v13)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 + 1) < 2) {
        goto LABEL_16;
      }
    }
  }
  memcpy(a1, a2, v21);
LABEL_18:
  size_t v28 = v21 + v15;
  uint64_t v29 = (unsigned char *)((unint64_t)&a1[v28] & v16);
  uint64_t v64 = a2;
  unint64_t v30 = (unsigned __int8 *)((unint64_t)&a2[v28] & v16);
  uint64_t v31 = v15 + 3;
  size_t v32 = ((v15 + 3) & v16) + v75;
  if (v10 > 0xFE)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v76 + 48))((unint64_t)&v30[v31] & v16, v10, v77))goto LABEL_20; {
  }
    }
  else if (*v30 < 2u)
  {
LABEL_20:
    *uint64_t v29 = *v30;
    v29[1] = v30[1];
    _OWORD v29[2] = v30[2];
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v76 + 16))((unint64_t)&v29[v31] & v16, (unint64_t)&v30[v31] & v16, v77);
    goto LABEL_23;
  }
  memcpy(v29, v30, v32);
LABEL_23:
  uint64_t v33 = v13 | v15 | 7;
  size_t v34 = v32 + v33;
  unint64_t v35 = (unint64_t)&v29[v32 + v33] & ~v33;
  unint64_t v36 = (unint64_t)&v30[v34] & ~v33;
  unint64_t v37 = (v66 + v36) & v72;
  size_t v60 = v34;
  if (v8 == v61)
  {
    uint64_t v38 = v67;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v67 + 48))((v66 + v36) & v72, v8, v65)) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v39 = (v69 + v37) & v16;
    uint64_t v38 = v67;
    if (v10 == v61)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v76 + 48))((v69 + v37) & v16, v10, v77))
      {
LABEL_28:
        unint64_t v39 = (v69 + v37) & v16;
        unint64_t v40 = (void *)((v73 + v39) & 0xFFFFFFFFFFFFFFF8);
LABEL_32:
        __na = v40;
        *(unsigned char *)unint64_t v35 = *(unsigned char *)v36;
        *(unsigned char *)(v35 | 1) = *(unsigned char *)(v36 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 16))((v66 + v35) & v72, v37, v65);
        unint64_t v42 = (v69 + ((v66 + v35) & v72)) & v16;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v76 + 16))(v42, v39, v77);
        *(void *)((v73 + v42) & 0xFFFFFFFFFFFFFFF8) = *__na;
        swift_retain();
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v40 = (void *)((v73 + v39) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v41 = *v40;
      if (*v40 >= 0xFFFFFFFFuLL) {
        LODWORD(v41) = -1;
      }
      if ((v41 + 1) < 2) {
        goto LABEL_32;
      }
    }
  }
  memcpy((void *)v35, (const void *)v36, __n);
LABEL_34:
  uint64_t v74 = ~v33;
  int v43 = (unsigned char *)((v28 + v35) & v16);
  uint64_t v44 = (unsigned char *)((v28 + v36) & v16);
  uint64_t v45 = v15 + 2;
  size_t v46 = (v45 & v16) + v75;
  if (v10 > 0xFE)
  {
    unint64_t v49 = (unint64_t)&v44[v45] & v16;
    uint64_t v48 = v68;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v76 + 48))(v49, v10, v77))
    {
      LOBYTE(v47) = *v44;
      goto LABEL_40;
    }
  }
  else
  {
    unsigned int v47 = *v44;
    uint64_t v48 = v68;
    if (v47 <= 1)
    {
      unint64_t v49 = (unint64_t)&v44[v45] & v16;
LABEL_40:
      *int v43 = v47;
      v43[1] = *(unsigned char *)(((v28 + v36) & v16) + 1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v76 + 16))((unint64_t)&v43[v45] & v16, v49, v77);
      goto LABEL_41;
    }
  }
  memcpy(v43, (const void *)((v28 + v36) & v16), v46);
LABEL_41:
  uint64_t v50 = &v43[v46];
  *uint64_t v50 = *(_WORD *)&v44[v46];
  v50[1] = *(_WORD *)&v44[v46 + 2];
  v50[2] = *(_WORD *)&v44[v46 + 4];
  size_t v51 = ((v28 + ((v60 + (v28 & v16)) & v74)) & v16) + v46;
  *(void *)((unint64_t)&v48[v51 + 13] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v64[v51 + 13] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v52 = *(void *)(a3 + 16);
  uint64_t v53 = *(void (**)(unint64_t, unint64_t, uint64_t))(*(void *)(v52 - 8) + 16);
  uint64_t v54 = *(unsigned __int8 *)(*(void *)(v52 - 8) + 80);
  unint64_t v55 = ((v51 + 13) & 0xFFFFFFFFFFFFFFF8) + v54 + 8;
  unint64_t v56 = (unint64_t)&v48[v55] & ~v54;
  unint64_t v57 = (unint64_t)&v64[v55] & ~v54;
  swift_retain();
  v53(v56, v57, v52);
  return v48;
}

unsigned char *sub_228BA019C(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v4 = sub_228BAC9C8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned int *)(v5 + 84);
  uint64_t v111 = sub_228BAC588();
  uint64_t v8 = *(void *)(v111 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v7 <= v9) {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v10 = v7;
  }
  if (v10 <= 0x7FFFFFFE) {
    int v11 = 2147483646;
  }
  else {
    int v11 = v10;
  }
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = *(void *)(v5 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = ~v14;
  uint64_t v16 = v13 + v14;
  uint64_t v109 = v14;
  uint64_t v110 = *(void *)(v111 - 8);
  unint64_t __dst = a1;
  uint64_t v104 = *(void *)(v110 + 64);
  uint64_t v105 = v104 + 7;
  unint64_t __n = ((v104 + 7 + ((v13 + v14 + ((v12 + 2) & ~v12)) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v17 = (unint64_t)&a1[v12 + 2];
  unint64_t v18 = v17 & ~v12;
  unsigned int v108 = *(_DWORD *)(v8 + 84);
  uint64_t v106 = v13 + v14;
  uint64_t v100 = v6;
  uint64_t v101 = v4;
  uint64_t v95 = ~v14;
  uint64_t v96 = ~v12;
  unsigned int v93 = v7;
  uint64_t v89 = v12 + 2;
  int v87 = v11;
  if (v7 == v11)
  {
    unint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    int v20 = v19(v17 & ~v12, v7, v4);
    uint64_t v21 = v4;
    uint64_t v22 = (unint64_t)&a2[v12 + 2] & ~v12;
    int v23 = v19(v22, v7, v21);
    uint64_t v24 = a2;
    uint64_t v15 = v95;
    if (v20) {
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  uint64_t v26 = (v16 + v18) & v15;
  if (v9 != v11)
  {
    unint64_t v29 = *(void *)((v105 + v26) & 0xFFFFFFFFFFFFFFF8);
    if (v29 >= 0xFFFFFFFF) {
      LODWORD(v29) = -1;
    }
    unsigned int v30 = v29 + 1;
    uint64_t v24 = a2;
    uint64_t v22 = (unint64_t)&a2[v12 + 2] & v96;
    unint64_t v31 = *(void *)((v105 + ((v22 + v13 + v14) & v15)) & 0xFFFFFFFFFFFFFFF8);
    if (v31 >= 0xFFFFFFFF) {
      LODWORD(v31) = -1;
    }
    unsigned int v32 = v31 + 1;
    uint64_t v25 = __dst;
    if (v30 >= 2)
    {
      if (v32 < 2) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
    uint64_t v28 = v100;
    if (v32 >= 2)
    {
LABEL_14:
      (*(void (**)(unint64_t, uint64_t))(v28 + 8))(v18, v101);
      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v26, v111);
      swift_release();
      goto LABEL_25;
    }
LABEL_21:
    *uint64_t v25 = *v24;
    v25[1] = v24[1];
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 24))(v18, v22, v101);
    uint64_t v33 = (v16 + v22) & v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 24))(v26, v33, v111);
    *(void *)((v105 + v26) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v105 + v33) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_release();
LABEL_24:
    unint64_t v34 = __n;
    goto LABEL_26;
  }
  uint64_t v24 = a2;
  uint64_t v27 = *(uint64_t (**)(uint64_t, void, uint64_t))(v8 + 48);
  int v97 = v27(v26, v9, v111);
  uint64_t v22 = (unint64_t)&a2[v12 + 2] & v96;
  int v23 = v27((v22 + v13 + v109) & v15, v9, v111);
  uint64_t v9 = v9;
  if (!v97)
  {
LABEL_13:
    uint64_t v16 = v106;
    uint64_t v26 = (v106 + v18) & v15;
    uint64_t v28 = v100;
    uint64_t v25 = __dst;
    if (v23) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
LABEL_9:
  uint64_t v25 = __dst;
  if (!v23)
  {
    uint64_t v26 = (v106 + v18) & v15;
LABEL_23:
    *uint64_t v25 = *v24;
    v25[1] = v24[1];
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v100 + 16))(v18, v22, v101);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 16))(v26, (v106 + v22) & v15, v111);
    *(void *)((v105 + v26) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v105 + ((v106 + v22) & v15)) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    goto LABEL_24;
  }
LABEL_25:
  unint64_t v34 = __n;
  memcpy(v25, v24, __n);
LABEL_26:
  unint64_t v35 = (unsigned char *)((unint64_t)&v25[v34 + v109] & v15);
  unint64_t v36 = (unsigned char *)((unint64_t)&v24[v34 + v109] & v15);
  uint64_t v37 = v109 + 3;
  size_t v38 = ((v109 + 3) & v15) + v104;
  uint64_t v98 = v34 + v109;
  if (v9 <= 0xFE)
  {
    unsigned int v39 = *v36;
    if (*v35 < 2u)
    {
      BOOL v40 = v39 >= 2;
      int v41 = (v39 + 2147483646) & 0x7FFFFFFF;
      if (!v40) {
        int v41 = -1;
      }
      int v42 = v41 + 1;
      goto LABEL_34;
    }
    if (v39 < 2 || ((v39 + 2147483646) & 0x7FFFFFFF) == 0xFFFFFFFF) {
      goto LABEL_40;
    }
LABEL_33:
    memcpy(v35, v36, v38);
    uint64_t v45 = v106;
    uint64_t v46 = v95;
    uint64_t v47 = v96;
    goto LABEL_42;
  }
  uint64_t v91 = v12;
  int v43 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v110 + 48);
  int v44 = v43((unint64_t)&v35[v37] & v15, v9, v111);
  int v42 = v43((unint64_t)&v36[v37] & v15, v9, v111);
  uint64_t v12 = v91;
  if (!v44)
  {
LABEL_34:
    if (v42)
    {
      uint64_t v46 = v95;
      (*(void (**)(unint64_t, uint64_t))(v110 + 8))((unint64_t)&v35[v37] & v95, v111);
      memcpy(v35, v36, v38);
    }
    else
    {
      *unint64_t v35 = *v36;
      v35[1] = v36[1];
      v35[2] = v36[2];
      uint64_t v46 = v95;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v110 + 24))((unint64_t)&v35[v37] & v95, (unint64_t)&v36[v37] & v95, v111);
    }
    goto LABEL_41;
  }
  if (v42) {
    goto LABEL_33;
  }
LABEL_40:
  *unint64_t v35 = *v36;
  v35[1] = v36[1];
  v35[2] = v36[2];
  uint64_t v46 = v95;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v110 + 16))((unint64_t)&v35[v37] & v95, (unint64_t)&v36[v37] & v95, v111);
LABEL_41:
  uint64_t v45 = v106;
  uint64_t v47 = v96;
LABEL_42:
  uint64_t v48 = v12 | v109 | 7;
  unint64_t v49 = (unint64_t)&v35[v38 + v48] & ~v48;
  unint64_t v50 = (unint64_t)&v36[v38 + v48] & ~v48;
  unint64_t v51 = (v89 + v49) & v47;
  size_t v92 = v38 + v48;
  if (v93 == v87)
  {
    uint64_t v86 = v48;
    int v88 = (unsigned char *)((unint64_t)&v35[v38 + v48] & ~v48);
    uint64_t v52 = *(uint64_t (**)(unint64_t, void, uint64_t))(v100 + 48);
    unint64_t v53 = (v89 + v49) & v47;
    int v54 = v52(v51, v93, v101);
    unint64_t v55 = (v89 + v50) & v47;
    int v56 = v52(v55, v93, v101);
    if (v54) {
      goto LABEL_44;
    }
LABEL_48:
    unint64_t v51 = v53;
    unint64_t v57 = (v106 + v53) & v46;
    if (v56)
    {
      uint64_t v48 = v86;
      unint64_t v49 = (unint64_t)v88;
      goto LABEL_56;
    }
    unint64_t v58 = (v106 + v55) & v46;
    int v59 = (void *)((v105 + v58) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v48 = v86;
    unint64_t v49 = (unint64_t)v88;
    goto LABEL_61;
  }
  unint64_t v57 = (v45 + v51) & v46;
  uint64_t v60 = v45;
  if (v108 == v87)
  {
    uint64_t v86 = v48;
    int v88 = (unsigned char *)v49;
    unint64_t v53 = (v89 + v49) & v47;
    int v61 = *(uint64_t (**)(unint64_t, void, uint64_t))(v110 + 48);
    int v94 = v61((v45 + v51) & v46, v108, v111);
    unint64_t v55 = (v89 + v50) & v47;
    int v56 = v61((v60 + v55) & v46, v108, v111);
    if (v94)
    {
LABEL_44:
      uint64_t v48 = v86;
      unint64_t v49 = (unint64_t)v88;
      if (!v56)
      {
        unint64_t v51 = v53;
        unint64_t v57 = (v106 + v53) & v46;
        unint64_t v58 = (v106 + v55) & v46;
        int v59 = (void *)((v105 + v58) & 0xFFFFFFFFFFFFFFF8);
LABEL_58:
        *(unsigned char *)unint64_t v49 = *(unsigned char *)v50;
        *(unsigned char *)(v49 | 1) = *(unsigned char *)(v50 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v100 + 16))(v51, v55, v101);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v110 + 16))(v57, v58, v111);
        *(void *)((v105 + v57) & 0xFFFFFFFFFFFFFFF8) = *v59;
        swift_retain();
        goto LABEL_62;
      }
      goto LABEL_59;
    }
    goto LABEL_48;
  }
  unint64_t v62 = *(void *)((v105 + v57) & 0xFFFFFFFFFFFFFFF8);
  if (v62 >= 0xFFFFFFFF) {
    LODWORD(v62) = -1;
  }
  unsigned int v63 = v62 + 1;
  unint64_t v55 = (v89 + v50) & v47;
  unint64_t v58 = (v45 + v55) & v46;
  int v59 = (void *)((v105 + v58) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v64 = *v59;
  if (*v59 >= 0xFFFFFFFFuLL) {
    LODWORD(v64) = -1;
  }
  unsigned int v65 = v64 + 1;
  if (v63 >= 2)
  {
    if (v65 < 2) {
      goto LABEL_58;
    }
    goto LABEL_59;
  }
  if (v65 >= 2)
  {
LABEL_56:
    (*(void (**)(unint64_t, uint64_t))(v100 + 8))(v51, v101);
    (*(void (**)(unint64_t, uint64_t))(v110 + 8))(v57, v111);
    swift_release();
LABEL_59:
    memcpy((void *)v49, (const void *)v50, __n);
    goto LABEL_62;
  }
LABEL_61:
  *(unsigned char *)unint64_t v49 = *(unsigned char *)v50;
  *(unsigned char *)(v49 | 1) = *(unsigned char *)(v50 | 1);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v100 + 24))(v51, v55, v101);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v110 + 24))(v57, v58, v111);
  *(void *)((v105 + v57) & 0xFFFFFFFFFFFFFFF8) = *v59;
  swift_retain();
  swift_release();
LABEL_62:
  uint64_t v66 = v98;
  uint64_t v67 = (unsigned __int8 *)((v98 + v49) & v46);
  uint64_t v68 = (unsigned __int8 *)((v98 + v50) & v46);
  uint64_t v69 = v109 + 2;
  size_t v70 = ((v109 + 2) & v46) + v104;
  uint64_t v107 = ~v48;
  if (v108 > 0xFE)
  {
    uint64_t v77 = *(uint64_t (**)(void))(v110 + 48);
    int v78 = v77();
    unint64_t v76 = (unint64_t)&v68[v69] & v46;
    int v79 = ((uint64_t (*)(unint64_t, void, uint64_t))v77)(v76, v108, v111);
    if (!v78)
    {
      uint64_t v72 = __dst;
      uint64_t v73 = a3;
      uint64_t v66 = v98;
      unint64_t v75 = (unint64_t)&v67[v69] & v46;
      if (!v79)
      {
        unsigned __int8 v74 = *v68;
        goto LABEL_74;
      }
      goto LABEL_76;
    }
    uint64_t v72 = __dst;
    uint64_t v73 = a3;
    uint64_t v66 = v98;
    if (!v79)
    {
      LOBYTE(v71) = *v68;
      unint64_t v80 = (unint64_t)&v67[v69] & v46;
LABEL_71:
      *uint64_t v67 = v71;
      v67[1] = v68[1];
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v110 + 16))(v80, v76, v111);
LABEL_78:
      uint64_t v81 = a2;
      goto LABEL_79;
    }
LABEL_77:
    memcpy(v67, v68, v70);
    goto LABEL_78;
  }
  unsigned int v71 = *v68;
  uint64_t v72 = __dst;
  uint64_t v73 = a3;
  if (*v67 >= 2u)
  {
    if (v71 <= 1)
    {
      unint64_t v80 = (unint64_t)&v67[v69] & v46;
      unint64_t v76 = (unint64_t)&v68[v69] & v46;
      goto LABEL_71;
    }
    goto LABEL_77;
  }
  if (v71 > 1)
  {
    unint64_t v75 = (unint64_t)&v67[v69] & v46;
LABEL_76:
    (*(void (**)(unint64_t, uint64_t))(v110 + 8))(v75, v111);
    goto LABEL_77;
  }
  unsigned __int8 v74 = v71 != 0;
  unint64_t v75 = (unint64_t)&v67[v69] & v46;
  unint64_t v76 = (unint64_t)&v68[v69] & v46;
LABEL_74:
  uint64_t v81 = a2;
  *uint64_t v67 = v74;
  v67[1] = v68[1];
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v110 + 24))(v75, v76, v111);
LABEL_79:
  uint64_t v82 = &v67[v70];
  *(_WORD *)uint64_t v82 = *(_WORD *)&v68[v70];
  *((_WORD *)v82 + 1) = *(_WORD *)&v68[v70 + 2];
  *((_WORD *)v82 + 2) = *(_WORD *)&v68[v70 + 4];
  size_t v83 = ((v66 + ((v92 + (v66 & v46)) & v107)) & v46) + v70;
  *(void *)((unint64_t)&v72[v83 + 13] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v81[v83 + 13] & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v84 = *(void *)(*(void *)(v73 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v84 + 24))((unint64_t)&v72[((v83 + 13) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v84 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v84 + 80), (unint64_t)&v81[((v83 + 13) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v84 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v84 + 80));
  return v72;
}

unsigned char *sub_228BA0D58(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v5 = sub_228BAC9C8();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned int *)(v6 + 84);
  uint64_t v73 = sub_228BAC588();
  uint64_t v9 = *(void *)(v73 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  if (v8 <= v10) {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v11 = v8;
  }
  if (v11 <= 0x7FFFFFFE) {
    int v12 = 2147483646;
  }
  else {
    int v12 = v11;
  }
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v68 = ~v13;
  uint64_t v14 = *(void *)(v6 + 64);
  uint64_t v72 = *(void *)(v73 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = ~v15;
  uint64_t v17 = v14 + v15;
  uint64_t v71 = *(void *)(v72 + 64);
  uint64_t v69 = v71 + 7;
  uint64_t v65 = v14 + v15;
  unint64_t __n = ((v71 + 7 + ((v14 + v15 + ((v13 + 2) & ~v13)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v61 = v5;
  uint64_t v62 = v13 + 2;
  unint64_t v18 = (unint64_t)&a2[v13 + 2];
  unint64_t v19 = v18 & ~v13;
  uint64_t v63 = v7;
  uint64_t v64 = a1;
  int v57 = v12;
  uint64_t v59 = v14;
  if (v8 == v12)
  {
    int v20 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v18 & ~v13, v8, v5);
    size_t v21 = __n;
    if (!v20) {
      goto LABEL_12;
    }
  }
  else
  {
    unint64_t v22 = (v17 + v19) & v16;
    if (v10 == v12)
    {
      size_t v21 = ((v71 + 7 + ((v14 + v15 + ((v13 + 2) & ~v13)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))((v17 + v19) & v16, v10, v73))
      {
LABEL_12:
        unint64_t v22 = (v65 + v19) & v16;
        int v23 = (void *)((v69 + v22) & 0xFFFFFFFFFFFFFFF8);
LABEL_16:
        unint64_t v55 = v23;
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v25 = (unint64_t)&a1[v13 + 2] & v68;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v63 + 32))(v25, v19, v61);
        uint64_t v26 = v25 + v59 + v15;
        a1 = v64;
        uint64_t v27 = v26 & v16;
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v72 + 32))(v26 & v16, v22, v73);
        *(void *)((v69 + v27) & 0xFFFFFFFFFFFFFFF8) = *v55;
        goto LABEL_18;
      }
    }
    else
    {
      int v23 = (void *)((v69 + v22) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v24 = *v23;
      if (*v23 >= 0xFFFFFFFFuLL) {
        LODWORD(v24) = -1;
      }
      size_t v21 = ((v71 + 7 + ((v14 + v15 + ((v13 + 2) & ~v13)) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v24 + 1) < 2) {
        goto LABEL_16;
      }
    }
  }
  memcpy(a1, a2, v21);
LABEL_18:
  size_t v28 = v21 + v15;
  unint64_t v29 = (unsigned char *)((unint64_t)&a1[v28] & v16);
  uint64_t v60 = a2;
  unsigned int v30 = (unsigned __int8 *)((unint64_t)&a2[v28] & v16);
  uint64_t v31 = v15 + 3;
  size_t v32 = ((v15 + 3) & v16) + v71;
  if (v10 > 0xFE)
  {
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v72 + 48))((unint64_t)&v30[v31] & v16, v10, v73))goto LABEL_20; {
  }
    }
  else if (*v30 < 2u)
  {
LABEL_20:
    *unint64_t v29 = *v30;
    v29[1] = v30[1];
    _OWORD v29[2] = v30[2];
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v72 + 32))((unint64_t)&v29[v31] & v16, (unint64_t)&v30[v31] & v16, v73);
    goto LABEL_23;
  }
  memcpy(v29, v30, v32);
LABEL_23:
  uint64_t v33 = v13 | v15 | 7;
  size_t v34 = v32 + v33;
  unint64_t v35 = (unint64_t)&v29[v32 + v33] & ~v33;
  unint64_t v36 = (unint64_t)&v30[v34] & ~v33;
  unint64_t v37 = (v62 + v36) & v68;
  size_t v56 = v34;
  if (v8 == v57)
  {
    uint64_t v38 = v63;
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v63 + 48))((v62 + v36) & v68, v8, v61)) {
      goto LABEL_28;
    }
  }
  else
  {
    unint64_t v39 = (v65 + v37) & v16;
    uint64_t v38 = v63;
    if (v10 == v57)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v72 + 48))((v65 + v37) & v16, v10, v73))
      {
LABEL_28:
        unint64_t v39 = (v65 + v37) & v16;
        BOOL v40 = (void *)((v69 + v39) & 0xFFFFFFFFFFFFFFF8);
LABEL_32:
        __na = v40;
        *(unsigned char *)unint64_t v35 = *(unsigned char *)v36;
        *(unsigned char *)(v35 | 1) = *(unsigned char *)(v36 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 32))((v62 + v35) & v68, v37, v61);
        unint64_t v42 = (v65 + ((v62 + v35) & v68)) & v16;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v72 + 32))(v42, v39, v73);
        *(void *)((v69 + v42) & 0xFFFFFFFFFFFFFFF8) = *__na;
        goto LABEL_34;
      }
    }
    else
    {
      BOOL v40 = (void *)((v69 + v39) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v41 = *v40;
      if (*v40 >= 0xFFFFFFFFuLL) {
        LODWORD(v41) = -1;
      }
      if ((v41 + 1) < 2) {
        goto LABEL_32;
      }
    }
  }
  memcpy((void *)v35, (const void *)v36, __n);
LABEL_34:
  uint64_t v70 = ~v33;
  int v43 = (unsigned char *)((v28 + v35) & v16);
  int v44 = (unsigned char *)((v28 + v36) & v16);
  uint64_t v45 = v15 + 2;
  size_t v46 = (v45 & v16) + v71;
  if (v10 > 0xFE)
  {
    unint64_t v49 = (unint64_t)&v44[v45] & v16;
    int v50 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v72 + 48))(v49, v10, v73);
    uint64_t v48 = v64;
    if (!v50)
    {
      LOBYTE(v47) = *v44;
      goto LABEL_40;
    }
  }
  else
  {
    unsigned int v47 = *v44;
    uint64_t v48 = v64;
    if (v47 <= 1)
    {
      unint64_t v49 = (unint64_t)&v44[v45] & v16;
LABEL_40:
      *int v43 = v47;
      *(unsigned char *)(((v28 + v35) & v16) + 1) = *(unsigned char *)(((v28 + v36) & v16) + 1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v72 + 32))((unint64_t)&v43[v45] & v16, v49, v73);
      goto LABEL_41;
    }
  }
  memcpy((void *)((v28 + v35) & v16), (const void *)((v28 + v36) & v16), v46);
LABEL_41:
  unint64_t v51 = &v43[v46];
  *unint64_t v51 = *(_WORD *)&v44[v46];
  v51[1] = *(_WORD *)&v44[v46 + 2];
  v51[2] = *(_WORD *)&v44[v46 + 4];
  size_t v52 = ((v28 + ((v56 + (v28 & v16)) & v70)) & v16) + v46;
  *(void *)((unint64_t)&v48[v52 + 13] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v60[v52 + 13] & 0xFFFFFFFFFFFFFFF8);
  uint64_t v53 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v53 + 32))((unint64_t)&v48[((v52 + 13) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v53 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v53 + 80), (unint64_t)&v60[((v52 + 13) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v53 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
  return v48;
}

unsigned char *sub_228BA13BC(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v4 = sub_228BAC9C8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned int *)(v5 + 84);
  uint64_t v111 = sub_228BAC588();
  uint64_t v8 = *(void *)(v111 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v7 <= v9) {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v10 = v7;
  }
  if (v10 <= 0x7FFFFFFE) {
    int v11 = 2147483646;
  }
  else {
    int v11 = v10;
  }
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = *(void *)(v5 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = ~v14;
  uint64_t v16 = v13 + v14;
  uint64_t v109 = v14;
  uint64_t v110 = *(void *)(v111 - 8);
  unint64_t __dst = a1;
  uint64_t v104 = *(void *)(v110 + 64);
  uint64_t v105 = v104 + 7;
  unint64_t __n = ((v104 + 7 + ((v13 + v14 + ((v12 + 2) & ~v12)) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v17 = (unint64_t)&a1[v12 + 2];
  unint64_t v18 = v17 & ~v12;
  unsigned int v108 = *(_DWORD *)(v8 + 84);
  uint64_t v106 = v13 + v14;
  uint64_t v100 = v6;
  uint64_t v101 = v4;
  uint64_t v95 = ~v14;
  uint64_t v96 = ~v12;
  unsigned int v93 = v7;
  uint64_t v89 = v12 + 2;
  int v87 = v11;
  if (v7 == v11)
  {
    unint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    int v20 = v19(v17 & ~v12, v7, v4);
    uint64_t v21 = v4;
    uint64_t v22 = (unint64_t)&a2[v12 + 2] & ~v12;
    int v23 = v19(v22, v7, v21);
    uint64_t v24 = a2;
    uint64_t v15 = v95;
    if (v20) {
      goto LABEL_9;
    }
    goto LABEL_13;
  }
  uint64_t v26 = (v16 + v18) & v15;
  if (v9 != v11)
  {
    unint64_t v29 = *(void *)((v105 + v26) & 0xFFFFFFFFFFFFFFF8);
    if (v29 >= 0xFFFFFFFF) {
      LODWORD(v29) = -1;
    }
    unsigned int v30 = v29 + 1;
    uint64_t v24 = a2;
    uint64_t v22 = (unint64_t)&a2[v12 + 2] & v96;
    unint64_t v31 = *(void *)((v105 + ((v22 + v13 + v14) & v15)) & 0xFFFFFFFFFFFFFFF8);
    if (v31 >= 0xFFFFFFFF) {
      LODWORD(v31) = -1;
    }
    unsigned int v32 = v31 + 1;
    uint64_t v25 = __dst;
    if (v30 >= 2)
    {
      if (v32 < 2) {
        goto LABEL_23;
      }
      goto LABEL_25;
    }
    uint64_t v28 = v100;
    if (v32 >= 2)
    {
LABEL_14:
      (*(void (**)(unint64_t, uint64_t))(v28 + 8))(v18, v101);
      (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v26, v111);
      swift_release();
      goto LABEL_25;
    }
LABEL_21:
    *uint64_t v25 = *v24;
    v25[1] = v24[1];
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 40))(v18, v22, v101);
    uint64_t v33 = (v16 + v22) & v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 40))(v26, v33, v111);
    *(void *)((v105 + v26) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v105 + v33) & 0xFFFFFFFFFFFFFFF8);
    swift_release();
LABEL_24:
    unint64_t v34 = __n;
    goto LABEL_26;
  }
  uint64_t v24 = a2;
  uint64_t v27 = *(uint64_t (**)(uint64_t, void, uint64_t))(v8 + 48);
  int v97 = v27(v26, v9, v111);
  uint64_t v22 = (unint64_t)&a2[v12 + 2] & v96;
  int v23 = v27((v22 + v13 + v109) & v15, v9, v111);
  uint64_t v9 = v9;
  if (!v97)
  {
LABEL_13:
    uint64_t v16 = v106;
    uint64_t v26 = (v106 + v18) & v15;
    uint64_t v28 = v100;
    uint64_t v25 = __dst;
    if (v23) {
      goto LABEL_14;
    }
    goto LABEL_21;
  }
LABEL_9:
  uint64_t v25 = __dst;
  if (!v23)
  {
    uint64_t v26 = (v106 + v18) & v15;
LABEL_23:
    *uint64_t v25 = *v24;
    v25[1] = v24[1];
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v100 + 32))(v18, v22, v101);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 32))(v26, (v106 + v22) & v15, v111);
    *(void *)((v105 + v26) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v105 + ((v106 + v22) & v15)) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_24;
  }
LABEL_25:
  unint64_t v34 = __n;
  memcpy(v25, v24, __n);
LABEL_26:
  unint64_t v35 = (unsigned char *)((unint64_t)&v25[v34 + v109] & v15);
  unint64_t v36 = (unsigned char *)((unint64_t)&v24[v34 + v109] & v15);
  uint64_t v37 = v109 + 3;
  size_t v38 = ((v109 + 3) & v15) + v104;
  uint64_t v98 = v34 + v109;
  if (v9 <= 0xFE)
  {
    unsigned int v39 = *v36;
    if (*v35 < 2u)
    {
      BOOL v40 = v39 >= 2;
      int v41 = (v39 + 2147483646) & 0x7FFFFFFF;
      if (!v40) {
        int v41 = -1;
      }
      int v42 = v41 + 1;
      goto LABEL_34;
    }
    if (v39 < 2 || ((v39 + 2147483646) & 0x7FFFFFFF) == 0xFFFFFFFF) {
      goto LABEL_40;
    }
LABEL_33:
    memcpy(v35, v36, v38);
    uint64_t v45 = v106;
    uint64_t v46 = v95;
    uint64_t v47 = v96;
    goto LABEL_42;
  }
  uint64_t v91 = v12;
  int v43 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v110 + 48);
  int v44 = v43((unint64_t)&v35[v37] & v15, v9, v111);
  int v42 = v43((unint64_t)&v36[v37] & v15, v9, v111);
  uint64_t v12 = v91;
  if (!v44)
  {
LABEL_34:
    if (v42)
    {
      uint64_t v46 = v95;
      (*(void (**)(unint64_t, uint64_t))(v110 + 8))((unint64_t)&v35[v37] & v95, v111);
      memcpy(v35, v36, v38);
    }
    else
    {
      *unint64_t v35 = *v36;
      v35[1] = v36[1];
      v35[2] = v36[2];
      uint64_t v46 = v95;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v110 + 40))((unint64_t)&v35[v37] & v95, (unint64_t)&v36[v37] & v95, v111);
    }
    goto LABEL_41;
  }
  if (v42) {
    goto LABEL_33;
  }
LABEL_40:
  *unint64_t v35 = *v36;
  v35[1] = v36[1];
  v35[2] = v36[2];
  uint64_t v46 = v95;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v110 + 32))((unint64_t)&v35[v37] & v95, (unint64_t)&v36[v37] & v95, v111);
LABEL_41:
  uint64_t v45 = v106;
  uint64_t v47 = v96;
LABEL_42:
  uint64_t v48 = v12 | v109 | 7;
  unint64_t v49 = (unint64_t)&v35[v38 + v48] & ~v48;
  unint64_t v50 = (unint64_t)&v36[v38 + v48] & ~v48;
  unint64_t v51 = (v89 + v49) & v47;
  size_t v92 = v38 + v48;
  if (v93 == v87)
  {
    uint64_t v86 = v48;
    int v88 = (unsigned char *)((unint64_t)&v35[v38 + v48] & ~v48);
    size_t v52 = *(uint64_t (**)(unint64_t, void, uint64_t))(v100 + 48);
    unint64_t v53 = (v89 + v49) & v47;
    int v54 = v52(v51, v93, v101);
    unint64_t v55 = (v89 + v50) & v47;
    int v56 = v52(v55, v93, v101);
    if (v54) {
      goto LABEL_44;
    }
LABEL_48:
    unint64_t v51 = v53;
    unint64_t v57 = (v106 + v53) & v46;
    if (v56)
    {
      uint64_t v48 = v86;
      unint64_t v49 = (unint64_t)v88;
      goto LABEL_56;
    }
    unint64_t v58 = (v106 + v55) & v46;
    uint64_t v59 = (void *)((v105 + v58) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v48 = v86;
    unint64_t v49 = (unint64_t)v88;
    goto LABEL_61;
  }
  unint64_t v57 = (v45 + v51) & v46;
  uint64_t v60 = v45;
  if (v108 == v87)
  {
    uint64_t v86 = v48;
    int v88 = (unsigned char *)v49;
    unint64_t v53 = (v89 + v49) & v47;
    uint64_t v61 = *(uint64_t (**)(unint64_t, void, uint64_t))(v110 + 48);
    int v94 = v61((v45 + v51) & v46, v108, v111);
    unint64_t v55 = (v89 + v50) & v47;
    int v56 = v61((v60 + v55) & v46, v108, v111);
    if (v94)
    {
LABEL_44:
      uint64_t v48 = v86;
      unint64_t v49 = (unint64_t)v88;
      if (!v56)
      {
        unint64_t v51 = v53;
        unint64_t v57 = (v106 + v53) & v46;
        unint64_t v58 = (v106 + v55) & v46;
        uint64_t v59 = (void *)((v105 + v58) & 0xFFFFFFFFFFFFFFF8);
LABEL_58:
        *(unsigned char *)unint64_t v49 = *(unsigned char *)v50;
        *(unsigned char *)(v49 | 1) = *(unsigned char *)(v50 | 1);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v100 + 32))(v51, v55, v101);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v110 + 32))(v57, v58, v111);
        *(void *)((v105 + v57) & 0xFFFFFFFFFFFFFFF8) = *v59;
        goto LABEL_62;
      }
      goto LABEL_59;
    }
    goto LABEL_48;
  }
  unint64_t v62 = *(void *)((v105 + v57) & 0xFFFFFFFFFFFFFFF8);
  if (v62 >= 0xFFFFFFFF) {
    LODWORD(v62) = -1;
  }
  unsigned int v63 = v62 + 1;
  unint64_t v55 = (v89 + v50) & v47;
  unint64_t v58 = (v45 + v55) & v46;
  uint64_t v59 = (void *)((v105 + v58) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v64 = *v59;
  if (*v59 >= 0xFFFFFFFFuLL) {
    LODWORD(v64) = -1;
  }
  unsigned int v65 = v64 + 1;
  if (v63 >= 2)
  {
    if (v65 < 2) {
      goto LABEL_58;
    }
    goto LABEL_59;
  }
  if (v65 >= 2)
  {
LABEL_56:
    (*(void (**)(unint64_t, uint64_t))(v100 + 8))(v51, v101);
    (*(void (**)(unint64_t, uint64_t))(v110 + 8))(v57, v111);
    swift_release();
LABEL_59:
    memcpy((void *)v49, (const void *)v50, __n);
    goto LABEL_62;
  }
LABEL_61:
  *(unsigned char *)unint64_t v49 = *(unsigned char *)v50;
  *(unsigned char *)(v49 | 1) = *(unsigned char *)(v50 | 1);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v100 + 40))(v51, v55, v101);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v110 + 40))(v57, v58, v111);
  *(void *)((v105 + v57) & 0xFFFFFFFFFFFFFFF8) = *v59;
  swift_release();
LABEL_62:
  uint64_t v66 = v98;
  uint64_t v67 = (unsigned __int8 *)((v98 + v49) & v46);
  uint64_t v68 = (unsigned __int8 *)((v98 + v50) & v46);
  uint64_t v69 = v109 + 2;
  size_t v70 = ((v109 + 2) & v46) + v104;
  uint64_t v107 = ~v48;
  if (v108 > 0xFE)
  {
    uint64_t v77 = *(uint64_t (**)(void))(v110 + 48);
    int v78 = v77();
    unint64_t v76 = (unint64_t)&v68[v69] & v46;
    int v79 = ((uint64_t (*)(unint64_t, void, uint64_t))v77)(v76, v108, v111);
    if (!v78)
    {
      uint64_t v72 = __dst;
      uint64_t v73 = a3;
      uint64_t v66 = v98;
      unint64_t v75 = (unint64_t)&v67[v69] & v46;
      if (!v79)
      {
        unsigned __int8 v74 = *v68;
        goto LABEL_74;
      }
      goto LABEL_76;
    }
    uint64_t v72 = __dst;
    uint64_t v73 = a3;
    uint64_t v66 = v98;
    if (!v79)
    {
      LOBYTE(v71) = *v68;
      unint64_t v80 = (unint64_t)&v67[v69] & v46;
LABEL_71:
      *uint64_t v67 = v71;
      v67[1] = v68[1];
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v110 + 32))(v80, v76, v111);
LABEL_78:
      uint64_t v81 = a2;
      goto LABEL_79;
    }
LABEL_77:
    memcpy(v67, v68, v70);
    goto LABEL_78;
  }
  unsigned int v71 = *v68;
  uint64_t v72 = __dst;
  uint64_t v73 = a3;
  if (*v67 >= 2u)
  {
    if (v71 <= 1)
    {
      unint64_t v80 = (unint64_t)&v67[v69] & v46;
      unint64_t v76 = (unint64_t)&v68[v69] & v46;
      goto LABEL_71;
    }
    goto LABEL_77;
  }
  if (v71 > 1)
  {
    unint64_t v75 = (unint64_t)&v67[v69] & v46;
LABEL_76:
    (*(void (**)(unint64_t, uint64_t))(v110 + 8))(v75, v111);
    goto LABEL_77;
  }
  unsigned __int8 v74 = v71 != 0;
  unint64_t v75 = (unint64_t)&v67[v69] & v46;
  unint64_t v76 = (unint64_t)&v68[v69] & v46;
LABEL_74:
  uint64_t v81 = a2;
  *uint64_t v67 = v74;
  v67[1] = v68[1];
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v110 + 40))(v75, v76, v111);
LABEL_79:
  uint64_t v82 = &v67[v70];
  *(_WORD *)uint64_t v82 = *(_WORD *)&v68[v70];
  *((_WORD *)v82 + 1) = *(_WORD *)&v68[v70 + 2];
  *((_WORD *)v82 + 2) = *(_WORD *)&v68[v70 + 4];
  size_t v83 = ((v66 + ((v92 + (v66 & v46)) & v107)) & v46) + v70;
  *(void *)((unint64_t)&v72[v83 + 13] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v81[v83 + 13] & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v84 = *(void *)(*(void *)(v73 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v84 + 40))((unint64_t)&v72[((v83 + 13) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v84 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v84 + 80), (unint64_t)&v81[((v83 + 13) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v84 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v84 + 80));
  return v72;
}

uint64_t sub_228BA1F58(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = sub_228BAC9C8();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  uint64_t v10 = *(void *)(sub_228BAC588() - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  if (v9 <= v12) {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v13 = v9;
  }
  if (v13 <= 0x7FFFFFFE) {
    int v14 = 2147483646;
  }
  else {
    int v14 = v13;
  }
  unsigned int v15 = v14 - 1;
  if (v12 <= 0xFE) {
    int v16 = 254;
  }
  else {
    int v16 = *(_DWORD *)(v10 + 84);
  }
  unsigned int v17 = v16 - 1;
  if (v16 - 1 <= v15) {
    unsigned int v18 = v14 - 1;
  }
  else {
    unsigned int v18 = v16 - 1;
  }
  if (v18 <= 0x7FFFFFFE) {
    unsigned int v19 = 2147483646;
  }
  else {
    unsigned int v19 = v18;
  }
  uint64_t v20 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v21 = *(unsigned int *)(v20 + 84);
  uint64_t v22 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v23 = *(void *)(v7 + 64);
  uint64_t v24 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v25 = *(void *)(v10 + 64);
  uint64_t v26 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v27 = *(void *)(v20 + 64);
  if (v21 <= v19) {
    unsigned int v28 = v19;
  }
  else {
    unsigned int v28 = *(_DWORD *)(v20 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v54 = v6;
  uint64_t v29 = v25 + 7;
  unint64_t v30 = ((v25 + 7 + ((v23 + v24 + ((v22 + 2) & ~v22)) & ~v24)) & 0xFFFFFFFFFFFFFFF8) + v24 + 8;
  uint64_t v31 = ((v24 + 2) & ~v24)
      + v25
      + ((v30 + (((v22 | v24 | 7) + v25 + ((v24 + 3) & ~v24) + (v30 & ~v24)) & ~(v22 | v24 | 7))) & ~v24);
  unint64_t v32 = ((v31 + 13) & 0xFFFFFFFFFFFFFFF8) + v26 + 8;
  int v33 = a2 - v28;
  if (a2 > v28)
  {
    unint64_t v34 = v32 & ~v26;
    uint64_t v35 = v34 + v27;
    char v36 = 8 * (v34 + v27);
    if (v35 > 3) {
      goto LABEL_22;
    }
    unsigned int v38 = ((v33 + ~(-1 << v36)) >> v36) + 1;
    if (HIWORD(v38))
    {
      int v37 = *(_DWORD *)((char *)a1 + v35);
      if (!v37) {
        goto LABEL_39;
      }
      goto LABEL_29;
    }
    if (v38 > 0xFF)
    {
      int v37 = *(unsigned __int16 *)((char *)a1 + v35);
      if (!*(unsigned __int16 *)((char *)a1 + v35)) {
        goto LABEL_39;
      }
      goto LABEL_29;
    }
    if (v38 >= 2)
    {
LABEL_22:
      int v37 = *((unsigned __int8 *)a1 + v35);
      if (!*((unsigned char *)a1 + v35)) {
        goto LABEL_39;
      }
LABEL_29:
      int v39 = (v37 - 1) << v36;
      if (v35 > 3) {
        int v39 = 0;
      }
      if (v35)
      {
        if (v35 <= 3) {
          int v40 = v35;
        }
        else {
          int v40 = 4;
        }
        switch(v40)
        {
          case 2:
            int v41 = *a1;
            break;
          case 3:
            int v41 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v41 = *(_DWORD *)a1;
            break;
          default:
            int v41 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v41 = 0;
      }
      return v28 + (v41 | v39) + 1;
    }
  }
LABEL_39:
  if (v19 < v21)
  {
    int v42 = *(uint64_t (**)(unint64_t, uint64_t))(v20 + 48);
    return v42(((unint64_t)a1 + v32) & ~v26, v21);
  }
  if (v18 < 0x7FFFFFFE)
  {
    unint64_t v48 = *(void *)(((unint64_t)a1 + v31 + 13) & 0xFFFFFFFFFFFFFFF8);
    if (v48 >= 0xFFFFFFFF) {
      LODWORD(v48) = -1;
    }
    if ((v48 + 1) >= 2) {
      return v48;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v44 = ~v24;
    if (v15 < v17)
    {
      uint64_t v45 = (unsigned __int8 *)(((unint64_t)a1 + v30) & v44);
      if (v12 > 0xFE)
      {
        int v47 = (*(uint64_t (**)(unint64_t))(v11 + 48))((unint64_t)&v45[v24 + 3] & v44);
LABEL_60:
        BOOL v51 = v47 != 0;
        uint64_t result = (v47 - 1);
        if (result != 0 && v51) {
          return result;
        }
        return 0;
      }
      unsigned int v46 = *v45;
      if (v46 >= 2)
      {
        int v47 = ((v46 + 2147483646) & 0x7FFFFFFF) + 1;
        goto LABEL_60;
      }
      return 0;
    }
    uint64_t v49 = ((unint64_t)a1 + v22 + 2) & ~v22;
    if (v9 == v14)
    {
      unsigned int v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v49, v9, v54);
    }
    else
    {
      uint64_t v52 = (v49 + v23 + v24) & v44;
      if (v12 == v14)
      {
        unsigned int v50 = (*(uint64_t (**)(uint64_t))(v11 + 48))(v52);
      }
      else
      {
        unint64_t v53 = *(void *)((v29 + v52) & 0xFFFFFFFFFFFFFFF8);
        if (v53 >= 0xFFFFFFFF) {
          LODWORD(v53) = -1;
        }
        if ((v53 + 1) >= 2) {
          unsigned int v50 = v53;
        }
        else {
          unsigned int v50 = 0;
        }
      }
    }
    if (v50 >= 2) {
      return v50 - 1;
    }
    else {
      return 0;
    }
  }
}

void sub_228BA23E4(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(sub_228BAC9C8() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(sub_228BAC588() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v8 <= v11) {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v12 = v8;
  }
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v13 = 2147483646;
  }
  else {
    unsigned int v13 = v12;
  }
  unsigned int v14 = v13 - 1;
  if (v11 <= 0xFE) {
    unsigned int v15 = 254;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v9 + 84);
  }
  unsigned int v16 = v15 - 1;
  if (v15 - 1 <= v14) {
    unsigned int v17 = v13 - 1;
  }
  else {
    unsigned int v17 = v15 - 1;
  }
  uint64_t v18 = *(void *)(*(void *)(a4 + 16) - 8);
  if (v17 <= 0x7FFFFFFE) {
    unsigned int v19 = 2147483646;
  }
  else {
    unsigned int v19 = v17;
  }
  uint64_t v20 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v21 = *(unsigned int *)(v18 + 84);
  uint64_t v22 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v23 = *(void *)(v7 + 64);
  uint64_t v24 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v25 = *(void *)(v9 + 64);
  uint64_t v26 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v27 = *(void *)(v18 + 64);
  if (v21 <= v19) {
    unsigned int v28 = v19;
  }
  else {
    unsigned int v28 = *(_DWORD *)(v18 + 84);
  }
  uint64_t v29 = v25 + 7;
  unint64_t v30 = ((v25 + 7 + ((v23 + v24 + ((v22 + 2) & ~v22)) & ~v24)) & 0xFFFFFFFFFFFFFFF8) + 8;
  size_t v31 = ((v24 + 3) & ~v24) + v25;
  uint64_t v32 = ((v24 + 2) & ~v24)
      + v25
      + ((v30 + v24 + ((v31 + (v22 | v24 | 7) + ((v30 + v24) & ~v24)) & ~(v22 | v24 | 7))) & ~v24);
  unint64_t v33 = ((v32 + 13) & 0xFFFFFFFFFFFFFFF8) + v26 + 8;
  size_t v34 = (v33 & ~v26) + v27;
  if (a3 <= v28)
  {
    int v35 = 0;
  }
  else if (v34 <= 3)
  {
    unsigned int v40 = ((a3 - v28 + ~(-1 << (8 * v34))) >> (8 * v34)) + 1;
    if (HIWORD(v40))
    {
      int v35 = 4;
    }
    else if (v40 >= 0x100)
    {
      int v35 = 2;
    }
    else
    {
      int v35 = v40 > 1;
    }
  }
  else
  {
    int v35 = 1;
  }
  char v36 = a1;
  if (v28 < a2)
  {
    unsigned int v37 = ~v28 + a2;
    if (v34 < 4)
    {
      int v38 = (v37 >> (8 * v34)) + 1;
      if (v34)
      {
        int v41 = v37 & ~(-1 << (8 * v34));
        bzero(v36, v34);
        if (v34 == 3)
        {
          *(_WORD *)char v36 = v41;
          *((unsigned char *)v36 + 2) = BYTE2(v41);
        }
        else if (v34 == 2)
        {
          *(_WORD *)char v36 = v41;
        }
        else
        {
          *(unsigned char *)char v36 = v41;
        }
      }
    }
    else
    {
      bzero(v36, v34);
      *char v36 = v37;
      int v38 = 1;
    }
    switch(v35)
    {
      case 1:
        *((unsigned char *)v36 + v34) = v38;
        return;
      case 2:
        *(_WORD *)((char *)v36 + v34) = v38;
        return;
      case 3:
        goto LABEL_118;
      case 4:
        *(unsigned int *)((char *)v36 + v34) = v38;
        return;
      default:
        return;
    }
  }
  uint64_t v64 = ~v24;
  uint64_t v39 = ~v26;
  switch(v35)
  {
    case 1:
      *((unsigned char *)a1 + v34) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 2:
      *(_WORD *)((char *)a1 + v34) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 3:
LABEL_118:
      __break(1u);
      JUMPOUT(0x228BA2B1CLL);
    case 4:
      *(unsigned int *)((char *)a1 + v34) = 0;
      goto LABEL_38;
    default:
LABEL_38:
      if (!a2) {
        return;
      }
LABEL_39:
      if (v19 < v21)
      {
        int v42 = *(void (**)(unint64_t, void, uint64_t))(v20 + 56);
        v42(((unint64_t)a1 + v33) & v39, a2, v21);
        return;
      }
      if (v19 < a2)
      {
        int v43 = (v32 + 13) & 0xFFFFFFF8;
        size_t v44 = (v43 + 8);
        if (v43 == -8) {
          return;
        }
        unsigned int v45 = ~v19 + a2;
        unsigned int v46 = a1;
        goto LABEL_46;
      }
      if (v17 <= 0x7FFFFFFD)
      {
        BOOL v51 = (void *)(((unint64_t)a1 + v32 + 13) & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *BOOL v51 = 0;
          *(_DWORD *)BOOL v51 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *BOOL v51 = a2;
        }
        return;
      }
      if (v17 < a2)
      {
        size_t v47 = (v32 + 6);
        if (v47 <= 3) {
          int v48 = ~(-1 << (8 * (v32 + 6)));
        }
        else {
          int v48 = -1;
        }
        if (v32 != -6)
        {
          int v49 = v48 & (~v17 + a2);
          if (v47 <= 3) {
            int v50 = v32 + 6;
          }
          else {
            int v50 = 4;
          }
          bzero(v36, v47);
          switch(v50)
          {
            case 2:
              *(_WORD *)char v36 = v49;
              break;
            case 3:
              *(_WORD *)char v36 = v49;
              *((unsigned char *)v36 + 2) = BYTE2(v49);
              break;
            case 4:
              *char v36 = v49;
              break;
            default:
              *(unsigned char *)char v36 = v49;
              break;
          }
        }
        return;
      }
      if (v14 < v16)
      {
        uint64_t v52 = (unsigned char *)(((unint64_t)a1 + v30 + v24) & v64);
        if (v16 < a2)
        {
          if (v31 <= 3) {
            int v53 = ~(-1 << (8 * v31));
          }
          else {
            int v53 = -1;
          }
          if (v31)
          {
            int v54 = v53 & (a2 - v15);
            if (v31 <= 3) {
              int v55 = v31;
            }
            else {
              int v55 = 4;
            }
            bzero(v52, v31);
            switch(v55)
            {
              case 2:
                goto LABEL_106;
              case 3:
                goto LABEL_107;
              case 4:
                goto LABEL_108;
              default:
                goto LABEL_94;
            }
          }
          return;
        }
        if (a2 + 1 > v15)
        {
          if (v31 <= 3) {
            int v57 = ~(-1 << (8 * v31));
          }
          else {
            int v57 = -1;
          }
          if (v31)
          {
            int v54 = v57 & (a2 - v15);
            if (v31 <= 3) {
              int v58 = v31;
            }
            else {
              int v58 = 4;
            }
            bzero(v52, v31);
            switch(v58)
            {
              case 2:
LABEL_106:
                *(_WORD *)uint64_t v52 = v54;
                break;
              case 3:
LABEL_107:
                *(_WORD *)uint64_t v52 = v54;
                v52[2] = BYTE2(v54);
                break;
              case 4:
LABEL_108:
                *(_DWORD *)uint64_t v52 = v54;
                break;
              default:
LABEL_94:
                *uint64_t v52 = v54;
                break;
            }
          }
          return;
        }
        if (a2 == -1) {
          return;
        }
        if (v11 <= 0xFE)
        {
          *uint64_t v52 = a2 + 2;
          return;
        }
        uint64_t v61 = (unint64_t)&v52[v24 + 3] & v64;
        unint64_t v62 = *(void (**)(uint64_t, uint64_t))(v10 + 56);
        uint64_t v56 = a2 + 1;
        goto LABEL_112;
      }
      if (v14 < a2 || (uint64_t v56 = a2 + 1, v56 > v13))
      {
        if (!v30) {
          return;
        }
        unsigned int v45 = a2 - v13;
        unsigned int v46 = a1;
        size_t v44 = v30;
LABEL_46:
        bzero(v46, v44);
        *a1 = v45;
        return;
      }
      if (a2 == -1) {
        return;
      }
      uint64_t v59 = ((unint64_t)a1 + v22 + 2) & ~v22;
      if (v8 != v13)
      {
        uint64_t v61 = (v59 + v23 + v24) & v64;
        if (v11 != v13)
        {
          unsigned int v63 = (void *)((v29 + v61) & 0xFFFFFFFFFFFFFFF8);
          if (v56 > 0x7FFFFFFE)
          {
            *unsigned int v63 = 0;
            *(_DWORD *)unsigned int v63 = a2 - 2147483646;
          }
          else
          {
            *unsigned int v63 = v56;
          }
          return;
        }
        unint64_t v62 = *(void (**)(uint64_t, uint64_t))(v10 + 56);
LABEL_112:
        v62(v61, v56);
        return;
      }
      uint64_t v60 = *(void (**)(uint64_t))(v7 + 56);
      v60(v59);
      return;
  }
}

uint64_t type metadata accessor for MapControlsConfig()
{
  uint64_t result = qword_268294CA8;
  if (!qword_268294CA8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_228BA2BC0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = (int *)type metadata accessor for MapPitchToggleConfig(0);
    uint64_t v8 = *((void *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      uint64_t v11 = v7[6];
      unsigned int v12 = (char *)a1 + v11;
      unsigned int v13 = (char *)a2 + v11;
      uint64_t v14 = sub_228BAC9C8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      uint64_t v15 = v7[7];
      unsigned int v16 = (char *)a1 + v15;
      unsigned int v17 = (char *)a2 + v15;
      uint64_t v18 = sub_228BAC588();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      *(uint64_t *)((char *)a1 + v7[8]) = *(uint64_t *)((char *)a2 + v7[8]);
      unsigned int v19 = *(void (**)(uint64_t *, void, uint64_t, int *))(v8 + 56);
      swift_retain();
      v19(a1, 0, 1, v7);
    }
    uint64_t v20 = a3[5];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for MapScaleViewConfig(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA8);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      *(_WORD *)uint64_t v21 = *(_WORD *)v22;
      v21[2] = v22[2];
      uint64_t v26 = *(int *)(v23 + 28);
      uint64_t v27 = &v21[v26];
      unsigned int v28 = &v22[v26];
      uint64_t v29 = sub_228BAC588();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v30 = a3[6];
    size_t v31 = (_WORD *)((char *)a1 + v30);
    uint64_t v32 = (_WORD *)((char *)a2 + v30);
    unint64_t v33 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
    uint64_t v34 = *((void *)v33 - 1);
    if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F90);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      *size_t v31 = *v32;
      uint64_t v36 = v33[6];
      unsigned int v37 = (char *)v31 + v36;
      int v38 = (char *)v32 + v36;
      uint64_t v39 = sub_228BAC9C8();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 16))(v37, v38, v39);
      uint64_t v40 = v33[7];
      int v41 = (char *)v31 + v40;
      int v42 = (char *)v32 + v40;
      uint64_t v43 = sub_228BAC588();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(v41, v42, v43);
      *(void *)((char *)v31 + v33[8]) = *(void *)((char *)v32 + v33[8]);
      size_t v44 = *(void (**)(_WORD *, void, uint64_t, int *))(v34 + 56);
      swift_retain();
      v44(v31, 0, 1, v33);
    }
    uint64_t v45 = a3[7];
    unsigned int v46 = (_WORD *)((char *)a1 + v45);
    size_t v47 = (_WORD *)((char *)a2 + v45);
    uint64_t v48 = type metadata accessor for MapCompassConfig(0);
    uint64_t v49 = *(void *)(v48 - 8);
    if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
    {
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F98);
      memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      *unsigned int v46 = *v47;
      uint64_t v51 = *(int *)(v48 + 24);
      uint64_t v52 = (char *)v46 + v51;
      int v53 = (char *)v47 + v51;
      uint64_t v54 = sub_228BAC588();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
      (*(void (**)(_WORD *, void, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
    }
    uint64_t v55 = a3[9];
    *(_WORD *)((char *)a1 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
    *(_WORD *)((char *)a1 + v55) = *(_WORD *)((char *)a2 + v55);
    *(_WORD *)((char *)a1 + a3[10]) = *(_WORD *)((char *)a2 + a3[10]);
  }
  return a1;
}

uint64_t sub_228BA3198(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for MapPitchToggleConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    uint64_t v5 = a1 + *(int *)(v4 + 24);
    uint64_t v6 = sub_228BAC9C8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
    uint64_t v7 = a1 + *(int *)(v4 + 28);
    uint64_t v8 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    swift_release();
  }
  uint64_t v9 = a1 + a2[5];
  uint64_t v10 = type metadata accessor for MapScaleViewConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = v9 + *(int *)(v10 + 28);
    uint64_t v12 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  }
  uint64_t v13 = a1 + a2[6];
  uint64_t v14 = type metadata accessor for MapUserLocationButtonConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 1, v14))
  {
    uint64_t v15 = v13 + *(int *)(v14 + 24);
    uint64_t v16 = sub_228BAC9C8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
    uint64_t v17 = v13 + *(int *)(v14 + 28);
    uint64_t v18 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
    swift_release();
  }
  uint64_t v19 = a1 + a2[7];
  uint64_t v20 = type metadata accessor for MapCompassConfig(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20);
  if (!result)
  {
    uint64_t v22 = v19 + *(int *)(v20 + 24);
    uint64_t v23 = sub_228BAC588();
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8);
    return v24(v22, v23);
  }
  return result;
}

_WORD *sub_228BA34AC(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for MapPitchToggleConfig(0);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v9 = v6[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_228BAC9C8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = v6[7];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_228BAC588();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
    uint64_t v17 = *(void (**)(_WORD *, void, uint64_t, int *))(v7 + 56);
    swift_retain();
    v17(a1, 0, 1, v6);
  }
  uint64_t v18 = a3[5];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for MapScaleViewConfig(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA8);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    *(_WORD *)uint64_t v19 = *(_WORD *)v20;
    void v19[2] = v20[2];
    uint64_t v24 = *(int *)(v21 + 28);
    uint64_t v25 = &v19[v24];
    uint64_t v26 = &v20[v24];
    uint64_t v27 = sub_228BAC588();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v28 = a3[6];
  uint64_t v29 = (_WORD *)((char *)a1 + v28);
  uint64_t v30 = (_WORD *)((char *)a2 + v28);
  size_t v31 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v32 = *((void *)v31 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v32 + 48))(v30, 1, v31))
  {
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F90);
    memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    *uint64_t v29 = *v30;
    uint64_t v34 = v31[6];
    uint64_t v35 = (char *)v29 + v34;
    uint64_t v36 = (char *)v30 + v34;
    uint64_t v37 = sub_228BAC9C8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v36, v37);
    uint64_t v38 = v31[7];
    uint64_t v39 = (char *)v29 + v38;
    uint64_t v40 = (char *)v30 + v38;
    uint64_t v41 = sub_228BAC588();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v39, v40, v41);
    *(void *)((char *)v29 + v31[8]) = *(void *)((char *)v30 + v31[8]);
    int v42 = *(void (**)(_WORD *, void, uint64_t, int *))(v32 + 56);
    swift_retain();
    v42(v29, 0, 1, v31);
  }
  uint64_t v43 = a3[7];
  size_t v44 = (_WORD *)((char *)a1 + v43);
  uint64_t v45 = (_WORD *)((char *)a2 + v43);
  uint64_t v46 = type metadata accessor for MapCompassConfig(0);
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F98);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    *size_t v44 = *v45;
    uint64_t v49 = *(int *)(v46 + 24);
    uint64_t v50 = (char *)v44 + v49;
    uint64_t v51 = (char *)v45 + v49;
    uint64_t v52 = sub_228BAC588();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v52 - 8) + 16))(v50, v51, v52);
    (*(void (**)(_WORD *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  uint64_t v53 = a3[9];
  *(_WORD *)((char *)a1 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
  *(_WORD *)((char *)a1 + v53) = *(_WORD *)((char *)a2 + v53);
  *(_WORD *)((char *)a1 + a3[10]) = *(_WORD *)((char *)a2 + a3[10]);
  return a1;
}

unsigned char *sub_228BA3A34(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for MapPitchToggleConfig(0);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      uint64_t v11 = v6[6];
      uint64_t v12 = &a1[v11];
      uint64_t v13 = &a2[v11];
      uint64_t v14 = sub_228BAC9C8();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      uint64_t v15 = v6[7];
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      uint64_t v18 = sub_228BAC588();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
      *(void *)&a1[v6[8]] = *(void *)&a2[v6[8]];
      uint64_t v19 = *(void (**)(unsigned char *, void, uint64_t, int *))(v7 + 56);
      swift_retain();
      v19(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_228BA71BC((uint64_t)a1, type metadata accessor for MapPitchToggleConfig);
LABEL_6:
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA0);
    memcpy(a1, a2, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v66 = v6[6];
  uint64_t v67 = &a1[v66];
  uint64_t v68 = &a2[v66];
  uint64_t v69 = sub_228BAC9C8();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v69 - 8) + 24))(v67, v68, v69);
  uint64_t v70 = v6[7];
  unsigned int v71 = &a1[v70];
  uint64_t v72 = &a2[v70];
  uint64_t v73 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v73 - 8) + 24))(v71, v72, v73);
  *(void *)&a1[v6[8]] = *(void *)&a2[v6[8]];
  swift_retain();
  swift_release();
LABEL_7:
  uint64_t v21 = a3[5];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for MapScaleViewConfig(0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1, v24);
  int v28 = v26(v23, 1, v24);
  if (v27)
  {
    if (!v28)
    {
      *uint64_t v22 = *v23;
      v22[1] = v23[1];
      v22[2] = v23[2];
      uint64_t v29 = *(int *)(v24 + 28);
      uint64_t v30 = &v22[v29];
      size_t v31 = &v23[v29];
      uint64_t v32 = sub_228BAC588();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    sub_228BA71BC((uint64_t)v22, type metadata accessor for MapScaleViewConfig);
LABEL_12:
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA8);
    memcpy(v22, v23, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  *uint64_t v22 = *v23;
  v22[1] = v23[1];
  v22[2] = v23[2];
  uint64_t v74 = *(int *)(v24 + 28);
  unint64_t v75 = &v22[v74];
  unint64_t v76 = &v23[v74];
  uint64_t v77 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v77 - 8) + 24))(v75, v76, v77);
LABEL_13:
  uint64_t v34 = a3[6];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v38 = *((void *)v37 - 1);
  uint64_t v39 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v38 + 48);
  int v40 = v39(v35, 1, v37);
  int v41 = v39(v36, 1, v37);
  if (v40)
  {
    if (!v41)
    {
      *uint64_t v35 = *v36;
      v35[1] = v36[1];
      uint64_t v42 = v37[6];
      uint64_t v43 = &v35[v42];
      size_t v44 = &v36[v42];
      uint64_t v45 = sub_228BAC9C8();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v45 - 8) + 16))(v43, v44, v45);
      uint64_t v46 = v37[7];
      uint64_t v47 = &v35[v46];
      uint64_t v48 = &v36[v46];
      uint64_t v49 = sub_228BAC588();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v49 - 8) + 16))(v47, v48, v49);
      *(void *)&v35[v37[8]] = *(void *)&v36[v37[8]];
      uint64_t v50 = *(void (**)(unsigned char *, void, uint64_t, int *))(v38 + 56);
      swift_retain();
      v50(v35, 0, 1, v37);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v41)
  {
    sub_228BA71BC((uint64_t)v35, type metadata accessor for MapUserLocationButtonConfig);
LABEL_18:
    uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F90);
    memcpy(v35, v36, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_19;
  }
  *uint64_t v35 = *v36;
  v35[1] = v36[1];
  uint64_t v78 = v37[6];
  int v79 = &v35[v78];
  unint64_t v80 = &v36[v78];
  uint64_t v81 = sub_228BAC9C8();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v81 - 8) + 24))(v79, v80, v81);
  uint64_t v82 = v37[7];
  size_t v83 = &v35[v82];
  uint64_t v84 = &v36[v82];
  uint64_t v85 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v85 - 8) + 24))(v83, v84, v85);
  *(void *)&v35[v37[8]] = *(void *)&v36[v37[8]];
  swift_retain();
  swift_release();
LABEL_19:
  uint64_t v52 = a3[7];
  uint64_t v53 = &a1[v52];
  uint64_t v54 = &a2[v52];
  uint64_t v55 = type metadata accessor for MapCompassConfig(0);
  uint64_t v56 = *(void *)(v55 - 8);
  int v57 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v56 + 48);
  int v58 = v57(v53, 1, v55);
  int v59 = v57(v54, 1, v55);
  if (!v58)
  {
    if (!v59)
    {
      *uint64_t v53 = *v54;
      v53[1] = v54[1];
      uint64_t v86 = *(int *)(v55 + 24);
      int v87 = &v53[v86];
      int v88 = &v54[v86];
      uint64_t v89 = sub_228BAC588();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v89 - 8) + 24))(v87, v88, v89);
      goto LABEL_25;
    }
    sub_228BA71BC((uint64_t)v53, type metadata accessor for MapCompassConfig);
    goto LABEL_24;
  }
  if (v59)
  {
LABEL_24:
    uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F98);
    memcpy(v53, v54, *(void *)(*(void *)(v64 - 8) + 64));
    goto LABEL_25;
  }
  *uint64_t v53 = *v54;
  v53[1] = v54[1];
  uint64_t v60 = *(int *)(v55 + 24);
  uint64_t v61 = &v53[v60];
  unint64_t v62 = &v54[v60];
  uint64_t v63 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v63 - 8) + 16))(v61, v62, v63);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
LABEL_25:
  *(_WORD *)&a1[a3[8]] = *(_WORD *)&a2[a3[8]];
  *(_WORD *)&a1[a3[9]] = *(_WORD *)&a2[a3[9]];
  *(_WORD *)&a1[a3[10]] = *(_WORD *)&a2[a3[10]];
  return a1;
}

_WORD *sub_228BA4320(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for MapPitchToggleConfig(0);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    uint64_t v9 = v6[6];
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_228BAC9C8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    uint64_t v13 = v6[7];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_228BAC588();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
    *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v17 = a3[5];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = type metadata accessor for MapScaleViewConfig(0);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA8);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    *(_WORD *)uint64_t v18 = *(_WORD *)v19;
    v18[2] = v19[2];
    uint64_t v23 = *(int *)(v20 + 28);
    uint64_t v24 = &v18[v23];
    uint64_t v25 = &v19[v23];
    uint64_t v26 = sub_228BAC588();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v27 = a3[6];
  int v28 = (_WORD *)((char *)a1 + v27);
  uint64_t v29 = (_WORD *)((char *)a2 + v27);
  uint64_t v30 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v31 = *((void *)v30 - 1);
  if ((*(unsigned int (**)(_WORD *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F90);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    *int v28 = *v29;
    uint64_t v33 = v30[6];
    uint64_t v34 = (char *)v28 + v33;
    uint64_t v35 = (char *)v29 + v33;
    uint64_t v36 = sub_228BAC9C8();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 32))(v34, v35, v36);
    uint64_t v37 = v30[7];
    uint64_t v38 = (char *)v28 + v37;
    uint64_t v39 = (char *)v29 + v37;
    uint64_t v40 = sub_228BAC588();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v38, v39, v40);
    *(void *)((char *)v28 + v30[8]) = *(void *)((char *)v29 + v30[8]);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
  }
  uint64_t v41 = a3[7];
  uint64_t v42 = (_WORD *)((char *)a1 + v41);
  uint64_t v43 = (_WORD *)((char *)a2 + v41);
  uint64_t v44 = type metadata accessor for MapCompassConfig(0);
  uint64_t v45 = *(void *)(v44 - 8);
  if ((*(unsigned int (**)(_WORD *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44))
  {
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F98);
    memcpy(v42, v43, *(void *)(*(void *)(v46 - 8) + 64));
  }
  else
  {
    *uint64_t v42 = *v43;
    uint64_t v47 = *(int *)(v44 + 24);
    uint64_t v48 = (char *)v42 + v47;
    uint64_t v49 = (char *)v43 + v47;
    uint64_t v50 = sub_228BAC588();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 32))(v48, v49, v50);
    (*(void (**)(_WORD *, void, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
  }
  uint64_t v51 = a3[9];
  *(_WORD *)((char *)a1 + a3[8]) = *(_WORD *)((char *)a2 + a3[8]);
  *(_WORD *)((char *)a1 + v51) = *(_WORD *)((char *)a2 + v51);
  *(_WORD *)((char *)a1 + a3[10]) = *(_WORD *)((char *)a2 + a3[10]);
  return a1;
}

unsigned char *sub_228BA48A0(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for MapPitchToggleConfig(0);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      uint64_t v11 = v6[6];
      uint64_t v12 = &a1[v11];
      uint64_t v13 = &a2[v11];
      uint64_t v14 = sub_228BAC9C8();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      uint64_t v15 = v6[7];
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      uint64_t v18 = sub_228BAC588();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      *(void *)&a1[v6[8]] = *(void *)&a2[v6[8]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_228BA71BC((uint64_t)a1, type metadata accessor for MapPitchToggleConfig);
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA0);
    memcpy(a1, a2, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v65 = v6[6];
  uint64_t v66 = &a1[v65];
  uint64_t v67 = &a2[v65];
  uint64_t v68 = sub_228BAC9C8();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v68 - 8) + 40))(v66, v67, v68);
  uint64_t v69 = v6[7];
  uint64_t v70 = &a1[v69];
  unsigned int v71 = &a2[v69];
  uint64_t v72 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v72 - 8) + 40))(v70, v71, v72);
  *(void *)&a1[v6[8]] = *(void *)&a2[v6[8]];
  swift_release();
LABEL_7:
  uint64_t v20 = a3[5];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  uint64_t v23 = type metadata accessor for MapScaleViewConfig(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (v26)
  {
    if (!v27)
    {
      *(_WORD *)uint64_t v21 = *(_WORD *)v22;
      v21[2] = v22[2];
      uint64_t v28 = *(int *)(v23 + 28);
      uint64_t v29 = &v21[v28];
      uint64_t v30 = &v22[v28];
      uint64_t v31 = sub_228BAC588();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v27)
  {
    sub_228BA71BC((uint64_t)v21, type metadata accessor for MapScaleViewConfig);
LABEL_12:
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA8);
    memcpy(v21, v22, *(void *)(*(void *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  v21[2] = v22[2];
  uint64_t v73 = *(int *)(v23 + 28);
  uint64_t v74 = &v21[v73];
  unint64_t v75 = &v22[v73];
  uint64_t v76 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v76 - 8) + 40))(v74, v75, v76);
LABEL_13:
  uint64_t v33 = a3[6];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = (int *)type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v37 = *((void *)v36 - 1);
  uint64_t v38 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v37 + 48);
  int v39 = v38(v34, 1, v36);
  int v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      *(_WORD *)uint64_t v34 = *(_WORD *)v35;
      uint64_t v41 = v36[6];
      uint64_t v42 = &v34[v41];
      uint64_t v43 = &v35[v41];
      uint64_t v44 = sub_228BAC9C8();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v44 - 8) + 32))(v42, v43, v44);
      uint64_t v45 = v36[7];
      uint64_t v46 = &v34[v45];
      uint64_t v47 = &v35[v45];
      uint64_t v48 = sub_228BAC588();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v48 - 8) + 32))(v46, v47, v48);
      *(void *)&v34[v36[8]] = *(void *)&v35[v36[8]];
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v40)
  {
    sub_228BA71BC((uint64_t)v34, type metadata accessor for MapUserLocationButtonConfig);
LABEL_18:
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F90);
    memcpy(v34, v35, *(void *)(*(void *)(v49 - 8) + 64));
    goto LABEL_19;
  }
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  uint64_t v77 = v36[6];
  uint64_t v78 = &v34[v77];
  int v79 = &v35[v77];
  uint64_t v80 = sub_228BAC9C8();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v80 - 8) + 40))(v78, v79, v80);
  uint64_t v81 = v36[7];
  uint64_t v82 = &v34[v81];
  size_t v83 = &v35[v81];
  uint64_t v84 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v84 - 8) + 40))(v82, v83, v84);
  *(void *)&v34[v36[8]] = *(void *)&v35[v36[8]];
  swift_release();
LABEL_19:
  uint64_t v50 = a3[7];
  uint64_t v51 = &a1[v50];
  uint64_t v52 = &a2[v50];
  uint64_t v53 = type metadata accessor for MapCompassConfig(0);
  uint64_t v54 = *(void *)(v53 - 8);
  uint64_t v55 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v54 + 48);
  int v56 = v55(v51, 1, v53);
  int v57 = v55(v52, 1, v53);
  if (!v56)
  {
    if (!v57)
    {
      *uint64_t v51 = *v52;
      v51[1] = v52[1];
      uint64_t v85 = *(int *)(v53 + 24);
      uint64_t v86 = &v51[v85];
      int v87 = &v52[v85];
      uint64_t v88 = sub_228BAC588();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v88 - 8) + 40))(v86, v87, v88);
      goto LABEL_25;
    }
    sub_228BA71BC((uint64_t)v51, type metadata accessor for MapCompassConfig);
    goto LABEL_24;
  }
  if (v57)
  {
LABEL_24:
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F98);
    memcpy(v51, v52, *(void *)(*(void *)(v62 - 8) + 64));
    goto LABEL_25;
  }
  *(_WORD *)uint64_t v51 = *(_WORD *)v52;
  uint64_t v58 = *(int *)(v53 + 24);
  int v59 = &v51[v58];
  uint64_t v60 = &v52[v58];
  uint64_t v61 = sub_228BAC588();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v61 - 8) + 32))(v59, v60, v61);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
LABEL_25:
  uint64_t v63 = a3[9];
  *(_WORD *)&a1[a3[8]] = *(_WORD *)&a2[a3[8]];
  *(_WORD *)&a1[v63] = *(_WORD *)&a2[v63];
  *(_WORD *)&a1[a3[10]] = *(_WORD *)&a2[a3[10]];
  return a1;
}

uint64_t sub_228BA5150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_228BA5164);
}

uint64_t sub_228BA5164(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_10:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA8);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_9:
    uint64_t v10 = a1 + v13;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_10;
  }
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F90);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_9;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F98);
  if (*(_DWORD *)(*(void *)(v15 - 8) + 84) == a2)
  {
    uint64_t v8 = v15;
    uint64_t v12 = *(void *)(v15 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_9;
  }
  unsigned int v17 = *(unsigned __int8 *)(a1 + a3[8]);
  if (v17 >= 2) {
    int v18 = ((v17 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v18 = -2;
  }
  if (v18 < 0) {
    int v18 = -1;
  }
  return (v18 + 1);
}

uint64_t sub_228BA533C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_228BA5350);
}

uint64_t sub_228BA5350(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA8);
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F90);
      if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v14 = *(void *)(v16 - 8);
        uint64_t v15 = a4[6];
      }
      else
      {
        uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F98);
        if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
        {
          *(unsigned char *)(a1 + a4[8]) = a2 + 2;
          return result;
        }
        uint64_t v10 = result;
        uint64_t v14 = *(void *)(result - 8);
        uint64_t v15 = a4[7];
      }
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_228BA5508()
{
  sub_228BA5714(319, &qword_268294CB8, type metadata accessor for MapPitchToggleConfig, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_228BA5714(319, &qword_268294CC0, type metadata accessor for MapScaleViewConfig, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F)
    {
      sub_228BA5714(319, &qword_268294CC8, type metadata accessor for MapUserLocationButtonConfig, MEMORY[0x263F8D8F0]);
      if (v2 <= 0x3F)
      {
        sub_228BA5714(319, &qword_268294CD0, type metadata accessor for MapCompassConfig, MEMORY[0x263F8D8F0]);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_228BA5714(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

ValueMetadata *type metadata accessor for MapControlsConfigPref()
{
  return &type metadata for MapControlsConfigPref;
}

uint64_t sub_228BA5788()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL sub_228BA57CC(uint64_t a1, uint64_t a2)
{
  uint64_t v131 = a2;
  uint64_t v110 = type metadata accessor for MapCompassConfig(0);
  uint64_t v123 = *(void *)(v110 - 8);
  MEMORY[0x270FA5388](v110);
  uint64_t v106 = (unsigned __int8 *)&v105 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294D38);
  MEMORY[0x270FA5388](v109);
  long long v114 = (char *)&v105 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F98);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v107 = (unsigned __int8 *)&v105 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v112 = (uint64_t)&v105 - v8;
  MEMORY[0x270FA5388](v9);
  uint64_t v111 = (uint64_t)&v105 - v10;
  uint64_t v116 = type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v122 = *(void *)(v116 - 8);
  MEMORY[0x270FA5388](v116);
  unsigned int v108 = (unsigned __int8 *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294D40);
  MEMORY[0x270FA5388](v115);
  uint64_t v117 = (uint64_t)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F90);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v121 = (unsigned __int8 *)&v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v125 = (uint64_t)&v105 - v16;
  MEMORY[0x270FA5388](v17);
  uint64_t v126 = (uint64_t)&v105 - v18;
  uint64_t v124 = type metadata accessor for MapScaleViewConfig(0);
  uint64_t v120 = *(void *)(v124 - 8);
  MEMORY[0x270FA5388](v124);
  long long v113 = (unsigned __int8 *)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294D48);
  MEMORY[0x270FA5388](v119);
  uint64_t v130 = (int *)((char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA8);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v118 = (unsigned __int8 *)&v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v128 = (uint64_t)&v105 - v24;
  MEMORY[0x270FA5388](v25);
  uint64_t v129 = (uint64_t)&v105 - v26;
  uint64_t v27 = type metadata accessor for MapPitchToggleConfig(0);
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v30 = (unsigned __int8 *)&v105 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294D50);
  uint64_t v32 = v31 - 8;
  MEMORY[0x270FA5388](v31);
  uint64_t v34 = (char *)&v105 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA0);
  MEMORY[0x270FA5388](v35 - 8);
  uint64_t v37 = (unsigned __int8 *)&v105 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  int v40 = (char *)&v105 - v39;
  MEMORY[0x270FA5388](v41);
  uint64_t v43 = (char *)&v105 - v42;
  uint64_t v127 = a1;
  sub_228AD2708(a1, (uint64_t)&v105 - v42, &qword_268292FA0);
  sub_228AD2708(v131, (uint64_t)v40, &qword_268292FA0);
  uint64_t v44 = (uint64_t)&v34[*(int *)(v32 + 56)];
  sub_228AD2708((uint64_t)v43, (uint64_t)v34, &qword_268292FA0);
  sub_228AD2708((uint64_t)v40, v44, &qword_268292FA0);
  uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  if (v45((uint64_t)v34, 1, v27) == 1)
  {
    sub_228AC1A50((uint64_t)v40, &qword_268292FA0);
    sub_228AC1A50((uint64_t)v43, &qword_268292FA0);
    if (v45(v44, 1, v27) == 1)
    {
      sub_228AC1A50((uint64_t)v34, &qword_268292FA0);
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v46 = &qword_268294D50;
    uint64_t v47 = (uint64_t)v34;
LABEL_42:
    sub_228AC1A50(v47, v46);
    return 0;
  }
  sub_228AD2708((uint64_t)v34, (uint64_t)v37, &qword_268292FA0);
  if (v45(v44, 1, v27) == 1)
  {
    sub_228AC1A50((uint64_t)v40, &qword_268292FA0);
    sub_228AC1A50((uint64_t)v43, &qword_268292FA0);
    sub_228BA71BC((uint64_t)v37, type metadata accessor for MapPitchToggleConfig);
    goto LABEL_6;
  }
  sub_228BA77B4(v44, (uint64_t)v30, type metadata accessor for MapPitchToggleConfig);
  char v48 = sub_228AD20B0(v37, v30);
  sub_228BA71BC((uint64_t)v30, type metadata accessor for MapPitchToggleConfig);
  sub_228AC1A50((uint64_t)v40, &qword_268292FA0);
  sub_228AC1A50((uint64_t)v43, &qword_268292FA0);
  sub_228BA71BC((uint64_t)v37, type metadata accessor for MapPitchToggleConfig);
  sub_228AC1A50((uint64_t)v34, &qword_268292FA0);
  if ((v48 & 1) == 0) {
    return 0;
  }
LABEL_8:
  uint64_t v49 = type metadata accessor for MapControlsConfig();
  uint64_t v50 = v127;
  uint64_t v51 = v129;
  sub_228AD2708(v127 + *(int *)(v49 + 20), v129, &qword_268292FA8);
  uint64_t v52 = v128;
  sub_228AD2708(v131 + *(int *)(v49 + 20), v128, &qword_268292FA8);
  uint64_t v53 = (uint64_t)v130;
  uint64_t v54 = (uint64_t)v130 + *(int *)(v119 + 48);
  sub_228AD2708(v51, (uint64_t)v130, &qword_268292FA8);
  sub_228AD2708(v52, v54, &qword_268292FA8);
  uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v120 + 48);
  uint64_t v56 = v124;
  if (v55(v53, 1, v124) == 1)
  {
    sub_228AC1A50(v52, &qword_268292FA8);
    sub_228AC1A50(v51, &qword_268292FA8);
    int v57 = v55(v54, 1, v56);
    uint64_t v59 = v122;
    uint64_t v58 = v123;
    uint64_t v60 = v121;
    uint64_t v62 = v125;
    uint64_t v61 = v126;
    if (v57 == 1)
    {
      sub_228AC1A50((uint64_t)v130, &qword_268292FA8);
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  unsigned int v71 = v118;
  sub_228AD2708(v53, (uint64_t)v118, &qword_268292FA8);
  int v72 = v55(v54, 1, v56);
  uint64_t v59 = v122;
  uint64_t v58 = v123;
  uint64_t v60 = v121;
  uint64_t v62 = v125;
  uint64_t v61 = v126;
  if (v72 == 1)
  {
    sub_228AC1A50(v128, &qword_268292FA8);
    sub_228AC1A50(v129, &qword_268292FA8);
    sub_228BA71BC((uint64_t)v71, type metadata accessor for MapScaleViewConfig);
LABEL_16:
    uint64_t v46 = &qword_268294D48;
    uint64_t v47 = (uint64_t)v130;
    goto LABEL_42;
  }
  uint64_t v73 = v113;
  sub_228BA77B4(v54, (uint64_t)v113, type metadata accessor for MapScaleViewConfig);
  if (*v71 != *v73
    || (sub_228BAC558() & 1) == 0
    || (v74 = sub_228BAC788(), v75 = v74 == sub_228BAC788(), unsigned int v71 = v118, !v75))
  {
    sub_228BA71BC((uint64_t)v73, type metadata accessor for MapScaleViewConfig);
    uint64_t v76 = (uint64_t)v71;
    uint64_t v77 = &qword_268292FA8;
    sub_228AC1A50(v128, &qword_268292FA8);
    sub_228AC1A50(v129, &qword_268292FA8);
    sub_228BA71BC(v76, type metadata accessor for MapScaleViewConfig);
    uint64_t v47 = (uint64_t)v130;
LABEL_24:
    uint64_t v46 = v77;
    goto LABEL_42;
  }
  LODWORD(v124) = sub_228BAC578();
  sub_228BA71BC((uint64_t)v73, type metadata accessor for MapScaleViewConfig);
  sub_228AC1A50(v128, &qword_268292FA8);
  sub_228AC1A50(v129, &qword_268292FA8);
  sub_228BA71BC((uint64_t)v71, type metadata accessor for MapScaleViewConfig);
  sub_228AC1A50((uint64_t)v130, &qword_268292FA8);
  if ((v124 & 1) == 0) {
    return 0;
  }
LABEL_11:
  sub_228AD2708(v50 + *(int *)(v49 + 24), v61, &qword_268292F90);
  uint64_t v130 = (int *)v49;
  uint64_t v63 = v131;
  sub_228AD2708(v131 + *(int *)(v49 + 24), v62, &qword_268292F90);
  uint64_t v64 = v117;
  uint64_t v65 = v117 + *(int *)(v115 + 48);
  sub_228AD2708(v61, v117, &qword_268292F90);
  sub_228AD2708(v62, v65, &qword_268292F90);
  uint64_t v66 = v61;
  uint64_t v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 48);
  uint64_t v68 = v116;
  if (v67(v64, 1, v116) == 1)
  {
    sub_228AC1A50(v62, &qword_268292F90);
    sub_228AC1A50(v66, &qword_268292F90);
    int v69 = v67(v65, 1, v68);
    uint64_t v70 = (uint64_t)v114;
    if (v69 == 1)
    {
      sub_228AC1A50(v117, &qword_268292F90);
      goto LABEL_29;
    }
LABEL_27:
    uint64_t v46 = &qword_268294D40;
    uint64_t v47 = v117;
    goto LABEL_42;
  }
  sub_228AD2708(v64, (uint64_t)v60, &qword_268292F90);
  int v78 = v67(v65, 1, v68);
  uint64_t v79 = v64;
  uint64_t v70 = (uint64_t)v114;
  if (v78 == 1)
  {
    sub_228AC1A50(v125, &qword_268292F90);
    sub_228AC1A50(v126, &qword_268292F90);
    sub_228BA71BC((uint64_t)v60, type metadata accessor for MapUserLocationButtonConfig);
    goto LABEL_27;
  }
  uint64_t v80 = v108;
  sub_228BA77B4(v65, (uint64_t)v108, type metadata accessor for MapUserLocationButtonConfig);
  char v81 = sub_228B9B098(v60, v80);
  sub_228BA71BC((uint64_t)v80, type metadata accessor for MapUserLocationButtonConfig);
  sub_228AC1A50(v125, &qword_268292F90);
  sub_228AC1A50(v126, &qword_268292F90);
  sub_228BA71BC((uint64_t)v60, type metadata accessor for MapUserLocationButtonConfig);
  sub_228AC1A50(v79, &qword_268292F90);
  if ((v81 & 1) == 0) {
    return 0;
  }
LABEL_29:
  uint64_t v82 = v130;
  uint64_t v83 = v111;
  sub_228AD2708(v127 + v130[7], v111, &qword_268292F98);
  uint64_t v84 = v112;
  sub_228AD2708(v63 + v82[7], v112, &qword_268292F98);
  uint64_t v85 = v70 + *(int *)(v109 + 48);
  sub_228AD2708(v83, v70, &qword_268292F98);
  sub_228AD2708(v84, v85, &qword_268292F98);
  uint64_t v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  uint64_t v87 = v110;
  if (v86(v70, 1, v110) == 1)
  {
    sub_228AC1A50(v84, &qword_268292F98);
    sub_228AC1A50(v83, &qword_268292F98);
    if (v86(v85, 1, v87) == 1)
    {
      sub_228AC1A50(v70, &qword_268292F98);
      goto LABEL_32;
    }
    goto LABEL_41;
  }
  int v97 = v107;
  sub_228AD2708(v70, (uint64_t)v107, &qword_268292F98);
  if (v86(v85, 1, v87) == 1)
  {
    sub_228AC1A50(v112, &qword_268292F98);
    sub_228AC1A50(v111, &qword_268292F98);
    sub_228BA71BC((uint64_t)v97, type metadata accessor for MapCompassConfig);
LABEL_41:
    uint64_t v46 = &qword_268294D38;
    uint64_t v47 = v70;
    goto LABEL_42;
  }
  uint64_t v99 = v85;
  uint64_t v100 = v106;
  sub_228BA77B4(v99, (uint64_t)v106, type metadata accessor for MapCompassConfig);
  uint64_t v101 = v112;
  if (*v97 != *v100 || (sub_228BAC558() & 1) == 0)
  {
    sub_228BA71BC((uint64_t)v100, type metadata accessor for MapCompassConfig);
    uint64_t v77 = &qword_268292F98;
    sub_228AC1A50(v101, &qword_268292F98);
    sub_228AC1A50(v111, &qword_268292F98);
    sub_228BA71BC((uint64_t)v97, type metadata accessor for MapCompassConfig);
    uint64_t v47 = v70;
    goto LABEL_24;
  }
  char v102 = sub_228BAC578();
  uint64_t v103 = (uint64_t)v100;
  char v104 = v102;
  sub_228BA71BC(v103, type metadata accessor for MapCompassConfig);
  sub_228AC1A50(v101, &qword_268292F98);
  sub_228AC1A50(v111, &qword_268292F98);
  sub_228BA71BC((uint64_t)v97, type metadata accessor for MapCompassConfig);
  sub_228AC1A50(v70, &qword_268292F98);
  uint64_t v82 = v130;
  if ((v104 & 1) == 0) {
    return 0;
  }
LABEL_32:
  uint64_t v88 = v82[8];
  __int16 v89 = *(_WORD *)(v127 + v88);
  int v90 = *(unsigned __int16 *)(v63 + v88);
  if (v89 == 2)
  {
    if (v90 != 2) {
      return 0;
    }
  }
  else if (v90 == 2 || ((((v89 & 1) == 0) ^ v90) & 1) == 0 || (sub_228BAC558() & 1) == 0)
  {
    return 0;
  }
  uint64_t v91 = v82[9];
  __int16 v92 = *(_WORD *)(v127 + v91);
  int v93 = *(unsigned __int16 *)(v63 + v91);
  if (v92 == 2)
  {
    if (v93 != 2) {
      return 0;
    }
  }
  else if (v93 == 2 || ((((v92 & 1) == 0) ^ v93) & 1) == 0 || (sub_228BAC558() & 1) == 0)
  {
    return 0;
  }
  uint64_t v94 = v82[10];
  __int16 v95 = *(_WORD *)(v127 + v94);
  int v96 = *(unsigned __int16 *)(v63 + v94);
  if (v95 != 2) {
    return v96 != 2 && ((((v95 & 1) == 0) ^ v96) & 1) != 0 && (sub_228BAC558() & 1) != 0;
  }
  return v96 == 2;
}

uint64_t sub_228BA67F4(uint64_t a1, void (*a2)(__n128))
{
  uint64_t v47 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F98);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v49 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v50 = (char *)&v47 - v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292F90);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v48 = (uint64_t)&v47 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA8);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v47 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_268292FA0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v47 - v22;
  uint64_t v24 = (int *)type metadata accessor for MapControlsConfig();
  __n128 v25 = MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v47 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47(v25);
  sub_228AD2708((uint64_t)v27, (uint64_t)v20, &qword_268292FA0);
  uint64_t v28 = type metadata accessor for MapPitchToggleConfig(0);
  uint64_t v29 = *(void *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v20, 1, v28) == 1)
  {
    sub_228AD2708(a1, (uint64_t)v23, &qword_268292FA0);
    sub_228AC1A50((uint64_t)v20, &qword_268292FA0);
  }
  else
  {
    sub_228BA77B4((uint64_t)v20, (uint64_t)v23, type metadata accessor for MapPitchToggleConfig);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v23, 0, 1, v28);
  }
  sub_228B3E5E0((uint64_t)v23, a1, &qword_268292FA0);
  sub_228AD2708((uint64_t)&v27[v24[5]], (uint64_t)v14, &qword_268292FA8);
  uint64_t v30 = type metadata accessor for MapScaleViewConfig(0);
  uint64_t v31 = *(void *)(v30 - 8);
  int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v14, 1, v30);
  uint64_t v33 = (uint64_t)v49;
  if (v32 == 1)
  {
    sub_228AD2708(a1 + v24[5], (uint64_t)v17, &qword_268292FA8);
    sub_228AC1A50((uint64_t)v14, &qword_268292FA8);
  }
  else
  {
    sub_228BA77B4((uint64_t)v14, (uint64_t)v17, type metadata accessor for MapScaleViewConfig);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v17, 0, 1, v30);
  }
  uint64_t v34 = (uint64_t)v50;
  sub_228B3E5E0((uint64_t)v17, a1 + v24[5], &qword_268292FA8);
  sub_228AD2708((uint64_t)&v27[v24[6]], (uint64_t)v9, &qword_268292F90);
  uint64_t v35 = type metadata accessor for MapUserLocationButtonConfig(0);
  uint64_t v36 = *(void *)(v35 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v9, 1, v35) == 1)
  {
    uint64_t v37 = v48;
    sub_228AD2708(a1 + v24[6], v48, &qword_268292F90);
    sub_228AC1A50((uint64_t)v9, &qword_268292F90);
  }
  else
  {
    uint64_t v37 = v48;
    sub_228BA77B4((uint64_t)v9, v48, type metadata accessor for MapUserLocationButtonConfig);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v37, 0, 1, v35);
  }
  sub_228B3E5E0(v37, a1 + v24[6], &qword_268292F90);
  sub_228AD2708((uint64_t)&v27[v24[7]], v33, &qword_268292F98);
  uint64_t v38 = type metadata accessor for MapCompassConfig(0);
  uint64_t v39 = *(void *)(v38 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v33, 1, v38) == 1)
  {
    sub_228AD2708(a1 + v24[7], v34, &qword_268292F98);
    sub_228AC1A50(v33, &qword_268292F98);
  }
  else
  {
    sub_228BA77B4(v33, v34, type metadata accessor for MapCompassConfig);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v34, 0, 1, v38);
  }
  sub_228B3E5E0(v34, a1 + v24[7], &qword_268292F98);
  uint64_t v40 = v24[8];
  __int16 v41 = *(_WORD *)&v27[v40];
  if (v41 == 2) {
    __int16 v41 = *(_WORD *)(a1 + v40);
  }
  *(_WORD *)(a1 + v40) = v41;
  uint64_t v42 = v24[9];
  __int16 v43 = *(_WORD *)&v27[v42];
  if (v43 == 2) {
    __int16 v43 = *(_WORD *)(a1 + v42);
  }
  *(_WORD *)(a1 + v42) = v43;
  __int16 v44 = *(_WORD *)&v27[v24[10]];
  uint64_t result = sub_228BA71BC((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for MapControlsConfig);
  uint64_t v46 = v24[10];
  if (v44 == 2) {
    __int16 v44 = *(_WORD *)(a1 + v46);
  }
  *(_WORD *)(a1 + v46) = v44;
  return result;
}

uint64_t sub_228BA6EB4(char *a1, unsigned int a2)
{
  uint64_t v4 = sub_228BAC9C8();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v16 - v9;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)&v16 - v9, a1, v4);
  sub_228BAC998();
  sub_228BA7718(&qword_268294CD8, MEMORY[0x263F19168]);
  char v11 = sub_228BAD3C8();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  if (v11)
  {
    v12(a1, v4);
    v12(v10, v4);
    return 2;
  }
  else
  {
    sub_228BAC978();
    char v14 = sub_228BAD3C8();
    v12(v8, v4);
    if (v14)
    {
      v12(a1, v4);
      v12(v10, v4);
      return 1;
    }
    else
    {
      sub_228BAC9A8();
      int v15 = sub_228BAD3C8();
      v12(a1, v4);
      v12(v8, v4);
      v12(v10, v4);
      return (v15 | a2) & 1;
    }
  }
}

unint64_t sub_228BA7124()
{
  unint64_t result = qword_268294D00;
  if (!qword_268294D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294D00);
  }
  return result;
}

uint64_t sub_228BA7178()
{
  return sub_228BACB08();
}

uint64_t sub_228BA71BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_228BA721C@<X0>(void *a1@<X8>)
{
  return sub_228B9E48C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_228BA7230()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for _MapControlsModifier();
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = v0 + ((v3 + 32) & ~v3);
  uint64_t v5 = type metadata accessor for MapPitchToggleConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    uint64_t v6 = v4 + *(int *)(v5 + 24);
    uint64_t v7 = sub_228BAC9C8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
    uint64_t v8 = v4 + *(int *)(v5 + 28);
    uint64_t v9 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    swift_release();
  }
  uint64_t v10 = (int *)type metadata accessor for MapControlsConfig();
  uint64_t v11 = v4 + v10[5];
  uint64_t v12 = type metadata accessor for MapScaleViewConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
  {
    uint64_t v13 = v11 + *(int *)(v12 + 28);
    uint64_t v14 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  }
  uint64_t v15 = v4 + v10[6];
  uint64_t v16 = type metadata accessor for MapUserLocationButtonConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v15, 1, v16))
  {
    uint64_t v17 = v15 + *(int *)(v16 + 24);
    uint64_t v18 = sub_228BAC9C8();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
    uint64_t v19 = v15 + *(int *)(v16 + 28);
    uint64_t v20 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
    swift_release();
  }
  uint64_t v21 = v4 + v10[7];
  uint64_t v22 = type metadata accessor for MapCompassConfig(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22))
  {
    uint64_t v23 = v21 + *(int *)(v22 + 24);
    uint64_t v24 = sub_228BAC588();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v23, v24);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294D18);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4 + *(int *)(v2 + 36), v1);

  return swift_deallocObject();
}

uint64_t sub_228BA7638(uint64_t a1)
{
  type metadata accessor for _MapControlsModifier();

  return sub_228B9EA60(a1);
}

unint64_t sub_228BA76C4()
{
  unint64_t result = qword_268294D20;
  if (!qword_268294D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294D20);
  }
  return result;
}

uint64_t sub_228BA7718(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_228BA7760()
{
  unint64_t result = qword_268294D30;
  if (!qword_268294D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294D30);
  }
  return result;
}

uint64_t sub_228BA77B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

ValueMetadata *type metadata accessor for DefaultIsInMapControlsKey()
{
  return &type metadata for DefaultIsInMapControlsKey;
}

ValueMetadata *type metadata accessor for DefaultMapControlsVisibilityKey()
{
  return &type metadata for DefaultMapControlsVisibilityKey;
}

ValueMetadata *type metadata accessor for DefaultInternalMapControlsKey()
{
  return &type metadata for DefaultInternalMapControlsKey;
}

uint64_t sub_228BA784C()
{
  return swift_getWitnessTable();
}

unint64_t sub_228BA7AA8()
{
  unint64_t result = qword_268294D58;
  if (!qword_268294D58)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294D60);
    sub_228AD2E8C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294D58);
  }
  return result;
}

void CLLocationCoordinate2D.animatableData.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

__n128 (*CLLocationCoordinate2D.animatableData.modify(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return sub_228BA7B54;
}

__n128 sub_228BA7B54(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)a1[1].n128_u64[0] = *a1;
  return result;
}

unint64_t sub_228BA7B68()
{
  unint64_t result = qword_268294D68;
  if (!qword_268294D68)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294D70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294D68);
  }
  return result;
}

__n128 sub_228BA7BC4@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 sub_228BA7BD0(__n128 *a1)
{
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

__n128 (*sub_228BA7BDC(uint64_t a1))(__n128 *)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return sub_228BA7C24;
}

__n128 sub_228BA7C0C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_228BA7C18(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

id sub_228BA7C28()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_hostView];
  objc_msgSend(v1, sel_layoutSubviews);
  objc_msgSend(v1, sel_sizeThatFits_, INFINITY, INFINITY);
  double v3 = v2;
  double v5 = v4;
  objc_msgSend(v0, sel_setBounds_, 0.0, 0.0, v2, v4);
  objc_msgSend(v1, sel_setFrame_, 0.0, 0.0, v3, v5);
  double v6 = *(double *)&v0[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_contentAnchorPoint];
  double v7 = *(double *)&v0[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_contentAnchorPoint + 8];
  objc_msgSend(v0, sel_frame);
  objc_msgSend(v0, sel_setCenterOffset_, v8 * 0.5 - v6 * v8, v9 * 0.5 - v7 * v9);
  double v10 = *(double *)&v0[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_accessoryAnchorPoint];
  double v11 = *(double *)&v0[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_accessoryAnchorPoint + 8];
  objc_msgSend(v0, sel_frame);

  return objc_msgSend(v0, sel_setAccessoryOffset_, -(v12 * 0.5 - v10 * v12), -(v13 * 0.5 - v11 * v13));
}

id sub_228BA7DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v3[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_wrappedView] = 0;
  double v6 = &v3[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_contentAnchorPoint];
  double v7 = v3;
  sub_228BAD2D8();
  *(void *)double v6 = v8;
  *((void *)v6 + 1) = v9;
  double v10 = &v7[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_accessoryAnchorPoint];
  sub_228BAD2D8();
  *(void *)double v10 = v11;
  *((void *)v10 + 1) = v12;
  uint64_t v20 = sub_228BAD1C8();
  id v13 = objc_allocWithZone((Class)__swift_instantiateConcreteTypeFromMangledName(&qword_268294D98));
  uint64_t v14 = (void *)sub_228BAC7A8();
  sub_228BAC7C8();
  *(void *)&v7[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_hostView] = v14;
  id v15 = v14;

  if (a3)
  {
    uint64_t v16 = (void *)sub_228BAD3D8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v16 = 0;
  }
  v19.receiver = v7;
  v19.super_class = (Class)type metadata accessor for SwiftUIAnnotationView();
  id v17 = objc_msgSendSuper2(&v19, sel_initWithAnnotation_reuseIdentifier_, a1, v16);

  swift_unknownObjectRelease();
  return v17;
}

id sub_228BA8098()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SwiftUIAnnotationView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SwiftUIAnnotationView()
{
  return self;
}

id sub_228BA813C(uint64_t a1)
{
  objc_super v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_wrappedView;
  *(void *)&v1[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_wrappedView] = a1;
  swift_retain();
  swift_release();
  if (*(void *)&v1[v3])
  {
    double v4 = *(void **)&v1[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_hostView];
    swift_retain();
    sub_228BAC7B8();
    id v5 = objc_msgSend(v4, sel_superview);

    if (!v5) {
      objc_msgSend(v2, sel_addSubview_, v4);
    }
    sub_228BA7C28();
    return (id)swift_release();
  }
  else
  {
    double v7 = *(void **)&v1[OBJC_IVAR____TtC15_MapKit_SwiftUI21SwiftUIAnnotationView_hostView];
    return objc_msgSend(v7, sel_removeFromSuperview);
  }
}

uint64_t View.mapScope(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = 0;
  v7[1] = 0;
  char v8 = 1;
  v9[0] = a1;
  v9[1] = swift_getKeyPath();
  char v10 = 0;
  sub_228AD2708((uint64_t)v7, (uint64_t)v6, &qword_268294DA0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294DA0);
  sub_228BAD178();
  sub_228AC1A50((uint64_t)v7, &qword_268294DA0);
  MEMORY[0x22A6A6830](v9, a2, &type metadata for MapScopeModifier, a3);
  return sub_228BA8524((uint64_t)v9);
}

uint64_t sub_228BA8300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294DB0);
  uint64_t v7 = v6 - 8;
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v11 = *(void *)(v2 + 8);
  char v12 = *(unsigned char *)(v3 + 16);
  sub_228ACF3A4(v11, v12);
  uint64_t v13 = sub_228ACFC38(v11, v12);
  sub_228AD26A8(v11, v12);
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294DB8);
  sub_228BAD188();
  uint64_t v14 = sub_228BA8A38((uint64_t)v21, v13);
  swift_bridgeObjectRelease();
  sub_228AC1A50((uint64_t)v21, &qword_268294DA0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294DC0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v9, a1, v15);
  uint64_t v16 = (uint64_t *)&v9[*(int *)(v7 + 44)];
  *uint64_t v16 = KeyPath;
  v16[1] = v14;
  sub_228BA8EB0(v3, (uint64_t)v21);
  uint64_t v17 = swift_allocObject();
  sub_228BA8F3C((uint64_t)v21, v17 + 16);
  sub_228AD2708((uint64_t)v9, a2, &qword_268294DB0);
  uint64_t v18 = (uint64_t (**)(uint64_t *))(a2
                                           + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_268294DC8)
                                                    + 36));
  *uint64_t v18 = sub_228BA8F74;
  v18[1] = (uint64_t (*)(uint64_t *))v17;
  return sub_228AC1A50((uint64_t)v9, &qword_268294DB0);
}

uint64_t sub_228BA84E0()
{
  sub_228AD26B4();
  sub_228BACB08();
  return v1;
}

uint64_t sub_228BA8524(uint64_t a1)
{
  return a1;
}

uint64_t sub_228BA8554()
{
  return swift_getWitnessTable();
}

unint64_t sub_228BA85B8()
{
  unint64_t result = qword_268294DA8;
  if (!qword_268294DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294DA8);
  }
  return result;
}

uint64_t destroy for MapScopeModifier(uint64_t a1)
{
  sub_228AD26A8(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  if ((*(unsigned char *)(a1 + 40) & 1) == 0) {
    swift_unknownObjectWeakDestroy();
  }

  return swift_release();
}

uint64_t initializeWithCopy for MapScopeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 16);
  sub_228ACF3A4(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  if (*(unsigned char *)(a2 + 40))
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  }
  else
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_unknownObjectWeakCopyInit();
    *(unsigned char *)(a1 + 40) = 0;
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MapScopeModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_228ACF3A4(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_228AD26A8(v6, v7);
  uint64_t v8 = (long long *)(a1 + 24);
  uint64_t v9 = (long long *)(a2 + 24);
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(unsigned char *)(a2 + 40))
    {
      long long v10 = *v9;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *uint64_t v8 = v10;
    }
    else
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_unknownObjectWeakCopyInit();
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  else if (*(unsigned char *)(a2 + 40))
  {
    sub_228AC1A50(a1 + 24, &qword_268292828);
    char v11 = *(unsigned char *)(a2 + 40);
    *uint64_t v8 = *v9;
    *(unsigned char *)(a1 + 40) = v11;
  }
  else
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_unknownObjectWeakCopyAssign();
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for MapScopeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  if (*(unsigned char *)(a2 + 40))
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  }
  else
  {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_unknownObjectWeakTakeInit();
    *(unsigned char *)(a1 + 40) = 0;
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for MapScopeModifier(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  sub_228AD26A8(v5, v6);
  if ((*(unsigned char *)(a1 + 40) & 1) == 0)
  {
    if ((*(unsigned char *)(a2 + 40) & 1) == 0)
    {
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_unknownObjectWeakTakeAssign();
      goto LABEL_8;
    }
    sub_228AC1A50(a1 + 24, &qword_268292828);
    goto LABEL_6;
  }
  if (*(unsigned char *)(a2 + 40))
  {
LABEL_6:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    goto LABEL_8;
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(a1 + 40) = 0;
LABEL_8:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MapScopeModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapScopeModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapScopeModifier()
{
  return &type metadata for MapScopeModifier;
}

ValueMetadata *type metadata accessor for MapViewReference()
{
  return &type metadata for MapViewReference;
}

ValueMetadata *type metadata accessor for MapScopeRegistry()
{
  return &type metadata for MapScopeRegistry;
}

uint64_t sub_228BA8A38(uint64_t a1, uint64_t a2)
{
  sub_228AD2708(a1, (uint64_t)&v13, &qword_268294DA0);
  if (v14[8])
  {
    sub_228AC1A50((uint64_t)&v13, &qword_268294DA0);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = v13;
    uint64_t v15 = v13;
    sub_228AD2184((uint64_t)v14, (uint64_t)&v16);
    uint64_t v13 = v3;
    sub_228AD2234((uint64_t)&v16, (uint64_t)v14);
    sub_228AD2184((uint64_t)v14, (uint64_t)v12);
    v12[8] = 0;
    sub_228AD2708((uint64_t)v12, (uint64_t)v11, &qword_268291BD0);
    if (v11[8])
    {
      swift_bridgeObjectRetain();
      sub_228AC1A50((uint64_t)v11, &qword_268291BD0);
      swift_bridgeObjectRetain();
      unint64_t v4 = sub_228AD183C(v3);
      char v6 = v5;
      swift_bridgeObjectRelease();
      if (v6)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_228B03984();
        }
        sub_228AD2184(*(void *)(a2 + 56) + 8 * v4, (uint64_t)&v9);
        sub_228B03604(v4, a2);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v9 = 0;
      }
      BOOL v10 = (v6 & 1) == 0;
      sub_228AC1A50((uint64_t)&v9, &qword_268291BD0);
    }
    else
    {
      sub_228AD2184((uint64_t)v11, (uint64_t)&v9);
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      sub_228B0543C((uint64_t)&v9, v3, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }
    sub_228AC1A50((uint64_t)v12, &qword_268291BD0);
    sub_228AC1A50((uint64_t)&v15, &qword_268292828);
  }
  return a2;
}

uint64_t sub_228BA8C04(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*(void *)(*a1 + 16) && (v3 = *a2, unint64_t v4 = sub_228AD183C(*a2), (v5 & 1) != 0))
  {
    sub_228AD2234(*(void *)(v2 + 56) + 8 * v4, (uint64_t)&v8);
    sub_228AD2184((uint64_t)&v8, (uint64_t)v11);
    uint64_t v8 = v3;
    sub_228AD2234((uint64_t)v11, (uint64_t)&v9);
    char v10 = 0;
    sub_228AD2708((uint64_t)&v8, (uint64_t)v7, &qword_268294DA0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_268294DB8);
    sub_228BAD198();
    sub_228AC1A50((uint64_t)&v8, &qword_268294DA0);
    return sub_228AD21E0((uint64_t)v11);
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    char v10 = 1;
    sub_228AD2708((uint64_t)&v8, (uint64_t)v7, &qword_268294DA0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_268294DB8);
    sub_228BAD198();
    return sub_228AC1A50((uint64_t)&v8, &qword_268294DA0);
  }
}

unint64_t sub_228BA8D20()
{
  unint64_t result = sub_228AE2B20(MEMORY[0x263F8EE78]);
  qword_26829D540 = result;
  return result;
}

uint64_t sub_228BA8D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_228BA90F4();

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

uint64_t sub_228BA8DB0@<X0>(void *a1@<X8>)
{
  if (qword_268291398 != -1) {
    swift_once();
  }
  *a1 = qword_26829D540;

  return swift_bridgeObjectRetain();
}

uint64_t sub_228BA8E20()
{
  return AGCompareValues();
}

uint64_t sub_228BA8E94()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_228BA8EB0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_228BA8EE8()
{
  sub_228AD26A8(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  if ((*(unsigned char *)(v0 + 56) & 1) == 0) {
    swift_unknownObjectWeakDestroy();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_228BA8F3C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_228BA8F74(uint64_t *a1)
{
  return sub_228BA8C04(a1, (uint64_t *)(v1 + 16));
}

ValueMetadata *type metadata accessor for MapScopeRegistryKey()
{
  return &type metadata for MapScopeRegistryKey;
}

unint64_t sub_228BA8F90()
{
  unint64_t result = qword_268294DD8;
  if (!qword_268294DD8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294DC8);
    sub_228BA9030();
    sub_228B0A36C(&qword_268294E00, &qword_268294E08);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294DD8);
  }
  return result;
}

unint64_t sub_228BA9030()
{
  unint64_t result = qword_268294DE0;
  if (!qword_268294DE0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294DB0);
    sub_228B0A36C(&qword_268294DE8, &qword_268294DC0);
    sub_228B0A36C(&qword_268294DF0, &qword_268294DF8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294DE0);
  }
  return result;
}

unint64_t sub_228BA90F4()
{
  unint64_t result = qword_268294E10;
  if (!qword_268294E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294E10);
  }
  return result;
}

uint64_t sub_228BA9148@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = sub_228AD2234((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v3;
  return result;
}

unint64_t sub_228BA9178(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v42 = a1;
  uint64_t v43 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v44 = v8;
  uint64_t v45 = 0;
  uint64_t v46 = v11 & v9;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_228BA94CC((uint64_t)&v39);
  if (v41) {
    goto LABEL_16;
  }
  uint64_t v12 = v39;
  sub_228AD2184((uint64_t)&v40, (uint64_t)v49);
  uint64_t v13 = *a5;
  unint64_t result = sub_228AD183C(v12);
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v15 & 1) == 0;
  BOOL v18 = __OFADD__(v16, v17);
  uint64_t v19 = v16 + v17;
  if (v18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  char v20 = v15;
  if (*(void *)(v13 + 24) < v19)
  {
    sub_228B01388(v19, a4 & 1);
    unint64_t result = sub_228AD183C(v12);
    if ((v20 & 1) == (v21 & 1)) {
      goto LABEL_10;
    }
LABEL_8:
    unint64_t result = sub_228BADA18();
    __break(1u);
  }
  if ((a4 & 1) == 0)
  {
    unint64_t v23 = result;
    sub_228B03984();
    unint64_t result = v23;
    if (v20) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
LABEL_10:
  if (v20)
  {
LABEL_11:
    uint64_t v22 = 8 * result;
    sub_228AD2234(*(void *)(*a5 + 56) + 8 * result, (uint64_t)&v37);
    sub_228AD2234((uint64_t)&v37, (uint64_t)v38);
    sub_228AD21E0((uint64_t)&v37);
    sub_228AD21E0((uint64_t)v49);
    sub_228B0AB54((uint64_t)v38, *(void *)(*a5 + 56) + v22);
LABEL_15:
    sub_228BA94CC((uint64_t)&v39);
    if (v41)
    {
LABEL_16:
      swift_release();
      swift_bridgeObjectRelease();
      sub_228AC98B8();
      return swift_release();
    }
    char v20 = 1;
    while (1)
    {
      uint64_t v12 = v39;
      sub_228AD2184((uint64_t)&v40, (uint64_t)v49);
      uint64_t v28 = *a5;
      unint64_t result = sub_228AD183C(v12);
      uint64_t v30 = *(void *)(v28 + 16);
      BOOL v31 = (v29 & 1) == 0;
      BOOL v18 = __OFADD__(v30, v31);
      uint64_t v32 = v30 + v31;
      if (v18) {
        goto LABEL_26;
      }
      a4 = v29;
      if (*(void *)(v28 + 24) < v32)
      {
        sub_228B01388(v32, 1);
        unint64_t result = sub_228AD183C(v12);
        if ((a4 & 1) != (v33 & 1)) {
          goto LABEL_8;
        }
      }
      if (a4)
      {
        uint64_t v27 = 8 * result;
        sub_228AD2234(*(void *)(*a5 + 56) + 8 * result, (uint64_t)&v37);
        sub_228AD2234((uint64_t)&v37, (uint64_t)v38);
        sub_228AD21E0((uint64_t)&v37);
        sub_228AD21E0((uint64_t)v49);
        sub_228B0AB54((uint64_t)v38, *(void *)(*a5 + 56) + v27);
      }
      else
      {
        uint64_t v34 = (void *)*a5;
        *(void *)(*a5 + 8 * (result >> 6) + 64) |= 1 << result;
        *(void *)(v34[6] + 8 * result) = v12;
        unint64_t result = sub_228AD2184((uint64_t)v49, v34[7] + 8 * result);
        uint64_t v35 = v34[2];
        BOOL v18 = __OFADD__(v35, 1);
        uint64_t v36 = v35 + 1;
        if (v18) {
          goto LABEL_27;
        }
        v34[2] = v36;
      }
      sub_228BA94CC((uint64_t)&v39);
      if (v41) {
        goto LABEL_16;
      }
    }
  }
LABEL_13:
  uint64_t v24 = (void *)*a5;
  *(void *)(*a5 + 8 * (result >> 6) + 64) |= 1 << result;
  *(void *)(v24[6] + 8 * result) = v12;
  unint64_t result = sub_228AD2184((uint64_t)v49, v24[7] + 8 * result);
  uint64_t v25 = v24[2];
  BOOL v18 = __OFADD__(v25, 1);
  uint64_t v26 = v25 + 1;
  if (!v18)
  {
    v24[2] = v26;
    goto LABEL_15;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_228BA94CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (!v8)
  {
    int64_t v12 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v13 = (unint64_t)(v6 + 64) >> 6;
    if (v12 < v13)
    {
      unint64_t v14 = *(void *)(v4 + 8 * v12);
      if (v14)
      {
LABEL_7:
        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v10 = __clz(__rbit64(v14)) + (v12 << 6);
        int64_t v7 = v12;
        goto LABEL_3;
      }
      int64_t v15 = v5 + 2;
      int64_t v7 = v5 + 1;
      if (v5 + 2 < v13)
      {
        unint64_t v14 = *(void *)(v4 + 8 * v15);
        if (v14)
        {
LABEL_10:
          int64_t v12 = v15;
          goto LABEL_7;
        }
        int64_t v7 = v5 + 2;
        if (v5 + 3 < v13)
        {
          unint64_t v14 = *(void *)(v4 + 8 * (v5 + 3));
          if (v14)
          {
            int64_t v12 = v5 + 3;
            goto LABEL_7;
          }
          int64_t v15 = v5 + 4;
          int64_t v7 = v5 + 3;
          if (v5 + 4 < v13)
          {
            unint64_t v14 = *(void *)(v4 + 8 * v15);
            if (v14) {
              goto LABEL_10;
            }
            int64_t v12 = v5 + 5;
            int64_t v7 = v5 + 4;
            if (v5 + 5 < v13)
            {
              unint64_t v14 = *(void *)(v4 + 8 * v12);
              if (v14) {
                goto LABEL_7;
              }
              int64_t v7 = v13 - 1;
              int64_t v16 = v5 + 6;
              while (v13 != v16)
              {
                unint64_t v14 = *(void *)(v4 + 8 * v16++);
                if (v14)
                {
                  int64_t v12 = v16 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v9 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    char v25 = 1;
    goto LABEL_23;
  }
  uint64_t v9 = (v8 - 1) & v8;
  unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
  uint64_t v11 = *(void *)(*(void *)(v3 + 48) + 8 * v10);
  sub_228AD2234(*(void *)(v3 + 56) + 8 * v10, (uint64_t)&v24);
  uint64_t v23 = v11;
  char v25 = 0;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  BOOL v17 = (void (*)(unsigned char *))v1[5];
  uint64_t result = sub_228ACD8BC((uint64_t)&v23, (uint64_t)v21, &qword_268294E18);
  char v19 = v22;
  if (v22)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    sub_228ACD8BC((uint64_t)v21, (uint64_t)v20, &qword_268294E20);
    v17(v20);
    uint64_t result = sub_228AC1A50((uint64_t)v20, &qword_268294E20);
  }
  *(unsigned char *)(a1 + 16) = v19;
  return result;
}

uint64_t sub_228BA96AC(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a1;
  *a1 = 0x8000000000000000;
  sub_228BA9178(v3, (uint64_t)sub_228BA9148, 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

double sub_228BA9774@<D0>(double *a1@<X8>)
{
  sub_228B50520();
  sub_228BACB08();
  double result = v5;
  *(void *)a1 = v3;
  *((void *)a1 + 1) = v4;
  a1[2] = v5;
  *((void *)a1 + 3) = v6;
  *((void *)a1 + 4) = v7;
  return result;
}

uint64_t sub_228BA97D8()
{
  sub_228B50574();

  return sub_228BACB08();
}

uint64_t sub_228BA9820()
{
  sub_228B505C8();

  return sub_228BACB08();
}

uint64_t sub_228BA9868()
{
  sub_228B5067C();
  sub_228BACB08();
  return v1;
}

double sub_228BA98A4()
{
  sub_228BAC5B8();
  double result = *(double *)&v1;
  xmmword_268294E28 = v1;
  unk_268294E38 = v2;
  qword_268294E48 = v3;
  return result;
}

uint64_t sub_228BA9900@<X0>(void *a1@<X8>)
{
  if (qword_2682913A0 != -1) {
    swift_once();
  }
  uint64_t v3 = *((void *)&xmmword_268294E28 + 1);
  uint64_t v2 = unk_268294E38;
  uint64_t v4 = qword_268294E40;
  uint64_t v5 = qword_268294E48;
  *a1 = xmmword_268294E28;
  a1[1] = v3;
  a1[2] = v2;
  a1[3] = v4;
  a1[4] = v5;

  return swift_bridgeObjectRetain();
}

uint64_t sub_228BA9988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_228BAA7A8();

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

uint64_t sub_228BA99EC()
{
  uint64_t result = sub_228BAD108();
  qword_268294E68 = MEMORY[0x263F1B440];
  unk_268294E70 = MEMORY[0x263F1B420];
  qword_268294E50 = result;
  return result;
}

uint64_t sub_228BA9A24@<X0>(uint64_t a1@<X8>)
{
  if (qword_2682913A8 != -1) {
    swift_once();
  }

  return sub_228B099C8((uint64_t)&qword_268294E50, a1);
}

double sub_228BA9A90()
{
  qword_268294E98 = 0;
  double result = 0.0;
  xmmword_268294E78 = 0u;
  unk_268294E88 = 0u;
  return result;
}

uint64_t sub_228BA9AA8@<X0>(uint64_t a1@<X8>)
{
  if (qword_2682913B0 != -1) {
    swift_once();
  }

  return sub_228BAA700((uint64_t)&xmmword_268294E78, a1);
}

id sub_228BA9B14()
{
  id result = objc_msgSend(self, sel__defaultOverlayLevel);
  qword_268294EA0 = (uint64_t)result;
  return result;
}

uint64_t sub_228BA9B48@<X0>(void *a1@<X8>)
{
  if (qword_2682913B8 != -1) {
    uint64_t result = swift_once();
  }
  *a1 = qword_268294EA0;
  return result;
}

uint64_t sub_228BA9BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_228BAA7FC();

  return MEMORY[0x270EFF9B8](a1, a2, a3, a4, v8);
}

uint64_t MapContent.stroke<A>(_:lineWidth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v19[1] = a6;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294EA8);
  uint64_t v11 = sub_228BAC868();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)v19 - v13;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  *((void *)&v23 + 1) = a3;
  uint64_t v24 = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_0, a1, a3);
  sub_228B822B4(KeyPath, (uint64_t)&v22, a2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v22);
  BOOL v17 = (uint64_t *)swift_getKeyPath();
  sub_228BAC5B8();
  v20[0] = v22;
  v20[1] = v23;
  uint64_t v21 = v24;
  void v19[2] = a4;
  void v19[3] = &off_26B6762E8;
  swift_getWitnessTable();
  sub_228B822B4(v17, (uint64_t)v20, v11);
  swift_release();
  sub_228B17ED0((uint64_t)&v22);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_228BA9E24()
{
  return sub_228BACB08();
}

uint64_t sub_228BA9E64(uint64_t a1)
{
  sub_228B099C8(a1, (uint64_t)v3);
  sub_228B099C8((uint64_t)v3, (uint64_t)&v2);
  sub_228B50574();
  sub_228BACB18();
  return __swift_destroy_boxed_opaque_existential_0((uint64_t)v3);
}

double sub_228BA9EC8@<D0>(double *a1@<X8>)
{
  sub_228B50520();
  sub_228BACB08();
  double result = v5;
  *(void *)a1 = v3;
  *((void *)a1 + 1) = v4;
  a1[2] = v5;
  *((void *)a1 + 3) = v6;
  *((void *)a1 + 4) = v7;
  return result;
}

uint64_t sub_228BA9F34()
{
  return sub_228BACB18();
}

uint64_t MapContent.stroke(lineWidth:)(uint64_t a1)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  sub_228BAC5B8();
  v4[0] = v6[0];
  v4[1] = v6[1];
  uint64_t v5 = v7;
  sub_228B822B4(KeyPath, (uint64_t)v4, a1);
  swift_release();
  return sub_228B17ED0((uint64_t)v6);
}

uint64_t MapContent.stroke<A>(_:style:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v22[1] = a7;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294EA8);
  uint64_t v13 = sub_228BAC868();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  int64_t v16 = (char *)v22 - v15;
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  *((void *)&v24 + 1) = a4;
  uint64_t v25 = a6;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_0, a1, a4);
  sub_228B822B4(KeyPath, (uint64_t)&v23, a3);
  swift_release();
  __swift_destroy_boxed_opaque_existential_0((uint64_t)&v23);
  char v19 = (uint64_t *)swift_getKeyPath();
  long long v20 = a2[1];
  long long v23 = *a2;
  long long v24 = v20;
  uint64_t v25 = *((void *)a2 + 4);
  v22[2] = a5;
  v22[3] = &off_26B6762E8;
  swift_getWitnessTable();
  sub_228B822B4(v19, (uint64_t)&v23, v13);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t MapContent.strokeStyle(style:)(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  uint64_t v8 = *(void *)(a1 + 32);
  sub_228B822B4(KeyPath, (uint64_t)v7, a2);
  return swift_release();
}

uint64_t MapContent.foregroundStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  void v12[3] = a3;
  v12[4] = a5;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_0, a1, a3);
  sub_228B822B4(KeyPath, (uint64_t)v12, a2);
  swift_release();
  return sub_228B5061C((uint64_t)v12);
}

uint64_t sub_228BAA39C()
{
  return sub_228BACB08();
}

uint64_t sub_228BAA3DC(uint64_t a1)
{
  sub_228BAA700(a1, (uint64_t)v3);
  sub_228BAA700((uint64_t)v3, (uint64_t)&v2);
  sub_228B505C8();
  sub_228BACB18();
  return sub_228B5061C((uint64_t)v3);
}

uint64_t MapContent.mapOverlayLevel(level:)(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = (uint64_t *)swift_getKeyPath();
  uint64_t v6 = a1;
  sub_228B822B4(KeyPath, (uint64_t)&v6, a2);
  return swift_release();
}

uint64_t sub_228BAA4B4@<X0>(void *a1@<X8>)
{
  sub_228B5067C();
  uint64_t result = sub_228BACB08();
  *a1 = v3;
  return result;
}

uint64_t sub_228BAA504()
{
  return sub_228BACB18();
}

uint64_t sub_228BAA550()
{
  return swift_getWitnessTable();
}

uint64_t sub_228BAA608(uint64_t a1)
{
  return get_witness_table_15_MapKit_SwiftUI0A7ContentRzl0cD008ModifiedE0VyxAA022_EnvironmentKeyWritingaE8ModifierVyAC11StrokeStyleVGGAaBHpxAaBHD1__AjA01_aeJ0HPyHCHCTm(a1, &qword_268294EB0);
}

uint64_t sub_228BAA614()
{
  return swift_getWitnessTable();
}

uint64_t sub_228BAA688(uint64_t a1)
{
  return get_witness_table_15_MapKit_SwiftUI0A7ContentRzl0cD008ModifiedE0VyxAA022_EnvironmentKeyWritingaE8ModifierVyAC11StrokeStyleVGGAaBHpxAaBHD1__AjA01_aeJ0HPyHCHCTm(a1, &qword_268294EC0);
}

uint64_t get_witness_table_15_MapKit_SwiftUI0A7ContentRzl0cD008ModifiedE0VyxAA022_EnvironmentKeyWritingaE8ModifierVyAC11StrokeStyleVGGAaBHpxAaBHD1__AjA01_aeJ0HPyHCHCTm(uint64_t a1, uint64_t *a2)
{
  return swift_getWitnessTable();
}

uint64_t sub_228BAA700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268293368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for MapContentForegroundShapeStyleKey()
{
  return &type metadata for MapContentForegroundShapeStyleKey;
}

ValueMetadata *type metadata accessor for MapContentOverlayLevelKey()
{
  return &type metadata for MapContentOverlayLevelKey;
}

ValueMetadata *type metadata accessor for MapContentStrokeShapeStyleKey()
{
  return &type metadata for MapContentStrokeShapeStyleKey;
}

ValueMetadata *type metadata accessor for MapContentStrokeStyleKey()
{
  return &type metadata for MapContentStrokeStyleKey;
}

unint64_t sub_228BAA7A8()
{
  unint64_t result = qword_268294EC8;
  if (!qword_268294EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294EC8);
  }
  return result;
}

unint64_t sub_228BAA7FC()
{
  unint64_t result = qword_268291420;
  if (!qword_268291420)
  {
    type metadata accessor for MKOverlayLevel(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268291420);
  }
  return result;
}

uint64_t View.lookAroundViewer(isPresented:initialScene:allowsNavigation:showsRoadLabels:pointsOfInterest:onDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, char a6, uint64_t *a7)
{
  uint64_t v11 = *a7;
  uint64_t v10 = a7[1];
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a4;
  *(unsigned char *)(v12 + 24) = a5;
  *(unsigned char *)(v12 + 25) = a6;
  *(void *)(v12 + 32) = v11;
  *(void *)(v12 + 40) = v10;
  swift_bridgeObjectRetain();
  id v13 = a4;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294ED0);
  sub_228BAAC90();
  sub_228BAD068();

  return swift_release();
}

uint64_t sub_228BAA968@<X0>(void *a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v33 = a3;
  uint64_t v34 = a6;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294F08);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = type metadata accessor for LookAroundPreview();
  uint64_t v14 = v13 - 8;
  MEMORY[0x270FA5388](v13);
  int64_t v16 = &v32[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v17);
  char v19 = &v32[-v18];
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294EE8);
  uint64_t v21 = v20 - 8;
  MEMORY[0x270FA5388](v20);
  long long v23 = &v32[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v24 = (uint64_t *)&v16[*(int *)(v14 + 44)];
  *long long v24 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268291BE8);
  swift_storeEnumTagMultiPayload();
  *((void *)v16 + 1) = 0;
  *((void *)v16 + 2) = 0;
  *(void *)int64_t v16 = a1;
  v16[24] = a2;
  v16[25] = v33;
  *((void *)v16 + 4) = a4;
  *((void *)v16 + 5) = a5;
  *((void *)v16 + 6) = 0;
  sub_228BAB33C((uint64_t)v16, (uint64_t)v19);
  swift_bridgeObjectRetain();
  id v25 = a1;
  swift_bridgeObjectRetain();
  LOBYTE(v16) = sub_228BACF88();
  sub_228BAB3A0((uint64_t)v19, (uint64_t)v23);
  v23[*(int *)(v21 + 44)] = (_BYTE)v16;
  sub_228BAB404((uint64_t)v19);
  uint64_t v26 = *MEMORY[0x263F184F8];
  uint64_t v27 = sub_228BAC568();
  uint64_t v28 = *(void *)(v27 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v28 + 104))(v12, v26, v27);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v28 + 56))(v12, 0, 1, v27);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294ED0);
  uint64_t v30 = v34;
  sub_228AD2708((uint64_t)v12, v34 + *(int *)(v29 + 36), &qword_268294F08);
  sub_228AD2708((uint64_t)v23, v30, &qword_268294EE8);
  sub_228AC1A50((uint64_t)v12, &qword_268294F08);
  return sub_228AC1A50((uint64_t)v23, &qword_268294EE8);
}

uint64_t sub_228BAAC34()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_228BAAC7C@<X0>(uint64_t a1@<X8>)
{
  return sub_228BAA968(*(void **)(v1 + 16), *(unsigned char *)(v1 + 24), *(unsigned __int8 *)(v1 + 25), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

unint64_t sub_228BAAC90()
{
  unint64_t result = qword_268294ED8;
  if (!qword_268294ED8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294ED0);
    sub_228BAAD0C();
    sub_228BAADE0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294ED8);
  }
  return result;
}

unint64_t sub_228BAAD0C()
{
  unint64_t result = qword_268294EE0;
  if (!qword_268294EE0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294EE8);
    sub_228BAAD88();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294EE0);
  }
  return result;
}

unint64_t sub_228BAAD88()
{
  unint64_t result = qword_268294EF0;
  if (!qword_268294EF0)
  {
    type metadata accessor for LookAroundPreview();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294EF0);
  }
  return result;
}

unint64_t sub_228BAADE0()
{
  unint64_t result = qword_268294EF8;
  if (!qword_268294EF8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294F00);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294EF8);
  }
  return result;
}

uint64_t View.lookAroundViewer(isPresented:scene:allowsNavigation:showsRoadLabels:pointsOfInterest:onDismiss:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, char a7, char a8, uint64_t *a9)
{
  uint64_t v14 = *a9;
  uint64_t v15 = a9[1];
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  *(void *)(v16 + 32) = a6;
  *(unsigned char *)(v16 + 40) = a7;
  *(unsigned char *)(v16 + 41) = a8;
  *(void *)(v16 + 48) = v14;
  *(void *)(v16 + 56) = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  id v17 = a6;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268294ED0);
  sub_228BAAC90();
  sub_228BAD068();

  return swift_release();
}

uint64_t sub_228BAAF74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v37 = a6;
  uint64_t v38 = a8;
  int v35 = a4;
  int v36 = a5;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294F08);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for LookAroundPreview();
  uint64_t v16 = v15 - 8;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v34 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294EE8);
  uint64_t v23 = v22 - 8;
  MEMORY[0x270FA5388](v22);
  id v25 = (char *)&v34 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (uint64_t *)&v18[*(int *)(v16 + 44)];
  *uint64_t v26 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&qword_268291BE8);
  swift_storeEnumTagMultiPayload();
  *(void *)uint64_t v18 = a1;
  *((void *)v18 + 1) = a2 | 0x8000000000000000;
  *((void *)v18 + 2) = a3;
  v18[24] = v35;
  v18[25] = v36;
  *((void *)v18 + 4) = v37;
  *((void *)v18 + 5) = a7;
  *((void *)v18 + 6) = 0;
  sub_228BAB33C((uint64_t)v18, (uint64_t)v21);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  id v27 = a3;
  swift_bridgeObjectRetain();
  LOBYTE(v18) = sub_228BACF88();
  sub_228BAB3A0((uint64_t)v21, (uint64_t)v25);
  v25[*(int *)(v23 + 44)] = (char)v18;
  sub_228BAB404((uint64_t)v21);
  uint64_t v28 = *MEMORY[0x263F184F8];
  uint64_t v29 = sub_228BAC568();
  uint64_t v30 = *(void *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 104))(v14, v28, v29);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v14, 0, 1, v29);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294ED0);
  uint64_t v32 = v38;
  sub_228AD2708((uint64_t)v14, v38 + *(int *)(v31 + 36), &qword_268294F08);
  sub_228AD2708((uint64_t)v25, v32, &qword_268294EE8);
  sub_228AC1A50((uint64_t)v14, &qword_268294F08);
  return sub_228AC1A50((uint64_t)v25, &qword_268294EE8);
}

uint64_t sub_228BAB25C()
{
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_228BAB2B4@<X0>(uint64_t a1@<X8>)
{
  return sub_228BAAF74(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(unsigned __int8 *)(v1 + 41), *(void *)(v1 + 48), *(void *)(v1 + 56), a1);
}

uint64_t sub_228BAB2CC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_228BAB33C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LookAroundPreview();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_228BAB3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LookAroundPreview();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_228BAB404(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LookAroundPreview();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MapLocationCompass.init(scope:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a3 = a1;
  *(unsigned char *)(a3 + 8) = a2 & 1;
  *(void *)(a3 + 16) = KeyPath;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = result;
  *(unsigned char *)(a3 + 40) = 0;
  return result;
}

uint64_t MapLocationCompass.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_268294F10);
  MEMORY[0x270FA5388](v36);
  uint64_t v3 = &v31[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B48);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v34 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_268291B50);
  MEMORY[0x270FA5388](v37);
  uint64_t v7 = (uint64_t *)&v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  int v35 = &v31[-v9];
  uint64_t v10 = type metadata accessor for MapControlsConfig();
  uint64_t v11 = (int *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v33 = *v1;
  int v32 = *((unsigned __int8 *)v1 + 8);
  uint64_t v14 = v1[2];
  char v15 = *((unsigned char *)v1 + 24);
  uint64_t v16 = v1[4];
  char v17 = *((unsigned char *)v1 + 40);
  sub_228AD266C(v14, v15);
  sub_228AD266C(v16, v17);
  sub_228AD266C(v16, v17);
  __int16 v18 = sub_228ACD41C(v16, v17);
  sub_228AD25F8(v16, v17);
  sub_228AD25F8(v14, v15);
  sub_228AD25F8(v16, v17);
  if (v18 == 3) {
    __int16 v19 = 0;
  }
  else {
    __int16 v19 = v18;
  }
  uint64_t v20 = type metadata accessor for MapPitchToggleConfig(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v13, 1, 1, v20);
  uint64_t v21 = &v13[v11[7]];
  uint64_t v22 = type metadata accessor for MapScaleViewConfig(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v23 = &v13[v11[8]];
  uint64_t v24 = type metadata accessor for MapUserLocationButtonConfig(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  id v25 = &v13[v11[9]];
  uint64_t v26 = type metadata accessor for MapCompassConfig(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  *(_WORD *)&v13[v11[10]] = 2;
  *(_WORD *)&v13[v11[11]] = 2;
  *(_WORD *)&v13[v11[12]] = (v19 << 8) | 1;
  sub_228AD266C(v14, v15);
  sub_228AD266C(v16, v17);
  sub_228AD266C(v14, v15);
  LOBYTE(v25) = sub_228ACD218(v14, v15);
  sub_228AD25F8(v14, v15);
  sub_228AD25F8(v14, v15);
  sub_228AD25F8(v16, v17);
  if (v25)
  {
    uint64_t v27 = sub_228BAD108();
    uint64_t v28 = v34;
    sub_228AD35E8((uint64_t)v13, (uint64_t)v34);
    sub_228AD2708((uint64_t)v28, (uint64_t)v7 + *(int *)(v37 + 36), &qword_268291B48);
    *uint64_t v7 = v27;
    sub_228AC1A50((uint64_t)v28, &qword_268291B48);
    uint64_t v29 = v35;
    sub_228AD364C((uint64_t)v7, (uint64_t)v35);
    sub_228AD2708((uint64_t)v29, (uint64_t)v3, &qword_268291B50);
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_268294F18);
    sub_228ACD6EC();
    sub_228BAB9EC();
    sub_228BACCC8();
    sub_228AC1A50((uint64_t)v29, &qword_268291B50);
  }
  else
  {
    *(void *)uint64_t v3 = swift_getKeyPath();
    v3[8] = 0;
    *((void *)v3 + 2) = v33;
    v3[24] = v32;
    v3[25] = 1;
    v3[26] = v19;
    *(_WORD *)(v3 + 27) = 257;
    swift_storeEnumTagMultiPayload();
    __swift_instantiateConcreteTypeFromMangledName(&qword_268294F18);
    sub_228ACD6EC();
    sub_228BAB9EC();
    sub_228BACCC8();
  }
  return sub_228AD358C((uint64_t)v13);
}

unint64_t sub_228BAB9EC()
{
  unint64_t result = qword_268294F20;
  if (!qword_268294F20)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294F18);
    sub_228BABA68();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294F20);
  }
  return result;
}

unint64_t sub_228BABA68()
{
  unint64_t result = qword_268294F28;
  if (!qword_268294F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294F28);
  }
  return result;
}

uint64_t sub_228BABABC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for MapLocationCompass(uint64_t a1)
{
  sub_228AD25F8(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);

  return sub_228AD25F8(v2, v3);
}

uint64_t initializeWithCopy for MapLocationCompass(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  sub_228AD266C(v4, v5);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(v2 + 32);
  LOBYTE(v2) = *(unsigned char *)(v2 + 40);
  sub_228AD266C(v6, v2);
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v2;
  return a1;
}

uint64_t assignWithCopy for MapLocationCompass(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  char v6 = *((unsigned char *)a2 + 24);
  sub_228AD266C(v5, v6);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  sub_228AD25F8(v7, v8);
  uint64_t v9 = v2[4];
  LOBYTE(v2) = *((unsigned char *)v2 + 40);
  sub_228AD266C(v9, (char)v2);
  uint64_t v10 = *(void *)(a1 + 32);
  char v11 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = (_BYTE)v2;
  sub_228AD25F8(v10, v11);
  return a1;
}

uint64_t assignWithTake for MapLocationCompass(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  sub_228AD25F8(v6, v7);
  char v8 = *(unsigned char *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v8;
  sub_228AD25F8(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapLocationCompass(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MapLocationCompass(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapLocationCompass()
{
  return &type metadata for MapLocationCompass;
}

unint64_t sub_228BABD40()
{
  unint64_t result = qword_268294F30;
  if (!qword_268294F30)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_268294F38);
    sub_228ACD6EC();
    sub_228BAB9EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_268294F30);
  }
  return result;
}

ValueMetadata *type metadata accessor for _MapLocationCompass()
{
  return &type metadata for _MapLocationCompass;
}

uint64_t sub_228BABDCC()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for MapLocationCompassConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x228BABEB4);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapLocationCompassConfig()
{
  return &type metadata for MapLocationCompassConfig;
}

uint64_t compatibilityInitializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(1);
}

uint64_t __isPlatformVersionAtLeast(uint64_t a1, int a2, int a3, int a4)
{
  if (qword_26829D4D8 == -1)
  {
    if (qword_26829D4E0) {
      return _availability_version_check();
    }
  }
  else
  {
    dispatch_once_f(&qword_26829D4D8, 0, (dispatch_function_t)initializeAvailabilityCheck);
    if (qword_26829D4E0) {
      return _availability_version_check();
    }
  }
  if (qword_26829D4D0 == -1)
  {
    BOOL v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2) {
      return 1;
    }
  }
  else
  {
    dispatch_once_f(&qword_26829D4D0, 0, (dispatch_function_t)compatibilityInitializeAvailabilityCheck);
    BOOL v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2) {
      return 1;
    }
  }
  if (v8) {
    return 0;
  }
  if (dword_26829D4C4 > a3) {
    return 1;
  }
  return dword_26829D4C4 >= a3 && dword_26829D4C8 >= a4;
}

uint64_t initializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(0);
}

uint64_t _initializeAvailabilityCheck(uint64_t result)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v1 = qword_26829D4E0;
  if (qword_26829D4E0) {
    BOOL v2 = result == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2)
  {
    if (MEMORY[0x263EF8368])
    {
      uint64_t v1 = MEMORY[0x270FA5398];
      qword_26829D4E0 = MEMORY[0x270FA5398];
    }
    if (!v1 || result != 0)
    {
      unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        unsigned int v4 = *(unsigned __int8 **)result;
        unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          uint64_t v5 = (uint64_t (*)(void))result;
          unint64_t v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            char v7 = (uint64_t (*)(void, uint64_t, void, void))result;
            unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              BOOL v8 = (uint64_t (*)(void, const char *, uint64_t, unsigned __int8 *))result;
              unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  char v10 = (uint64_t (*)(uint64_t))result;
                  unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    char v11 = (uint64_t (*)(void))result;
                    unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    uint64_t v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      unint64_t result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        uint64_t v12 = (FILE *)result;
                        unint64_t result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          uint64_t v13 = (FILE *)result;
                          uint64_t v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          uint64_t v14 = MEMORY[0x22A6A7530](v13);
                          if (v14 < 0)
                          {
                            uint64_t v16 = 0;
                          }
                          else
                          {
                            size_t v15 = v14;
                            rewind(v13);
                            uint64_t v16 = malloc(v15);
                            if (v16)
                            {
                              uint64_t v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                uint64_t v17 = v5(0);
                                if (v17)
                                {
                                  uint64_t v18 = v17;
                                  __int16 v19 = v13;
                                  if (v6) {
                                    uint64_t v20 = ((uint64_t (*)(void, uint64_t, void, void, void))v6)(0, v17, 0, 0, 0);
                                  }
                                  else {
                                    uint64_t v20 = v7(0, v17, 0, 0);
                                  }
                                  uint64_t v21 = v20;
                                  if (v20)
                                  {
                                    uint64_t v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      uint64_t v23 = v22;
                                      uint64_t v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        uint64_t v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984)) {
                                            sscanf(v29, "%d.%d.%d", &_MergedGlobals, &dword_26829D4C4, &dword_26829D4C8);
                                          }
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    __int16 v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  __int16 v19 = v13;
                                }
                                uint64_t v16 = v26;
                              }
                              else
                              {
                                uint64_t v16 = v26;
                                __int16 v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          __int16 v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

ProtocolDescriptor *_mapContentProtocolDescriptor()
{
  return &protocol descriptor for MapContent;
}

uint64_t _callVisitMapContentType1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _callVisitMapContentType2(a1, a2, a2, a3);
}

uint64_t sub_228BAC3E8()
{
  return MEMORY[0x270EEDAC8]();
}

uint64_t sub_228BAC3F8()
{
  return MEMORY[0x270EF07E0]();
}

uint64_t sub_228BAC408()
{
  return MEMORY[0x270EF0BB8]();
}

uint64_t sub_228BAC418()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t sub_228BAC428()
{
  return MEMORY[0x270EF1490]();
}

uint64_t sub_228BAC438()
{
  return MEMORY[0x270EF14A0]();
}

uint64_t sub_228BAC448()
{
  return MEMORY[0x270EF1550]();
}

uint64_t sub_228BAC458()
{
  return MEMORY[0x270EF17B0]();
}

uint64_t sub_228BAC468()
{
  return MEMORY[0x270F0F0A8]();
}

uint64_t sub_228BAC478()
{
  return MEMORY[0x270F0F0B0]();
}

uint64_t sub_228BAC488()
{
  return MEMORY[0x270F0F0B8]();
}

uint64_t sub_228BAC498()
{
  return MEMORY[0x270F0F0C0]();
}

uint64_t sub_228BAC4A8()
{
  return MEMORY[0x270F0F0C8]();
}

uint64_t sub_228BAC4B8()
{
  return MEMORY[0x270F0F0D0]();
}

uint64_t sub_228BAC4D8()
{
  return MEMORY[0x270F0F0F0]();
}

uint64_t sub_228BAC4E8()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_228BAC4F8()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t sub_228BAC508()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_228BAC518()
{
  return MEMORY[0x270EE3C20]();
}

uint64_t sub_228BAC528()
{
  return MEMORY[0x270EE3CE0]();
}

uint64_t sub_228BAC538()
{
  return MEMORY[0x270EFEBD0]();
}

uint64_t sub_228BAC548()
{
  return MEMORY[0x270EFEE18]();
}

uint64_t sub_228BAC558()
{
  return MEMORY[0x270EFEEB0]();
}

uint64_t sub_228BAC568()
{
  return MEMORY[0x270EFEF30]();
}

uint64_t sub_228BAC578()
{
  return MEMORY[0x270EFEF48]();
}

uint64_t sub_228BAC588()
{
  return MEMORY[0x270EFEF50]();
}

uint64_t sub_228BAC598()
{
  return MEMORY[0x270EFEFD0]();
}

uint64_t sub_228BAC5A8()
{
  return MEMORY[0x270EFF120]();
}

uint64_t sub_228BAC5B8()
{
  return MEMORY[0x270EFF128]();
}

uint64_t sub_228BAC5C8()
{
  return MEMORY[0x270EFF1B0]();
}

uint64_t sub_228BAC5D8()
{
  return MEMORY[0x270EFF1D0]();
}

uint64_t sub_228BAC5E8()
{
  return MEMORY[0x270EFF238]();
}

uint64_t sub_228BAC5F8()
{
  return MEMORY[0x270EFF240]();
}

uint64_t sub_228BAC608()
{
  return MEMORY[0x270EFF270]();
}

uint64_t sub_228BAC618()
{
  return MEMORY[0x270EFF330]();
}

uint64_t sub_228BAC628()
{
  return MEMORY[0x270EFF4A8]();
}

uint64_t sub_228BAC638()
{
  return MEMORY[0x270EFF4B0]();
}

uint64_t sub_228BAC648()
{
  return MEMORY[0x270EFF4B8]();
}

uint64_t sub_228BAC658()
{
  return MEMORY[0x270EFF4C0]();
}

uint64_t sub_228BAC668()
{
  return MEMORY[0x270EFF510]();
}

uint64_t sub_228BAC678()
{
  return MEMORY[0x270EFF520]();
}

uint64_t sub_228BAC688()
{
  return MEMORY[0x270EFF538]();
}

uint64_t sub_228BAC698()
{
  return MEMORY[0x270EFF598]();
}

uint64_t sub_228BAC6A8()
{
  return MEMORY[0x270EFF5E0]();
}

uint64_t sub_228BAC6B8()
{
  return MEMORY[0x270EFF6D0]();
}

uint64_t sub_228BAC6C8()
{
  return MEMORY[0x270EFF6E0]();
}

uint64_t sub_228BAC6D8()
{
  return MEMORY[0x270EFF6E8]();
}

uint64_t sub_228BAC6E8()
{
  return MEMORY[0x270EFF6F8]();
}

uint64_t sub_228BAC6F8()
{
  return MEMORY[0x270EFF870]();
}

uint64_t sub_228BAC708()
{
  return MEMORY[0x270EFF878]();
}

uint64_t sub_228BAC718()
{
  return MEMORY[0x270EFF888]();
}

uint64_t sub_228BAC728()
{
  return MEMORY[0x270EFF898]();
}

uint64_t sub_228BAC738()
{
  return MEMORY[0x270EFF8A0]();
}

uint64_t sub_228BAC748()
{
  return MEMORY[0x270EFF9A0]();
}

uint64_t sub_228BAC768()
{
  return MEMORY[0x270EFFA08]();
}

uint64_t sub_228BAC778()
{
  return MEMORY[0x270EFFA10]();
}

uint64_t sub_228BAC788()
{
  return MEMORY[0x270EFFA18]();
}

uint64_t sub_228BAC798()
{
  return MEMORY[0x270EFFB80]();
}

uint64_t sub_228BAC7A8()
{
  return MEMORY[0x270EFFD88]();
}

uint64_t sub_228BAC7B8()
{
  return MEMORY[0x270EFFDA0]();
}

uint64_t sub_228BAC7C8()
{
  return MEMORY[0x270EFFDA8]();
}

uint64_t sub_228BAC7D8()
{
  return MEMORY[0x270EFFE30]();
}

uint64_t sub_228BAC7E8()
{
  return MEMORY[0x270EFFE38]();
}

uint64_t sub_228BAC7F8()
{
  return MEMORY[0x270EFFE40]();
}

uint64_t sub_228BAC818()
{
  return MEMORY[0x270EFFE90]();
}

uint64_t sub_228BAC828()
{
  return MEMORY[0x270EFFEA8]();
}

uint64_t sub_228BAC838()
{
  return MEMORY[0x270F00050]();
}

uint64_t sub_228BAC848()
{
  return MEMORY[0x270F00058]();
}

uint64_t sub_228BAC858()
{
  return MEMORY[0x270F00078]();
}

uint64_t sub_228BAC868()
{
  return MEMORY[0x270F001A8]();
}

uint64_t sub_228BAC878()
{
  return MEMORY[0x270F00220]();
}

uint64_t sub_228BAC888()
{
  return MEMORY[0x270F003E0]();
}

uint64_t sub_228BAC898()
{
  return MEMORY[0x270F003E8]();
}

uint64_t sub_228BAC8A8()
{
  return MEMORY[0x270F003F0]();
}

uint64_t sub_228BAC8B8()
{
  return MEMORY[0x270F003F8]();
}

uint64_t sub_228BAC8C8()
{
  return MEMORY[0x270F00400]();
}

uint64_t sub_228BAC8D8()
{
  return MEMORY[0x270F00418]();
}

uint64_t sub_228BAC8E8()
{
  return MEMORY[0x270F00430]();
}

uint64_t sub_228BAC8F8()
{
  return MEMORY[0x270F00448]();
}

uint64_t sub_228BAC908()
{
  return MEMORY[0x270F00500]();
}

uint64_t sub_228BAC918()
{
  return MEMORY[0x270F00508]();
}

uint64_t sub_228BAC928()
{
  return MEMORY[0x270F00520]();
}

uint64_t sub_228BAC938()
{
  return MEMORY[0x270F00630]();
}

uint64_t sub_228BAC948()
{
  return MEMORY[0x270F00638]();
}

uint64_t sub_228BAC958()
{
  return MEMORY[0x270F00650]();
}

uint64_t sub_228BAC968()
{
  return MEMORY[0x270F006B8]();
}

uint64_t sub_228BAC978()
{
  return MEMORY[0x270F006C8]();
}

uint64_t sub_228BAC988()
{
  return MEMORY[0x270F006D0]();
}

uint64_t sub_228BAC998()
{
  return MEMORY[0x270F006D8]();
}

uint64_t sub_228BAC9A8()
{
  return MEMORY[0x270F006E0]();
}

uint64_t sub_228BAC9B8()
{
  return MEMORY[0x270F006E8]();
}

uint64_t sub_228BAC9C8()
{
  return MEMORY[0x270F006F0]();
}

uint64_t sub_228BAC9D8()
{
  return MEMORY[0x270F00850]();
}

uint64_t sub_228BAC9E8()
{
  return MEMORY[0x270F00858]();
}

uint64_t sub_228BAC9F8()
{
  return MEMORY[0x270F00878]();
}

uint64_t sub_228BACA08()
{
  return MEMORY[0x270F00880]();
}

uint64_t sub_228BACA18()
{
  return MEMORY[0x270F008E8]();
}

uint64_t sub_228BACA28()
{
  return MEMORY[0x270F008F0]();
}

uint64_t sub_228BACA38()
{
  return MEMORY[0x270F00940]();
}

uint64_t sub_228BACA48()
{
  return MEMORY[0x270F00948]();
}

uint64_t sub_228BACA58()
{
  return MEMORY[0x270F00A50]();
}

uint64_t sub_228BACA68()
{
  return MEMORY[0x270F00A58]();
}

uint64_t sub_228BACA78()
{
  return MEMORY[0x270F00A60]();
}

uint64_t sub_228BACA88()
{
  return MEMORY[0x270F00AB8]();
}

uint64_t sub_228BACA98()
{
  return MEMORY[0x270F00AE8]();
}

uint64_t sub_228BACAA8()
{
  return MEMORY[0x270F00B48]();
}

uint64_t sub_228BACAB8()
{
  return MEMORY[0x270F00CC8]();
}

uint64_t sub_228BACAC8()
{
  return MEMORY[0x270F00E50]();
}

uint64_t sub_228BACAD8()
{
  return MEMORY[0x270F00E68]();
}

uint64_t sub_228BACAE8()
{
  return MEMORY[0x270F00ED8]();
}

uint64_t sub_228BACAF8()
{
  return MEMORY[0x270F00EE0]();
}

uint64_t sub_228BACB08()
{
  return MEMORY[0x270F00F10]();
}

uint64_t sub_228BACB18()
{
  return MEMORY[0x270F00F20]();
}

uint64_t sub_228BACB28()
{
  return MEMORY[0x270F00F70]();
}

uint64_t sub_228BACB38()
{
  return MEMORY[0x270F00F78]();
}

uint64_t sub_228BACB48()
{
  return MEMORY[0x270F00F80]();
}

uint64_t sub_228BACB58()
{
  return MEMORY[0x270F01138]();
}

uint64_t sub_228BACB68()
{
  return MEMORY[0x270F01140]();
}

uint64_t sub_228BACB78()
{
  return MEMORY[0x270F012A0]();
}

uint64_t sub_228BACB88()
{
  return MEMORY[0x270F012A8]();
}

uint64_t sub_228BACB98()
{
  return MEMORY[0x270F012B0]();
}

uint64_t sub_228BACBA8()
{
  return MEMORY[0x270F012B8]();
}

uint64_t sub_228BACBB8()
{
  return MEMORY[0x270F012C0]();
}

uint64_t sub_228BACBC8()
{
  return MEMORY[0x270F012C8]();
}

uint64_t sub_228BACBD8()
{
  return MEMORY[0x270F012D0]();
}

uint64_t sub_228BACBE8()
{
  return MEMORY[0x270F012D8]();
}

uint64_t sub_228BACBF8()
{
  return MEMORY[0x270F016E0]();
}

uint64_t sub_228BACC08()
{
  return MEMORY[0x270F016F8]();
}

uint64_t sub_228BACC18()
{
  return MEMORY[0x270F01708]();
}

uint64_t sub_228BACC38()
{
  return MEMORY[0x270F01728]();
}

uint64_t sub_228BACC48()
{
  return MEMORY[0x270F01738]();
}

uint64_t sub_228BACC58()
{
  return MEMORY[0x270F01748]();
}

uint64_t sub_228BACC68()
{
  return MEMORY[0x270F01758]();
}

uint64_t sub_228BACC78()
{
  return MEMORY[0x270F01768]();
}

uint64_t sub_228BACC88()
{
  return MEMORY[0x270F01778]();
}

uint64_t sub_228BACCA8()
{
  return MEMORY[0x270F01790]();
}

uint64_t sub_228BACCB8()
{
  return MEMORY[0x270F017E8]();
}

uint64_t sub_228BACCC8()
{
  return MEMORY[0x270F01800]();
}

uint64_t sub_228BACCD8()
{
  return MEMORY[0x270F01B78]();
}

uint64_t sub_228BACCE8()
{
  return MEMORY[0x270F01C68]();
}

uint64_t sub_228BACCF8()
{
  return MEMORY[0x270F01C90]();
}

uint64_t sub_228BACD08()
{
  return MEMORY[0x270F01CA8]();
}

uint64_t sub_228BACD18()
{
  return MEMORY[0x270F01E88]();
}

uint64_t sub_228BACD28()
{
  return MEMORY[0x270F01F68]();
}

uint64_t sub_228BACD38()
{
  return MEMORY[0x270F01F98]();
}

uint64_t sub_228BACD48()
{
  return MEMORY[0x270F02040]();
}

uint64_t sub_228BACD58()
{
  return MEMORY[0x270F02048]();
}

uint64_t sub_228BACD68()
{
  return MEMORY[0x270F02050]();
}

uint64_t sub_228BACD78()
{
  return MEMORY[0x270F02058]();
}

uint64_t sub_228BACD88()
{
  return MEMORY[0x270F02148]();
}

uint64_t sub_228BACD98()
{
  return MEMORY[0x270F02150]();
}

uint64_t _s15_MapKit_SwiftUI05EmptyA7ContentV05_makeaF07content6inputsAA01_aF7OutputsV0cD011_GraphValueVyACG_AA01_aF6InputsVtFZ_0()
{
  return MEMORY[0x270F02158]();
}

uint64_t sub_228BACDB8()
{
  return MEMORY[0x270F02160]();
}

uint64_t sub_228BACDC8()
{
  return MEMORY[0x270F02168]();
}

uint64_t sub_228BACDD8()
{
  return MEMORY[0x270F02170]();
}

uint64_t sub_228BACDE8()
{
  return MEMORY[0x270F02268]();
}

uint64_t sub_228BACDF8()
{
  return MEMORY[0x270F02270]();
}

uint64_t sub_228BACE08()
{
  return MEMORY[0x270F022C0]();
}

uint64_t sub_228BACE18()
{
  return MEMORY[0x270F022C8]();
}

uint64_t sub_228BACE28()
{
  return MEMORY[0x270F022D0]();
}

uint64_t sub_228BACE38()
{
  return MEMORY[0x270F022D8]();
}

uint64_t sub_228BACE48()
{
  return MEMORY[0x270F023D8]();
}

uint64_t sub_228BACE58()
{
  return MEMORY[0x270F023E0]();
}

uint64_t sub_228BACE68()
{
  return MEMORY[0x270F02418]();
}

uint64_t sub_228BACE78()
{
  return MEMORY[0x270F02420]();
}

uint64_t sub_228BACE88()
{
  return MEMORY[0x270F02430]();
}

uint64_t sub_228BACE98()
{
  return MEMORY[0x270F02438]();
}

uint64_t sub_228BACEA8()
{
  return MEMORY[0x270F024F0]();
}

uint64_t sub_228BACEB8()
{
  return MEMORY[0x270F024F8]();
}

uint64_t sub_228BACEC8()
{
  return MEMORY[0x270F026A0]();
}

uint64_t sub_228BACED8()
{
  return MEMORY[0x270F026B0]();
}

uint64_t sub_228BACEE8()
{
  return MEMORY[0x270F026C8]();
}

uint64_t sub_228BACF08()
{
  return MEMORY[0x270F026E0]();
}

uint64_t sub_228BACF18()
{
  return MEMORY[0x270F026F0]();
}

uint64_t sub_228BACF28()
{
  return MEMORY[0x270F02700]();
}

uint64_t sub_228BACF48()
{
  return MEMORY[0x270F02988]();
}

uint64_t sub_228BACF58()
{
  return MEMORY[0x270F029D0]();
}

uint64_t sub_228BACF68()
{
  return MEMORY[0x270F029D8]();
}

uint64_t sub_228BACF78()
{
  return MEMORY[0x270F029E0]();
}

uint64_t sub_228BACF88()
{
  return MEMORY[0x270F02A30]();
}

uint64_t sub_228BACF98()
{
  return MEMORY[0x270F02A98]();
}

uint64_t sub_228BACFA8()
{
  return MEMORY[0x270F03228]();
}

uint64_t sub_228BACFB8()
{
  return MEMORY[0x270F03250]();
}

uint64_t sub_228BACFC8()
{
  return MEMORY[0x270F03288]();
}

uint64_t sub_228BACFD8()
{
  return MEMORY[0x270F032A0]();
}

uint64_t sub_228BACFE8()
{
  return MEMORY[0x270F032C0]();
}

uint64_t sub_228BACFF8()
{
  return MEMORY[0x270F032D0]();
}

uint64_t sub_228BAD008()
{
  return MEMORY[0x270F03310]();
}

uint64_t sub_228BAD018()
{
  return MEMORY[0x270F033B0]();
}

uint64_t sub_228BAD028()
{
  return MEMORY[0x270F034A0]();
}

uint64_t sub_228BAD038()
{
  return MEMORY[0x270F03500]();
}

uint64_t sub_228BAD058()
{
  return MEMORY[0x270F036C0]();
}

uint64_t sub_228BAD068()
{
  return MEMORY[0x270F037C0]();
}

uint64_t sub_228BAD078()
{
  return MEMORY[0x270F03968]();
}

uint64_t sub_228BAD088()
{
  return MEMORY[0x270F03A88]();
}

uint64_t sub_228BAD098()
{
  return MEMORY[0x270F03C48]();
}

uint64_t sub_228BAD0A8()
{
  return MEMORY[0x270F04008]();
}

uint64_t sub_228BAD0B8()
{
  return MEMORY[0x270F04010]();
}

uint64_t sub_228BAD0C8()
{
  return MEMORY[0x270F04028]();
}

uint64_t sub_228BAD0D8()
{
  return MEMORY[0x270F04170]();
}

uint64_t sub_228BAD0E8()
{
  return MEMORY[0x270F04188]();
}

uint64_t sub_228BAD0F8()
{
  return MEMORY[0x270F043C0]();
}

uint64_t sub_228BAD108()
{
  return MEMORY[0x270F04478]();
}

uint64_t sub_228BAD118()
{
  return MEMORY[0x270F045F0]();
}

uint64_t sub_228BAD128()
{
  return MEMORY[0x270F045F8]();
}

uint64_t sub_228BAD138()
{
  return MEMORY[0x270F04620]();
}

uint64_t sub_228BAD148()
{
  return MEMORY[0x270F04650]();
}

uint64_t sub_228BAD158()
{
  return MEMORY[0x270F04738]();
}

uint64_t sub_228BAD168()
{
  return MEMORY[0x270F04748]();
}

uint64_t sub_228BAD178()
{
  return MEMORY[0x270F04818]();
}

uint64_t sub_228BAD188()
{
  return MEMORY[0x270F04820]();
}

uint64_t sub_228BAD198()
{
  return MEMORY[0x270F04830]();
}

uint64_t sub_228BAD1A8()
{
  return MEMORY[0x270F04848]();
}

uint64_t sub_228BAD1B8()
{
  return MEMORY[0x270F04850]();
}

uint64_t sub_228BAD1C8()
{
  return MEMORY[0x270F04B20]();
}

uint64_t sub_228BAD1D8()
{
  return MEMORY[0x270F04B30]();
}

uint64_t sub_228BAD1E8()
{
  return MEMORY[0x270F04B48]();
}

uint64_t sub_228BAD1F8()
{
  return MEMORY[0x270F04B68]();
}

uint64_t sub_228BAD208()
{
  return MEMORY[0x270F04B80]();
}

uint64_t sub_228BAD218()
{
  return MEMORY[0x270F04BF8]();
}

uint64_t sub_228BAD228()
{
  return MEMORY[0x270F04C40]();
}

uint64_t sub_228BAD238()
{
  return MEMORY[0x270F04C48]();
}

uint64_t sub_228BAD248()
{
  return MEMORY[0x270F04C50]();
}

uint64_t sub_228BAD258()
{
  return MEMORY[0x270F04C58]();
}

uint64_t sub_228BAD268()
{
  return MEMORY[0x270F04C60]();
}

uint64_t sub_228BAD278()
{
  return MEMORY[0x270F04C68]();
}

uint64_t sub_228BAD288()
{
  return MEMORY[0x270F04CC0]();
}

uint64_t sub_228BAD298()
{
  return MEMORY[0x270F04EC0]();
}

uint64_t sub_228BAD2A8()
{
  return MEMORY[0x270F05078]();
}

uint64_t sub_228BAD2B8()
{
  return MEMORY[0x270F05240]();
}

uint64_t sub_228BAD2C8()
{
  return MEMORY[0x270F05248]();
}

uint64_t sub_228BAD2D8()
{
  return MEMORY[0x270F053C8]();
}

uint64_t sub_228BAD2E8()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t sub_228BAD2F8()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t sub_228BAD308()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t sub_228BAD318()
{
  return MEMORY[0x270F9CFB0]();
}

uint64_t sub_228BAD328()
{
  return MEMORY[0x270F9CFC0]();
}

uint64_t sub_228BAD338()
{
  return MEMORY[0x270F9D068]();
}

uint64_t sub_228BAD348()
{
  return MEMORY[0x270F9D0A8]();
}

uint64_t sub_228BAD358()
{
  return MEMORY[0x270F9D0E8]();
}

uint64_t sub_228BAD368()
{
  return MEMORY[0x270F9D148]();
}

uint64_t sub_228BAD378()
{
  return MEMORY[0x270F9D1C8]();
}

uint64_t sub_228BAD388()
{
  return MEMORY[0x270F9D1D0]();
}

uint64_t sub_228BAD398()
{
  return MEMORY[0x270F9D208]();
}

uint64_t sub_228BAD3A8()
{
  return MEMORY[0x270F9D210]();
}

uint64_t sub_228BAD3B8()
{
  return MEMORY[0x270F9D320]();
}

uint64_t sub_228BAD3C8()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_228BAD3D8()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_228BAD3E8()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t sub_228BAD3F8()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t sub_228BAD408()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_228BAD418()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_228BAD428()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_228BAD438()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_228BAD448()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_228BAD458()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t sub_228BAD468()
{
  return MEMORY[0x270F9D938]();
}

uint64_t sub_228BAD478()
{
  return MEMORY[0x270F9D968]();
}

uint64_t sub_228BAD488()
{
  return MEMORY[0x270F9DBA0]();
}

uint64_t sub_228BAD498()
{
  return MEMORY[0x270EF1B88]();
}

uint64_t sub_228BAD4A8()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t sub_228BAD4B8()
{
  return MEMORY[0x270F9DBB8]();
}

uint64_t sub_228BAD4C8()
{
  return MEMORY[0x270F9DBD0]();
}

uint64_t sub_228BAD4D8()
{
  return MEMORY[0x270F9DBF0]();
}

uint64_t sub_228BAD4E8()
{
  return MEMORY[0x270F9DBF8]();
}

uint64_t sub_228BAD4F8()
{
  return MEMORY[0x270F9DC10]();
}

uint64_t sub_228BAD508()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t sub_228BAD518()
{
  return MEMORY[0x270F9DC30]();
}

uint64_t sub_228BAD528()
{
  return MEMORY[0x270F9DC50]();
}

uint64_t sub_228BAD538()
{
  return MEMORY[0x270F9DC60]();
}

uint64_t sub_228BAD548()
{
  return MEMORY[0x270F9DC88]();
}

uint64_t sub_228BAD558()
{
  return MEMORY[0x270F9DCA8]();
}

uint64_t sub_228BAD568()
{
  return MEMORY[0x270F9DCD8]();
}

uint64_t sub_228BAD578()
{
  return MEMORY[0x270F9DD08]();
}

uint64_t sub_228BAD588()
{
  return MEMORY[0x270F9DD28]();
}

uint64_t sub_228BAD598()
{
  return MEMORY[0x270FA1EA0]();
}

uint64_t sub_228BAD5A8()
{
  return MEMORY[0x270FA1EA8]();
}

uint64_t sub_228BAD5B8()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t sub_228BAD5C8()
{
  return MEMORY[0x270F9DF60]();
}

uint64_t sub_228BAD5D8()
{
  return MEMORY[0x270F9DF80]();
}

uint64_t sub_228BAD5E8()
{
  return MEMORY[0x270F9DFC0]();
}

uint64_t sub_228BAD5F8()
{
  return MEMORY[0x270F9DFD0]();
}

uint64_t sub_228BAD608()
{
  return MEMORY[0x270F9DFE8]();
}

uint64_t sub_228BAD618()
{
  return MEMORY[0x270F9E080]();
}

uint64_t sub_228BAD628()
{
  return MEMORY[0x270F9E0A0]();
}

uint64_t sub_228BAD638()
{
  return MEMORY[0x270F9E0C0]();
}

uint64_t sub_228BAD648()
{
  return MEMORY[0x270F9E0E0]();
}

uint64_t sub_228BAD658()
{
  return MEMORY[0x270F9E1E0]();
}

uint64_t sub_228BAD668()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t sub_228BAD678()
{
  return MEMORY[0x270FA2E70]();
}

uint64_t sub_228BAD688()
{
  return MEMORY[0x270FA0D70]();
}

uint64_t sub_228BAD698()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t sub_228BAD6A8()
{
  return MEMORY[0x270FA1098]();
}

uint64_t sub_228BAD6B8()
{
  return MEMORY[0x270FA10A0]();
}

uint64_t sub_228BAD6C8()
{
  return MEMORY[0x270FA10A8]();
}

uint64_t sub_228BAD6D8()
{
  return MEMORY[0x270F05438]();
}

uint64_t sub_228BAD6E8()
{
  return MEMORY[0x270FA1170]();
}

uint64_t sub_228BAD6F8()
{
  return MEMORY[0x270FA1180]();
}

uint64_t sub_228BAD708()
{
  return MEMORY[0x270FA1190]();
}

uint64_t sub_228BAD718()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_228BAD728()
{
  return MEMORY[0x270F9E518]();
}

uint64_t sub_228BAD738()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_228BAD748()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_228BAD768()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t sub_228BAD778()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t sub_228BAD788()
{
  return MEMORY[0x270F9E818]();
}

uint64_t sub_228BAD798()
{
  return MEMORY[0x270F9E870]();
}

uint64_t sub_228BAD7A8()
{
  return MEMORY[0x270F9E8B8]();
}

uint64_t sub_228BAD7B8()
{
  return MEMORY[0x270F9E8C8]();
}

uint64_t sub_228BAD7C8()
{
  return MEMORY[0x270F9E8D8]();
}

uint64_t sub_228BAD7D8()
{
  return MEMORY[0x270F9E8E8]();
}

uint64_t sub_228BAD7E8()
{
  return MEMORY[0x270F9E958]();
}

uint64_t sub_228BAD7F8()
{
  return MEMORY[0x270F9E960]();
}

uint64_t sub_228BAD808()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_228BAD818()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_228BAD828()
{
  return MEMORY[0x270F9E9D0]();
}

uint64_t sub_228BAD838()
{
  return MEMORY[0x270F9EA38]();
}

uint64_t sub_228BAD848()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_228BAD858()
{
  return MEMORY[0x270F9EA48]();
}

uint64_t sub_228BAD868()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_228BAD878()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t sub_228BAD888()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t sub_228BAD898()
{
  return MEMORY[0x270F9EBD8]();
}

uint64_t sub_228BAD8A8()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t sub_228BAD8B8()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t sub_228BAD8C8()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t sub_228BAD8D8()
{
  return MEMORY[0x270F9EC48]();
}

uint64_t sub_228BAD8E8()
{
  return MEMORY[0x270F9EC88]();
}

uint64_t sub_228BAD8F8()
{
  return MEMORY[0x270F9EC90]();
}

uint64_t sub_228BAD908()
{
  return MEMORY[0x270F9ED10]();
}

uint64_t sub_228BAD918()
{
  return MEMORY[0x270F9ED68]();
}

uint64_t sub_228BAD928()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_228BAD938()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t sub_228BAD948()
{
  return MEMORY[0x270F9F000]();
}

uint64_t sub_228BAD958()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_228BAD968()
{
  return MEMORY[0x270F9F098]();
}

uint64_t sub_228BAD978()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t sub_228BAD988()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_228BAD998()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_228BAD9A8()
{
  return MEMORY[0x270F9F1A8]();
}

uint64_t sub_228BAD9B8()
{
  return MEMORY[0x270F9F4C8]();
}

uint64_t sub_228BAD9C8()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_228BAD9D8()
{
  return MEMORY[0x270F9F7A8]();
}

uint64_t sub_228BAD9E8()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_228BAD9F8()
{
  return MEMORY[0x270F9F918]();
}

uint64_t sub_228BADA08()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t sub_228BADA18()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_228BADA28()
{
  return MEMORY[0x270EE9FB8]();
}

uint64_t sub_228BADA38()
{
  return MEMORY[0x270F9FC40]();
}

uint64_t sub_228BADA48()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_228BADA58()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_228BADA68()
{
  return MEMORY[0x270F9FC68]();
}

uint64_t sub_228BADA78()
{
  return MEMORY[0x270F9FC80]();
}

uint64_t sub_228BADA88()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t sub_228BADAA8()
{
  return MEMORY[0x270EF2770]();
}

uint64_t sub_228BADAB8()
{
  return MEMORY[0x270EF2778]();
}

uint64_t sub_228BADAC8()
{
  return MEMORY[0x270EF2780]();
}

uint64_t sub_228BADAD8()
{
  return MEMORY[0x270FA0128]();
}

uint64_t sub_228BADAE8()
{
  return MEMORY[0x270FA0130]();
}

uint64_t AGCompareValues()
{
  return MEMORY[0x270F0F118]();
}

uint64_t AGCreateWeakAttribute()
{
  return MEMORY[0x270F0F120]();
}

uint64_t AGGraphClearUpdate()
{
  return MEMORY[0x270F0F170]();
}

uint64_t AGGraphCreateIndirectAttribute2()
{
  return MEMORY[0x270F0F188]();
}

uint64_t AGGraphCreateOffsetAttribute2()
{
  return MEMORY[0x270F0F190]();
}

uint64_t AGGraphGetAttributeSubgraph()
{
  return MEMORY[0x270F0F1C0]();
}

uint64_t AGGraphGetCurrentAttribute()
{
  return MEMORY[0x270F0F1E0]();
}

uint64_t AGGraphGetOutputValue()
{
  return MEMORY[0x270F0F1F8]();
}

uint64_t AGGraphGetValue()
{
  return MEMORY[0x270F0F200]();
}

uint64_t AGGraphGetWeakValue()
{
  return MEMORY[0x270F0F210]();
}

uint64_t AGGraphMutateAttribute()
{
  return MEMORY[0x270F0F238]();
}

uint64_t AGGraphSetIndirectAttribute()
{
  return MEMORY[0x270F0F268]();
}

uint64_t AGGraphSetIndirectDependency()
{
  return MEMORY[0x270F0F270]();
}

uint64_t AGGraphSetOutputValue()
{
  return MEMORY[0x270F0F288]();
}

uint64_t AGGraphSetUpdate()
{
  return MEMORY[0x270F0F298]();
}

uint64_t AGGraphSetValue()
{
  return MEMORY[0x270F0F2A8]();
}

uint64_t AGSubgraphAddChild()
{
  return MEMORY[0x270F0F2F8]();
}

uint64_t AGSubgraphCreate()
{
  return MEMORY[0x270F0F328]();
}

uint64_t AGSubgraphGetCurrent()
{
  return MEMORY[0x270F0F350]();
}

uint64_t AGSubgraphGetGraph()
{
  return MEMORY[0x270F0F358]();
}

uint64_t AGSubgraphInvalidate()
{
  return MEMORY[0x270F0F370]();
}

uint64_t AGSubgraphIsValid()
{
  return MEMORY[0x270F0F388]();
}

uint64_t AGSubgraphRemoveChild()
{
  return MEMORY[0x270F0F390]();
}

uint64_t AGSubgraphSetCurrent()
{
  return MEMORY[0x270F0F3A0]();
}

uint64_t AGTupleCount()
{
  return MEMORY[0x270F0F410]();
}

uint64_t AGTupleElementOffset()
{
  return MEMORY[0x270F0F418]();
}

uint64_t AGTupleElementType()
{
  return MEMORY[0x270F0F420]();
}

uint64_t AGTypeGetKind()
{
  return MEMORY[0x270F0F448]();
}

BOOL CLLocationCoordinate2DIsValid(CLLocationCoordinate2D coord)
{
  return MEMORY[0x270EE7460]((__n128)coord, *(__n128 *)&coord.longitude);
}

MKMapPoint MKMapPointForCoordinate(CLLocationCoordinate2D coordinate)
{
  MEMORY[0x270EF58C8]((__n128)coordinate, *(__n128 *)&coordinate.longitude);
  result.double y = v2;
  result.double x = v1;
  return result;
}

uint64_t MKMapRectForCoordinateRegion()
{
  return MEMORY[0x270EF58F8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_release(const void *aBlock)
{
}

uint64_t _MKLinkedOnOrAfterReleaseSet()
{
  return MEMORY[0x270EF5948]();
}

uint64_t _availability_version_check()
{
  return MEMORY[0x270ED7F40]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

void bzero(void *a1, size_t a2)
{
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x270ED9AC0](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x270ED9B18](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void rewind(FILE *a1)
{
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x270EDB560](a1, a2);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_conformsToProtocol()
{
  return MEMORY[0x270FA0210]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x270FA0238]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x270FA0240]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x270FA0268]();
}

uint64_t swift_dynamicCastClassUnconditional()
{
  return MEMORY[0x270FA0270]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x270FA0288]();
}

uint64_t swift_dynamicCastObjCClassUnconditional()
{
  return MEMORY[0x270FA0290]();
}

uint64_t swift_dynamicCastObjCProtocolConditional()
{
  return MEMORY[0x270FA0298]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x270FA02F8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x270FA0310]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getFunctionTypeMetadata1()
{
  return MEMORY[0x270FA0390]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x270FA03B8]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x270FA03F0]();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return MEMORY[0x270FA03F8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x270FA04C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_modifyAtReferenceWritableKeyPath()
{
  return MEMORY[0x270FA04E0]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x270FA0500]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x270FA0548]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x270FA0598]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x270FA05D0]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x270FA05D8]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x270FA05E0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x270FA0600]();
}