void sub_221F5F060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<Phase::Geometry::MpsCpuScene>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::Geometry::DataStream::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  std::align_val_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v6;
  size_t v7 = v6 * v5;
  Phase::Geometry::DataStream::Alloc(v4, v6 * v5, &v12);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  uint64_t v9 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v8;
  if (v9)
  {
    MEMORY[0x223C93870](v9, 0x1000C8077774924);
    uint64_t v10 = v12;
    uint64_t v12 = 0;
    if (v10) {
      MEMORY[0x223C93870](v10, 0x1000C8077774924);
    }
  }
  if (v7) {
    memcpy(*(void **)(a1 + 8), *(const void **)(a2 + 8), v7);
  }
  return a1;
}

void Phase::Geometry::GenerateProjectedTriangleWeights(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, Phase::Logger *a7, int a8)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (a7)
  {
    v34 = a7;
    *(void *)v33 = 4;
    *(void *)&long long v31 = a2;
    *((void *)&v31 + 1) = &v34;
    v32 = v33;
    uint64_t v30 = a2;
    Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(a7, (uint64_t)&v31, &v30, v36);
    uint64_t v15 = *(void *)v36;
    *(void *)v36 = 0;
    *a1 = v15;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)&v36[8]);
    a1[5] = a7;
    std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v36);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v36[8]);
    v16 = 0;
    v17 = (float *)(a4 + 8);
    float v18 = 0.0;
    v19 = (unsigned int *)(a6 + 8);
    do
    {
      uint64_t v20 = a5 + 12 * *(v19 - 2);
      uint64_t v21 = a5 + 12 * *(v19 - 1);
      v22 = (uint64_t *)(a5 + 12 * *v19);
      *(_DWORD *)v36 = *(_DWORD *)v20;
      *(void *)&long long v23 = *(void *)(v20 + 4);
      *((void *)&v23 + 1) = *(void *)v21;
      *(_OWORD *)&v36[4] = v23;
      int v37 = *(_DWORD *)(v21 + 8);
      uint64_t v38 = *v22;
      int v39 = *((_DWORD *)v22 + 2);
      if (!a8
        || (v34 = (Phase::Logger *)*((void *)v17 - 1),
            float v35 = *v17,
            Phase::operator*<float>((float *)a3, (float *)&v34, (float *)v33),
            Phase::operator*<float>((float *)a3, (float *)v36, (float *)&v31),
            float v24 = *(float *)(a3 + 28),
            float v25 = (float)(v24 * *(float *)&v31) + *(float *)(a3 + 16),
            float32x2_t v26 = vmul_f32(vadd_f32(vmul_n_f32(*(float32x2_t *)((char *)&v31 + 4), v24), *(float32x2_t *)(a3 + 20)), *(float32x2_t *)&v33[4]), (float)((float)((float)(v25 * *(float *)v33) + v26.f32[0]) + v26.f32[1]) <= 0.0))
      {
        Phase::Geometry::sProjectPointOntoSphere((float32x2_t *)&v31, (float *)v36, (float32x2_t *)a3);
        Phase::Geometry::sProjectPointOntoSphere((float32x2_t *)&v34, (float *)&v36[12], (float32x2_t *)a3);
        Phase::Geometry::sProjectPointOntoSphere((float32x2_t *)v33, (float *)&v38, (float32x2_t *)a3);
        float v27 = (float)((float)(*((float *)&v34 + 1) - *((float *)&v31 + 1))
                    * (float)(*(float *)&v33[8] - *((float *)&v31 + 2)))
            - (float)((float)(v35 - *((float *)&v31 + 2)) * (float)(*(float *)&v33[4] - *((float *)&v31 + 1)));
        float v28 = (float)((float)(v35 - *((float *)&v31 + 2)) * (float)(*(float *)v33 - *(float *)&v31))
            - (float)((float)(*(float *)&v34 - *(float *)&v31) * (float)(*(float *)&v33[8] - *((float *)&v31 + 2)));
        float v29 = (float)((float)((float)(*(float *)&v34 - *(float *)&v31)
                            * (float)(*(float *)&v33[4] - *((float *)&v31 + 1)))
                    - (float)((float)(*((float *)&v34 + 1) - *((float *)&v31 + 1))
                            * (float)(*(float *)v33 - *(float *)&v31)))
            * 0.5;
        float v18 = v18
            + sqrtf((float)(v29 * v29)+ (float)((float)((float)(v27 * 0.5) * (float)(v27 * 0.5))+ (float)((float)(v28 * 0.5) * (float)(v28 * 0.5))));
      }
      v19 += 3;
      *(float *)(*a1 + 4 * (void)v16) = v18;
      v16 = (Phase::Logger *)((char *)v16 + 1);
      v17 += 3;
    }
    while (a7 != v16);
  }
  else
  {
    *a1 = 0;
    a1[4] = 0;
    a1[5] = 0;
  }
}

void sub_221F5F3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
}

uint64_t **Phase::Geometry::GetTriangles(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v101 = a2;
  uint64_t v9 = result;
  v109[4] = *MEMORY[0x263EF8340];
  if (a6 == 1)
  {
    if (!a5) {
      goto LABEL_71;
    }
    unsigned int v10 = 0;
    uint64_t v11 = 0;
    float v12 = 0.0;
    do
    {
      uint64_t v13 = *(void *)(a4 + 72 * v11 + 64);
      if (v13)
      {
        v14 = *(float **)(a4 + 72 * v11 + 8);
        do
        {
          float v15 = *v14++;
          float v16 = v15;
          if ((float)(v15 - v12) > 0.0) {
            ++v10;
          }
          float v12 = v16;
          --v13;
        }
        while (v13);
      }
      else
      {
        float v16 = v12;
      }
      ++v11;
      float v12 = v16;
    }
    while (v11 != a5);
    if ((int)v10 >= 1)
    {
      uint64_t v108 = *(void *)(v101 + 1024);
      Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&>((Phase::Logger *)&v105, 1, 1, (std::align_val_t)8uLL, &v108);
      v17 = (uint64_t *)(v101 + 1024);
      uint64_t v18 = v105;
      uint64_t v105 = 0;
      *uint64_t v9 = (uint64_t *)v18;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v106);
      v9[5] = (uint64_t *)1;
      std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v105);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v106);
      uint64_t v19 = *v17;
      uint64_t v103 = 4;
      uint64_t v104 = v10;
      uint64_t v102 = v19;
      Phase::details::AllocArray<Phase::Triangle<float>,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&>((Phase::Logger *)&v108, v10, &v104, (std::align_val_t *)&v103, &v102);
      uint64_t v20 = v108;
      uint64_t v108 = 0;
      uint64_t v105 = v20;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v106, (uint64_t)v109);
      uint64_t v107 = v10;
      std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v108);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v109);
      uint64_t v21 = std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>>::operator=[abi:ne180100](*v9, &v105);
      v21[5] = v107;
      std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v105);
      result = (uint64_t **)std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v106);
      int v22 = 0;
      uint64_t v23 = 0;
      float v24 = 0.0;
      do
      {
        float v25 = (void *)(a4 + 72 * v23);
        uint64_t v26 = v25[8];
        if (v26)
        {
          uint64_t v27 = 0;
          float v28 = *(float **)(a4 + 72 * v23 + 8);
          float v29 = *v9;
          do
          {
            float v30 = v24;
            float v24 = *v28;
            if ((float)(*v28 - v30) > 0.0)
            {
              long long v31 = (unsigned int *)(*v25 + v27);
              uint64_t v32 = a3 + 12 * *v31;
              uint64_t v33 = a3 + 12 * v31[1];
              v34 = (uint64_t *)(a3 + 12 * v31[2]);
              *(void *)&long long v35 = *(void *)v32;
              DWORD2(v35) = *(_DWORD *)(v32 + 8);
              HIDWORD(v35) = *(_DWORD *)v33;
              *(void *)&long long v36 = *(void *)(v33 + 4);
              uint64_t v37 = *v34;
              int v38 = *((_DWORD *)v34 + 2);
              result = (uint64_t **)(*v29 + 36 * v22++);
              *((void *)&v36 + 1) = v37;
              *(_OWORD *)result = v35;
              *((_OWORD *)result + 1) = v36;
              *((_DWORD *)result + 8) = v38;
            }
            v27 += 12;
            ++v28;
            --v26;
          }
          while (v26);
        }
        ++v23;
      }
      while (v23 != a5);
    }
    else
    {
LABEL_71:
      *result = 0;
      result[4] = 0;
      result[5] = 0;
    }
    return result;
  }
  float v40 = *(float *)(a4 + 72 * a5 - 12);
  MEMORY[0x270FA5388](result);
  v42 = (char *)&v98 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v42, v41);
  float v43 = v40 / (float)a6;
  if (a5)
  {
    int v44 = 0;
    uint64_t v45 = 0;
    float v46 = 0.0;
    do
    {
      uint64_t v47 = *(void *)(a4 + 72 * v45 + 64);
      if (v47)
      {
        uint64_t v48 = 0;
        uint64_t v49 = *(void *)(a4 + 72 * v45 + 8);
        do
        {
          float v50 = v46;
          float v46 = *(float *)(v49 + 4 * v48);
          if ((float)(v46 - v50) > 0.0)
          {
            ++*(_DWORD *)&v42[4 * v44];
            if (v44 + 1 < a6)
            {
              float v51 = v43 * (float)(v44 + 1);
              float v52 = v43 * (float)(v44 + 2);
              if (v51 <= v46)
              {
                ++v44;
                float v51 = v52;
              }
              if (v51 <= v46)
              {
                uint64_t v53 = v44;
                int v54 = v44 + 2;
                while (1)
                {
                  int v55 = v53 + 1;
                  if (v53 + 1 >= a6) {
                    break;
                  }
                  ++*(_DWORD *)&v42[4 * v53];
                  float v56 = v43 * (float)v54++;
                  ++v53;
                  if (v56 > v46) {
                    goto LABEL_35;
                  }
                }
                int v55 = v53;
LABEL_35:
                int v44 = v55;
              }
            }
          }
          ++v48;
        }
        while (v48 != v47);
      }
      ++v45;
    }
    while (v45 != a5);
  }
  uint64_t v108 = *(void *)(v101 + 1024);
  Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&>((Phase::Logger *)&v105, a6, a6, (std::align_val_t)8uLL, &v108);
  uint64_t v99 = a4;
  uint64_t v100 = a5;
  uint64_t v57 = v105;
  uint64_t v105 = 0;
  *uint64_t v9 = (uint64_t *)v57;
  v98 = v9 + 1;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)v106);
  v58 = v9;
  v9[5] = (uint64_t *)a6;
  std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v105);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v106);
  uint64_t v59 = 0;
  uint64_t v60 = 5;
  do
  {
    uint64_t v61 = *(void *)(v101 + 1024);
    uint64_t v62 = *(int *)&v42[4 * v59];
    uint64_t v103 = 4;
    uint64_t v104 = v62;
    uint64_t v102 = v61;
    Phase::details::AllocArray<Phase::Triangle<float>,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&>((Phase::Logger *)&v108, v62, &v104, (std::align_val_t *)&v103, &v102);
    uint64_t v63 = v108;
    uint64_t v108 = 0;
    uint64_t v105 = v63;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v106, (uint64_t)v109);
    uint64_t v107 = v62;
    std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v108);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v109);
    v64 = &(*v58)[v60];
    std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>>::operator=[abi:ne180100](v64 - 5, &v105);
    uint64_t *v64 = v107;
    std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v105);
    result = (uint64_t **)std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v106);
    ++v59;
    v60 += 6;
  }
  while (a6 != v59);
  uint64_t v66 = v99;
  uint64_t v65 = v100;
  if (v100)
  {
    int v67 = 0;
    int v68 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    float v71 = 0.0;
    while (1)
    {
      v72 = (void *)(v66 + 72 * v70);
      uint64_t v73 = v72[8];
      if (v73) {
        break;
      }
      uint64_t v88 = v69;
LABEL_69:
      ++v70;
      uint64_t v69 = v88;
      if (v70 == v65) {
        return result;
      }
    }
    uint64_t v74 = 0;
    uint64_t v75 = *(void *)(v66 + 72 * v70 + 8);
    result = (uint64_t **)*v58;
    while (1)
    {
      float v76 = v71;
      float v71 = *(float *)(v75 + 4 * v74);
      if ((float)(v71 - v76) > 0.0)
      {
        BOOL v77 = v68 == v69;
        v78 = (unsigned int *)(*v72 + 12 * v74);
        unsigned int v79 = v78[1];
        unsigned int v80 = v78[2];
        uint64_t v81 = a3 + 12 * *v78;
        uint64_t v82 = a3 + 12 * v79;
        if (v77) {
          int v84 = v67;
        }
        else {
          int v84 = 0;
        }
        uint64_t v85 = a3 + 12 * v80;
        *(void *)&long long v86 = *(void *)(v82 + 4);
        int v87 = *(_DWORD *)(v85 + 8);
        int v67 = v84 + 1;
        uint64_t v88 = (uint64_t)result[6 * (int)v69] + 36 * v84;
        *((void *)&v86 + 1) = *(void *)v85;
        HIDWORD(v83) = *(_DWORD *)v82;
        DWORD2(v83) = *(_DWORD *)(v81 + 8);
        *(void *)&long long v83 = *(void *)v81;
        *(_OWORD *)uint64_t v88 = v83;
        *(_OWORD *)(v88 + 16) = v86;
        *(_DWORD *)(v88 + 32) = v87;
        LODWORD(v88) = v69 + 1;
        if ((int)v69 + 1 < a6)
        {
          float v89 = v43 * (float)(int)v88;
          if (v89 <= v71) {
            uint64_t v88 = v88;
          }
          else {
            uint64_t v88 = v69;
          }
          if (v89 <= v71) {
            float v89 = v43 * (float)(v69 + 2);
          }
          if (v89 <= v71)
          {
            v90 = (uint64_t *)&result[6 * (int)v88];
            unint64_t v91 = (int)v88 + 1;
            while (1)
            {
              int v92 = v88;
              if (v91 >= a6) {
                break;
              }
              if (v88 == v69) {
                int v93 = v67;
              }
              else {
                int v93 = 0;
              }
              *(void *)&long long v94 = *(void *)v81;
              DWORD2(v94) = *(_DWORD *)(v81 + 8);
              HIDWORD(v94) = *(_DWORD *)v82;
              *(void *)&long long v95 = *(void *)(v82 + 4);
              int v96 = *(_DWORD *)(v85 + 8);
              int v67 = v93 + 1;
              uint64_t v97 = *v90;
              v90 += 6;
              *((void *)&v95 + 1) = *(void *)v85;
              uint64_t v69 = v97 + 36 * v93;
              *(_OWORD *)uint64_t v69 = v94;
              *(_OWORD *)(v69 + 16) = v95;
              *(_DWORD *)(v69 + 32) = v96;
              *(float *)&long long v94 = v43 * (float)(v88 + 2);
              uint64_t v88 = (v88 + 1);
              ++v91;
              LODWORD(v69) = v92;
              if (*(float *)&v94 > v71)
              {
                int v68 = v88 - 1;
                goto LABEL_58;
              }
            }
            int v68 = v69;
          }
          else
          {
            int v68 = v69;
          }
          goto LABEL_58;
        }
        int v68 = v69;
      }
      uint64_t v88 = v69;
LABEL_58:
      ++v74;
      uint64_t v69 = v88;
      if (v74 == v73) {
        goto LABEL_69;
      }
    }
  }
  return result;
}

void sub_221F5FAC4(_Unwind_Exception *a1)
{
  *(void *)(v3 - 256) = v1;
  std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>>::reset[abi:ne180100](v2);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](*(void **)(v3 - 256));
  _Unwind_Resume(a1);
}

uint64_t **Phase::Geometry::GeneratePoints(uint64_t **result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int *a6, uint64_t *a7)
{
  uint64_t v11 = result;
  v100[5] = *MEMORY[0x263EF8340];
  float v12 = *(float *)(a4 + 72 * a5 - 12);
  unint64_t v13 = a6[1];
  if ((int)v13 <= 0)
  {
    if (v12 < 0.0001) {
      goto LABEL_9;
    }
    if (v12 <= 0.1)
    {
      uint64_t v80 = a4;
      v100[0] = &unk_26D473948;
      v100[3] = v100;
      __asm { FMOV            V0.2S, #1.0 }
      uint64_t v99 = _D0;
      uint64_t v97 = (uint64_t *)&unk_26D473990;
      v98[0] = Phase::CurveFunction::Squared<float>;
      v98[2] = &v97;
      std::__function::__value_func<float ()(float)>::swap[abi:ne180100](&v97, v100);
      std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](&v97);
      float v86 = (float)*a6;
      LODWORD(v92) = 0;
      *((float *)&v92 + 1) = v86;
      Phase::Envelope<float>::Envelope((Phase::Logger *)&v97, (float *)&v92, (float *)&v99);
      unint64_t v13 = vcvtas_u32_f32(Phase::Envelope<float>::operator()((float **)&v97, (float)(0.1 - v12) / 0.0999));
      int v92 = (void **)&v97;
      std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v92);
      result = (uint64_t **)std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v100);
      a4 = v80;
    }
    else
    {
      unint64_t v13 = *a6;
    }
  }
  if (v13 <= 1)
  {
LABEL_9:
    *uint64_t v11 = 0;
    v11[4] = 0;
    v11[5] = 0;
    return result;
  }
  uint64_t v89 = a4;
  unint64_t v88 = a5;
  uint64_t v14 = *((void *)a6 + 3);
  float v15 = *(void ***)(a2 + 1024);
  uint64_t v95 = 4;
  unint64_t v96 = v13;
  int v92 = v15;
  int v93 = &v96;
  long long v94 = &v95;
  unint64_t v91 = v15;
  Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>((Phase::Logger *)v13, (uint64_t)&v92, (uint64_t *)&v91, &v97);
  uint64_t v16 = 0x7ABA4977B4617663;
  uint64_t v17 = 0x5BC180D1366118D2;
  uint64_t v18 = v97;
  uint64_t v97 = 0;
  uint64_t v99 = (uint64_t)v18;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v100, (uint64_t)v98);
  v100[4] = v13;
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v97);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v98);
  uint64_t v87 = a2;
  if (*((unsigned char *)a6 + 8))
  {
    float v19 = v12 / (float)(int)v13;
    float v20 = 0.0;
    if (*((unsigned char *)a6 + 9) && (int v21 = a6[3], v21 >= 1))
    {
      float v22 = v19 / (float)v21;
      int v23 = a6[4];
      if (v23 >= 1) {
        float v20 = v22 * (float)v23;
      }
    }
    else
    {
      float v22 = v12 / (float)(int)v13;
    }
    if ((int)v13 >= 1)
    {
      uint64_t v24 = 0;
      uint64_t v25 = v99;
      do
      {
        if (v14)
        {
          float v26 = *(float *)(v14 + 24);
          float v27 = *(float *)(v14 + 28) - v26;
          uint64_t v29 = *(void *)v14;
          unint64_t v28 = *(void *)(v14 + 8);
          *(void *)uint64_t v14 = v28;
        }
        else
        {
          float v26 = 0.0;
          float v27 = 1.0;
          unint64_t v28 = v16;
          uint64_t v29 = v17;
          uint64_t v17 = v16;
        }
        uint64_t v30 = (v28 >> 26) ^ ((v29 ^ (unint64_t)(v29 << 23)) >> 17) ^ v28 ^ v29 ^ (v29 << 23);
        if (v14) {
          *(void *)(v14 + 8) = v30;
        }
        else {
          uint64_t v16 = v30;
        }
        float v31 = (float)(v20 + (float)(v19 * (float)(int)v24))
            + (float)(v22 * (float)(v26 + (float)(v27 * (float)((float)(v30 + v28) * 5.421e-20))));
        if (v31 >= (float)(v12 * 1.01)) {
          __assert_rtn("GeneratePoints", "GeoMeshUtility.cpp", 416, "value < totalMeshWeight * 1.01f");
        }
        if (v31 >= v12) {
          float v31 = nextafterf(v12, v12 + -1.0);
        }
        *(float *)(v25 + 4 * v24++) = v31;
      }
      while (v13 != v24);
    }
  }
  else
  {
    uint64_t v32 = 0;
    uint64_t v33 = v99;
    do
    {
      if (v14)
      {
        float v34 = *(float *)(v14 + 24);
        float v35 = *(float *)(v14 + 28) - v34;
        uint64_t v37 = *(void *)v14;
        unint64_t v36 = *(void *)(v14 + 8);
        *(void *)uint64_t v14 = v36;
      }
      else
      {
        float v34 = 0.0;
        float v35 = 1.0;
        unint64_t v36 = v16;
        uint64_t v37 = v17;
        uint64_t v17 = v16;
      }
      uint64_t v38 = (v36 >> 26) ^ ((v37 ^ (unint64_t)(v37 << 23)) >> 17) ^ v36 ^ v37 ^ (v37 << 23);
      if (v14) {
        *(void *)(v14 + 8) = v38;
      }
      else {
        uint64_t v16 = v38;
      }
      *(float *)(v33 + 4 * v32++) = v12 * (float)(v34 + (float)(v35 * (float)((float)(v38 + v36) * 5.421e-20)));
    }
    while (v13 != v32);
    std::__sort<std::__less<float,float> &,float *>();
  }
  if (a7)
  {
    if (*((unsigned char *)a6 + 8)) {
      unint64_t v39 = v13;
    }
    else {
      unint64_t v39 = 1;
    }
    Phase::Geometry::GetTriangles(&v97, v87, a3, v89, v88, v39);
    float v40 = v97;
    uint64_t v97 = 0;
    uint64_t v41 = *a7;
    *a7 = (uint64_t)v40;
    if (v41) {
      std::function<void ()(void *)>::operator()((uint64_t)(a7 + 1), v41);
    }
    std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a7 + 1, (uint64_t)v98);
    a7[5] = v98[4];
    std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v97);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v98);
  }
  v42 = *(void ***)(v87 + 1024);
  uint64_t v95 = 4;
  unint64_t v96 = v13;
  int v92 = v42;
  int v93 = &v96;
  long long v94 = &v95;
  unint64_t v91 = v42;
  Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>((Phase::Logger *)v13, (uint64_t)&v92, (uint64_t *)&v91, (size_t *)&v97);
  float v43 = v97;
  uint64_t v97 = 0;
  *uint64_t v11 = v43;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(v11 + 1), (uint64_t)v98);
  v11[5] = (uint64_t *)v13;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v97);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v98);
  if (v88)
  {
    unint64_t v44 = 0;
    int v45 = 0;
    float v46 = 0.0;
    do
    {
      uint64_t v47 = (void *)(v89 + 72 * v44);
      unint64_t v48 = v47[8];
      unint64_t v49 = v45;
      if (v48) {
        BOOL v50 = v13 > v45;
      }
      else {
        BOOL v50 = 0;
      }
      if (v50)
      {
        uint64_t v51 = 0;
        uint64_t v52 = *(void *)(v89 + 72 * v44 + 8);
        uint64_t v53 = v99;
        float v54 = v46;
        do
        {
          float v46 = *(float *)(v52 + 4 * v51);
          unint64_t v49 = v45;
          if (v13 > v45)
          {
            int v55 = (float *)*v11 + 3 * v45 + 2;
            while (1)
            {
              float v56 = *(float *)(v53 + 4 * v49);
              if (v56 >= *(float *)(v52 + 4 * v51)) {
                break;
              }
              if (v14)
              {
                float v57 = *(float *)(v14 + 24);
                float v58 = *(float *)(v14 + 28) - v57;
                uint64_t v60 = *(void *)v14;
                unint64_t v59 = *(void *)(v14 + 8);
              }
              else
              {
                float v58 = 1.0;
                float v57 = 0.0;
                uint64_t v60 = v17;
                unint64_t v59 = v16;
              }
              uint64_t v61 = (float32x2_t *)(a3 + 12 * *(unsigned int *)(*v47 + 12 * v51));
              uint64_t v62 = (float32x2_t *)(a3 + 12 * *(unsigned int *)(*v47 + 4 * (3 * v51 + 1)));
              uint64_t v63 = (float32x2_t *)(a3 + 12 * *(unsigned int *)(*v47 + 4 * (3 * v51 + 2)));
              float v64 = v61[1].f32[0];
              float v65 = v62[1].f32[0];
              float32x2_t v66 = *v61;
              float32x2_t v67 = *v62;
              float32x2_t v68 = *v63;
              float v69 = v63[1].f32[0];
              unint64_t v70 = ((v60 ^ (unint64_t)(v60 << 23)) >> 17) ^ (v59 >> 26) ^ v60 ^ (v60 << 23) ^ v59;
              if (v14) {
                *(void *)uint64_t v14 = v70;
              }
              else {
                uint64_t v17 = v70;
              }
              unint64_t v71 = ((v59 ^ (v59 << 23)) >> 17) ^ (v70 >> 26) ^ v59 ^ (v59 << 23) ^ v70;
              if (v14) {
                *(void *)(v14 + 8) = v71;
              }
              else {
                uint64_t v16 = ((v59 ^ (v59 << 23)) >> 17) ^ (v70 >> 26) ^ v59 ^ (v59 << 23) ^ v70;
              }
              float v72 = (float)((float)(v56 - v54) / (float)(v46 - v54)) * 1000.0;
              float v73 = floorf(v72);
              float v74 = floorf((float)(v72 - v73) * 1000.0);
              float v75 = v73 + (float)(v57 + (float)(v58 * (float)((float)(v70 + v59) * 5.421e-20)));
              float v76 = (float)(v74 + (float)(v57 + (float)(v58 * (float)((float)(v71 + v70) * 5.421e-20)))) / 1000.0;
              float v77 = sqrtf(v75 / 1000.0);
              float v78 = v77 * (float)(1.0 - v76);
              float v79 = v77 * v76;
              ++v49;
              *((float32x2_t *)v55 - 1) = vadd_f32(vmul_n_f32(v68, v79), vadd_f32(vmul_n_f32(v66, 1.0 - v77), vmul_n_f32(v67, v78)));
              *int v55 = (float)(v69 * v79) + (float)((float)(v64 * (float)(1.0 - v77)) + (float)(v65 * v78));
              v55 += 3;
              if (v13 == v49)
              {
                LODWORD(v49) = v13;
                break;
              }
            }
            int v45 = v49;
            unint64_t v49 = (int)v49;
          }
          if (++v51 >= v48) {
            break;
          }
          float v54 = v46;
        }
        while (v13 > v49);
      }
      ++v44;
    }
    while (v44 < v88 && v13 > v49);
  }
  else
  {
    unint64_t v49 = 0;
  }
  if (v13 != v49) {
    __assert_rtn("GeneratePoints", "GeoMeshUtility.cpp", 470, "pointIndex == pointCount");
  }
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v99);
  return (uint64_t **)std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v100);
}

void sub_221F60284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<Phase::Envelope<float>::SegmentInternal,std::allocator<Phase::Envelope<float>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v8);
  _Unwind_Resume(a1);
}

void *Phase::Geometry::CreatePointCloudLoD@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X8>, int32x4_t a7@<Q3>)
{
  uint64_t v60 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a4 + 20)) {
    __assert_rtn("CreatePointCloudLoD", "GeoMeshUtility.cpp", 551, "true == inOptions.mProjectIntoListenerSpace");
  }
  uint64_t v9 = *(void **)(**(void **)(a2 + 48) + 16 * *(void *)(a2 + 56));
  uint64_t v10 = v9[3];
  if (!v10) {
    goto LABEL_9;
  }
  uint64_t v14 = (uint64_t)result;
  unsigned int v15 = 0;
  uint64_t v16 = v9[1];
  uint64_t v17 = v9[4];
  uint64_t v18 = (void *)(v16 + 40);
  uint64_t v19 = v10;
  do
  {
    v15 += *(void *)(*(void *)(*(void *)*(v18 - 1) + 16 * *v18) + 24) / 3uLL;
    uint64_t v18 = (void *)((char *)v18 + v17);
    --v19;
  }
  while (v19);
  if (v15)
  {
    if (v15 < 0x2711)
    {
      uint64_t v27 = *(void *)(*(void *)(**(void **)(a2 + 16) + 16 * *(void *)(a2 + 24)) + 8);
      uint64_t v28 = result[128];
      size_t v29 = 72 * v10;
      if (72 * v10) {
        size_t v29 = (size_t)operator new(v29, (std::align_val_t)8uLL);
      }
      size_t v30 = v29;
      do
      {
        *(void *)size_t v30 = 0;
        *(void *)(v30 + 8) = 0;
        *(_OWORD *)(v30 + 40) = 0uLL;
        *(_OWORD *)(v30 + 56) = 0uLL;
        v30 += 72;
      }
      while (v30 != v29 + 72 * v10);
      uint64_t v37 = &unk_26D476F08;
      uint64_t v38 = v10;
      v39[0] = v28;
      v39[1] = &v37;
      uint64_t v50 = v29;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v51, (uint64_t)&v37);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v37);
      uint64_t v31 = v50;
      uint64_t v50 = 0;
      *(void *)&v42[0] = v31;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v42 + 8, (uint64_t)v51);
      *((void *)&v43 + 1) = v10;
      std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>>::reset[abi:ne180100](&v50);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v51);
      uint64_t v50 = v10;
      *(void *)uint64_t v51 = v42;
      *(void *)&v51[8] = v27;
      *(void *)&v51[16] = a2;
      *(void *)&long long v52 = v14;
      *((void *)&v52 + 1) = a3;
      if (Phase::Geometry::CreatePointCloudLoD(Phase::Geometry::SystemState &,Phase::Geometry::Mesh const&,Phase::Affine<float> const&,Phase::Affine<float> const&,Phase::Geometry::PointCloudOptions const&,Phase::Geometry::PointCloudDebugOutput)::$_0::operator()((unint64_t *)&v50, *(unsigned __int8 *)(a4 + 21)) > 0.0|| *(unsigned char *)(a4 + 21)&& Phase::Geometry::CreatePointCloudLoD(Phase::Geometry::SystemState &,Phase::Geometry::Mesh const&,Phase::Affine<float> const&,Phase::Affine<float> const&,Phase::Geometry::PointCloudOptions const&,Phase::Geometry::PointCloudDebugOutput)::$_0::operator()((unint64_t *)&v50, 0) > 0.0)
      {
        Phase::Geometry::GeneratePoints((uint64_t **)a6, v14, v27, *(uint64_t *)&v42[0], *(void *)(*(void *)(**(void **)(a2 + 48) + 16 * *(void *)(a2 + 56)) + 24), (int *)a4, a5);
      }
      else
      {
        *(void *)a6 = 0;
        *(void *)(a6 + 32) = 0;
        *(void *)(a6 + 40) = 0;
      }
      std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v42);
      uint64_t v32 = (void *)v42 + 1;
    }
    else
    {
      uint64_t v20 = *(void *)(a2 + 8);
      *(void *)&long long v21 = *(void *)(v20 + 24);
      uint64_t v50 = v21;
      unsigned int v22 = *(_DWORD *)(v20 + 32);
      __int32 v23 = *(_DWORD *)(v20 + 36);
      a7.i64[0] = *(void *)(v20 + 40);
      int32x2_t v24 = vzip1_s32(*(int32x2_t *)&v21, *(int32x2_t *)a7.i8);
      uint64_t v53 = v21;
      int v56 = DWORD1(v21);
      int v58 = v21;
      LODWORD(v21) = v23;
      *((void *)&v21 + 1) = __PAIR64__(v23, v22);
      __int32 v55 = v23;
      *(_OWORD *)&v51[4] = v21;
      *(int32x2_t *)((char *)&v52 + 4) = v24;
      *(_DWORD *)&v51[20] = a7.i32[0];
      LODWORD(v52) = v22;
      HIDWORD(v52) = v22;
      unsigned __int32 v54 = a7.u32[1];
      int32x4_t v25 = vuzp2q_s32(a7, vzip1q_s32(a7, a7));
      int32x4_t v26 = v25;
      v26.i32[1] = v23;
      v26.i32[3] = v25.i32[0];
      *(_DWORD *)uint64_t v51 = v22;
      int32x4_t v57 = v26;
      unint64_t v59 = a7.i64[0];
      long long v46 = unk_2220A5CF4;
      long long v47 = xmmword_2220A5D04;
      long long v48 = unk_2220A5D14;
      long long v49 = xmmword_2220A5D24;
      v42[1] = unk_2220A5CB4;
      long long v43 = xmmword_2220A5CC4;
      long long v44 = unk_2220A5CD4;
      long long v45 = xmmword_2220A5CE4;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      long long v40 = 0u;
      long long v41 = 0u;
      v42[0] = xmmword_2220A5CA4;
      Phase::Geometry::GenerateProjectedTriangleWeights(&v34, result[128], a3, (uint64_t)&unk_2220A5D34, (uint64_t)&v50, (uint64_t)v42, (Phase::Logger *)0xC, *(unsigned __int8 *)(a4 + 21));
      std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](&v38, &v34);
      *((void *)&v40 + 1) = v36;
      std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v34);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v35);
      if (*((void *)&v40 + 1)) {
        goto LABEL_8;
      }
      if (!*(unsigned char *)(a4 + 21)) {
        goto LABEL_21;
      }
      if (!*(unsigned char *)(a4 + 20)) {
        __assert_rtn("GenerateTriangleWeights", "GeoMeshUtility.cpp", 164, "false");
      }
      Phase::Geometry::GenerateProjectedTriangleWeights(&v34, *(void *)(v14 + 1024), a3, (uint64_t)&unk_2220A5D34, (uint64_t)&v50, (uint64_t)v42, (Phase::Logger *)0xC, 0);
      std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](&v38, &v34);
      *((void *)&v40 + 1) = v36;
      std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v34);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v35);
      if (*((void *)&v40 + 1))
      {
LABEL_8:
        uint64_t v37 = v42;
        LODWORD(v41) = 0;
        DWORD1(v41) = *(_DWORD *)(v38 + 44);
        *((void *)&v41 + 1) = 12;
        Phase::Geometry::GeneratePoints((uint64_t **)a6, v14, (uint64_t)&v50, (uint64_t)&v37, 1uLL, (int *)a4, a5);
      }
      else
      {
LABEL_21:
        *(void *)a6 = 0;
        *(void *)(a6 + 32) = 0;
        *(void *)(a6 + 40) = 0;
      }
      std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v38);
      uint64_t v32 = v39;
    }
    return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v32);
  }
  else
  {
LABEL_9:
    *(void *)a6 = 0;
    *(void *)(a6 + 32) = 0;
    *(void *)(a6 + 40) = 0;
  }
  return result;
}

void sub_221F60798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](va1);
  _Unwind_Resume(a1);
}

float Phase::Geometry::CreatePointCloudLoD(Phase::Geometry::SystemState &,Phase::Geometry::Mesh const&,Phase::Affine<float> const&,Phase::Affine<float> const&,Phase::Geometry::PointCloudOptions const&,Phase::Geometry::PointCloudDebugOutput)::$_0::operator()(unint64_t *a1, int a2)
{
  v19[5] = *MEMORY[0x263EF8340];
  if (!*a1) {
    return 0.0;
  }
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  uint64_t v6 = (uint64_t *)a1[1];
  uint64_t v7 = *v6;
  float v8 = 0.0;
  do
  {
    uint64_t v9 = *(void *)(**(void **)(a1[3] + 48) + 16 * *(void *)(a1[3] + 56));
    uint64_t v10 = *(void *)(v9 + 32) * v5;
    uint64_t v11 = *(void *)(**(void **)(*(void *)(v9 + 8) + v10 + 32) + 16 * *(void *)(*(void *)(v9 + 8) + v10 + 40));
    *(void *)(v7 + v4) = *(void *)(v11 + 8);
    unint64_t v12 = *(void *)(v11 + 24) / 3uLL;
    unint64_t v13 = (uint64_t *)(*v6 + v4);
    v13[8] = v12;
    Phase::Geometry::GenerateProjectedTriangleWeights(&v18, *(void *)(a1[4] + 1024), a1[5], *(void *)(*(void *)(**(void **)(*(void *)(v9 + 8) + v10 + 48)+ 16 * *(void *)(*(void *)(v9 + 8) + v10 + 56))+ 8), a1[2], *v13, (Phase::Logger *)v12, a2);
    std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](v13 + 1, &v18);
    v13[6] = v19[4];
    std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](&v18);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v19);
    uint64_t v6 = (uint64_t *)a1[1];
    uint64_t v7 = *v6;
    uint64_t v14 = *v6 + v4;
    *(float *)(v14 + 56) = v8;
    uint64_t v15 = v13[6];
    if (v15) {
      float v16 = *(float *)(v13[1] + 4 * v15 - 4);
    }
    else {
      float v16 = 0.0;
    }
    float v8 = v8 + v16;
    *(float *)(v14 + 60) = v8;
    ++v5;
    v4 += 72;
  }
  while (v5 < *a1);
  return v8;
}

void Phase::Geometry::sProjectPointOntoSphere(float32x2_t *a1, float *a2, float32x2_t *a3)
{
  Phase::operator*<float>((float *)a3, a2, (float *)&v13);
  float v5 = a3[3].f32[1];
  float v6 = v5 * v14;
  float32x2_t v7 = vadd_f32(vmul_n_f32(v13, v5), a3[2]);
  float v8 = v6 + a3[3].f32[0];
  if (v7.f32[0] < 0.0) {
    float v9 = -v7.f32[0];
  }
  else {
    float v9 = v7.f32[0];
  }
  if (v9 > 0.0001) {
    goto LABEL_11;
  }
  float v10 = v7.f32[1];
  if (v7.f32[1] < 0.0) {
    float v10 = -v7.f32[1];
  }
  if (v10 > 0.0001) {
    goto LABEL_11;
  }
  float v11 = -v8;
  if (v8 >= 0.0) {
    float v11 = v8;
  }
  if (v11 > 0.0001)
  {
LABEL_11:
    float32x2_t v12 = vmul_f32(v7, v7);
    v12.f32[0] = sqrtf(vaddv_f32(v12) + (float)(v8 * v8));
    float32x2_t v7 = vdiv_f32(v7, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 0));
    float v8 = v8 / v12.f32[0];
  }
  *a1 = v7;
  a1[1].f32[0] = v8;
}

uint64_t *std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *result = 0;
  if (v1) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v1);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *result = 0;
  if (v1) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v1);
  }
  return result;
}

void *Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&>(Phase::Logger *a1, uint64_t a2, uint64_t a3, std::align_val_t a4, uint64_t *a5)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v8 = 48 * a3;
  if (!(48 * a3))
  {
LABEL_8:
    float v9 = 0;
    goto LABEL_9;
  }
  if (!a4)
  {
    float v9 = operator new(48 * a3);
    goto LABEL_9;
  }
  if ((a4 & (a4 - 1)) != 0)
  {
    float v10 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 176);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)float v14 = 136315650;
      *(void *)&v14[4] = "SystemAllocator.hpp";
      *(_WORD *)&v14[12] = 1024;
      *(_DWORD *)&v14[14] = 47;
      *(_WORD *)&v14[18] = 2048;
      *(void *)&v14[20] = v8;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", v14, 0x1Cu);
    }
    goto LABEL_8;
  }
  float v9 = operator new(48 * a3, a4);
LABEL_9:
  float v11 = v9;
  do
  {
    *float v11 = 0;
    v11[4] = 0;
    v11[5] = 0;
    v11 += 6;
  }
  while (v11 != &v9[6 * a2]);
  uint64_t v12 = *a5;
  *(void *)float v14 = &unk_26D476E78;
  *(void *)&v14[8] = a2;
  *(void *)&v14[16] = v12;
  *(void *)&v14[24] = v14;
  *(void *)a1 = v9;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)a1 + 8, (uint64_t)v14);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v14);
}

void std::__function::__func<std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

__n128 std::__function::__func<std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  v2 = (char *)operator new(0x18uLL);
  *(void *)v2 = &unk_26D476E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D476E78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::ManagedArray<Phase::Triangle<float>> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::ManagedArray<Phase::Triangle<float>>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::ManagedArray<Phase::Triangle<float>>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  v2 = *a2;
  if (*(void *)(a1 + 8))
  {
    unint64_t v4 = 0;
    float v5 = (uint64_t *)*a2;
    do
    {
      std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>>::reset[abi:ne180100](v5);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v5 + 1);
      ++v4;
      v5 += 6;
    }
    while (v4 < *(void *)(a1 + 8));
  }

  operator delete(v2);
}

void *Phase::details::AllocArray<Phase::Triangle<float>,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&>(Phase::Logger *a1, uint64_t a2, void *a3, std::align_val_t *a4, uint64_t *a5)
{
  *(void *)&v18[5] = *MEMORY[0x263EF8340];
  if (!a2)
  {
    float v14 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 112);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)float v16 = 136315394;
      *(void *)&v16[4] = "ManagedPtr.hpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 229;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v16, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  uint64_t v8 = 36 * *a3;
  if (v8)
  {
    std::align_val_t v9 = *a4;
    if (!*a4)
    {
      float v10 = operator new(36 * *a3);
      goto LABEL_7;
    }
    if ((v9 & (v9 - 1)) == 0)
    {
      float v10 = operator new(36 * *a3, v9);
LABEL_7:
      uint64_t v8 = (uint64_t)v10;
      goto LABEL_11;
    }
    float v11 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 176);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)float v16 = 136315650;
      *(void *)&v16[4] = "SystemAllocator.hpp";
      *(_WORD *)&v16[12] = 1024;
      *(_DWORD *)&v16[14] = 47;
      __int16 v17 = 2048;
      *(void *)uint64_t v18 = v8;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Error allocating memory - alignment must be power of two. Alignment requested %zu", v16, 0x1Cu);
    }
    uint64_t v8 = 0;
  }
LABEL_11:
  bzero((void *)v8, 36 * ((36 * a2 - 36) / 0x24uLL) + 36);
  uint64_t v12 = *a5;
  *(void *)float v16 = &unk_26D476EC0;
  *(void *)&v16[8] = v12;
  *(void *)&v18[1] = v16;
  *(void *)a1 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)a1 + 8, (uint64_t)v16);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v16);
}

void sub_221F60F70(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26D476EC0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D476EC0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Triangle<float>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Triangle<float>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
}

uint64_t *std::unique_ptr<Phase::Triangle<float> [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *a1;
  *a1 = v4;
  if (v5) {
    std::function<void ()(void *)>::operator()((uint64_t)(a1 + 1), v5);
  }
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

__n128 std::__function::__func<std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D476F08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D476F08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&>(unsigned long,Phase::SystemAllocator&&,std::unique_ptr<Phase::Geometry::SubmeshInfo [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::SubmeshInfo,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Geometry::SubmeshInfo*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8))
  {
    unint64_t v4 = 0;
    uint64_t v5 = v2 + 2;
    do
    {
      std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](v5 - 1);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v5);
      ++v4;
      v5 += 9;
    }
    while (v4 < *(void *)(a1 + 8));
  }

  operator delete(v2);
}

void Phase::Geometry::MpsCpuSceneBuilder::~MpsCpuSceneBuilder(std::__shared_weak_count **this)
{
  Phase::Geometry::MpsCpuSceneBuilder::TearDown(this);
  uint64_t v2 = this[17];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = this[14];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  float32x2_t v7 = (void **)(this + 9);
  std::vector<Phase::Geometry::MpsCpuSceneBuilder::BuildEntry>::__destroy_vector::operator()[abi:ne180100](&v7);
  unint64_t v4 = this[8];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = this[4];
  if (v5)
  {
    this[5] = v5;
    operator delete(v5);
  }
  float v6 = this[1];
  if (v6)
  {
    this[2] = v6;
    operator delete(v6);
  }
}

void Phase::Geometry::MpsCpuSceneBuilder::TearDown(std::__shared_weak_count **this)
{
  Phase::Geometry::MpsCpuSceneBuilder::WaitForCurrentBuild((Phase::Geometry::MpsCpuSceneBuilder *)this);
  Phase::Geometry::MpsCpuSceneBuilder::ResetBuildTask((Phase::Geometry::MpsCpuSceneBuilder *)this);
  uint64_t v2 = this[14];
  this[13] = 0;
  this[14] = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *((_DWORD *)this + 30) = 0;
  uint64_t v3 = this[17];
  this[16] = 0;
  this[17] = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *((_DWORD *)this + 36) = 0;
  this[2] = this[1];
  this[5] = this[4];
}

void Phase::Geometry::MpsCpuSceneBuilder::Update(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  Phase::Geometry::MpsCpuSceneBuilder::CheckForChanges(a1, a2);
  Phase::Geometry::MpsCpuSceneBuilder::UpdateActiveGroupList(a1, a2);
  Phase::Geometry::MpsCpuSceneBuilder::RemoveInactiveScenes(a1, a3);
  uint64_t v10 = *(void *)(a1 + 56);
  Phase::Geometry::MpsCpuSceneBuilder::ProcessFinishedBuild((unsigned __int8 *)a1, (uint64_t)a3);
  if (*(void *)(a1 + 56))
  {
    Phase::Geometry::MpsCpuSceneBuilder::UpdateWaitList((void *)a1, a2);
  }
  else if (Phase::Geometry::MpsCpuSceneBuilder::StartNewBuild((unsigned __int8 *)a1, a2))
  {
    Phase::Geometry::MpsCpuSceneBuilder::SaveSceneShapes(a1, v10 != 0, a4, a5);
  }
  else if (v10)
  {
    float v11 = *(std::__shared_weak_count **)(a1 + 112);
    *(void *)(a1 + 104) = 0;
    *(void *)(a1 + 112) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    *(_DWORD *)(a1 + 120) = 0;
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 136);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 136) = 0;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    *(_DWORD *)(a1 + 144) = 0;
  }
  if (!*(void *)(a1 + 56)) {
    *(void *)(a1 + 152) = *(void *)(*(void *)a1 + 2424);
  }
}

uint64_t Phase::Geometry::MpsCpuSceneBuilder::CheckForChanges(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v4 = result;
    do
    {
      if (!*(unsigned char *)(v2 + 40))
      {
        uint64_t v5 = *(void **)(v4 + 8);
        float v6 = *(void **)(v4 + 16);
        if (v5 == v6) {
          goto LABEL_14;
        }
        float32x2_t v7 = *(void **)(v4 + 8);
        while (1)
        {
          __n128 result = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,32ul>,true,true>(v5, 0, (uint64_t)v5, 0x20u, (void *)(v2 + 24));
          char v8 = *((unsigned __int8 *)v7 + 8) == *(unsigned __int8 *)(v2 + 32) ? result : 0;
          if (v8) {
            break;
          }
          v7 += 3;
          v5 += 3;
          if (v7 == v6)
          {
            float32x2_t v7 = v6;
            break;
          }
        }
        if (*(void **)(v4 + 16) == v7
          || 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 3) != v7[2])
        {
LABEL_14:
          *(unsigned char *)(v2 + 40) = 1;
        }
      }
      v2 += 48;
    }
    while (v2 != v3);
  }
  return result;
}

void Phase::Geometry::MpsCpuSceneBuilder::UpdateActiveGroupList(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5)
  {
    uint64_t v12 = *a2;
  }
  else
  {
    do
    {
      float v6 = *(void **)(a1 + 8);
      float32x2_t v7 = *(void **)(a1 + 16);
      if (v6 == v7)
      {
LABEL_9:
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v8 = *(void *)(a1 + 8);
        while (1)
        {
          int v9 = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,32ul>,true,true>(v6, 0, (uint64_t)v6, 0x20u, (void *)(v4 + 24));
          int v10 = *(unsigned __int8 *)(v8 + 8) == *(unsigned __int8 *)(v4 + 32) ? v9 : 0;
          if (v10 == 1) {
            break;
          }
          v8 += 24;
          v6 += 3;
          if ((void *)v8 == v7) {
            goto LABEL_9;
          }
        }
        uint64_t v11 = *(void *)(v8 + 16);
      }
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 3) != v11) {
        *(unsigned char *)(v4 + 40) = 1;
      }
      v4 += 48;
    }
    while (v4 != v5);
    uint64_t v4 = *a2;
    uint64_t v12 = a2[1];
  }
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v4) >> 4);
  uint64_t v15 = *(char **)(a1 + 8);
  float v14 = *(char **)(a1 + 16);
  unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
  unint64_t v17 = v13 - v16;
  if (v13 <= v16)
  {
    if (v13 >= v16) {
      goto LABEL_33;
    }
    uint64_t v27 = &v15[24 * v13];
    goto LABEL_32;
  }
  uint64_t v18 = *(void *)(a1 + 24);
  if (0xAAAAAAAAAAAAAAABLL * ((v18 - (uint64_t)v14) >> 3) >= v17)
  {
    bzero(*(void **)(a1 + 16), 24 * ((24 * v17 - 24) / 0x18) + 24);
    uint64_t v27 = &v14[24 * ((24 * v17 - 24) / 0x18) + 24];
LABEL_32:
    *(void *)(a1 + 16) = v27;
    goto LABEL_33;
  }
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (uint64_t)v15) >> 3);
  if (2 * v19 > v13) {
    unint64_t v13 = 2 * v19;
  }
  if (v19 >= 0x555555555555555) {
    unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
  }
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v20 = 3 * v13;
  long long v21 = (char *)operator new(24 * v13);
  unsigned int v22 = &v21[8 * ((v14 - v15) >> 3)];
  __int32 v23 = &v21[8 * v20];
  size_t v24 = 24 * ((24 * v17 - 24) / 0x18) + 24;
  bzero(v22, v24);
  int32x4_t v25 = &v22[v24];
  if (v14 != v15)
  {
    do
    {
      long long v26 = *(_OWORD *)(v14 - 24);
      *((void *)v22 - 1) = *((void *)v14 - 1);
      *(_OWORD *)(v22 - 24) = v26;
      v22 -= 24;
      v14 -= 24;
    }
    while (v14 != v15);
    float v14 = v15;
  }
  *(void *)(a1 + 8) = v22;
  *(void *)(a1 + 16) = v25;
  *(void *)(a1 + 24) = v23;
  if (v14) {
    operator delete(v14);
  }
LABEL_33:
  uint64_t v28 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    do
    {
      uint64_t v32 = *(void *)(a1 + 8) + v30;
      uint64_t v33 = v28 + v29;
      uint64_t v34 = *(void *)(v33 + 24);
      *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 32);
      *(void *)uint64_t v32 = v34;
      *(void *)(v32 + 16) = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v33 + 8) - *(void *)v33) >> 3);
      ++v31;
      uint64_t v28 = *a2;
      v30 += 24;
      v29 += 48;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4) > v31);
  }
}

void Phase::Geometry::MpsCpuSceneBuilder::RemoveInactiveScenes(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2 != *a2)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = *(void **)(a1 + 8);
      int v9 = *(void **)(a1 + 16);
      if (v8 == v9) {
        goto LABEL_13;
      }
      uint64_t v10 = *(void *)(v3 + 16 * v6);
      uint64_t v11 = *(void *)(a1 + 8);
      while (1)
      {
        char v12 = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,32ul>,true,true>(v8, 0, (uint64_t)v8, 0x20u, (void *)(v10 + 32));
        char v13 = *(unsigned __int8 *)(v11 + 8) == *(unsigned __int8 *)(v10 + 40) ? v12 : 0;
        if (v13) {
          break;
        }
        v11 += 24;
        v8 += 3;
        if ((void *)v11 == v9)
        {
          uint64_t v2 = a2[1];
          goto LABEL_13;
        }
      }
      uint64_t v2 = a2[1];
      if ((void *)v11 == v9)
      {
LABEL_13:
        if ((v7 & 0x80000000) == 0)
        {
          uint64_t v14 = *a2;
          unint64_t v15 = (v2 - *a2) >> 4;
          if (v15 > v7)
          {
            if (v15 - 1 > v7)
            {
              uint64_t v17 = *(void *)(v2 - 16);
              uint64_t v16 = *(void *)(v2 - 8);
              if (v16) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v18 = (void *)(v14 + 16 * v7);
              unint64_t v19 = (std::__shared_weak_count *)v18[1];
              *uint64_t v18 = v17;
              v18[1] = v16;
              if (v19) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              }
            }
            uint64_t v20 = a2[1];
            long long v21 = *(std::__shared_weak_count **)(v20 - 8);
            if (v21) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            }
            uint64_t v2 = v20 - 16;
            a2[1] = v20 - 16;
          }
        }
      }
      else
      {
        ++v7;
      }
      uint64_t v6 = (int)v7;
      uint64_t v3 = *a2;
    }
    while ((int)v7 < (unint64_t)((v2 - *a2) >> 4));
  }
}

void Phase::Geometry::MpsCpuSceneBuilder::ProcessFinishedBuild(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 7))
  {
    unsigned __int8 v3 = atomic_load(a1 + 160);
    if (v3)
    {
      uint64_t v5 = *(void *)(*(void *)a1 + 2424);
      uint64_t v6 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 416);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *((void *)a1 + 12);
        *(_DWORD *)buf = 136315906;
        unint64_t v39 = "GeoMpsCpuSceneBuilder.cpp";
        __int16 v40 = 1024;
        int v41 = 273;
        __int16 v42 = 2048;
        uint64_t v43 = v7;
        __int16 v44 = 2048;
        uint64_t v45 = v5;
        _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Integrating built MPS Scenes from cycle: %llu, current cycle: %llu", buf, 0x26u);
      }
      uint64_t v8 = (uint64_t *)*((void *)a1 + 9);
      for (i = (uint64_t *)*((void *)a1 + 10); v8 != i; v8 += 8)
      {
        uint64_t v10 = *v8;
        if (*v8)
        {
          uint64_t v11 = (void *)*((void *)a1 + 1);
          char v12 = (void *)*((void *)a1 + 2);
          if (v11 != v12)
          {
            uint64_t v13 = *((void *)a1 + 1);
            while (1)
            {
              char v14 = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,32ul>,true,true>(v11, 0, (uint64_t)v11, 0x20u, (void *)(v10 + 32));
              char v15 = *(unsigned __int8 *)(v13 + 8) == *(unsigned __int8 *)(v10 + 40) ? v14 : 0;
              if (v15) {
                break;
              }
              v13 += 24;
              v11 += 3;
              if ((void *)v13 == v12) {
                goto LABEL_44;
              }
            }
            if ((void *)v13 != v12)
            {
              MpsCpuScenePtr = Phase::Geometry::GetMpsCpuScenePtr((uint64_t **)a2, *(void *)(v10 + 32), *(void *)(v10 + 40));
              if (MpsCpuScenePtr)
              {
                uint64_t v18 = *v8;
                uint64_t v17 = v8[1];
                if (v17) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
                }
                unint64_t v19 = (std::__shared_weak_count *)MpsCpuScenePtr[1];
                uint64_t *MpsCpuScenePtr = v18;
                MpsCpuScenePtr[1] = v17;
                if (v19) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
                }
              }
              else
              {
                uint64_t v20 = *(uint64_t **)(a2 + 8);
                unint64_t v21 = *(void *)(a2 + 16);
                if ((unint64_t)v20 >= v21)
                {
                  uint64_t v24 = ((uint64_t)v20 - *(void *)a2) >> 4;
                  unint64_t v25 = v24 + 1;
                  if ((unint64_t)(v24 + 1) >> 60) {
                    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v26 = v21 - *(void *)a2;
                  if (v26 >> 3 > v25) {
                    unint64_t v25 = v26 >> 3;
                  }
                  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v27 = v25;
                  }
                  uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(a2 + 16, v27);
                  uint64_t v30 = &v28[16 * v24];
                  long long v31 = *(_OWORD *)v8;
                  *(_OWORD *)uint64_t v30 = *(_OWORD *)v8;
                  if (*((void *)&v31 + 1)) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
                  }
                  uint64_t v32 = &v28[16 * v29];
                  __int32 v23 = v30 + 16;
                  uint64_t v33 = *(uint64_t **)a2;
                  uint64_t v34 = *(uint64_t **)(a2 + 8);
                  if (v34 == *(uint64_t **)a2)
                  {
                    *(void *)a2 = v30;
                    *(void *)(a2 + 8) = v23;
                    *(void *)(a2 + 16) = v32;
                  }
                  else
                  {
                    do
                    {
                      long long v35 = *((_OWORD *)v34 - 1);
                      v34 -= 2;
                      *((_OWORD *)v30 - 1) = v35;
                      v30 -= 16;
                      uint64_t *v34 = 0;
                      v34[1] = 0;
                    }
                    while (v34 != v33);
                    uint64_t v34 = *(uint64_t **)a2;
                    uint64_t v36 = *(uint64_t **)(a2 + 8);
                    *(void *)a2 = v30;
                    *(void *)(a2 + 8) = v23;
                    *(void *)(a2 + 16) = v32;
                    while (v36 != v34)
                    {
                      uint64_t v37 = (std::__shared_weak_count *)*(v36 - 1);
                      if (v37) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
                      }
                      v36 -= 2;
                    }
                  }
                  if (v34) {
                    operator delete(v34);
                  }
                }
                else
                {
                  *uint64_t v20 = *v8;
                  uint64_t v22 = v8[1];
                  v20[1] = v22;
                  if (v22) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
                  }
                  __int32 v23 = v20 + 2;
                }
                *(void *)(a2 + 8) = v23;
              }
            }
          }
        }
LABEL_44:
        ;
      }
      *((void *)a1 + 19) = *((void *)a1 + 12);
      Phase::Geometry::MpsCpuSceneBuilder::ResetBuildTask((Phase::Geometry::MpsCpuSceneBuilder *)a1);
    }
  }
}

void sub_221F61B80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void Phase::Geometry::MpsCpuSceneBuilder::UpdateWaitList(void *a1, uint64_t *a2)
{
  uint64_t v4 = (unsigned char *)a1[4];
  uint64_t v5 = (unsigned char *)a1[5];
  if (v5 != v4)
  {
    uint64_t v6 = 0;
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      if (*a2 == v9)
      {
LABEL_11:
        if ((v7 & 0x80000000) == 0)
        {
          uint64_t v14 = a1[4];
          unint64_t v15 = (uint64_t)&v5[-v14] >> 4;
          if (v15 > v7)
          {
            if (v15 - 1 > v7)
            {
              uint64_t v16 = v14 + 16 * v7;
              uint64_t v17 = *((void *)v5 - 2);
              *(unsigned char *)(v16 + 8) = *(v5 - 8);
              *(void *)uint64_t v16 = v17;
              uint64_t v5 = (unsigned char *)a1[5];
            }
            v5 -= 16;
            a1[5] = v5;
          }
        }
      }
      else
      {
        uint64_t v10 = &v4[16 * v6];
        uint64_t v11 = (void *)(v8 + 24);
        while (1)
        {
          char v12 = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,32ul>,true,true>(v11, 0, (uint64_t)v11, 0x20u, v10);
          char v13 = *(unsigned __int8 *)(v8 + 32) == v10[8] ? v12 : 0;
          if (v13) {
            break;
          }
          v8 += 48;
          v11 += 6;
          if (v8 == v9)
          {
            uint64_t v5 = (unsigned char *)a1[5];
            goto LABEL_11;
          }
        }
        *(unsigned char *)(v8 + 40) = 0;
        ++v7;
        uint64_t v5 = (unsigned char *)a1[5];
      }
      uint64_t v6 = (int)v7;
      uint64_t v4 = (unsigned char *)a1[4];
    }
    while ((int)v7 < (unint64_t)((v5 - v4) >> 4));
  }
  uint64_t v19 = *a2;
  for (uint64_t i = a2[1]; v19 != i; v19 += 48)
  {
    if (*(unsigned char *)(v19 + 40))
    {
      uint64_t v20 = (_OWORD *)(v19 + 24);
      unint64_t v21 = a1[6];
      if ((unint64_t)v5 >= v21)
      {
        __int32 v23 = (unsigned char *)a1[4];
        uint64_t v24 = (v5 - v23) >> 4;
        unint64_t v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v26 = v21 - (void)v23;
        if (v26 >> 3 > v25) {
          unint64_t v25 = v26 >> 3;
        }
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v25;
        }
        if (v27)
        {
          if (v27 >> 60) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v28 = (char *)operator new(16 * v27);
        }
        else
        {
          uint64_t v28 = 0;
        }
        uint64_t v29 = &v28[16 * v24];
        *(_OWORD *)uint64_t v29 = *v20;
        uint64_t v30 = v29;
        if (v5 != v23)
        {
          do
          {
            uint64_t v31 = *((void *)v5 - 2);
            v5 -= 16;
            char v32 = v5[8];
            *((void *)v30 - 2) = v31;
            v30 -= 16;
            v30[8] = v32;
          }
          while (v5 != v23);
          uint64_t v5 = (unsigned char *)a1[4];
        }
        uint64_t v22 = v29 + 16;
        a1[4] = v30;
        a1[5] = v29 + 16;
        a1[6] = &v28[16 * v27];
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v5 = *v20;
        uint64_t v22 = v5 + 16;
      }
      a1[5] = v22;
      uint64_t v5 = v22;
    }
  }
}

BOOL Phase::Geometry::MpsCpuSceneBuilder::StartNewBuild(unsigned __int8 *a1, uint64_t *a2)
{
  if (*((void *)a1 + 7) || *((void *)a1 + 10) != *((void *)a1 + 9)) {
    goto LABEL_55;
  }
  uint64_t v4 = *((void *)a1 + 4);
  uint64_t v5 = *((void *)a1 + 5);
  if (v4 != v5)
  {
    do
    {
      uint64_t v6 = *a2;
      uint64_t v7 = a2[1];
      if (*a2 != v7)
      {
        uint64_t v8 = (void *)(v6 + 24);
        while (1)
        {
          int v9 = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,32ul>,true,true>(v8, 0, (uint64_t)v8, 0x20u, (void *)v4);
          int v10 = *(unsigned __int8 *)(v6 + 32) == *(unsigned __int8 *)(v4 + 8) ? v9 : 0;
          if (v10 == 1) {
            break;
          }
          v6 += 48;
          v8 += 6;
          if (v6 == v7) {
            goto LABEL_13;
          }
        }
        *(unsigned char *)(v6 + 40) = 1;
      }
LABEL_13:
      v4 += 16;
    }
    while (v4 != v5);
    uint64_t v4 = *((void *)a1 + 4);
  }
  *((void *)a1 + 5) = v4;
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 != v12)
  {
    uint64_t v45 = a2[1];
    do
    {
      if (*(unsigned char *)(v11 + 40))
      {
        unint64_t v14 = *((void *)a1 + 10);
        unint64_t v13 = *((void *)a1 + 11);
        if (v14 >= v13)
        {
          uint64_t v16 = *((void *)a1 + 9);
          uint64_t v17 = (uint64_t)(v14 - v16) >> 6;
          if ((unint64_t)(v17 + 1) >> 58) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = v13 - v16;
          uint64_t v19 = v18 >> 5;
          if (v18 >> 5 <= (unint64_t)(v17 + 1)) {
            uint64_t v19 = v17 + 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          uint64_t v50 = a1 + 88;
          if (v20)
          {
            if (v20 >> 58) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            unint64_t v21 = (char *)operator new(v20 << 6);
          }
          else
          {
            unint64_t v21 = 0;
          }
          __p = v21;
          v48.i64[0] = (uint64_t)&v21[64 * v17];
          v48.i64[1] = v48.i64[0];
          long long v49 = &v21[64 * v20];
          Phase::Geometry::MpsCpuSceneBuilder::BuildEntry::BuildEntry(v48.i64[0], v11);
          uint64_t v22 = v48.i64[0];
          uint64_t v15 = v48.i64[1] + 64;
          v48.i64[1] += 64;
          uint64_t v24 = *((void *)a1 + 9);
          unint64_t v23 = *((void *)a1 + 10);
          if (v23 == v24)
          {
            int64x2_t v30 = vdupq_n_s64(v23);
          }
          else
          {
            uint64_t v25 = 0;
            do
            {
              uint64_t v26 = v22 + v25;
              *(void *)(v26 - 64) = *(void *)(v23 + v25 - 64);
              uint64_t v27 = *(void *)(v23 + v25 - 56);
              *(void *)(v26 - 56) = v27;
              if (v27) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
              }
              *(void *)(v26 - 48) = 0;
              *(void *)(v26 - 40) = 0;
              uint64_t v28 = (void *)(v26 - 48);
              v28[2] = 0;
              std::vector<std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>>::__init_with_size[abi:ne180100]<std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*,std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*>(v28, *(void *)(v23 + v25 - 48), *(void *)(v23 + v25 - 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v23 + v25 - 40) - *(void *)(v23 + v25 - 48)) >> 3));
              uint64_t v29 = v22 + v25;
              *(_OWORD *)(v29 - 24) = *(_OWORD *)(v23 + v25 - 24);
              *(unsigned char *)(v29 - 8) = *(unsigned char *)(v23 + v25 - 8);
              v25 -= 64;
            }
            while (v23 + v25 != v24);
            int64x2_t v30 = *(int64x2_t *)(a1 + 72);
            uint64_t v15 = v48.i64[1];
            v22 += v25;
            uint64_t v12 = v45;
          }
          *((void *)a1 + 9) = v22;
          *((void *)a1 + 10) = v15;
          int64x2_t v48 = v30;
          uint64_t v31 = (char *)*((void *)a1 + 11);
          *((void *)a1 + 11) = v49;
          long long v49 = v31;
          __p = (void *)v30.i64[0];
          std::__split_buffer<Phase::Geometry::MpsCpuSceneBuilder::BuildEntry>::~__split_buffer((uint64_t)&__p);
        }
        else
        {
          Phase::Geometry::MpsCpuSceneBuilder::BuildEntry::BuildEntry(*((void *)a1 + 10), v11);
          uint64_t v15 = v14 + 64;
          *((void *)a1 + 10) = v14 + 64;
        }
        *((void *)a1 + 10) = v15;
      }
      v11 += 48;
    }
    while (v11 != v12);
  }
  uint64_t v33 = *((void *)a1 + 9);
  uint64_t v32 = *((void *)a1 + 10);
  if (v32 != v33)
  {
    uint64_t v34 = *((void *)a1 + 9);
    do
    {
      if (*(void *)(v34 + 24) == *(void *)(v34 + 16)) {
        goto LABEL_55;
      }
      v34 += 64;
    }
    while (v34 != v32);
    uint64_t v35 = *(void *)a1;
    *((void *)a1 + 12) = *(void *)(*(void *)a1 + 2424);
    uint64_t v36 = *(void *)(v35 + 2416);
    std::string::basic_string[abi:ne180100]<0>(&__p, "BuildMpsCpuScene");
    (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v36 + 16))(&v51, v36, &__p);
    long long v37 = v51;
    long long v51 = 0uLL;
    uint64_t v38 = (std::__shared_weak_count *)*((void *)a1 + 8);
    *(_OWORD *)(a1 + 56) = v37;
    if (v38)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      if (*((void *)&v51 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v51 + 1));
      }
    }
    if (v48.i8[15] < 0) {
      operator delete(__p);
    }
    uint64_t v39 = *((void *)a1 + 7);
    *(_DWORD *)(v39 + 524) = 0;
    atomic_store(1u, (unsigned __int8 *)(v39 + 40));
    uint64_t v40 = *((void *)a1 + 7);
    *(void *)(v40 + 256) = &unk_26D476F88;
    *(void *)(v40 + 264) = a1;
    *(unsigned char *)(v40 + 383) = 1;
    atomic_store(1u, (unsigned __int8 *)(v40 + 40));
    atomic_store(0, a1 + 160);
    uint64_t v41 = *((void *)a1 + 7);
    if (v41)
    {
      uint64_t v42 = *(void *)(*(void *)a1 + 2416);
      uint64_t v43 = (std::__shared_weak_count *)*((void *)a1 + 8);
      v46[0] = v41;
      v46[1] = (uint64_t)v43;
      if (v43) {
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Phase::JobManager::RunJobAsync(v42, v46);
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      return v32 != v33;
    }
LABEL_55:
    std::terminate();
  }
  return v32 != v33;
}

void sub_221F62164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::MpsCpuSceneBuilder::SaveSceneShapes(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a2)
  {
    long long v27 = 0uLL;
    unsigned int v28 = 0;
    uint64_t v29 = 0xFFFFFFFFLL;
    std::__shared_mutex_base::__shared_mutex_base(&v30);
    uint64_t v31 = 0;
    uint64_t v7 = *(void **)(a1 + 104);
    uint64_t v8 = *(void *)(a1 + 112);
    *(void *)&long long v27 = v7;
    *((void *)&v27 + 1) = v8;
    *(_OWORD *)(a1 + 104) = 0uLL;
    unsigned int v9 = v28;
    unsigned int v10 = *(_DWORD *)(a1 + 120);
    unsigned int v28 = v10;
    *(_DWORD *)(a1 + 120) = v9;
    uint64_t v11 = *(void *)a4;
    if (*(void *)a4 && v7)
    {
      unsigned int v12 = *(_DWORD *)(a4 + 16);
      if (v12 >= v10) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = v12;
      }
      unint64_t v14 = &v7[3 * v13];
      if (v8 && *(uint64_t *)(v8 + 8) >= 1 && v13)
      {
        uint64_t v15 = 0;
        while (1)
        {
          uint64_t v16 = v7[v15];
          if (v16 && v16 != *(void *)(v11 + v15 * 8)) {
            break;
          }
          v15 += 3;
          if (3 * v13 == v15) {
            goto LABEL_33;
          }
        }
        Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::Realloc((uint64_t *)&v27);
        v11 += v15 * 8;
        uint64_t v7 = (void *)v27;
        uint64_t v26 = (void *)(v27 + v15 * 8);
        unint64_t v14 = (void *)(v27 + 24 * v13);
      }
      else
      {
        uint64_t v26 = v7;
      }
      if (v26 != v14)
      {
        uint64_t v18 = (void *)(v11 + 16);
        do
        {
          uint64_t v19 = *(v18 - 2);
          if (*v26) {
            BOOL v20 = *v26 == v19;
          }
          else {
            BOOL v20 = 1;
          }
          if (!v20)
          {
            uint64_t v21 = *(v18 - 1);
            if (v21) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v22 = (std::__shared_weak_count *)v26[1];
            *uint64_t v26 = v19;
            v26[1] = v21;
            if (v22) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            }
            v26[2] = *v18;
          }
          v26 += 3;
          v18 += 3;
        }
        while (v26 != v14);
        uint64_t v7 = (void *)v27;
      }
    }
LABEL_33:
    uint64_t v23 = *((void *)&v27 + 1);
    if (*((void *)&v27 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v27 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = *(std::__shared_weak_count **)(a1 + 136);
    *(void *)(a1 + 128) = v7;
    *(void *)(a1 + 136) = v23;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    *(_DWORD *)(a1 + 144) = v28;
    std::condition_variable::~condition_variable(&v30.__gate2_);
    std::condition_variable::~condition_variable(&v30.__gate1_);
    std::mutex::~mutex(&v30.__mut_);
    if (*((void *)&v27 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
    }
  }
  else
  {
    Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::operator=(a1 + 128, (uint64_t *)a4);
  }
  return Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::operator=(a1 + 104, a3);
}

void sub_221F623F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Phase::Geometry::MpsCpuSceneBuilder::WaitForCurrentBuild(Phase::Geometry::MpsCpuSceneBuilder *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1)
  {
    uint64_t v3 = *(void *)(*(void *)this + 2416);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
    uint64_t v5 = v1;
    uint64_t v6 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, double))(*(void *)v3 + 96))(v3, &v5, 0.0);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_221F624B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::MpsCpuSceneBuilder::ResetBuildTask(Phase::Geometry::MpsCpuSceneBuilder *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 8);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v4 = (void *)*((void *)this + 9);
  for (uint64_t i = (void *)*((void *)this + 10);
        i != v4;
        std::allocator<Phase::Geometry::MpsCpuSceneBuilder::BuildEntry>::destroy[abi:ne180100]((uint64_t)this + 88, i))
  {
    i -= 8;
  }
  *((void *)this + 10) = v4;
}

void Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::MergeFrom(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void **)a1;
  if (*a2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unsigned int v6 = *(_DWORD *)(a1 + 16);
    unsigned int v7 = *((_DWORD *)a2 + 4);
    if (v7 >= v6) {
      uint64_t v8 = v6;
    }
    else {
      uint64_t v8 = v7;
    }
    uint64_t v9 = (uint64_t)&v3[3 * v8];
    uint64_t v10 = *(void *)(a1 + 8);
    if (v10)
    {
      if (*(uint64_t *)(v10 + 8) >= 1 && v8 != 0)
      {
        uint64_t v12 = 0;
        while (v3[v12] || !*(void *)(v2 + v12 * 8))
        {
          v12 += 3;
          if (3 * v8 == v12) {
            return;
          }
        }
        Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::Realloc((uint64_t *)a1);
        uint64_t v3 = (void *)(*(void *)a1 + v12 * 8);
        uint64_t v9 = *(void *)a1 + 24 * v8;
        v2 += v12 * 8;
      }
    }
    if (v3 != (void *)v9)
    {
      uint64_t v13 = (void *)(v2 + 16);
      do
      {
        if (!*v3)
        {
          uint64_t v14 = *(v13 - 2);
          if (v14)
          {
            uint64_t v15 = *(v13 - 1);
            if (v15) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = (std::__shared_weak_count *)v3[1];
            *uint64_t v3 = v14;
            v3[1] = v15;
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            v3[2] = *v13;
          }
        }
        v3 += 3;
        v13 += 3;
      }
      while (v3 != (void *)v9);
    }
  }
}

uint64_t Phase::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64,Phase::Geometry::ShapeFactory>::~SharedSlotMap(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(a1 + 32);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 144));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 96));
  std::mutex::~mutex(v2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void std::vector<Phase::Geometry::MpsCpuSceneBuilder::BuildEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    BOOL v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 8;
        std::allocator<Phase::Geometry::MpsCpuSceneBuilder::BuildEntry>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<Phase::Geometry::MpsCpuSceneBuilder::BuildEntry>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[2];
  if (v3)
  {
    a2[3] = v3;
    operator delete(v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,32ul>,true,true>(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2)) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

void Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::Realloc(uint64_t *a1)
{
  unint64_t v1 = *((unsigned int *)a1 + 4);
  if (v1)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::AllocSlots(v1, &v15);
    if (*((_DWORD *)a1 + 4))
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = *a1;
        unint64_t v6 = (uint64_t *)(*a1 + v3);
        uint64_t v7 = v15;
        uint64_t v9 = *v6;
        uint64_t v8 = v6[1];
        if (v8) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v10 = (void *)(v7 + v3);
        uint64_t v11 = *(std::__shared_weak_count **)(v7 + v3 + 8);
        *uint64_t v10 = v9;
        v10[1] = v8;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        v10[2] = *(void *)(v5 + v3 + 16);
        ++v4;
        v3 += 24;
      }
      while (v4 < *((unsigned int *)a1 + 4));
    }
    uint64_t v13 = a1 + 4;
    char v14 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    long long v12 = *(_OWORD *)a1;
    *(_OWORD *)a1 = v15;
    long long v15 = v12;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v13);
    if (*((void *)&v15 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
    }
  }
}

void sub_221F62928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::AllocSlots(unint64_t a1@<X1>, void *a2@<X8>)
{
  if (a1)
  {
    is_mul_ok(a1, 0x18uLL);
    operator new[]();
  }
  *a2 = 0;
  a2[1] = 0;
}

void std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Shape,Phase::Handle64>::Slot []>::shared_ptr[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::Shape,Phase::Handle64>::Slot,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_221F62A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::Shape,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Shape,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::Shape,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::Shape,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::Shape,Phase::Handle64>::Slot>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::Shape,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Shape,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::Shape,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::Shape,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::Shape,Phase::Handle64>::Slot>>::__on_zero_shared(uint64_t a1)
{
}

void Phase::Command<128>::Invoker<Phase::Geometry::MpsCpuSceneBuilder::PrepareBuildJob(void)::$_0,void>::~Invoker()
{
}

void Phase::Command<128>::Invoker<Phase::Geometry::MpsCpuSceneBuilder::PrepareBuildJob(void)::$_0,void>::Call(Phase::Logger *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)a1 + 1);
  uint64_t v2 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 416);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(v1 + 96);
    int v10 = 136315650;
    uint64_t v11 = "GeoMpsCpuSceneBuilder.cpp";
    __int16 v12 = 1024;
    int v13 = 139;
    __int16 v14 = 2048;
    uint64_t v15 = v3;
    _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Starting build of MPS Scenes from cycle: %llu", (uint8_t *)&v10, 0x1Cu);
  }
  unint64_t v4 = *(Phase::Geometry::MpsCpuScene ***)(v1 + 72);
  uint64_t v5 = *(Phase::Geometry::MpsCpuScene ***)(v1 + 80);
  while (v4 != v5)
  {
    uint64_t v6 = *(void *)(v1 + 96);
    uint64_t v7 = (Phase::Geometry::MpsCpuScene *)operator new(0x50uLL);
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = 0;
    *(void *)uint64_t v7 = &unk_26D476FB0;
    uint64_t v8 = (Phase::Geometry::MpsCpuScene *)Phase::Geometry::MpsCpuScene::MpsCpuScene((uint64_t)v7 + 24, (uint64_t)(v4 + 2), v6);
    uint64_t v9 = (std::__shared_weak_count *)v4[1];
    *unint64_t v4 = v8;
    v4[1] = v7;
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v8 = *v4;
    }
    Phase::Geometry::MpsCpuScene::Build(v8);
    v4 += 8;
  }
  atomic_store(1u, (unsigned __int8 *)(v1 + 160));
}

void sub_221F62C30(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::Geometry::MpsCpuScene>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D476FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Geometry::MpsCpuScene>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D476FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_emplace<Phase::Geometry::MpsCpuScene>::__on_zero_shared(uint64_t a1)
{
}

uint64_t Phase::Geometry::MpsCpuSceneBuilder::BuildEntry::BuildEntry(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>>::__init_with_size[abi:ne180100]<std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*,std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*>((void *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 40);
  return a1;
}

void sub_221F62D40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>>::__init_with_size[abi:ne180100]<std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*,std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<Phase::SpatialModeler::PhaseRoomSimulationSoundSource>::__vallocate[abi:ne180100](result, a4);
    __n128 result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>>,std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*,std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*,std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_221F62DB0(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  unint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>>,std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*,std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*,std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = a4;
  while (a2 != a3)
  {
    *(_DWORD *)uint64_t result = *(_DWORD *)a2;
    *(_DWORD *)(result + 4) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(result + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(result + 20) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
    *(_DWORD *)(result + 28) = *(_DWORD *)(a2 + 28);
    *(void *)(result + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 40);
    result += 56;
    a2 += 56;
  }
  return result;
}

uint64_t std::__split_buffer<Phase::Geometry::MpsCpuSceneBuilder::BuildEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(void *)(a1 + 16) = i - 64;
    std::allocator<Phase::Geometry::MpsCpuSceneBuilder::BuildEntry>::destroy[abi:ne180100](v4, (void *)(i - 64));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t Phase::Geometry::MpsCpuScene::MpsCpuScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)(a1 + 24) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 48) = a3;
  *(void *)a1 = objc_opt_new();
  return a1;
}

void sub_221F62EF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)(v1 + 8);
  if (v3)
  {
    *(void *)(v1 + 16) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::MpsCpuScene::~MpsCpuScene(Phase::Geometry::MpsCpuScene *this)
{
  uint64_t v2 = *(void **)this;
  *(void *)this = 0;

  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void Phase::Geometry::MpsCpuScene::Build(Phase::Geometry::MpsCpuScene *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t Instance = Phase::Logger::GetInstance(this);
  uint64_t v3 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 416));
  uint64_t v4 = Phase::Logger::GetInstance(v3);
  if (*(unsigned char *)(v4 + 424))
  {
    uint64_t v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v4)
                                                                                       + 416)));
    uint64_t v6 = v5;
    if ((unint64_t)v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v6, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v3, "Phase_MpsCpuScene_Build", "MpsCpuScene: Build", buf, 2u);
    }
  }
  int64x2_t v58 = 0uLL;
  v59[0] = 0;
  uint64_t v7 = *((void *)this + 1);
  uint64_t v8 = *((void *)this + 2);
  if (v8 != v7)
  {
    unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v7) >> 3);
    if (v9 >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    *(void *)&buf[32] = v59;
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v9);
    __int16 v12 = (void *)v58.i64[1];
    int v13 = (void *)v58.i64[0];
    if (v58.i64[1] == v58.i64[0])
    {
      int64x2_t v16 = vdupq_n_s64(v58.u64[1]);
      __int16 v14 = v10;
    }
    else
    {
      __int16 v14 = v10;
      do
      {
        uint64_t v15 = *--v12;
        *__int16 v12 = 0;
        *((void *)v14 - 1) = v15;
        v14 -= 8;
      }
      while (v12 != v13);
      int64x2_t v16 = v58;
    }
    v58.i64[0] = (uint64_t)v14;
    v58.i64[1] = (uint64_t)v10;
    *(int64x2_t *)&buf[8] = v16;
    uint64_t v17 = v59[0];
    v59[0] = &v10[8 * v11];
    *(void *)&buf[24] = v17;
    *(void *)buf = v16.i64[0];
    uint64_t v4 = std::__split_buffer<MPSCPUAccelerationStructureTriangleGeometryDescriptor * {__strong}>::~__split_buffer((uint64_t)buf);
    uint64_t v7 = *((void *)this + 1);
    uint64_t v8 = *((void *)this + 2);
  }
  os_signpost_id_t v56 = (os_signpost_id_t)v3;
  int32x4_t v57 = this;
  if (v7 == v8)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v18 = 0;
    do
    {
      uint64_t v19 = **(void **)(*(void *)(v7 + 48) + 120);
      if (Phase::operator!=<float>((float *)v7, (float *)(v19 + 112)))
      {
        float32x4_t v20 = Phase::Matrix33From<float>((float *)v7, (float32x4_t *)buf);
        uint64_t v23 = *(void *)(**(void **)(v19 + 16) + 16 * *(void *)(v19 + 24));
        uint64_t v24 = *(void *)(v23 + 24);
        if (v24)
        {
          v20.i64[0] = *(void *)&buf[12];
          v20.i32[2] = *(_DWORD *)&buf[20];
          float32x4_t v25 = *(float32x4_t *)buf;
          v21.i64[0] = *(void *)&buf[24];
          v21.i32[2] = *(_DWORD *)&buf[32];
          v22.i64[0] = *(void *)(v7 + 16);
          v22.i32[2] = *(_DWORD *)(v7 + 24);
          uint64_t v26 = *(float32x4_t **)(v23 + 8);
          long long v27 = *(float32x4_t **)(*(void *)(**(void **)(v19 + 96) + 16 * *(void *)(v19 + 104)) + 8);
          uint64_t v28 = 16 * v24;
          do
          {
            float32x4_t v29 = *v26++;
            *v27++ = vaddq_f32(v22, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, v29.f32[0]), v20, *(float32x2_t *)v29.f32, 1), v21, v29, 2));
            v28 -= 16;
          }
          while (v28);
        }
        *(_DWORD *)(v19 + 112) = *(_DWORD *)v7;
        *(_DWORD *)(v19 + 116) = *(_DWORD *)(v7 + 4);
        *(_DWORD *)(v19 + 120) = *(_DWORD *)(v7 + 8);
        *(_DWORD *)(v19 + 124) = *(_DWORD *)(v7 + 12);
        *(_DWORD *)(v19 + 128) = *(_DWORD *)(v7 + 16);
        *(_DWORD *)(v19 + 132) = *(_DWORD *)(v7 + 20);
        *(_DWORD *)(v19 + 136) = *(_DWORD *)(v7 + 24);
        *(_DWORD *)(v19 + 140) = *(_DWORD *)(v7 + 28);
      }
      uint64_t v30 = objc_opt_new();
      uint64_t v31 = v30;
      uint64_t v32 = v58.i64[1];
      if (v58.i64[1] >= v59[0])
      {
        uint64_t v34 = (v58.i64[1] - v58.i64[0]) >> 3;
        if ((unint64_t)(v34 + 1) >> 61) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v35 = (v59[0] - v58.i64[0]) >> 2;
        if (v35 <= v34 + 1) {
          unint64_t v35 = v34 + 1;
        }
        if (v59[0] - v58.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v35;
        }
        *(void *)&buf[32] = v59;
        if (v36) {
          unint64_t v36 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<int *>>(v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v38 = (uint64_t *)(v36 + 8 * v34);
        unint64_t v39 = v36 + 8 * v37;
        *(void *)&buf[24] = v39;
        *uint64_t v38 = v31;
        uint64_t v33 = v38 + 1;
        *(void *)&buf[16] = v38 + 1;
        uint64_t v40 = (void *)v58.i64[1];
        uint64_t v41 = (void *)v58.i64[0];
        if (v58.i64[1] == v58.i64[0])
        {
          int64x2_t v43 = vdupq_n_s64(v58.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v42 = *--v40;
            *uint64_t v40 = 0;
            *--uint64_t v38 = v42;
          }
          while (v40 != v41);
          int64x2_t v43 = v58;
          uint64_t v33 = *(void **)&buf[16];
          unint64_t v39 = *(void *)&buf[24];
        }
        v58.i64[0] = (uint64_t)v38;
        v58.i64[1] = (uint64_t)v33;
        *(int64x2_t *)&buf[8] = v43;
        uint64_t v44 = v59[0];
        v59[0] = v39;
        *(void *)&buf[24] = v44;
        *(void *)buf = v43.i64[0];
        std::__split_buffer<MPSCPUAccelerationStructureTriangleGeometryDescriptor * {__strong}>::~__split_buffer((uint64_t)buf);
      }
      else
      {
        *(void *)v58.i64[1] = v30;
        uint64_t v33 = (void *)(v32 + 8);
      }
      v58.i64[1] = (uint64_t)v33;
      objc_msgSend((id)*(v33 - 1), "setVertexData:", *(void *)(*(void *)(**(void **)(v19 + 96) + 16 * *(void *)(v19 + 104)) + 8), v56);
      [(id)*(v33 - 1) setVertexStride:16];
      [(id)*(v33 - 1) setIndexData:*(void *)(*(void *)(**(void **)(v19 + 32) + 16 * *(void *)(v19 + 40)) + 8)];
      [(id)*(v33 - 1) setIndexDataType:536870944];
      [(id)*(v33 - 1) setTriangleCount:*(void *)(*(void *)(**(void **)(v19 + 48) + 16 * *(void *)(v19 + 56)) + 24)];
      uint64_t v4 = [(id)*(v33 - 1) triangleCount];
      v18 += v4;
      *(void *)(v7 + 48) = 0;
      v7 += 56;
    }
    while (v7 != v8);
  }
  uint64_t v45 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v4) + 416);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v46 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)v57 + 2) - *((void *)v57 + 1)) >> 3);
    *(_DWORD *)buf = 136315906;
    *(void *)&uint8_t buf[4] = "GeoMpsImplementation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 110;
    *(_WORD *)&buf[18] = 2048;
    *(void *)&buf[20] = v46;
    *(_WORD *)&buf[28] = 2048;
    *(void *)&buf[30] = v18;
    _os_log_impl(&dword_221E5E000, v45, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Rebuild BVH for %lu shapes. Triangles count %lu", buf, 0x26u);
  }
  long long v47 = objc_opt_new();
  int64x2_t v48 = objc_msgSend(MEMORY[0x263EFF8C0], "arrayWithObjects:count:");
  [v47 setGeometryDescriptors:v48];

  id v49 = *(id *)v57;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v50 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)[v49 rebuildWithDescriptor:v47 queue:0])+ 416);
    BOOL v51 = os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
    if (!v51) {
      goto LABEL_48;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "GeoMpsImplementation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 123;
    long long v52 = "%25s:%-5d Rebuild BVH in thread from selector";
  }
  else
  {
    uint64_t v50 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)[v49 rebuildWithDescriptor:v47])+ 416);
    BOOL v51 = os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT);
    if (!v51) {
      goto LABEL_48;
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "GeoMpsImplementation.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 130;
    long long v52 = "%25s:%-5d Rebuild BVH asynchronously from selector";
  }
  _os_log_impl(&dword_221E5E000, v50, OS_LOG_TYPE_DEFAULT, v52, buf, 0x12u);
LABEL_48:
  uint64_t v53 = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)v51);
  if (*((unsigned char *)v53 + 424))
  {
    unsigned __int32 v54 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v53)
                                                                                        + 416)));
    __int32 v55 = v54;
    if (v56 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v54))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v55, OS_SIGNPOST_INTERVAL_END, v56, "Phase_MpsCpuScene_Build", (const char *)&unk_222112ABB, buf, 2u);
    }
  }
  *(void *)buf = &v58;
  std::vector<MPSCPUAccelerationStructureTriangleGeometryDescriptor * {__strong}>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_221F635E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<MPSCPUAccelerationStructureTriangleGeometryDescriptor * {__strong}>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

float32x4_t Phase::Matrix33From<float>@<Q0>(float *a1@<X0>, float32x4_t *a2@<X8>)
{
  Phase::Matrix33From<float>(a1, v8[0].f32);
  float v4 = a1[7];
  float32_t v5 = v4 * v9;
  float32x4_t v6 = vmulq_n_f32(v8[0], v4);
  float32x4_t result = vmulq_n_f32(v8[1], v4);
  *a2 = v6;
  a2[1] = result;
  a2[2].f32[0] = v5;
  return result;
}

void Phase::Geometry::ConvertValidMpsResult<Phase::Geometry::RaycastHit>(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, int a5, uint64_t a6)
{
  unint64_t v7 = HIDWORD(a4);
  *(_DWORD *)a6 = a4;
  *(_DWORD *)(a6 + 24) = HIDWORD(a4);
  uint64_t v8 = (long long *)(a3 + 56 * a5);
  long long v21 = *v8;
  uint64_t v9 = *((void *)v8 + 5);
  uint64_t v22 = v9;
  *(void *)(a6 + 16) = v9;
  if (v9 < a2
    && *(_DWORD *)(a1 + 24 * v9 + 20) == HIDWORD(v9)
    && (uint64_t v10 = *(void *)(a1 + 24 * v9)) != 0)
  {
    uint64_t v11 = **(void **)(v10 + 120);
    uint64_t v12 = *(void *)(**(void **)(v11 + 48) + 16 * *(void *)(v11 + 56));
    int v13 = (float *)(*(void *)(v12 + 8) + *(void *)(v12 + 32) * v7);
    v20[0] = *v13;
    v20[1] = v13[1];
    v20[2] = v13[2];
    Phase::operator*<float>((float *)&v21, v20, (float *)&v18);
    *(void *)(a6 + 4) = v18;
    *(_DWORD *)(a6 + 12) = v19;
    uint64_t v14 = *(void *)(**(void **)(v11 + 64) + 16 * *(void *)(v11 + 72));
    uint64_t v15 = *(void *)(**(void **)(v11 + 80) + 16 * *(void *)(v11 + 88));
    uint64_t v16 = *(void *)(v15 + 8)
        + *(void *)(v15 + 32) * *(unsigned __int16 *)(*(void *)(v14 + 8) + *(void *)(v14 + 32) * v7);
    uint64_t v17 = *(void *)(**(void **)(*(void *)(v11 + 8) + 144) + 16 * *(void *)(*(void *)(v11 + 8) + 152));
    *(void *)(a6 + 32) = *(void *)(*(void *)(v17 + 8) + *(void *)(v17 + 32) * *(unsigned int *)(v16 + 56));
  }
  else
  {
    *(void *)(a6 + 8) = 0;
    *(_DWORD *)(a6 + 4) = 0;
    *(void *)(a6 + 32) = 0;
  }
}

uint64_t Phase::Geometry::RunSingleHitVsMpsScene(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v4 = a4 - a3;
  if ((int)(a4 - a3) >= 1)
  {
    if (*(_DWORD *)(a2 + 96) <= a3) {
      __assert_rtn("Get", "GeoSceneQuery.hpp", 115, "inIndex < inBatch.mCount");
    }
    unint64_t v7 = *(void *)(a2 + 88) + *(_DWORD *)(a2 + 100) * a3 + 32;
    int MpsIntersections = Phase::Geometry::GetMpsIntersections(a1 + 984);
    if (MpsIntersections == 1)
    {
      uint64_t v10 = v9;
      if (!v9) {
        std::terminate();
      }
      uint64_t v11 = *(unsigned int *)(a2 + 100);
      if (v11)
      {
        unint64_t v12 = v7 + v11 * (unint64_t)v4;
        do
        {
          if (*(float *)v7 >= 0.0) {
            Phase::Geometry::ConvertValidMpsResult<Phase::Geometry::RaycastHit>(*(void *)(a1 + 96), *(_DWORD *)(a1 + 112), *(void *)(v10 + 8), *(void *)v7, *(_DWORD *)(v7 + 8), v7);
          }
          else {
            *(_DWORD *)unint64_t v7 = 2139095039;
          }
          v7 += v11;
        }
        while (v7 < v12);
      }
      return 1;
    }
    if (MpsIntersections >= 2)
    {
      uint64_t v13 = *(unsigned int *)(a2 + 100);
      if (v13)
      {
        unint64_t v14 = v7 + v13 * (unint64_t)v4;
        do
        {
          if (*(float *)v7 >= 0.0) {
            Phase::Geometry::ConvertValidMpsResult<Phase::Geometry::RaycastHit>(*(void *)(a1 + 96), *(_DWORD *)(a1 + 112), *(void *)(*(void *)(*(void *)(a1 + 984) + 16 * *(int *)(v7 + 12)) + 8), *(void *)v7, *(_DWORD *)(v7 + 8), v7);
          }
          else {
            *(_DWORD *)unint64_t v7 = 2139095039;
          }
          v7 += v13;
        }
        while (v7 < v14);
      }
      return 1;
    }
  }
  return 0;
}

uint64_t Phase::Geometry::RunSingleHitVsMpsSceneV2(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  unsigned int v4 = a4 - a3;
  if ((int)(a4 - a3) >= 1)
  {
    if (*(_DWORD *)(a2 + 96) <= a3) {
      __assert_rtn("Get", "GeoSceneQuery.hpp", 115, "inIndex < inBatch.mCount");
    }
    unint64_t v6 = *(void *)(a2 + 88) + *(_DWORD *)(a2 + 100) * a3 + 32;
    unint64_t v7 = (void *)(a1 + 984);
    int MpsIntersections = Phase::Geometry::GetMpsIntersections(a1 + 984);
    if (MpsIntersections == 1)
    {
      if (!v9) {
        std::terminate();
      }
      uint64_t v10 = *(unsigned int *)(a2 + 100);
      if (v10)
      {
        unint64_t v11 = v6 + v10 * (unint64_t)v4;
        do
        {
          LODWORD(v12) = 2139095039;
          if (*(float *)v6 >= 0.0)
          {
            uint64_t v12 = *(void *)v6;
            uint64_t v13 = (int8x16_t *)(*(void *)(v9 + 8) + 56 * *(int *)(v6 + 8));
            *(_DWORD *)(v6 + 4) = HIDWORD(*(void *)v6);
            *(int8x16_t *)(v6 + 8) = vextq_s8(v13[2], v13[2], 8uLL);
          }
          *(_DWORD *)unint64_t v6 = v12;
          v6 += v10;
        }
        while (v6 < v11);
      }
      return 1;
    }
    if (MpsIntersections >= 2)
    {
      uint64_t v14 = *(unsigned int *)(a2 + 100);
      if (v14)
      {
        unint64_t v15 = v6 + v14 * (unint64_t)v4;
        do
        {
          LODWORD(v16) = 2139095039;
          if (*(float *)v6 >= 0.0)
          {
            uint64_t v16 = *(void *)v6;
            uint64_t v17 = (int8x16_t *)(*(void *)(*(void *)(*v7 + 16 * *(int *)(v6 + 12)) + 8) + 56 * *(int *)(v6 + 8));
            *(_DWORD *)(v6 + 4) = HIDWORD(*(void *)v6);
            *(int8x16_t *)(v6 + 8) = vextq_s8(v17[2], v17[2], 8uLL);
          }
          *(_DWORD *)unint64_t v6 = v16;
          v6 += v14;
        }
        while (v6 < v15);
      }
      return 1;
    }
  }
  return 0;
}

uint64_t Phase::Geometry::GetOrAddMpsCpuSceneDescriptor(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v10 = a2;
  *((void *)&v10 + 1) = a3;
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
LABEL_8:
    std::vector<Phase::Geometry::MpsCpuSceneDescriptor>::emplace_back<Phase::Geometry::MpsCpuGroupParams &>(a1, &v10);
    return a1[1] - 48;
  }
  else
  {
    unint64_t v6 = (void *)(v4 + 24);
    while (1)
    {
      char v7 = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,32ul>,true,true>(v6, 0, (uint64_t)v6, 0x20u, &v10);
      char v8 = *(unsigned __int8 *)(v4 + 32) == BYTE8(v10) ? v7 : 0;
      if (v8) {
        break;
      }
      v4 += 48;
      v6 += 6;
      if (v4 == v5) {
        goto LABEL_8;
      }
    }
  }
  return v4;
}

uint64_t std::vector<Phase::Geometry::MpsCpuSceneDescriptor>::emplace_back<Phase::Geometry::MpsCpuGroupParams &>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v5 = a1 + 2;
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    uint64_t v9 = *a1;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 4);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x555555555555555) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v9) >> 4);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    long long v27 = a1 + 2;
    if (v13 > 0x555555555555555) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v14 = 3 * v13;
    unint64_t v15 = (char *)operator new(48 * v13);
    uint64_t v16 = (uint64_t)&v15[48 * v10];
    float32x4_t v25 = v15;
    *(void *)uint64_t v26 = v16;
    *(void *)(v16 + 8) = 0;
    *(void *)(v16 + 16) = 0;
    *(void *)uint64_t v16 = 0;
    *(_OWORD *)(v16 + 24) = *a2;
    *(unsigned char *)(v16 + 40) = 0;
    *(void *)&v26[8] = v16 + 48;
    *(void *)&v26[16] = &v15[16 * v14];
    *(void *)&long long v31 = v16;
    *((void *)&v31 + 1) = v16;
    long long v30 = v31;
    v28[0] = v5;
    v28[1] = &v30;
    v28[2] = &v31;
    char v29 = 0;
    if (v6 != v9)
    {
      unint64_t v17 = v6;
      do
      {
        *(void *)(v16 - 48) = 0;
        *(void *)(v16 - 40) = 0;
        *(void *)(v16 - 32) = 0;
        uint64_t v18 = *(void *)(v17 - 48);
        uint64_t v19 = *(void *)(v17 - 40);
        v17 -= 48;
        std::vector<std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>>::__init_with_size[abi:ne180100]<std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*,std::tuple<Phase::Affine<float>,Phase::Handle64,Phase::Handle64,Phase::Geometry::Shape *>*>((void *)(v16 - 48), v18, v19, 0x6DB6DB6DB6DB6DB7 * ((v19 - v18) >> 3));
        *(_OWORD *)(v16 - 24) = *(_OWORD *)(v6 - 24);
        *(unsigned char *)(v16 - 8) = *(unsigned char *)(v6 - 8);
        uint64_t v16 = *((void *)&v31 + 1) - 48;
        *((void *)&v31 + 1) -= 48;
        unint64_t v6 = v17;
      }
      while (v17 != v9);
    }
    char v29 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Geometry::MpsCpuSceneDescriptor>,std::reverse_iterator<Phase::Geometry::MpsCpuSceneDescriptor*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v28);
    uint64_t v20 = a1[2];
    long long v21 = *(_OWORD *)&v26[8];
    uint64_t v24 = *(void *)&v26[8];
    long long v22 = *(_OWORD *)a1;
    *a1 = v16;
    *(_OWORD *)uint64_t v26 = v22;
    *(_OWORD *)(a1 + 1) = v21;
    *(void *)&v26[16] = v20;
    float32x4_t v25 = (char *)v22;
    std::__split_buffer<Phase::Geometry::MpsCpuSceneDescriptor>::~__split_buffer((uint64_t)&v25);
    uint64_t v8 = v24;
  }
  else
  {
    long long v7 = *a2;
    *(void *)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
    *(_OWORD *)(v6 + 24) = v7;
    *(unsigned char *)(v6 + 40) = 0;
    uint64_t v8 = v6 + 48;
    a1[1] = v6 + 48;
  }
  a1[1] = v8;
  return v8 - 48;
}

void sub_221F63D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Geometry::MpsCpuSceneDescriptor>,std::reverse_iterator<Phase::Geometry::MpsCpuSceneDescriptor*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)va1);
  std::__split_buffer<Phase::Geometry::MpsCpuSceneDescriptor>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *Phase::Geometry::GetMpsCpuScenePtr(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a2;
  uint64_t v10 = a3;
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  while (v3 != v4)
  {
    uint64_t v5 = *v3;
    char v6 = std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,32ul>,true,true>((void *)(*v3 + 32), 0, *v3 + 32, 0x20u, &v9);
    if (*(unsigned __int8 *)(v5 + 40) == v10) {
      char v7 = v6;
    }
    else {
      char v7 = 0;
    }
    if (v7) {
      return v3;
    }
    v3 += 2;
  }
  return 0;
}

void std::vector<MPSCPUAccelerationStructureTriangleGeometryDescriptor * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        char v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<MPSCPUAccelerationStructureTriangleGeometryDescriptor * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

float Phase::Matrix33From<float>@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float v2 = a1[1];
  float v3 = *a1 * *a1;
  float v4 = v2 * v2;
  float v5 = a1[2];
  float v6 = a1[3];
  float v7 = v5 * v5;
  float v8 = *a1 * v5;
  float v9 = *a1 * v2;
  float v10 = v2 * v5;
  float v11 = *a1 * v6;
  float v12 = v2 * v6;
  float v13 = v5 * v6;
  *a2 = (float)((float)(v4 + v7) * -2.0) + 1.0;
  a2[1] = (float)(v9 + v13) + (float)(v9 + v13);
  a2[2] = (float)(v8 - v12) + (float)(v8 - v12);
  a2[3] = (float)(v9 - v13) + (float)(v9 - v13);
  a2[4] = (float)((float)(v3 + v7) * -2.0) + 1.0;
  a2[5] = (float)(v10 + v11) + (float)(v10 + v11);
  a2[6] = (float)(v8 + v12) + (float)(v8 + v12);
  a2[7] = (float)(v10 - v11) + (float)(v10 - v11);
  float result = (float)((float)(v3 + v4) * -2.0) + 1.0;
  a2[8] = result;
  return result;
}

uint64_t Phase::Geometry::GetMpsIntersections(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v43 = v6;
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v7 = (v5 - v4);
  if ((int)v7 < 1) {
    return 0;
  }
  float v8 = (void *)v1;
  float v10 = *(uint64_t **)v1;
  float v9 = *(uint64_t **)(v1 + 8);
  if (v9 == *(uint64_t **)v1) {
    return 0;
  }
  int v11 = v5;
  int v12 = v4;
  uint64_t v13 = v3;
  uint64_t v14 = v2;
  uint64_t v15 = *(unsigned int *)(v2 + 72);
  if ((v15 & *(void *)(*v10 + 32)) == 0)
  {
    uint64_t v16 = v10 + 2;
    while (v16 != v9)
    {
      uint64_t v17 = *v16;
      v16 += 2;
      if ((*(void *)(v17 + 32) & v15) != 0)
      {
        float v10 = v16 - 2;
        goto LABEL_8;
      }
    }
    return 0;
  }
LABEL_8:
  uint64_t v18 = objc_opt_new();
  [v18 setRayDataType:1];
  [v18 setRayStride:*(unsigned int *)(v14 + 100)];
  [v18 setIntersectionDataType:5];
  [v18 setIntersectionStride:*(unsigned int *)(v14 + 100)];
  [v18 getIntersectionsOfType:0 rays:v13 intersections:v43 rayCount:v7 accelerationStructure:*(void *)*v10];
  unint64_t v19 = ((unint64_t)v10 - *v8) >> 4;
  uint64_t v20 = v10 + 2;
  do
  {
    if (v20 == (uint64_t *)v8[1])
    {
      unsigned int v35 = 1;
      goto LABEL_37;
    }
    uint64_t v21 = *v20;
    v20 += 2;
  }
  while ((*(unsigned int *)(v14 + 72) & *(void *)(v21 + 32)) == 0);
  [v18 setIntersectionStride:12];
  uint64_t v22 = *(unsigned int *)(v14 + 100);
  if (v22)
  {
    unint64_t v23 = v43;
    do
    {
      *(_DWORD *)(v23 + 12) = v19;
      v23 += v22;
    }
    while (v23 < v43 + v22 * (unint64_t)v7);
  }
  int v40 = v12;
  uint64_t v42 = v20 - 2;
  uint64_t v39 = v12;
  uint64_t v24 = (id *)*(v20 - 2);
  int v41 = 1;
LABEL_15:
  id v25 = *v24;
  if (v11 > v12)
  {
    unint64_t v26 = ((unint64_t)v42 - *v8) >> 4;
    uint64_t v27 = v39;
    do
    {
      uint64_t v28 = v27 + 427;
      if ((int)v27 + 427 >= v11) {
        int v29 = v11;
      }
      else {
        int v29 = v27 + 427;
      }
      uint64_t v30 = v29 - v27;
      objc_msgSend(v18, "getIntersectionsOfType:rays:intersections:rayCount:accelerationStructure:", 0, v13 + 32 * v27, v44, v30, v25, v39);
      if (v30 >= 1)
      {
        uint64_t v31 = *(unsigned int *)(v14 + 100);
        uint64_t v32 = v43 + 16 * v27;
        uint64_t v33 = v44;
        do
        {
          if (*(float *)v33 >= 0.0 && (*(float *)v32 < 0.0 || *(float *)v33 < *(float *)v32))
          {
            *(void *)uint64_t v32 = *(void *)v33;
            *(_DWORD *)(v32 + 8) = v33[2];
            *(_DWORD *)(v32 + 12) = v26;
          }
          v32 += v31;
          v33 += 3;
        }
        while (v33 < &v44[3 * v30]);
      }
      v27 += 427;
    }
    while (v28 < v11);
  }

  unsigned int v35 = v41 + 1;
  unint64_t v36 = v42 + 2;
  int v12 = v40;
  while (v36 != (uint64_t *)v8[1])
  {
    uint64_t v37 = *v36;
    v36 += 2;
    uint64_t v24 = (id *)v37;
    if ((*(unsigned int *)(v14 + 72) & *(void *)(v37 + 32)) != 0)
    {
      ++v41;
      uint64_t v42 = v36 - 2;
      goto LABEL_15;
    }
  }
LABEL_37:

  return v35;
}

void sub_221F64274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Geometry::MpsCpuSceneDescriptor>,std::reverse_iterator<Phase::Geometry::MpsCpuSceneDescriptor*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
    for (uint64_t i = *(void *)(*(void *)(a1 + 16) + 8); i != v3; i += 48)
    {
      int v5 = *(void **)i;
      if (*(void *)i)
      {
        *(void *)(i + 8) = v5;
        operator delete(v5);
      }
    }
  }
  return a1;
}

uint64_t std::__split_buffer<Phase::Geometry::MpsCpuSceneDescriptor>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    int v4 = *(void **)(v2 - 48);
    *(void *)(a1 + 16) = v2 - 48;
    if (v4)
    {
      *(void *)(v2 - 40) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t (*Phase::GetTypeId<Phase::Geometry::MpsMesh>())()
{
  return Phase::GetTypeId<Phase::Geometry::MpsMesh>;
}

void Phase::Geometry::CreateMpsMesh(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0xC0uLL);
  *((_DWORD *)v2 + 6) = 3;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26D476E40;
  *((_OWORD *)v2 + 2) = xmmword_2220A5C70;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *(_OWORD *)(v2 + 76) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = xmmword_2220A5C80;
  *a1 = v2 + 24;
  a1[1] = v2;
  Phase::Geometry::AddMpsMesh((uint64_t)(v2 + 24));
}

void sub_221F64400(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Phase::Geometry::AddMpsMesh(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v1 = (void *)(a1 + 96);
  unint64_t v2 = *(void *)(a1 + 104) - *(void *)(a1 + 96);
  std::vector<std::shared_ptr<Phase::Geometry::SharedDataStream>>::resize((uint64_t *)(a1 + 96), 7uLL);
  if (v2 <= 0x6F)
  {
    unint64_t v3 = v2 >> 4;
    uint64_t v4 = (v2 >> 4) - 7;
    uint64_t v5 = 16 * v3;
    do
    {
      uint64_t v6 = (char *)operator new(0x40uLL);
      *((void *)v6 + 1) = 0;
      *((void *)v6 + 2) = 0;
      *(void *)uint64_t v6 = &unk_26D476D78;
      *((void *)v6 + 7) = 0;
      *(_OWORD *)(v6 + 24) = 0u;
      *(_OWORD *)(v6 + 40) = 0u;
      uint64_t v7 = (void *)(*v1 + v5);
      float v8 = (std::__shared_weak_count *)v7[1];
      *uint64_t v7 = v6 + 24;
      v7[1] = v6;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      v5 += 16;
    }
    while (!__CFADD__(v4++, 1));
  }
  operator new();
}

void Phase::Geometry::CreateMpsMeshFromMdlMesh(uint64_t a1, const Phase::MdlMeshAsset *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  Phase::Geometry::MdlMeshReader::MdlMeshReader((Phase::MdlMeshAsset *)v2, a2);
}

void sub_221F65230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (*(void *)(a13 + 8)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(a13 + 8));
  }
  std::unique_ptr<Phase::details::MdlMeshAssetImplementation>::reset[abi:ne180100]((id **)&a24, 0);
  _Unwind_Resume(a1);
}

uint64_t _ZN5Phase8Geometry19DataStreamReferenceIDv3_fE6ResizeEm(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = *(void *)(result + 16 * a2);
  unint64_t v5 = *(void *)(v4 + 24);
  if (v5 == a3)
  {
    if (!a3) {
      return result;
    }
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 8);
    *(void *)(v4 + 8) = 0;
    if (a3)
    {
      Phase::Geometry::DataStream::Alloc(*(std::align_val_t *)(v4 + 16), *(void *)(v4 + 32) * a3, &v10);
      uint64_t v7 = v10;
      uint64_t v10 = 0;
      float result = *(void *)(v4 + 8);
      *(void *)(v4 + 8) = v7;
      if (result)
      {
        MEMORY[0x223C93870](result, 0x1000C8077774924);
        float result = v10;
        uint64_t v10 = 0;
        if (result) {
          float result = MEMORY[0x223C93870](result, 0x1000C8077774924);
        }
      }
    }
    *(void *)(v4 + 24) = v3;
    if (v5 < v3) {
      unint64_t v3 = v5;
    }
    if (!v3)
    {
      if (!v6) {
        return result;
      }
      return MEMORY[0x223C93870](v6, 0x1000C8077774924);
    }
  }
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(v4 + 8);
  do
  {
    *(_OWORD *)(v9 + 16 * v8) = *(_OWORD *)(v6 + 16 * v8);
    ++v8;
  }
  while (v3 != v8);
  return MEMORY[0x223C93870](v6, 0x1000C8077774924);
}

void sub_221F653EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x223C93870](v1, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::DataStreamReference<int>::Resize(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = *(void *)(result + 16 * a2);
  unint64_t v5 = *(void *)(v4 + 24);
  if (v5 == a3)
  {
    if (!a3) {
      return result;
    }
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 8);
    *(void *)(v4 + 8) = 0;
    if (a3)
    {
      Phase::Geometry::DataStream::Alloc(*(std::align_val_t *)(v4 + 16), *(void *)(v4 + 32) * a3, &v10);
      uint64_t v7 = v10;
      uint64_t v10 = 0;
      float result = *(void *)(v4 + 8);
      *(void *)(v4 + 8) = v7;
      if (result)
      {
        MEMORY[0x223C93870](result, 0x1000C8077774924);
        float result = v10;
        uint64_t v10 = 0;
        if (result) {
          float result = MEMORY[0x223C93870](result, 0x1000C8077774924);
        }
      }
    }
    *(void *)(v4 + 24) = v3;
    if (v5 < v3) {
      unint64_t v3 = v5;
    }
    if (!v3)
    {
      if (!v6) {
        return result;
      }
      return MEMORY[0x223C93870](v6, 0x1000C8077774924);
    }
  }
  uint64_t v8 = 0;
  uint64_t v9 = *(void *)(v4 + 8);
  do
  {
    *(_DWORD *)(v9 + 4 * v8) = *(_DWORD *)(v6 + 4 * v8);
    ++v8;
  }
  while (v3 != v8);
  return MEMORY[0x223C93870](v6, 0x1000C8077774924);
}

void sub_221F65518(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x223C93870](v1, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::CreateMpsMeshFromShape(_DWORD *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (*a1 == 3)
  {
    Phase::Geometry::ForcedCopyTagsIncludingMaterialListFromOptions(1uLL, a2, &__p);
    std::vector<unsigned int>::pointer end = __p.__end_;
    value = __p.__end_cap_.__value_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      std::vector<unsigned int>::pointer begin = __p.__begin_;
      int64_t v9 = __p.__end_ - __p.__begin_;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v11 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
      if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v10) {
        unint64_t v10 = v11 >> 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v12);
        std::vector<unsigned int>::pointer begin = __p.__begin_;
        std::vector<unsigned int>::pointer end = __p.__end_;
      }
      else
      {
        uint64_t v13 = 0;
      }
      uint64_t v14 = (unsigned int *)&v13[4 * v9];
      value = (unsigned int *)&v13[4 * v12];
      unsigned int *v14 = 15;
      uint64_t v7 = v14 + 1;
      while (end != begin)
      {
        unsigned int v15 = *--end;
        *--uint64_t v14 = v15;
      }
      __p.__begin_ = v14;
      __p.__end_ = v7;
      __p.__end_cap_.__value_ = value;
      if (begin)
      {
        operator delete(begin);
        value = __p.__end_cap_.__value_;
      }
    }
    else
    {
      *__p.__end_ = 15;
      uint64_t v7 = end + 1;
    }
    __p.__end_ = v7;
    if (v7 >= value)
    {
      std::vector<unsigned int>::pointer v17 = __p.__begin_;
      uint64_t v18 = v7 - __p.__begin_;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = (char *)value - (char *)__p.__begin_;
      if (v20 >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v21);
        std::vector<unsigned int>::pointer v17 = __p.__begin_;
        uint64_t v7 = __p.__end_;
      }
      else
      {
        uint64_t v22 = 0;
      }
      unint64_t v23 = (unsigned int *)&v22[4 * v18];
      uint64_t v24 = (unsigned int *)&v22[4 * v21];
      *unint64_t v23 = 16;
      uint64_t v16 = v23 + 1;
      while (v7 != v17)
      {
        unsigned int v25 = *--v7;
        *--unint64_t v23 = v25;
      }
      __p.__begin_ = v23;
      __p.__end_ = v16;
      __p.__end_cap_.__value_ = v24;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *uint64_t v7 = 16;
      uint64_t v16 = v7 + 1;
    }
    __p.__end_ = v16;
    std::allocate_shared[abi:ne180100]<Phase::Geometry::Shape,std::allocator<Phase::Geometry::Shape>,Phase::Geometry::Shape&,std::vector<unsigned int> &,void>((uint64_t)a1, (__int32 **)&__p, a3);
    operator new();
  }
  std::terminate();
}

void sub_221F65894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::MpsMesh>(Phase::Geometry::MpsMesh *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::MpsMesh>(Phase::Geometry::MpsMesh *)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::MpsMesh>(Phase::Geometry::MpsMesh *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::MpsMesh>(Phase::Geometry::MpsMesh *)::{lambda(void *)#1}>,void ()(void *)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_26D476FE8;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::MpsMesh>(Phase::Geometry::MpsMesh *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::MpsMesh>(Phase::Geometry::MpsMesh *)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D476FE8;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::MpsMesh>(Phase::Geometry::MpsMesh *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::MpsMesh>(Phase::Geometry::MpsMesh *)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2) {
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::Geometry::SingleHitRaycastVsMesh(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  float v5 = *(float *)(a3 + 8);
  float v4 = *(float *)(a3 + 12);
  float v6 = *(float *)(a3 + 24);
  float v7 = *(float *)(a3 + 28);
  *(_DWORD *)(a3 + 32) = 2139095039;
  *(void *)(a3 + 36) = 0;
  uint64_t v30 = a3 + 36;
  *(void *)(a3 + 44) = 0;
  *(_DWORD *)(a3 + 52) = 0;
  *(void *)(a3 + 56) = 0xFFFFFFFFLL;
  *(void *)(a3 + 64) = 0;
  int v29 = (void *)(a3 + 64);
  uint64_t v28 = a4[1];
  uint64_t v8 = **(void **)(v28 + 120);
  uint64_t v9 = *(void *)(*(void *)(**(void **)(v8 + 16) + 16 * *(void *)(v8 + 24)) + 8);
  float64x2_t v39 = vcvtq_f64_f32(*(float32x2_t *)a3);
  double v40 = v5;
  float64x2_t v41 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 16));
  double v42 = v6;
  uint64_t v10 = *(void *)(v8 + 56);
  uint64_t v27 = v8;
  uint64_t v11 = **(void **)(v8 + 48);
  unint64_t v12 = *(void **)(v11 + 16 * v10);
  if (v12[3])
  {
    unint64_t v15 = 0;
    double v16 = v4;
    do
    {
      uint64_t v17 = v12[1] + v12[4] * v15;
      if (*(_DWORD *)(v17 + 24) != 1) {
        __assert_rtn("RaycastVsMesh", "GeoRaycastUtility.hpp", 533, "MeshTopology::Triangles == submesh.mTopology");
      }
      uint64_t v18 = *(void *)(*(void *)(**(void **)(v17 + 48) + 16 * *(void *)(v17 + 56)) + 24);
      if (v18)
      {
        uint64_t v19 = 0;
        int v20 = v15 << 24;
        unint64_t v21 = (unsigned int *)(*(void *)(*(void *)(**(void **)(v17 + 32) + 16 * *(void *)(v17 + 40)) + 8)
                             + 8);
        do
        {
          uint64_t v22 = (float32x2_t *)(v9 + 12 * *(v21 - 2));
          unint64_t v23 = (float32x2_t *)(v9 + 12 * *(v21 - 1));
          uint64_t v24 = (float32x2_t *)(v9 + 12 * *v21);
          float64x2_t v31 = vcvtq_f64_f32(*v22);
          double v32 = v22[1].f32[0];
          float64x2_t v33 = vcvtq_f64_f32(*v23);
          double v34 = v23[1].f32[0];
          float64x2_t v35 = vcvtq_f64_f32(*v24);
          double v36 = v24[1].f32[0];
          Phase::Intersection<double>(v31.f64, v39.f64, (uint64_t)v37);
          if (v38 && v37[0] < v7 && v37[0] > v16)
          {
            if (v15 >= 0x100) {
              std::terminate();
            }
            float v7 = v37[0];
            uint64_t v25 = *(void *)(v28 + 8);
            LODWORD(v31.f64[0]) = v20 | v19;
            *(float *)(a3 + 32) = v7;
            *(void *)(a3 + 48) = v25;
            *(_DWORD *)(a3 + 56) = v20 | v19;
            uint64_t v26 = **(void **)(a4[1] + 120);
            Phase::Geometry::GetNormals(v26, (float *)(*a4 + 48), (unsigned int *)&v31, 1, v30, 1, 1);
            Phase::Geometry::GetMaterials(v26, (unsigned int *)&v31, 1, v29, 1, 1);
          }
          v21 += 3;
          ++v19;
        }
        while (v18 != v19);
        uint64_t v10 = *(void *)(v27 + 56);
        uint64_t v11 = **(void **)(v27 + 48);
      }
      ++v15;
      unint64_t v12 = *(void **)(v11 + 16 * v10);
    }
    while (v15 < v12[3]);
  }
}

double *Phase::Geometry::SingleHitRaycastVsMeshV2(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t **a4)
{
  float v5 = a3[1].f32[0];
  float v4 = a3[1].f32[1];
  float v6 = a3[3].f32[0];
  float v7 = a3[3].f32[1];
  a3[5] = 0;
  a3[6] = 0;
  a3[4] = (float32x2_t)-2155872257;
  uint64_t v8 = a4[1];
  float32x2_t v9 = (*a4)[1];
  uint64_t v10 = **(void **)&v8[15];
  uint64_t v11 = *(void *)(*(void *)(**(void **)(v10 + 16) + 16 * *(void *)(v10 + 24)) + 8);
  float64x2_t v36 = vcvtq_f64_f32(*a3);
  double v37 = v5;
  float64x2_t v38 = vcvtq_f64_f32(a3[2]);
  double v39 = v6;
  uint64_t v12 = *(void *)(v10 + 56);
  uint64_t v27 = v10;
  uint64_t v13 = **(void **)(v10 + 48);
  uint64_t v14 = *(void **)(v13 + 16 * v12);
  if (v14[3])
  {
    unint64_t v16 = 0;
    double v17 = v4;
    do
    {
      uint64_t v18 = v14[1] + v14[4] * v16;
      if (*(_DWORD *)(v18 + 24) != 1) {
        __assert_rtn("RaycastVsMesh", "GeoRaycastUtility.hpp", 533, "MeshTopology::Triangles == submesh.mTopology");
      }
      uint64_t v19 = *(void *)(*(void *)(**(void **)(v18 + 48) + 16 * *(void *)(v18 + 56)) + 24);
      if (v19)
      {
        uint64_t v20 = 0;
        unint64_t v21 = (unsigned int *)(*(void *)(*(void *)(**(void **)(v18 + 32) + 16 * *(void *)(v18 + 40)) + 8)
                             + 8);
        do
        {
          uint64_t v22 = (float32x2_t *)(v11 + 12 * *(v21 - 2));
          unint64_t v23 = (float32x2_t *)(v11 + 12 * *(v21 - 1));
          uint64_t v24 = (float32x2_t *)(v11 + 12 * *v21);
          float64x2_t v28 = vcvtq_f64_f32(*v22);
          double v29 = v22[1].f32[0];
          float64x2_t v30 = vcvtq_f64_f32(*v23);
          double v31 = v23[1].f32[0];
          float64x2_t v32 = vcvtq_f64_f32(*v24);
          double v33 = v24[1].f32[0];
          uint64_t result = Phase::Intersection<double>(v28.f64, v36.f64, (uint64_t)v34);
          if (v35 && v34[0] < v7 && v34[0] > v17)
          {
            if (v16 >= 0x100) {
              std::terminate();
            }
            float32x2_t v26 = v8[1];
            float v7 = v34[0];
            a3[4].f32[0] = v7;
            a3[4].i32[1] = (v16 << 24) | v20;
            a3[5] = v26;
            a3[6] = v9;
          }
          v21 += 3;
          ++v20;
        }
        while (v19 != v20);
        uint64_t v12 = *(void *)(v27 + 56);
        uint64_t v13 = **(void **)(v27 + 48);
      }
      ++v16;
      uint64_t v14 = *(void **)(v13 + 16 * v12);
    }
    while (v16 < v14[3]);
  }
  return result;
}

void Phase::Geometry::MultiHitRaycastVsMesh(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  float v7 = (uint64_t *)(a3 + 32);
  std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)(a3 + 32));
  *(void *)(a3 + 72) = 0;
  std::vector<unsigned int> __p = 0;
  float64x2_t v36 = 0;
  unint64_t v37 = 0;
  uint64_t v33 = a4[1];
  uint64_t v8 = **(void **)(v33 + 120);
  uint64_t v9 = *(void *)(*(void *)(**(void **)(v8 + 16) + 16 * *(void *)(v8 + 24)) + 8);
  double v10 = *(float *)(a3 + 8);
  double v11 = *(float *)(a3 + 24);
  float64x2_t v45 = vcvtq_f64_f32(*(float32x2_t *)a3);
  double v46 = v10;
  float64x2_t v47 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 16));
  double v48 = v11;
  uint64_t v12 = *(void *)(v8 + 56);
  uint64_t v32 = v8;
  uint64_t v13 = **(void **)(v8 + 48);
  uint64_t v14 = *(void **)(v13 + 16 * v12);
  if (v14[3])
  {
    float64x2_t v30 = v7;
    uint64_t v31 = a1;
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = v14[1] + v14[4] * v15;
      if (*(_DWORD *)(v16 + 24) != 1) {
        __assert_rtn("RaycastVsMesh", "GeoRaycastUtility.hpp", 533, "MeshTopology::Triangles == submesh.mTopology");
      }
      uint64_t v17 = *(void *)(*(void *)(**(void **)(v16 + 48) + 16 * *(void *)(v16 + 56)) + 24);
      if (v17)
      {
        uint64_t v18 = 0;
        int v34 = v15 << 24;
        uint64_t v19 = (unsigned int *)(*(void *)(*(void *)(**(void **)(v16 + 32) + 16 * *(void *)(v16 + 40)) + 8)
                             + 8);
        do
        {
          uint64_t v20 = (float32x2_t *)(v9 + 12 * *(v19 - 2));
          unint64_t v21 = (float32x2_t *)(v9 + 12 * *(v19 - 1));
          uint64_t v22 = (float32x2_t *)(v9 + 12 * *v19);
          float64x2_t v38 = vcvtq_f64_f32(*v20);
          *(double *)double v39 = v20[1].f32[0];
          *(float64x2_t *)&v39[8] = vcvtq_f64_f32(*v21);
          double v40 = v21[1].f32[0];
          float64x2_t v41 = vcvtq_f64_f32(*v22);
          double v42 = v22[1].f32[0];
          Phase::Intersection<double>(v38.f64, v45.f64, (uint64_t)v43);
          if (v44 && v43[0] < *(float *)(a3 + 28) && v43[0] > *(float *)(a3 + 12))
          {
            if (v15 >= 0x100) {
              std::terminate();
            }
            float v23 = v43[0];
            uint64_t v24 = *(void *)(v33 + 8);
            v49[0] = v34 | v18;
            HIDWORD(v38.f64[1]) = 0;
            *(float64_t *)((char *)v38.f64 + 4) = 0.0;
            *(void *)&v39[16] = 0;
            *(float *)v38.f64 = v23;
            *(void *)double v39 = v24;
            *(_DWORD *)&v39[8] = v34 | v18;
            uint64_t v25 = **(void **)(a4[1] + 120);
            Phase::Geometry::GetNormals(v25, (float *)(*a4 + 48), v49, 1, (uint64_t)v38.f64 + 4, 1, 1);
            Phase::Geometry::GetMaterials(v25, v49, 1, &v39[16], 1, 1);
            float32x2_t v26 = v36;
            if ((unint64_t)v36 >= v37)
            {
              uint64_t v28 = std::vector<Phase::Geometry::RaycastHit>::__push_back_slow_path<Phase::Geometry::RaycastHit const&>((uint64_t *)&__p, (uint64_t)&v38);
            }
            else
            {
              *(float64x2_t *)float64x2_t v36 = v38;
              long long v27 = *(_OWORD *)v39;
              *((void *)v26 + 4) = *(void *)&v39[16];
              *((_OWORD *)v26 + 1) = v27;
              uint64_t v28 = (uint64_t)(v26 + 40);
            }
            float64x2_t v36 = (char *)v28;
          }
          v19 += 3;
          ++v18;
        }
        while (v17 != v18);
        uint64_t v12 = *(void *)(v32 + 56);
        uint64_t v13 = **(void **)(v32 + 48);
      }
      ++v15;
      uint64_t v14 = *(void **)(v13 + 16 * v12);
    }
    while (v15 < v14[3]);
    unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((v36 - (unsigned char *)__p) >> 3);
    float v7 = v30;
    a1 = v31;
  }
  else
  {
    unint64_t v29 = 0;
  }
  Phase::Geometry::MergeRaycastQueryHits<Phase::Geometry::RaycastHit,std::vector<Phase::Geometry::RaycastHit>>(a1, v7, &__p, v29);
  if (__p)
  {
    float64x2_t v36 = (char *)__p;
    operator delete(__p);
  }
}

void sub_221F66414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *Phase::Geometry::MergeRaycastQueryHits<Phase::Geometry::RaycastHit,std::vector<Phase::Geometry::RaycastHit>>(uint64_t a1, uint64_t *a2, void *a3, unint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a4)
  {
    float v7 = a2 + 5;
    uint64_t v8 = a2[5] + a4;
    uint64_t v23 = 8;
    uint64_t v24 = v8;
    uint64_t v25 = &v24;
    v26[0] = &v23;
    Phase::details::AllocArray<Phase::Geometry::RaycastHit,std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::RaycastHit>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::RaycastHit>(unsigned long,unsigned long)::{lambda(Phase::Geometry::RaycastHit*)#1} const&>(v8, (uint64_t)&v25, &v28);
    uint64_t v9 = v28;
    uint64_t v28 = 0;
    uint64_t v25 = (void *)v9;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)v29);
    uint64_t v27 = v8;
    std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100](&v28);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v29);
    if (*v7)
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = *a2 + v10 * 8;
        uint64_t v13 = &v25[v10];
        *(_DWORD *)uint64_t v13 = *(_DWORD *)v12;
        *((_DWORD *)v13 + 1) = *(_DWORD *)(v12 + 4);
        *((_DWORD *)v13 + 2) = *(_DWORD *)(v12 + 8);
        *((_DWORD *)v13 + 3) = *(_DWORD *)(v12 + 12);
        long long v14 = *(_OWORD *)(v12 + 16);
        v13[4] = *(void *)(v12 + 32);
        *((_OWORD *)v13 + 1) = v14;
        ++v11;
        v10 += 5;
      }
      while (a2[5] > v11);
    }
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    if (a4 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = a4;
    }
    do
    {
      uint64_t v18 = *a3 + v15;
      uint64_t v19 = &v25[5 * v16 + 5 * a2[5]];
      *(_DWORD *)uint64_t v19 = *(_DWORD *)v18;
      *((_DWORD *)v19 + 1) = *(_DWORD *)(v18 + 4);
      *((_DWORD *)v19 + 2) = *(_DWORD *)(v18 + 8);
      *((_DWORD *)v19 + 3) = *(_DWORD *)(v18 + 12);
      long long v20 = *(_OWORD *)(v18 + 16);
      v19[4] = *(void *)(v18 + 32);
      *((_OWORD *)v19 + 1) = v20;
      ++v16;
      v15 += 40;
    }
    while (v17 != v16);
    uint64_t v21 = *a2;
    *a2 = 0;
    uint64_t v28 = v21;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)(a2 + 1));
    uint64_t v30 = a2[5];
    std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::operator=[abi:ne180100](a2, (uint64_t *)&v25);
    a2[5] = v27;
    std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)&v25, &v28);
    uint64_t v27 = v30;
    std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100](&v28);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v29);
    std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v25);
    return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v26);
  }
  return result;
}

void Phase::Geometry::MultiHitRaycastVsMeshV2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  float v7 = (uint64_t *)(a3 + 32);
  std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)(a3 + 32));
  *(void *)(a3 + 72) = 0;
  uint64_t v43 = 0;
  char v44 = 0;
  std::vector<unsigned int> __p = 0;
  uint64_t v40 = *(void *)(*a4 + 8);
  uint64_t v41 = a4[1];
  uint64_t v8 = **(void **)(v41 + 120);
  uint64_t v9 = *(void *)(*(void *)(**(void **)(v8 + 16) + 16 * *(void *)(v8 + 24)) + 8);
  double v10 = *(float *)(a3 + 8);
  double v11 = *(float *)(a3 + 24);
  float64x2_t v53 = vcvtq_f64_f32(*(float32x2_t *)a3);
  double v54 = v10;
  float64x2_t v55 = vcvtq_f64_f32(*(float32x2_t *)(a3 + 16));
  double v56 = v11;
  uint64_t v12 = *(void *)(v8 + 56);
  uint64_t v39 = v8;
  uint64_t v13 = **(void **)(v8 + 48);
  long long v14 = *(void **)(v13 + 16 * v12);
  if (v14[3])
  {
    float64x2_t v38 = v7;
    unint64_t v15 = 0;
    do
    {
      uint64_t v16 = v14[1] + v14[4] * v15;
      if (*(_DWORD *)(v16 + 24) != 1) {
        __assert_rtn("RaycastVsMesh", "GeoRaycastUtility.hpp", 533, "MeshTopology::Triangles == submesh.mTopology");
      }
      uint64_t v17 = *(void *)(*(void *)(**(void **)(v16 + 48) + 16 * *(void *)(v16 + 56)) + 24);
      if (v17)
      {
        uint64_t v18 = 0;
        uint64_t v19 = *(void *)(*(void *)(**(void **)(v16 + 32) + 16 * *(void *)(v16 + 40)) + 8);
        do
        {
          long long v20 = (unsigned int *)(v19 + 12 * v18);
          uint64_t v21 = (float32x2_t *)(v9 + 12 * *v20);
          uint64_t v22 = (float32x2_t *)(v9 + 12 * v20[1]);
          uint64_t v23 = (float32x2_t *)(v9 + 12 * v20[2]);
          float64x2_t v45 = vcvtq_f64_f32(*v21);
          double v46 = v21[1].f32[0];
          float64x2_t v47 = vcvtq_f64_f32(*v22);
          double v48 = v22[1].f32[0];
          float64x2_t v49 = vcvtq_f64_f32(*v23);
          double v50 = v23[1].f32[0];
          Phase::Intersection<double>(v45.f64, v53.f64, (uint64_t)v51);
          if (v52 && v51[0] < *(float *)(a3 + 28) && v51[0] > *(float *)(a3 + 12))
          {
            if (v15 >= 0x100) {
              std::terminate();
            }
            int v24 = (v15 << 24) | v18;
            float v25 = v51[0];
            uint64_t v26 = *(void *)(v41 + 8);
            uint64_t v27 = v43;
            if (v43 >= v44)
            {
              unint64_t v29 = (float *)__p;
              unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (unsigned char *)__p) >> 3);
              unint64_t v31 = v30 + 1;
              if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v44 - (unsigned char *)__p) >> 3) > v31) {
                unint64_t v31 = 0x5555555555555556 * (((char *)v44 - (unsigned char *)__p) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v44 - (unsigned char *)__p) >> 3) >= 0x555555555555555) {
                unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v32 = v31;
              }
              if (v32)
              {
                uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v44, v32);
                unint64_t v29 = (float *)__p;
                uint64_t v27 = v43;
              }
              else
              {
                uint64_t v33 = 0;
              }
              int v34 = &v33[8 * (((char *)v43 - (unsigned char *)__p) >> 3)];
              *(float *)int v34 = v25;
              *((_DWORD *)v34 + 1) = v24;
              *((void *)v34 + 1) = v26;
              *((void *)v34 + 2) = v40;
              char v35 = &v33[24 * v30];
              if (v27 != v29)
              {
                do
                {
                  long long v36 = *(_OWORD *)(v27 - 6);
                  *((void *)v35 - 1) = *((void *)v27 - 1);
                  *(_OWORD *)(v35 - 24) = v36;
                  v35 -= 24;
                  v27 -= 6;
                }
                while (v27 != v29);
                unint64_t v29 = (float *)__p;
              }
              uint64_t v28 = (float *)(v34 + 24);
              std::vector<unsigned int> __p = v35;
              uint64_t v43 = (float *)(v34 + 24);
              char v44 = (float *)&v33[24 * v32];
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              *uint64_t v43 = v25;
              *((_DWORD *)v27 + 1) = v24;
              uint64_t v28 = v27 + 6;
              *((void *)v27 + 1) = v26;
              *((void *)v27 + 2) = v40;
            }
            uint64_t v43 = v28;
          }
          ++v18;
        }
        while (v18 != v17);
        uint64_t v12 = *(void *)(v39 + 56);
        uint64_t v13 = **(void **)(v39 + 48);
      }
      ++v15;
      long long v14 = *(void **)(v13 + 16 * v12);
    }
    while (v15 < v14[3]);
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v43 - (unsigned char *)__p) >> 3);
    float v7 = v38;
  }
  else
  {
    unint64_t v37 = 0;
  }
  Phase::Geometry::MergeRaycastQueryHits<Phase::Geometry::RaycastHitV2,std::vector<Phase::Geometry::RaycastHitV2>>(a1, v7, &__p, v37);
  if (__p)
  {
    uint64_t v43 = (float *)__p;
    operator delete(__p);
  }
}

void sub_221F66A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *Phase::Geometry::MergeRaycastQueryHits<Phase::Geometry::RaycastHitV2,std::vector<Phase::Geometry::RaycastHitV2>>(uint64_t a1, uint64_t *a2, void *a3, unint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  if (a4)
  {
    float v7 = a2 + 5;
    uint64_t v8 = a2[5] + a4;
    uint64_t v23 = 8;
    uint64_t v24 = v8;
    float v25 = &v24;
    v26[0] = &v23;
    Phase::details::AllocArray<Phase::Geometry::RaycastHitV2,std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::RaycastHitV2>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::RaycastHitV2>(unsigned long,unsigned long)::{lambda(Phase::Geometry::RaycastHitV2*)#1} const&>(v8, (uint64_t)&v25, &v28);
    uint64_t v9 = v28;
    uint64_t v28 = 0;
    float v25 = (void *)v9;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)v29);
    uint64_t v27 = v8;
    std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100](&v28);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v29);
    if (*v7)
    {
      uint64_t v10 = 0;
      unint64_t v11 = 0;
      do
      {
        uint64_t v12 = *a2 + v10 * 8;
        uint64_t v13 = &v25[v10];
        long long v14 = *(_OWORD *)v12;
        v13[2] = *(void *)(v12 + 16);
        *(_OWORD *)uint64_t v13 = v14;
        ++v11;
        v10 += 3;
      }
      while (a2[5] > v11);
    }
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    if (a4 <= 1) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = a4;
    }
    do
    {
      uint64_t v18 = (long long *)(*a3 + v15);
      uint64_t v19 = &v25[3 * v16 + 3 * a2[5]];
      long long v20 = *v18;
      v19[2] = *((void *)v18 + 2);
      *(_OWORD *)uint64_t v19 = v20;
      ++v16;
      v15 += 24;
    }
    while (v17 != v16);
    uint64_t v21 = *a2;
    *a2 = 0;
    uint64_t v28 = v21;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)(a2 + 1));
    uint64_t v30 = a2[5];
    std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::operator=[abi:ne180100](a2, (uint64_t *)&v25);
    a2[5] = v27;
    std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)&v25, &v28);
    uint64_t v27 = v30;
    std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100](&v28);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v29);
    std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v25);
    return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v26);
  }
  return result;
}

double *Phase::Intersection<double>@<X0>(double *result@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v3 = a2[3];
  double v4 = a2[4];
  double v5 = a2[5];
  double v6 = result[1];
  double v7 = result[2];
  double v8 = result[3] - *result;
  double v9 = result[4] - v6;
  double v10 = result[5] - v7;
  double v11 = result[6] - *result;
  double v12 = result[7] - v6;
  double v13 = result[8] - v7;
  double v14 = v4 * v13 - v5 * v12;
  double v15 = v5 * v11 - v3 * v13;
  double v16 = v3 * v12 - v4 * v11;
  double v17 = v10 * v16 + v8 * v14 + v9 * v15;
  double v18 = -v17;
  if (v17 >= 0.0) {
    double v18 = v10 * v16 + v8 * v14 + v9 * v15;
  }
  if (v18 <= 2.22044605e-16) {
    goto LABEL_16;
  }
  double v19 = 1.0 / v17;
  double v20 = *a2 - *result;
  double v21 = a2[1] - v6;
  double v22 = a2[2] - v7;
  double v23 = v19 * (v16 * v22 + v15 * v21 + v14 * v20);
  BOOL v24 = v23 >= 0.0 && v23 <= 1.0;
  if (v24
    && ((double v25 = v21 * v10 - v22 * v9,
         double v26 = v22 * v8 - v20 * v10,
         double v27 = v20 * v9 - v21 * v8,
         double v28 = v19 * (v5 * v27 + v3 * v25 + v4 * v26),
         v28 >= 0.0)
      ? (BOOL v29 = v23 + v28 <= 1.0)
      : (BOOL v29 = 0),
        v29 && (double v30 = v19 * (v13 * v27 + v11 * v25 + v12 * v26), v30 > 0.0)))
  {
    *(double *)a3 = v30;
    *(double *)(a3 + 8) = v30;
    char v31 = 1;
  }
  else
  {
LABEL_16:
    char v31 = 0;
    *(unsigned char *)a3 = 0;
  }
  *(unsigned char *)(a3 + 16) = v31;
  return result;
}

uint64_t *std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v1);
  }
  return result;
}

uint64_t std::vector<Phase::Geometry::RaycastHit>::__push_back_slow_path<Phase::Geometry::RaycastHit const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  double v19 = a1 + 2;
  if (v9) {
    double v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>>(v7, v9);
  }
  else {
    double v10 = 0;
  }
  double v11 = &v10[40 * v4];
  std::vector<unsigned int> __p = v10;
  double v16 = v11;
  double v18 = &v10[40 * v9];
  *(_DWORD *)double v11 = *(_DWORD *)a2;
  *((_DWORD *)v11 + 1) = *(_DWORD *)(a2 + 4);
  *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v11 + 3) = *(_DWORD *)(a2 + 12);
  long long v12 = *(_OWORD *)(a2 + 16);
  *((void *)v11 + 4) = *(void *)(a2 + 32);
  *((_OWORD *)v11 + 1) = v12;
  double v17 = v11 + 40;
  std::vector<Phase::Geometry::RaycastHit>::__swap_out_circular_buffer(a1, &__p);
  uint64_t v13 = a1[1];
  if (v17 != v16) {
    double v17 = &v16[(v17 - v16 - 40) % 0x28uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v13;
}

void sub_221F66EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<Phase::Geometry::RaycastHit>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 40);
    v2 -= 40;
    *(_DWORD *)(v4 - 40) = v5;
    v4 -= 40;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 12) = *(_DWORD *)(v2 + 12);
    long long v6 = *(_OWORD *)(v2 + 16);
    *(void *)(v4 + 32) = *(void *)(v2 + 32);
    *(_OWORD *)(v4 + 16) = v6;
  }
  a2[1] = v4;
  uint64_t v7 = *result;
  *uint64_t result = v4;
  a2[1] = v7;
  uint64_t v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *Phase::details::AllocArray<Phase::Geometry::RaycastHit,std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::RaycastHit>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::RaycastHit>(unsigned long,unsigned long)::{lambda(Phase::Geometry::RaycastHit*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v8 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 112);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)double v10 = 136315394;
      *(void *)&v10[4] = "ManagedPtr.hpp";
      __int16 v11 = 1024;
      int v12 = 229;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  int v5 = (char *)operator new(40 * **(void **)a2, **(std::align_val_t **)(a2 + 8));
  long long v6 = v5;
  do
  {
    *(_DWORD *)long long v6 = 2139095039;
    *(void *)(v6 + 12) = 0;
    *(void *)(v6 + 4) = 0;
    *(void *)(v6 + 20) = 0xFFFFFFFF00000000;
    *((void *)v6 + 4) = 0;
    v6 += 40;
  }
  while (v6 != &v5[40 * a1]);
  *(void *)double v10 = &unk_26D477030;
  v10[8] = 0;
  uint64_t v13 = v10;
  *a3 = v5;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v10);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v10);
}

void sub_221F6713C(_Unwind_Exception *exception_object)
{
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry10RaycastHitERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_ED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry10RaycastHitERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_E7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26D477030;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry10RaycastHitERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D477030;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry10RaycastHitERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_EclEOSC_(uint64_t a1, void **a2)
{
}

uint64_t *std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::Geometry::RaycastHit*,0>(a1, v4);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::Geometry::RaycastHit*,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v1);
  }
  return result;
}

void *Phase::details::AllocArray<Phase::Geometry::RaycastHitV2,std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::RaycastHitV2>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::RaycastHitV2>(unsigned long,unsigned long)::{lambda(Phase::Geometry::RaycastHitV2*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v8 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 112);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)double v10 = 136315394;
      *(void *)&v10[4] = "ManagedPtr.hpp";
      __int16 v11 = 1024;
      int v12 = 229;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  int v5 = operator new(24 * **(void **)a2, **(std::align_val_t **)(a2 + 8));
  long long v6 = v5;
  do
  {
    v6[1] = 0;
    v6[2] = 0;
    *long long v6 = -2155872257;
    v6 += 3;
  }
  while (v6 != &v5[3 * a1]);
  *(void *)double v10 = &unk_26D477078;
  v10[8] = 0;
  uint64_t v13 = v10;
  *a3 = v5;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v10);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v10);
}

void sub_221F6740C(_Unwind_Exception *exception_object)
{
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry12RaycastHitV2ERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_ED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry12RaycastHitV2ERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_E7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_26D477078;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry12RaycastHitV2ERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_E7__cloneEPNS0_6__baseISD_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D477078;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry12RaycastHitV2ERKZNS3_10AllocArrayIS6_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS7_IS6_EESF_mmEUlPS9_E_EESF_mOT0_OT1_EUlSC_E_NS_9allocatorISR_EESD_EclEOSC_(uint64_t a1, void **a2)
{
}

uint64_t *std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::Geometry::RaycastHitV2*,0>(a1, v4);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t *std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100]<Phase::Geometry::RaycastHitV2*,0>(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t Phase::Geometry::SingleHitRaycastVsScene(uint64_t result, uint64_t a2, long long *a3, void *a4, int a5)
{
  uint64_t v6 = result;
  if (a5)
  {
    *((_DWORD *)a3 + 8) = 2139095039;
    *(void *)((char *)a3 + 44) = 0;
    *(void *)((char *)a3 + 36) = 0;
    *((_DWORD *)a3 + 13) = 0;
    *((void *)a3 + 7) = 0xFFFFFFFFLL;
    *((void *)a3 + 8) = 0;
  }
  uint64_t v7 = *(float32x2_t ***)(result + 120);
  unsigned int v8 = *(_DWORD *)(result + 136);
  uint64_t v9 = &v7[3 * v8];
  if (v8)
  {
    double v10 = *v7;
    if (!*v7)
    {
      __int16 v11 = v7 + 3;
      while (1)
      {
        uint64_t v7 = v11;
        if (v11 >= v9) {
          break;
        }
        v11 += 3;
        double v10 = *v7;
        if (*v7) {
          goto LABEL_11;
        }
      }
      double v10 = 0;
    }
LABEL_11:
    unint64_t v12 = (unint64_t)v9;
  }
  else
  {
    double v10 = 0;
    unint64_t v12 = *(void *)(result + 120);
  }
  if (v7 != v9)
  {
    double v28 = a3 + 3;
    do
    {
      if (v10)
      {
        if (v10->i32[0] == 4 && (v10[18].i32[0] & *(_DWORD *)(a2 + 72)) != 0)
        {
          uint64_t v14 = (void *)v10[15];
          for (uint64_t i = (void *)v10[16]; v14 != i; ++v14)
          {
            if (*(_DWORD *)(v6 + 112) > *v14)
            {
              uint64_t v15 = *(void *)(v6 + 96);
              if (*(_DWORD *)(v15 + 24 * *v14 + 20) == HIDWORD(*v14))
              {
                double v16 = *(unsigned int **)(v15 + 24 * *v14);
                if (v16)
                {
                  if ((v16[4] & *(_DWORD *)(a2 + 72)) != 0)
                  {
                    uint64_t v17 = *a4 + 32 * *v16;
                    uint64_t v19 = *(void *)(v17 + 24);
                    double v18 = (void *)(v17 + 24);
                    if (v19)
                    {
                      v30[0] = v10;
                      v30[1] = v16;
                      long long v33 = *a3;
                      uint64_t v34 = *((void *)a3 + 2);
                      int v20 = *((_DWORD *)a3 + 6);
                      float v21 = *((float *)a3 + 7);
                      long long v38 = *v28;
                      double v22 = a3;
                      long long v37 = a3[2];
                      uint64_t v39 = *((void *)v28 + 2);
                      int v35 = v20;
                      float v36 = fminf(v21, *(float *)&v37);
                      Phase::TransformPositionByInverse<float>(v10 + 6, (float32x2_t *)&v33, (float *)&v40);
                      *(float32x2_t *)&long long v33 = v40;
                      *((float *)&v33 + 2) = v41;
                      __int32 v23 = v10[7].i32[1];
                      float v24 = -v10[7].f32[0];
                      float32x2_t v40 = vneg_f32(v10[6]);
                      float v41 = v24;
                      __int32 v42 = v23;
                      Phase::operator*<float>((float *)&v40, (float *)&v34, (float *)&v31);
                      uint64_t v34 = v31;
                      float v25 = 1.0 / v10[9].f32[1];
                      *((float *)&v33 + 3) = *((float *)&v33 + 3) * v25;
                      int v35 = v32;
                      float v36 = v25 * v36;
                      if (!*v18) {
                        std::__throw_bad_function_call[abi:ne180100]();
                      }
                      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, long long *, void *))(*(void *)*v18 + 48))(*v18, v6, a2, &v33, v30);
                      a3 = v22;
                      if (*(float *)&v37 < v36)
                      {
                        float v26 = *(float *)&v37 * v10[9].f32[1];
                        if (v26 < *((float *)v22 + 8))
                        {
                          *((float *)v22 + 8) = v26;
                          *(void *)((char *)v22 + 36) = *(void *)((char *)&v37 + 4);
                          *((_DWORD *)v22 + 11) = HIDWORD(v37);
                          *double v28 = v38;
                          *((void *)v28 + 2) = v39;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((unint64_t)v7 < v12)
      {
        double v27 = v7 + 3;
        while (1)
        {
          uint64_t v7 = v27;
          if ((unint64_t)v27 >= v12) {
            break;
          }
          v27 += 3;
          double v10 = *v7;
          if (*v7) {
            goto LABEL_34;
          }
        }
        double v10 = 0;
      }
LABEL_34:
      ;
    }
    while (v7 != v9);
  }
  return result;
}

uint64_t Phase::Geometry::SingleHitRaycastVsSceneV2(uint64_t result, uint64_t a2, long long *a3, void *a4, int a5)
{
  uint64_t v6 = result;
  if (a5)
  {
    *((void *)a3 + 5) = 0;
    *((void *)a3 + 6) = 0;
    *((void *)a3 + 4) = -2155872257;
  }
  uint64_t v7 = *(float32x2_t ***)(result + 120);
  unsigned int v8 = *(_DWORD *)(result + 136);
  uint64_t v9 = &v7[3 * v8];
  if (v8)
  {
    double v10 = *v7;
    if (!*v7)
    {
      __int16 v11 = v7 + 3;
      while (1)
      {
        uint64_t v7 = v11;
        if (v11 >= v9) {
          break;
        }
        v11 += 3;
        double v10 = *v7;
        if (*v7) {
          goto LABEL_11;
        }
      }
      double v10 = 0;
    }
LABEL_11:
    unint64_t v12 = (unint64_t)v9;
  }
  else
  {
    double v10 = 0;
    unint64_t v12 = *(void *)(result + 120);
  }
  if (v7 != v9)
  {
    BOOL v29 = a3 + 2;
    do
    {
      if (v10)
      {
        if (v10->i32[0] == 4 && (v10[18].i32[0] & *(_DWORD *)(a2 + 72)) != 0)
        {
          uint64_t v14 = (void *)v10[15];
          for (uint64_t i = (void *)v10[16]; v14 != i; ++v14)
          {
            if (*(_DWORD *)(v6 + 112) > *v14)
            {
              uint64_t v15 = *(void *)(v6 + 96);
              if (*(_DWORD *)(v15 + 24 * *v14 + 20) == HIDWORD(*v14))
              {
                double v16 = *(unsigned int **)(v15 + 24 * *v14);
                if (v16)
                {
                  if ((v16[4] & *(_DWORD *)(a2 + 72)) != 0)
                  {
                    uint64_t v17 = *a4 + 32 * *v16;
                    uint64_t v19 = *(void *)(v17 + 24);
                    double v18 = (void *)(v17 + 24);
                    if (v19)
                    {
                      long long v33 = *a3;
                      int v20 = *((_DWORD *)a3 + 6);
                      float v21 = *((float *)a3 + 7);
                      long long v37 = *v29;
                      float v22 = fminf(v21, *((float *)a3 + 8));
                      v30[0] = v10;
                      v30[1] = v16;
                      uint64_t v34 = *((void *)a3 + 2);
                      uint64_t v38 = *((void *)v29 + 2);
                      int v35 = v20;
                      float v36 = v22;
                      Phase::TransformPositionByInverse<float>(v10 + 6, (float32x2_t *)&v33, (float *)&v39);
                      *(float32x2_t *)&long long v33 = v39;
                      *((float *)&v33 + 2) = v40;
                      __int32 v23 = v10[7].i32[1];
                      float v24 = -v10[7].f32[0];
                      float32x2_t v39 = vneg_f32(v10[6]);
                      float v40 = v24;
                      __int32 v41 = v23;
                      Phase::operator*<float>((float *)&v39, (float *)&v34, (float *)&v31);
                      uint64_t v34 = v31;
                      float v25 = 1.0 / v10[9].f32[1];
                      *((float *)&v33 + 3) = *((float *)&v33 + 3) * v25;
                      int v35 = v32;
                      float v36 = v25 * v36;
                      if (!*v18) {
                        std::__throw_bad_function_call[abi:ne180100]();
                      }
                      uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t, long long *, void *))(*(void *)*v18 + 48))(*v18, v6, a2, &v33, v30);
                      if (*(float *)&v37 < v36)
                      {
                        *(float *)&long long v37 = *(float *)&v37 * v10[9].f32[1];
                        if (*(float *)&v37 < *(float *)v29)
                        {
                          *BOOL v29 = v37;
                          *((void *)v29 + 2) = v38;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((unint64_t)v7 < v12)
      {
        float v26 = v7 + 3;
        while (1)
        {
          uint64_t v7 = v26;
          if ((unint64_t)v26 >= v12) {
            break;
          }
          v26 += 3;
          double v10 = *v7;
          if (*v7) {
            goto LABEL_34;
          }
        }
        double v10 = 0;
      }
LABEL_34:
      ;
    }
    while (v7 != v9);
  }
  return result;
}

uint64_t *Phase::Geometry::MultiHitRaycastVsScene(uint64_t *result, uint64_t a2, uint64_t *a3, void *a4, int a5)
{
  uint64_t v7 = result;
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (a5)
  {
    uint64_t result = std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100](a3 + 4);
    a3[9] = 0;
  }
  unsigned int v8 = (float32x2_t **)v7[15];
  unsigned int v9 = *((_DWORD *)v7 + 34);
  double v10 = &v8[3 * v9];
  if (v9)
  {
    __int16 v11 = *v8;
    if (!*v8)
    {
      unint64_t v12 = v8 + 3;
      while (1)
      {
        unsigned int v8 = v12;
        if (v12 >= v10) {
          break;
        }
        v12 += 3;
        __int16 v11 = *v8;
        if (*v8) {
          goto LABEL_11;
        }
      }
      __int16 v11 = 0;
    }
LABEL_11:
    unint64_t v13 = (unint64_t)v10;
  }
  else
  {
    __int16 v11 = 0;
    unint64_t v13 = v7[15];
  }
  if (v8 != v10)
  {
    uint64_t v45 = a2;
    char v44 = v10;
    do
    {
      if (v11)
      {
        if (v11->i32[0] == 4 && (v11[18].i32[0] & *(_DWORD *)(a2 + 72)) != 0)
        {
          uint64_t v15 = (void *)v11[15];
          for (uint64_t i = (void *)v11[16]; v15 != i; ++v15)
          {
            if (*((_DWORD *)v7 + 28) > *v15)
            {
              uint64_t v16 = v7[12];
              if (*(_DWORD *)(v16 + 24 * *v15 + 20) == HIDWORD(*v15))
              {
                uint64_t v17 = *(unsigned int **)(v16 + 24 * *v15);
                if (v17)
                {
                  if ((v17[4] & *(_DWORD *)(a2 + 72)) != 0)
                  {
                    uint64_t v18 = *a4 + 32 * *v17;
                    uint64_t v20 = *(void *)(v18 + 24);
                    uint64_t v19 = (void *)(v18 + 24);
                    if (v20)
                    {
                      v47[0] = v11;
                      v47[1] = v17;
                      float64x2_t v53 = 0;
                      v54[3] = 0;
                      unint64_t v55 = 0;
                      long long v21 = *((_OWORD *)a3 + 1);
                      long long v51 = *(_OWORD *)a3;
                      long long v52 = v21;
                      char v56 = *((unsigned char *)a3 + 80);
                      Phase::TransformPositionByInverse<float>(v11 + 6, (float32x2_t *)&v51, (float *)&v60);
                      *(float32x2_t *)&long long v51 = v60;
                      DWORD2(v51) = v61[0];
                      __int32 v22 = v11[7].i32[1];
                      *(float *)&unsigned int v23 = -v11[7].f32[0];
                      float32x2_t v60 = vneg_f32(v11[6]);
                      v61[0] = __PAIR64__(v22, v23);
                      Phase::operator*<float>((float *)&v60, (float *)&v52, (float *)&v57);
                      *(float32x2_t *)&long long v52 = v57;
                      float v24 = 1.0 / v11[9].f32[1];
                      *((float *)&v51 + 3) = *((float *)&v51 + 3) * v24;
                      DWORD2(v52) = v58[0];
                      *((float *)&v52 + 3) = v24 * *((float *)&v52 + 3);
                      if (!*v19) {
                        std::__throw_bad_function_call[abi:ne180100]();
                      }
                      (*(void (**)(void, uint64_t *, uint64_t, long long *, void *))(*(void *)*v19 + 48))(*v19, v7, a2, &v51, v47);
                      unint64_t v25 = v55;
                      if (v55)
                      {
                        float v26 = v53;
                        float v27 = *((float *)&v52 + 3);
                        unint64_t v28 = v55;
                        do
                        {
                          if (*v26 < v27) {
                            *float v26 = *v26 * v11[9].f32[1];
                          }
                          v26 += 10;
                          --v28;
                        }
                        while (v28);
                        uint64_t v29 = a3[9] + v25;
                        uint64_t v49 = 8;
                        uint64_t v50 = v29;
                        v48[0] = &v50;
                        v48[1] = &v49;
                        Phase::details::AllocArray<Phase::Geometry::RaycastHit,std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::RaycastHit>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::RaycastHit>(unsigned long,unsigned long)::{lambda(Phase::Geometry::RaycastHit*)#1} const&>(v29, (uint64_t)v48, &v60);
                        float32x2_t v30 = v60;
                        float32x2_t v60 = 0;
                        float32x2_t v57 = v30;
                        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v58, (uint64_t)v61);
                        uint64_t v59 = v29;
                        std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v60);
                        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v61);
                        if (a3[9])
                        {
                          uint64_t v31 = 0;
                          unint64_t v32 = 0;
                          do
                          {
                            uint64_t v33 = a3[4] + v31;
                            uint64_t v34 = *(void *)&v57 + v31;
                            *(_DWORD *)uint64_t v34 = *(_DWORD *)v33;
                            *(_DWORD *)(v34 + 4) = *(_DWORD *)(v33 + 4);
                            *(_DWORD *)(v34 + 8) = *(_DWORD *)(v33 + 8);
                            *(_DWORD *)(v34 + 12) = *(_DWORD *)(v33 + 12);
                            long long v35 = *(_OWORD *)(v33 + 16);
                            *(void *)(v34 + 32) = *(void *)(v33 + 32);
                            *(_OWORD *)(v34 + 16) = v35;
                            ++v32;
                            v31 += 40;
                          }
                          while (a3[9] > v32);
                        }
                        uint64_t v36 = 0;
                        uint64_t v37 = 0;
                        if (v25 <= 1) {
                          uint64_t v38 = 1;
                        }
                        else {
                          uint64_t v38 = v25;
                        }
                        do
                        {
                          float32x2_t v39 = &v53[v36];
                          uint64_t v40 = *(void *)&v57 + 40 * (v37 + a3[9]);
                          *(float *)uint64_t v40 = v53[v36];
                          *(float *)(v40 + 4) = v39[1];
                          *(float *)(v40 + 8) = v39[2];
                          *(float *)(v40 + 12) = v39[3];
                          long long v41 = *((_OWORD *)v39 + 1);
                          *(void *)(v40 + 32) = *((void *)v39 + 4);
                          *(_OWORD *)(v40 + 16) = v41;
                          ++v37;
                          v36 += 10;
                        }
                        while (v38 != v37);
                        float32x2_t v42 = (float32x2_t)a3[4];
                        a3[4] = 0;
                        float32x2_t v60 = v42;
                        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v61, (uint64_t)(a3 + 5));
                        uint64_t v62 = a3[9];
                        std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::operator=[abi:ne180100](a3 + 4, (uint64_t *)&v57);
                        a3[9] = v59;
                        std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)&v57, (uint64_t *)&v60);
                        uint64_t v59 = v62;
                        std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v60);
                        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v61);
                        std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v57);
                        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v58);
                      }
                      std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v53);
                      uint64_t result = std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v54);
                      double v10 = v44;
                      a2 = v45;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((unint64_t)v8 < v13)
      {
        uint64_t v43 = v8 + 3;
        while (1)
        {
          unsigned int v8 = v43;
          if ((unint64_t)v43 >= v13) {
            break;
          }
          v43 += 3;
          __int16 v11 = *v8;
          if (*v8) {
            goto LABEL_45;
          }
        }
        __int16 v11 = 0;
      }
LABEL_45:
      ;
    }
    while (v8 != v10);
  }
  return result;
}

void sub_221F68020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17, void *a18)
{
}

uint64_t *Phase::Geometry::MultiHitRaycastVsSceneV2(uint64_t *result, uint64_t a2, uint64_t *a3, void *a4, int a5)
{
  uint64_t v7 = result;
  uint64_t v63 = *MEMORY[0x263EF8340];
  if (a5)
  {
    uint64_t result = std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100](a3 + 4);
    a3[9] = 0;
  }
  unsigned int v8 = (float32x2_t **)v7[15];
  unsigned int v9 = *((_DWORD *)v7 + 34);
  double v10 = &v8[3 * v9];
  if (v9)
  {
    __int16 v11 = *v8;
    if (!*v8)
    {
      unint64_t v12 = v8 + 3;
      while (1)
      {
        unsigned int v8 = v12;
        if (v12 >= v10) {
          break;
        }
        v12 += 3;
        __int16 v11 = *v8;
        if (*v8) {
          goto LABEL_11;
        }
      }
      __int16 v11 = 0;
    }
LABEL_11:
    unint64_t v13 = (unint64_t)v10;
  }
  else
  {
    __int16 v11 = 0;
    unint64_t v13 = v7[15];
  }
  if (v8 != v10)
  {
    uint64_t v44 = a2;
    uint64_t v43 = v10;
    do
    {
      if (v11)
      {
        if (v11->i32[0] == 4 && (v11[18].i32[0] & *(_DWORD *)(a2 + 72)) != 0)
        {
          uint64_t v15 = (void *)v11[15];
          for (uint64_t i = (void *)v11[16]; v15 != i; ++v15)
          {
            if (*((_DWORD *)v7 + 28) > *v15)
            {
              uint64_t v16 = v7[12];
              if (*(_DWORD *)(v16 + 24 * *v15 + 20) == HIDWORD(*v15))
              {
                uint64_t v17 = *(unsigned int **)(v16 + 24 * *v15);
                if (v17)
                {
                  if ((v17[4] & *(_DWORD *)(a2 + 72)) != 0)
                  {
                    uint64_t v18 = *a4 + 32 * *v17;
                    uint64_t v20 = *(void *)(v18 + 24);
                    uint64_t v19 = (void *)(v18 + 24);
                    if (v20)
                    {
                      v47[0] = v11;
                      v47[1] = v17;
                      float64x2_t v53 = 0;
                      v54[3] = 0;
                      unint64_t v55 = 0;
                      long long v21 = *((_OWORD *)a3 + 1);
                      long long v51 = *(_OWORD *)a3;
                      long long v52 = v21;
                      char v56 = *((unsigned char *)a3 + 80);
                      Phase::TransformPositionByInverse<float>(v11 + 6, (float32x2_t *)&v51, (float *)&v60);
                      *(float32x2_t *)&long long v51 = v60;
                      DWORD2(v51) = v61[0];
                      __int32 v22 = v11[7].i32[1];
                      *(float *)&unsigned int v23 = -v11[7].f32[0];
                      float32x2_t v60 = vneg_f32(v11[6]);
                      v61[0] = __PAIR64__(v22, v23);
                      Phase::operator*<float>((float *)&v60, (float *)&v52, (float *)&v57);
                      *(float32x2_t *)&long long v52 = v57;
                      float v24 = 1.0 / v11[9].f32[1];
                      *((float *)&v51 + 3) = *((float *)&v51 + 3) * v24;
                      DWORD2(v52) = v58[0];
                      *((float *)&v52 + 3) = v24 * *((float *)&v52 + 3);
                      if (!*v19) {
                        std::__throw_bad_function_call[abi:ne180100]();
                      }
                      (*(void (**)(void, uint64_t *, uint64_t, long long *, void *))(*(void *)*v19 + 48))(*v19, v7, a2, &v51, v47);
                      unint64_t v25 = v55;
                      if (v55)
                      {
                        float v26 = v53;
                        float v27 = *((float *)&v52 + 3);
                        unint64_t v28 = v55;
                        do
                        {
                          if (*v26 < v27) {
                            *float v26 = *v26 * v11[9].f32[1];
                          }
                          v26 += 6;
                          --v28;
                        }
                        while (v28);
                        unint64_t v45 = v25;
                        uint64_t v29 = a3[9] + v25;
                        uint64_t v49 = 8;
                        uint64_t v50 = v29;
                        v48[0] = &v50;
                        v48[1] = &v49;
                        Phase::details::AllocArray<Phase::Geometry::RaycastHitV2,std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::RaycastHitV2>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Geometry::RaycastHitV2>(unsigned long,unsigned long)::{lambda(Phase::Geometry::RaycastHitV2*)#1} const&>(v29, (uint64_t)v48, &v60);
                        float32x2_t v30 = v60;
                        float32x2_t v60 = 0;
                        float32x2_t v57 = v30;
                        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v58, (uint64_t)v61);
                        uint64_t v59 = v29;
                        std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v60);
                        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v61);
                        if (a3[9])
                        {
                          uint64_t v31 = 0;
                          unint64_t v32 = 0;
                          do
                          {
                            uint64_t v33 = (long long *)(a3[4] + v31);
                            uint64_t v34 = *(void *)&v57 + v31;
                            long long v35 = *v33;
                            *(void *)(v34 + 16) = *((void *)v33 + 2);
                            *(_OWORD *)uint64_t v34 = v35;
                            ++v32;
                            v31 += 24;
                          }
                          while (a3[9] > v32);
                        }
                        uint64_t v36 = 0;
                        uint64_t v37 = 0;
                        uint64_t v38 = v45;
                        if (v45 <= 1) {
                          uint64_t v38 = 1;
                        }
                        do
                        {
                          uint64_t v39 = *(void *)&v57 + 24 * (v37 + a3[9]);
                          long long v40 = *(_OWORD *)&v53[v36];
                          *(void *)(v39 + 16) = *(void *)&v53[v36 + 4];
                          *(_OWORD *)uint64_t v39 = v40;
                          ++v37;
                          v36 += 6;
                        }
                        while (v38 != v37);
                        float32x2_t v41 = (float32x2_t)a3[4];
                        a3[4] = 0;
                        float32x2_t v60 = v41;
                        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v61, (uint64_t)(a3 + 5));
                        uint64_t v62 = a3[9];
                        std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::operator=[abi:ne180100](a3 + 4, (uint64_t *)&v57);
                        a3[9] = v59;
                        std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)&v57, (uint64_t *)&v60);
                        uint64_t v59 = v62;
                        std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v60);
                        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v61);
                        std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v57);
                        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v58);
                      }
                      std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v53);
                      uint64_t result = std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v54);
                      double v10 = v43;
                      a2 = v44;
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ((unint64_t)v8 < v13)
      {
        float32x2_t v42 = v8 + 3;
        while (1)
        {
          unsigned int v8 = v42;
          if ((unint64_t)v42 >= v13) {
            break;
          }
          v42 += 3;
          __int16 v11 = *v8;
          if (*v8) {
            goto LABEL_44;
          }
        }
        __int16 v11 = 0;
      }
LABEL_44:
      ;
    }
    while (v8 != v10);
  }
  return result;
}

void sub_221F684F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, void *a16)
{
}

void Phase::Geometry::SingleHitRaycastVsVoxelTree(double a1, double a2, double a3, double a4, double a5, float64x2_t a6, uint64_t a7, uint64_t a8, long long *a9, void *a10)
{
  *((_DWORD *)a9 + 8) = 2139095039;
  *(void *)((char *)a9 + 36) = 0;
  uint64_t v10 = (uint64_t)a9 + 36;
  *(void *)((char *)a9 + 44) = 0;
  *((_DWORD *)a9 + 13) = 0;
  *((void *)a9 + 7) = 0xFFFFFFFFLL;
  *((void *)a9 + 8) = 0;
  __int16 v11 = a9 + 4;
  uint64_t v12 = a10[1];
  uint64_t v13 = **(void **)(v12 + 120);
  int64x2_t v14 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  unsigned int v32 = -1;
  long long v15 = *a9;
  long long v16 = a9[1];
  v30[0] = *a9;
  v30[1] = v16;
  int64x2_t v31 = v14;
  v29[0] = &v31;
  v29[1] = v30;
  uint64_t v17 = *(void *)(v13 + 48);
  uint64_t v18 = **(void **)(v13 + 40);
  uint64_t v19 = *(void **)(v18 + 16 * v17);
  if (v19[3])
  {
    unint64_t v22 = 0;
    do
    {
      uint64_t v23 = v19[1] + v19[4] * v22;
      if (*(void *)(*(void *)(**(void **)(v23 + 40) + 16 * *(void *)(v23 + 48)) + 24))
      {
        _ZN5Phase8Geometry7details21RaycastVsVoxelSubtreeILb1ERKZNS0_18RaycastVsVoxelTreeILb1ERZNS0_27SingleHitRaycastVsVoxelTreeERNS0_11SystemStateERNS0_15SceneQueryBatchERNS0_10SceneQueryERNS0_20SceneQueryShapeStateEE3__0EEvS5_RNS0_12RaycastInputERKNS0_5ShapeEOT0_EUlT_SJ_T1_E_EEvS5_SF_RKNS0_12VoxelSubtreeESK_((float32x2_t *)v30, v23, (uint64_t)v29, *(double *)&v15, *(double *)&v16, *(double *)v14.i64, a4, a5, a6);
        uint64_t v17 = *(void *)(v13 + 48);
        uint64_t v18 = **(void **)(v13 + 40);
      }
      ++v22;
      uint64_t v19 = *(void **)(v18 + 16 * v17);
    }
    while (v19[3] > v22);
    unsigned int v24 = v32;
    if (v32 != -1)
    {
      uint64_t v25 = *(void *)(v12 + 8);
      unsigned int v33 = v32;
      float v26 = *(double *)v31.i64;
      *((float *)a9 + 8) = v26;
      *((void *)a9 + 6) = v25;
      *((_DWORD *)a9 + 14) = v24;
      float v27 = (float *)(*a10 + 48);
      uint64_t v28 = **(void **)(a10[1] + 120);
      Phase::Geometry::GetNormals(v28, v27, &v33, 1, v10, 1, 1);
      Phase::Geometry::GetMaterials(v28, &v33, 1, v11, 1, 1);
    }
  }
}

float Phase::Geometry::SingleHitRaycastVsVoxelTreeV2(double a1, double a2, double a3, double a4, double a5, float64x2_t a6, uint64_t a7, uint64_t a8, long long *a9, void *a10)
{
  *((void *)a9 + 5) = 0;
  *((void *)a9 + 6) = 0;
  *((void *)a9 + 4) = -2155872257;
  uint64_t v10 = a10[1];
  uint64_t v11 = *(void *)(*a10 + 8);
  uint64_t v12 = **(void **)(v10 + 120);
  int64x2_t v13 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  int v28 = -1;
  long long v14 = *a9;
  long long v15 = a9[1];
  v26[0] = *a9;
  v26[1] = v15;
  int64x2_t v27 = v13;
  v25[0] = &v27;
  v25[1] = v26;
  uint64_t v16 = *(void *)(v12 + 48);
  uint64_t v17 = **(void **)(v12 + 40);
  uint64_t v18 = *(void **)(v17 + 16 * v16);
  if (v18[3])
  {
    unint64_t v20 = 0;
    do
    {
      uint64_t v21 = v18[1] + v18[4] * v20;
      if (*(void *)(*(void *)(**(void **)(v21 + 40) + 16 * *(void *)(v21 + 48)) + 24))
      {
        _ZN5Phase8Geometry7details21RaycastVsVoxelSubtreeILb1ERKZNS0_18RaycastVsVoxelTreeILb1ERZNS0_27SingleHitRaycastVsVoxelTreeERNS0_11SystemStateERNS0_15SceneQueryBatchERNS0_10SceneQueryERNS0_20SceneQueryShapeStateEE3__0EEvS5_RNS0_12RaycastInputERKNS0_5ShapeEOT0_EUlT_SJ_T1_E_EEvS5_SF_RKNS0_12VoxelSubtreeESK_((float32x2_t *)v26, v21, (uint64_t)v25, *(double *)&v14, *(double *)&v15, *(double *)v13.i64, a4, a5, a6);
        uint64_t v16 = *(void *)(v12 + 48);
        uint64_t v17 = **(void **)(v12 + 40);
      }
      ++v20;
      uint64_t v18 = *(void **)(v17 + 16 * v16);
    }
    while (v18[3] > v20);
    int v22 = v28;
    if (v28 != -1)
    {
      uint64_t v23 = *(void *)(v10 + 8);
      *(float *)&long long v14 = *(double *)v27.i64;
      *((_DWORD *)a9 + 8) = v14;
      *((_DWORD *)a9 + 9) = v22;
      *((void *)a9 + 5) = v23;
      *((void *)a9 + 6) = v11;
    }
  }
  return *(float *)&v14;
}

void Phase::Geometry::MultiHitRaycastVsVoxelTree(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t *)(a3 + 32);
  std::unique_ptr<Phase::Geometry::RaycastHit [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)(a3 + 32));
  *(void *)(a3 + 72) = 0;
  std::vector<unsigned int> __p = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  v22[0] = &v23;
  v22[1] = a4;
  v22[2] = &__p;
  unint64_t v23 = 0xBFF0000000000000;
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v15 = **(void **)(v14 + 120);
  v27[0] = (uint64_t)v22;
  v27[1] = v14;
  uint64_t v16 = *(void *)(v15 + 48);
  uint64_t v17 = **(void **)(v15 + 40);
  uint64_t v18 = *(void **)(v17 + 16 * v16);
  if (v18[3])
  {
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = v18[1] + v18[4] * v19;
      if (*(void *)(*(void *)(**(void **)(v20 + 40) + 16 * *(void *)(v20 + 48)) + 24))
      {
        _ZN5Phase8Geometry7details21RaycastVsVoxelSubtreeILb0ERKZNS0_18RaycastVsVoxelTreeILb0ERZNS0_26MultiHitRaycastVsVoxelTreeERNS0_11SystemStateERNS0_15SceneQueryBatchERNS0_10SceneQueryERNS0_20SceneQueryShapeStateEE3__0EEvS5_RNS0_12RaycastInputERKNS0_5ShapeEOT0_EUlT_SJ_T1_E_EEvS5_SF_RKNS0_12VoxelSubtreeESK_((float32x2_t *)a3, v20, v27, v8, v9, v10, v11, v12, v13);
        uint64_t v16 = *(void *)(v15 + 48);
        uint64_t v17 = **(void **)(v15 + 40);
      }
      ++v19;
      uint64_t v18 = *(void **)(v17 + 16 * v16);
    }
    while (v18[3] > v19);
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - (unsigned char *)__p) >> 3);
  }
  else
  {
    unint64_t v21 = 0;
  }
  Phase::Geometry::MergeRaycastQueryHits<Phase::Geometry::RaycastHit,std::vector<Phase::Geometry::RaycastHit>>(a1, v7, &__p, v21);
  if (__p)
  {
    uint64_t v25 = __p;
    operator delete(__p);
  }
}

void sub_221F688E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::MultiHitRaycastVsVoxelTreeV2(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = (uint64_t *)(a3 + 32);
  std::unique_ptr<Phase::Geometry::RaycastHitV2 [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)(a3 + 32));
  *(void *)(a3 + 72) = 0;
  std::vector<unsigned int> __p = 0;
  int64x2_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v14 = a4[1];
  uint64_t v15 = *(void *)(*a4 + 8);
  unint64_t v24 = 0xBFF0000000000000;
  uint64_t v25 = v15;
  v23[0] = &v24;
  v23[1] = &v25;
  v23[2] = &__p;
  uint64_t v16 = **(void **)(v14 + 120);
  v29[0] = v23;
  v29[1] = v14;
  uint64_t v17 = *(void *)(v16 + 48);
  uint64_t v18 = **(void **)(v16 + 40);
  unint64_t v19 = *(void **)(v18 + 16 * v17);
  if (v19[3])
  {
    unint64_t v20 = 0;
    do
    {
      uint64_t v21 = v19[1] + v19[4] * v20;
      if (*(void *)(*(void *)(**(void **)(v21 + 40) + 16 * *(void *)(v21 + 48)) + 24))
      {
        _ZN5Phase8Geometry7details21RaycastVsVoxelSubtreeILb0ERKZNS0_18RaycastVsVoxelTreeILb0ERZNS0_28MultiHitRaycastVsVoxelTreeV2ERNS0_11SystemStateERNS0_15SceneQueryBatchERNS0_10SceneQueryERNS0_20SceneQueryShapeStateEE3__0EEvS5_RNS0_12RaycastInputERKNS0_5ShapeEOT0_EUlT_SJ_T1_E_EEvS5_SF_RKNS0_12VoxelSubtreeESK_((float32x2_t *)a3, v21, (uint64_t)v29, v8, v9, v10, v11, v12, v13);
        uint64_t v17 = *(void *)(v16 + 48);
        uint64_t v18 = **(void **)(v16 + 40);
      }
      ++v20;
      unint64_t v19 = *(void **)(v18 + 16 * v17);
    }
    while (v19[3] > v20);
    unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v27 - (unsigned char *)__p) >> 3);
  }
  else
  {
    unint64_t v22 = 0;
  }
  Phase::Geometry::MergeRaycastQueryHits<Phase::Geometry::RaycastHitV2,std::vector<Phase::Geometry::RaycastHitV2>>(a1, v7, &__p, v22);
  if (__p)
  {
    int64x2_t v27 = __p;
    operator delete(__p);
  }
}

void sub_221F68A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void _ZN5Phase8Geometry7details21RaycastVsVoxelSubtreeILb1ERKZNS0_18RaycastVsVoxelTreeILb1ERZNS0_27SingleHitRaycastVsVoxelTreeERNS0_11SystemStateERNS0_15SceneQueryBatchERNS0_10SceneQueryERNS0_20SceneQueryShapeStateEE3__0EEvS5_RNS0_12RaycastInputERKNS0_5ShapeEOT0_EUlT_SJ_T1_E_EEvS5_SF_RKNS0_12VoxelSubtreeESK_(float32x2_t *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  float64x2_t v12 = vcvtq_f64_f32(*a1);
  v10.f64[0] = a1[1].f32[0];
  float64x2_t v13 = vcvtq_f64_f32(a1[2]);
  v9.f64[0] = a1[3].f32[0];
  __asm { FMOV            V16.2D, #1.0 }
  float64x2_t v19 = vminnmq_f64(vmaxnmq_f64(vdivq_f64(_Q16, v13), (float64x2_t)vdupq_n_s64(0xC1EFFFFFFFE00000)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL));
  float64x2_t v20 = vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vdivq_f64(_Q16, v9), (float64x2_t)xmmword_2220A5DE0), (float64x2_t)xmmword_2220A5DF0);
  v11.f64[0] = *(float *)(a2 + 8);
  a9.f64[0] = *(float *)(a2 + 20);
  float64x2_t v21 = vmulq_f64(v19, vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)a2), v12));
  unint64_t v22 = *(_OWORD *)&vmulq_f64(v20, vsubq_f64(v11, v10));
  float64x2_t v23 = vmulq_f64(v19, vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 12)), v12));
  *(void *)&v20.f64[0] = *(_OWORD *)&vmulq_f64(v20, vsubq_f64(a9, v10));
  *(void *)&v24.f64[0] = *(_OWORD *)&vminnmq_f64((float64x2_t)v22, (float64x2_t)*(unint64_t *)&v20.f64[0]);
  v24.f64[1] = a1[1].f32[1];
  *(void *)&v25.f64[0] = *(_OWORD *)&vmaxnmq_f64((float64x2_t)v22, (float64x2_t)*(unint64_t *)&v20.f64[0]);
  v25.f64[1] = a1[3].f32[1];
  double v26 = vpmaxq_f64(vmaxnmq_f64(vminnmq_f64(v21, v23), v24));
  double v27 = vpminq_f64(vminnmq_f64(vmaxnmq_f64(v21, v23), v25));
  if (v26 <= v27)
  {
    if (v26 >= 0.0 || (double v26 = 0.0, v27 > 0.0))
    {
      uint64_t v29 = *(void **)(**(void **)(a2 + 40) + 16 * *(void *)(a2 + 48));
      uint64_t v30 = v29[3];
      if (v30 == 1)
      {
        int64x2_t v31 = *(double **)a3;
        if (**(double **)a3 <= v26) {
          return;
        }
        *int64x2_t v31 = v26;
        v31[1] = v27;
        *((_DWORD *)v31 + 4) = 0;
        float v32 = v26;
        goto LABEL_27;
      }
      if ((int)v30 > 32)
      {
        v120 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 416);
        if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          v136 = "GeoRaycastUtility.hpp";
          __int16 v137 = 1024;
          int v138 = 477;
          __int16 v139 = 1024;
          int v140 = v30;
          _os_log_impl(&dword_221E5E000, v120, OS_LOG_TYPE_ERROR, "%25s:%-5d Excessive level count (%d) in voxel tree: resolution has an invalid numerical value.", buf, 0x18u);
        }
      }
      else
      {
        float64x2_t v130 = (float64x2_t)xmmword_2220A5DF0;
        float64x2_t v131 = (float64x2_t)xmmword_2220A5DE0;
        int8x16_t v127 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
        MEMORY[0x270FA5388](a1);
        uint64_t v34 = (char *)&v123 - v33;
        float64x2_t v133 = v35;
        float64x2_t v134 = v36;
        float64x2_t v132 = v37;
        float64x2_t v128 = v39;
        float64x2_t v129 = v38;
        float64x2_t v123 = v40;
        float64x2_t v124 = v41;
        float64x2_t v125 = v42;
        float64x2_t v126 = v43;
        bzero((char *)&v123 - v33, v33);
        v45.f64[1] = v129.f64[1];
        double v46 = v133.f64[0];
        double v47 = v134.f64[0];
        double v48 = (float32x2_t *)v29[1];
        v49.f64[0] = v48[3].f32[0];
        float64x2_t v50 = vdivq_f64(v132, vcvtq_f64_f32(v48[2]));
        float64x2_t v51 = vdivq_f64(v132, v49);
        v52.f64[0] = v128.f64[0];
        *(void *)&v52.f64[1] = v127.i64[0];
        v53.f64[0] = 1073741820.0;
        float64x2_t v54 = (float64x2_t)vdupq_n_s64(0x41CFFFFFFF800000uLL);
        int32x4_t v55 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64(vmaxnmq_f64(vmulq_f64(vsubq_f64(vmlaq_n_f64(v123, v52, v134.f64[0]), v126), v50), (float64x2_t)0), v132), v54));
        int32x4_t v56 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(vsubq_f64(vmlaq_f64(v124, v134, v129), v125), v51), (float64x2_t)0), (float64x2_t)xmmword_2220A4FA0), v53));
        int32x4_t v57 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64(vmaxnmq_f64(vmulq_f64(vsubq_f64(vmlaq_n_f64(v123, v52, v133.f64[0]), v126), v50), (float64x2_t)0), v132), v54));
        int32x4_t v58 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(vsubq_f64(vmlaq_f64(v124, v133, v129), v125), v51), (float64x2_t)0), (float64x2_t)xmmword_2220A4FA0), v53));
        *(int32x2_t *)&v52.f64[0] = vsub_s32(vmovn_s64((int64x2_t)v57), vmovn_s64((int64x2_t)v55));
        v59.i64[0] = SLODWORD(v52.f64[0]);
        v59.i64[1] = SHIDWORD(v52.f64[0]);
        float64x2_t v60 = vcvtq_f64_s64(v59);
        *(int32x2_t *)&v49.f64[0] = vsub_s32(vmovn_s64((int64x2_t)v58), vmovn_s64((int64x2_t)v56));
        v59.i64[0] = SLODWORD(v49.f64[0]);
        v59.i64[1] = SHIDWORD(v49.f64[0]);
        float64x2_t v61 = vcvtq_f64_s64(v59);
        int64x2_t v62 = vceqzq_f64(v60);
        if ((vandq_s8(vandq_s8((int8x16_t)vdupq_laneq_s64(v62, 1), (int8x16_t)v62), (int8x16_t)vceqzq_f64(v61)).u64[0] & 0x8000000000000000) != 0)
        {
          *(void *)&v50.f64[1] = vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL).u64[0];
          float64x2_t v61 = vmulq_f64(vmulq_f64(v129, v51), v53);
          float64x2_t v60 = vmulq_f64(vmulq_f64(v128, v50), v54);
        }
        int32x4_t v63 = vuzp1q_s32(v55, v56);
        unint64_t v64 = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
        float64x2_t v65 = vminnmq_f64(vmaxnmq_f64(vdivq_f64(v132, v60), (float64x2_t)vdupq_n_s64(0xC1EFFFFFFFE00000)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL));
        float64x2_t v66 = vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vdivq_f64(v132, v61), v131), v130);
        if ((int)v30 >= 1)
        {
          uint64_t v67 = 0;
          int8x16_t v68 = (int8x16_t)vcltzq_s32(vsubq_s32(vuzp1q_s32(v57, v58), v63));
          uint64_t v69 = v29[4];
          unint64_t v70 = v48 + 8;
          int v71 = 30;
          do
          {
            float v72 = &v34[v67];
            int8x16_t v73 = (int8x16_t)vdupq_n_s32(1 << v71);
            *((_DWORD *)v72 + 52) = v71;
            *((int8x16_t *)v72 + 3) = vorrq_s8(v73, v68);
            int8x16_t v74 = vorrq_s8(vandq_s8((int8x16_t)vdupq_n_s32(-(1 << v71)), v68), vbicq_s8(v73, v68));
            v75.i64[0] = v74.i32[2];
            v75.i64[1] = v74.i32[3];
            *((float64x2_t *)v72 + 9) = vmulq_f64(v66, vcvtq_f64_s64(v75));
            v75.i64[0] = v74.i32[0];
            v75.i64[1] = v74.i32[1];
            *((int8x16_t *)v72 + 7) = v74;
            *((float64x2_t *)v72 + 8) = vmulq_f64(v65, vcvtq_f64_s64(v75));
            *((void *)v72 + 27) = *(void *)(*(void *)(**(void **)&v70[-1] + 16 * *(void *)v70) + 8);
            v67 += 224;
            unint64_t v70 = (float32x2_t *)((char *)v70 + v69);
            v71 -= 2;
          }
          while (224 * v30 != v67);
        }
        double v76 = v46 - v47;
        float v77 = (unint64_t *)*((void *)v34 + 27);
        unint64_t v79 = *v77;
        unint64_t v78 = v77[1];
        *((void *)v34 + 28) = v79;
        uint64_t v80 = v34 + 224;
        int32x4_t v81 = vdupq_n_s32(*((_DWORD *)v80 + 52));
        LODWORD(v53.f64[0]) = *((_DWORD *)v80 + 52);
        unsigned long long v82 = *(_OWORD *)&vshlq_s32(v63, vnegq_s32(v81)) & __PAIR128__(0xFFFFFFFCFFFFFFFCLL, 0xFFFFFFFCFFFFFFFCLL);
        v83.i64[0] = 0x400000004;
        v83.i64[1] = 0x400000004;
        *((uint32x4_t *)v80 + 1) = vshlq_u32((uint32x4_t)v82, (uint32x4_t)v81);
        *((uint32x4_t *)v80 + 2) = vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)v82, v83), (uint32x4_t)v81);
        v84.i64[0] = -1;
        v84.i64[1] = -1;
        int32x4_t v85 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshlq_u32(v84, (uint32x4_t)v53), 0), (int8x16_t)v63), *((int32x4_t *)v80 + 3));
        int32x4_t v86 = vsubq_s32(v85, v63);
        v87.i64[0] = v86.i32[2];
        v87.i64[1] = v86.i32[3];
        float64x2_t v88 = vcvtq_f64_s64(v87);
        v87.i64[0] = v86.i32[0];
        v87.i64[1] = v86.i32[1];
        *((float64x2_t *)v80 + 5) = vmulq_f64(v65, vcvtq_f64_s64(v87));
        *((float64x2_t *)v80 + 6) = vmulq_f64(v66, v88);
        *((int32x4_t *)v80 + 4) = v85;
        *((_DWORD *)v80 + 2) = v78;
        double v89 = 0.0;
        int v90 = 1;
        v91.i64[0] = 0x100000001;
        v91.i64[1] = 0x100000001;
        v92.i64[0] = 0x800000008;
        v92.i64[1] = 0x800000008;
        *(void *)&v60.f64[1] = v64;
        int8x16_t v93 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
        int32x4_t v94 = v63;
        while (1)
        {
          while (1)
          {
            float64x2_t v95 = *((float64x2_t *)v80 + 5);
            float64x2_t v96 = *((float64x2_t *)v80 + 6);
            v45.f64[0] = fmin(fmin(v95.f64[0], v96.f64[0]), *((double *)v80 + 11));
            uint64_t v97 = (const float *)(v80 + 208);
            int32x4_t v98 = (int32x4_t)vld1q_dup_f32(v97);
            int32x4_t v99 = vshlq_s32(v94, vnegq_s32(v98));
            int32x4_t v100 = (int32x4_t)vshlq_u32((uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vshlq_n_s32(v99, 2uLL), v92), vandq_s8((int8x16_t)v99, v91)), (uint32x4_t)xmmword_2220A5E00);
            unsigned __int8 v101 = vorrq_s8(vorrq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v100.i8, 1), (int8x16_t)vdupq_laneq_s32(v100, 2)), (int8x16_t)v100).u8[0];
            if ((v79 >> v101)) {
              break;
            }
            if (v45.f64[0] >= 1.0) {
              return;
            }
            int32x4_t v114 = (int32x4_t)vceqq_f64(v96, v45);
            int32x4_t v115 = (int32x4_t)vceqq_f64(v95, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v45.f64[0], 0));
            int8x16_t v116 = (int8x16_t)vuzp1q_s32(v115, v114);
            *((int32x4_t *)v80 + 10) = v115;
            *((int32x4_t *)v80 + 11) = v114;
            *((int8x16_t *)v80 + 12) = v116;
            int32x4_t v94 = (int32x4_t)vbslq_s8(v116, *((int8x16_t *)v80 + 4), (int8x16_t)vaddq_s32(vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v60, v45.f64[0])), (int32x4_t)vcvtq_s64_f64(vmulq_f64(v61, v45))), v63));
            while (1)
            {
              uint32x4_t v117 = (uint32x4_t)vorrq_s8((int8x16_t)vcgeq_s32(v94, *((int32x4_t *)v80 + 2)), (int8x16_t)vcgtq_s32(*((int32x4_t *)v80 + 1), v94));
              v117.i32[3] = v117.i32[2];
              if ((vmaxvq_u32(v117) & 0x80000000) == 0) {
                break;
              }
              if (v90 < 2) {
                return;
              }
              --v90;
              v80 -= 224;
            }
            v44.i64[0] = 0x8000000000000000;
            float64x2_t v118 = vaddq_f64(*((float64x2_t *)v80 + 6), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64((int64x2_t)*((unint64_t *)v80 + 22)), *((int8x16_t *)v80 + 9), v44));
            float64x2_t v119 = vaddq_f64(*((float64x2_t *)v80 + 5), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(*((int64x2_t *)v80 + 10)), *((int8x16_t *)v80 + 8), v93));
            *((int8x16_t *)v80 + 4) = vbslq_s8(*((int8x16_t *)v80 + 12), (int8x16_t)vaddq_s32(*((int32x4_t *)v80 + 7), *((int32x4_t *)v80 + 4)), *((int8x16_t *)v80 + 4));
            *((float64x2_t *)v80 + 5) = v119;
            *((float64x2_t *)v80 + 6) = v118;
            unint64_t v79 = *(void *)v80;
            double v89 = v45.f64[0];
          }
          uint8x8_t v102 = (uint8x8_t)vcnt_s8((int8x8_t)(v79 & ~(-1 << v101)));
          v102.i16[0] = vaddlv_u8(v102);
          __int32 v103 = *((_DWORD *)v80 + 2) + v102.i32[0];
          if (v30 - 1 == v90) {
            break;
          }
          float64x2_t v104 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v45.f64[0], 0);
          int32x4_t v105 = (int32x4_t)vceqq_f64(v96, v45);
          int32x4_t v106 = (int32x4_t)vceqq_f64(v95, v104);
          *((int32x4_t *)v80 + 10) = v106;
          *((int32x4_t *)v80 + 11) = v105;
          *((int32x4_t *)v80 + 12) = vuzp1q_s32(v106, v105);
          uint64_t v107 = (unint64_t *)(*((void *)v80 + 27) + 16 * v103);
          unint64_t v79 = *v107;
          unint64_t v108 = v107[1];
          *((void *)v80 + 28) = v79;
          v80 += 224;
          ++v90;
          int32x4_t v109 = vdupq_n_s32(*((_DWORD *)v80 + 52));
          v106.i32[0] = *((_DWORD *)v80 + 52);
          unsigned long long v110 = *(_OWORD *)&vshlq_s32(v94, vnegq_s32(v109)) & __PAIR128__(0xFFFFFFFCFFFFFFFCLL, 0xFFFFFFFCFFFFFFFCLL);
          *((uint32x4_t *)v80 + 1) = vshlq_u32((uint32x4_t)v110, (uint32x4_t)v109);
          *((uint32x4_t *)v80 + 2) = vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)v110, v83), (uint32x4_t)v109);
          float64x2_t v45 = (float64x2_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshlq_u32(v84, (uint32x4_t)v106), 0), (int8x16_t)v94), *((int32x4_t *)v80 + 3));
          int32x4_t v111 = vsubq_s32((int32x4_t)v45, v63);
          v112.i64[0] = v111.i32[2];
          v112.i64[1] = v111.i32[3];
          float64x2_t v113 = vcvtq_f64_s64(v112);
          v112.i64[0] = v111.i32[0];
          v112.i64[1] = v111.i32[1];
          *((float64x2_t *)v80 + 5) = vmulq_f64(v65, vcvtq_f64_s64(v112));
          *((float64x2_t *)v80 + 6) = vmulq_f64(v66, v113);
          *((float64x2_t *)v80 + 4) = v45;
          *((_DWORD *)v80 + 2) = v108;
        }
        double v121 = v47 + v76 * v89;
        v122 = *(double **)a3;
        if (**(double **)a3 > v121)
        {
          double *v122 = v121;
          v122[1] = v47 + v76 * v45.f64[0];
          *((_DWORD *)v122 + 4) = v103;
          float v32 = v121;
LABEL_27:
          *(float *)(*(void *)(a3 + 8) + 28) = v32;
        }
      }
    }
  }
}

void _ZN5Phase8Geometry7details21RaycastVsVoxelSubtreeILb0ERKZNS0_18RaycastVsVoxelTreeILb0ERZNS0_26MultiHitRaycastVsVoxelTreeERNS0_11SystemStateERNS0_15SceneQueryBatchERNS0_10SceneQueryERNS0_20SceneQueryShapeStateEE3__0EEvS5_RNS0_12RaycastInputERKNS0_5ShapeEOT0_EUlT_SJ_T1_E_EEvS5_SF_RKNS0_12VoxelSubtreeESK_(float32x2_t *a1, uint64_t a2, uint64_t *a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9)
{
  v157[2] = *MEMORY[0x263EF8340];
  float64x2_t v12 = vcvtq_f64_f32(*a1);
  v10.f64[0] = a1[1].f32[0];
  float64x2_t v13 = vcvtq_f64_f32(a1[2]);
  v9.f64[0] = a1[3].f32[0];
  __asm { FMOV            V16.2D, #1.0 }
  float64x2_t v19 = vminnmq_f64(vmaxnmq_f64(vdivq_f64(_Q16, v13), (float64x2_t)vdupq_n_s64(0xC1EFFFFFFFE00000)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL));
  float64x2_t v20 = vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vdivq_f64(_Q16, v9), (float64x2_t)xmmword_2220A5DE0), (float64x2_t)xmmword_2220A5DF0);
  v11.f64[0] = *(float *)(a2 + 8);
  a9.f64[0] = *(float *)(a2 + 20);
  float64x2_t v21 = vmulq_f64(v19, vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)a2), v12));
  unint64_t v22 = *(_OWORD *)&vmulq_f64(v20, vsubq_f64(v11, v10));
  float64x2_t v23 = vmulq_f64(v19, vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 12)), v12));
  *(void *)&v20.f64[0] = *(_OWORD *)&vmulq_f64(v20, vsubq_f64(a9, v10));
  *(void *)&v24.f64[0] = *(_OWORD *)&vminnmq_f64((float64x2_t)v22, (float64x2_t)*(unint64_t *)&v20.f64[0]);
  v24.f64[1] = a1[1].f32[1];
  *(void *)&v25.f64[0] = *(_OWORD *)&vmaxnmq_f64((float64x2_t)v22, (float64x2_t)*(unint64_t *)&v20.f64[0]);
  v25.f64[1] = a1[3].f32[1];
  float64x2_t v26 = vmaxnmq_f64(vminnmq_f64(v21, v23), v24);
  v26.f64[0] = vpmaxq_f64(v26);
  float64x2_t v27 = vminnmq_f64(vmaxnmq_f64(v21, v23), v25);
  v27.f64[0] = vpminq_f64(v27);
  float64x2_t v147 = v26;
  float64x2_t v152 = v27;
  if (v26.f64[0] > v27.f64[0]) {
    return;
  }
  v29.f64[1] = v147.f64[1];
  if (v147.f64[0] < 0.0)
  {
    v29.f64[0] = 0.0;
    float64x2_t v147 = v29;
    if (v152.f64[0] <= 0.0) {
      return;
    }
  }
  uint64_t v30 = *(void **)(**(void **)(a2 + 40) + 16 * *(void *)(a2 + 48));
  uint64_t v31 = v30[3];
  if (v31 == 1)
  {
    uint64_t v32 = *a3;
    uint64_t v33 = *(void *)(a3[1] + 8);
    __int32 v153 = 0;
    if (**(double **)v32 != v147.f64[0])
    {
      *(_DWORD *)v156 = 0;
      v155 = 0;
      v157[0] = 0;
      float v34 = v147.f64[0];
      *(float *)buf = v34;
      *(void *)&v156[4] = v33;
      *(_DWORD *)&v156[12] = 0;
      float64x2_t v35 = *(void **)(v32 + 8);
      uint64_t v36 = **(void **)(v35[1] + 120);
      Phase::Geometry::GetNormals(v36, (float *)(*v35 + 48), (unsigned int *)&v153, 1, (uint64_t)&v155, 1, 1);
      Phase::Geometry::GetMaterials(v36, (unsigned int *)&v153, 1, v157, 1, 1);
      uint64_t v37 = *(void *)(v32 + 16);
      unint64_t v38 = *(void *)(v37 + 8);
      if (v38 >= *(void *)(v37 + 16))
      {
        uint64_t v40 = std::vector<Phase::Geometry::RaycastHit>::__push_back_slow_path<Phase::Geometry::RaycastHit const&>(*(uint64_t **)(v32 + 16), (uint64_t)buf);
      }
      else
      {
        *(_DWORD *)unint64_t v38 = *(_DWORD *)buf;
        *(void *)(v38 + 4) = v155;
        *(_DWORD *)(v38 + 12) = *(_DWORD *)v156;
        long long v39 = *(_OWORD *)&v156[4];
        *(void *)(v38 + 32) = v157[0];
        *(_OWORD *)(v38 + 16) = v39;
        uint64_t v40 = v38 + 40;
      }
      *(void *)(v37 + 8) = v40;
      **(void **)uint64_t v32 = *(void *)&v152.f64[0];
    }
    return;
  }
  if ((int)v31 <= 32)
  {
    long long v148 = xmmword_2220A5DF0;
    long long v149 = xmmword_2220A5DE0;
    int8x16_t v145 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
    MEMORY[0x270FA5388](a1);
    float64x2_t v42 = (char *)&v141 - v41;
    long long v150 = v43;
    int32x4_t v151 = v44;
    float64x2_t v146 = v45;
    float64x2_t v141 = v46;
    float64x2_t v142 = v47;
    int64x2_t v144 = v48;
    float64x2_t v143 = v49;
    bzero((char *)&v141 - v41, v41);
    float64x2_t v50 = (float32x2_t *)v30[1];
    v51.f64[0] = v50[3].f32[0];
    float64x2_t v52 = vdivq_f64((float64x2_t)v150, vcvtq_f64_f32(v50[2]));
    float64x2_t v53 = vdivq_f64((float64x2_t)v150, v51);
    v54.f64[0] = v146.f64[0];
    *(void *)&v54.f64[1] = v145.i64[0];
    double v55 = v147.f64[0];
    v56.f64[0] = 1073741820.0;
    float64x2_t v57 = (float64x2_t)vdupq_n_s64(0x41CFFFFFFF800000uLL);
    int32x4_t v58 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64(vmaxnmq_f64(vmulq_f64(vsubq_f64(vmlaq_n_f64(v141, v54, v147.f64[0]), (float64x2_t)v144), v52), (float64x2_t)0), (float64x2_t)v150), v57));
    int32x4_t v59 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(vsubq_f64(vmlaq_f64(v142, v147, (float64x2_t)v151), v143), v53), (float64x2_t)0), (float64x2_t)xmmword_2220A4FA0), v56));
    int32x4_t v60 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64(vmaxnmq_f64(vmulq_f64(vsubq_f64(vmlaq_n_f64(v141, v54, v152.f64[0]), (float64x2_t)v144), v52), (float64x2_t)0), (float64x2_t)v150), v57));
    int32x4_t v61 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(vsubq_f64(vmlaq_f64(v142, v152, (float64x2_t)v151), v143), v53), (float64x2_t)0), (float64x2_t)xmmword_2220A4FA0), v56));
    int32x2_t v62 = vsub_s32(vmovn_s64((int64x2_t)v60), vmovn_s64((int64x2_t)v58));
    v63.i64[0] = v62.i32[0];
    v63.i64[1] = v62.i32[1];
    float64x2_t v64 = vcvtq_f64_s64(v63);
    int32x2_t v65 = vsub_s32(vmovn_s64((int64x2_t)v61), vmovn_s64((int64x2_t)v59));
    v63.i64[0] = v65.i32[0];
    v63.i64[1] = v65.i32[1];
    float64x2_t v66 = vcvtq_f64_s64(v63);
    int64x2_t v67 = vceqzq_f64(v64);
    if ((vandq_s8(vandq_s8((int8x16_t)vdupq_laneq_s64(v67, 1), (int8x16_t)v67), (int8x16_t)vceqzq_f64(v66)).u64[0] & 0x8000000000000000) != 0)
    {
      *(void *)&v52.f64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
      float64x2_t v66 = vmulq_f64(vmulq_f64((float64x2_t)v151, v53), v56);
      float64x2_t v64 = vmulq_f64(vmulq_f64(v146, v52), v57);
    }
    int32x4_t v151 = vuzp1q_s32(v58, v59);
    unint64_t v68 = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
    int8x16_t v145 = (int8x16_t)v66;
    uint32x4_t v69 = (uint32x4_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vdivq_f64((float64x2_t)v150, v66), (float64x2_t)v149);
    float64x2_t v70 = vminnmq_f64(vmaxnmq_f64(vdivq_f64((float64x2_t)v150, v64), (float64x2_t)vdupq_n_s64(0xC1EFFFFFFFE00000)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL));
    float64x2_t v71 = vminnmq_f64((float64x2_t)v69.u64[0], (float64x2_t)v148);
    if ((int)v31 >= 1)
    {
      uint64_t v72 = 0;
      int8x16_t v73 = (int8x16_t)vcltzq_s32(vsubq_s32(vuzp1q_s32(v60, v61), v151));
      uint64_t v74 = v30[4];
      int64x2_t v75 = v50 + 8;
      int v76 = 30;
      do
      {
        float v77 = &v42[v72];
        int8x16_t v78 = (int8x16_t)vdupq_n_s32(1 << v76);
        *((_DWORD *)v77 + 52) = v76;
        *((int8x16_t *)v77 + 3) = vorrq_s8(v78, v73);
        uint32x4_t v69 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vdupq_n_s32(-(1 << v76)), v73), vbicq_s8(v78, v73));
        v79.i64[0] = v69.i32[2];
        v79.i64[1] = v69.i32[3];
        float64x2_t v80 = vmulq_f64(v71, vcvtq_f64_s64(v79));
        v79.i64[0] = v69.i32[0];
        v79.i64[1] = v69.i32[1];
        *((uint32x4_t *)v77 + 7) = v69;
        *((float64x2_t *)v77 + 8) = vmulq_f64(v70, vcvtq_f64_s64(v79));
        *((float64x2_t *)v77 + 9) = v80;
        *((void *)v77 + 27) = *(void *)(*(void *)(**(void **)&v75[-1] + 16 * *(void *)v75) + 8);
        v72 += 224;
        int64x2_t v75 = (float32x2_t *)((char *)v75 + v74);
        v76 -= 2;
      }
      while (224 * v31 != v72);
    }
    int32x4_t v81 = v151;
    double v82 = v152.f64[0] - v55;
    int32x4_t v83 = (unint64_t *)*((void *)v42 + 27);
    unint64_t v84 = *v83;
    unint64_t v85 = v83[1];
    *((void *)v42 + 28) = v84;
    int32x4_t v86 = v42 + 224;
    int32x4_t v87 = vdupq_n_s32(*((_DWORD *)v86 + 52));
    v69.i32[0] = *((_DWORD *)v86 + 52);
    unsigned long long v88 = *(_OWORD *)&vshlq_s32(v81, vnegq_s32(v87)) & __PAIR128__(0xFFFFFFFCFFFFFFFCLL, 0xFFFFFFFCFFFFFFFCLL);
    float64x2_t v89 = (float64x2_t)vshlq_u32((uint32x4_t)v88, (uint32x4_t)v87);
    v90.i64[0] = 0x400000004;
    v90.i64[1] = 0x400000004;
    *((float64x2_t *)v86 + 1) = v89;
    *((uint32x4_t *)v86 + 2) = vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)v88, v90), (uint32x4_t)v87);
    v87.i64[0] = -1;
    v87.i64[1] = -1;
    int32x4_t v91 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshlq_u32((uint32x4_t)v87, v69), 0), (int8x16_t)v81), *((int32x4_t *)v86 + 3));
    int32x4_t v92 = vsubq_s32(v91, v81);
    v93.i64[0] = v92.i32[2];
    v93.i64[1] = v92.i32[3];
    float64x2_t v94 = vcvtq_f64_s64(v93);
    v93.i64[0] = v92.i32[0];
    v93.i64[1] = v92.i32[1];
    long long v148 = (__int128)v71;
    long long v149 = (__int128)v70;
    *((float64x2_t *)v86 + 5) = vmulq_f64(v70, vcvtq_f64_s64(v93));
    *((float64x2_t *)v86 + 6) = vmulq_f64(v71, v94);
    *((int32x4_t *)v86 + 4) = v91;
    *((_DWORD *)v86 + 2) = v85;
    double v95 = 0.0;
    int v96 = 1;
    long long v150 = xmmword_2220A5E00;
    *(void *)&v64.f64[1] = v68;
    float64x2_t v146 = v64;
    int64x2_t v144 = vdupq_n_s64(0x8000000000000000);
    int32x4_t v97 = v81;
    while (1)
    {
      float64x2_t v98 = *((float64x2_t *)v86 + 5);
      float64x2_t v99 = *((float64x2_t *)v86 + 6);
      v89.f64[0] = fmin(fmin(v98.f64[0], v99.f64[0]), *((double *)v86 + 11));
      float64x2_t v152 = v89;
      int32x4_t v100 = (const float *)(v86 + 208);
      int32x4_t v101 = (int32x4_t)vld1q_dup_f32(v100);
      int32x4_t v102 = vshlq_s32(v97, vnegq_s32(v101));
      v103.i64[0] = 0x100000001;
      v103.i64[1] = 0x100000001;
      v104.i64[0] = 0x800000008;
      v104.i64[1] = 0x800000008;
      int32x4_t v105 = (int32x4_t)vshlq_u32((uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vshlq_n_s32(v102, 2uLL), v104), vandq_s8((int8x16_t)v102, v103)), (uint32x4_t)v150);
      unsigned __int8 v106 = vorrq_s8(vorrq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v105.i8, 1), (int8x16_t)vdupq_laneq_s32(v105, 2)), (int8x16_t)v105).u8[0];
      if (((v84 >> v106) & 1) == 0) {
        goto LABEL_24;
      }
      uint8x8_t v107 = (uint8x8_t)vcnt_s8((int8x8_t)(v84 & ~(-1 << v106)));
      v107.i16[0] = vaddlv_u8(v107);
      __int32 v108 = *((_DWORD *)v86 + 2) + v107.i32[0];
      if (v31 - 1 == v96)
      {
        double v120 = v147.f64[0] + v82 * v95;
        uint64_t v121 = *a3;
        uint64_t v122 = *(void *)(a3[1] + 8);
        __int32 v153 = *((_DWORD *)v86 + 2) + v107.i32[0];
        if (**(double **)v121 != v120)
        {
          *(_DWORD *)v156 = 0;
          v155 = 0;
          v157[0] = 0;
          float v123 = v120;
          *(float *)buf = v123;
          *(void *)&v156[4] = v122;
          *(_DWORD *)&v156[12] = v108;
          float64x2_t v124 = *(void **)(v121 + 8);
          uint64_t v125 = **(void **)(v124[1] + 120);
          Phase::Geometry::GetNormals(v125, (float *)(*v124 + 48), (unsigned int *)&v153, 1, (uint64_t)&v155, 1, 1);
          Phase::Geometry::GetMaterials(v125, (unsigned int *)&v153, 1, v157, 1, 1);
          uint64_t v126 = *(void *)(v121 + 16);
          unint64_t v127 = *(void *)(v126 + 8);
          if (v127 >= *(void *)(v126 + 16))
          {
            uint64_t v129 = std::vector<Phase::Geometry::RaycastHit>::__push_back_slow_path<Phase::Geometry::RaycastHit const&>(*(uint64_t **)(v121 + 16), (uint64_t)buf);
          }
          else
          {
            *(_DWORD *)unint64_t v127 = *(_DWORD *)buf;
            *(void *)(v127 + 4) = v155;
            *(_DWORD *)(v127 + 12) = *(_DWORD *)v156;
            long long v128 = *(_OWORD *)&v156[4];
            *(void *)(v127 + 32) = v157[0];
            *(_OWORD *)(v127 + 16) = v128;
            uint64_t v129 = v127 + 40;
          }
          float64_t v130 = v147.f64[0] + v82 * v152.f64[0];
          *(void *)(v126 + 8) = v129;
          **(float64_t **)uint64_t v121 = v130;
        }
LABEL_24:
        if (v152.f64[0] >= 1.0) {
          return;
        }
        float64x2_t v131 = v152;
        int32x4_t v132 = (int32x4_t)vceqq_f64(*((float64x2_t *)v86 + 6), v152);
        int8x16_t v133 = *((int8x16_t *)v86 + 4);
        int32x4_t v134 = (int32x4_t)vceqq_f64(*((float64x2_t *)v86 + 5), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v152.f64[0], 0));
        int8x16_t v135 = (int8x16_t)vuzp1q_s32(v134, v132);
        *((int32x4_t *)v86 + 10) = v134;
        *((int32x4_t *)v86 + 11) = v132;
        int32x4_t v136 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v146, v131.f64[0])), (int32x4_t)vcvtq_s64_f64(vmulq_f64((float64x2_t)v145, v131)));
        *((int8x16_t *)v86 + 12) = v135;
        int32x4_t v97 = (int32x4_t)vbslq_s8(v135, v133, (int8x16_t)vaddq_s32(v136, v151));
        while (1)
        {
          uint32x4_t v137 = (uint32x4_t)vorrq_s8((int8x16_t)vcgeq_s32(v97, *((int32x4_t *)v86 + 2)), (int8x16_t)vcgtq_s32(*((int32x4_t *)v86 + 1), v97));
          v137.i32[3] = v137.i32[2];
          if ((vmaxvq_u32(v137) & 0x80000000) == 0) {
            break;
          }
          if (v96 < 2) {
            return;
          }
          --v96;
          v86 -= 224;
        }
        float64x2_t v89 = *((float64x2_t *)v86 + 6);
        v90.i64[0] = 0x8000000000000000;
        float64x2_t v138 = vaddq_f64(v89, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64((int64x2_t)*((unint64_t *)v86 + 22)), *((int8x16_t *)v86 + 9), (int8x16_t)v90));
        float64x2_t v139 = vaddq_f64(*((float64x2_t *)v86 + 5), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(*((int64x2_t *)v86 + 10)), *((int8x16_t *)v86 + 8), (int8x16_t)v144));
        *((int8x16_t *)v86 + 4) = vbslq_s8(*((int8x16_t *)v86 + 12), (int8x16_t)vaddq_s32(*((int32x4_t *)v86 + 7), *((int32x4_t *)v86 + 4)), *((int8x16_t *)v86 + 4));
        *((float64x2_t *)v86 + 5) = v139;
        *((float64x2_t *)v86 + 6) = v138;
        unint64_t v84 = *(void *)v86;
        double v95 = v152.f64[0];
      }
      else
      {
        int32x4_t v109 = (int32x4_t)vceqq_f64(v99, v152);
        int32x4_t v110 = (int32x4_t)vceqq_f64(v98, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v152.f64[0], 0));
        *((int32x4_t *)v86 + 10) = v110;
        *((int32x4_t *)v86 + 11) = v109;
        *((int32x4_t *)v86 + 12) = vuzp1q_s32(v110, v109);
        int32x4_t v111 = (unint64_t *)(*((void *)v86 + 27) + 16 * v108);
        unint64_t v84 = *v111;
        unint64_t v112 = v111[1];
        *((void *)v86 + 28) = v84;
        v86 += 224;
        ++v96;
        int32x4_t v113 = vdupq_n_s32(*((_DWORD *)v86 + 52));
        v109.i32[0] = *((_DWORD *)v86 + 52);
        unsigned long long v114 = *(_OWORD *)&vshlq_s32(v97, vnegq_s32(v113)) & __PAIR128__(0xFFFFFFFCFFFFFFFCLL, 0xFFFFFFFCFFFFFFFCLL);
        v115.i64[0] = 0x400000004;
        v115.i64[1] = 0x400000004;
        *((uint32x4_t *)v86 + 1) = vshlq_u32((uint32x4_t)v114, (uint32x4_t)v113);
        *((uint32x4_t *)v86 + 2) = vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)v114, v115), (uint32x4_t)v113);
        v113.i64[0] = -1;
        v113.i64[1] = -1;
        int32x4_t v116 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshlq_u32((uint32x4_t)v113, (uint32x4_t)v109), 0), (int8x16_t)v97), *((int32x4_t *)v86 + 3));
        int32x4_t v117 = vsubq_s32(v116, v151);
        v118.i64[0] = v117.i32[2];
        v118.i64[1] = v117.i32[3];
        float64x2_t v119 = vcvtq_f64_s64(v118);
        v118.i64[0] = v117.i32[0];
        v118.i64[1] = v117.i32[1];
        float64x2_t v89 = vmulq_f64((float64x2_t)v148, v119);
        *((float64x2_t *)v86 + 5) = vmulq_f64((float64x2_t)v149, vcvtq_f64_s64(v118));
        *((float64x2_t *)v86 + 6) = v89;
        *((int32x4_t *)v86 + 4) = v116;
        *((_DWORD *)v86 + 2) = v112;
      }
    }
  }
  int v140 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 416);
  if (os_log_type_enabled(v140, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v155 = "GeoRaycastUtility.hpp";
    *(_WORD *)v156 = 1024;
    *(_DWORD *)&v156[2] = 477;
    *(_WORD *)&v156[6] = 1024;
    *(_DWORD *)&v156[8] = v31;
    _os_log_impl(&dword_221E5E000, v140, OS_LOG_TYPE_ERROR, "%25s:%-5d Excessive level count (%d) in voxel tree: resolution has an invalid numerical value.", buf, 0x18u);
  }
}

void _ZN5Phase8Geometry7details21RaycastVsVoxelSubtreeILb0ERKZNS0_18RaycastVsVoxelTreeILb0ERZNS0_28MultiHitRaycastVsVoxelTreeV2ERNS0_11SystemStateERNS0_15SceneQueryBatchERNS0_10SceneQueryERNS0_20SceneQueryShapeStateEE3__0EEvS5_RNS0_12RaycastInputERKNS0_5ShapeEOT0_EUlT_SJ_T1_E_EEvS5_SF_RKNS0_12VoxelSubtreeESK_(float32x2_t *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9)
{
  uint64_t v180 = *MEMORY[0x263EF8340];
  float64x2_t v12 = vcvtq_f64_f32(*a1);
  v10.f64[0] = a1[1].f32[0];
  float64x2_t v13 = vcvtq_f64_f32(a1[2]);
  v9.f64[0] = a1[3].f32[0];
  __asm { FMOV            V16.2D, #1.0 }
  float64x2_t v19 = vminnmq_f64(vmaxnmq_f64(vdivq_f64(_Q16, v13), (float64x2_t)vdupq_n_s64(0xC1EFFFFFFFE00000)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL));
  float64x2_t v20 = vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vdivq_f64(_Q16, v9), (float64x2_t)xmmword_2220A5DE0), (float64x2_t)xmmword_2220A5DF0);
  v11.f64[0] = *(float *)(a2 + 8);
  a9.f64[0] = *(float *)(a2 + 20);
  float64x2_t v21 = vmulq_f64(v19, vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)a2), v12));
  unint64_t v22 = *(_OWORD *)&vmulq_f64(v20, vsubq_f64(v11, v10));
  float64x2_t v23 = vmulq_f64(v19, vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)(a2 + 12)), v12));
  *(void *)&v20.f64[0] = *(_OWORD *)&vmulq_f64(v20, vsubq_f64(a9, v10));
  float64x2_t v24 = vminnmq_f64(v21, v23);
  *(void *)&v25.f64[0] = *(_OWORD *)&vminnmq_f64((float64x2_t)v22, (float64x2_t)*(unint64_t *)&v20.f64[0]);
  v25.f64[1] = a1[1].f32[1];
  *(void *)&v26.f64[0] = *(_OWORD *)&vmaxnmq_f64((float64x2_t)v22, (float64x2_t)*(unint64_t *)&v20.f64[0]);
  v26.f64[1] = a1[3].f32[1];
  float64x2_t v28 = vmaxnmq_f64(v21, v23);
  double v27 = vpmaxq_f64(vmaxnmq_f64(v24, v25));
  v28.f64[0] = vpminq_f64(vminnmq_f64(v28, v26));
  if (v27 > v28.f64[0]) {
    return;
  }
  if (v27 < 0.0)
  {
    double v27 = 0.0;
    if (v28.f64[0] <= 0.0) {
      return;
    }
  }
  uint64_t v30 = *(void **)(**(void **)(a2 + 40) + 16 * *(void *)(a2 + 48));
  uint64_t v31 = v30[3];
  if (v31 == 1)
  {
    uint64_t v32 = *(double ***)a3;
    if (***(double ***)a3 != v27)
    {
      uint64_t v33 = *(void *)(*(void *)(a3 + 8) + 8);
      float v34 = v27;
      float64x2_t v35 = v32[2];
      uint64_t v36 = *(void *)v32[1];
      uint64_t v37 = (float *)*((void *)v35 + 1);
      unint64_t v38 = *((void *)v35 + 2);
      if ((unint64_t)v37 >= v38)
      {
        __int32 v153 = *(float **)v35;
        unint64_t v154 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v37 - *(void *)v35) >> 3);
        unint64_t v155 = v154 + 1;
        if (v154 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        float64x2_t v173 = v28;
        unint64_t v156 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v38 - (void)v153) >> 3);
        if (2 * v156 > v155) {
          unint64_t v155 = 2 * v156;
        }
        if (v156 >= 0x555555555555555) {
          unint64_t v157 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v157 = v155;
        }
        if (v157)
        {
          v158 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v35 + 2), v157);
          __int32 v153 = *(float **)v35;
          uint64_t v37 = (float *)*((void *)v35 + 1);
        }
        else
        {
          v158 = 0;
        }
        v159 = &v158[24 * v154];
        *(float *)v159 = v34;
        *((_DWORD *)v159 + 1) = 0;
        v160 = &v158[24 * v157];
        *((void *)v159 + 1) = v33;
        *((void *)v159 + 2) = v36;
        long long v39 = (float *)(v159 + 24);
        if (v37 != v153)
        {
          do
          {
            long long v161 = *(_OWORD *)(v37 - 6);
            *((void *)v159 - 1) = *((void *)v37 - 1);
            *(_OWORD *)(v159 - 24) = v161;
            v159 -= 24;
            v37 -= 6;
          }
          while (v37 != v153);
          __int32 v153 = *(float **)v35;
        }
        *(void *)float64x2_t v35 = v159;
        *((void *)v35 + 1) = v39;
        *((void *)v35 + 2) = v160;
        if (v153) {
          operator delete(v153);
        }
        v28.f64[0] = v173.f64[0];
      }
      else
      {
        *uint64_t v37 = v34;
        v37[1] = 0.0;
        long long v39 = v37 + 6;
        *((void *)v37 + 1) = v33;
        *((void *)v37 + 2) = v36;
      }
      *((void *)v35 + 1) = v39;
      *char *v32 = v28.f64[0];
    }
    return;
  }
  if ((int)v31 <= 32)
  {
    long long v169 = xmmword_2220A5DF0;
    float64x2_t v170 = (float64x2_t)xmmword_2220A5DE0;
    int8x16_t v166 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL);
    MEMORY[0x270FA5388](a1);
    size_t v41 = (char *)&v162 - v40;
    float64x2_t v172 = v43;
    float64x2_t v173 = v42;
    float64x2_t v171 = v44;
    float64x2_t v168 = v45;
    float64x2_t v167 = v46;
    float64x2_t v162 = v47;
    float64x2_t v163 = v48;
    float64x2_t v165 = v49;
    float64x2_t v164 = v50;
    bzero((char *)&v162 - v40, v40);
    double v52 = v172.f64[0];
    double v53 = v173.f64[0];
    float64x2_t v54 = (float32x2_t *)v30[1];
    v55.f64[0] = v54[3].f32[0];
    float64x2_t v56 = vdivq_f64(v171, vcvtq_f64_f32(v54[2]));
    float64x2_t v57 = vdivq_f64(v171, v55);
    v58.f64[0] = v167.f64[0];
    *(void *)&v58.f64[1] = v166.i64[0];
    v59.f64[0] = 1073741820.0;
    float64x2_t v60 = (float64x2_t)vdupq_n_s64(0x41CFFFFFFF800000uLL);
    int32x4_t v61 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64(vmaxnmq_f64(vmulq_f64(vsubq_f64(vmlaq_n_f64(v162, v58, v172.f64[0]), v165), v56), (float64x2_t)0), v171), v60));
    int32x4_t v62 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(vsubq_f64(vmlaq_f64(v163, v172, v168), v164), v57), (float64x2_t)0), (float64x2_t)xmmword_2220A4FA0), v59));
    int32x4_t v63 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64(vmaxnmq_f64(vmulq_f64(vsubq_f64(vmlaq_n_f64(v162, v58, v173.f64[0]), v165), v56), (float64x2_t)0), v171), v60));
    int32x4_t v64 = (int32x4_t)vcvtq_s64_f64(vmulq_f64(vminnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(vsubq_f64(vmlaq_f64(v163, v173, v168), v164), v57), (float64x2_t)0), (float64x2_t)xmmword_2220A4FA0), v59));
    int32x2_t v65 = vsub_s32(vmovn_s64((int64x2_t)v63), vmovn_s64((int64x2_t)v61));
    v66.i64[0] = v65.i32[0];
    v66.i64[1] = v65.i32[1];
    float64x2_t v67 = vcvtq_f64_s64(v66);
    int32x2_t v68 = vsub_s32(vmovn_s64((int64x2_t)v64), vmovn_s64((int64x2_t)v62));
    v66.i64[0] = v68.i32[0];
    v66.i64[1] = v68.i32[1];
    float64x2_t v69 = vcvtq_f64_s64(v66);
    int64x2_t v70 = vceqzq_f64(v67);
    int8x16_t v71 = vandq_s8(vandq_s8((int8x16_t)vdupq_laneq_s64(v70, 1), (int8x16_t)v70), (int8x16_t)vceqzq_f64(v69));
    if (v71.i64[0] < 0)
    {
      int8x16_t v71 = vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL);
      *(void *)&v56.f64[1] = v71.i64[0];
      float64x2_t v69 = vmulq_f64(vmulq_f64(v168, v57), v59);
      float64x2_t v67 = vmulq_f64(vmulq_f64(v167, v56), v60);
    }
    int32x4_t v72 = vuzp1q_s32(v61, v62);
    unint64_t v73 = vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL).u64[0];
    uint32x4_t v74 = (uint32x4_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vdivq_f64(v171, v69), v170);
    float64x2_t v75 = vminnmq_f64(vmaxnmq_f64(vdivq_f64(v171, v67), (float64x2_t)vdupq_n_s64(0xC1EFFFFFFFE00000)), (float64x2_t)vdupq_n_s64(0x41EFFFFFFFE00000uLL));
    float64x2_t v76 = vminnmq_f64((float64x2_t)v74.u64[0], (float64x2_t)v169);
    int v77 = v31 - 1;
    if ((int)v31 >= 1)
    {
      uint64_t v78 = 0;
      int8x16_t v79 = (int8x16_t)vcltzq_s32(vsubq_s32(vuzp1q_s32(v63, v64), v72));
      uint64_t v80 = v30[4];
      int32x4_t v81 = v54 + 8;
      int v82 = 30;
      do
      {
        int32x4_t v83 = &v41[v78];
        int8x16_t v84 = (int8x16_t)vdupq_n_s32(1 << v82);
        *((_DWORD *)v83 + 52) = v82;
        *((int8x16_t *)v83 + 3) = vorrq_s8(v84, v79);
        uint32x4_t v74 = (uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vdupq_n_s32(-(1 << v82)), v79), vbicq_s8(v84, v79));
        v85.i64[0] = v74.i32[2];
        v85.i64[1] = v74.i32[3];
        float64x2_t v86 = vmulq_f64(v76, vcvtq_f64_s64(v85));
        v85.i64[0] = v74.i32[0];
        v85.i64[1] = v74.i32[1];
        *((uint32x4_t *)v83 + 7) = v74;
        *((float64x2_t *)v83 + 8) = vmulq_f64(v75, vcvtq_f64_s64(v85));
        *((float64x2_t *)v83 + 9) = v86;
        *((void *)v83 + 27) = *(void *)(*(void *)(**(void **)&v81[-1] + 16 * *(void *)v81) + 8);
        v78 += 224;
        int32x4_t v81 = (float32x2_t *)((char *)v81 + v80);
        v82 -= 2;
      }
      while (224 * v31 != v78);
    }
    double v87 = v53 - v52;
    unsigned long long v88 = (unint64_t *)*((void *)v41 + 27);
    unint64_t v89 = *v88;
    unint64_t v90 = v88[1];
    *((void *)v41 + 28) = v89;
    int32x4_t v91 = v41 + 224;
    int32x4_t v92 = vdupq_n_s32(*((_DWORD *)v91 + 52));
    v74.i32[0] = *((_DWORD *)v91 + 52);
    unsigned long long v93 = *(_OWORD *)&vshlq_s32(v72, vnegq_s32(v92)) & __PAIR128__(0xFFFFFFFCFFFFFFFCLL, 0xFFFFFFFCFFFFFFFCLL);
    v94.i64[0] = 0x400000004;
    v94.i64[1] = 0x400000004;
    *((uint32x4_t *)v91 + 1) = vshlq_u32((uint32x4_t)v93, (uint32x4_t)v92);
    *((uint32x4_t *)v91 + 2) = vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)v93, v94), (uint32x4_t)v92);
    v95.i64[0] = -1;
    v95.i64[1] = -1;
    int32x4_t v96 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshlq_u32(v95, v74), 0), (int8x16_t)v72), *((int32x4_t *)v91 + 3));
    int32x4_t v97 = vsubq_s32(v96, v72);
    v98.i64[0] = v97.i32[2];
    v98.i64[1] = v97.i32[3];
    float64x2_t v99 = vcvtq_f64_s64(v98);
    v98.i64[0] = v97.i32[0];
    v98.i64[1] = v97.i32[1];
    *((float64x2_t *)v91 + 5) = vmulq_f64(v75, vcvtq_f64_s64(v98));
    *((float64x2_t *)v91 + 6) = vmulq_f64(v76, v99);
    *((int32x4_t *)v91 + 4) = v96;
    *((_DWORD *)v91 + 2) = v90;
    double v100 = 0.0;
    int v101 = 1;
    v102.i64[0] = 0x100000001;
    v102.i64[1] = 0x100000001;
    v103.i64[0] = 0x800000008;
    v103.i64[1] = 0x800000008;
    uint32x4_t v104 = (uint32x4_t)xmmword_2220A5E00;
    *(void *)&v67.f64[1] = v73;
    int8x16_t v105 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
    int32x4_t v106 = v72;
    while (1)
    {
      float64x2_t v107 = *((float64x2_t *)v91 + 5);
      float64x2_t v108 = *((float64x2_t *)v91 + 6);
      v51.f64[0] = fmin(fmin(v107.f64[0], v108.f64[0]), *((double *)v91 + 11));
      int32x4_t v109 = (const float *)(v91 + 208);
      int32x4_t v110 = (int32x4_t)vld1q_dup_f32(v109);
      int32x4_t v111 = vshlq_s32(v106, vnegq_s32(v110));
      int32x4_t v112 = (int32x4_t)vshlq_u32((uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vshlq_n_s32(v111, 2uLL), v103), vandq_s8((int8x16_t)v111, v102)), v104);
      unsigned __int8 v113 = vorrq_s8(vorrq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v112.i8, 1), (int8x16_t)vdupq_laneq_s32(v112, 2)), (int8x16_t)v112).u8[0];
      if (((v89 >> v113) & 1) == 0) {
        goto LABEL_38;
      }
      uint8x8_t v114 = (uint8x8_t)vcnt_s8((int8x8_t)(v89 & ~(-1 << v113)));
      v114.i16[0] = vaddlv_u8(v114);
      __int32 v115 = *((_DWORD *)v91 + 2) + v114.i32[0];
      if (v77 == v101)
      {
        double v126 = v52 + v87 * v100;
        unint64_t v127 = *(double ***)a3;
        if (***(double ***)a3 != v126)
        {
          float64_t v128 = *(double *)(*(void *)(a3 + 8) + 8);
          float v129 = v126;
          float64_t v130 = v127[2];
          uint64_t v131 = *(void *)v127[1];
          int32x4_t v132 = (float *)*((void *)v130 + 1);
          unint64_t v133 = *((void *)v130 + 2);
          if ((unint64_t)v132 >= v133)
          {
            int8x16_t v135 = *(float **)v130;
            unint64_t v136 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v132 - *(void *)v130) >> 3);
            unint64_t v137 = v136 + 1;
            if (v136 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            float64x2_t v165 = v51;
            int8x16_t v166 = v105;
            float64x2_t v167 = (float64x2_t)v104;
            float64x2_t v168 = v76;
            long long v169 = (__int128)v75;
            float64x2_t v170 = (float64x2_t)v72;
            float64x2_t v171 = v69;
            float64x2_t v173 = v67;
            unint64_t v138 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v133 - (void)v135) >> 3);
            if (2 * v138 > v137) {
              unint64_t v137 = 2 * v138;
            }
            if (v138 >= 0x555555555555555) {
              unint64_t v139 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v139 = v137;
            }
            if (v139)
            {
              v164.f64[0] = v128;
              int v140 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v130 + 2), v139);
              float64_t v128 = v164.f64[0];
              float64x2_t v141 = v140;
              int8x16_t v135 = *(float **)v130;
              int32x4_t v132 = (float *)*((void *)v130 + 1);
            }
            else
            {
              float64x2_t v141 = 0;
            }
            float64x2_t v142 = &v141[24 * v136];
            *(float *)float64x2_t v142 = v129;
            *((_DWORD *)v142 + 1) = v115;
            *((float64_t *)v142 + 1) = v128;
            *((void *)v142 + 2) = v131;
            float64x2_t v143 = v142;
            if (v132 != v135)
            {
              do
              {
                long long v144 = *(_OWORD *)(v132 - 6);
                *((void *)v143 - 1) = *((void *)v132 - 1);
                *(_OWORD *)(v143 - 24) = v144;
                v143 -= 24;
                v132 -= 6;
              }
              while (v132 != v135);
              int8x16_t v135 = *(float **)v130;
            }
            int32x4_t v134 = (float *)(v142 + 24);
            *(void *)float64_t v130 = v143;
            *((void *)v130 + 1) = v142 + 24;
            *((void *)v130 + 2) = &v141[24 * v139];
            if (v135) {
              operator delete(v135);
            }
            double v52 = v172.f64[0];
            float64x2_t v67 = v173;
            int32x4_t v72 = (int32x4_t)v170;
            float64x2_t v69 = v171;
            float64x2_t v76 = v168;
            float64x2_t v75 = (float64x2_t)v169;
            v94.i64[0] = 0x400000004;
            v94.i64[1] = 0x400000004;
            v95.i64[0] = -1;
            v95.i64[1] = -1;
            v102.i64[0] = 0x100000001;
            v102.i64[1] = 0x100000001;
            v103.i64[0] = 0x800000008;
            v103.i64[1] = 0x800000008;
            uint32x4_t v104 = (uint32x4_t)v167;
            int8x16_t v105 = v166;
            float64x2_t v51 = v165;
          }
          else
          {
            *int32x4_t v132 = v129;
            *((_DWORD *)v132 + 1) = v115;
            int32x4_t v134 = v132 + 6;
            *((float64_t *)v132 + 1) = v128;
            *((void *)v132 + 2) = v131;
          }
          *((void *)v130 + 1) = v134;
          **unint64_t v127 = v52 + v87 * v51.f64[0];
        }
LABEL_38:
        if (v51.f64[0] >= 1.0) {
          return;
        }
        int32x4_t v145 = (int32x4_t)vceqq_f64(*((float64x2_t *)v91 + 6), v51);
        int8x16_t v146 = *((int8x16_t *)v91 + 4);
        int32x4_t v147 = (int32x4_t)vceqq_f64(*((float64x2_t *)v91 + 5), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v51.f64[0], 0));
        int8x16_t v148 = (int8x16_t)vuzp1q_s32(v147, v145);
        *((int32x4_t *)v91 + 10) = v147;
        *((int32x4_t *)v91 + 11) = v145;
        *((int8x16_t *)v91 + 12) = v148;
        int32x4_t v106 = (int32x4_t)vbslq_s8(v148, v146, (int8x16_t)vaddq_s32(vuzp1q_s32((int32x4_t)vcvtq_s64_f64(vmulq_n_f64(v67, v51.f64[0])), (int32x4_t)vcvtq_s64_f64(vmulq_f64(v69, v51))), v72));
        while (1)
        {
          uint32x4_t v149 = (uint32x4_t)vorrq_s8((int8x16_t)vcgeq_s32(v106, *((int32x4_t *)v91 + 2)), (int8x16_t)vcgtq_s32(*((int32x4_t *)v91 + 1), v106));
          v149.i32[3] = v149.i32[2];
          if ((vmaxvq_u32(v149) & 0x80000000) == 0) {
            break;
          }
          if (v101 < 2) {
            return;
          }
          --v101;
          v91 -= 224;
        }
        v71.i64[0] = 0x8000000000000000;
        float64x2_t v150 = vaddq_f64(*((float64x2_t *)v91 + 6), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64((int64x2_t)*((unint64_t *)v91 + 22)), *((int8x16_t *)v91 + 9), v71));
        float64x2_t v151 = vaddq_f64(*((float64x2_t *)v91 + 5), (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(*((int64x2_t *)v91 + 10)), *((int8x16_t *)v91 + 8), v105));
        *((int8x16_t *)v91 + 4) = vbslq_s8(*((int8x16_t *)v91 + 12), (int8x16_t)vaddq_s32(*((int32x4_t *)v91 + 7), *((int32x4_t *)v91 + 4)), *((int8x16_t *)v91 + 4));
        *((float64x2_t *)v91 + 5) = v151;
        *((float64x2_t *)v91 + 6) = v150;
        unint64_t v89 = *(void *)v91;
        double v100 = v51.f64[0];
      }
      else
      {
        int32x4_t v116 = (int32x4_t)vceqq_f64(v108, v51);
        int32x4_t v117 = (int32x4_t)vceqq_f64(v107, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v51.f64[0], 0));
        *((int32x4_t *)v91 + 10) = v117;
        *((int32x4_t *)v91 + 11) = v116;
        *((int32x4_t *)v91 + 12) = vuzp1q_s32(v117, v116);
        int64x2_t v118 = (unint64_t *)(*((void *)v91 + 27) + 16 * v115);
        unint64_t v89 = *v118;
        unint64_t v119 = v118[1];
        *((void *)v91 + 28) = v89;
        v91 += 224;
        ++v101;
        int32x4_t v120 = vdupq_n_s32(*((_DWORD *)v91 + 52));
        v116.i32[0] = *((_DWORD *)v91 + 52);
        unsigned long long v121 = *(_OWORD *)&vshlq_s32(v106, vnegq_s32(v120)) & __PAIR128__(0xFFFFFFFCFFFFFFFCLL, 0xFFFFFFFCFFFFFFFCLL);
        *((uint32x4_t *)v91 + 1) = vshlq_u32((uint32x4_t)v121, (uint32x4_t)v120);
        *((uint32x4_t *)v91 + 2) = vshlq_u32((uint32x4_t)vaddq_s32((int32x4_t)v121, v94), (uint32x4_t)v120);
        int32x4_t v122 = vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vshlq_u32(v95, (uint32x4_t)v116), 0), (int8x16_t)v106), *((int32x4_t *)v91 + 3));
        int32x4_t v123 = vsubq_s32(v122, v72);
        v124.i64[0] = v123.i32[2];
        v124.i64[1] = v123.i32[3];
        float64x2_t v125 = vcvtq_f64_s64(v124);
        v124.i64[0] = v123.i32[0];
        v124.i64[1] = v123.i32[1];
        *((float64x2_t *)v91 + 5) = vmulq_f64(v75, vcvtq_f64_s64(v124));
        *((float64x2_t *)v91 + 6) = vmulq_f64(v76, v125);
        *((int32x4_t *)v91 + 4) = v122;
        *((_DWORD *)v91 + 2) = v119;
      }
    }
  }
  float64x2_t v152 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 416);
  if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    v175 = "GeoRaycastUtility.hpp";
    __int16 v176 = 1024;
    int v177 = 477;
    __int16 v178 = 1024;
    int v179 = v31;
    _os_log_impl(&dword_221E5E000, v152, OS_LOG_TYPE_ERROR, "%25s:%-5d Excessive level count (%d) in voxel tree: resolution has an invalid numerical value.", buf, 0x18u);
  }
}

void Phase::Geometry::IterateSceneQueryBatch(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 88)) {
    __assert_rtn("IterateSceneQueryBatch", "GeoSceneQueryFunctions.cpp", 22, "inSceneQueryFunctionTable.mTestScene");
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  Phase::Geometry::RunSceneQueriesOnRange(a1, a2, a3, 0, *(_DWORD *)(a2 + 96));
  atomic_store(3u, (unsigned int *)a2);
  atomic_store(2u, (unsigned int *)(a2 + 4));
  if (*(void *)(a2 + 48))
  {
    std::function<void ()(Phase::Geometry::SceneQueryBatch *)>::operator()(a2 + 24, a2);
  }
}

uint64_t std::function<void ()(Phase::Geometry::SceneQueryBatch *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void Phase::Geometry::IterateSceneQueryBatchAsync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 88)) {
    __assert_rtn("IterateBatchAsync", "GeoSceneQueryUtility.hpp", 85, "inSceneQueryFunctionTable.mTestScene");
  }
  unsigned int v6 = *(unsigned __int8 *)(a2 + 80);
  if (v6 <= 0xC0) {
    int v7 = v6 > 0x3F;
  }
  else {
    int v7 = 2;
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 1016) + 2416);
  std::string::basic_string[abi:ne180100]<0>(__p, "GeoBatch");
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v8 + 16))(&v29, v8, __p);
  long long v9 = v29;
  long long v29 = 0uLL;
  float64x2_t v10 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
    }
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)(v11 + 256) = &unk_26D4770C0;
  *(void *)(v11 + 264) = Phase::Geometry::CompleteSceneQueryBatch;
  *(void *)(v11 + 272) = a2;
  *(unsigned char *)(v11 + 383) = 1;
  atomic_store(1u, (unsigned __int8 *)(v11 + 40));
  uint64_t v12 = *(void *)(a2 + 8);
  *(_DWORD *)(v12 + 524) = v7;
  atomic_store(1u, (unsigned __int8 *)(v12 + 40));
  unsigned int v13 = *(_DWORD *)(a2 + 96);
  if (v13)
  {
    unsigned int v14 = 0;
    unsigned int v15 = v13 >> 4;
    int v16 = *(_DWORD *)(a2 + 96) & 0xF;
    do
    {
      BOOL v17 = v16 <= 0;
      if (v16 <= 0) {
        int v16 = 0;
      }
      else {
        --v16;
      }
      if (v17) {
        unsigned int v18 = v14 + v15;
      }
      else {
        unsigned int v18 = v14 + v15 + 1;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "GeoTestScene");
      (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)v8 + 16))(&v29, v8, __p);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v19 = v29;
      *(void *)(v29 + 256) = &unk_26D4770E8;
      *(void *)(v19 + 264) = Phase::Geometry::RunSceneQueriesOnRange;
      *(void *)(v19 + 272) = a1;
      *(void *)(v19 + 280) = a2;
      *(void *)(v19 + 288) = a3;
      *(_DWORD *)(v19 + 296) = v14;
      *(_DWORD *)(v19 + 300) = v18;
      *(unsigned char *)(v19 + 383) = 1;
      atomic_store(1u, (unsigned __int8 *)(v19 + 40));
      *(_DWORD *)(v19 + 524) = v7;
      atomic_store(1u, (unsigned __int8 *)(v19 + 40));
      float64x2_t v20 = *(std::__shared_weak_count **)(a2 + 16);
      uint64_t v25 = *(void *)(a2 + 8);
      float64x2_t v26 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v23 = v19;
      float64x2_t v24 = (std::__shared_weak_count *)*((void *)&v29 + 1);
      if (*((void *)&v29 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v29 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v8 + 24))(v8, &v25, &v23);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (*((void *)&v29 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
      }
      unsigned int v14 = v18;
    }
    while (v18 < *(_DWORD *)(a2 + 96));
  }
  float64x2_t v21 = *(void **)(a2 + 8);
  unint64_t v22 = *(std::__shared_weak_count **)(a2 + 16);
  __p[0] = v21;
  __p[1] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::RunJobAsync(v8, (uint64_t *)__p);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
}

void sub_221F6AA28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::CompleteSceneQueryBatch(uint64_t a1)
{
  int v1 = 1;
  atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 4), (unsigned int *)&v1, 2u);
  if (v1 != 1) {
    return;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unsigned int v4 = atomic_load((unsigned int *)a1);
  if (v4 == 2)
  {
    unsigned int v5 = 3;
  }
  else
  {
    if (v4 == 5) {
      goto LABEL_9;
    }
    unsigned int v5 = 5;
  }
  atomic_store(v5, (unsigned int *)a1);
LABEL_9:
  atomic_store(4u, (unsigned int *)(a1 + 4));
  if (*(void *)(a1 + 48))
  {
    std::function<void ()(Phase::Geometry::SceneQueryBatch *)>::operator()(a1 + 24, a1);
  }
}

void Phase::Command<128>::Invoker<void (*)(Phase::Geometry::SceneQueryBatch *),void,Phase::Geometry::SceneQueryBatch *>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<void (*)(Phase::Geometry::SceneQueryBatch *),void,Phase::Geometry::SceneQueryBatch *>::Call(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*(void *)(a1 + 16));
}

void Phase::Command<128>::Invoker<void (*)(Phase::Geometry::SystemState *,Phase::Geometry::SceneQueryBatch *,Phase::Geometry::SceneQueryFunctionTable const*,int,int),void,Phase::Geometry::SystemState *,Phase::Geometry::SceneQueryBatch *,Phase::Geometry::SceneQueryFunctionTable const*,int,int>::~Invoker()
{
}

uint64_t Phase::Command<128>::Invoker<void (*)(Phase::Geometry::SystemState *,Phase::Geometry::SceneQueryBatch *,Phase::Geometry::SceneQueryFunctionTable const*,int,int),void,Phase::Geometry::SystemState *,Phase::Geometry::SceneQueryBatch *,Phase::Geometry::SceneQueryFunctionTable const*,int,int>::Call(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

uint64_t Phase::Geometry::SceneQueryScheduler::RunQuery(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a3 + 64);
  uint64_t v4 = *(void *)(*(void *)result + 2296);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(*(void *)result + 2304) - v4) >> 3) <= v3) {
    __assert_rtn("GetTypeDef", "GeoSceneQueryTypeRegistry.cpp", 33, "IsValid(inQueryType)");
  }
  uint64_t v5 = v4 + 152 * v3;
  if (*(void *)(v5 + 32))
  {
    atomic_store(1u, (unsigned int *)a3);
    atomic_store(1u, (unsigned int *)(a3 + 4));
    uint64_t v6 = *(void *)(v5 + 32);
    if (!v6) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    int v7 = *(uint64_t (**)(void))(*(void *)v6 + 48);
    return v7();
  }
  else
  {
    atomic_store(5u, (unsigned int *)a3);
    atomic_store(4u, (unsigned int *)(a3 + 4));
    if (*(void *)(a3 + 48))
    {
      return std::function<void ()(Phase::Geometry::SceneQueryBatch *)>::operator()(a3 + 24, a3);
    }
  }
  return result;
}

void *Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(void *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4 = a1[1];
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - v4) >> 3) <= a2) {
    __assert_rtn("CustomizeType", "GeoSceneQueryTypeRegistry.cpp", 44, "IsValid(inQueryType)");
  }
  if (a1[4] <= (unint64_t)a3) {
    __assert_rtn("CustomizeType", "GeoSceneQueryTypeRegistry.cpp", 45, "inShapeType < mTestShapeTableEntryCount");
  }
  uint64_t v5 = (void *)(*(void *)(v4 + 152 * a2 + 104) + 32 * a3);

  return std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::operator=(v5, a4);
}

{
  uint64_t v4;
  void *v5;
  uint64_t vars8;

  uint64_t v4 = a1[1];
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - v4) >> 3) <= a2) {
    __assert_rtn("CustomizeType", "GeoSceneQueryTypeRegistry.cpp", 58, "IsValid(inQueryType)");
  }
  if (a1[4] <= (unint64_t)a3) {
    __assert_rtn("CustomizeType", "GeoSceneQueryTypeRegistry.cpp", 59, "inShapeType < mTestShapeTableEntryCount");
  }
  uint64_t v5 = (void *)(*(void *)(v4 + 152 * a2 + 128) + 32 * a3);

  return std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::operator=(v5, a4);
}

void *std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 16) - v3) >> 3) <= a2) {
    __assert_rtn("CustomizeType", "GeoSceneQueryTypeRegistry.cpp", 70, "IsValid(inQueryType)");
  }

  return std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::operator=((void *)(v3 + 152 * a2 + 72), a3);
}

void *std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (0x86BCA1AF286BCA1BLL * ((*(void *)(a1 + 16) - v4) >> 3) <= a2) {
    __assert_rtn("CustomizeType", "GeoSceneQueryTypeRegistry.cpp", 83, "IsValid(inQueryType)");
  }
  uint64_t v6 = v4 + 152 * a2;
  std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::operator=((void *)(v6 + 8), a3);

  return std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::operator=((void *)(v6 + 40), a4);
}

void *std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t Phase::Geometry::SceneQueryTypeRegistry::RegisterNewType(void *a1, uint64_t a2, uint64_t a3)
{
  v17[3] = *MEMORY[0x263EF8340];
  uint64_t v5 = a1 + 1;
  uint64_t v6 = (a1[2] - a1[1]) >> 3;
  uint64_t v7 = (678152731 * v6);
  v12[0] = 678152731 * v6;
  v12[1] = 678152731 * v6;
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::__value_func[abi:ne180100]((uint64_t)v13, a2);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::__value_func[abi:ne180100]((uint64_t)v14, a3);
  v15[3] = 0;
  std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::vector(v16, a1[4]);
  std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::vector(v17, a1[4]);
  unint64_t v8 = a1[2];
  if (v8 >= a1[3])
  {
    uint64_t Type = std::vector<Phase::Geometry::SceneQueryTypeDefinition>::__push_back_slow_path<Phase::Geometry::SceneQueryTypeDefinition>(v5, (uint64_t)v12);
  }
  else
  {
    std::allocator<Phase::Geometry::SceneQueryTypeDefinition>::construct[abi:ne180100]<Phase::Geometry::SceneQueryTypeDefinition,Phase::Geometry::SceneQueryTypeDefinition>((uint64_t)(a1 + 3), (void *)a1[2], (uint64_t)v12);
    uint64_t Type = v8 + 152;
  }
  a1[2] = Type;
  uint64_t v11 = (void **)v17;
  std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::__destroy_vector::operator()[abi:ne180100](&v11);
  uint64_t v11 = (void **)v16;
  std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__destroy_vector::operator()[abi:ne180100](&v11);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__value_func[abi:ne180100](v15);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](v13);
  return v7;
}

void sub_221F6B220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Phase::Geometry::SceneQueryTypeDefinition::~SceneQueryTypeDefinition((Phase::Geometry::SceneQueryTypeDefinition *)va);
  _Unwind_Resume(a1);
}

void Phase::Geometry::SceneQueryTypeDefinition::~SceneQueryTypeDefinition(Phase::Geometry::SceneQueryTypeDefinition *this)
{
  uint64_t v2 = (void *)((char *)this + 8);
  uint64_t v3 = (void **)((char *)this + 128);
  std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 104);
  std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__value_func[abi:ne180100]((void *)this + 9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100]((void *)this + 5);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](v2);
}

unint64_t Phase::Geometry::SceneQueryTypeRegistry::DeriveNewType(Phase::Geometry::SceneQueryTypeRegistry *this, unsigned int a2)
{
  v15[3] = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = (uint64_t *)((char *)this + 8);
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((*((void *)this + 2) - v2) >> 3);
  if (v4 <= a2) {
    __assert_rtn("DeriveNewType", "GeoSceneQueryTypeRegistry.cpp", 112, "IsValid(inBaseQueryType)");
  }
  v10[0] = a2;
  v10[1] = v4;
  Phase::Geometry::SceneQueryFunctionTable::SceneQueryFunctionTable(v11, (uint64_t *)(v2 + 152 * a2 + 8));
  unint64_t v6 = *((void *)this + 2);
  if (v6 >= *((void *)this + 3))
  {
    uint64_t Type = std::vector<Phase::Geometry::SceneQueryTypeDefinition>::__push_back_slow_path<Phase::Geometry::SceneQueryTypeDefinition>(v3, (uint64_t)v10);
  }
  else
  {
    std::allocator<Phase::Geometry::SceneQueryTypeDefinition>::construct[abi:ne180100]<Phase::Geometry::SceneQueryTypeDefinition,Phase::Geometry::SceneQueryTypeDefinition>((uint64_t)this + 24, *((void **)this + 2), (uint64_t)v10);
    uint64_t Type = v6 + 152;
  }
  *((void *)this + 2) = Type;
  long long v9 = (void **)v15;
  std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::__destroy_vector::operator()[abi:ne180100](&v9);
  long long v9 = (void **)&v14;
  std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__value_func[abi:ne180100](v13);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](v11);
  return v4;
}

void sub_221F6B430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  Phase::Geometry::SceneQueryTypeDefinition::~SceneQueryTypeDefinition((Phase::Geometry::SceneQueryTypeDefinition *)va);
  _Unwind_Resume(a1);
}

void std::vector<Phase::Geometry::SceneQueryTypeDefinition>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0x86BCA1AF286BCA1BLL * ((v3 - *a1) >> 3);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<Phase::Geometry::SceneQueryTypeDefinition>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 152 * a2;
    while (v3 != v7)
    {
      v3 -= 152;
      std::allocator<Phase::Geometry::SceneQueryTypeDefinition>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void *Phase::Geometry::SceneQueryTypeRegistry::SetTestShapeTableEntryCount(void *this, unint64_t a2)
{
  this[4] = a2;
  uint64_t v2 = (void *)this[1];
  uint64_t v3 = (void *)this[2];
  if (v2 != v3)
  {
    BOOL v5 = v2 + 13;
    do
    {
      if (a2 != (uint64_t)(v5[1] - *v5) >> 5) {
        std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::resize((uint64_t)v5, a2);
      }
      this = v5 + 3;
      if (a2 != (uint64_t)(v5[4] - v5[3]) >> 5) {
        this = std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::resize((uint64_t)this, a2);
      }
      unint64_t v6 = v5 + 6;
      v5 += 19;
    }
    while (v6 != v3);
  }
  return this;
}

void *std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t result = *(void **)(a1 + 8);
  unint64_t v4 = ((uint64_t)result - *(void *)a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *(void *)a1 + 32 * a2;
      while (result != (void *)v6)
        uint64_t result = std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](result - 4);
      *(void *)(a1 + 8) = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return (void *)std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__append((char **)a1, v5);
  }
  return result;
}

void *std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::resize(uint64_t a1, unint64_t a2)
{
  uint64_t result = *(void **)(a1 + 8);
  unint64_t v4 = ((uint64_t)result - *(void *)a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *(void *)a1 + 32 * a2;
      while (result != (void *)v6)
        uint64_t result = std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::~__value_func[abi:ne180100](result - 4);
      *(void *)(a1 + 8) = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    return (void *)std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::__append((char **)a1, v5);
  }
  return result;
}

void std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        unint64_t v4 = std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::~__value_func[abi:ne180100](v4 - 4);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *Phase::Geometry::SceneQueryFunctionTable::SceneQueryFunctionTable(void *a1, uint64_t *a2)
{
  uint64_t v4 = std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::__value_func[abi:ne180100]((uint64_t)a1, (uint64_t)a2);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::__value_func[abi:ne180100](v4 + 32, (uint64_t)(a2 + 4));
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::__value_func[abi:ne180100]((uint64_t)(a1 + 8), (uint64_t)(a2 + 8));
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__init_with_size[abi:ne180100]<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>*,std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>*>(a1 + 12, a2[12], a2[13], (a2[13] - a2[12]) >> 5);
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::__init_with_size[abi:ne180100]<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>*,std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>*>(a1 + 15, a2[15], a2[16], (a2[16] - a2[15]) >> 5);
  return a1;
}

void sub_221F6B824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__value_func[abi:ne180100](v4);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__init_with_size[abi:ne180100]<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>*,std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>,std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>*,std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>*,std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_221F6B96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>,std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>*,std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>*,std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::__value_func[abi:ne180100](a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_221F6BA48(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100]((void *)(v4 + v2));
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    unint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](v4 - 4);
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::__init_with_size[abi:ne180100]<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>*,std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>,std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>*,std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>*,std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_221F6BC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>,std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>*,std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>*,std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::__value_func[abi:ne180100](a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_221F6BCF4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 32;
    do
    {
      std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::~__value_func[abi:ne180100]((void *)(v4 + v2));
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_221F6C010(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_221F6C27C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_221F6C4E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    unint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_221F6C754(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 32 * a2;
    uint64_t v6 = 32 * a2;
    uint64_t v7 = (void *)(v4 + 24);
    do
    {
      *uint64_t v7 = 0;
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_221F6C850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 32 * a2;
    uint64_t v6 = 32 * a2;
    uint64_t v7 = (void *)(v4 + 24);
    do
    {
      *uint64_t v7 = 0;
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_221F6C8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t std::vector<Phase::Geometry::SceneQueryTypeDefinition>::__push_back_slow_path<Phase::Geometry::SceneQueryTypeDefinition>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x1AF286BCA1AF286) {
    std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__throw_length_error[abi:ne180100]();
  }
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 3);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 3) >= 0xD79435E50D7943) {
    unint64_t v6 = 0x1AF286BCA1AF286;
  }
  else {
    unint64_t v6 = v4;
  }
  uint64_t v14 = a1 + 2;
  if (v6) {
    uint64_t Type = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Geometry::SceneQueryTypeDefinition>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t Type = 0;
  }
  uint64_t v10 = Type;
  uint64_t v11 = &Type[152 * v3];
  unsigned int v13 = &Type[152 * v6];
  std::allocator<Phase::Geometry::SceneQueryTypeDefinition>::construct[abi:ne180100]<Phase::Geometry::SceneQueryTypeDefinition,Phase::Geometry::SceneQueryTypeDefinition>((uint64_t)(a1 + 2), v11, a2);
  uint64_t v12 = v11 + 152;
  std::vector<Phase::Geometry::SceneQueryTypeDefinition>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<Phase::Geometry::SceneQueryTypeDefinition>::~__split_buffer(&v10);
  return v8;
}

void sub_221F6CB10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Phase::Geometry::SceneQueryTypeDefinition>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<Phase::Geometry::SceneQueryTypeDefinition>::construct[abi:ne180100]<Phase::Geometry::SceneQueryTypeDefinition,Phase::Geometry::SceneQueryTypeDefinition>(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = *(void *)a3;
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a3 + 8);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 5), a3 + 40);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::__value_func[abi:ne180100]((uint64_t)(a2 + 9), a3 + 72);
  a2[13] = 0;
  a2[14] = 0;
  a2[15] = 0;
  *(_OWORD *)(a2 + 13) = *(_OWORD *)(a3 + 104);
  a2[15] = *(void *)(a3 + 120);
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 112) = 0;
  *(void *)(a3 + 120) = 0;
  a2[16] = 0;
  a2[17] = 0;
  a2[18] = 0;
  __n128 result = *(__n128 *)(a3 + 128);
  *((__n128 *)a2 + 8) = result;
  a2[18] = *(void *)(a3 + 144);
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  return result;
}

void std::vector<Phase::Geometry::SceneQueryTypeDefinition>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v6 = (void *)a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 19;
      v4 -= 152;
      std::allocator<Phase::Geometry::SceneQueryTypeDefinition>::construct[abi:ne180100]<Phase::Geometry::SceneQueryTypeDefinition,Phase::Geometry::SceneQueryTypeDefinition>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Geometry::SceneQueryTypeDefinition>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1AF286BCA1AF287) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(152 * a2);
}

void *std::allocator<Phase::Geometry::SceneQueryTypeDefinition>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 8);
  uint64_t v5 = (void **)(a2 + 128);
  std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v5 = (void **)(a2 + 104);
  std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__value_func[abi:ne180100]((void *)(a2 + 72));
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100]((void *)(a2 + 40));
  return std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](v3);
}

void **std::__split_buffer<Phase::Geometry::SceneQueryTypeDefinition>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<Phase::Geometry::SceneQueryTypeDefinition>::clear[abi:ne180100](void *result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  if (v1 != v2)
  {
    unint64_t v3 = result;
    do
    {
      uint64_t v4 = v3[4];
      v3[2] = v1 - 152;
      __n128 result = std::allocator<Phase::Geometry::SceneQueryTypeDefinition>::destroy[abi:ne180100](v4, v1 - 152);
      uint64_t v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

void std::vector<Phase::Geometry::SceneQueryTypeDefinition>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0x86BCA1AF286BCA1BLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v13 = 152 * ((152 * a2 - 152) / 0x98) + 152;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x86BCA1AF286BCA1BLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1AF286BCA1AF286) {
      std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x86BCA1AF286BCA1BLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xD79435E50D7943) {
      unint64_t v11 = 0x1AF286BCA1AF286;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t Type = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Geometry::SceneQueryTypeDefinition>>(v4, v11);
    }
    else {
      uint64_t Type = 0;
    }
    unsigned int v15 = Type;
    int v16 = &Type[152 * v8];
    unsigned int v18 = &Type[152 * v11];
    size_t v14 = 152 * ((152 * a2 - 152) / 0x98) + 152;
    bzero(v16, v14);
    BOOL v17 = &v16[v14];
    std::vector<Phase::Geometry::SceneQueryTypeDefinition>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<Phase::Geometry::SceneQueryTypeDefinition>::~__split_buffer(&v15);
  }
}

void sub_221F6D014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Phase::Geometry::SceneQueryTypeDefinition>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (uint64_t)&v6[-v7] >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      unsigned int v15 = (void *)(v7 + 24);
      v7 += 32 * a2;
      do
      {
        *unsigned int v15 = 0;
        v15 += 4;
        v14 -= 32;
      }
      while (v14);
    }
    a1[1] = (char *)v7;
  }
  else
  {
    uint64_t v8 = v7 - (void)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v32 = result;
    if (v12) {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>(result, v12);
    }
    else {
      size_t v13 = 0;
    }
    int v16 = &v13[32 * v10];
    long long v29 = v13;
    v30.i64[0] = (uint64_t)v16;
    uint64_t v31 = &v13[32 * v12];
    uint64_t v17 = 32 * a2;
    unsigned int v18 = v16 + 24;
    uint64_t v19 = &v16[32 * a2];
    do
    {
      *unsigned int v18 = 0;
      v18 += 4;
      v17 -= 32;
    }
    while (v17);
    v30.i64[1] = (uint64_t)&v16[32 * a2];
    float64x2_t v21 = *a1;
    unint64_t v20 = (unint64_t)a1[1];
    if ((char *)v20 != *a1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = v16;
      while (1)
      {
        uint64_t v24 = v20 + v22 - 8;
        uint64_t v25 = *(void *)v24;
        if (*(void *)v24)
        {
          float64x2_t v26 = &v16[v22];
          if (v20 + v22 - 32 == v25)
          {
            *((void *)v26 - 1) = v26 - 32;
            (*(void (**)(void))(**(void **)v24 + 24))();
            goto LABEL_25;
          }
          *((void *)v26 - 1) = v25;
        }
        else
        {
          uint64_t v24 = (uint64_t)(v23 - 8);
        }
        *(void *)uint64_t v24 = 0;
LABEL_25:
        v23 -= 32;
        v22 -= 32;
        if ((char *)(v20 + v22) == v21)
        {
          int64x2_t v27 = *(int64x2_t *)a1;
          uint64_t v19 = (char *)v30.i64[1];
          v16 += v22;
          goto LABEL_28;
        }
      }
    }
    int64x2_t v27 = vdupq_n_s64(v20);
LABEL_28:
    *a1 = v16;
    a1[1] = v19;
    int64x2_t v30 = v27;
    char v28 = a1[2];
    a1[2] = v31;
    uint64_t v31 = v28;
    long long v29 = (char *)v27.i64[0];
    return std::__split_buffer<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::~__split_buffer((uint64_t)&v29);
  }
  return result;
}

uint64_t std::__split_buffer<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(result - 8);
  if (a2 <= (uint64_t)&v6[-v7] >> 5)
  {
    if (a2)
    {
      uint64_t v14 = 32 * a2;
      unsigned int v15 = (void *)(v7 + 24);
      v7 += 32 * a2;
      do
      {
        *unsigned int v15 = 0;
        v15 += 4;
        v14 -= 32;
      }
      while (v14);
    }
    a1[1] = (char *)v7;
  }
  else
  {
    uint64_t v8 = v7 - (void)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v32 = result;
    if (v12) {
      size_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>(result, v12);
    }
    else {
      size_t v13 = 0;
    }
    int v16 = &v13[32 * v10];
    long long v29 = v13;
    v30.i64[0] = (uint64_t)v16;
    uint64_t v31 = &v13[32 * v12];
    uint64_t v17 = 32 * a2;
    unsigned int v18 = v16 + 24;
    uint64_t v19 = &v16[32 * a2];
    do
    {
      *unsigned int v18 = 0;
      v18 += 4;
      v17 -= 32;
    }
    while (v17);
    v30.i64[1] = (uint64_t)&v16[32 * a2];
    float64x2_t v21 = *a1;
    unint64_t v20 = (unint64_t)a1[1];
    if ((char *)v20 != *a1)
    {
      uint64_t v22 = 0;
      uint64_t v23 = v16;
      while (1)
      {
        uint64_t v24 = v20 + v22 - 8;
        uint64_t v25 = *(void *)v24;
        if (*(void *)v24)
        {
          float64x2_t v26 = &v16[v22];
          if (v20 + v22 - 32 == v25)
          {
            *((void *)v26 - 1) = v26 - 32;
            (*(void (**)(void))(**(void **)v24 + 24))();
            goto LABEL_25;
          }
          *((void *)v26 - 1) = v25;
        }
        else
        {
          uint64_t v24 = (uint64_t)(v23 - 8);
        }
        *(void *)uint64_t v24 = 0;
LABEL_25:
        v23 -= 32;
        v22 -= 32;
        if ((char *)(v20 + v22) == v21)
        {
          int64x2_t v27 = *(int64x2_t *)a1;
          uint64_t v19 = (char *)v30.i64[1];
          v16 += v22;
          goto LABEL_28;
        }
      }
    }
    int64x2_t v27 = vdupq_n_s64(v20);
LABEL_28:
    *a1 = v16;
    a1[1] = v19;
    int64x2_t v30 = v27;
    char v28 = a1[2];
    a1[2] = v31;
    uint64_t v31 = v28;
    long long v29 = (char *)v27.i64[0];
    return std::__split_buffer<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::~__split_buffer((uint64_t)&v29);
  }
  return result;
}

uint64_t std::__split_buffer<std::function<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void Phase::Geometry::RunSceneQueriesOnRange(Phase::Logger *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t Instance = Phase::Logger::GetInstance(a1);
  uint64_t v11 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 416));
  unint64_t v12 = (Phase::Logger *)Phase::Logger::GetInstance(v11);
  if (*((unsigned char *)v12 + 424))
  {
    uint64_t v13 = Phase::Logger::GetInstance(v12);
    if ((unint64_t)v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v14 = **(NSObject ***)(v13 + 416);
      if (os_signpost_enabled(v14))
      {
        *(_DWORD *)buf = 67109632;
        int v25 = a5 - a4;
        __int16 v26 = 1024;
        unsigned int v27 = a4;
        __int16 v28 = 1024;
        int v29 = a5;
        _os_signpost_emit_with_name_impl(&dword_221E5E000, v14, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v11, "Phase_Scene_Queries_Range", "%d rays, Run Scene Queries on Range: %d -> %d", buf, 0x14u);
      }
    }
  }
  atomic_store(2u, (unsigned int *)a2);
  uint64_t v15 = *(void *)(*(void *)(a3 + 120) + 120);
  if (v15)
  {
    int v23 = a5;
    *(_DWORD *)buf = a4;
    uint64_t v15 = (*(uint64_t (**)(uint64_t, Phase::Logger *, uint64_t, uint8_t *, int *))(*(void *)v15 + 48))(v15, a1, a2, buf, &v23);
    uint8_t v16 = v15 ^ 1;
  }
  else
  {
    uint8_t v16 = 1;
  }
  if (a5 > (int)a4 && (*((_DWORD *)a1 + 242) & *(_DWORD *)(a2 + 72)) != 0)
  {
    do
    {
      if (*(_DWORD *)(a2 + 96) <= a4) {
        __assert_rtn("Get", "GeoSceneQuery.hpp", 115, "inIndex < inBatch.mCount");
      }
      uint64_t v17 = *(void *)(a2 + 88);
      int v18 = *(_DWORD *)(a2 + 100);
      uint64_t v19 = *(void *)(a3 + 88);
      buf[0] = v16;
      if (!v19) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      uint64_t v15 = (*(uint64_t (**)(uint64_t, Phase::Logger *, uint64_t, uint64_t, uint64_t, uint8_t *))(*(void *)v19 + 48))(v19, a1, a2, v17 + v18 * a4++, a3 + 96, buf);
    }
    while (a5 != a4);
  }
  unint64_t v20 = (Phase::Logger *)Phase::Logger::GetInstance((Phase::Logger *)v15);
  if (*((unsigned char *)v20 + 424))
  {
    uint64_t v21 = Phase::Logger::GetInstance(v20);
    if ((unint64_t)v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v22 = **(NSObject ***)(v21 + 416);
      if (os_signpost_enabled(v22))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_221E5E000, v22, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v11, "Phase_Scene_Queries_Range", (const char *)&unk_222112ABB, buf, 2u);
      }
    }
  }
}

void Phase::Geometry::SceneState::Update(std::__shared_weak_count **this)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  uint64_t v2 = *this;
  uint64_t v3 = (*this)[101].__vftable;
  if ((*this)[94].__vftable == (std::__shared_weak_count_vtbl *)-1) {
    v2[94].__vftable = v3;
  }
  if (v2[94].__shared_owners_ == -1) {
    v2[94].__shared_owners_ = (uint64_t)v3;
  }
  if (v2[94].__shared_weak_owners_ == -1) {
    v2[94].__shared_weak_owners_ = (uint64_t)v3;
  }
  uint64_t v4 = this[26];
  this[25] = 0;
  this[26] = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *((_DWORD *)this + 54) = 0;
  uint64_t v82 = 0;
  int32x4_t v83 = 0;
  unsigned int v84 = 0;
  uint64_t v85 = 0xFFFFFFFFLL;
  std::__shared_mutex_base::__shared_mutex_base(&v86);
  uint64_t v5 = *this;
  uint64_t shared_weak_owners = (*this)[49].__shared_weak_owners_;
  Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::Resize(&v82, v5[42].__vftable);
  uint64_t v88 = 0;
  unint64_t v89 = 0;
  unsigned int v90 = 0;
  uint64_t v91 = 0xFFFFFFFFLL;
  std::__shared_mutex_base::__shared_mutex_base(&v92);
  uint64_t v6 = *this;
  unsigned long long v93 = (*this)[60].__vftable;
  Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::Resize(&v88, v6[52].__shared_owners_);
  std::vector<Phase::Geometry::MpsCpuSceneDescriptor>::__clear[abi:ne180100]((uint64_t *)this + 33);
  this[31] = 0;
  int64x2_t v70 = this + 31;
  this[32] = 0;
  uint64_t v7 = *this;
  std::vector<Phase::Geometry::MpsCpuSceneDescriptor>::__clear[abi:ne180100]((uint64_t *)this + 33);
  uint64_t v8 = v7[60].__shared_weak_owners_;
  if (LODWORD(v7[52].__shared_owners_) <= v8
    || (p_uint64_t shared_weak_owners = &v7[51].__shared_weak_owners_,
        uint64_t v9 = v7[51].__shared_weak_owners_ + 24 * v8,
        *(_DWORD *)(v9 + 20) != HIDWORD(v8))
    || (uint64_t v10 = *(void *)v9) == 0)
  {
    __assert_rtn("UpdateAndCopyScene", "GeoSceneState.cpp", 36, "nullptr != pRootPtr && nullptr != pRootPtr->get()");
  }
  int8x16_t v71 = (Phase::Geometry::SceneState *)this;
  int32x4_t v72 = (uint64_t *)(this + 33);
  uint64_t v11 = (char *)operator new(0x18uLL);
  unint64_t v12 = v11 + 24;
  *(void *)uint64_t v11 = v10;
  *((void *)v11 + 1) = 0;
  v11[16] = 0;
  Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::ForceSet(v88, v90, v7[60].__shared_weak_owners_, *(void *)v9, *(void *)(v9 + 8));
  v7[93].__shared_weak_owners_ = 0;
  uint64_t v13 = v7[52].__vftable;
  if (v13) {
    BOOL v14 = (uint64_t)v13->~__shared_weak_count_0 < 1;
  }
  else {
    BOOL v14 = 1;
  }
  char v74 = v14;
  unint64_t v73 = v11 + 24;
  uint64_t v15 = v11 + 24;
  do
  {
    uint64_t v17 = (float32x2_t *)*((void *)v15 - 3);
    unint64_t v16 = *((void *)v15 - 2);
    float32x2_t v18 = v17[12];
    if (v16 >= (uint64_t)(*(void *)&v17[13] - *(void *)&v18) >> 3)
    {
      uint64_t v30 = v15 - 24;
LABEL_33:
      uint64_t v15 = v30;
      goto LABEL_35;
    }
    int v19 = *(v15 - 8);
    uint64_t v20 = *(void *)(*(void *)&v18 + 8 * v16);
    *((void *)v15 - 2) = v16 + 1;
    if (LODWORD(v7[52].__shared_owners_) > v20
      && (uint64_t v21 = *p_shared_weak_owners + 24 * v20, *(_DWORD *)(v21 + 20) == HIDWORD(v20)))
    {
      uint64_t v22 = *(void *)v21;
      int v79 = *(unsigned __int8 *)(*(void *)v21 + 80) | v19;
      uint64_t v78 = v11;
      if (v79)
      {
        if ((v74 & 1) == 0 || (uint64_t v23 = *(void *)(v21 + 8)) != 0 && *(uint64_t *)(v23 + 8) >= 1)
        {
          uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::GetUniqueSlot((uint64_t)p_shared_weak_owners, v20);
          uint64_t v21 = UniqueSlot;
          if (UniqueSlot)
          {
            uint64_t v25 = *(void *)(UniqueSlot + 8);
            if (v25)
            {
              if (*(uint64_t *)(v25 + 8) >= 1)
              {
                if (!v7[60].__vftable) {
                  std::terminate();
                }
                Phase::Geometry::EntityFactory::Create(*(_DWORD **)UniqueSlot, v81);
                long long v26 = v81[0];
                v81[0] = 0uLL;
                unsigned int v27 = *(std::__shared_weak_count **)(v21 + 8);
                *(_OWORD *)uint64_t v21 = v26;
                if (v27)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
                  if (*((void *)&v81[0] + 1)) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v81[0] + 1));
                  }
                }
              }
            }
          }
          uint64_t v22 = *(void *)v21;
        }
        Phase::operator*<float>(v17 + 6, (float *)(v22 + 16), (uint64_t)v81);
        long long v28 = v81[1];
        *(_OWORD *)(v22 + 48) = v81[0];
        *(_OWORD *)(v22 + 64) = v28;
        *(unsigned char *)(v22 + 80) = 0;
        uint64_t v29 = *(void *)v21;
        char v74 = 1;
      }
      else
      {
        uint64_t v29 = *(void *)v21;
      }
      uint64_t v76 = v20;
      int v77 = (void *)v21;
      Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::ForceSet(v88, v90, v20, v29, *(void *)(v21 + 8));
      uint64_t v31 = *(uint64_t **)(v22 + 120);
      for (uint64_t i = *(uint64_t **)(v22 + 128); v31 != i; ++v31)
      {
        uint64_t v33 = *v31;
        if (LODWORD(v7[42].__vftable) > *v31)
        {
          unsigned int v34 = *v31;
          uint64_t v35 = v7[41].__shared_owners_ + 24 * v33;
          int v36 = *(_DWORD *)(v35 + 20);
          if (v36 == HIDWORD(v33))
          {
            uint64_t v37 = *(void *)v35;
            if (*(void *)v35)
            {
              if (v84 > v33)
              {
                uint64_t v38 = v82;
                uint64_t v39 = *(void *)(v35 + 8);
                if (v39) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
                }
                size_t v40 = (void *)(v38 + 24 * v34);
                size_t v41 = (std::__shared_weak_count *)v40[1];
                *size_t v40 = v37;
                v40[1] = v39;
                if (v41) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
                }
                *(_DWORD *)(v38 + 24 * v34 + 20) = v36;
                uint64_t v37 = *(void *)v35;
              }
              if (*(_DWORD *)v22 == 4)
              {
                uint64_t v42 = *(void *)(v37 + 16) & *(void *)(v22 + 144);
                if (*(_DWORD *)v37 == 3)
                {
                  unint64_t v75 = v75 & 0xFFFFFFFFFFFFFF00 | *(unsigned __int8 *)(v22 + 156);
                  uint64_t v43 = Phase::Geometry::GetOrAddMpsCpuSceneDescriptor(v72, *(void *)(v37 + 16) & *(void *)(v22 + 144), v75);
                  *(unsigned char *)(v43 + 40) |= v79;
                  *((void *)v71 + 32) |= v42;
                  float64x2_t v44 = (_DWORD *)*v77;
                  unint64_t v45 = *(void *)(v43 + 16);
                  float64x2_t v46 = *(_DWORD **)(v43 + 8);
                  if ((unint64_t)v46 >= v45)
                  {
                    uint64_t v48 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v46 - *(void *)v43) >> 3);
                    unint64_t v49 = v48 + 1;
                    if ((unint64_t)(v48 + 1) > 0x492492492492492) {
                      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v50 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v45 - *(void *)v43) >> 3);
                    if (2 * v50 > v49) {
                      unint64_t v49 = 2 * v50;
                    }
                    if (v50 >= 0x249249249249249) {
                      unint64_t v51 = 0x492492492492492;
                    }
                    else {
                      unint64_t v51 = v49;
                    }
                    if (v51)
                    {
                      double v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::EntityShapeTemplate>>(v43 + 16, v51);
                      float64x2_t v46 = *(_DWORD **)(v43 + 8);
                    }
                    else
                    {
                      double v52 = 0;
                    }
                    double v53 = &v52[56 * v48];
                    *(_DWORD *)double v53 = v44[12];
                    *((_DWORD *)v53 + 1) = v44[13];
                    *((_DWORD *)v53 + 2) = v44[14];
                    *((_DWORD *)v53 + 3) = v44[15];
                    *((_DWORD *)v53 + 4) = v44[16];
                    *((_DWORD *)v53 + 5) = v44[17];
                    *((_DWORD *)v53 + 6) = v44[18];
                    *((_DWORD *)v53 + 7) = v44[19];
                    *((void *)v53 + 4) = v76;
                    *((void *)v53 + 5) = *v31;
                    *((void *)v53 + 6) = v37;
                    float64x2_t v54 = *(_DWORD **)v43;
                    if (v46 == *(_DWORD **)v43)
                    {
                      float64x2_t v57 = &v52[56 * v48];
                    }
                    else
                    {
                      uint64_t v55 = 0;
                      do
                      {
                        float64x2_t v56 = &v53[v55 * 4];
                        *((_DWORD *)v56 - 14) = v46[v55 - 14];
                        *((_DWORD *)v56 - 13) = v46[v55 - 13];
                        *((_DWORD *)v56 - 12) = v46[v55 - 12];
                        *((_DWORD *)v56 - 11) = v46[v55 - 11];
                        *((_DWORD *)v56 - 10) = v46[v55 - 10];
                        *((_DWORD *)v56 - 9) = v46[v55 - 9];
                        *((_DWORD *)v56 - 8) = v46[v55 - 8];
                        *((_DWORD *)v56 - 7) = v46[v55 - 7];
                        *((void *)v56 - 3) = *(void *)&v46[v55 - 6];
                        *((_OWORD *)v56 - 1) = *(_OWORD *)&v46[v55 - 4];
                        v55 -= 14;
                      }
                      while (&v46[v55] != v54);
                      float64x2_t v46 = *(_DWORD **)v43;
                      float64x2_t v57 = &v53[v55 * 4];
                    }
                    float64x2_t v47 = v53 + 56;
                    *(void *)uint64_t v43 = v57;
                    *(void *)(v43 + 8) = v53 + 56;
                    *(void *)(v43 + 16) = &v52[56 * v51];
                    if (v46) {
                      operator delete(v46);
                    }
                  }
                  else
                  {
                    *float64x2_t v46 = v44[12];
                    v46[1] = v44[13];
                    uint64_t v46[2] = v44[14];
                    v46[3] = v44[15];
                    v46[4] = v44[16];
                    v46[5] = v44[17];
                    v46[6] = v44[18];
                    v46[7] = v44[19];
                    *((void *)v46 + 4) = v76;
                    *((void *)v46 + 5) = *v31;
                    *((void *)v46 + 6) = v37;
                    float64x2_t v47 = v46 + 14;
                  }
                  *(void *)(v43 + 8) = v47;
                }
                else
                {
                  *v70 |= v42;
                }
              }
              v7[93].__shared_weak_owners_ += *(void *)(v37 + 160);
            }
          }
        }
      }
      if (*(void *)(v22 + 104) != *(void *)(v22 + 96))
      {
        uint64_t v11 = v78;
        if (v12 >= v73)
        {
          unint64_t v58 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v78) >> 3) + 1;
          if (v58 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * ((v73 - v78) >> 3) > v58) {
            unint64_t v58 = 0x5555555555555556 * ((v73 - v78) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v73 - v78) >> 3) >= 0x555555555555555) {
            unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v59 = v58;
          }
          if (v59)
          {
            if (v59 > 0xAAAAAAAAAAAAAAALL) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            float64x2_t v60 = (char *)operator new(24 * v59);
          }
          else
          {
            float64x2_t v60 = 0;
          }
          int32x4_t v61 = &v60[8 * ((v12 - v78) >> 3)];
          *(void *)int32x4_t v61 = v22;
          *((void *)v61 + 1) = 0;
          v61[16] = v79;
          if (v12 == v78)
          {
            uint64_t v11 = &v60[8 * ((v12 - v78) >> 3)];
          }
          else
          {
            int32x4_t v62 = &v60[8 * ((v12 - v78) >> 3)];
            do
            {
              long long v63 = *(_OWORD *)(v12 - 24);
              *((void *)v62 - 1) = *((void *)v12 - 1);
              *(_OWORD *)(v62 - 24) = v63;
              v62 -= 24;
              v12 -= 24;
            }
            while (v12 != v78);
            unint64_t v12 = v78;
            uint64_t v11 = v62;
          }
          unint64_t v73 = &v60[24 * v59];
          uint64_t v30 = v61 + 24;
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(void *)unint64_t v12 = v22;
          *((void *)v12 + 1) = 0;
          v12[16] = v79;
          uint64_t v30 = v12 + 24;
        }
        goto LABEL_33;
      }
      uint64_t v30 = v12;
      uint64_t v15 = v12;
      uint64_t v11 = v78;
    }
    else
    {
      uint64_t v30 = v12;
    }
LABEL_35:
    unint64_t v12 = v30;
  }
  while (v11 != v15);
  if (v15) {
    operator delete(v15);
  }
  uint64_t v65 = v88;
  int32x4_t v64 = v89;
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int64x2_t v66 = (std::__shared_weak_count *)*((void *)v71 + 26);
  *((void *)v71 + 25) = v65;
  *((void *)v71 + 26) = v64;
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  *((_DWORD *)v71 + 54) = v90;
  std::condition_variable::~condition_variable(&v92.__gate2_);
  std::condition_variable::~condition_variable(&v92.__gate1_);
  std::mutex::~mutex(&v92.__mut_);
  if (v89) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v89);
  }
  Phase::Geometry::MpsCpuSceneBuilder::Update((uint64_t)v71 + 32, v72, (uint64_t *)v71 + 1, &v82, (uint64_t)v71 + 224);
  std::vector<Phase::Geometry::MpsCpuSceneDescriptor>::__clear[abi:ne180100](v72);
  if (*((void *)v71 + 11)) {
    Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::MergeFrom((uint64_t)&v82, (uint64_t *)v71 + 20);
  }
  uint64_t v68 = v82;
  float64x2_t v67 = v83;
  if (v83) {
    atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  float64x2_t v69 = (std::__shared_weak_count *)*((void *)v71 + 29);
  *((void *)v71 + 28) = v68;
  *((void *)v71 + 29) = v67;
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  *((_DWORD *)v71 + 60) = v84;
  std::condition_variable::~condition_variable(&v86.__gate2_);
  std::condition_variable::~condition_variable(&v86.__gate1_);
  std::mutex::~mutex(&v86.__mut_);
  if (v83) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  }
}

void sub_221F6DFA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54)
{
  if (__p) {
    operator delete(__p);
  }
  Phase::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64,Phase::Geometry::ShapeFactory>::~SharedSlotMap((uint64_t)&a53);
  Phase::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64,Phase::Geometry::ShapeFactory>::~SharedSlotMap((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::Resize(uint64_t *a1, unsigned int a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  if (v2 < a2)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::AllocSlots(a2, &v20);
    if (v2)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = *a1;
        uint64_t v7 = (uint64_t *)(*a1 + v5);
        uint64_t v8 = v20;
        uint64_t v10 = *v7;
        uint64_t v9 = v7[1];
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = (void *)(v8 + v5);
        unint64_t v12 = *(std::__shared_weak_count **)(v8 + v5 + 8);
        *uint64_t v11 = v10;
        v11[1] = v9;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        v11[2] = *(void *)(v6 + v5 + 16);
        v5 += 24;
      }
      while (24 * v2 != v5);
      uint64_t v13 = v2;
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = 24 * v13;
    do
    {
      uint64_t v15 = (void *)(v20 + v14);
      unint64_t v16 = *(std::__shared_weak_count **)(v20 + v14 + 8);
      *uint64_t v15 = 0;
      v15[1] = 0;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      v15[2] = 0x1FFFFFFFFLL;
      LODWORD(v2) = v2 + 1;
      v14 += 24;
    }
    while (a2 != v2);
    float32x2_t v18 = a1 + 4;
    char v19 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    long long v17 = *(_OWORD *)a1;
    *(_OWORD *)a1 = v20;
    long long v20 = v17;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    *((_DWORD *)a1 + 4) = a2;
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
  }
}

void sub_221F6E164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::Resize(uint64_t *a1, unsigned int a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  if (v2 < a2)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::AllocSlots(a2, &v20);
    if (v2)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = *a1;
        uint64_t v7 = (uint64_t *)(*a1 + v5);
        uint64_t v8 = v20;
        uint64_t v10 = *v7;
        uint64_t v9 = v7[1];
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = (void *)(v8 + v5);
        unint64_t v12 = *(std::__shared_weak_count **)(v8 + v5 + 8);
        *uint64_t v11 = v10;
        v11[1] = v9;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        v11[2] = *(void *)(v6 + v5 + 16);
        v5 += 24;
      }
      while (24 * v2 != v5);
      uint64_t v13 = v2;
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = 24 * v13;
    do
    {
      uint64_t v15 = (void *)(v20 + v14);
      unint64_t v16 = *(std::__shared_weak_count **)(v20 + v14 + 8);
      *uint64_t v15 = 0;
      v15[1] = 0;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      v15[2] = 0x1FFFFFFFFLL;
      LODWORD(v2) = v2 + 1;
      v14 += 24;
    }
    while (a2 != v2);
    float32x2_t v18 = a1 + 4;
    char v19 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    long long v17 = *(_OWORD *)a1;
    *(_OWORD *)a1 = v20;
    long long v20 = v17;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    *((_DWORD *)a1 + 4) = a2;
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
  }
}

void sub_221F6E2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::ForceSet(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = HIDWORD(a3);
  if (a3 < a2)
  {
    unsigned int v7 = a3;
    uint64_t v8 = (void *)(a1 + 24 * a3);
    if (a5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a5 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)v8[1];
    *uint64_t v8 = a4;
    v8[1] = a5;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    *(_DWORD *)(a1 + 24 * v7 + 20) = v5;
  }
}

void std::vector<Phase::Geometry::MpsCpuSceneDescriptor>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 48);
      v4 -= 48;
      int v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 40) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void Phase::Geometry::ShapeDebugger::GetVoxels(Phase::Geometry::System **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  Phase::Geometry::System::GetCurrentState(*a1, &v20);
  if (*(_DWORD *)(v20 + 112) > a2
    && (uint64_t v9 = *(void *)(v20 + 96), *(_DWORD *)(v9 + 24 * a2 + 20) == HIDWORD(a2))
    && (uint64_t v10 = *(void *)(v9 + 24 * a2)) != 0
    && (uint64_t v11 = **(void **)(v10 + 120)) != 0
    && (unint64_t v12 = *(void **)(**(void **)(v11 + 40) + 16 * *(void *)(v11 + 48)), v12[3] > a3)
    && (uint64_t v13 = v12[1] + v12[4] * a3,
        uint64_t v14 = *(void *)(**(void **)(v13 + 40) + 16 * *(void *)(v13 + 48)),
        *(void *)(v14 + 24) > a4))
  {
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
    if (a4)
    {
      uint64_t v15 = *(uint64_t **)(*(void *)(**(void **)(*(void *)(v14 + 8) + 56)
                                    + 16 * *(void *)(*(void *)(v14 + 8) + 64))
                        + 8);
      uint64_t v18 = 0;
      int v19 = 0;
      Phase::Geometry::sAddVoxels((uint64_t *)a5, v13, v15, (uint64_t)&v18, 1, a4);
    }
    else
    {
      LODWORD(v18) = 0;
      WORD2(v18) = 0;
      *(void *)(a5 + 32) = std::vector<Phase::Vector<unsigned short,3ul>>::__push_back_slow_path<Phase::Vector<unsigned short,3ul>>((uint64_t *)(a5 + 24), &v18);
    }
    uint64_t v16 = *(void *)(**(void **)(v13 + 40) + 16 * *(void *)(v13 + 48));
    long long v17 = (_DWORD *)(*(void *)(v16 + 8) + *(void *)(v16 + 32) * a4);
    *(_DWORD *)(a5 + 12) = v17[4];
    *(_DWORD *)(a5 + 16) = v17[5];
    *(_DWORD *)(a5 + 20) = v17[6];
    *(_DWORD *)a5 = *(_DWORD *)v13;
    *(_DWORD *)(a5 + 4) = *(_DWORD *)(v13 + 4);
    *(_DWORD *)(a5 + 8) = *(_DWORD *)(v13 + 8);
  }
  else
  {
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)a5 = 0u;
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_221F6E544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  uint64_t v14 = *(void **)(v12 + 24);
  if (v14)
  {
    *(void *)(v12 + 32) = v14;
    operator delete(v14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::sAddVoxels(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a5;
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  uint64_t v12 = 0;
  uint64_t v13 = *(void *)(**(void **)(a2 + 40) + 16 * *(void *)(a2 + 48));
  uint64_t v38 = a5 + 1;
  uint64_t v39 = *(void *)(v13 + 8) + *(void *)(v13 + 32) * a5;
  uint64_t v35 = a1 + 5;
  uint64_t v37 = a1 + 3;
  do
  {
    uint64_t v14 = *v9;
    if (((unint64_t)*v9 >> v12))
    {
      int v15 = *(_DWORD *)a4 + (v12 & 1 | (2 * ((v12 >> 3) & 1)));
      uint32x2_t v16 = (uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(v12), (int8x8_t)0x2400000012);
      int32x2_t v17 = vadd_s32(*(int32x2_t *)(a4 + 4), (int32x2_t)vorr_s8((int8x8_t)(*(void *)&vshl_u32(v16, (uint32x2_t)0xFFFFFFFEFFFFFFFFLL) & 0xFFFFFFC1FFFFFFC1), (int8x8_t)vshl_u32(v16, (uint32x2_t)0xFFFFFFFCFFFFFFFDLL)));
      if (v7 == a6)
      {
        __int16 v18 = v17.i16[0];
        __int16 v19 = v17.i16[2];
        uint64_t v21 = (_WORD *)a1[4];
        unint64_t v20 = a1[5];
        if ((unint64_t)v21 >= v20)
        {
          uint64_t v25 = a4;
          uint64_t v26 = a6;
          uint64_t v27 = v7;
          uint64_t v28 = v10;
          unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v21 - *v37) >> 1);
          unint64_t v30 = v29 + 1;
          if (v29 + 1 > 0x2AAAAAAAAAAAAAAALL) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *v37) >> 1);
          if (2 * v31 > v30) {
            unint64_t v30 = 2 * v31;
          }
          if (v31 >= 0x1555555555555555) {
            unint64_t v32 = 0x2AAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v32 = v30;
          }
          uint64_t v43 = v35;
          if (v32) {
            unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Vector<unsigned short,3ul>>>(v32);
          }
          else {
            uint64_t v33 = 0;
          }
          unsigned int v34 = (_WORD *)(v32 + 6 * v29);
          *(void *)&long long __p = v32;
          *((void *)&__p + 1) = v34;
          _WORD *v34 = v15;
          v34[1] = v18;
          double v34[2] = v19;
          size_t v41 = v34 + 3;
          unint64_t v42 = v32 + 6 * v33;
          std::vector<Phase::Vector<unsigned short,3ul>>::__swap_out_circular_buffer(v37, &__p);
          uint64_t v22 = (_WORD *)a1[4];
          if ((void)__p) {
            operator delete((void *)__p);
          }
          uint64_t v10 = v28;
          uint64_t v7 = v27;
          a6 = v26;
          a4 = v25;
          uint64_t v9 = a3;
        }
        else
        {
          *uint64_t v21 = v15;
          v21[1] = v17.i16[0];
          uint64_t v22 = v21 + 3;
          v21[2] = v17.i16[2];
        }
        a1[4] = (uint64_t)v22;
      }
      else
      {
        LODWORD(__p) = 4 * v15;
        *(int32x2_t *)((char *)&__p + 4) = vshl_n_s32(v17, 2uLL);
        uint8x8_t v23 = (uint8x8_t)vcnt_s8((int8x8_t)(v14 & ~(-1 << v12)));
        v23.i16[0] = vaddlv_u8(v23);
        uint64_t v24 = *(void *)(**(void **)(v39 + 56) + 16 * *(void *)(v39 + 64));
        Phase::Geometry::sAddVoxels(a1, v10, *(void *)(v24 + 8) + *(void *)(v24 + 32) * (*((_DWORD *)v9 + 2) + v23.i32[0]), &__p, v38, a6);
      }
    }
    ++v12;
  }
  while (v12 != 64);
}

uint64_t *std::vector<Phase::Vector<unsigned short,3ul>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    __int16 v5 = *(_WORD *)(v2 - 6);
    v2 -= 6;
    *(_WORD *)(v4 - 6) = v5;
    v4 -= 6;
    *(_WORD *)(v4 + 2) = *(_WORD *)(v2 + 2);
    *(_WORD *)(v4 + 4) = *(_WORD *)(v2 + 4);
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Vector<unsigned short,3ul>>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(6 * a1);
}

uint64_t std::vector<Phase::Vector<unsigned short,3ul>>::__push_back_slow_path<Phase::Vector<unsigned short,3ul>>(uint64_t *a1, _WORD *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 1);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAAALL) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1 + 2;
  if (0x5555555555555556 * ((a1[2] - *a1) >> 1) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 1);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 1) >= 0x1555555555555555) {
    unint64_t v7 = 0x2AAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  __p[4] = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Vector<unsigned short,3ul>>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = (_WORD *)(v7 + 6 * v2);
  __p[0] = (void *)v7;
  __p[1] = v9;
  *uint64_t v9 = *a2;
  v9[1] = a2[1];
  v9[2] = a2[2];
  __p[2] = v9 + 3;
  __p[3] = (void *)(v7 + 6 * v8);
  std::vector<Phase::Vector<unsigned short,3ul>>::__swap_out_circular_buffer(a1, __p);
  uint64_t v10 = a1[1];
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return v10;
}

uint64_t Phase::Geometry::ShapeFactory::Create@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)result;
  unint64_t v7 = *a2;
  uint64_t v8 = *(void *)(*(void *)result + 1216);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)result + 1224) - v8) >> 5) <= v7) {
    __assert_rtn("GetTypeDef", "GeoShapeTypeRegistry.cpp", 33, "IsValid(inShapeType)");
  }
  uint64_t v9 = v8 + 96 * v7;
  if (*(void *)(v9 + 64))
  {
    return std::function<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(v9 + 40, v6, (uint64_t)a2, a3);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  return result;
}

uint64_t std::function<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, a2, a3, &v6);
}

void *Phase::Geometry::ShapeFactory::Create@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*a1 + 1216);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(*a1 + 1224) - v6) >> 5) <= a2) {
    __assert_rtn("GetTypeDef", "GeoShapeTypeRegistry.cpp", 33, "IsValid(inShapeType)");
  }
  uint64_t v7 = v6 + 96 * a2;
  uint64_t v8 = *(_DWORD **)(v7 + 72);
  uint64_t v9 = *(_DWORD **)(v7 + 80);
  if (v8 == v9)
  {
LABEL_5:
    uint64_t v15 = 0;
LABEL_6:
    uint64_t result = std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](v14);
    *a5 = 0;
    a5[1] = 0;
    return result;
  }
  while (*v8 != *a3)
  {
    v8 += 10;
    if (v8 == v9) {
      goto LABEL_5;
    }
  }
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)(v8 + 2));
  if (!v15) {
    goto LABEL_6;
  }
  std::function<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()((uint64_t)v14, *a1, (uint64_t)a3, a4);
  return std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](v14);
}

void sub_221F6EBD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::function<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, a2, a3, &v6);
}

uint64_t std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *Phase::Geometry::ShapeTypeRegistry::CustomizeType(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v3) >> 5) <= a2) {
    __assert_rtn("CustomizeType", "GeoShapeTypeRegistry.cpp", 43, "IsValid(inShapeType)");
  }

  return std::function<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator=((void *)(v3 + 96 * a2 + 8), a3);
}

{
  uint64_t v3;
  uint64_t vars8;

  uint64_t v3 = *(void *)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v3) >> 5) <= a2) {
    __assert_rtn("CustomizeType", "GeoShapeTypeRegistry.cpp", 54, "IsValid(inShapeType)");
  }

  return std::function<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator=((void *)(v3 + 96 * a2 + 40), a3);
}

void *std::function<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::function<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *Phase::Geometry::ShapeTypeRegistry::CustomizeType(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  void v15[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 16) - v4) >> 5) <= a2) {
    __assert_rtn("CustomizeType", "GeoShapeTypeRegistry.cpp", 65, "IsValid(inShapeType)");
  }
  uint64_t v6 = v4 + 96 * a2;
  uint64_t v9 = *(void *)(v6 + 80);
  uint64_t v8 = (uint64_t *)(v6 + 80);
  uint64_t v7 = v9;
  for (uint64_t i = *(v8 - 1); i != v7; i += 40)
  {
    if (*(_DWORD *)i == a3)
    {
      return std::function<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator=((void *)(i + 8), a4);
    }
  }
  int v14 = a3;
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__value_func[abi:ne180100]((uint64_t)v15, a4);
  uint64_t v11 = (_DWORD *)*v8;
  if ((unint64_t)*v8 >= *(void *)(v4 + 96 * a2 + 88))
  {
    uint64_t v12 = std::vector<Phase::Geometry::LoadShapeFunctionTableEntry>::__push_back_slow_path<Phase::Geometry::LoadShapeFunctionTableEntry>(v8 - 1, &v14);
  }
  else
  {
    *uint64_t v11 = v14;
    uint64_t v12 = (uint64_t)(v11 + 10);
    std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__value_func[abi:ne180100]((uint64_t)(v11 + 2), (uint64_t)v15);
  }
  *uint64_t v8 = v12;
  return std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](v15);
}

void sub_221F6F0BC(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::function<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void std::vector<Phase::Geometry::ShapeTypeDefinition>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 5);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<Phase::Geometry::ShapeTypeDefinition>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 96 * a2;
    while (v3 != v7)
    {
      v3 -= 96;
      std::allocator<Phase::Geometry::ShapeTypeDefinition>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void std::vector<Phase::Geometry::LoadShapeFunctionTableEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 40;
        std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100]((void *)v4 - 4);
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::vector<Phase::Geometry::LoadShapeFunctionTableEntry>::__throw_length_error[abi:ne180100]()
{
}

void *std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    BOOL v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_221F6F690(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    BOOL v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_221F6F8FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    BOOL v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_221F6FB68(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::vector<Phase::Geometry::LoadShapeFunctionTableEntry>::__push_back_slow_path<Phase::Geometry::LoadShapeFunctionTableEntry>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<Phase::Geometry::LoadShapeFunctionTableEntry>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  void v14[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  void v14[3] = &v10[40 * v9];
  *(_DWORD *)uint64_t v11 = *a2;
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__value_func[abi:ne180100]((uint64_t)(v11 + 8), (uint64_t)(a2 + 2));
  v14[2] = v11 + 40;
  std::vector<Phase::Geometry::LoadShapeFunctionTableEntry>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<Phase::Geometry::LoadShapeFunctionTableEntry>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_221F6FC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Phase::Geometry::LoadShapeFunctionTableEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<Phase::Geometry::LoadShapeFunctionTableEntry>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    int v7 = *(_DWORD *)(v4 - 40);
    v4 -= 40;
    *(_DWORD *)(v6 - 40) = v7;
    v6 -= 40;
    uint64_t result = (uint64_t *)std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__value_func[abi:ne180100](v6 + 8, v4 + 8);
  }
  a2[1] = v6;
  uint64_t v8 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<Phase::Geometry::LoadShapeFunctionTableEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::vector<Phase::Geometry::ShapeTypeDefinition>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Geometry::ShapeTypeDefinition>,std::reverse_iterator<Phase::Geometry::ShapeTypeDefinition*>,std::reverse_iterator<Phase::Geometry::ShapeTypeDefinition*>,std::reverse_iterator<Phase::Geometry::ShapeTypeDefinition*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Geometry::ShapeTypeDefinition>,std::reverse_iterator<Phase::Geometry::ShapeTypeDefinition*>,std::reverse_iterator<Phase::Geometry::ShapeTypeDefinition*>,std::reverse_iterator<Phase::Geometry::ShapeTypeDefinition*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a3;
    while (1)
    {
      uint64_t v13 = a7 + v11;
      uint64_t v14 = a3 + v11;
      *(void *)(a7 + v11 - 96) = *(void *)(a3 + v11 - 96);
      uint64_t v15 = *(void *)(a3 + v11 - 64);
      if (!v15) {
        break;
      }
      if (v14 - 88 != v15)
      {
        uint64_t v16 = (void *)(v12 - 64);
        *(void *)(v13 - 64) = v15;
LABEL_7:
        void *v16 = 0;
        goto LABEL_9;
      }
      *(void *)(v13 - 64) = v13 - 88;
      (*(void (**)(void))(**(void **)(v14 - 64) + 24))(*(void *)(v14 - 64));
LABEL_9:
      uint64_t v17 = a7 + v11;
      uint64_t v18 = a3 + v11;
      uint64_t v19 = *(void *)(a3 + v11 - 32);
      if (v19)
      {
        if (v18 - 56 == v19)
        {
          *(void *)(v17 - 32) = v17 - 56;
          (*(void (**)(void))(**(void **)(v18 - 32) + 24))(*(void *)(v18 - 32));
          goto LABEL_15;
        }
        unint64_t v20 = (void *)(v12 - 32);
        *(void *)(v17 - 32) = v19;
      }
      else
      {
        unint64_t v20 = (void *)(v17 - 32);
      }
      *unint64_t v20 = 0;
LABEL_15:
      v12 -= 96;
      uint64_t v21 = a7 + v11;
      uint64_t v22 = a3 + v11;
      *(void *)(v21 - 24) = 0;
      *(void *)(v21 - 16) = 0;
      *(void *)(v21 - 8) = 0;
      *(_OWORD *)(v21 - 24) = *(_OWORD *)(a3 + v11 - 24);
      *(void *)(v21 - 8) = *(void *)(a3 + v11 - 8);
      *(void *)(v22 - 24) = 0;
      *(void *)(v22 - 16) = 0;
      *(void *)(v22 - 8) = 0;
      v11 -= 96;
      if (a3 + v11 == a5) {
        return a6;
      }
    }
    uint64_t v16 = (void *)(v13 - 64);
    goto LABEL_7;
  }
  return a6;
}

void *std::allocator<Phase::Geometry::ShapeTypeDefinition>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 8);
  uint64_t v5 = (void **)(a2 + 72);
  std::vector<Phase::Geometry::LoadShapeFunctionTableEntry>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100]((void *)(a2 + 40));
  return std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](v3);
}

void **std::__split_buffer<Phase::Geometry::ShapeTypeDefinition>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<Phase::Geometry::ShapeTypeDefinition>::clear[abi:ne180100](void *result)
{
  uint64_t v2 = result[1];
  uint64_t v1 = result[2];
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = v3[4];
      v3[2] = v1 - 96;
      uint64_t result = std::allocator<Phase::Geometry::ShapeTypeDefinition>::destroy[abi:ne180100](v4, v1 - 96);
      uint64_t v1 = v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

void std::vector<Phase::Geometry::ShapeTypeDefinition>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      size_t v13 = 96 * ((96 * a2 - 96) / 0x60) + 96;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL) {
      std::vector<Phase::Geometry::LoadShapeFunctionTableEntry>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x155555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::VoiceData>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[96 * v8];
    uint64_t v18 = &v12[96 * v11];
    size_t v14 = 96 * ((96 * a2 - 96) / 0x60) + 96;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    std::vector<Phase::Geometry::ShapeTypeDefinition>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<Phase::Geometry::ShapeTypeDefinition>::~__split_buffer(&v15);
  }
}

void sub_221F7027C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Phase::Geometry::ShapeTypeDefinition>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::Geometry::InitMaterials(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result = Phase::Geometry::DataStreamReference<Phase::Handle64>::Resize(a1 + 144, a2);
  uint64_t v6 = *(void **)(**(void **)(a1 + 144) + 16 * *(void *)(a1 + 152));
  uint64_t v7 = v6[3];
  if (v7)
  {
    unint64_t v8 = (void *)v6[1];
    uint64_t v9 = v6[4];
    do
    {
      *unint64_t v8 = a3;
      unint64_t v8 = (void *)((char *)v8 + v9);
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t Phase::Geometry::DataStreamReference<Phase::Handle64>::Resize(uint64_t result, unint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(**(void **)result + 16 * *(void *)(result + 8));
  unint64_t v5 = *(void *)(v4 + 24);
  if (v5 == a2)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = *(uint64_t **)(v4 + 8);
    *(void *)(v4 + 8) = 0;
    if (a2)
    {
      Phase::Geometry::DataStream::Alloc(*(std::align_val_t *)(v4 + 16), *(void *)(v4 + 32) * a2, &v18);
      uint64_t v7 = v18;
      uint64_t v18 = 0;
      uint64_t result = *(void *)(v4 + 8);
      *(void *)(v4 + 8) = v7;
      if (result)
      {
        MEMORY[0x223C93870](result, 0x1000C8077774924);
        uint64_t result = v18;
        uint64_t v18 = 0;
        if (result) {
          uint64_t result = MEMORY[0x223C93870](result, 0x1000C8077774924);
        }
      }
    }
    *(void *)(v4 + 24) = a2;
  }
  if (v5 >= a2) {
    unint64_t v8 = a2;
  }
  else {
    unint64_t v8 = v5;
  }
  if (v8)
  {
    uint64_t v9 = *(void **)(v4 + 8);
    unint64_t v10 = v6;
    unint64_t v11 = v8;
    do
    {
      uint64_t v12 = *v10++;
      *v9++ = v12;
      --v11;
    }
    while (v11);
  }
  if (v5 < a2)
  {
    uint64_t v13 = *(void *)(**(void **)v3 + 16 * *(void *)(v3 + 8));
    uint64_t v14 = *(void *)(v13 + 8);
    uint64_t v15 = *(void *)(v13 + 32);
    unint64_t v16 = a2 - v8;
    uint64_t v17 = (void *)(v14 + v15 * v8);
    do
    {
      void *v17 = 0;
      uint64_t v17 = (void *)((char *)v17 + v15);
      --v16;
    }
    while (v16);
  }
  if (v6) {
    return MEMORY[0x223C93870](v6, 0x1000C8077774924);
  }
  return result;
}

void sub_221F70434(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x223C93870](v1, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::InitSurfaceArea(uint64_t a1, unint64_t a2)
{
  std::vector<float>::resize(a1 + 72, a2);
  uint64_t v3 = *(void **)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80) - (void)v3;
  if (v4 >= 1)
  {
    bzero(v3, 4 * (((unint64_t)v4 >> 2) - ((unint64_t)v4 > 3)) + 4);
  }
}

uint64_t **Phase::Geometry::SetMaterialsFromOptionalMaterialList(uint64_t **result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t result = Phase::UnorderedStringMap<Phase::OptionsValue>::Find(a2, (long long *)&Phase::Geometry::ShapeOptions::MaterialList);
    if (result)
    {
      if (*((_DWORD *)result + 24) == 10)
      {
        uint64_t v4 = result[7];
        uint64_t v3 = result[8];
        if (v3 != v4)
        {
          unint64_t v5 = *(void **)(*v2[18] + 16 * (void)v2[19]);
          uint64_t v6 = v5[3];
          if (v6)
          {
            uint64_t v7 = (void *)v5[1];
            uint64_t v8 = v5[4];
            uint64_t v9 = result[7];
            do
            {
              uint64_t v10 = *v9++;
              *uint64_t v7 = v10;
              if (v3 == v9) {
                uint64_t v9 = v4;
              }
              uint64_t v7 = (void *)((char *)v7 + v8);
              --v6;
            }
            while (v6);
          }
        }
      }
    }
  }
  return result;
}

void Phase::Geometry::ForcedCopyTagsIncludingMaterialListFromOptions(std::vector<unsigned int>::size_type __n@<X1>, void *a2@<X0>, std::vector<unsigned int> *a3@<X8>)
{
  a3->__begin_ = 0;
  a3->__end_ = 0;
  a3->__end_cap_.__value_ = 0;
  if (!a2)
  {
    std::vector<unsigned int>::reserve(a3, __n);
    return;
  }
  uint64_t v6 = Phase::UnorderedStringMap<Phase::OptionsValue>::Find(a2, (long long *)&Phase::Geometry::ShapeOptions::MaterialList);
  BOOL v7 = v6 && *((_DWORD *)v6 + 24) == 10;
  uint64_t v8 = Phase::UnorderedStringMap<Phase::OptionsValue>::Find(a2, (long long *)&Phase::Geometry::ShapeOptions::ForcedCopyTags);
  uint64_t v9 = v8;
  std::vector<unsigned int>::size_type v10 = __n + v7;
  if (!v8) {
    goto LABEL_11;
  }
  if (*((_DWORD *)v8 + 24) != 9)
  {
    uint64_t v9 = 0;
LABEL_11:
    uint64_t v12 = 0;
    char v11 = 1;
    goto LABEL_12;
  }
  char v11 = 0;
  uint64_t v9 = v8 + 7;
  uint64_t v12 = ((char *)v8[8] - (char *)v8[7]) >> 2;
LABEL_12:
  std::vector<unsigned int>::reserve(a3, v10 + v12);
  if (v7)
  {
    value = a3->__end_cap_.__value_;
    std::vector<unsigned int>::pointer end = a3->__end_;
    if (end >= value)
    {
      std::vector<unsigned int>::pointer begin = a3->__begin_;
      uint64_t v17 = end - a3->__begin_;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = (char *)value - (char *)begin;
      if (v19 >> 1 > v18) {
        unint64_t v18 = v19 >> 1;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&a3->__end_cap_, v20);
        std::vector<unsigned int>::pointer begin = a3->__begin_;
        std::vector<unsigned int>::pointer end = a3->__end_;
      }
      else
      {
        uint64_t v21 = 0;
      }
      uint64_t v22 = (unsigned int *)&v21[4 * v17];
      uint8x8_t v23 = (unsigned int *)&v21[4 * v20];
      unsigned int *v22 = 1;
      uint64_t v15 = v22 + 1;
      while (end != begin)
      {
        unsigned int v24 = *--end;
        *--uint64_t v22 = v24;
      }
      a3->__begin_ = v22;
      a3->__end_ = v15;
      a3->__end_cap_.__value_ = v23;
      if (begin) {
        operator delete(begin);
      }
    }
    else
    {
      *std::vector<unsigned int>::pointer end = 1;
      uint64_t v15 = end + 1;
    }
    a3->__end_ = v15;
  }
  if ((v11 & 1) == 0)
  {
    uint64_t v25 = *v9;
    uint64_t v26 = v9[1];
    if (*v9 != v26)
    {
      p_end_cap = &a3->__end_cap_;
      std::vector<unsigned int>::pointer v28 = a3->__end_;
      do
      {
        if (v28 >= p_end_cap->__value_)
        {
          std::vector<unsigned int>::pointer v30 = a3->__begin_;
          uint64_t v31 = v28 - a3->__begin_;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v33 = (char *)p_end_cap->__value_ - (char *)v30;
          if (v33 >> 1 > v32) {
            unint64_t v32 = v33 >> 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34)
          {
            uint64_t v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&a3->__end_cap_, v34);
            std::vector<unsigned int>::pointer v30 = a3->__begin_;
            std::vector<unsigned int>::pointer v28 = a3->__end_;
          }
          else
          {
            uint64_t v35 = 0;
          }
          int v36 = (unsigned int *)&v35[4 * v31];
          *int v36 = *(_DWORD *)v25;
          unint64_t v29 = v36 + 1;
          while (v28 != v30)
          {
            unsigned int v37 = *--v28;
            *--int v36 = v37;
          }
          a3->__begin_ = v36;
          a3->__end_ = v29;
          a3->__end_cap_.__value_ = (unsigned int *)&v35[4 * v34];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          *std::vector<unsigned int>::pointer v28 = *(_DWORD *)v25;
          unint64_t v29 = v28 + 1;
        }
        a3->__end_ = v29;
        uint64_t v25 = (uint64_t *)((char *)v25 + 4);
        std::vector<unsigned int>::pointer v28 = v29;
      }
      while (v25 != v26);
    }
  }
}

void sub_221F707DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    BOOL v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = (unsigned int *)&v6[4 * v8];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    std::vector<unsigned int>::pointer end = this->__end_;
    uint64_t v12 = v7;
    if (end != this->__begin_)
    {
      uint64_t v12 = v7;
      do
      {
        unsigned int v13 = *--end;
        *--uint64_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t Phase::Geometry::GetNormals(int *a1, unsigned int *a2, int a3, uint64_t a4, int a5, uint64_t a6)
{
  int v6 = *a1;
  if (*a1 == 3)
  {
    Phase::Geometry::GetNormals(**((void **)a1 + 15), a2, a3, a4, a5, a6);
    return 1;
  }
  if (v6 == 2)
  {
    Phase::Geometry::GetNormals(**((void **)a1 + 15), a2, a3, a4, a5, a6);
    return 1;
  }
  if (v6 == 1)
  {
    Phase::Geometry::GetNormals(**((void **)a1 + 15), a2, a3, a4, a5, a6);
    return 1;
  }
  return 0;
}

uint64_t Phase::Geometry::GetMaterials(int *a1, unsigned int *a2, int a3, void *a4, int a5, uint64_t a6)
{
  int v6 = *a1;
  if (*a1 == 3)
  {
    Phase::Geometry::GetMaterials(**((void **)a1 + 15), a2, a3, a4, a5, a6);
    return 1;
  }
  if (v6 == 2)
  {
    Phase::Geometry::GetMaterials(**((void **)a1 + 15), a2, a3, a4, a5, a6);
    return 1;
  }
  if (v6 == 1)
  {
    Phase::Geometry::GetMaterials(**((void **)a1 + 15), a2, a3, a4, a5, a6);
    return 1;
  }
  return 0;
}

uint64_t (*Phase::GetTypeId<Phase::Geometry::SimpleUniformMaterial>())()
{
  return Phase::GetTypeId<Phase::Geometry::SimpleUniformMaterial>;
}

void Phase::Geometry::CreateSimpleUniformMaterial(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(void *)&long long v6 = "MaterialDataMapSize";
  *((void *)&v6 + 1) = 19;
  if (a1 && (uint64_t v3 = Phase::UnorderedStringMap<Phase::OptionsValue>::Find(a1, &v6)) != 0 && *((_DWORD *)v3 + 24) == 1)
  {
    int v4 = *((_DWORD *)v3 + 14);
    if (v4 <= 0) {
      std::terminate();
    }
  }
  else
  {
    int v4 = 1;
  }
  int64_t v5 = operator new(0x58uLL);
  v5[1] = 0;
  v5[2] = 0;
  *int64_t v5 = &unk_26D477110;
  *((_DWORD *)v5 + 6) = 1;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  v5[10] = 0;
  *((_OWORD *)v5 + 4) = 0u;
  *a2 = v5 + 3;
  a2[1] = v5;
  std::vector<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>>>::resize(v5 + 8, v4);
  operator new();
}

void sub_221F70BAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *Phase::Geometry::CreateSimpleUniformMaterialFromMaterial@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(_DWORD *)a1 != 1) {
    std::terminate();
  }
  int v4 = operator new(0x58uLL);
  v4[1] = 0;
  v4[2] = 0;
  *int v4 = &unk_26D477110;
  *((_DWORD *)v4 + 6) = 1;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[10] = 0;
  *((_OWORD *)v4 + 4) = 0u;
  *a2 = v4 + 3;
  a2[1] = v4;
  uint64_t result = std::vector<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>>>::resize(v4 + 8, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
  if (*(void *)(a1 + 48) != *(void *)(a1 + 40)) {
    operator new();
  }
  return result;
}

void sub_221F70E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
}

void std::__shared_ptr_emplace<Phase::Geometry::Material>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D477110;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Geometry::Material>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D477110;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_emplace<Phase::Geometry::Material>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 64);
  std::vector<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<Phase::Geometry::MpsCpuScene>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMaterial>(Phase::Geometry::SimpleUniformMaterial *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMaterial>(Phase::Geometry::SimpleUniformMaterial *)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMaterial>(Phase::Geometry::SimpleUniformMaterial *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMaterial>(Phase::Geometry::SimpleUniformMaterial *)::{lambda(void *)#1}>,void ()(void *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D477148;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMaterial>(Phase::Geometry::SimpleUniformMaterial *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMaterial>(Phase::Geometry::SimpleUniformMaterial *)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D477148;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMaterial>(Phase::Geometry::SimpleUniformMaterial *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMaterial>(Phase::Geometry::SimpleUniformMaterial *)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2) {
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t (*Phase::GetTypeId<Phase::Geometry::SimpleUniformMedium>())()
{
  return Phase::GetTypeId<Phase::Geometry::SimpleUniformMedium>;
}

void Phase::Geometry::CreateSimpleUniformMedium(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  *(void *)&long long v6 = "MediumDataMapSize";
  *((void *)&v6 + 1) = 17;
  if (a1 && (uint64_t v3 = Phase::UnorderedStringMap<Phase::OptionsValue>::Find(a1, &v6)) != 0 && *((_DWORD *)v3 + 24) == 1)
  {
    int v4 = *((_DWORD *)v3 + 14);
    if (v4 <= 0) {
      std::terminate();
    }
  }
  else
  {
    int v4 = 1;
  }
  int64_t v5 = operator new(0x58uLL);
  v5[1] = 0;
  v5[2] = 0;
  *int64_t v5 = &unk_26D477190;
  *((_DWORD *)v5 + 6) = 1;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  v5[10] = 0;
  *((_OWORD *)v5 + 4) = 0u;
  *a2 = v5 + 3;
  a2[1] = v5;
  std::vector<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>>>::resize(v5 + 8, v4);
  operator new();
}

void sub_221F71188(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *Phase::Geometry::CreateSimpleUniformMediumFromMedium@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(_DWORD *)a1 != 1) {
    std::terminate();
  }
  int v4 = operator new(0x58uLL);
  v4[1] = 0;
  v4[2] = 0;
  *int v4 = &unk_26D477190;
  *((_DWORD *)v4 + 6) = 1;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[10] = 0;
  *((_OWORD *)v4 + 4) = 0u;
  *a2 = v4 + 3;
  a2[1] = v4;
  uint64_t result = std::vector<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>>>::resize(v4 + 8, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 3));
  if (*(void *)(a1 + 48) != *(void *)(a1 + 40)) {
    operator new();
  }
  return result;
}

void sub_221F713B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::Geometry::Medium>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D477190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Geometry::Medium>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D477190;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_emplace<Phase::Geometry::Medium>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 64);
  std::vector<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>>>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = (void **)(a1 + 40);
  std::vector<std::shared_ptr<Phase::Geometry::MpsCpuScene>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMedium>(Phase::Geometry::SimpleUniformMedium *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMedium>(Phase::Geometry::SimpleUniformMedium *)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMedium>(Phase::Geometry::SimpleUniformMedium *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMedium>(Phase::Geometry::SimpleUniformMedium *)::{lambda(void *)#1}>,void ()(void *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D4771C8;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMedium>(Phase::Geometry::SimpleUniformMedium *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMedium>(Phase::Geometry::SimpleUniformMedium *)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4771C8;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMedium>(Phase::Geometry::SimpleUniformMedium *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SimpleUniformMedium>(Phase::Geometry::SimpleUniformMedium *)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2) {
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void *Phase::Geometry::GenerateSourcePoints@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, float32x2_t *a3@<X2>, _OWORD *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  v41[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = (float *)(a2 + 48);
  if (*(_DWORD *)a2 == 3
    && *(void *)(a2 + 128) != *(void *)(a2 + 120)
    && (Phase::Inverse<float>(a3 + 6, (uint64_t)v29),
        Phase::operator*<float>(v29, v8, (uint64_t)v28),
        uint64_t v13 = **(void **)(a2 + 120),
        *(_DWORD *)(a1 + 112) > v13)
    && (uint64_t v14 = *(void *)(a1 + 96), *(_DWORD *)(v14 + 24 * v13 + 20) == HIDWORD(v13))
    && (uint64_t v15 = *(void *)(v14 + 24 * **(void **)(a2 + 120))) != 0
    && *(_DWORD *)v15 == 1)
  {
    uint64_t v16 = **(void **)(v15 + 120);
    long long v17 = a4[1];
    v27[0] = *a4;
    v27[1] = v17;
    if (*(int *)a4 <= 0) {
      LODWORD(v27[0]) = *(_DWORD *)(a2 + 152);
    }
    Phase::Geometry::CreatePointCloudLoD((void *)a1, v16, (uint64_t)v28, (uint64_t)v27, a5, (uint64_t)&v37, v12);
    if (v39)
    {
      unint64_t v18 = v37;
      unsigned int v37 = 0;
      *(void *)a6 = v18;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a6 + 8, (uint64_t)v38);
      *(void *)(a6 + 40) = v39;
      *(unsigned char *)(a6 + 48) = 1;
    }
    else
    {
      uint64_t v23 = *(void *)(a1 + 1024);
      uint64_t v33 = 1;
      uint64_t v32 = 4;
      v31[0] = v23;
      v31[1] = &v33;
      v31[2] = &v32;
      uint64_t v30 = v23;
      Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>((Phase::Logger *)1, (uint64_t)v31, &v30, (size_t *)&v40);
      unsigned int v24 = (float32x2_t *)v40;
      uint64_t v40 = 0;
      unint64_t v34 = v24;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v35, (uint64_t)v41);
      uint64_t v36 = 1;
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v40);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v41);
      float32_t v25 = (float)(*(float *)(v15 + 32) + *(float *)(v15 + 44)) * 0.5;
      uint64_t v26 = v34;
      float32x2_t *v34 = vmul_f32(vadd_f32(*(float32x2_t *)(v15 + 24), *(float32x2_t *)(v15 + 36)), (float32x2_t)0x3F0000003F000000);
      v26[1].f32[0] = v25;
      unint64_t v34 = 0;
      *(void *)a6 = v26;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a6 + 8, (uint64_t)v35);
      *(void *)(a6 + 40) = v36;
      *(unsigned char *)(a6 + 48) = 0;
      std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v34);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v35);
    }
    std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v37);
  }
  else
  {
    uint64_t v19 = *(float32x2_t **)(a1 + 1024);
    uint64_t v40 = 1;
    v29[0] = (float32x2_t)4;
    unsigned int v37 = v19;
    v38[0] = &v40;
    v38[1] = v29;
    v28[0] = (uint64_t)v19;
    Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::SystemAllocator>(Phase::SystemAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>((Phase::Logger *)1, (uint64_t)&v37, v28, (size_t *)&v34);
    unint64_t v20 = v34;
    unint64_t v34 = 0;
    unsigned int v37 = v20;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v38, (uint64_t)v35);
    uint64_t v39 = 1;
    std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v34);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v35);
    uint64_t v21 = v37;
    *unsigned int v37 = 0;
    v21[1].i32[0] = 0;
    unsigned int v37 = 0;
    *(void *)a6 = v21;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](a6 + 8, (uint64_t)v38);
    *(void *)(a6 + 40) = v39;
    *(unsigned char *)(a6 + 48) = 0;
    std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v37);
  }
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v38);
}

void sub_221F71864(_Unwind_Exception *a1)
{
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)(v1 - 160));
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)(v1 - 152));
  _Unwind_Resume(a1);
}

uint64_t (*Phase::GetTypeId<Phase::Geometry::SphericalCapDirectivity>())()
{
  return Phase::GetTypeId<Phase::Geometry::SphericalCapDirectivity>;
}

void Phase::Geometry::CreateSphericalCapDirectivity(void *a1@<X8>)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t v2 = operator new(0x58uLL);
  v2[1] = 0;
  v2[2] = 0;
  void *v2 = &unk_26D4769B8;
  *((_DWORD *)v2 + 6) = 3;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  v2[10] = 0;
  *a1 = v2 + 3;
  a1[1] = v2;
  operator new();
}

void sub_221F719F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Phase::Geometry::CreateSphericalCapDirectivityFromDirectivity(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a1 == 3)
  {
    int v4 = operator new(0x58uLL);
    v4[1] = 0;
    v4[2] = 0;
    *int v4 = &unk_26D4769B8;
    *((_DWORD *)v4 + 6) = 3;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    v4[10] = 0;
    *a2 = v4 + 3;
    a2[1] = v4;
    if (**(void **)(a1 + 40)) {
      operator new();
    }
    __assert_rtn("CreateSphericalCapDirectivityFromDirectivity", "GeoSphericalCapDirectivity.cpp", 47, "pSrcDirectivity");
  }
  __assert_rtn("CreateSphericalCapDirectivityFromDirectivity", "GeoSphericalCapDirectivity.cpp", 42, "inDirectivity.mType == DefaultDirectivityType::SphericalCap");
}

void sub_221F71BC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SphericalCapDirectivity>(Phase::Geometry::SphericalCapDirectivity *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SphericalCapDirectivity>(Phase::Geometry::SphericalCapDirectivity *)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SphericalCapDirectivity>(Phase::Geometry::SphericalCapDirectivity *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SphericalCapDirectivity>(Phase::Geometry::SphericalCapDirectivity *)::{lambda(void *)#1}>,void ()(void *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D477210;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SphericalCapDirectivity>(Phase::Geometry::SphericalCapDirectivity *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SphericalCapDirectivity>(Phase::Geometry::SphericalCapDirectivity *)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D477210;
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SphericalCapDirectivity>(Phase::Geometry::SphericalCapDirectivity *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::SphericalCapDirectivity>(Phase::Geometry::SphericalCapDirectivity *)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, uint64_t ***a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    std::unique_ptr<Phase::Zeppelin::HorizontalSliceDatabase>::reset[abi:ne180100](v2 + 6, 0);
    std::unique_ptr<Phase::Zeppelin::HorizontalSliceDatabase>::reset[abi:ne180100](v2 + 5, 0);
    std::unique_ptr<Phase::Zeppelin::HorizontalSliceDatabase>::reset[abi:ne180100](v2 + 4, 0);
    JUMPOUT(0x223C938A0);
  }
}

void *Phase::Geometry::SystemSetup::InitDefaultDirectivities(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 216;
  uint64_t v3 = a1 + 224;
  std::vector<Phase::Geometry::DirectivityTypeDefinition>::resize((uint64_t *)(a1 + 224), 4uLL);
  int v4 = *(void **)(a1 + 224);
  *int v4 = 0;
  v4[12] = 0x100000001;
  long long v6 = &unk_26D477288;
  uint64_t v7 = Phase::Geometry::CreateCardioidDirectivity;
  uint64_t v8 = &v6;
  Phase::Geometry::DirectivityTypeRegistry::CustomizeType(v2, 1u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  long long v6 = &unk_26D4772D0;
  uint64_t v7 = Phase::Geometry::CreateCardioidDirectivityFromDirectivity;
  uint64_t v8 = &v6;
  Phase::Geometry::DirectivityTypeRegistry::CustomizeType(v2, 1u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  *(void *)(*(void *)v3 + 192) = 0x200000002;
  long long v6 = &unk_26D477288;
  uint64_t v7 = Phase::Geometry::CreateConeDirectivity;
  uint64_t v8 = &v6;
  Phase::Geometry::DirectivityTypeRegistry::CustomizeType(v2, 2u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  long long v6 = &unk_26D4772D0;
  uint64_t v7 = Phase::Geometry::CreateConeDirectivityFromDirectivity;
  uint64_t v8 = &v6;
  Phase::Geometry::DirectivityTypeRegistry::CustomizeType(v2, 2u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  *(void *)(*(void *)v3 + 288) = 0x300000003;
  long long v6 = &unk_26D477288;
  uint64_t v7 = Phase::Geometry::CreateSphericalCapDirectivity;
  uint64_t v8 = &v6;
  Phase::Geometry::DirectivityTypeRegistry::CustomizeType(v2, 3u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  long long v6 = &unk_26D4772D0;
  uint64_t v7 = Phase::Geometry::CreateSphericalCapDirectivityFromDirectivity;
  uint64_t v8 = &v6;
  Phase::Geometry::DirectivityTypeRegistry::CustomizeType(v2, 3u, (uint64_t)&v6);
  return std::__function::__value_func<std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
}

void sub_221F71F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *Phase::Geometry::SystemSetup::InitDefaultDistanceModels(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 464;
  uint64_t v3 = a1 + 472;
  std::vector<Phase::Geometry::DistanceModelTypeDefinition>::resize((uint64_t *)(a1 + 472), 3uLL);
  int v4 = *(void **)(a1 + 472);
  *int v4 = 0;
  v4[12] = 0x100000001;
  long long v6 = &unk_26D477318;
  uint64_t v7 = Phase::Geometry::CreateGeometricSpreadingDistanceModel;
  uint64_t v8 = &v6;
  Phase::Geometry::DistanceModelTypeRegistry::CustomizeType(v2, 1u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  long long v6 = &unk_26D477360;
  uint64_t v7 = Phase::Geometry::CreateGeometricSpreadingDistanceModelFromDistanceModel;
  uint64_t v8 = &v6;
  Phase::Geometry::DistanceModelTypeRegistry::CustomizeType(v2, 1u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  *(void *)(*(void *)v3 + 192) = 0x200000002;
  long long v6 = &unk_26D477318;
  uint64_t v7 = Phase::Geometry::CreateEnvelopeDistanceModel;
  uint64_t v8 = &v6;
  Phase::Geometry::DistanceModelTypeRegistry::CustomizeType(v2, 2u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  long long v6 = &unk_26D477360;
  uint64_t v7 = Phase::Geometry::CreateEnvelopeDistanceModelFromDistanceModel;
  uint64_t v8 = &v6;
  Phase::Geometry::DistanceModelTypeRegistry::CustomizeType(v2, 2u, (uint64_t)&v6);
  return std::__function::__value_func<std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
}

void sub_221F72118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *Phase::Geometry::SystemSetup::InitDefaultMediums(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 712;
  std::vector<Phase::Geometry::MediumTypeDefinition>::resize((uint64_t *)(a1 + 720), 2uLL);
  uint64_t v3 = *(void **)(a1 + 720);
  *uint64_t v3 = 0;
  v3[12] = 0x100000001;
  uint64_t v5 = &unk_26D4773A8;
  long long v6 = Phase::Geometry::CreateSimpleUniformMedium;
  uint64_t v7 = &v5;
  Phase::Geometry::MediumTypeRegistry::CustomizeType(v2, 1u, (uint64_t)&v5);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Medium> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v5);
  uint64_t v5 = &unk_26D4773F0;
  long long v6 = Phase::Geometry::CreateSimpleUniformMediumFromMedium;
  uint64_t v7 = &v5;
  Phase::Geometry::MediumTypeRegistry::CustomizeType(v2, 1u, (uint64_t)&v5);
  return std::__function::__value_func<std::shared_ptr<Phase::Geometry::Medium> ()(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v5);
}

void sub_221F72250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Medium> ()(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *Phase::Geometry::SystemSetup::InitDefaultMaterials(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 960;
  std::vector<Phase::Geometry::MaterialTypeDefinition>::resize((uint64_t *)(a1 + 968), 2uLL);
  uint64_t v3 = *(void **)(a1 + 968);
  *uint64_t v3 = 0;
  v3[12] = 0x100000001;
  uint64_t v5 = &unk_26D477438;
  long long v6 = Phase::Geometry::CreateSimpleUniformMaterial;
  uint64_t v7 = &v5;
  Phase::Geometry::MaterialTypeRegistry::CustomizeType(v2, 1u, (uint64_t)&v5);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Material> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v5);
  uint64_t v5 = &unk_26D477480;
  long long v6 = Phase::Geometry::CreateSimpleUniformMaterialFromMaterial;
  uint64_t v7 = &v5;
  Phase::Geometry::MaterialTypeRegistry::CustomizeType(v2, 1u, (uint64_t)&v5);
  return std::__function::__value_func<std::shared_ptr<Phase::Geometry::Material> ()(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v5);
}

void sub_221F72380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Material> ()(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *Phase::Geometry::SystemSetup::InitDefaultShapes(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 1208;
  uint64_t v3 = a1 + 1216;
  std::vector<Phase::Geometry::ShapeTypeDefinition>::resize((uint64_t *)(a1 + 1216), 4uLL);
  int v4 = *(void **)(a1 + 1216);
  *int v4 = 0;
  v4[12] = 0x100000001;
  long long v6 = &unk_26D4774C8;
  uint64_t v7 = Phase::Geometry::CreateMesh;
  uint64_t v8 = &v6;
  Phase::Geometry::ShapeTypeRegistry::CustomizeType(v2, 1u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  long long v6 = &unk_26D477510;
  uint64_t v7 = Phase::Geometry::CreateMeshFromShape;
  uint64_t v8 = &v6;
  Phase::Geometry::ShapeTypeRegistry::CustomizeType(v2, 1u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  long long v6 = &unk_26D477558;
  uint64_t v7 = Phase::Geometry::CreateMeshFromMdlMesh;
  uint64_t v8 = &v6;
  Phase::Geometry::ShapeTypeRegistry::CustomizeType(v2, 1u, 1, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  *(void *)(*(void *)v3 + 192) = 0x200000002;
  long long v6 = &unk_26D4774C8;
  uint64_t v7 = Phase::Geometry::CreateVoxelTree;
  uint64_t v8 = &v6;
  Phase::Geometry::ShapeTypeRegistry::CustomizeType(v2, 2u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  long long v6 = &unk_26D477510;
  uint64_t v7 = Phase::Geometry::CreateVoxelTreeFromShape;
  uint64_t v8 = &v6;
  Phase::Geometry::ShapeTypeRegistry::CustomizeType(v2, 2u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  long long v6 = &unk_26D477558;
  uint64_t v7 = Phase::Geometry::CreateVoxelTreeFromMdlMesh;
  uint64_t v8 = &v6;
  Phase::Geometry::ShapeTypeRegistry::CustomizeType(v2, 2u, 1, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  *(void *)(*(void *)v3 + 288) = 0x300000003;
  long long v6 = &unk_26D4774C8;
  uint64_t v7 = Phase::Geometry::CreateMpsMesh;
  uint64_t v8 = &v6;
  Phase::Geometry::ShapeTypeRegistry::CustomizeType(v2, 3u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  long long v6 = &unk_26D477510;
  uint64_t v7 = Phase::Geometry::CreateMpsMeshFromShape;
  uint64_t v8 = &v6;
  Phase::Geometry::ShapeTypeRegistry::CustomizeType(v2, 3u, (uint64_t)&v6);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
  long long v6 = &unk_26D477558;
  uint64_t v7 = Phase::Geometry::CreateMpsMeshFromMdlMesh;
  uint64_t v8 = &v6;
  Phase::Geometry::ShapeTypeRegistry::CustomizeType(v2, 3u, 1, (uint64_t)&v6);
  return std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100](&v6);
}

void sub_221F726F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *Phase::Geometry::SystemSetup::InitDefaultSceneQueries(void *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 286;
  uint64_t v3 = a1 + 287;
  std::vector<Phase::Geometry::SceneQueryTypeDefinition>::resize(a1 + 287, 5uLL);
  Phase::Geometry::SceneQueryTypeRegistry::SetTestShapeTableEntryCount(v2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[153] - a1[152]) >> 5));
  int v4 = (void *)a1[287];
  *int v4 = 0;
  v4[19] = 0x100000001;
  uint64_t v9 = &unk_26D4775A0;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::IterateSceneQueryBatch;
  char v11 = &v9;
  long long v6 = &unk_26D4775A0;
  uint64_t v7 = Phase::Geometry::IterateSceneQueryBatchAsync;
  uint64_t v8 = &v6;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType((uint64_t)v2, 1u, (uint64_t)&v9, (uint64_t)&v6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](&v6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D4775E8;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::SingleHitRaycastVsScene;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType((uint64_t)v2, 1u, (uint64_t)&v9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D477630;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::SingleHitRaycastVsMesh;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(v2, 1u, 1u, (uint64_t)&v9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D477630;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::SingleHitRaycastVsVoxelTree;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(v2, 1u, 2u, (uint64_t)&v9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D477678;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::RunSingleHitVsMpsScene;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(v2, 1u, 3u, (uint64_t)&v9);
  std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::~__value_func[abi:ne180100](&v9);
  *(void *)(*v3 + 304) = 0x200000002;
  uint64_t v9 = &unk_26D4775A0;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::IterateSceneQueryBatch;
  char v11 = &v9;
  long long v6 = &unk_26D4775A0;
  uint64_t v7 = Phase::Geometry::IterateSceneQueryBatchAsync;
  uint64_t v8 = &v6;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType((uint64_t)v2, 2u, (uint64_t)&v9, (uint64_t)&v6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](&v6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D4775E8;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::MultiHitRaycastVsScene;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType((uint64_t)v2, 2u, (uint64_t)&v9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D477630;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::MultiHitRaycastVsMesh;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(v2, 2u, 1u, (uint64_t)&v9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D477630;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::MultiHitRaycastVsVoxelTree;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(v2, 2u, 2u, (uint64_t)&v9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](&v9);
  *(void *)(*v3 + 456) = 0x300000003;
  uint64_t v9 = &unk_26D4775A0;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::IterateSceneQueryBatch;
  char v11 = &v9;
  long long v6 = &unk_26D4775A0;
  uint64_t v7 = Phase::Geometry::IterateSceneQueryBatchAsync;
  uint64_t v8 = &v6;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType((uint64_t)v2, 3u, (uint64_t)&v9, (uint64_t)&v6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](&v6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D4775E8;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::SingleHitRaycastVsSceneV2;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType((uint64_t)v2, 3u, (uint64_t)&v9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D477630;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::SingleHitRaycastVsMeshV2;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(v2, 3u, 1u, (uint64_t)&v9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D477630;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::SingleHitRaycastVsVoxelTreeV2;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(v2, 3u, 2u, (uint64_t)&v9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D477678;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::RunSingleHitVsMpsSceneV2;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(v2, 3u, 3u, (uint64_t)&v9);
  std::__function::__value_func<BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::~__value_func[abi:ne180100](&v9);
  *(void *)(*v3 + 608) = 0x400000004;
  uint64_t v9 = &unk_26D4775A0;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::IterateSceneQueryBatch;
  char v11 = &v9;
  long long v6 = &unk_26D4775A0;
  uint64_t v7 = Phase::Geometry::IterateSceneQueryBatchAsync;
  uint64_t v8 = &v6;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType((uint64_t)v2, 4u, (uint64_t)&v9, (uint64_t)&v6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](&v6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D4775E8;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::MultiHitRaycastVsSceneV2;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType((uint64_t)v2, 4u, (uint64_t)&v9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D477630;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::MultiHitRaycastVsMeshV2;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(v2, 4u, 1u, (uint64_t)&v9);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](&v9);
  uint64_t v9 = &unk_26D477630;
  std::vector<unsigned int>::size_type v10 = Phase::Geometry::MultiHitRaycastVsVoxelTreeV2;
  char v11 = &v9;
  Phase::Geometry::SceneQueryTypeRegistry::CustomizeType(v2, 4u, 2u, (uint64_t)&v9);
  return std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100](&v9);
}

void sub_221F72E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void Phase::Geometry::SystemSetup::InitScene(Phase::Geometry::SystemSetup *this, Phase::Geometry::System *a2)
{
}

void sub_221F72F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::CreateSystem()
{
}

void sub_221F7304C(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10E0C402C518574);
  _Unwind_Resume(a1);
}

uint64_t *Phase::Geometry::System::ProcessReleaseRequestsUpTo(uint64_t *this, unint64_t a2)
{
  uint64_t v3 = this;
  int v4 = (uint64_t *)this[343];
  if (v4)
  {
    uint64_t v5 = this + 343;
    do
    {
      if (v4[1] >= a2)
      {
        uint64_t v5 = v4 + 2;
      }
      else
      {
        Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::Release((uint64_t)(v3 + 93), *v4);
        uint64_t v13 = v4[2];
        uint64_t v6 = v13;
        v4[2] = 0;
        uint64_t v7 = *v5;
        *uint64_t v5 = v6;
        uint64_t v13 = v7;
        std::unique_ptr<Phase::Geometry::System::ReleaseRequest>::reset[abi:ne180100](&v13, 0);
        this = std::unique_ptr<Phase::Geometry::System::ReleaseRequest>::reset[abi:ne180100](&v13, 0);
      }
      int v4 = (uint64_t *)*v5;
    }
    while (*v5);
  }
  uint64_t v8 = (uint64_t *)v3[344];
  if (v8)
  {
    uint64_t v9 = v3 + 344;
    uint64_t v10 = (uint64_t)(v3 + 124);
    do
    {
      if (v8[1] >= a2)
      {
        uint64_t v9 = v8 + 2;
      }
      else
      {
        Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::UnblockSlot(v10, *v8);
        uint64_t v13 = v8[2];
        uint64_t v11 = v13;
        float32x4_t v8[2] = 0;
        uint64_t v12 = *v9;
        *uint64_t v9 = v11;
        uint64_t v13 = v12;
        std::unique_ptr<Phase::Geometry::System::ReleaseRequest>::reset[abi:ne180100](&v13, 0);
        this = std::unique_ptr<Phase::Geometry::System::ReleaseRequest>::reset[abi:ne180100](&v13, 0);
      }
      uint64_t v8 = (uint64_t *)*v9;
    }
    while (*v9);
  }
  return this;
}

void Phase::Geometry::System::BuildCurrentState(Phase::Geometry::System *this)
{
  *((void *)this + 342) = pthread_self();
  ++*((void *)this + 303);
  Phase::Geometry::SceneState::Update((std::__shared_weak_count **)this + 304);
  Phase::Geometry::System::ProcessReleaseRequestsUpTo((uint64_t *)this, *((void *)this + 327));
  _ZNSt3__115allocate_sharedB8ne180100IN5Phase8Geometry11SystemStateENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v4);
  Phase::Geometry::SystemState::Init(v4[0], this);
  Phase::DataMessengerSPSC<std::shared_ptr<Phase::Geometry::SystemState>>::SendNewDataToObservers((void *)this + 291, (uint64_t *)v4);
  long long v2 = *(_OWORD *)v4;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 341);
  *((_OWORD *)this + 170) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (v4[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4[1]);
    }
  }
}

void sub_221F73218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DataMessengerSPSC<std::shared_ptr<Phase::Geometry::SystemState>>::SendNewDataToObservers(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    unint64_t v5 = 0;
    unint64_t v6 = v2 >> 4;
    while (1)
    {
      uint64_t v7 = *a1 + 16 * v5;
      uint64_t v8 = *(std::__shared_weak_count **)(v7 + 8);
      if (!v8) {
        break;
      }
      uint64_t v9 = std::__shared_weak_count::lock(v8);
      if (!v9) {
        goto LABEL_17;
      }
      uint64_t v10 = *(atomic_ullong **)v7;
      if (!v10) {
        goto LABEL_17;
      }
      uint64_t v11 = (void *)v10[1];
      if (!v11) {
        __assert_rtn("SendNewData", "DataObserverSPSC.hpp", 79, "nullptr != pNewMessage");
      }
      v10[1] = v11[2];
      v11[2] = 0;
      uint64_t v13 = *a2;
      uint64_t v12 = a2[1];
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = (std::__shared_weak_count *)v11[1];
      *uint64_t v11 = v13;
      v11[1] = v12;
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      unint64_t v15 = atomic_exchange(v10, (unint64_t)v11);
      if (v15)
      {
        uint64_t v16 = *(std::__shared_weak_count **)(v15 + 8);
        *(void *)unint64_t v15 = 0;
        *(void *)(v15 + 8) = 0;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        *(unsigned char *)(v15 + 24) = 0;
        *(void *)(v15 + 16) = v10[1];
        v10[1] = v15;
      }
      ++v5;
LABEL_23:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_24:
      if (v5 >= v6) {
        return;
      }
    }
    uint64_t v9 = 0;
LABEL_17:
    if (v5 + 1 < v6)
    {
      uint64_t v17 = a1[1];
      uint64_t v18 = *a1 + 16 * v5;
      long long v19 = *(_OWORD *)(v17 - 16);
      *(void *)(v17 - 16) = 0;
      *(void *)(v17 - 8) = 0;
      unint64_t v20 = *(std::__shared_weak_count **)(v18 + 8);
      *(_OWORD *)uint64_t v18 = v19;
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    uint64_t v21 = a1[1];
    uint64_t v22 = *(std::__shared_weak_count **)(v21 - 8);
    if (v22) {
      std::__shared_weak_count::__release_weak(v22);
    }
    a1[1] = v21 - 16;
    --v6;
    if (!v9) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
}

void sub_221F73390(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

Phase::Logger *Phase::Geometry::System::GetCurrentState@<X0>(Phase::Geometry::System *this@<X0>, void *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t result = (Phase::Logger *)pthread_self();
  unint64_t v5 = (Phase::Logger *)*((void *)this + 342);
  if (result)
  {
    if (v5) {
      BOOL v6 = result == v5;
    }
    else {
      BOOL v6 = 0;
    }
    if (!v6)
    {
LABEL_11:
      uint64_t v8 = **(id **)(Phase::Logger::GetInstance(result) + 416);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        uint64_t v11 = "GeoSystem.mm";
        __int16 v12 = 1024;
        int v13 = 374;
        _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Calling Geometry::System::GetCurrentState() outside the main update thread is unsafe.\"", (uint8_t *)&v10, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Calling Geometry::System::GetCurrentState() outside the main update thread is unsafe.");
    }
  }
  else if (v5)
  {
    goto LABEL_11;
  }
  uint64_t v7 = *((void *)this + 341);
  *a2 = *((void *)this + 340);
  a2[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_221F734DC(_Unwind_Exception *exception_object)
{
}

void *Phase::Geometry::System::ObserveSystemState@<X0>(Phase::Geometry::System *this@<X0>, long long *a2@<X8>)
{
  return std::vector<std::weak_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>>::emplace_back<std::shared_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>> const&>((unint64_t *)this + 291, a2);
}

void sub_221F7354C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::System::AddNewReleaseRequest()
{
}

void Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::ReleaseAndBlockSlot(uint64_t a1, uint64_t a2)
{
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::GetUniqueSlot(a1, a2);
  if (UniqueSlot)
  {
    ++*(_DWORD *)(UniqueSlot + 20);
    uint64_t v3 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(void *)uint64_t UniqueSlot = 0;
    *(void *)(UniqueSlot + 8) = 0;
    if (v3)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

void Phase::Geometry::System::System(Phase::Geometry::System *this, Phase::JobManager *a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *(void *)((char *)this + 20) = 0xFFFFFFFFLL;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 32));
  *((void *)this + 25) = 0;
  *((void *)this + 26) = this;
  *((void *)this + 27) = this;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *(_OWORD *)((char *)this + 252) = 0u;
  *(void *)((char *)this + 268) = 0xFFFFFFFFLL;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 280));
  *((void *)this + 56) = 0;
  *((void *)this + 57) = this;
  *((void *)this + 58) = this;
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 63) = 0;
  *((void *)this + 64) = 0;
  *((void *)this + 62) = this;
  *((_DWORD *)this + 130) = 0;
  *(void *)((char *)this + 524) = 0xFFFFFFFFLL;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 536));
  *((void *)this + 88) = 0;
  *((void *)this + 89) = this;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *(_OWORD *)((char *)this + 748) = 0u;
  *(void *)((char *)this + 764) = 0xFFFFFFFFLL;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 776));
  *((void *)this + 118) = 0;
  *((void *)this + 119) = this;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 996) = 0u;
  *((void *)this + 120) = this;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(void *)((char *)this + 1012) = 0xFFFFFFFFLL;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 1024));
  *((void *)this + 149) = 0;
  *((void *)this + 150) = this;
  *((void *)this + 151) = this;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *(_OWORD *)((char *)this + 1244) = 0u;
  *(void *)((char *)this + 1260) = 0xFFFFFFFFLL;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 1272));
  *((void *)this + 180) = 0;
  *((void *)this + 181) = this;
  *((void *)this + 274) = 0;
  bzero((char *)this + 1456, 0x2DCuLL);
  int v4 = Phase::SpatialModeler::TRAP::TP(v3);
  *((_DWORD *)this + 550) = *((_DWORD *)v4 + 101);
  unint64_t v5 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v4);
  *((unsigned char *)this + 2204) = v5[508];
  BOOL v6 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v5);
  *((_DWORD *)this + 552) = *((_DWORD *)v6 + 102);
  *(_OWORD *)((char *)this + 2216) = 0u;
  *((_DWORD *)this + 558) = 0;
  *(void *)((char *)this + 2236) = 1065353216;
  *((unsigned char *)this + 2244) = 0;
  *((void *)this + 281) = 0;
  *((void *)this + 282) = -1;
  *((void *)this + 283) = -1;
  *((void *)this + 284) = -1;
  *((void *)this + 285) = this;
  *((void *)this + 286) = this;
  *((void *)this + 287) = 0;
  *((void *)this + 289) = 0;
  *((void *)this + 288) = 0;
  *((void *)this + 291) = 0;
  *((void *)this + 293) = 0;
  *((void *)this + 292) = 0;
  Phase::Logger::GetInstance((Phase::Logger *)v6);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable((void *)this + 294);
}

void sub_221F738D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v15 = *(std::__shared_weak_count **)(v10 + 1248);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  a10 = (void **)(v10 + 1216);
  std::vector<Phase::Geometry::ShapeTypeDefinition>::__destroy_vector::operator()[abi:ne180100](&a10);
  Phase::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64,Phase::Geometry::ShapeFactory>::~SharedSlotMap(v13);
  std::vector<Phase::Geometry::MaterialTypeDefinition>::__destroy_vector::operator()[abi:ne180100](&a10);
  Phase::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64,Phase::Geometry::ShapeFactory>::~SharedSlotMap(v12);
  a10 = (void **)(v10 + 720);
  std::vector<Phase::Geometry::MediumTypeDefinition>::__destroy_vector::operator()[abi:ne180100](&a10);
  Phase::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64,Phase::Geometry::ShapeFactory>::~SharedSlotMap(v11);
  a10 = (void **)(v10 + 472);
  std::vector<Phase::Geometry::DistanceModelTypeDefinition>::__destroy_vector::operator()[abi:ne180100](&a10);
  Phase::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64,Phase::Geometry::ShapeFactory>::~SharedSlotMap(a9);
  std::vector<Phase::Geometry::DirectivityTypeDefinition>::__destroy_vector::operator()[abi:ne180100](&a10);
  Phase::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64,Phase::Geometry::ShapeFactory>::~SharedSlotMap(v10);
  _Unwind_Resume(a1);
}

uint64_t *Phase::DataMessengerSPSC<std::shared_ptr<Phase::Geometry::SystemState>>::~DataMessengerSPSC(uint64_t *a1)
{
  std::vector<std::weak_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>>::__clear[abi:ne180100](a1);
  uint64_t v3 = (void **)a1;
  std::vector<std::weak_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void Phase::Geometry::SystemExecutor::~SystemExecutor(Phase::Geometry::SystemExecutor *this)
{
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);

  JUMPOUT(0x223C938A0);
}

void std::vector<std::weak_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    int v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<std::weak_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::weak_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Phase::Geometry::SceneQueryTypeDefinition>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 152;
        std::allocator<Phase::Geometry::SceneQueryTypeDefinition>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<Phase::Geometry::ShapeTypeDefinition>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<Phase::Geometry::ShapeTypeDefinition>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<Phase::Geometry::MaterialTypeDefinition>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<Phase::Geometry::MaterialTypeDefinition>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<Phase::Geometry::MediumTypeDefinition>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<Phase::Geometry::MediumTypeDefinition>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<Phase::Geometry::DistanceModelTypeDefinition>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<Phase::Geometry::DistanceModelTypeDefinition>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<Phase::Geometry::DirectivityTypeDefinition>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<Phase::Geometry::DirectivityTypeDefinition>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Phase::Geometry::System::~System(Phase::Geometry::System *this)
{
  uint64_t v2 = *((void *)this + 345);
  *((void *)this + 345) = 0;
  if (v2) {
    std::default_delete<Phase::Geometry::SystemDebugger>::operator()[abi:ne180100]((uint64_t)this + 2760, v2);
  }
  std::unique_ptr<Phase::Geometry::System::ReleaseRequest>::reset[abi:ne180100]((uint64_t *)this + 344, 0);
  std::unique_ptr<Phase::Geometry::System::ReleaseRequest>::reset[abi:ne180100]((uint64_t *)this + 343, 0);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 341);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v12 = (void **)((char *)this + 2696);
  std::vector<Phase::Geometry::MpsCpuSceneDescriptor>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 333);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 330);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  Phase::Geometry::MpsCpuSceneBuilder::~MpsCpuSceneBuilder((std::__shared_weak_count **)this + 308);
  uint64_t v12 = (void **)((char *)this + 2440);
  std::vector<std::shared_ptr<Phase::Geometry::MpsCpuScene>>::__destroy_vector::operator()[abi:ne180100](&v12);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable((void *)this + 294);
  std::vector<std::weak_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>>::__clear[abi:ne180100]((uint64_t *)this + 291);
  uint64_t v12 = (void **)((char *)this + 2328);
  std::vector<std::weak_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>>::__destroy_vector::operator()[abi:ne180100](&v12);
  uint64_t v12 = (void **)((char *)this + 2296);
  std::vector<Phase::Geometry::SceneQueryTypeDefinition>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 1384));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 1336));
  std::mutex::~mutex((std::mutex *)((char *)this + 1272));
  BOOL v6 = (std::__shared_weak_count *)*((void *)this + 156);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v12 = (void **)((char *)this + 1216);
  std::vector<Phase::Geometry::ShapeTypeDefinition>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 1136));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 1088));
  std::mutex::~mutex((std::mutex *)this + 16);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 125);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v12 = (void **)((char *)this + 968);
  std::vector<Phase::Geometry::MaterialTypeDefinition>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 888));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 840));
  std::mutex::~mutex((std::mutex *)((char *)this + 776));
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 94);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v12 = (void **)((char *)this + 720);
  std::vector<Phase::Geometry::MediumTypeDefinition>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 648));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 600));
  std::mutex::~mutex((std::mutex *)((char *)this + 536));
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v12 = (void **)((char *)this + 472);
  std::vector<Phase::Geometry::DistanceModelTypeDefinition>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 392));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 344));
  std::mutex::~mutex((std::mutex *)((char *)this + 280));
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v12 = (void **)((char *)this + 224);
  std::vector<Phase::Geometry::DirectivityTypeDefinition>::__destroy_vector::operator()[abi:ne180100](&v12);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 3);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 2);
  std::mutex::~mutex((std::mutex *)((char *)this + 32));
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void std::default_delete<Phase::Geometry::SystemDebugger>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::destroy(a2 + 104, *(void **)(a2 + 112));
    std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>>>::destroy(a2 + 16, *(void **)(a2 + 24));
    JUMPOUT(0x223C938A0);
  }
}

void std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<Phase::Handle64 const,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,0>(a2 + 4);
    operator delete(a2);
  }
}

void *std::__destroy_at[abi:ne180100]<std::pair<Phase::Handle64 const,Phase::SpatialModeler::RoomSimulationDebugger::EntityDebugInfo>,0>(void *a1)
{
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100](a1 + 23);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100](a1 + 19);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100](a1 + 15);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100](a1 + 11);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100](a1 + 7);

  return std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100](a1 + 3);
}

void std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::__map_value_compare<Phase::Handle64,std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>,std::less<Phase::Handle64>,true>,std::allocator<std::__value_type<Phase::Handle64,Phase::SpatialModeler::DirectPathTransmissionDebugger::SourceDebugInfo>>>::destroy(a1, a2[1]);
    std::__function::__value_func<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>::~__value_func[abi:ne180100](a2 + 11);
    std::__function::__value_func<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>::~__value_func[abi:ne180100](a2 + 7);
    operator delete(a2);
  }
}

void std::vector<Phase::Geometry::MpsCpuSceneDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::Geometry::MpsCpuSceneDescriptor>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t *std::unique_ptr<Phase::Geometry::System::ReleaseRequest>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::Geometry::System::ReleaseRequest>::reset[abi:ne180100](v2 + 16, 0);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::Release(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = a2;
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::GetUniqueSlot(a1, a2);
  if (UniqueSlot)
  {
    uint64_t v5 = UniqueSlot;
    ++*(_DWORD *)(UniqueSlot + 20);
    BOOL v6 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    unsigned int v7 = atomic_load((unsigned int *)(a1 + 20));
    *(_DWORD *)(v5 + 16) = v7;
    unsigned int v8 = v7;
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 20), &v8, v2);
    if (v8 != v7)
    {
      unsigned int v9 = v8;
      do
      {
        *(_DWORD *)(v5 + 16) = v8;
        atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 20), &v9, v2);
        BOOL v10 = v9 == v8;
        unsigned int v8 = v9;
      }
      while (!v10);
    }
  }
}

void Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::UnblockSlot(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 16) > a2
    && *(_DWORD *)(*(void *)a1 + 24 * a2 + 20) - 1 == HIDWORD(a2))
  {
    unsigned int v2 = atomic_load((unsigned int *)(a1 + 20));
    uint64_t v3 = *(void *)a1 + 24 * a2;
    *(_DWORD *)(v3 + 16) = v2;
    uint64_t v4 = (unsigned int *)(v3 + 16);
    unsigned int v5 = v2;
    atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 20), &v5, a2);
    if (v5 != v2)
    {
      unsigned int v6 = v5;
      do
      {
        *uint64_t v4 = v5;
        atomic_compare_exchange_strong((atomic_uint *volatile)(a1 + 20), &v6, a2);
        BOOL v7 = v6 == v5;
        unsigned int v5 = v6;
      }
      while (!v7);
    }
  }
}

void std::__function::__func<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D477288;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D477288;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a2, *a3);
}

void std::__function::__func<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4772D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4772D0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Directivity> (*)(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Directivity> ()(Phase::Geometry::System &,Phase::Geometry::Directivity const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 8))(a2, a3, *a4);
}

void std::__function::__func<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D477318;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D477318;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a2, *a3);
}

void std::__function::__func<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D477360;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D477360;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::DistanceModel> (*)(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::DistanceModel> ()(Phase::Geometry::System &,Phase::Geometry::DistanceModel const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 8))(a2, a3, *a4);
}

void std::__function::__func<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Medium> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Medium> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4773A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Medium> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4773A8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Medium> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a2, *a3);
}

void std::__function::__func<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Medium> ()(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Medium> ()(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4773F0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Medium> ()(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4773F0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Medium> (*)(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Medium> ()(Phase::Geometry::System &,Phase::Geometry::Medium const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 8))(a2, a3, *a4);
}

void std::__function::__func<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Material> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Material> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D477438;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Material> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D477438;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Material> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a2, *a3);
}

void std::__function::__func<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Material> ()(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Material> ()(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D477480;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Material> ()(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D477480;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Material> (*)(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Material> ()(Phase::Geometry::System &,Phase::Geometry::Material const&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 8))(a2, a3, *a4);
}

void std::__function::__func<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4774C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4774C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 8))(a2, *a3);
}

void std::__function::__func<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D477510;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D477510;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Geometry::Shape&,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 8))(a2, a3, *a4);
}

void std::__function::__func<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D477558;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D477558;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *),std::allocator<std::shared_ptr<Phase::Geometry::Shape> (*)(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>,std::shared_ptr<Phase::Geometry::Shape> ()(Phase::Geometry::System &,Phase::Asset &,Phase::UnorderedStringMap<Phase::OptionsValue> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 8))(a2, a3, *a4);
}

void std::__function::__func<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&),std::allocator<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>,void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::~__func()
{
}

void *std::__function::__func<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&),std::allocator<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>,void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4775A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&),std::allocator<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>,void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4775A0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&),std::allocator<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>,void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQueryFunctionTable const&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4);
}

void std::__function::__func<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL),std::allocator<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>,void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::~__func()
{
}

void *std::__function::__func<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL),std::allocator<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>,void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4775E8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL),std::allocator<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>,void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4775E8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL),std::allocator<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>,void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,std::vector<std::function<void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>> const&,BOOL)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(a1 + 8))(a2, a3, a4, a5, *a6);
}

void std::__function::__func<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &),std::allocator<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>,void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::~__func()
{
}

void *std::__function::__func<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &),std::allocator<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>,void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D477630;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &),std::allocator<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>,void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D477630;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &),std::allocator<void (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>,void ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,Phase::Geometry::SceneQuery &,Phase::Geometry::SceneQueryShapeState &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 8))(a2, a3, a4, a5);
}

void std::__function::__func<BOOL (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int),std::allocator<BOOL (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>,BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::~__func()
{
}

void *std::__function::__func<BOOL (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int),std::allocator<BOOL (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>,BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D477678;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int),std::allocator<BOOL (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>,BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D477678;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int),std::allocator<BOOL (*)(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>,BOOL ()(Phase::Geometry::SystemState &,Phase::Geometry::SceneQueryBatch &,int,int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(a1 + 8))(a2, a3, *a4, *a5);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN5Phase8Geometry11SystemStateENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x420uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN5Phase8Geometry11SystemStateENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_221F74DAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN5Phase8Geometry11SystemStateENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D4776C0;
  Phase::Geometry::SystemState::SystemState((Phase::Geometry::SystemState *)(a1 + 3));
  return a1;
}

void sub_221F74E08(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::Geometry::SystemState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4776C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::Geometry::SystemState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4776C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_emplace<Phase::Geometry::SystemState>::__on_zero_shared(uint64_t a1)
{
  unsigned int v8 = (void **)(a1 + 1008);
  std::vector<std::shared_ptr<Phase::Geometry::MpsCpuScene>>::__destroy_vector::operator()[abi:ne180100](&v8);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 152);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 104);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unsigned int v5 = *(std::__shared_weak_count **)(a1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 56);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  BOOL v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

Phase::Geometry::SystemState *Phase::Geometry::SystemState::SystemState(Phase::Geometry::SystemState *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((_DWORD *)this + 10) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((_DWORD *)this + 28) = 0;
  *((_DWORD *)this + 34) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 110) = 0;
  bzero((char *)this + 144, 0x2DCuLL);
  uint64_t v3 = Phase::SpatialModeler::TRAP::TP(v2);
  *((_DWORD *)this + 222) = *((_DWORD *)v3 + 101);
  uint64_t v4 = Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v3);
  *((unsigned char *)this + 892) = v4[508];
  *((_DWORD *)this + 224) = *((_DWORD *)Phase::SpatialModeler::TRAP::TP((Phase::SpatialModeler::TRAP *)v4) + 102);
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_DWORD *)this + 230) = 0;
  *(void *)((char *)this + 924) = 1065353216;
  *((unsigned char *)this + 932) = 0;
  *((void *)this + 117) = 0;
  *((void *)this + 118) = -1;
  *((void *)this + 119) = -1;
  *((void *)this + 120) = -1;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 1016) = 0u;
  return this;
}

void sub_221F74FDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[16];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[13];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unsigned int v5 = (std::__shared_weak_count *)v1[10];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unsigned int v6 = (std::__shared_weak_count *)v1[7];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  BOOL v7 = (std::__shared_weak_count *)v1[4];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  unsigned int v8 = (std::__shared_weak_count *)v1[1];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN5Phase16DataObserverSPSCINS_10shared_ptrINS1_8Geometry11SystemStateEEEEENS_9allocatorIS7_EEJEvEENS3_IT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x90uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN5Phase16DataObserverSPSCINS_10shared_ptrINS1_8Geometry11SystemStateEEEEENS_9allocatorIS7_EEEC2B8ne180100IJES9_Li0EEES9_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_221F75068(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN5Phase16DataObserverSPSCINS_10shared_ptrINS1_8Geometry11SystemStateEEEEENS_9allocatorIS7_EEEC2B8ne180100IJES9_Li0EEES9_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26D4776F8;
  Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>::DataObserverSPSC((uint64_t)(a1 + 3));
  return a1;
}

void sub_221F750C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4776F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4776F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_emplace<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>::__on_zero_shared(uint64_t a1)
{
  for (uint64_t i = 120; i != 24; i -= 32)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + i);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

uint64_t Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>::DataObserverSPSC(uint64_t a1)
{
  uint64_t v2 = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(unsigned char *)(a1 + 48) = 0;
  do
  {
    uint64_t v3 = a1 + v2;
    *(void *)(a1 + v2 + 24) = 0;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + v2 + 32);
    *(void *)(a1 + v2 + 32) = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    *(unsigned char *)(v3 + 48) = 0;
    *(void *)(v3 + 40) = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = a1 + v2 + 24;
    v2 += 32;
  }
  while (v2 != 96);
  return a1;
}

void *std::vector<std::weak_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>>::emplace_back<std::shared_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>> const&>(unint64_t *a1, long long *a2)
{
  unint64_t v4 = a1[2];
  unsigned int v5 = (void *)a1[1];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *a1;
    uint64_t v9 = (uint64_t)((uint64_t)v5 - *a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    uint64_t v23 = a1 + 2;
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v13 = (char *)operator new(16 * v12);
    uint64_t v14 = &v13[16 * v9];
    long long v15 = *a2;
    *(_OWORD *)uint64_t v14 = *a2;
    if (*((void *)&v15 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 16), 1uLL, memory_order_relaxed);
      unint64_t v8 = *a1;
      unsigned int v5 = (void *)a1[1];
    }
    BOOL v7 = v14 + 16;
    if (v5 == (void *)v8)
    {
      int64x2_t v17 = vdupq_n_s64(v8);
    }
    else
    {
      do
      {
        long long v16 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v14 - 1) = v16;
        v14 -= 16;
        *unsigned int v5 = 0;
        v5[1] = 0;
      }
      while (v5 != (void *)v8);
      int64x2_t v17 = *(int64x2_t *)a1;
    }
    *a1 = (unint64_t)v14;
    a1[1] = (unint64_t)v7;
    int64x2_t v21 = v17;
    unint64_t v18 = a1[2];
    a1[2] = (unint64_t)&v13[16 * v12];
    unint64_t v22 = v18;
    uint64_t v20 = v17.i64[0];
    std::__split_buffer<std::weak_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>>::~__split_buffer((uint64_t)&v20);
  }
  else
  {
    *unsigned int v5 = *(void *)a2;
    uint64_t v6 = *((void *)a2 + 1);
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
    }
    BOOL v7 = v5 + 2;
  }
  a1[1] = (unint64_t)v7;
  return v7 - 2;
}

uint64_t std::__split_buffer<std::weak_ptr<Phase::DataObserverSPSC<std::shared_ptr<Phase::Geometry::SystemState>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    unint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::GetUniqueSlot(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 16) <= a2) {
    return 0;
  }
  unsigned int v3 = a2;
  uint64_t result = *(void *)a1 + 24 * a2;
  if (*(_DWORD *)(result + 20) != HIDWORD(a2)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    if (*(uint64_t *)(v5 + 8) >= 1)
    {
      Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::Realloc((uint64_t *)a1);
      return *(void *)a1 + 24 * v3;
    }
  }
  return result;
}

uint64_t Phase::Geometry::SystemDebugger::GetFromSystem(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 2760);
  if (!result) {
    operator new();
  }
  return result;
}

Phase::Logger *Phase::Geometry::SystemExecutor::Init(Phase::Logger *this, Phase::Geometry::System *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    uint64_t v2 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 416);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315394;
      uint64_t v5 = "GeoSystemExecutor.cpp";
      __int16 v6 = 1024;
      int v7 = 33;
      _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == inpSystem is true]: \"Null system pointer passed to SystemExecutor::Init\"", (uint8_t *)&v4, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null system pointer passed to SystemExecutor::Init");
  }
  *((void *)this + 5) = a2;
  return this;
}

void sub_221F755FC(_Unwind_Exception *exception_object)
{
}

void Phase::Geometry::SystemExecutor::Update(Phase::Geometry::SystemExecutor *this, float a2)
{
  uint64_t v3 = *((void *)this + 5);
  unsigned int v4 = atomic_load((unsigned int *)(v3 + 24));
  if (*(_DWORD *)(v3 + 16) < v4)
  {
    if (v4 >= 0x40) {
      unsigned int v5 = v4 + (v4 >> 1);
    }
    else {
      unsigned int v5 = 64;
    }
    Phase::details::SharedSlotMap<Phase::Geometry::Directivity,Phase::Handle64>::Resize((uint64_t *)v3, v5);
  }
  uint64_t v6 = *((void *)this + 5);
  unsigned int v7 = atomic_load((unsigned int *)(v6 + 272));
  if (*(_DWORD *)(v6 + 264) < v7)
  {
    if (v7 >= 0x40) {
      unsigned int v8 = v7 + (v7 >> 1);
    }
    else {
      unsigned int v8 = 64;
    }
    Phase::details::SharedSlotMap<Phase::Geometry::DistanceModel,Phase::Handle64>::Resize((uint64_t *)(v6 + 248), v8);
  }
  uint64_t v9 = *((void *)this + 5);
  unsigned int v10 = atomic_load((unsigned int *)(v9 + 528));
  if (*(_DWORD *)(v9 + 520) < v10)
  {
    if (v10 >= 0x40) {
      unsigned int v11 = v10 + (v10 >> 1);
    }
    else {
      unsigned int v11 = 64;
    }
    Phase::details::SharedSlotMap<Phase::Geometry::Medium,Phase::Handle64>::Resize((uint64_t *)(v9 + 504), v11);
  }
  uint64_t v12 = *((void *)this + 5);
  unsigned int v13 = atomic_load((unsigned int *)(v12 + 768));
  if (*(_DWORD *)(v12 + 760) < v13)
  {
    if (v13 >= 0x40) {
      unsigned int v14 = v13 + (v13 >> 1);
    }
    else {
      unsigned int v14 = 64;
    }
    Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::Resize((uint64_t *)(v12 + 744), v14);
  }
  uint64_t v15 = *((void *)this + 5);
  unsigned int v16 = atomic_load((unsigned int *)(v15 + 1016));
  if (*(_DWORD *)(v15 + 1008) < v16)
  {
    if (v16 >= 0x40) {
      unsigned int v17 = v16 + (v16 >> 1);
    }
    else {
      unsigned int v17 = 64;
    }
    Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::Resize((uint64_t *)(v15 + 992), v17);
  }
  uint64_t v18 = *((void *)this + 5);
  unsigned int v19 = atomic_load((unsigned int *)(v18 + 1264));
  if (*(_DWORD *)(v18 + 1256) < v19)
  {
    if (v19 >= 0x40) {
      unsigned int v20 = v19 + (v19 >> 1);
    }
    else {
      unsigned int v20 = 64;
    }
    Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::Resize((uint64_t *)(v18 + 1240), v20);
  }
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  int64x2_t v21 = (Phase::Geometry::System *)*((void *)this + 5);

  Phase::Geometry::System::BuildCurrentState(v21);
}

uint64_t Phase::Geometry::SystemExecutor::SetDefaulSceneMedium(uint64_t this, Handle64 a2)
{
  *(Handle64 *)(*(void *)(this + 40) + 1464) = a2;
  return this;
}

uint64_t Phase::Geometry::SystemExecutor::SetDefaultSceneReverbPreset(uint64_t this, uint64_t a2)
{
  *(void *)(*(void *)(this + 40) + 1472) = a2;
  return this;
}

void Phase::details::SharedSlotMap<Phase::Geometry::Directivity,Phase::Handle64>::Resize(uint64_t *a1, unsigned int a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  if (v2 < a2)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::Directivity,Phase::Handle64>::AllocSlots(a2, &v20);
    if (v2)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = *a1;
        unsigned int v7 = (uint64_t *)(*a1 + v5);
        uint64_t v8 = v20;
        uint64_t v10 = *v7;
        uint64_t v9 = v7[1];
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        unsigned int v11 = (void *)(v8 + v5);
        uint64_t v12 = *(std::__shared_weak_count **)(v8 + v5 + 8);
        *unsigned int v11 = v10;
        v11[1] = v9;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        v11[2] = *(void *)(v6 + v5 + 16);
        v5 += 24;
      }
      while (24 * v2 != v5);
      uint64_t v13 = v2;
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = 24 * v13;
    do
    {
      uint64_t v15 = (void *)(v20 + v14);
      unsigned int v16 = *(std::__shared_weak_count **)(v20 + v14 + 8);
      *uint64_t v15 = 0;
      v15[1] = 0;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      v15[2] = 0x1FFFFFFFFLL;
      LODWORD(v2) = v2 + 1;
      v14 += 24;
    }
    while (a2 != v2);
    uint64_t v18 = a1 + 4;
    char v19 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    long long v17 = *(_OWORD *)a1;
    *(_OWORD *)a1 = v20;
    long long v20 = v17;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    *((_DWORD *)a1 + 4) = a2;
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
  }
}

void sub_221F758CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void Phase::details::SharedSlotMap<Phase::Geometry::Directivity,Phase::Handle64>::AllocSlots(unint64_t a1@<X1>, void *a2@<X8>)
{
  if (a1)
  {
    is_mul_ok(a1, 0x18uLL);
    operator new[]();
  }
  *a2 = 0;
  a2[1] = 0;
}

void std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::Slot []>::shared_ptr[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::Slot,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_221F75A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::Slot>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::Slot>>::__on_zero_shared(uint64_t a1)
{
}

void Phase::details::SharedSlotMap<Phase::Geometry::DistanceModel,Phase::Handle64>::Resize(uint64_t *a1, unsigned int a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  if (v2 < a2)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::DistanceModel,Phase::Handle64>::AllocSlots(a2, &v20);
    if (v2)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = *a1;
        unsigned int v7 = (uint64_t *)(*a1 + v5);
        uint64_t v8 = v20;
        uint64_t v10 = *v7;
        uint64_t v9 = v7[1];
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        unsigned int v11 = (void *)(v8 + v5);
        uint64_t v12 = *(std::__shared_weak_count **)(v8 + v5 + 8);
        *unsigned int v11 = v10;
        v11[1] = v9;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        v11[2] = *(void *)(v6 + v5 + 16);
        v5 += 24;
      }
      while (24 * v2 != v5);
      uint64_t v13 = v2;
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = 24 * v13;
    do
    {
      uint64_t v15 = (void *)(v20 + v14);
      unsigned int v16 = *(std::__shared_weak_count **)(v20 + v14 + 8);
      *uint64_t v15 = 0;
      v15[1] = 0;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      v15[2] = 0x1FFFFFFFFLL;
      LODWORD(v2) = v2 + 1;
      v14 += 24;
    }
    while (a2 != v2);
    uint64_t v18 = a1 + 4;
    char v19 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    long long v17 = *(_OWORD *)a1;
    *(_OWORD *)a1 = v20;
    long long v20 = v17;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    *((_DWORD *)a1 + 4) = a2;
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
  }
}

void sub_221F75BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void Phase::details::SharedSlotMap<Phase::Geometry::DistanceModel,Phase::Handle64>::AllocSlots(unint64_t a1@<X1>, void *a2@<X8>)
{
  if (a1)
  {
    is_mul_ok(a1, 0x18uLL);
    operator new[]();
  }
  *a2 = 0;
  a2[1] = 0;
}

void std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::DistanceModel,Phase::Handle64>::Slot []>::shared_ptr[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::DistanceModel,Phase::Handle64>::Slot,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_221F75CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::DistanceModel,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::DistanceModel,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::DistanceModel,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::DistanceModel,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::DistanceModel,Phase::Handle64>::Slot>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::DistanceModel,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::DistanceModel,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::DistanceModel,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::DistanceModel,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::DistanceModel,Phase::Handle64>::Slot>>::__on_zero_shared(uint64_t a1)
{
}

void Phase::details::SharedSlotMap<Phase::Geometry::Medium,Phase::Handle64>::Resize(uint64_t *a1, unsigned int a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  if (v2 < a2)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::Medium,Phase::Handle64>::AllocSlots(a2, &v20);
    if (v2)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = *a1;
        unsigned int v7 = (uint64_t *)(*a1 + v5);
        uint64_t v8 = v20;
        uint64_t v10 = *v7;
        uint64_t v9 = v7[1];
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        unsigned int v11 = (void *)(v8 + v5);
        uint64_t v12 = *(std::__shared_weak_count **)(v8 + v5 + 8);
        *unsigned int v11 = v10;
        v11[1] = v9;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        v11[2] = *(void *)(v6 + v5 + 16);
        v5 += 24;
      }
      while (24 * v2 != v5);
      uint64_t v13 = v2;
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = 24 * v13;
    do
    {
      uint64_t v15 = (void *)(v20 + v14);
      unsigned int v16 = *(std::__shared_weak_count **)(v20 + v14 + 8);
      *uint64_t v15 = 0;
      v15[1] = 0;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      v15[2] = 0x1FFFFFFFFLL;
      LODWORD(v2) = v2 + 1;
      v14 += 24;
    }
    while (a2 != v2);
    uint64_t v18 = a1 + 4;
    char v19 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    long long v17 = *(_OWORD *)a1;
    *(_OWORD *)a1 = v20;
    long long v20 = v17;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    *((_DWORD *)a1 + 4) = a2;
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
  }
}

void sub_221F75E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void Phase::details::SharedSlotMap<Phase::Geometry::Medium,Phase::Handle64>::AllocSlots(unint64_t a1@<X1>, void *a2@<X8>)
{
  if (a1)
  {
    is_mul_ok(a1, 0x18uLL);
    operator new[]();
  }
  *a2 = 0;
  a2[1] = 0;
}

void std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Medium,Phase::Handle64>::Slot []>::shared_ptr[abi:ne180100]<Phase::SharedSlotMapState<Phase::Geometry::Medium,Phase::Handle64>::Slot,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_221F75FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<Phase::SharedSlotMapState<Phase::Geometry::Entity,Phase::Handle64>::Slot>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::Medium,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Medium,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::Medium,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::Medium,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::Medium,Phase::Handle64>::Slot>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void std::__shared_ptr_pointer<Phase::SharedSlotMapState<Phase::Geometry::Medium,Phase::Handle64>::Slot *,std::shared_ptr<Phase::SharedSlotMapState<Phase::Geometry::Medium,Phase::Handle64>::Slot[]>::__shared_ptr_default_delete<Phase::SharedSlotMapState<Phase::Geometry::Medium,Phase::Handle64>::Slot[],Phase::SharedSlotMapState<Phase::Geometry::Medium,Phase::Handle64>::Slot>,std::allocator<Phase::SharedSlotMapState<Phase::Geometry::Medium,Phase::Handle64>::Slot>>::__on_zero_shared(uint64_t a1)
{
}

void Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::Resize(uint64_t *a1, unsigned int a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 4);
  if (v2 < a2)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::AllocSlots(a2, &v20);
    if (v2)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = *a1;
        unsigned int v7 = (uint64_t *)(*a1 + v5);
        uint64_t v8 = v20;
        uint64_t v10 = *v7;
        uint64_t v9 = v7[1];
        if (v9) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
        }
        unsigned int v11 = (void *)(v8 + v5);
        uint64_t v12 = *(std::__shared_weak_count **)(v8 + v5 + 8);
        *unsigned int v11 = v10;
        v11[1] = v9;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        v11[2] = *(void *)(v6 + v5 + 16);
        v5 += 24;
      }
      while (24 * v2 != v5);
      uint64_t v13 = v2;
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = 24 * v13;
    do
    {
      uint64_t v15 = (void *)(v20 + v14);
      unsigned int v16 = *(std::__shared_weak_count **)(v20 + v14 + 8);
      *uint64_t v15 = 0;
      v15[1] = 0;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      v15[2] = 0x1FFFFFFFFLL;
      LODWORD(v2) = v2 + 1;
      v14 += 24;
    }
    while (a2 != v2);
    uint64_t v18 = a1 + 4;
    char v19 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    long long v17 = *(_OWORD *)a1;
    *(_OWORD *)a1 = v20;
    long long v20 = v17;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    *((_DWORD *)a1 + 4) = a2;
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
  }
}

void sub_221F7616C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

Phase::Logger *Phase::Geometry::SystemScheduler::Init(Phase::Geometry::SystemScheduler *this, Phase::Geometry::System *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    uint64_t v3 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 416);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "GeoSystemScheduler.cpp";
      __int16 v7 = 1024;
      int v8 = 35;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == inpSystem is true]: \"Null system pointer passed to SystemScheduler::Init\"", (uint8_t *)&v5, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null system pointer passed to SystemScheduler::Init");
  }
  *((void *)this + 6) = a2;

  return Phase::Geometry::SystemExecutor::Init(this, a2);
}

void sub_221F76290(_Unwind_Exception *exception_object)
{
}

void Phase::Geometry::SystemScheduler::Update(Phase::Geometry::SystemScheduler *this, float a2)
{
  uint64_t Instance = Phase::Logger::GetInstance(this);
  int v5 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 896));
  uint64_t v6 = (Phase::Logger *)Phase::Logger::GetInstance(v5);
  if (*((unsigned char *)v6 + 904))
  {
    uint64_t v7 = Phase::Logger::GetInstance(v6);
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v8 = **(NSObject ***)(v7 + 896);
      if (os_signpost_enabled(v8))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_221E5E000, v8, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v5, "Phase_GeometrySystemScheduler_Update", "Geometry System Scheduler Update", buf, 2u);
      }
    }
  }
  Phase::Geometry::SystemExecutor::Update(this, a2);
  uint64_t v10 = (Phase::Logger *)Phase::Logger::GetInstance(v9);
  if (*((unsigned char *)v10 + 904))
  {
    uint64_t v11 = Phase::Logger::GetInstance(v10);
    if ((unint64_t)v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v12 = **(NSObject ***)(v11 + 896);
      if (os_signpost_enabled(v12))
      {
        *(_WORD *)uint64_t v13 = 0;
        _os_signpost_emit_with_name_impl(&dword_221E5E000, v12, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v5, "Phase_GeometrySystemScheduler_Update", (const char *)&unk_222112ABB, v13, 2u);
      }
    }
  }
}

unint64_t Phase::Geometry::SystemScheduler::AddToDatabase(uint64_t a1, uint64_t *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(uint64_t **)(a1 + 48);
  unsigned int v5 = atomic_load((unsigned int *)v4 + 5);
  if (v5 == -1)
  {
LABEL_6:
    unint64_t v8 = atomic_fetch_add((atomic_uint *volatile)v4 + 6, 1u) | 0x100000000;
  }
  else
  {
    *(void *)buf = v4 + 4;
    buf[8] = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v4 + 4));
    unsigned int v6 = v5;
    while (1)
    {
      uint64_t v7 = *v4;
      atomic_compare_exchange_strong((atomic_uint *volatile)v4 + 5, &v6, *(_DWORD *)(*v4 + 24 * v5 + 16));
      if (v6 == v5) {
        break;
      }
      unsigned int v5 = v6;
      if (v6 == -1)
      {
        std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
        goto LABEL_6;
      }
    }
    Phase::Handle64::Set((Phase::Logger *)&v20, v5, *(unsigned int *)(v7 + 24 * v5 + 20));
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
    unint64_t v8 = v20;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = **(void **)(a1 + 8);
  unint64_t v20 = 0;
  BOOL v19 = 1;
  uint64_t v13 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v12, 40, &v20, &v19);
  if (!v13)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    long long v17 = **(NSObject ***)(v12 + 48);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
      __int16 v22 = 1024;
      int v23 = 100;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v19)
  {
    uint64_t v14 = **(NSObject ***)(v12 + 48);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
      __int16 v22 = 1024;
      int v23 = 89;
      __int16 v24 = 2048;
      unint64_t v25 = v20;
      __int16 v26 = 2048;
      uint64_t v27 = 40;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v13 = &unk_26D4777D8;
  v13[1] = v9;
  v13[2] = v8;
  v13[3] = v11;
  void v13[4] = v10;
  Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v12, 40);
  atomic_store(0, (unsigned __int8 *)(v12 + 40));
  return v8;
}

{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  Phase::Logger *Instance;
  NSObject *v17;
  std::runtime_error *exception;
  BOOL v19;
  unint64_t v20;
  unsigned char buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(void *)(a1 + 48);
  unsigned int v5 = atomic_load((unsigned int *)(v4 + 268));
  if (v5 == -1)
  {
LABEL_6:
    unint64_t v8 = atomic_fetch_add((atomic_uint *volatile)(v4 + 272), 1u) | 0x100000000;
  }
  else
  {
    *(void *)buf = v4 + 280;
    buf[8] = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v4 + 280));
    unsigned int v6 = v5;
    while (1)
    {
      uint64_t v7 = *(void *)(v4 + 248);
      atomic_compare_exchange_strong((atomic_uint *volatile)(v4 + 268), &v6, *(_DWORD *)(v7 + 24 * v5 + 16));
      if (v6 == v5) {
        break;
      }
      unsigned int v5 = v6;
      if (v6 == -1)
      {
        std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
        goto LABEL_6;
      }
    }
    Phase::Handle64::Set((Phase::Logger *)&v20, v5, *(unsigned int *)(v7 + 24 * v5 + 20));
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
    unint64_t v8 = v20;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = **(void **)(a1 + 8);
  unint64_t v20 = 0;
  BOOL v19 = 1;
  uint64_t v13 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v12, 40, &v20, &v19);
  if (!v13)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    long long v17 = **(NSObject ***)(v12 + 48);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
      __int16 v22 = 1024;
      int v23 = 100;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v19)
  {
    uint64_t v14 = **(NSObject ***)(v12 + 48);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
      __int16 v22 = 1024;
      int v23 = 89;
      __int16 v24 = 2048;
      unint64_t v25 = v20;
      __int16 v26 = 2048;
      uint64_t v27 = 40;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v13 = &unk_26D477800;
  v13[1] = v9;
  v13[2] = v8;
  v13[3] = v11;
  void v13[4] = v10;
  Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v12, 40);
  atomic_store(0, (unsigned __int8 *)(v12 + 40));
  return v8;
}

{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  Phase::Logger *Instance;
  NSObject *v17;
  std::runtime_error *exception;
  BOOL v19;
  unint64_t v20;
  unsigned char buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(void *)(a1 + 48);
  unsigned int v5 = atomic_load((unsigned int *)(v4 + 764));
  if (v5 == -1)
  {
LABEL_6:
    unint64_t v8 = atomic_fetch_add((atomic_uint *volatile)(v4 + 768), 1u) | 0x100000000;
  }
  else
  {
    *(void *)buf = v4 + 776;
    buf[8] = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v4 + 776));
    unsigned int v6 = v5;
    while (1)
    {
      uint64_t v7 = *(void *)(v4 + 744);
      atomic_compare_exchange_strong((atomic_uint *volatile)(v4 + 764), &v6, *(_DWORD *)(v7 + 24 * v5 + 16));
      if (v6 == v5) {
        break;
      }
      unsigned int v5 = v6;
      if (v6 == -1)
      {
        std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
        goto LABEL_6;
      }
    }
    Phase::Handle64::Set((Phase::Logger *)&v20, v5, *(unsigned int *)(v7 + 24 * v5 + 20));
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
    unint64_t v8 = v20;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = **(void **)(a1 + 8);
  unint64_t v20 = 0;
  BOOL v19 = 1;
  uint64_t v13 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v12, 40, &v20, &v19);
  if (!v13)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    long long v17 = **(NSObject ***)(v12 + 48);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
      __int16 v22 = 1024;
      int v23 = 100;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v19)
  {
    uint64_t v14 = **(NSObject ***)(v12 + 48);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
      __int16 v22 = 1024;
      int v23 = 89;
      __int16 v24 = 2048;
      unint64_t v25 = v20;
      __int16 v26 = 2048;
      uint64_t v27 = 40;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v13 = &unk_26D477828;
  v13[1] = v9;
  v13[2] = v8;
  v13[3] = v11;
  void v13[4] = v10;
  Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v12, 40);
  atomic_store(0, (unsigned __int8 *)(v12 + 40));
  return v8;
}

{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  Phase::Logger *Instance;
  NSObject *v17;
  std::runtime_error *exception;
  BOOL v19;
  unint64_t v20;
  unsigned char buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(void *)(a1 + 48);
  unsigned int v5 = atomic_load((unsigned int *)(v4 + 524));
  if (v5 == -1)
  {
LABEL_6:
    unint64_t v8 = atomic_fetch_add((atomic_uint *volatile)(v4 + 528), 1u) | 0x100000000;
  }
  else
  {
    *(void *)buf = v4 + 536;
    buf[8] = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v4 + 536));
    unsigned int v6 = v5;
    while (1)
    {
      uint64_t v7 = *(void *)(v4 + 504);
      atomic_compare_exchange_strong((atomic_uint *volatile)(v4 + 524), &v6, *(_DWORD *)(v7 + 24 * v5 + 16));
      if (v6 == v5) {
        break;
      }
      unsigned int v5 = v6;
      if (v6 == -1)
      {
        std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
        goto LABEL_6;
      }
    }
    Phase::Handle64::Set((Phase::Logger *)&v20, v5, *(unsigned int *)(v7 + 24 * v5 + 20));
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
    unint64_t v8 = v20;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = **(void **)(a1 + 8);
  unint64_t v20 = 0;
  BOOL v19 = 1;
  uint64_t v13 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v12, 40, &v20, &v19);
  if (!v13)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    long long v17 = **(NSObject ***)(v12 + 48);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
      __int16 v22 = 1024;
      int v23 = 100;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v19)
  {
    uint64_t v14 = **(NSObject ***)(v12 + 48);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
      __int16 v22 = 1024;
      int v23 = 89;
      __int16 v24 = 2048;
      unint64_t v25 = v20;
      __int16 v26 = 2048;
      uint64_t v27 = 40;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v13 = &unk_26D477850;
  v13[1] = v9;
  v13[2] = v8;
  v13[3] = v11;
  void v13[4] = v10;
  Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v12, 40);
  atomic_store(0, (unsigned __int8 *)(v12 + 40));
  return v8;
}

{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  Phase::Logger *Instance;
  NSObject *v17;
  std::runtime_error *exception;
  BOOL v19;
  unint64_t v20;
  unsigned char buf[12];
  __int16 v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v28 = *MEMORY[0x263EF8340];
  unsigned int v4 = *(void *)(a1 + 48);
  unsigned int v5 = atomic_load((unsigned int *)(v4 + 1260));
  if (v5 == -1)
  {
LABEL_6:
    unint64_t v8 = atomic_fetch_add((atomic_uint *volatile)(v4 + 1264), 1u) | 0x100000000;
  }
  else
  {
    *(void *)buf = v4 + 1272;
    buf[8] = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v4 + 1272));
    unsigned int v6 = v5;
    while (1)
    {
      uint64_t v7 = *(void *)(v4 + 1240);
      atomic_compare_exchange_strong((atomic_uint *volatile)(v4 + 1260), &v6, *(_DWORD *)(v7 + 24 * v5 + 16));
      if (v6 == v5) {
        break;
      }
      unsigned int v5 = v6;
      if (v6 == -1)
      {
        std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
        goto LABEL_6;
      }
    }
    Phase::Handle64::Set((Phase::Logger *)&v20, v5, *(unsigned int *)(v7 + 24 * v5 + 20));
    std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)buf);
    unint64_t v8 = v20;
  }
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = **(void **)(a1 + 8);
  unint64_t v20 = 0;
  BOOL v19 = 1;
  uint64_t v13 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v12, 40, &v20, &v19);
  if (!v13)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    long long v17 = **(NSObject ***)(v12 + 48);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
      __int16 v22 = 1024;
      int v23 = 100;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v19)
  {
    uint64_t v14 = **(NSObject ***)(v12 + 48);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "CommandQueue.hpp";
      __int16 v22 = 1024;
      int v23 = 89;
      __int16 v24 = 2048;
      unint64_t v25 = v20;
      __int16 v26 = 2048;
      uint64_t v27 = 40;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v13 = &unk_26D4778A0;
  v13[1] = v9;
  v13[2] = v8;
  v13[3] = v11;
  void v13[4] = v10;
  Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v12, 40);
  atomic_store(0, (unsigned __int8 *)(v12 + 40));
  return v8;
}

void sub_221F76694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    __cxa_free_exception(v13);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v12);
    __cxa_end_catch();
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    JUMPOUT(0x221F765A8);
  }
  _Unwind_Resume(exception_object);
}

void sub_221F766E8()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x221F766B4);
}

void sub_221F76708(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x221F766B4);
}

void sub_221F769DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    __cxa_free_exception(v13);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v12);
    __cxa_end_catch();
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    JUMPOUT(0x221F768F0);
  }
  _Unwind_Resume(exception_object);
}

void sub_221F76A30()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x221F769FCLL);
}

void sub_221F76A50(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x221F769FCLL);
}

void sub_221F76D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    __cxa_free_exception(v13);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v12);
    __cxa_end_catch();
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    JUMPOUT(0x221F76C38);
  }
  _Unwind_Resume(exception_object);
}

void sub_221F76D78()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x221F76D44);
}

void sub_221F76D98(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x221F76D44);
}

void sub_221F7706C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    __cxa_free_exception(v13);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v12);
    __cxa_end_catch();
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    JUMPOUT(0x221F76F80);
  }
  _Unwind_Resume(exception_object);
}

void sub_221F770C0()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x221F7708CLL);
}

void sub_221F770E0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x221F7708CLL);
}

uint64_t Phase::Geometry::SystemScheduler::AddToDatabase(uint64_t a1, uint64_t *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t Handle = Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::AllocateHandle((uint64_t *)(*(void *)(a1 + 48) + 992));
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = **(void **)(a1 + 8);
  unint64_t v16 = 0;
  BOOL v15 = 1;
  uint64_t v9 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v8, 40, &v16, &v15);
  if (!v9)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v13 = **(NSObject ***)(v8 + 48);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 100;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    uint64_t v10 = **(NSObject ***)(v8 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      uint64_t v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 89;
      __int16 v21 = 2048;
      unint64_t v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = 40;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v9 = &unk_26D477878;
  v9[1] = v5;
  v9[2] = Handle;
  v9[3] = v7;
  v9[4] = v6;
  Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return Handle;
}

void sub_221F7732C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v4);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v3);
    __cxa_end_catch();
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    JUMPOUT(0x221F77240);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::AllocateHandle(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)a1 + 5);
  if (v2 == -1) {
    return atomic_fetch_add((atomic_uint *volatile)a1 + 6, 1u) | 0x100000000;
  }
  uint64_t v6 = a1 + 4;
  char v7 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(a1 + 4));
  unsigned int v3 = v2;
  while (1)
  {
    uint64_t v4 = *a1;
    atomic_compare_exchange_strong((atomic_uint *volatile)a1 + 5, &v3, *(_DWORD *)(*a1 + 24 * v2 + 16));
    if (v3 == v2) {
      break;
    }
    unsigned int v2 = v3;
    if (v3 == -1)
    {
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v6);
      return atomic_fetch_add((atomic_uint *volatile)a1 + 6, 1u) | 0x100000000;
    }
  }
  Phase::Handle64::Set((Phase::Logger *)&v8, v2, *(unsigned int *)(v4 + 24 * v2 + 20));
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v6);
  return v8;
}

void sub_221F77460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_221F77738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    __cxa_free_exception(v13);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v12);
    __cxa_end_catch();
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    JUMPOUT(0x221F7764CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_221F7778C()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x221F77758);
}

void sub_221F777AC(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x221F77758);
}

void Phase::Geometry::SystemScheduler::AddShapes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(void *)&long long v14 = *(void *)(a1 + 48);
  *((void *)&v14 + 1) = a2;
  __dst[1] = 0;
  uint64_t v16 = 0;
  __dst[0] = 0;
  uint64_t v5 = *(const void **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  int64_t v6 = v4 - *(void *)a3;
  if (v4 != *(void *)a3)
  {
    std::vector<Phase::FrequencyBand<float>>::__vallocate[abi:ne180100](__dst, v6 >> 3);
    char v7 = (char *)__dst[1];
    memmove(__dst[1], v5, v6);
    __dst[1] = &v7[8 * (v6 >> 3)];
  }
  uint64_t v8 = **(void **)(a1 + 8);
  unint64_t v18 = 0;
  BOOL v17 = 1;
  uint64_t v9 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v8, 48, &v18, &v17);
  if (!v9)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v12 = **(NSObject ***)(v8 + 48);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v20 = "CommandQueue.hpp";
      __int16 v21 = 1024;
      int v22 = 100;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v17)
  {
    uint64_t v10 = **(NSObject ***)(v8 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      int v20 = "CommandQueue.hpp";
      __int16 v21 = 1024;
      int v22 = 89;
      __int16 v23 = 2048;
      unint64_t v24 = v18;
      __int16 v25 = 2048;
      uint64_t v26 = 48;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v9 = &unk_26D4778C8;
  *(_OWORD *)(v9 + 8) = v14;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)__dst;
  *(void *)(v9 + 40) = v16;
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v16 = 0;
  Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v8, 48);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
}

void sub_221F77A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (a2)
  {
    __cxa_free_exception(v14);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v13);
    __cxa_end_catch();
    JUMPOUT(0x221F77944);
  }
  _Unwind_Resume(exception_object);
}

void sub_221F77A8C()
{
}

void sub_221F77A98(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x221F77A60);
}

uint64_t Phase::Geometry::SystemScheduler::Copy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t Handle = Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::AllocateHandle((uint64_t *)(*(void *)(a1 + 48) + 992));
  *(void *)&long long v14 = *(void *)(a1 + 48);
  *((void *)&v14 + 1) = a2;
  long long __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  uint64_t v7 = **(void **)(a1 + 8);
  unint64_t v19 = 0;
  BOOL v18 = 1;
  uint64_t v8 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v7, 56, &v19, &v18);
  if (!v8)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v12 = **(NSObject ***)(v7 + 48);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v21 = "CommandQueue.hpp";
      __int16 v22 = 1024;
      int v23 = 100;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v18)
  {
    uint64_t v9 = **(NSObject ***)(v7 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v21 = "CommandQueue.hpp";
      __int16 v22 = 1024;
      int v23 = 89;
      __int16 v24 = 2048;
      unint64_t v25 = v19;
      __int16 v26 = 2048;
      uint64_t v27 = 56;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v8 = &unk_26D4778F0;
  *(void *)(v8 + 24) = Handle;
  *(_OWORD *)(v8 + 8) = v14;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 32) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v8 + 32), __p, (uint64_t)v16, (v16 - (unsigned char *)__p) >> 2);
  Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v7, 56);
  atomic_store(0, (unsigned __int8 *)(v7 + 40));
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  return Handle;
}

void sub_221F77D24(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F77C2CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_221F77D64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x221F77D3CLL);
}

void sub_221F77D88(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x221F77D3CLL);
}

uint64_t Phase::Geometry::SystemScheduler::SetMaterial(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = **(void **)(a1 + 8);
  unint64_t v16 = 0;
  BOOL v15 = 1;
  uint64_t v9 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v8, 40, &v16, &v15);
  if (!v9)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v13 = **(NSObject ***)(v8 + 48);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      BOOL v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 100;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v15)
  {
    uint64_t v10 = **(NSObject ***)(v8 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      BOOL v18 = "CommandQueue.hpp";
      __int16 v19 = 1024;
      int v20 = 89;
      __int16 v21 = 2048;
      unint64_t v22 = v16;
      __int16 v23 = 2048;
      uint64_t v24 = 40;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v9 = &unk_26D477918;
  v9[1] = v7;
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a4;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v8, 40);
  atomic_store(0, (unsigned __int8 *)(v8 + 40));
  return result;
}

void sub_221F77FB4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F77ECCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::SystemScheduler::SetDefaulSceneMedium(uint64_t result, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (a2)
  {
    uint64_t v2 = result;
    if (*(int *)(result + 16) <= 0)
    {
      uint64_t v7 = **(NSObject ***)(result + 24);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        BOOL v15 = "Commandable.hpp";
        __int16 v16 = 1024;
        int v17 = 132;
        _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.");
    }
    uint64_t v4 = **(void **)(result + 8);
    unint64_t v13 = 0;
    BOOL v12 = 1;
    uint64_t v5 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v4, 40, &v13, &v12);
    if (!v5)
    {
      uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
      Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
      uint64_t v10 = **(NSObject ***)(v4 + 48);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        BOOL v15 = "CommandQueue.hpp";
        __int16 v16 = 1024;
        int v17 = 100;
        _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffe"
          "r is full, unable to grow.\"",
          buf,
          0x12u);
      }
      uint64_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v11, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    }
    if (v12)
    {
      int64_t v6 = **(NSObject ***)(v4 + 48);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        BOOL v15 = "CommandQueue.hpp";
        __int16 v16 = 1024;
        int v17 = 89;
        __int16 v18 = 2048;
        unint64_t v19 = v13;
        __int16 v20 = 2048;
        uint64_t v21 = 40;
        _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
      }
    }
    *uint64_t v5 = &unk_26D477940;
    v5[1] = v2;
    v5[2] = Phase::Geometry::SystemExecutor::SetDefaulSceneMedium;
    v5[3] = 0;
    v5[4] = a2;
    uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v4, 40);
    atomic_store(0, (unsigned __int8 *)(v4 + 40));
  }
  return result;
}

void sub_221F782DC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F78158);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::SystemScheduler::SetDefaultSceneReverbPreset(Phase::Geometry::SystemScheduler *this, uint64_t a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*((int *)this + 4) <= 0)
  {
    uint64_t v8 = **((void **)this + 3);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v16 = "Commandable.hpp";
      __int16 v17 = 1024;
      int v18 = 132;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.");
  }
  uint64_t v4 = **((void **)this + 1);
  unint64_t v14 = 0;
  BOOL v13 = 1;
  uint64_t v5 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v4, 40, &v14, &v13);
  if (!v5)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v11 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 100;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    BOOL v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v13)
  {
    int64_t v6 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 89;
      __int16 v19 = 2048;
      unint64_t v20 = v14;
      __int16 v21 = 2048;
      uint64_t v22 = 40;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v5 = &unk_26D477968;
  v5[1] = this;
  v5[2] = Phase::Geometry::SystemExecutor::SetDefaultSceneReverbPreset;
  v5[3] = 0;
  v5[4] = a2;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v4, 40);
  atomic_store(0, (unsigned __int8 *)(v4 + 40));
  return result;
}

void sub_221F7860C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F78488);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::SystemScheduler::AddChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = **(void **)(a1 + 8);
  unint64_t v14 = 0;
  BOOL v13 = 1;
  uint64_t v7 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v6, 32, &v14, &v13);
  if (!v7)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v11 = **(NSObject ***)(v6 + 48);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 100;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v13)
  {
    uint64_t v8 = **(NSObject ***)(v6 + 48);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 89;
      __int16 v19 = 2048;
      unint64_t v20 = v14;
      __int16 v21 = 2048;
      uint64_t v22 = 32;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v7 = &unk_26D477990;
  v7[1] = v5;
  v7[2] = a2;
  v7[3] = a3;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v6, 32);
  atomic_store(0, (unsigned __int8 *)(v6 + 40));
  return result;
}

void sub_221F78884(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F787A0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::SystemScheduler::RemoveChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = **(void **)(a1 + 8);
  unint64_t v14 = 0;
  BOOL v13 = 1;
  uint64_t v7 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v6, 32, &v14, &v13);
  if (!v7)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v11 = **(NSObject ***)(v6 + 48);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 100;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v13)
  {
    uint64_t v8 = **(NSObject ***)(v6 + 48);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 89;
      __int16 v19 = 2048;
      unint64_t v20 = v14;
      __int16 v21 = 2048;
      uint64_t v22 = 32;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v7 = &unk_26D4779B8;
  v7[1] = v5;
  v7[2] = a2;
  v7[3] = a3;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v6, 32);
  atomic_store(0, (unsigned __int8 *)(v6 + 40));
  return result;
}

void sub_221F78AF0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F78A0CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::SystemScheduler::UpdateTransform(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 48);
  long long v12 = a3[1];
  long long v13 = *a3;
  uint64_t v5 = **(void **)(a1 + 8);
  unint64_t v15 = 0;
  BOOL v14 = 1;
  uint64_t v6 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v5, 56, &v15, &v14);
  if (!v6)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v10 = **(NSObject ***)(v5 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v17 = "CommandQueue.hpp";
      __int16 v18 = 1024;
      int v19 = 100;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v14)
  {
    uint64_t v7 = **(NSObject ***)(v5 + 48);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v17 = "CommandQueue.hpp";
      __int16 v18 = 1024;
      int v19 = 89;
      __int16 v20 = 2048;
      unint64_t v21 = v15;
      __int16 v22 = 2048;
      uint64_t v23 = 56;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v6 = &unk_26D4779E0;
  *(void *)(v6 + 8) = v4;
  *(void *)(v6 + 16) = a2;
  *(_OWORD *)(v6 + 24) = v13;
  *(_OWORD *)(v6 + 40) = v12;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v5, 56);
  atomic_store(0, (unsigned __int8 *)(v5 + 40));
  return result;
}

void sub_221F78D70(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F78C8CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::SystemScheduler::ReleaseDirectivity(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = **(void **)(a1 + 8);
  unint64_t v12 = 0;
  BOOL v11 = 1;
  uint64_t v5 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v4, 24, &v12, &v11);
  if (!v5)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v9 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      BOOL v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 100;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v11)
  {
    uint64_t v6 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      BOOL v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 89;
      __int16 v17 = 2048;
      unint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 24;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v5 = &unk_26D477A08;
  v5[1] = v3;
  v5[2] = a2;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v4, 24);
  atomic_store(0, (unsigned __int8 *)(v4 + 40));
  return result;
}

void sub_221F78FD8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F78EF4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::SystemScheduler::ReleaseDistanceModel(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = **(void **)(a1 + 8);
  unint64_t v12 = 0;
  BOOL v11 = 1;
  uint64_t v5 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v4, 24, &v12, &v11);
  if (!v5)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v9 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      BOOL v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 100;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v11)
  {
    uint64_t v6 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      BOOL v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 89;
      __int16 v17 = 2048;
      unint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 24;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v5 = &unk_26D477A30;
  v5[1] = v3;
  v5[2] = a2;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v4, 24);
  atomic_store(0, (unsigned __int8 *)(v4 + 40));
  return result;
}

void sub_221F79240(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F7915CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::SystemScheduler::ReleaseMedium(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = **(void **)(a1 + 8);
  unint64_t v12 = 0;
  BOOL v11 = 1;
  uint64_t v5 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v4, 24, &v12, &v11);
  if (!v5)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v9 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      BOOL v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 100;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v11)
  {
    uint64_t v6 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      BOOL v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 89;
      __int16 v17 = 2048;
      unint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 24;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v5 = &unk_26D477A58;
  v5[1] = v3;
  v5[2] = a2;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v4, 24);
  atomic_store(0, (unsigned __int8 *)(v4 + 40));
  return result;
}

void sub_221F794A8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F793C4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::SystemScheduler::ReleaseMaterial(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = **(void **)(a1 + 8);
  unint64_t v12 = 0;
  BOOL v11 = 1;
  uint64_t v5 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v4, 24, &v12, &v11);
  if (!v5)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v9 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      BOOL v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 100;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v11)
  {
    uint64_t v6 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      BOOL v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 89;
      __int16 v17 = 2048;
      unint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 24;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v5 = &unk_26D477A80;
  v5[1] = v3;
  v5[2] = a2;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v4, 24);
  atomic_store(0, (unsigned __int8 *)(v4 + 40));
  return result;
}

void sub_221F79710(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F7962CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::SystemScheduler::ReleaseShape(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = **(void **)(a1 + 8);
  unint64_t v12 = 0;
  BOOL v11 = 1;
  uint64_t v5 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v4, 24, &v12, &v11);
  if (!v5)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v9 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      BOOL v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 100;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v11)
  {
    uint64_t v6 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      BOOL v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 89;
      __int16 v17 = 2048;
      unint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 24;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v5 = &unk_26D477AA8;
  v5[1] = v3;
  v5[2] = a2;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v4, 24);
  atomic_store(0, (unsigned __int8 *)(v4 + 40));
  return result;
}

void sub_221F79978(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F79894);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Geometry::SystemScheduler::ReleaseEntity(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = **(void **)(a1 + 8);
  unint64_t v12 = 0;
  BOOL v11 = 1;
  uint64_t v5 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v4, 24, &v12, &v11);
  if (!v5)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v9 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      BOOL v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 100;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v11)
  {
    uint64_t v6 = **(NSObject ***)(v4 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      BOOL v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 89;
      __int16 v17 = 2048;
      unint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 24;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v5 = &unk_26D477AD0;
  v5[1] = v3;
  v5[2] = a2;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v4, 24);
  atomic_store(0, (unsigned __int8 *)(v4 + 40));
  return result;
}

void sub_221F79BE0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F79AFCLL);
  }
  _Unwind_Resume(exception_object);
}

void *Phase::Geometry::SystemScheduler::RunFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(Phase::Geometry::System *)>::__value_func[abi:ne180100]((uint64_t)v12, a2);
  uint64_t v13 = a1;
  uint64_t v3 = **(void **)(a1 + 8);
  unint64_t v11 = 0;
  BOOL v10 = 1;
  uint64_t v4 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v3, 48, &v11, &v10);
  if (!v4)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v8 = **(NSObject ***)(v3 + 48);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v15 = "CommandQueue.hpp";
      __int16 v16 = 1024;
      int v17 = 100;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v10)
  {
    uint64_t v5 = **(NSObject ***)(v3 + 48);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v15 = "CommandQueue.hpp";
      __int16 v16 = 1024;
      int v17 = 89;
      __int16 v18 = 2048;
      unint64_t v19 = v11;
      __int16 v20 = 2048;
      uint64_t v21 = 48;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v4 = &unk_26D477AF8;
  std::__function::__value_func<void ()(Phase::Geometry::System *)>::__value_func[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)v12);
  void v4[5] = v13;
  Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v3, 48);
  atomic_store(0, (unsigned __int8 *)(v3 + 40));
  return std::__function::__value_func<void ()(Phase::Geometry::System *)>::~__value_func[abi:ne180100](v12);
}

void sub_221F79E5C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F79D74);
  }
  _Unwind_Resume(exception_object);
}

void sub_221F79E9C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<void ()(Phase::Geometry::System *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  JUMPOUT(0x221F79E74);
}

void sub_221F79EB8(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x221F79E74);
}

void *Phase::Geometry::SystemScheduler::RunDebugFunction(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  std::__function::__value_func<void ()(Phase::Geometry::SystemDebugger *)>::__value_func[abi:ne180100]((uint64_t)v13, a2);
  uint64_t v3 = **(void **)(a1 + 8);
  unint64_t v11 = 0;
  BOOL v10 = 1;
  uint64_t v4 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v3, 48, &v11, &v10);
  if (!v4)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    uint64_t v8 = **(NSObject ***)(v3 + 48);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v15 = "CommandQueue.hpp";
      __int16 v16 = 1024;
      int v17 = 100;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v10)
  {
    uint64_t v5 = **(NSObject ***)(v3 + 48);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v15 = "CommandQueue.hpp";
      __int16 v16 = 1024;
      int v17 = 89;
      __int16 v18 = 2048;
      unint64_t v19 = v11;
      __int16 v20 = 2048;
      uint64_t v21 = 48;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *uint64_t v4 = &unk_26D477B20;
  v4[1] = v12;
  std::__function::__value_func<void ()(Phase::Geometry::SystemDebugger *)>::__value_func[abi:ne180100]((uint64_t)(v4 + 2), (uint64_t)v13);
  Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v3, 48);
  atomic_store(0, (unsigned __int8 *)(v3 + 40));
  return std::__function::__value_func<void ()(Phase::Geometry::SystemDebugger *)>::~__value_func[abi:ne180100](v13);
}

void sub_221F7A0F4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221F7A008);
  }
  _Unwind_Resume(exception_object);
}

void sub_221F7A134()
{
  std::__function::__value_func<void ()(Phase::Geometry::SystemDebugger *)>::~__value_func[abi:ne180100](v0);
  JUMPOUT(0x221F7A10CLL);
}

void sub_221F7A150(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x221F7A10CLL);
}

void *Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Directivity> &)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D4777D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Directivity> &)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D4777D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Directivity> &)::$_0,void>::operator()(uint64_t a1)
{
  uint64_t v3 = (long long *)(a1 + 24);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Directivity,Phase::Handle64>::GetUniqueSlot(*(uint64_t **)(a1 + 8), *(void *)(a1 + 16));
  if (UniqueSlot)
  {
    long long v5 = *v3;
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    uint64_t v6 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(_OWORD *)uint64_t UniqueSlot = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  __dmb(0xBu);
  *(void *)(v2 + 8) = *(void *)(a1 + 16);
}

uint64_t Phase::details::SharedSlotMap<Phase::Geometry::Directivity,Phase::Handle64>::GetUniqueSlot(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3 <= a2) {
    return 0;
  }
  unsigned int v5 = a2;
  uint64_t result = *a1 + 24 * a2;
  if (*(_DWORD *)(result + 20) != HIDWORD(a2)) {
    return 0;
  }
  uint64_t v7 = a1[1];
  if (v7 && *(uint64_t *)(v7 + 8) >= 1)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::Directivity,Phase::Handle64>::AllocSlots(v3, &v20);
    if (*((_DWORD *)a1 + 4))
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = *a1;
        unint64_t v11 = (uint64_t *)(*a1 + v8);
        uint64_t v12 = v20;
        uint64_t v14 = *v11;
        uint64_t v13 = v11[1];
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
        __int16 v15 = (void *)(v12 + v8);
        __int16 v16 = *(std::__shared_weak_count **)(v12 + v8 + 8);
        *__int16 v15 = v14;
        v15[1] = v13;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        v15[2] = *(void *)(v10 + v8 + 16);
        ++v9;
        v8 += 24;
      }
      while (v9 < *((unsigned int *)a1 + 4));
    }
    __int16 v18 = a1 + 4;
    char v19 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    long long v17 = *(_OWORD *)a1;
    *(_OWORD *)a1 = v20;
    long long v20 = v17;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
    return *a1 + 24 * v5;
  }
  return result;
}

void sub_221F7A3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::DistanceModel> &)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D477800;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::DistanceModel> &)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D477800;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::DistanceModel> &)::$_0,void>::operator()(void *a1)
{
  unint64_t v3 = a1 + 3;
  uint64_t v2 = a1[3];
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::DistanceModel,Phase::Handle64>::GetUniqueSlot((uint64_t *)(a1[1] + 248), a1[2]);
  if (UniqueSlot)
  {
    long long v5 = *(_OWORD *)v3;
    *unint64_t v3 = 0;
    v3[1] = 0;
    uint64_t v6 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(_OWORD *)uint64_t UniqueSlot = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  __dmb(0xBu);
  *(void *)(v2 + 8) = a1[2];
}

uint64_t Phase::details::SharedSlotMap<Phase::Geometry::DistanceModel,Phase::Handle64>::GetUniqueSlot(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3 <= a2) {
    return 0;
  }
  unsigned int v5 = a2;
  uint64_t result = *a1 + 24 * a2;
  if (*(_DWORD *)(result + 20) != HIDWORD(a2)) {
    return 0;
  }
  uint64_t v7 = a1[1];
  if (v7 && *(uint64_t *)(v7 + 8) >= 1)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::DistanceModel,Phase::Handle64>::AllocSlots(v3, &v20);
    if (*((_DWORD *)a1 + 4))
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = *a1;
        unint64_t v11 = (uint64_t *)(*a1 + v8);
        uint64_t v12 = v20;
        uint64_t v14 = *v11;
        uint64_t v13 = v11[1];
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
        __int16 v15 = (void *)(v12 + v8);
        __int16 v16 = *(std::__shared_weak_count **)(v12 + v8 + 8);
        *__int16 v15 = v14;
        v15[1] = v13;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        v15[2] = *(void *)(v10 + v8 + 16);
        ++v9;
        v8 += 24;
      }
      while (v9 < *((unsigned int *)a1 + 4));
    }
    __int16 v18 = a1 + 4;
    char v19 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    long long v17 = *(_OWORD *)a1;
    *(_OWORD *)a1 = v20;
    long long v20 = v17;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
    return *a1 + 24 * v5;
  }
  return result;
}

void sub_221F7A634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Material> &)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D477828;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Material> &)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D477828;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Material> &)::$_0,void>::operator()(void *a1)
{
  unint64_t v3 = a1 + 3;
  uint64_t v2 = a1[3];
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Material,Phase::Handle64>::GetUniqueSlot(a1[1] + 744, a1[2]);
  if (UniqueSlot)
  {
    long long v5 = *(_OWORD *)v3;
    *unint64_t v3 = 0;
    v3[1] = 0;
    uint64_t v6 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(_OWORD *)uint64_t UniqueSlot = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  __dmb(0xBu);
  *(void *)(v2 + 8) = a1[2];
}

void *Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Medium> &)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D477850;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Medium> &)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D477850;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Medium> &)::$_0,void>::operator()(void *a1)
{
  unint64_t v3 = a1 + 3;
  uint64_t v2 = a1[3];
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Medium,Phase::Handle64>::GetUniqueSlot((uint64_t *)(a1[1] + 504), a1[2]);
  if (UniqueSlot)
  {
    long long v5 = *(_OWORD *)v3;
    *unint64_t v3 = 0;
    v3[1] = 0;
    uint64_t v6 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(_OWORD *)uint64_t UniqueSlot = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  __dmb(0xBu);
  *(void *)(v2 + 8) = a1[2];
}

uint64_t Phase::details::SharedSlotMap<Phase::Geometry::Medium,Phase::Handle64>::GetUniqueSlot(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = *((unsigned int *)a1 + 4);
  if (v3 <= a2) {
    return 0;
  }
  unsigned int v5 = a2;
  uint64_t result = *a1 + 24 * a2;
  if (*(_DWORD *)(result + 20) != HIDWORD(a2)) {
    return 0;
  }
  uint64_t v7 = a1[1];
  if (v7 && *(uint64_t *)(v7 + 8) >= 1)
  {
    Phase::details::SharedSlotMap<Phase::Geometry::Medium,Phase::Handle64>::AllocSlots(v3, &v20);
    if (*((_DWORD *)a1 + 4))
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        uint64_t v10 = *a1;
        unint64_t v11 = (uint64_t *)(*a1 + v8);
        uint64_t v12 = v20;
        uint64_t v14 = *v11;
        uint64_t v13 = v11[1];
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
        __int16 v15 = (void *)(v12 + v8);
        __int16 v16 = *(std::__shared_weak_count **)(v12 + v8 + 8);
        *__int16 v15 = v14;
        v15[1] = v13;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        v15[2] = *(void *)(v10 + v8 + 16);
        ++v9;
        v8 += 24;
      }
      while (v9 < *((unsigned int *)a1 + 4));
    }
    __int16 v18 = a1 + 4;
    char v19 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 4));
    long long v17 = *(_OWORD *)a1;
    *(_OWORD *)a1 = v20;
    long long v20 = v17;
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    if (*((void *)&v20 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v20 + 1));
    }
    return *a1 + 24 * v5;
  }
  return result;
}

void sub_221F7A9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void *Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Shape> &)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D477878;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Shape> &)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D477878;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Shape> &)::$_0,void>::operator()(void *a1)
{
  unint64_t v3 = a1 + 3;
  uint64_t v2 = a1[3];
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::GetUniqueSlot(a1[1] + 992, a1[2]);
  if (UniqueSlot)
  {
    long long v5 = *(_OWORD *)v3;
    *unint64_t v3 = 0;
    v3[1] = 0;
    uint64_t v6 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(_OWORD *)uint64_t UniqueSlot = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  __dmb(0xBu);
  *(void *)(v2 + 8) = a1[2];
}

void *Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Entity> &)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D4778A0;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Entity> &)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D4778A0;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddToDatabase(std::shared_ptr<Phase::Geometry::Entity> &)::$_0,void>::operator()(void *a1)
{
  unint64_t v3 = a1 + 3;
  uint64_t v2 = a1[3];
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::GetUniqueSlot(a1[1] + 1240, a1[2]);
  if (UniqueSlot)
  {
    long long v5 = *(_OWORD *)v3;
    *unint64_t v3 = 0;
    v3[1] = 0;
    uint64_t v6 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(_OWORD *)uint64_t UniqueSlot = v5;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  __dmb(0xBu);
  *(void *)(v2 + 8) = a1[2];
}

void *Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddShapes(Phase::Handle64,std::vector<Phase::Handle64> const&)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D4778C8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddShapes(Phase::Handle64,std::vector<Phase::Handle64> const&)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D4778C8;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C938A0);
}

void **Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddShapes(Phase::Handle64,std::vector<Phase::Handle64> const&)::$_0,void>::operator()(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v10 = a1[1] + 1240;
  uint64_t result = (void **)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v10, v2, (uint64_t)&v10);
  if (result)
  {
    uint64_t v4 = *result;
    if (*result)
    {
      uint64_t v6 = (uint64_t *)a1[3];
      for (uint64_t i = (uint64_t *)a1[4]; v6 != i; ++v6)
      {
        uint64_t v7 = a1[1];
        uint64_t v8 = *v6;
        if (*(_DWORD *)(v7 + 1008) > *v6)
        {
          uint64_t v9 = *(void *)(v7 + 992);
          if (*(_DWORD *)(v9 + 24 * v8 + 20) == HIDWORD(v8))
          {
            if (*(void *)(v9 + 24 * *v6))
            {
              uint64_t result = (void **)Phase::Geometry::Entity::AddShape(v4, v8);
              uint64_t i = (uint64_t *)a1[4];
            }
          }
        }
      }
    }
  }
  return result;
}

void *Phase::LambdaFunction<Phase::Geometry::SystemScheduler::Copy(Phase::Handle64,std::vector<unsigned int> const&)::$_0 const,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D4778F0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::Copy(Phase::Handle64,std::vector<unsigned int> const&)::$_0 const,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D4778F0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::Copy(Phase::Handle64,std::vector<unsigned int> const&)::$_0 const,void>::operator()(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = (void *)(v3 + 992);
  if (*(_DWORD *)(v3 + 1008) > v2
    && *(_DWORD *)(*v4 + 24 * v2 + 20) == HIDWORD(v2)
    && (long long v5 = *(unsigned int **)(*v4 + 24 * v2)) != 0)
  {
    memset(v17, 0, sizeof(v17));
    int v18 = 1065353216;
    uint64_t v19 = 0;
    long long v20 = 0;
    uint64_t v21 = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v19, *(const void **)(a1 + 32), *(void *)(a1 + 40), (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2);
    int v22 = 9;
    Phase::UnorderedStringMap<Phase::OptionsValue>::Set((uint64_t)v17, (uint64_t)&Phase::Geometry::ShapeOptions::ForcedCopyTags, (uint64_t)&v19);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<BOOL,int,unsigned int,float,double,Phase::Vector<float,2ul>,Phase::Vector<float,3ul>,Phase::Vector<float,4ul>,std::string,std::vector<unsigned int>,std::vector<unsigned long long>,Phase::UnorderedStringMap<Phase::OptionsValue>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v19);
    Phase::Geometry::ShapeFactory::Create(*(void *)(a1 + 8) + 1200, v5, (uint64_t)v17, &v19);
    uint64_t UniqueSlot = (void *)Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::GetUniqueSlot(*(void *)(a1 + 8) + 992, *(void *)(a1 + 24));
    if (UniqueSlot)
    {
      uint64_t v8 = v19;
      uint64_t v7 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)UniqueSlot[1];
      *uint64_t UniqueSlot = v8;
      UniqueSlot[1] = v7;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    *(void *)(v19 + 8) = *(void *)(a1 + 24);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)v17);
  }
  else
  {
    uint64_t v10 = Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::GetUniqueSlot((uint64_t)v4, v2);
    if (v10)
    {
      uint64_t v11 = v10;
      ++*(_DWORD *)(v10 + 20);
      uint64_t v12 = *(std::__shared_weak_count **)(v10 + 8);
      *(void *)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      unsigned int v13 = atomic_load((unsigned int *)(v3 + 1012));
      *(_DWORD *)(v11 + 16) = v13;
      unsigned int v14 = v13;
      atomic_compare_exchange_strong((atomic_uint *volatile)(v3 + 1012), &v14, v2);
      if (v14 != v13)
      {
        unsigned int v15 = v14;
        do
        {
          *(_DWORD *)(v11 + 16) = v14;
          atomic_compare_exchange_strong((atomic_uint *volatile)(v3 + 1012), &v15, v2);
          BOOL v16 = v15 == v14;
          unsigned int v14 = v15;
        }
        while (!v16);
      }
    }
  }
}

void sub_221F7B028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _ZN5Phase7details13SharedSlotMapINS_8Geometry5ShapeENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_12ShapeFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::GetUniqueSlot(a1, a2);
  uint64_t v5 = UniqueSlot;
  if (UniqueSlot)
  {
    uint64_t v6 = *(void *)(UniqueSlot + 8);
    if (v6)
    {
      if (*(uint64_t *)(v6 + 8) >= 1)
      {
        uint64_t v7 = *(void *)(*(void *)a3 + 200);
        if (!v7) {
          std::terminate();
        }
        uint64_t v8 = *(unsigned int **)v5;
        Phase::Geometry::ShapeFactory::Create(v7, *(unsigned int **)v5, 0, &v13);
        uint64_t v9 = v13;
        if (v13) {
          *(void *)(v13 + 8) = *((void *)v8 + 1);
        }
        uint64_t v10 = v14;
        uint64_t v13 = 0;
        unsigned int v14 = 0;
        uint64_t v11 = *(std::__shared_weak_count **)(v5 + 8);
        *(void *)uint64_t v5 = v9;
        *(void *)(v5 + 8) = v10;
        if (v11)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
        }
      }
    }
  }
  return v5;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::SetMaterial(Phase::Handle64,unsigned long,Phase::Handle64)::$_0 const,void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<Phase::Geometry::SystemScheduler::SetMaterial(Phase::Handle64,unsigned long,Phase::Handle64)::$_0 const,void>::operator()(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v6 = a1[1] + 992;
  uint64_t result = _ZN5Phase7details13SharedSlotMapINS_8Geometry5ShapeENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_12ShapeFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v6, v2, (uint64_t)&v6);
  if (result && *(void *)result)
  {
    unint64_t v4 = a1[3];
    uint64_t v5 = *(void **)(**(void **)(*(void *)result + 144) + 16 * *(void *)(*(void *)result + 152));
    if (v5[3] > v4) {
      *(void *)(v5[1] + v5[4] * v4) = a1[4];
    }
  }
  return result;
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Geometry::SystemExecutor,void,Phase::Handle64>(int,void (Phase::Geometry::SystemExecutor::*)(Phase::Handle64),Phase::Handle64)::{lambda(void)#1},void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Geometry::SystemExecutor,void,Phase::Handle64>(int,void (Phase::Geometry::SystemExecutor::*)(Phase::Handle64),Phase::Handle64)::{lambda(void)#1},void>::operator()(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(uint64_t (**)(void *, void))(*v3 + v1);
  }
  return v1(v3, a1[4]);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Geometry::SystemExecutor,void,unsigned long long>(int,void (Phase::Geometry::SystemExecutor::*)(unsigned long long),unsigned long long)::{lambda(void)#1},void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::Geometry::SystemExecutor,void,unsigned long long>(int,void (Phase::Geometry::SystemExecutor::*)(unsigned long long),unsigned long long)::{lambda(void)#1},void>::operator()(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *, void))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(uint64_t (**)(void *, void))(*v3 + v1);
  }
  return v1(v3, a1[4]);
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddChild(Phase::Handle64,Phase::Handle64)::$_0 const,void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<Phase::Geometry::SystemScheduler::AddChild(Phase::Handle64,Phase::Handle64)::$_0 const,void>::operator()(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v11 = a1[1] + 1240;
  UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA = (void **)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v11, v2, (uint64_t)&v11);
  if (UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA) {
    unint64_t v4 = *UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
  }
  else {
    unint64_t v4 = 0;
  }
  uint64_t v5 = a1[3];
  uint64_t v11 = a1[1] + 1240;
  uint64_t result = _ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v11, v5, (uint64_t)&v11);
  if (result)
  {
    if (v4)
    {
      uint64_t v7 = *(void *)result;
      if (*(void *)result)
      {
        uint64_t v8 = *(void *)(v7 + 88);
        if (v8)
        {
          uint64_t v11 = a1[1] + 1240;
          uint64_t v9 = (void **)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v11, v8, (uint64_t)&v11);
          if (v9 && (uint64_t v10 = *v9) != 0) {
            Phase::Geometry::Entity::RemoveChild(v10, v7);
          }
          else {
            *(void *)(v7 + 88) = 0;
          }
          uint64_t result = Phase::Geometry::Entity::AddChild(v4, v7);
          if (result) {
            *(void *)(a1[1] + 2272) = -1;
          }
        }
        else
        {
          uint64_t result = Phase::Geometry::Entity::AddChild(v4, v7);
          if (result) {
            *(void *)(a1[1] + 2256) = -1;
          }
        }
      }
    }
  }
  return result;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::RemoveChild(Phase::Handle64,Phase::Handle64)::$_0 const,void>::~LambdaFunction()
{
}

uint64_t *Phase::LambdaFunction<Phase::Geometry::SystemScheduler::RemoveChild(Phase::Handle64,Phase::Handle64)::$_0 const,void>::operator()(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v7 = a1[1] + 1240;
  UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA = (void **)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v7, v2, (uint64_t)&v7);
  if (UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA) {
    unint64_t v4 = *UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
  }
  else {
    unint64_t v4 = 0;
  }
  uint64_t v5 = a1[3];
  uint64_t v7 = a1[1] + 1240;
  uint64_t result = (uint64_t *)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v7, v5, (uint64_t)&v7);
  if (result && v4 && *result)
  {
    uint64_t result = (uint64_t *)Phase::Geometry::Entity::RemoveChild(v4, *result);
    if (result) {
      *(void *)(a1[1] + 2264) = -1;
    }
  }
  return result;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::UpdateTransform(Phase::Handle64,Phase::Affine<float> const&)::$_0 const,void>::~LambdaFunction()
{
}

float Phase::LambdaFunction<Phase::Geometry::SystemScheduler::UpdateTransform(Phase::Handle64,Phase::Affine<float> const&)::$_0 const,void>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 8) + 1240;
  UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA = (uint64_t *)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v6, v2, (uint64_t)&v6);
  if (UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
  {
    uint64_t v5 = *UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
    if (*UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
    {
      *(_DWORD *)(v5 + 16) = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(v5 + 20) = *(_DWORD *)(a1 + 28);
      *(_DWORD *)(v5 + 24) = *(_DWORD *)(a1 + 32);
      *(_DWORD *)(v5 + 28) = *(_DWORD *)(a1 + 36);
      *(_DWORD *)(v5 + 32) = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(v5 + 36) = *(_DWORD *)(a1 + 44);
      *(_DWORD *)(v5 + 40) = *(_DWORD *)(a1 + 48);
      float result = *(float *)(a1 + 52);
      *(float *)(v5 + 44) = result;
      *(unsigned char *)(v5 + 80) = 1;
    }
  }
  return result;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::ReleaseDirectivity(Phase::Handle64)::$_0,void>::~LambdaFunction()
{
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::ReleaseDirectivity(Phase::Handle64)::$_0,void>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Directivity,Phase::Handle64>::GetUniqueSlot((uint64_t *)v1, v2);
  if (UniqueSlot)
  {
    uint64_t v4 = UniqueSlot;
    ++*(_DWORD *)(UniqueSlot + 20);
    uint64_t v5 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    unsigned int v6 = atomic_load((unsigned int *)(v1 + 20));
    *(_DWORD *)(v4 + 16) = v6;
    unsigned int v7 = v6;
    atomic_compare_exchange_strong((atomic_uint *volatile)(v1 + 20), &v7, v2);
    if (v7 != v6)
    {
      unsigned int v8 = v7;
      do
      {
        *(_DWORD *)(v4 + 16) = v7;
        atomic_compare_exchange_strong((atomic_uint *volatile)(v1 + 20), &v8, v2);
        BOOL v9 = v8 == v7;
        unsigned int v7 = v8;
      }
      while (!v9);
    }
  }
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::ReleaseDistanceModel(Phase::Handle64)::$_0,void>::~LambdaFunction()
{
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::ReleaseDistanceModel(Phase::Handle64)::$_0,void>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::DistanceModel,Phase::Handle64>::GetUniqueSlot((uint64_t *)(v2 + 248), v1);
  if (UniqueSlot)
  {
    uint64_t v4 = UniqueSlot;
    ++*(_DWORD *)(UniqueSlot + 20);
    uint64_t v5 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    unsigned int v6 = atomic_load((unsigned int *)(v2 + 268));
    *(_DWORD *)(v4 + 16) = v6;
    unsigned int v7 = v6;
    atomic_compare_exchange_strong((atomic_uint *volatile)(v2 + 268), &v7, v1);
    if (v7 != v6)
    {
      unsigned int v8 = v7;
      do
      {
        *(_DWORD *)(v4 + 16) = v7;
        atomic_compare_exchange_strong((atomic_uint *volatile)(v2 + 268), &v8, v1);
        BOOL v9 = v8 == v7;
        unsigned int v7 = v8;
      }
      while (!v9);
    }
  }
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::ReleaseMedium(Phase::Handle64)::$_0,void>::~LambdaFunction()
{
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::ReleaseMedium(Phase::Handle64)::$_0,void>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Medium,Phase::Handle64>::GetUniqueSlot((uint64_t *)(v2 + 504), v1);
  if (UniqueSlot)
  {
    uint64_t v4 = UniqueSlot;
    ++*(_DWORD *)(UniqueSlot + 20);
    uint64_t v5 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    unsigned int v6 = atomic_load((unsigned int *)(v2 + 524));
    *(_DWORD *)(v4 + 16) = v6;
    unsigned int v7 = v6;
    atomic_compare_exchange_strong((atomic_uint *volatile)(v2 + 524), &v7, v1);
    if (v7 != v6)
    {
      unsigned int v8 = v7;
      do
      {
        *(_DWORD *)(v4 + 16) = v7;
        atomic_compare_exchange_strong((atomic_uint *volatile)(v2 + 524), &v8, v1);
        BOOL v9 = v8 == v7;
        unsigned int v7 = v8;
      }
      while (!v9);
    }
  }
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::ReleaseMaterial(Phase::Handle64)::$_0,void>::~LambdaFunction()
{
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::ReleaseMaterial(Phase::Handle64)::$_0,void>::operator()()
{
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::ReleaseShape(Phase::Handle64)::$_0,void>::~LambdaFunction()
{
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::ReleaseShape(Phase::Handle64)::$_0,void>::operator()(uint64_t a1)
{
  Phase::details::SharedSlotMap<Phase::Geometry::Shape,Phase::Handle64>::ReleaseAndBlockSlot(*(void *)(a1 + 8) + 992, *(void *)(a1 + 16));

  Phase::Geometry::System::AddNewReleaseRequest();
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::ReleaseEntity(Phase::Handle64)::$_0,void>::~LambdaFunction()
{
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::ReleaseEntity(Phase::Handle64)::$_0,void>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 8) + 1240;
  UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA = (uint64_t *)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v17, v2, (uint64_t)&v17);
  if (UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
  {
    uint64_t v4 = *UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA;
    if (*UniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA)
    {
      uint64_t v5 = *(void *)(v4 + 88);
      if (v5)
      {
        uint64_t v17 = *(void *)(a1 + 8) + 1240;
        unsigned int v6 = (void **)_ZN5Phase7details13SharedSlotMapINS_8Geometry6EntityENS_8Handle64EE13GetSlotToEditIRZNS_13SharedSlotMapIS3_S4_NS2_13EntityFactoryEE9GetUniqueES4_EUlRT_E_EEPNS_18SharedSlotMapStateIS3_S4_E4SlotES4_OSA_(v17, v5, (uint64_t)&v17);
        if (v6)
        {
          unsigned int v7 = *v6;
          if (v7)
          {
            if (Phase::Geometry::Entity::RemoveChild(v7, v4)) {
              *(void *)(*(void *)(a1 + 8) + 2264) = -1;
            }
          }
        }
      }
    }
  }
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t UniqueSlot = Phase::details::SharedSlotMap<Phase::Geometry::Entity,Phase::Handle64>::GetUniqueSlot(v9 + 1240, v8);
  if (UniqueSlot)
  {
    uint64_t v11 = UniqueSlot;
    ++*(_DWORD *)(UniqueSlot + 20);
    uint64_t v12 = *(std::__shared_weak_count **)(UniqueSlot + 8);
    *(void *)uint64_t v11 = 0;
    *(void *)(v11 + 8) = 0;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    unsigned int v13 = atomic_load((unsigned int *)(v9 + 1260));
    *(_DWORD *)(v11 + 16) = v13;
    unsigned int v14 = v13;
    atomic_compare_exchange_strong((atomic_uint *volatile)(v9 + 1260), &v14, v8);
    if (v14 != v13)
    {
      unsigned int v15 = v14;
      do
      {
        *(_DWORD *)(v11 + 16) = v14;
        atomic_compare_exchange_strong((atomic_uint *volatile)(v9 + 1260), &v15, v8);
        BOOL v16 = v15 == v14;
        unsigned int v14 = v15;
      }
      while (!v16);
    }
  }
}

uint64_t std::__function::__value_func<void ()(Phase::Geometry::System *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *Phase::LambdaFunction<Phase::Geometry::SystemScheduler::RunFunction(std::function<void ()(Phase::Geometry::System *)> const&)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D477AF8;
  std::__function::__value_func<void ()(Phase::Geometry::System *)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::RunFunction(std::function<void ()(Phase::Geometry::System *)> const&)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D477AF8;
  std::__function::__value_func<void ()(Phase::Geometry::System *)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::LambdaFunction<Phase::Geometry::SystemScheduler::RunFunction(std::function<void ()(Phase::Geometry::System *)> const&)::$_0,void>::operator()(uint64_t a1)
{
  uint64_t v2 = a1 + 32;
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(v2 + 8) + 48);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 48))(v1, &v4);
}

uint64_t std::__function::__value_func<void ()(Phase::Geometry::SystemDebugger *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *Phase::LambdaFunction<Phase::Geometry::SystemScheduler::RunDebugFunction(std::function<void ()(Phase::Geometry::SystemDebugger *)> const&)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D477B20;
  std::__function::__value_func<void ()(Phase::Geometry::SystemDebugger *)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

void Phase::LambdaFunction<Phase::Geometry::SystemScheduler::RunDebugFunction(std::function<void ()(Phase::Geometry::SystemDebugger *)> const&)::$_0,void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D477B20;
  std::__function::__value_func<void ()(Phase::Geometry::SystemDebugger *)>::~__value_func[abi:ne180100](a1 + 2);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::LambdaFunction<Phase::Geometry::SystemScheduler::RunDebugFunction(std::function<void ()(Phase::Geometry::SystemDebugger *)> const&)::$_0,void>::operator()(uint64_t a1)
{
  uint64_t result = Phase::Geometry::SystemDebugger::GetFromSystem(*(void *)(*(void *)(a1 + 8) + 48));
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = v3;
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, &v5);
  }
  return result;
}

void Phase::Geometry::SystemState::Init(Phase::Geometry::SystemState *this, Phase::Geometry::System *a2)
{
  Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::operator=((uint64_t)this, (uint64_t *)a2);
  Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::operator=((uint64_t)this + 24, (uint64_t *)a2 + 31);
  Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::operator=((uint64_t)this + 48, (uint64_t *)a2 + 63);
  Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::operator=((uint64_t)this + 72, (uint64_t *)a2 + 93);
  Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::operator=((uint64_t)this + 96, (uint64_t *)a2 + 332);
  Phase::SharedSlotMapState<Phase::Geometry::Directivity,Phase::Handle64>::operator=((uint64_t)this + 120, (uint64_t *)a2 + 329);
  memcpy((char *)this + 144, (char *)a2 + 1456, 0x310uLL);
  long long v4 = *((_OWORD *)a2 + 141);
  long long v5 = *((_OWORD *)a2 + 140);
  *((void *)this + 120) = *((void *)a2 + 284);
  *((_OWORD *)this + 58) = v5;
  *((_OWORD *)this + 59) = v4;
  if ((char *)this + 984 != (char *)a2 + 2440) {
    std::vector<std::shared_ptr<Phase::Geometry::MpsCpuScene>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Phase::Geometry::MpsCpuScene>*,std::shared_ptr<Phase::Geometry::MpsCpuScene>*>((uint64_t *)this + 123, *((uint64_t **)a2 + 305), *((uint64_t **)a2 + 306), (uint64_t)(*((void *)a2 + 306) - *((void *)a2 + 305)) >> 4);
  }
  *((void *)this + 121) = *((void *)a2 + 335);
  *((void *)this + 122) = *((void *)a2 + 336);
  *((void *)this + 127) = a2;
  *((void *)this + 128) = (char *)a2 + 2408;
  *((void *)this + 126) = *((void *)a2 + 303);
}

void std::vector<std::shared_ptr<Phase::Geometry::MpsCpuScene>>::__assign_with_size[abi:ne180100]<std::shared_ptr<Phase::Geometry::MpsCpuScene>*,std::shared_ptr<Phase::Geometry::MpsCpuScene>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = (void *)*a1;
  if (a4 > (v8 - *a1) >> 4)
  {
    if (v10)
    {
      std::vector<std::shared_ptr<Phase::Geometry::MpsCpuScene>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<Phase::Geometry::MpsCpuScene>>::__vallocate[abi:ne180100](a1, v12);
    unsigned int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Phase::Geometry::MpsCpuScene>>,std::shared_ptr<Phase::Geometry::MpsCpuScene>*,std::shared_ptr<Phase::Geometry::MpsCpuScene>*,std::shared_ptr<Phase::Geometry::MpsCpuScene>*>(v9, a2, a3, (void *)a1[1]);
    goto LABEL_13;
  }
  unint64_t v14 = (a1[1] - (uint64_t)v10) >> 4;
  if (v14 < a4)
  {
    unsigned int v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Phase::Geometry::MpsCpuScene> *,std::shared_ptr<Phase::Geometry::MpsCpuScene> *,std::shared_ptr<Phase::Geometry::MpsCpuScene> *>(a2, v15, v10);
    unsigned int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<Phase::Geometry::MpsCpuScene>>,std::shared_ptr<Phase::Geometry::MpsCpuScene>*,std::shared_ptr<Phase::Geometry::MpsCpuScene>*,std::shared_ptr<Phase::Geometry::MpsCpuScene>*>(v9, v15, a3, (void *)a1[1]);
LABEL_13:
    a1[1] = (uint64_t)v13;
    return;
  }
  BOOL v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Phase::Geometry::MpsCpuScene> *,std::shared_ptr<Phase::Geometry::MpsCpuScene> *,std::shared_ptr<Phase::Geometry::MpsCpuScene> *>(a2, a3, v10);
  for (uint64_t i = (void *)a1[1]; i != v16; i -= 2)
  {
    int v18 = (std::__shared_weak_count *)*(i - 1);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  a1[1] = (uint64_t)v16;
}

void sub_221F7BDD0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_221F7BDD8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<Phase::Geometry::MpsCpuScene> *,std::shared_ptr<Phase::Geometry::MpsCpuScene> *,std::shared_ptr<Phase::Geometry::MpsCpuScene> *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    long long v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t (*Phase::GetTypeId<Phase::Geometry::VoxelTree>())()
{
  return Phase::GetTypeId<Phase::Geometry::VoxelTree>;
}

void Phase::Geometry::AddVoxelTree(uint64_t *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v4 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 1184);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 136315394;
    *(void *)&v13[1] = "GeoVoxelTree.cpp";
    __int16 v14 = 1024;
    int v15 = 82;
    _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Voxel tree added", (uint8_t *)v13, 0x12u);
  }
  uint64_t v5 = a1[12];
  uint64_t v6 = a1[13];
  std::vector<std::shared_ptr<Phase::Geometry::SharedDataStream>>::resize(a1 + 12, a2 + 2);
  unint64_t v7 = (v6 - v5) >> 4;
  if (v7 < a2 + 2)
  {
    uint64_t v8 = a2 - v7 + 2;
    uint64_t v9 = 16 * v7;
    do
    {
      uint64_t v10 = (char *)operator new(0x40uLL);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = &unk_26D476D78;
      *((void *)v10 + 7) = 0;
      *(_OWORD *)(v10 + 24) = 0u;
      *(_OWORD *)(v10 + 40) = 0u;
      uint64_t v11 = (void *)(a1[12] + v9);
      unint64_t v12 = (std::__shared_weak_count *)v11[1];
      *uint64_t v11 = v10 + 24;
      v11[1] = v10;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      v9 += 16;
      --v8;
    }
    while (v8);
  }
  operator new();
}

void sub_221F7C218(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x223C93870](v1, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Geometry::CreateVoxelTree(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0xC0uLL);
  *((_DWORD *)v2 + 6) = 2;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26D476E40;
  *((_OWORD *)v2 + 2) = xmmword_2220A5C70;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *(_OWORD *)(v2 + 76) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = xmmword_2220A5C80;
  *a1 = v2 + 24;
  a1[1] = v2;
  Phase::Geometry::AddVoxelTree((uint64_t *)v2 + 3, 0);
}

void sub_221F7C2D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Geometry::AddBuilderVoxelToSubtree(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v5 = *(void **)(**(void **)(result + 40) + 16 * *(void *)(result + 48));
  uint64_t v6 = v5[1];
  uint64_t v7 = v5[3];
  uint64_t v8 = v5[4];
  unint64_t v9 = *(unsigned int *)(a4 + 4 * a3);
  uint64_t v10 = v6 + v8 * a3;
  *(_DWORD *)(a4 + 4 * a3) = v9 + 1;
  uint64_t v11 = *(void **)(**(void **)(v10 + 40) + 16 * *(void *)(v10 + 48));
  if (v11[3] <= v9) {
    __assert_rtn("AddBuilderVoxelToSubtree", "GeoVoxelTree.cpp", 188, "voxelIndex < level.mVoxels.Count()");
  }
  uint64_t v13 = result;
  uint64_t v14 = v7 - 1;
  uint64_t v15 = v11[1] + v11[4] * v9;
  float v16 = *(float *)a2;
  float v17 = *(float *)(a2 + 4);
  float v18 = *(float *)(a2 + 8);
  float v19 = (float)((float)(v16 * v16) + (float)(v17 * v17)) + (float)(v18 * v18);
  if (v19 <= 0.00000011921)
  {
    *(void *)uint64_t v15 = 0;
    *(_DWORD *)(v15 + 8) = 0;
    if (v14 == a3) {
      ++*a5;
    }
  }
  else
  {
    float v20 = sqrtf(v19);
    *(float *)uint64_t v15 = v16 / v20;
    *(float *)(v15 + 4) = v17 / v20;
    *(float *)(v15 + 8) = v18 / v20;
  }
  *(_DWORD *)(v15 + 12) = *(_DWORD *)(a2 + 12);
  if (v14 != a3)
  {
    uint64_t v21 = *(void **)(**(void **)(v10 + 56) + 16 * *(void *)(v10 + 64));
    if (v21[3] <= v9) {
      __assert_rtn("AddBuilderVoxelToSubtree", "GeoVoxelTree.cpp", 207, "voxelIndex < level.mTreeNodes.Count()");
    }
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = v21[1] + v21[4] * v9;
    *(_DWORD *)(v24 + 8) = *(_DWORD *)(a4 + 4 * (a3 + 1));
    *(void *)uint64_t v24 = 0;
    do
    {
      if (*(_DWORD *)(*(void *)(a2 + 16) + v22 + 12) != -1)
      {
        *(void *)v24 |= 1 << v23;
        uint64_t result = Phase::Geometry::AddBuilderVoxelToSubtree(v13);
      }
      ++v23;
      v22 += 24;
    }
    while (v23 != 64);
  }
  return result;
}

uint64_t Phase::Geometry::AddBuilderToSubtree(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  v21[1] = *MEMORY[0x263EF8340];
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)v21 - v6;
  bzero((char *)v21 - v6, v8);
  uint64_t result = Phase::Geometry::AddBuilderVoxelToSubtree(a1, a2 + 64, 0, (uint64_t)v7, a3);
  uint64_t v11 = *(void *)(a2 + 96);
  uint64_t v10 = *(void *)(a2 + 104);
  uint64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    uint64_t v13 = 0;
    unint64_t v14 = v12 >> 5;
    uint64_t v15 = (v12 >> 5) - 1;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    float v16 = (uint64_t *)(v11 + 24);
    do
    {
      uint64_t v17 = *(unsigned int *)&v7[4 * v13];
      uint64_t v18 = *v16;
      v16 += 4;
      if (v18 != v17) {
        __assert_rtn("AddBuilderToSubtree", "GeoVoxelTree.cpp", 240, "currentVoxelCounts[i] == inBuilder.mLevels[i].mVoxelCount");
      }
      uint64_t v19 = *(void *)(*(void *)(**(void **)(a1 + 40) + 16 * *(void *)(a1 + 48)) + 8)
          + *(void *)(*(void *)(**(void **)(a1 + 40) + 16 * *(void *)(a1 + 48)) + 32) * v13;
      if (*(void *)(*(void *)(**(void **)(v19 + 40) + 16 * *(void *)(v19 + 48)) + 24) != v17) {
        __assert_rtn("AddBuilderToSubtree", "GeoVoxelTree.cpp", 241, "currentVoxelCounts[i] == inSubtree.mLevels[i].mVoxels.Count()");
      }
      uint64_t v20 = *(void *)(*(void *)(**(void **)(v19 + 56) + 16 * *(void *)(v19 + 64)) + 24);
      if (v15 == v13)
      {
        if (v20) {
          __assert_rtn("AddBuilderToSubtree", "GeoVoxelTree.cpp", 249, "0 == inSubtree.mLevels[i].mTreeNodes.Count()");
        }
      }
      else if (v20 != v17)
      {
        __assert_rtn("AddBuilderToSubtree", "GeoVoxelTree.cpp", 245, "currentVoxelCounts[i] == inSubtree.mLevels[i].mTreeNodes.Count()");
      }
      ++v13;
    }
    while (v14 != v13);
  }
  return result;
}

void Phase::Geometry::CreateVoxelTreeFromMdlMesh(uint64_t a1, const Phase::MdlMeshAsset *a2)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  Phase::Geometry::MdlMeshReader::MdlMeshReader((Phase::MdlMeshAsset *)v2, a2);
}

void sub_221F7D18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  Phase::Geometry::VoxelTreeBuilder::~VoxelTreeBuilder((Phase::Geometry::VoxelTreeBuilder *)&a17);
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  std::unique_ptr<Phase::details::MdlMeshAssetImplementation>::reset[abi:ne180100]((id **)(v31 - 160), 0);
  _Unwind_Resume(a1);
}

void Phase::Geometry::VoxelTreeBuilder::~VoxelTreeBuilder(Phase::Geometry::VoxelTreeBuilder *this)
{
  uint64_t v2 = (void *)*((void *)this + 12);
  if (v2)
  {
    *((void *)this + 13) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 10) = 0;
  if (v3) {
    std::default_delete<Phase::Geometry::VoxelTreeBuilder::Voxel []>::operator()[abi:ne180100]<Phase::Geometry::VoxelTreeBuilder::Voxel>((uint64_t)this + 80, v3);
  }
}

void Phase::Geometry::CreateVoxelTreeFromShape(_DWORD *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (*a1 == 2)
  {
    Phase::Geometry::ForcedCopyTagsIncludingMaterialListFromOptions(2uLL, a2, &__p);
    std::vector<unsigned int>::pointer end = __p.__end_;
    value = __p.__end_cap_.__value_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      std::vector<unsigned int>::pointer begin = __p.__begin_;
      int64_t v9 = __p.__end_ - __p.__begin_;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 62) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v11 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
      if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v10) {
        unint64_t v10 = v11 >> 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v12);
        std::vector<unsigned int>::pointer begin = __p.__begin_;
        std::vector<unsigned int>::pointer end = __p.__end_;
      }
      else
      {
        uint64_t v13 = 0;
      }
      unint64_t v14 = (unsigned int *)&v13[4 * v9];
      value = (unsigned int *)&v13[4 * v12];
      unsigned int *v14 = 7;
      uint64_t v7 = v14 + 1;
      while (end != begin)
      {
        unsigned int v15 = *--end;
        *--unint64_t v14 = v15;
      }
      __p.__begin_ = v14;
      __p.__end_ = v7;
      __p.__end_cap_.__value_ = value;
      if (begin)
      {
        operator delete(begin);
        value = __p.__end_cap_.__value_;
      }
    }
    else
    {
      *__p.__end_ = 7;
      uint64_t v7 = end + 1;
    }
    __p.__end_ = v7;
    if (v7 >= value)
    {
      std::vector<unsigned int>::pointer v17 = __p.__begin_;
      uint64_t v18 = v7 - __p.__begin_;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 62) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = (char *)value - (char *)__p.__begin_;
      if (v20 >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        uint64_t v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v21);
        std::vector<unsigned int>::pointer v17 = __p.__begin_;
        uint64_t v7 = __p.__end_;
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v23 = (unsigned int *)&v22[4 * v18];
      uint64_t v24 = (unsigned int *)&v22[4 * v21];
      *uint64_t v23 = 8;
      float v16 = v23 + 1;
      while (v7 != v17)
      {
        unsigned int v25 = *--v7;
        *--uint64_t v23 = v25;
      }
      __p.__begin_ = v23;
      __p.__end_ = v16;
      __p.__end_cap_.__value_ = v24;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *uint64_t v7 = 8;
      float v16 = v7 + 1;
    }
    __p.__end_ = v16;
    std::allocate_shared[abi:ne180100]<Phase::Geometry::Shape,std::allocator<Phase::Geometry::Shape>,Phase::Geometry::Shape&,std::vector<unsigned int> &,void>((uint64_t)a1, (__int32 **)&__p, a3);
    operator new();
  }
  __assert_rtn("CreateVoxelTreeFromShape", "GeoVoxelTree.cpp", 416, "inShape.mType == DefaultShapeType::VoxelTree");
}

void sub_221F7D68C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

Phase::Logger *Phase::Geometry::GetVoxelTreeDebugInfo@<X0>(Phase::Logger *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v3 = **((void **)a1 + 15);
  *a2 = 0;
  a2[4] = 0;
  a2[5] = 0;
  uint64_t v4 = *(void *)(*(void *)(**(void **)(v3 + 40) + 16 * *(void *)(v3 + 48)) + 24);
  if (!v4)
  {
    unint64_t v34 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 112);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v39 = 136315394;
      *(void *)&v39[4] = "ManagedPtr.hpp";
      __int16 v40 = 1024;
      int v41 = 229;
      _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v39, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  uint64_t v5 = operator new(48 * v4, (std::align_val_t)8uLL);
  uint64_t v6 = v5;
  do
  {
    *uint64_t v6 = 0;
    void v6[4] = 0;
    v6[5] = 0;
    v6 += 6;
  }
  while (v6 != &v5[6 * v4]);
  *(void *)buf = &unk_26D477B90;
  *(void *)&buf[8] = v4;
  uint64_t v43 = buf;
  *(void *)uint64_t v39 = v5;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v39[8], (uint64_t)buf);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](buf);
  uint64_t v7 = *(void *)v39;
  *(void *)uint64_t v39 = 0;
  uint64_t v36 = v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v37, (uint64_t)&v39[8]);
  uint64_t v38 = v4;
  std::unique_ptr<Phase::Geometry::VoxelTreeDebugInfo::VoxelSubtreeDebugInfo [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v39);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v39[8]);
  uint64_t v8 = v36;
  uint64_t v36 = 0;
  uint64_t v9 = *a2;
  *a2 = v8;
  if (v9) {
    std::function<void ()(void *)>::operator()((uint64_t)(a2 + 1), v9);
  }
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a2 + 1, (uint64_t)v37);
  a2[5] = v38;
  std::unique_ptr<Phase::Geometry::VoxelTreeDebugInfo::VoxelSubtreeDebugInfo [],std::function<void ()(void *)>>::reset[abi:ne180100](&v36);
  uint64_t result = (Phase::Logger *)std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v37);
  if (a2[5])
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = *(void *)(**(void **)(v3 + 40) + 16 * *(void *)(v3 + 48));
      unint64_t v13 = *(void *)(v12 + 8) + *(void *)(v12 + 32) * v11;
      uint64_t v14 = *(void *)(*(void *)(**(void **)(v13 + 40) + 16 * *(void *)(v13 + 48)) + 24);
      if (!v14)
      {
        uint64_t v32 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 112);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)&uint8_t buf[4] = "ManagedPtr.hpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 229;
          _os_log_impl(&dword_221E5E000, v32, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", buf, 0x12u);
        }
        uint64_t v33 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v33, "Attempting to allocate an array of 0 elements");
      }
      unsigned int v15 = operator new(48 * v14, (std::align_val_t)0x10uLL);
      *(void *)buf = &unk_26D477BD8;
      buf[8] = 0;
      uint64_t v43 = buf;
      *(void *)uint64_t v39 = v15;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v39[8], (uint64_t)buf);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](buf);
      uint64_t v16 = *(void *)v39;
      *(void *)uint64_t v39 = 0;
      uint64_t v36 = v16;
      std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v37, (uint64_t)&v39[8]);
      uint64_t v38 = v14;
      std::unique_ptr<Phase::Geometry::VoxelTreeDebugInfo::VoxelSubtreeDebugInfo::VoxelLevelDebugInfo [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v39);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v39[8]);
      std::vector<unsigned int>::pointer v17 = (uint64_t *)(*a2 + 48 * v11);
      uint64_t v18 = v36;
      uint64_t v36 = 0;
      uint64_t v19 = *v17;
      uint64_t *v17 = v18;
      if (v19) {
        std::function<void ()(void *)>::operator()((uint64_t)(v17 + 1), v19);
      }
      std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](v17 + 1, (uint64_t)v37);
      v17[5] = v38;
      std::unique_ptr<Phase::Geometry::VoxelTreeDebugInfo::VoxelSubtreeDebugInfo::VoxelLevelDebugInfo [],std::function<void ()(void *)>>::reset[abi:ne180100](&v36);
      uint64_t result = (Phase::Logger *)std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v37);
      uint64_t v21 = 0;
      for (uint64_t i = 0; i != v14; ++i)
      {
        uint64_t v23 = *(void *)(**(void **)(v3 + 40) + 16 * *(void *)(v3 + 48));
        unint64_t v24 = *(void *)(v23 + 8) + *(void *)(v23 + 32) * v11;
        uint64_t v25 = *(void *)(**(void **)(v24 + 40) + 16 * *(void *)(v24 + 48));
        *(float *)v20.i32 = (float)*(unint64_t *)(*(void *)(v25 + 8) + *(void *)(v25 + 32) * i);
        int32x4_t v20 = vdupq_lane_s32(*(int32x2_t *)v20.i8, 0);
        *(int32x4_t *)(*(void *)(*a2 + 48 * v11) + v21 + 32) = v20;
        uint64_t v26 = *(void *)(**(void **)(v3 + 40) + 16 * *(void *)(v3 + 48));
        unint64_t v27 = *(void *)(v26 + 8) + *(void *)(v26 + 32) * v11;
        v20.i64[0] = *(void *)v27;
        v20.i32[2] = *(_DWORD *)(v27 + 8);
        *(int32x4_t *)(*(void *)(*a2 + 48 * v11) + v21) = v20;
        uint64_t v28 = *(void *)(**(void **)(v3 + 40) + 16 * *(void *)(v3 + 48));
        unint64_t v29 = *(void *)(v28 + 8) + *(void *)(v28 + 32) * v11;
        uint64_t v30 = *(void *)(**(void **)(v29 + 40) + 16 * *(void *)(v29 + 48));
        uint64_t v31 = *(void *)(v30 + 8) + *(void *)(v30 + 32) * i;
        v20.i64[0] = *(void *)(v31 + 16);
        v20.i32[2] = *(_DWORD *)(v31 + 24);
        *(int32x4_t *)(*(void *)(*a2 + 48 * v11) + v21 + 16) = v20;
        v21 += 48;
      }
      ++v11;
    }
    while (v11 < a2[5]);
  }
  return result;
}

void sub_221F7DBC0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  std::unique_ptr<Phase::Geometry::VoxelTreeDebugInfo::VoxelSubtreeDebugInfo [],std::function<void ()(void *)>>::reset[abi:ne180100](v1);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v1 + 1);
  _Unwind_Resume(a1);
}

void Phase::Geometry::GetMaterials(uint64_t a1, unsigned int *a2, int a3, void *a4, int a5, uint64_t a6)
{
  uint64_t v21 = a1;
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v6 = a3;
  uint64_t v7 = a3 * a6;
  if (v7 >= 1)
  {
    uint64_t v9 = a2;
    unint64_t v22 = (unint64_t)a2 + v7;
    uint64_t v23 = a5;
    uint64_t v10 = *(void *)(*(void *)(**(void **)(a1 + 40) + 16 * *(void *)(a1 + 48)) + 8);
    unint64_t v11 = *(void **)(**(void **)(v10 + 40) + 16 * *(void *)(v10 + 48));
    uint64_t v12 = v11[1] + (v11[3] - 1) * v11[4];
    while (1)
    {
      uint64_t v13 = *v9;
      uint64_t v14 = *(void *)(**(void **)(v12 + 40) + 16 * *(void *)(v12 + 48));
      unsigned int v15 = *(_DWORD *)(v14 + 24);
      if (v13 >= v15) {
        break;
      }
      int v16 = *(_DWORD *)(*(void *)(v14 + 8) + *(void *)(v14 + 32) * v13 + 12);
      uint64_t v17 = *(void *)(**(void **)(*(void *)(v21 + 8) + 144) + 16 * *(void *)(*(void *)(v21 + 8) + 152));
      unsigned int v18 = *(_DWORD *)(v17 + 24);
      if (v16 >= v18) {
        goto LABEL_7;
      }
      uint64_t v19 = *(void *)(*(void *)(v17 + 8) + *(void *)(v17 + 32) * v16);
LABEL_10:
      *a4 = v19;
      a4 = (void *)((char *)a4 + v23);
      uint64_t v9 = (unsigned int *)((char *)v9 + v6);
      if ((unint64_t)v9 >= v22) {
        return;
      }
    }
    int v16 = -1;
    unsigned int v18 = -1;
LABEL_7:
    int32x4_t v20 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 208);
    a1 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    if (a1)
    {
      *(_DWORD *)buf = 136316418;
      uint64_t v25 = "GeoVoxelTree.cpp";
      __int16 v26 = 1024;
      int v27 = 558;
      __int16 v28 = 1024;
      int v29 = v13;
      __int16 v30 = 1024;
      unsigned int v31 = v15;
      __int16 v32 = 1024;
      int v33 = v16;
      __int16 v34 = 1024;
      unsigned int v35 = v18;
      _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d GeoVoxelTree.cpp: GetMaterials: materialIndex out of range. Voxel Index: %i, Count:%i, Material Index: %i, Count:%i.\n", buf, 0x2Au);
    }
    uint64_t v19 = 0;
    goto LABEL_10;
  }
}

void std::default_delete<Phase::Geometry::VoxelTreeBuilder::Voxel []>::operator()[abi:ne180100]<Phase::Geometry::VoxelTreeBuilder::Voxel>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2 - 8;
    uint64_t v2 = *(void *)(a2 - 8);
    if (v2)
    {
      uint64_t v4 = 24 * v2;
      do
      {
        uint64_t v5 = *(void *)(v3 + v4);
        *(void *)(v3 + v4) = 0;
        if (v5) {
          std::default_delete<Phase::Geometry::VoxelTreeBuilder::Voxel []>::operator()[abi:ne180100]<Phase::Geometry::VoxelTreeBuilder::Voxel>();
        }
        v4 -= 24;
      }
      while (v4);
    }
    JUMPOUT(0x223C93870);
  }
}

uint64_t *std::unique_ptr<Phase::Geometry::VoxelTreeDebugInfo::VoxelSubtreeDebugInfo::VoxelLevelDebugInfo [],std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v1);
  }
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::VoxelTree>(Phase::Geometry::VoxelTree *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::VoxelTree>(Phase::Geometry::VoxelTree *)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::VoxelTree>(Phase::Geometry::VoxelTree *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::VoxelTree>(Phase::Geometry::VoxelTree *)::{lambda(void *)#1}>,void ()(void *)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D477B48;
  return result;
}

void std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::VoxelTree>(Phase::Geometry::VoxelTree *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::VoxelTree>(Phase::Geometry::VoxelTree *)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D477B48;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::VoxelTree>(Phase::Geometry::VoxelTree *)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Geometry::DataMap,std::function<void ()(void *)>> Phase::Geometry::MakeDataMapPtr<Phase::Geometry::VoxelTree>(Phase::Geometry::VoxelTree *)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (*a2) {
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry18VoxelTreeDebugInfo21VoxelSubtreeDebugInfoERKZNS3_10AllocArrayIS7_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS8_IS7_EESG_mmEUlPSA_E_EESG_mOT0_OT1_EUlSD_E_NS_9allocatorISS_EESE_ED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry18VoxelTreeDebugInfo21VoxelSubtreeDebugInfoERKZNS3_10AllocArrayIS7_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS8_IS7_EESG_mmEUlPSA_E_EESG_mOT0_OT1_EUlSD_E_NS_9allocatorISS_EESE_E7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26D477B90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry18VoxelTreeDebugInfo21VoxelSubtreeDebugInfoERKZNS3_10AllocArrayIS7_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS8_IS7_EESG_mmEUlPSA_E_EESG_mOT0_OT1_EUlSD_E_NS_9allocatorISS_EESE_E7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D477B90;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry18VoxelTreeDebugInfo21VoxelSubtreeDebugInfoERKZNS3_10AllocArrayIS7_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS8_IS7_EESG_mmEUlPSA_E_EESG_mOT0_OT1_EUlSD_E_NS_9allocatorISS_EESE_EclEOSD_(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8))
  {
    unint64_t v4 = 0;
    uint64_t v5 = (uint64_t *)*a2;
    do
    {
      std::unique_ptr<Phase::Geometry::VoxelTreeDebugInfo::VoxelSubtreeDebugInfo::VoxelLevelDebugInfo [],std::function<void ()(void *)>>::reset[abi:ne180100](v5);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v5 + 1);
      ++v4;
      v5 += 6;
    }
    while (v4 < *(void *)(a1 + 8));
  }

  operator delete(v2);
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry18VoxelTreeDebugInfo21VoxelSubtreeDebugInfo19VoxelLevelDebugInfoERKZNS3_10AllocArrayIS8_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS9_IS8_EESH_mmEUlPSB_E_EESH_mOT0_OT1_EUlSE_E_NS_9allocatorIST_EESF_ED0Ev()
{
}

unsigned char *_ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry18VoxelTreeDebugInfo21VoxelSubtreeDebugInfo19VoxelLevelDebugInfoERKZNS3_10AllocArrayIS8_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS9_IS8_EESH_mmEUlPSB_E_EESH_mOT0_OT1_EUlSE_E_NS_9allocatorIST_EESF_E7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_26D477BD8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry18VoxelTreeDebugInfo21VoxelSubtreeDebugInfo19VoxelLevelDebugInfoERKZNS3_10AllocArrayIS8_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS9_IS8_EESH_mmEUlPSB_E_EESH_mOT0_OT1_EUlSE_E_NS_9allocatorIST_EESF_E7__cloneEPNS0_6__baseISF_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_26D477BD8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void _ZNSt3__110__function6__funcIZN5Phase7details10AllocArrayINS2_8Geometry18VoxelTreeDebugInfo21VoxelSubtreeDebugInfo19VoxelLevelDebugInfoERKZNS3_10AllocArrayIS8_EENS_10unique_ptrIA_T_NS_8functionIFvPvEEEEEmmEUlvE_RKZNS9_IS8_EESH_mmEUlPSB_E_EESH_mOT0_OT1_EUlSE_E_NS_9allocatorIST_EESF_EclEOSE_(uint64_t a1, void **a2)
{
}

unint64_t Phase::Geometry::VoxelTreeBuilder::Build(uint64_t a1, int a2, id **this, unint64_t a4)
{
  Phase::Geometry::MdlMeshReader::CalculateAABB(this, (uint64_t)v23);
  float v7 = *(float *)v23;
  float v8 = *(float *)&v23[1];
  *(_DWORD *)a1 = v23[0];
  *(float *)(a1 + 4) = v8;
  float v9 = v24;
  float v10 = v25;
  *(float *)(a1 + 8) = v24;
  *(float *)(a1 + 12) = v10;
  float v11 = v26;
  float v12 = v27;
  *(float *)(a1 + 16) = v26;
  *(float *)(a1 + 20) = v12;
  if (a4 <= 3) {
    __assert_rtn("ExpandAABB", "GeoVoxelTreeBuilder.cpp", 49, "inResolution >= 4");
  }
  float v13 = (float)(0.5 / (float)(a4 - 1)) * fmaxf(fmaxf(v10 - v7, v11 - v8), v12 - v9);
  float v14 = v7 - v13;
  float v15 = v8 - v13;
  *(float *)a1 = v14;
  *(float *)(a1 + 4) = v15;
  float v16 = v9 - v13;
  float v17 = v10 + v13;
  *(float *)(a1 + 8) = v16;
  *(float *)(a1 + 12) = v17;
  float v18 = v11 + v13;
  float v19 = v12 + v13;
  *(float *)(a1 + 16) = v18;
  *(float *)(a1 + 20) = v19;
  *(float *)(a1 + 24) = v14;
  *(float *)(a1 + 28) = v15;
  *(float *)(a1 + 32) = v16;
  *(float *)(a1 + 36) = v17;
  *(float *)(a1 + 40) = v18;
  *(float *)(a1 + 44) = v19;
  *(void *)(a1 + 56) = a4;
  *(_DWORD *)(a1 + 92) = 0;
  Phase::Geometry::VoxelTreeBuilder::CreateLevels((Phase::Geometry::VoxelTreeBuilder *)a1);
  unint64_t result = Phase::MdlMeshAsset::GetSubmeshCount(this);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      Phase::Geometry::VoxelTreeBuilder::BuildLevels((float32x2_t *)a1, v21, this, i);
      unint64_t result = Phase::MdlMeshAsset::GetSubmeshCount(this);
    }
  }
  return result;
}

void Phase::Geometry::VoxelTreeBuilder::CreateLevels(Phase::Geometry::VoxelTreeBuilder *this)
{
  uint64_t v2 = 0;
  unint64_t v3 = *((void *)this + 7);
  *((float *)this + 12) = fmaxf(fmaxf((float)(*((float *)this + 3) - *(float *)this) / (float)v3, (float)(*((float *)this + 4) - *((float *)this + 1)) / (float)v3), (float)(*((float *)this + 5) - *((float *)this + 2)) / (float)v3);
  unint64_t v4 = 1;
  while (1 << v2 != v3)
  {
    ++v4;
    v2 += 2;
    if (v2 == 64) {
      __assert_rtn("PowerOfFour", "GeoVoxelTreeBuilder.cpp", 35, "false");
    }
  }
  std::vector<Phase::Geometry::VoxelTreeBuilder::Level>::resize((uint64_t)this + 96, v4);
  uint64_t v5 = 0;
  float v6 = *((float *)this + 12);
  float v7 = (float *)(*((void *)this + 12) + 16);
  uint64_t v8 = 1;
  do
  {
    *(v7 - 4) = v6 * (float)(1 << v2);
    *((void *)v7 - 1) = v8;
    *(void *)float v7 = v5;
    v8 *= 4;
    ++v5;
    v7 += 8;
    LODWORD(v2) = v2 - 2;
  }
  while (v4 != v5);
  *((_DWORD *)this + 22) = 0;
}

unint64_t Phase::Geometry::VoxelTreeBuilder::BuildLevels(float32x2_t *a1, int a2, id **this, uint64_t a4)
{
  unint64_t result = objc_msgSend(Phase::MdlMeshAsset::GetSubmesh(this, a4), "indexCount");
  if (result >= 3)
  {
    uint64_t v10 = 0;
    unint64_t v11 = result / 3;
    do
      unint64_t result = Phase::Geometry::VoxelTreeBuilder::VoxelizeFace(a1, v8, (uint64_t)this, a4, v10++, v9, (float *)&a1[11]);
    while (v11 != v10);
  }
  return result;
}

void std::vector<Phase::Geometry::VoxelTreeBuilder::Level>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<Phase::Geometry::VoxelTreeBuilder::Level>::__append((char **)a1, a2 - v2);
  }
}

uint64_t Phase::Geometry::VoxelTreeBuilder::VoxelizeFace(float32x2_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7)
{
  __int32 v8 = a4;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  memset(v42, 0, sizeof(v42));
  float v41 = 0.0;
  uint64_t result = Phase::Geometry::MdlMeshReader::GetTriangle<unsigned int>(a3, a4, 3 * a5, (_DWORD *)&v44 + 1, &v44, (unsigned int *)&v43 + 1, (uint64_t)v42, &v41);
  if (result)
  {
    float v11 = a1[1].f32[0];
    double v36 = (float)(v42[1].f32[0] - v11);
    double v38 = (float)(v42[2].f32[1] - v11);
    double v40 = (float)(*(float *)&v43 - v11);
    double v12 = fmin(fmin(v36, v38), v40);
    double v13 = fmax(fmax(v36, v38), v40);
    float v14 = v41 + *a7;
    double v15 = v38 - v36;
    double v16 = v40 - v36;
    float32x2_t v17 = vsub_f32(*(float32x2_t *)((char *)&v42[1] + 4), *a1);
    float32x2_t v18 = vsub_f32(v42[3], *a1);
    float64x2_t v19 = vcvtq_f64_f32(vsub_f32(v42[0], *a1));
    float64x2_t v35 = v19;
    float64x2_t v20 = vcvtq_f64_f32(v17);
    float64x2_t v37 = v20;
    float64x2_t v21 = vcvtq_f64_f32(v18);
    float64x2_t v39 = v21;
    *a7 = v14;
    double v22 = 1.0 / a1[6].f32[0];
    double v23 = vsubq_f64(v20, v19).f64[0];
    double v24 = vsubq_f64(v21, v19).f64[0];
    float64_t v25 = (v20.f64[1] - v19.f64[1]) * v16 - v15 * (v21.f64[1] - v19.f64[1]);
    double v26 = vmlad_n_f64(-(v23 * v16), v15, v24);
    double v27 = vmlad_n_f64(-(v20.f64[1] - v19.f64[1]) * v24, v21.f64[1] - v19.f64[1], v23);
    double v28 = sqrt(v27 * v27 + v25 * v25 + v26 * v26);
    v33.f64[0] = v25 / v28;
    v33.f64[1] = v26 / v28;
    double v34 = v27 / v28;
    int32x2_t v31 = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vmulq_n_f64(vminnmq_f64(vminnmq_f64(v19, v20), v21), v22))));
    unsigned int v32 = vcvtmd_s64_f64(v12 * v22);
    int32x2_t v29 = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vmulq_n_f64(vmaxnmq_f64(vmaxnmq_f64(v19, v20), v21), v22))));
    unsigned int v30 = vcvtpd_s64_f64(v13 * v22);
    return Phase::Geometry::VoxelTreeBuilder::UpdateVoxel((uint64_t)a1, a1 + 8, v35.f64, &v33, v8, 0, (int *)&v31, (int *)&v29);
  }
  else
  {
    ++a1[11].i32[1];
  }
  return result;
}

uint64_t Phase::Geometry::VoxelTreeBuilder::UpdateVoxel(uint64_t result, float32x2_t *a2, double *a3, float64x2_t *a4, __int32 a5, uint64_t a6, int *a7, int *a8)
{
  uint64_t v12 = *(void *)(result + 96);
  if (a2[1].i32[1] == -1)
  {
    ++*(void *)(v12 + 32 * a6 + 24);
    a2[1].i32[1] = a5;
  }
  *a2 = vadd_f32(*a2, vcvt_f32_f64(*a4));
  float v13 = a4[1].f64[0];
  a2[1].f32[0] = a2[1].f32[0] + v13;
  uint64_t v14 = ((*(void *)(result + 104) - v12) >> 5) - 1;
  if (v14 != a6)
  {
    double v15 = a2 + 2;
    if (!*(void *)&a2[2]) {
      operator new[]();
    }
    uint64_t v16 = a6 + 1;
    int v17 = 2 * (v14 - (a6 + 1));
    int v18 = *a7 >> (2 * (v14 - (a6 + 1)));
    int v19 = *a8 >> (2 * (v14 - (a6 + 1)));
    if (v18 <= v19)
    {
      float64x2_t v20 = (float *)(v12 + 32 * v16);
      int v21 = a7[1] >> v17;
      int v22 = a7[2] >> v17;
      double v23 = *v20 * 0.5;
      int v24 = a8[2] >> v17;
      int v25 = a8[1] >> v17;
      int v26 = ~(-1 << v17);
      double v27 = -v23;
      do
      {
        if (v21 <= v25)
        {
          double v29 = (double)v18 + 0.5;
          uint64_t v30 = v18 & 3;
          LODWORD(v8) = v18 << v17;
          LODWORD(v9) = (v18 << v17) + v26;
          int v31 = v21;
          do
          {
            if (v22 <= v24)
            {
              double v32 = (double)v31 + 0.5;
              long long v33 = v8;
              DWORD1(v33) = v31 << v17;
              int v34 = v22;
              do
              {
                double v35 = *v20;
                double v36 = v32 * v35;
                double v37 = ((double)v34 + 0.5) * v35;
                double v38 = *a3 - v29 * v35;
                double v39 = a3[1] - v32 * v35;
                double v40 = a3[2] - v37;
                double v41 = a3[3] - v29 * v35;
                double v42 = a3[4] - v32 * v35;
                double v43 = a3[5] - v37;
                double v44 = a3[6] - v29 * v35;
                double v45 = a3[7] - v36;
                double v46 = a3[8] - v37;
                double v47 = fmax(fmax(v38, v41), v44);
                double v48 = fmin(fmin(v40, v43), v46);
                double v49 = fmax(fmax(v40, v43), v46);
                BOOL v50 = fmin(fmin(v38, v41), v44) > v23 || v47 < v27;
                double v51 = fmax(fmax(v39, v42), v45);
                double v52 = fmin(fmin(v39, v42), v45);
                if (!v50 && v52 <= v23 && v51 >= v27 && v48 <= v23 && v49 >= v27)
                {
                  double v57 = a4->f64[0];
                  double v58 = a4->f64[1];
                  double v59 = a4[1].f64[0];
                  double v60 = v38 * a4->f64[0] + v39 * v58 + v40 * v59;
                  double v61 = a4->f64[0] <= 0.0 ? v23 : -v23;
                  double v62 = v58 <= 0.0 ? v23 : -v23;
                  double v63 = v59 <= 0.0 ? v23 : -v23;
                  if (v57 * v61 + v58 * v62 + v59 * v63 <= v60)
                  {
                    double v64 = v59 <= 0.0 ? -v23 : v23;
                    double v65 = v58 <= 0.0 ? -v23 : v23;
                    double v66 = v57 <= 0.0 ? -v23 : v23;
                    if (v57 * v66 + v58 * v65 + v59 * v64 >= v60)
                    {
                      float v67 = v42 - v39;
                      float v68 = v43 - v40;
                      float v69 = v67 < 0.0 ? -v67 : v42 - v39;
                      float v70 = v68 < 0.0 ? -v68 : v43 - v40;
                      double v71 = v68;
                      double v72 = v67;
                      double v73 = v68 * v39 - v40 * v72;
                      double v74 = v71 * v45 - v46 * v72;
                      double v75 = fmin(v73, v74);
                      double v76 = fmax(v73, v74);
                      double v77 = v70;
                      double v78 = v69;
                      double v79 = v23 * v69 + v77 * v23;
                      if (v75 <= v79 && v76 >= -v79)
                      {
                        float v81 = v41 - v38;
                        float v82 = -v81;
                        if (v81 >= 0.0) {
                          float v82 = v41 - v38;
                        }
                        double v83 = v81;
                        double v84 = v83 * v40 - v38 * v71;
                        double v85 = v83 * v46 - v44 * v71;
                        double v86 = fmin(v84, v85);
                        double v87 = fmax(v84, v85);
                        double v88 = v82;
                        double v89 = v23 * v77 + v88 * v23;
                        BOOL v90 = v86 > v89 || v87 < -v89;
                        double v91 = v72 * v41 - v42 * v83;
                        double v92 = v72 * v44 - v45 * v83;
                        double v93 = fmin(v91, v92);
                        double v94 = fmax(v91, v92);
                        double v95 = v23 * v88 + v78 * v23;
                        if (!v90 && v93 <= v95 && v94 >= -v95)
                        {
                          double v98 = -v40;
                          float v99 = v45 - v42;
                          float v100 = v46 - v43;
                          float v101 = -v99;
                          if (v99 >= 0.0) {
                            float v101 = v45 - v42;
                          }
                          if (v100 < 0.0) {
                            float v102 = -v100;
                          }
                          else {
                            float v102 = v46 - v43;
                          }
                          double v103 = v100;
                          double v104 = v99;
                          double v105 = v98 * v99 + v103 * v39;
                          double v106 = -v46 * v104 + v103 * v45;
                          double v107 = fmin(v105, v106);
                          double v108 = fmax(v105, v106);
                          double v109 = v102;
                          double v110 = v101;
                          double v111 = v23 * v110 + v109 * v23;
                          if (v107 <= v111 && v108 >= -v111)
                          {
                            double v113 = -v38;
                            double v114 = -v42;
                            float v115 = v44 - v41;
                            float v116 = -v115;
                            if (v115 >= 0.0) {
                              float v116 = v44 - v41;
                            }
                            double v117 = v115;
                            double v118 = v113 * v103 + v117 * v40;
                            double v119 = -v44 * v103 + v117 * v46;
                            double v120 = fmin(v118, v119);
                            double v121 = fmax(v118, v119);
                            double v122 = v116;
                            double v123 = v23 * v109 + v122 * v23;
                            BOOL v124 = v120 > v123 || v121 < -v123;
                            double v125 = v104 * v38 - v39 * v117;
                            double v126 = v114 * v117 + v104 * v41;
                            double v127 = fmin(v125, v126);
                            double v128 = fmax(v125, v126);
                            double v129 = v23 * v122 + v110 * v23;
                            if (!v124 && v127 <= v129 && v128 >= -v129)
                            {
                              float v132 = v39 - v45;
                              float v133 = v40 - v46;
                              float v134 = v132 < 0.0 ? -v132 : v39 - v45;
                              float v135 = v133 < 0.0 ? -v133 : v133;
                              double v136 = v133;
                              double v137 = v132;
                              double v138 = v98 * v132 + v136 * v39;
                              double v139 = v136 * v42 - v43 * v132;
                              double v140 = v135;
                              double v141 = v134;
                              double v142 = v23 * v134;
                              if (fmin(v138, v139) <= v142 + v135 * v23 && fmax(v138, v139) >= -(v142 + v140 * v23))
                              {
                                float v143 = v38 - v44;
                                if (v143 < 0.0) {
                                  float v144 = -v143;
                                }
                                else {
                                  float v144 = v143;
                                }
                                double v145 = v143;
                                double v146 = v113 * v136 + v145 * v40;
                                double v147 = v145 * v43 - v41 * v136;
                                double v148 = v144;
                                double v149 = v23 * v140;
                                if (fmin(v146, v147) <= v149 + v144 * v23 && fmax(v146, v147) >= -(v149 + v148 * v23))
                                {
                                  double v150 = v114 * v145 + v137 * v41;
                                  double v151 = -v45 * v145 + v137 * v44;
                                  if (fmin(v150, v151) <= v23 * v148 + v141 * v23
                                    && fmax(v150, v151) >= -(v23 * v148 + v141 * v23))
                                  {
                                    int v159 = v18;
                                    int v160 = v17;
                                    uint64_t v155 = v30;
                                    float64x2_t v162 = a7;
                                    float64x2_t v163 = a8;
                                    uint64_t v164 = v16;
                                    uint64_t v165 = result;
                                    __int32 v166 = a5;
                                    long long v161 = v15;
                                    int v157 = v21;
                                    int v158 = v19;
                                    int v156 = v26;
                                    long long v153 = v9;
                                    long long v154 = v8;
                                    long long v152 = v33;
                                    Phase::Geometry::VoxelTreeBuilder::UpdateVoxel();
                                    long long v33 = v152;
                                    long long v9 = v153;
                                    long long v8 = v154;
                                    uint64_t v30 = v155;
                                    int v26 = v156;
                                    int v21 = v157;
                                    int v19 = v158;
                                    int v18 = v159;
                                    int v17 = v160;
                                    uint64_t v16 = v164;
                                    uint64_t result = v165;
                                    double v15 = v161;
                                    a7 = v162;
                                    a5 = v166;
                                    a8 = v163;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                ++v34;
              }
              while (v24 + 1 != v34);
            }
            BOOL v28 = v31++ == v25;
          }
          while (!v28);
        }
        BOOL v28 = v18++ == v19;
      }
      while (!v28);
    }
  }
  return result;
}

void std::vector<Phase::Geometry::VoxelTreeBuilder::Level>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  unint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 5)
  {
    if (a2)
    {
      bzero(a1[1], 32 * a2);
      v5 += 32 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    float v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 5);
    if (v8 >> 59) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 4 > v8) {
      unint64_t v8 = v9 >> 4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 59) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float v11 = (char *)operator new(32 * v10);
    }
    else
    {
      float v11 = 0;
    }
    uint64_t v12 = &v11[32 * (v7 >> 5)];
    float v13 = &v11[32 * v10];
    bzero(v12, 32 * a2);
    uint64_t v14 = &v12[32 * a2];
    if (v5 != v6)
    {
      do
      {
        long long v15 = *((_OWORD *)v5 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v5 - 2);
        *((_OWORD *)v12 - 1) = v15;
        v12 -= 32;
        v5 -= 32;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

Phase::Controller::Ducker *Phase::Controller::Ducker::Ducker(Phase::Controller::Ducker *this, PHASEDucker *a2, double a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 5) = _Q0;
  *((void *)this + 12) = 0x3FF0000000000000;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *(int64x2_t *)((char *)this + 120) = vdupq_n_s64(0x63724C6EuLL);
  *((unsigned char *)this + 136) = 0;
  Phase::Fader<double>::Fader((Phase::Controller::Ducker *)((char *)this + 144), 1.0);
  Phase::Fader<double>::Fader((Phase::Controller::Ducker *)((char *)this + 192), 1.0);
  Phase::Fader<double>::Fader((Phase::Controller::Ducker *)((char *)this + 240), 1.0);
  *((unsigned char *)this + 288) = 0;
  [(PHASEDucker *)v5 gain];
  *((void *)this + 10) = v11;
  [(PHASEDucker *)v5 gainHighFrequency];
  *((void *)this + 11) = v12;
  [(PHASEDucker *)v5 gainLowFrequency];
  *((void *)this + 12) = v13;
  [(PHASEDucker *)v5 attackTime];
  *((double *)this + 13) = v14 * a3;
  [(PHASEDucker *)v5 releaseTime];
  *((double *)this + 14) = v15 * a3;
  *((void *)this + 15) = [(PHASEDucker *)v5 attackCurve];
  *((void *)this + 16) = [(PHASEDucker *)v5 releaseCurve];
  double v32 = [(PHASEDucker *)v5 sourceGroups];
  uint64_t v16 = [(PHASEDucker *)v5 targetGroups];
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)this, vcvtps_u32_f32((float)(unint64_t)[v32 count] / *((float *)this + 8)));
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)this + 40, vcvtps_u32_f32((float)(unint64_t)[v16 count] / *((float *)this + 18)));
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v17 = v32;
  uint64_t v18 = [v17 countByEnumeratingWithState:&v37 objects:v42 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v38;
    do
    {
      uint64_t v20 = 0;
      do
      {
        if (*(void *)v38 != v19) {
          objc_enumerationMutation(v17);
        }
        int v21 = [*(id *)(*((void *)&v37 + 1) + 8 * v20) identifier];
        uint64_t StringHashId = Phase::GetStringHashId(v21, v22);
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long>((uint64_t)this, StringHashId, StringHashId);

        ++v20;
      }
      while (v18 != v20);
      uint64_t v18 = [v17 countByEnumeratingWithState:&v37 objects:v42 count:16];
    }
    while (v18);
  }

  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v24 = v16;
  uint64_t v25 = [v24 countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (v25)
  {
    uint64_t v26 = *(void *)v34;
    do
    {
      uint64_t v27 = 0;
      do
      {
        if (*(void *)v34 != v26) {
          objc_enumerationMutation(v24);
        }
        BOOL v28 = [*(id *)(*((void *)&v33 + 1) + 8 * v27) identifier];
        uint64_t v30 = Phase::GetStringHashId(v28, v29);
        std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long>((uint64_t)this + 40, v30, v30);

        ++v27;
      }
      while (v25 != v27);
      uint64_t v25 = [v24 countByEnumeratingWithState:&v33 objects:v41 count:16];
    }
    while (v25);
  }

  return this;
}

void sub_221F7F2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void **a30)
{
  a30 = a9;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a10;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a30);
  a30 = a11;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a30);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v32);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v30);

  _Unwind_Resume(a1);
}

void *Phase::Controller::Ducker::Release(Phase::Controller::Ducker *this)
{
  v3[4] = *MEMORY[0x263EF8340];
  *((unsigned char *)this + 136) = 1;
  Phase::Controller::GetCurveFunctionFromCurveType<double>(*((Phase::Logger **)this + 16), v3);
  Phase::Fader<double>::SetInternal((uint64_t)this + 144, (uint64_t)v3, *((double *)this + 22), *((double *)this + 14));
  Phase::Fader<double>::SetInternal((uint64_t)this + 192, (uint64_t)v3, *((double *)this + 28), *((double *)this + 14));
  Phase::Fader<double>::SetInternal((uint64_t)this + 240, (uint64_t)v3, *((double *)this + 34), *((double *)this + 14));
  return std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v3);
}

void sub_221F7F460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void Phase::Controller::GroupManager::GroupManager(Phase::Controller::GroupManager *this)
{
}

uint64_t Phase::Controller::GroupManager::AddGroup(Phase::Controller::GroupManager *this, PHASEGroup *a2)
{
  unint64_t v3 = a2;
  unint64_t v4 = [(PHASEGroup *)v3 identifier];
  uint64_t StringHashId = Phase::GetStringHashId(v4, v5);

  uint64_t v18 = StringHashId;
  Phase::Controller::Group::Group((Phase::Controller::Group *)v9, StringHashId, v3);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Group>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,Phase::Controller::Group>((uint64_t)this + 40, (unint64_t *)&v18, &v18, v9);
  LOBYTE(this) = v7;
  uint64_t v19 = (void **)&v17;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)&v16;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)&v15;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)&v14;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)&v13;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)&v12;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)&v11;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v19);
  uint64_t v19 = (void **)&v10;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v19);

  return this & 1;
}

void sub_221F7F630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Phase::Controller::Group::~Group((id *)va);

  _Unwind_Resume(a1);
}

void Phase::Controller::Group::~Group(id *this)
{
  unint64_t v2 = this + 2;
  unint64_t v3 = this + 47;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = this + 41;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = this + 35;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = this + 29;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = this + 20;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = this + 14;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = this + 8;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = v2;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void Phase::Controller::GroupManager::Update(uint64_t a1, void *a2, double a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands(a1);
  *(unsigned char *)(a1 + 128) = 0;
  float v6 = *(uint64_t **)(a1 + 56);
  if (v6)
  {
    __asm { FMOV            V0.2D, #1.0 }
    long long v47 = _Q0;
LABEL_4:
    for (BOOL i = *((unsigned char *)v6 + 449) != 0; ; BOOL i = 1)
    {
      *(unsigned char *)(a1 + 128) = i;
      Phase::Fader<double>::Update((uint64_t)(v6 + 5), a3);
      Phase::Fader<double>::Update((uint64_t)(v6 + 11), a3);
      Phase::Fader<double>::Update((uint64_t)(v6 + 17), a3);
      Phase::Fader<double>::Update((uint64_t)(v6 + 23), a3);
      Phase::Fader<double>::Update((uint64_t)(v6 + 32), a3);
      Phase::Fader<double>::Update((uint64_t)(v6 + 44), a3);
      Phase::Fader<double>::Update((uint64_t)(v6 + 38), a3);
      Phase::Fader<double>::Update((uint64_t)(v6 + 50), a3);
      v6[31] = 0x3FF0000000000000;
      *(_OWORD *)(v6 + 29) = v47;
      float v6 = (uint64_t *)*v6;
      if (!v6) {
        break;
      }
      if (!*(unsigned char *)(a1 + 128)) {
        goto LABEL_4;
      }
    }
  }
  uint64_t v12 = *(double **)(a1 + 96);
  if (v12)
  {
    do
    {
      if (!*((unsigned char *)v12 + 160) || v12[26] != v12[25])
      {
        uint64_t v16 = (void *)*((void *)v12 + 5);
        BOOL v17 = v16 != 0;
        if (v16)
        {
          int8x8_t v18 = (int8x8_t)a2[1];
          uint8x8_t v19 = (uint8x8_t)vcnt_s8(v18);
          v19.i16[0] = vaddlv_u8(v19);
          uint64_t v20 = *(void *)&v18 - 1;
          do
          {
            if (v18)
            {
              unint64_t v21 = v16[2];
              if (v19.u32[0] > 1uLL)
              {
                unint64_t v22 = v16[2];
                if (v21 >= *(void *)&v18) {
                  unint64_t v22 = v21 % *(void *)&v18;
                }
              }
              else
              {
                unint64_t v22 = v20 & v21;
              }
              double v23 = *(void **)(*a2 + 8 * v22);
              if (v23)
              {
                while (1)
                {
                  double v23 = (void *)*v23;
                  if (!v23) {
                    break;
                  }
                  unint64_t v24 = v23[1];
                  if (v24 == v21)
                  {
                    if (v23[2] == v21) {
                      goto LABEL_31;
                    }
                  }
                  else
                  {
                    if (v19.u32[0] > 1uLL)
                    {
                      if (v24 >= *(void *)&v18) {
                        v24 %= *(void *)&v18;
                      }
                    }
                    else
                    {
                      v24 &= v20;
                    }
                    if (v24 != v22) {
                      break;
                    }
                  }
                }
              }
            }
            uint64_t v16 = (void *)*v16;
            BOOL v17 = v16 != 0;
          }
          while (v16);
        }
LABEL_31:
        BOOL v25 = v17;
        if (*((unsigned char *)v12 + 312) != v17 && *((unsigned char *)v12 + 160) == 0)
        {
          if (v17)
          {
            Phase::Controller::GetCurveFunctionFromCurveType<double>(*((Phase::Logger **)v12 + 18), v48);
            Phase::Fader<double>::SetInternal((uint64_t)(v12 + 21), (uint64_t)v48, v12[13], v12[16]);
            Phase::Fader<double>::SetInternal((uint64_t)(v12 + 27), (uint64_t)v48, v12[14], v12[16]);
            Phase::Fader<double>::SetInternal((uint64_t)(v12 + 33), (uint64_t)v48, v12[15], v12[16]);
          }
          else
          {
            Phase::Controller::GetCurveFunctionFromCurveType<double>(*((Phase::Logger **)v12 + 19), v48);
            Phase::Fader<double>::SetInternal((uint64_t)(v12 + 21), (uint64_t)v48, v12[25], v12[17]);
            Phase::Fader<double>::SetInternal((uint64_t)(v12 + 27), (uint64_t)v48, v12[31], v12[17]);
            Phase::Fader<double>::SetInternal((uint64_t)(v12 + 33), (uint64_t)v48, v12[37], v12[17]);
          }
          std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v48);
          *((unsigned char *)v12 + 312) = v25;
        }
        Phase::Fader<double>::Update((uint64_t)(v12 + 21), a3);
        Phase::Fader<double>::Update((uint64_t)(v12 + 27), a3);
        Phase::Fader<double>::Update((uint64_t)(v12 + 33), a3);
        uint64_t v32 = *(double **)(a1 + 56);
        if (v32)
        {
          int8x8_t v33 = (int8x8_t)v12[9];
          uint8x8_t v34 = (uint8x8_t)vcnt_s8(v33);
          v34.i16[0] = vaddlv_u8(v34);
          uint64_t v35 = *(void *)&v33 - 1;
          do
          {
            if (v33)
            {
              unint64_t v36 = *((void *)v32 + 2);
              if (v34.u32[0] > 1uLL)
              {
                unint64_t v37 = *((void *)v32 + 2);
                if (*(void *)&v33 <= v36) {
                  unint64_t v37 = v36 % *(void *)&v33;
                }
              }
              else
              {
                unint64_t v37 = v35 & v36;
              }
              long long v38 = *(void **)(*((void *)v12 + 8) + 8 * v37);
              if (v38)
              {
                while (1)
                {
                  long long v38 = (void *)*v38;
                  if (!v38) {
                    break;
                  }
                  unint64_t v39 = v38[1];
                  if (v39 == v36)
                  {
                    if (v38[2] == v36)
                    {
                      double v40 = v32[30];
                      v32[29] = fmin(v32[29], v12[26]);
                      v32[31] = fmin(v32[31], v12[32]);
                      v32[30] = fmin(v40, v12[38]);
                      break;
                    }
                  }
                  else
                  {
                    if (v34.u32[0] > 1uLL)
                    {
                      if (v39 >= *(void *)&v33) {
                        v39 %= *(void *)&v33;
                      }
                    }
                    else
                    {
                      v39 &= v35;
                    }
                    if (v39 != v37) {
                      break;
                    }
                  }
                }
              }
            }
            uint64_t v32 = *(double **)v32;
          }
          while (v32);
        }
        uint64_t v27 = *(double **)v12;
        goto LABEL_84;
      }
      int8x8_t v13 = *(int8x8_t *)(a1 + 88);
      unint64_t v14 = *((void *)v12 + 1);
      uint8x8_t v15 = (uint8x8_t)vcnt_s8(v13);
      v15.i16[0] = vaddlv_u8(v15);
      if (v15.u32[0] > 1uLL)
      {
        if (v14 >= *(void *)&v13) {
          v14 %= *(void *)&v13;
        }
      }
      else
      {
        v14 &= *(void *)&v13 - 1;
      }
      uint64_t v27 = *(double **)v12;
      uint64_t v28 = *(void *)(a1 + 80);
      double v29 = *(double **)(v28 + 8 * v14);
      do
      {
        uint64_t v30 = v29;
        double v29 = *(double **)v29;
      }
      while (v29 != v12);
      if (v30 == (double *)(a1 + 96)) {
        goto LABEL_91;
      }
      unint64_t v31 = *((void *)v30 + 1);
      if (v15.u32[0] > 1uLL)
      {
        if (v31 >= *(void *)&v13) {
          v31 %= *(void *)&v13;
        }
      }
      else
      {
        v31 &= *(void *)&v13 - 1;
      }
      double v41 = *v12;
      if (v31 != v14)
      {
LABEL_91:
        if (v27)
        {
          unint64_t v42 = *((void *)v27 + 1);
          if (v15.u32[0] > 1uLL)
          {
            if (v42 >= *(void *)&v13) {
              v42 %= *(void *)&v13;
            }
          }
          else
          {
            v42 &= *(void *)&v13 - 1;
          }
          double v41 = *v12;
          if (v42 == v14)
          {
LABEL_77:
            unint64_t v43 = *(void *)(*(void *)&v41 + 8);
            if (v15.u32[0] > 1uLL)
            {
              if (v43 >= *(void *)&v13) {
                v43 %= *(void *)&v13;
              }
            }
            else
            {
              v43 &= *(void *)&v13 - 1;
            }
            if (v43 != v14)
            {
              *(void *)(*(void *)(a1 + 80) + 8 * v43) = v30;
              double v41 = *v12;
            }
            goto LABEL_83;
          }
        }
        *(void *)(v28 + 8 * v14) = 0;
        double v41 = *v12;
      }
      if (v41 != 0.0) {
        goto LABEL_77;
      }
LABEL_83:
      *uint64_t v30 = v41;
      *uint64_t v12 = 0.0;
      --*(void *)(a1 + 104);
      v48[0] = v12;
      v48[1] = a1 + 96;
      char v49 = 1;
      std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,void *>>>>::reset[abi:ne180100]((uint64_t)v48);
LABEL_84:
      uint64_t v12 = v27;
    }
    while (v27);
  }
  for (j = *(uint64_t **)(a1 + 56); j; j = (uint64_t *)*j)
  {
    int v45 = -2128831035;
    for (uint64_t k = 40; k != 456; ++k)
      int v45 = 16777619 * (v45 ^ *((char *)j + k));
    *((_DWORD *)j + 114) = v45;
  }
}

void sub_221F7FC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

double Phase::Controller::GroupManager::GetGain(Phase::Controller::GroupManager *this, unint64_t a2)
{
  unint64_t v5 = a2;
  unint64_t v3 = (double *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 5, &v5);
  if (v3)
  {
    if (*((unsigned char *)v3 + 449)) {
      return v3[10] * v3[37] * v3[29];
    }
    double result = 0.0;
    if (!*((unsigned char *)v3 + 448) && !*((unsigned char *)this + 128)) {
      return v3[10] * v3[37] * v3[29];
    }
  }
  else
  {
    double result = 0.0;
    if (!*((unsigned char *)this + 128)) {
      return 1.0;
    }
  }
  return result;
}

void *Phase::Controller::GroupManager::SetGain(Phase::Controller::GroupManager *this, unint64_t a2, double a3, double a4, Phase::Logger *a5)
{
  void v13[4] = *MEMORY[0x263EF8340];
  unint64_t v12 = a2;
  double result = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 5, &v12);
  uint64_t v10 = result;
  if (result)
  {
    double v11 = *((double *)this + 22);
    Phase::Controller::GetCurveFunctionFromCurveType<double>(a5, v13);
    Phase::Fader<double>::SetInternal((uint64_t)(v10 + 5), (uint64_t)v13, a3, v11 * a4);
    return std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v13);
  }
  return result;
}

void sub_221F7FDCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *Phase::Controller::GroupManager::SetGainHighFreq(Phase::Controller::GroupManager *this, unint64_t a2, double a3, double a4, Phase::Logger *a5)
{
  void v13[4] = *MEMORY[0x263EF8340];
  unint64_t v12 = a2;
  double result = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 5, &v12);
  uint64_t v10 = result;
  if (result)
  {
    double v11 = *((double *)this + 22);
    Phase::Controller::GetCurveFunctionFromCurveType<double>(a5, v13);
    Phase::Fader<double>::SetInternal((uint64_t)(v10 + 11), (uint64_t)v13, a3, v11 * a4);
    return std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v13);
  }
  return result;
}

void sub_221F7FEA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *Phase::Controller::GroupManager::SetGainLowFreq(Phase::Controller::GroupManager *this, unint64_t a2, double a3, double a4, Phase::Logger *a5)
{
  void v13[4] = *MEMORY[0x263EF8340];
  unint64_t v12 = a2;
  double result = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 5, &v12);
  uint64_t v10 = result;
  if (result)
  {
    double v11 = *((double *)this + 22);
    Phase::Controller::GetCurveFunctionFromCurveType<double>(a5, v13);
    Phase::Fader<double>::SetInternal((uint64_t)(v10 + 17), (uint64_t)v13, a3, v11 * a4);
    return std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v13);
  }
  return result;
}

void sub_221F7FF7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *Phase::Controller::GroupManager::SetRate(Phase::Controller::GroupManager *this, unint64_t a2, double a3, double a4, Phase::Logger *a5)
{
  void v13[4] = *MEMORY[0x263EF8340];
  unint64_t v12 = a2;
  double result = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 5, &v12);
  uint64_t v10 = result;
  if (result)
  {
    double v11 = *((double *)this + 22);
    Phase::Controller::GetCurveFunctionFromCurveType<double>(a5, v13);
    Phase::Fader<double>::SetInternal((uint64_t)(v10 + 23), (uint64_t)v13, a3, v11 * a4);
    return std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v13);
  }
  return result;
}

void sub_221F80054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::GroupManager::StartDuck(Phase::Controller::GroupManager *this, PHASEDucker *a2)
{
  unint64_t v3 = a2;
  unint64_t v4 = [(PHASEDucker *)v3 identifier];
  uint64_t StringHashId = Phase::GetStringHashId(v4, v5);
  Phase::Controller::Ducker::Ducker((Phase::Controller::Ducker *)v8, v3, *((double *)this + 22));
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>>>::__emplace_unique_key_args<unsigned long long,unsigned long long,Phase::Controller::Ducker>((uint64_t)this + 80, (unint64_t *)&StringHashId, &StringHashId, (uint64_t)v8);
  LOBYTE(this) = v6;
  unint64_t v14 = (void **)&v12;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v14);
  unint64_t v14 = (void **)&v11;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v14);
  unint64_t v14 = (void **)&v10;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v14);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v8);

  return this & 1;
}

void sub_221F80140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Phase::Controller::Ducker::~Ducker((Phase::Controller::Ducker *)va);

  _Unwind_Resume(a1);
}

void Phase::Controller::Ducker::~Ducker(Phase::Controller::Ducker *this)
{
  unint64_t v2 = (void **)((char *)this + 240);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = (void **)((char *)this + 192);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v2);
  unint64_t v2 = (void **)((char *)this + 144);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this);
}

BOOL Phase::Controller::GroupManager::ReleaseDuck(Phase::Controller::GroupManager *this, PHASEDucker *a2)
{
  unint64_t v3 = a2;
  unint64_t v4 = [(PHASEDucker *)v3 identifier];
  uint64_t StringHashId = Phase::GetStringHashId(v4, v5);
  char v6 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 10, (unint64_t *)&StringHashId);

  if (v6) {
    Phase::Controller::Ducker::Release((Phase::Controller::Ducker *)(v6 + 3));
  }

  return v6 != 0;
}

void sub_221F80258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::GroupManager::SetPreset(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v7 = a2;
  unint64_t v8 = v7;
  if (v7)
  {
    [v7 timeToReset];
    *(void *)(a1 + 120) = v9;
    [v8 timeToTarget];
    if (a4) {
      double v10 = *(double *)&a3;
    }
    double v11 = v10 * *(double *)(a1 + 176);
    for (BOOL i = *(double **)(a1 + 56); i; BOOL i = *(double **)i)
    {
      unint64_t v37 = &unk_26D4715B0;
      long long v38 = Phase::CurveFunction::Linear<double>;
      unint64_t v39 = &v37;
      Phase::Fader<double>::SetInternal((uint64_t)(i + 32), (uint64_t)&v37, i[36], v11);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v37);
      unint64_t v37 = &unk_26D4715B0;
      long long v38 = Phase::CurveFunction::Linear<double>;
      unint64_t v39 = &v37;
      Phase::Fader<double>::SetInternal((uint64_t)(i + 44), (uint64_t)&v37, i[48], v11);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v37);
      unint64_t v37 = &unk_26D4715B0;
      long long v38 = Phase::CurveFunction::Linear<double>;
      unint64_t v39 = &v37;
      Phase::Fader<double>::SetInternal((uint64_t)(i + 38), (uint64_t)&v37, i[42], v11);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v37);
      unint64_t v37 = &unk_26D4715B0;
      long long v38 = Phase::CurveFunction::Linear<double>;
      unint64_t v39 = &v37;
      Phase::Fader<double>::SetInternal((uint64_t)(i + 50), (uint64_t)&v37, i[54], v11);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v37);
    }
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    int8x8_t v13 = [v8 settings];
    uint64_t v15 = [v13 countByEnumeratingWithState:&v32 objects:v36 count:16];
    if (v15)
    {
      uint64_t v16 = (void *)(a1 + 40);
      uint64_t v17 = *(void *)v33;
      do
      {
        for (uint64_t j = 0; j != v15; ++j)
        {
          if (*(void *)v33 != v17) {
            objc_enumerationMutation(v13);
          }
          uint8x8_t v19 = *(Phase **)(*((void *)&v32 + 1) + 8 * j);
          uint64_t StringHashId = 0;
          uint64_t StringHashId = Phase::GetStringHashId(v19, v14);
          uint64_t v20 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v16, (unint64_t *)&StringHashId);
          if (v20)
          {
            unint64_t v21 = [v8 settings];
            unint64_t v22 = [v21 objectForKey:v19];

            [v22 gain];
            unint64_t v37 = &unk_26D4715B0;
            long long v38 = Phase::CurveFunction::Linear<double>;
            unint64_t v39 = &v37;
            Phase::Fader<double>::SetInternal((uint64_t)(v20 + 32), (uint64_t)&v37, v23, v11);
            std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v37);
            [v22 gainHighFrequency];
            unint64_t v37 = &unk_26D4715B0;
            long long v38 = Phase::CurveFunction::Linear<double>;
            unint64_t v39 = &v37;
            Phase::Fader<double>::SetInternal((uint64_t)(v20 + 44), (uint64_t)&v37, v24, v11);
            std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v37);
            [v22 gainLowFrequency];
            unint64_t v37 = &unk_26D4715B0;
            long long v38 = Phase::CurveFunction::Linear<double>;
            unint64_t v39 = &v37;
            Phase::Fader<double>::SetInternal((uint64_t)(v20 + 38), (uint64_t)&v37, v25, v11);
            std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v37);
            [v22 rate];
            unint64_t v37 = &unk_26D4715B0;
            long long v38 = Phase::CurveFunction::Linear<double>;
            unint64_t v39 = &v37;
            Phase::Fader<double>::SetInternal((uint64_t)(v20 + 50), (uint64_t)&v37, v26, v11);
            std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v37);
          }
        }
        uint64_t v15 = [v13 countByEnumeratingWithState:&v32 objects:v36 count:16];
      }
      while (v15);
    }
  }
  else
  {
    if (!a4) {
      a3 = *(uint64_t *)(a1 + 120);
    }
    double v27 = *(double *)(a1 + 176);
    *(void *)(a1 + 120) = 0;
    uint64_t v28 = *(double **)(a1 + 56);
    if (v28)
    {
      double v29 = *(double *)&a3 * v27;
      do
      {
        unint64_t v37 = &unk_26D4715B0;
        long long v38 = Phase::CurveFunction::Linear<double>;
        unint64_t v39 = &v37;
        Phase::Fader<double>::SetInternal((uint64_t)(v28 + 32), (uint64_t)&v37, v28[36], v29);
        std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v37);
        unint64_t v37 = &unk_26D4715B0;
        long long v38 = Phase::CurveFunction::Linear<double>;
        unint64_t v39 = &v37;
        Phase::Fader<double>::SetInternal((uint64_t)(v28 + 44), (uint64_t)&v37, v28[48], v29);
        std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v37);
        unint64_t v37 = &unk_26D4715B0;
        long long v38 = Phase::CurveFunction::Linear<double>;
        unint64_t v39 = &v37;
        Phase::Fader<double>::SetInternal((uint64_t)(v28 + 38), (uint64_t)&v37, v28[42], v29);
        std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v37);
        unint64_t v37 = &unk_26D4715B0;
        long long v38 = Phase::CurveFunction::Linear<double>;
        unint64_t v39 = &v37;
        Phase::Fader<double>::SetInternal((uint64_t)(v28 + 50), (uint64_t)&v37, v28[54], v29);
        std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v37);
        uint64_t v28 = *(double **)v28;
      }
      while (v28);
    }
  }

  return 1;
}

void sub_221F807F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double Phase::Controller::GroupManager::SetUnitsPerSecond(Phase::Controller::GroupManager *this, double a2)
{
  double v3 = Phase::Controller::sClamp<double>(this, a2, *((double *)this + 17), *((double *)this + 18));
  double v4 = *((double *)this + 20);
  if (v3 != v4)
  {
    *((double *)this + 20) = v3;
    *((unsigned char *)this + 168) = 1;
    double v4 = v3;
  }
  double result = 1.0 / v4;
  *((double *)this + 22) = 1.0 / v4;
  return result;
}

void Phase::Controller::GroupManager::~GroupManager(Phase::Controller::GroupManager *this)
{
  *(void *)this = &unk_26D477C20;
  unint64_t v2 = (char *)this + 40;
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Group>>>::~__hash_table((uint64_t)v2);

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  char *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D477C20;
  unint64_t v2 = (char *)this + 40;
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>>>::~__hash_table((uint64_t)this + 80);
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Group>>>::~__hash_table((uint64_t)v2);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);

  JUMPOUT(0x223C938A0);
}

Phase::Controller::Group *Phase::Controller::Group::Group(Phase::Controller::Group *this, uint64_t a2, PHASEGroup *a3)
{
  unint64_t v5 = a3;
  *(void *)this = a2;
  char v6 = v5;
  *((void *)this + 1) = v6;
  Phase::Controller::Group::DiffableState::DiffableState((Phase::Controller::Group *)((char *)this + 16));
  *((_DWORD *)this + 108) = 0;

  return this;
}

void sub_221F80A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Phase::Controller::Group::DiffableState *Phase::Controller::Group::DiffableState::DiffableState(Phase::Controller::Group::DiffableState *this)
{
  unint64_t v2 = Phase::Fader<double>::Fader(this, 1.0);
  Phase::Fader<double>::Fader((Phase::Logger *)((char *)v2 + 48), 1.0);
  Phase::Fader<double>::Fader((Phase::Controller::Group::DiffableState *)((char *)this + 96), 1.0);
  Phase::Fader<double>::Fader((Phase::Controller::Group::DiffableState *)((char *)this + 144), 1.0);
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 12) = _Q0;
  *((void *)this + 26) = 0x3FF0000000000000;
  Phase::Fader<double>::Fader((Phase::Controller::Group::DiffableState *)((char *)this + 216), 1.0);
  Phase::Fader<double>::Fader((Phase::Controller::Group::DiffableState *)((char *)this + 264), 1.0);
  Phase::Fader<double>::Fader((Phase::Controller::Group::DiffableState *)((char *)this + 312), 1.0);
  Phase::Fader<double>::Fader((Phase::Controller::Group::DiffableState *)((char *)this + 360), 1.0);
  *((_WORD *)this + 204) = 0;
  return this;
}

void sub_221F80AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  double v11 = v10;
  a10 = v11;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void sub_221F80B80()
{
}

void sub_221F80B88()
{
}

void std::__hash_table<unsigned long long,std::hash<unsigned long long>,std::equal_to<unsigned long long>,std::allocator<unsigned long long>>::__emplace_unique_key_args<unsigned long long,unsigned long long>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (BOOL i = (void *)*v9; i; BOOL i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = operator new(0x18uLL);
  *uint64_t v12 = 0;
  v12[1] = a2;
  _DWORD v12[2] = a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *uint64_t v12 = *v20;
LABEL_38:
    *uint64_t v20 = v12;
    goto LABEL_39;
  }
  *uint64_t v12 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v12;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    unint64_t v21 = *(void *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_221F80D84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Group>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (id *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::Group>,0>(v2 + 2);
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  double v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::Group>,0>(id *a1)
{
  unint64_t v2 = a1 + 3;
  unint64_t v3 = a1 + 48;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = a1 + 42;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = a1 + 36;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = a1 + 30;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = a1 + 21;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = a1 + 15;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = a1 + 9;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
  unint64_t v3 = v2;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void **)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::Ducker>,0>(v2 + 2);
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  double v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::Ducker>,0>(void **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  double v4 = a1 + 31;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v4);
  double v4 = a1 + 25;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v4);
  double v4 = a1 + 19;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)(a1 + 6));
  return std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Group>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,Phase::Controller::Group>(uint64_t a1, unint64_t *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      uint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  float v14 = a4 + 35;
  BOOL v15 = (void *)(a1 + 16);
  unint64_t v16 = (char *)operator new(0x1D0uLL);
  v43[0] = v16;
  v43[1] = a1 + 16;
  *(void *)unint64_t v16 = 0;
  *((void *)v16 + 1) = v8;
  *((void *)v16 + 2) = *a3;
  uint64_t v17 = *a4;
  long long v18 = *(_OWORD *)(a4 + 3);
  *((_OWORD *)v16 + 2) = *(_OWORD *)(a4 + 1);
  *((_OWORD *)v16 + 3) = v18;
  *((void *)v16 + 10) = a4[7];
  *((_OWORD *)v16 + 4) = *(_OWORD *)(a4 + 5);
  *(_OWORD *)(v16 + 88) = *((_OWORD *)a4 + 4);
  *((void *)v16 + 13) = a4[10];
  *((_OWORD *)v16 + 7) = *(_OWORD *)(a4 + 11);
  *((void *)v16 + 16) = a4[13];
  *(_OWORD *)(v16 + 136) = *((_OWORD *)a4 + 7);
  *((void *)v16 + 19) = a4[16];
  long long v19 = *(_OWORD *)(a4 + 17);
  *((void *)v16 + 22) = a4[19];
  *((_OWORD *)v16 + 10) = v19;
  *(_OWORD *)(v16 + 184) = *((_OWORD *)a4 + 10);
  *((void *)v16 + 25) = a4[22];
  long long v20 = *(_OWORD *)(a4 + 23);
  *((void *)v16 + 28) = a4[25];
  *((_OWORD *)v16 + 13) = v20;
  long long v21 = *((_OWORD *)a4 + 13);
  *((void *)v16 + 31) = a4[28];
  *(_OWORD *)(v16 + 232) = v21;
  *((_OWORD *)v16 + 16) = *(_OWORD *)(a4 + 29);
  *((void *)v16 + 34) = a4[31];
  *((void *)v16 + 37) = a4[34];
  *((_OWORD *)v16 + 19) = *v14;
  *((void *)v16 + 40) = a4[37];
  *((void *)v16 + 43) = a4[40];
  *((_OWORD *)v16 + 22) = *(_OWORD *)(a4 + 41);
  *((void *)v16 + 46) = a4[43];
  *((void *)v16 + 49) = a4[46];
  *((_OWORD *)v16 + 25) = *(_OWORD *)(a4 + 47);
  *((void *)v16 + 52) = a4[49];
  *((void *)v16 + 55) = a4[52];
  *((_WORD *)v16 + 224) = *((_WORD *)a4 + 212);
  *((_DWORD *)v16 + 114) = *((_DWORD *)a4 + 108);
  *((void *)v16 + 3) = v17;
  v16 += 24;
  a4[1] = 0;
  a4[2] = 0;
  a4[3] = 0;
  a4[4] = 0;
  a4[9] = 0;
  a4[10] = 0;
  a4[8] = 0;
  a4[14] = 0;
  a4[15] = 0;
  a4[16] = 0;
  a4[20] = 0;
  a4[21] = 0;
  a4[22] = 0;
  a4[29] = 0;
  a4[30] = 0;
  a4[31] = 0;
  *((_OWORD *)v16 + 16) = *((_OWORD *)a4 + 16);
  *(void *)float v14 = 0;
  a4[36] = 0;
  a4[37] = 0;
  *((_OWORD *)v16 + 19) = *((_OWORD *)a4 + 19);
  a4[41] = 0;
  a4[42] = 0;
  a4[43] = 0;
  *((_OWORD *)v16 + 22) = *((_OWORD *)a4 + 22);
  a4[47] = 0;
  a4[48] = 0;
  a4[49] = 0;
  *((_OWORD *)v16 + 25) = *((_OWORD *)a4 + 25);
  char v44 = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v9 || (float)(v23 * (float)v9) < v22)
  {
    BOOL v24 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    unint64_t v25 = v24 | (2 * v9);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    else {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (*(void *)&prime <= v34) {
        int8x8_t prime = (int8x8_t)v34;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v28 = operator new(8 * *(void *)&prime);
          double v29 = *(void **)a1;
          *(void *)a1 = v28;
          if (v29) {
            operator delete(v29);
          }
          uint64_t v30 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v30++) = 0;
          while (*(void *)&prime != v30);
          unint64_t v31 = (void *)*v15;
          if (*v15)
          {
            unint64_t v32 = v31[1];
            uint8x8_t v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(void *)&prime) {
                v32 %= *(void *)&prime;
              }
            }
            else
            {
              v32 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v32) = v15;
            unint64_t v37 = (void *)*v31;
            if (*v31)
            {
              do
              {
                unint64_t v38 = v37[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v38 >= *(void *)&prime) {
                    v38 %= *(void *)&prime;
                  }
                }
                else
                {
                  v38 &= *(void *)&prime - 1;
                }
                if (v38 != v32)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v38))
                  {
                    *(void *)(*(void *)a1 + 8 * v38) = v31;
                    goto LABEL_56;
                  }
                  *unint64_t v31 = *v37;
                  *unint64_t v37 = **(void **)(*(void *)a1 + 8 * v38);
                  **(void **)(*(void *)a1 + 8 * v38) = v37;
                  unint64_t v37 = v31;
                }
                unint64_t v38 = v32;
LABEL_56:
                unint64_t v31 = v37;
                unint64_t v37 = (void *)*v37;
                unint64_t v32 = v38;
              }
              while (v37);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_60;
        }
        unint64_t v42 = *(void **)a1;
        *(void *)a1 = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_60:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  unint64_t v39 = *(void **)(*(void *)a1 + 8 * v4);
  if (v39)
  {
    *(void *)v43[0] = *v39;
    *unint64_t v39 = v43[0];
  }
  else
  {
    *(void *)v43[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v43[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v43[0])
    {
      unint64_t v40 = *(void *)(*(void *)v43[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v40 >= v9) {
          v40 %= v9;
        }
      }
      else
      {
        v40 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v40) = v43[0];
    }
  }
  uint64_t v12 = (void *)v43[0];
  v43[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,void *>>>>::reset[abi:ne180100]((uint64_t)v43, 0);
  return v12;
}

void sub_221F81504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(id **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::Group>,0>(v2 + 2);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Group>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Group>>>::__erase_unique<unsigned long long>(void *a1, unint64_t *a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Group>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void ***)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::Ducker>,0>(v1 + 2);
    }
    operator delete(v1);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>>>::__emplace_unique_key_args<unsigned long long,unsigned long long,Phase::Controller::Ducker>(uint64_t a1, unint64_t *a2, void *a3, uint64_t a4)
{
  unint64_t v8 = *a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (BOOL i = *v11; i; BOOL i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == v8) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  float v14 = (void *)(a1 + 16);
  BOOL v15 = (char *)operator new(0x140uLL);
  v41[0] = v15;
  v41[1] = a1 + 16;
  *(void *)BOOL v15 = 0;
  *((void *)v15 + 1) = v8;
  *((void *)v15 + 2) = *a3;
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table((uint64_t)(v15 + 24), (uint64_t *)a4);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::Parameter<double>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::Parameter<double>>>>::__hash_table((uint64_t)(v15 + 64), (uint64_t *)(a4 + 40));
  long long v16 = *(_OWORD *)(a4 + 96);
  *(_OWORD *)(v15 + 104) = *(_OWORD *)(a4 + 80);
  *(_OWORD *)(v15 + 120) = v16;
  *(_OWORD *)(v15 + 136) = *(_OWORD *)(a4 + 112);
  *(_OWORD *)(v15 + 145) = *(_OWORD *)(a4 + 121);
  *(_OWORD *)(v15 + 168) = *(_OWORD *)(a4 + 144);
  *((void *)v15 + 23) = *(void *)(a4 + 160);
  *(void *)(a4 + 144) = 0;
  *(void *)(a4 + 152) = 0;
  *(void *)(a4 + 160) = 0;
  *((_OWORD *)v15 + 12) = *(_OWORD *)(a4 + 168);
  *((void *)v15 + 26) = *(void *)(a4 + 184);
  long long v18 = *(_OWORD *)(a4 + 240);
  uint64_t v17 = a4 + 240;
  *(_OWORD *)(v15 + 216) = *(_OWORD *)(v17 - 48);
  *((void *)v15 + 29) = *(void *)(v17 - 32);
  *(void *)(v17 - 40) = 0;
  *(void *)(v17 - 32) = 0;
  *(void *)(v17 - 48) = 0;
  *((_OWORD *)v15 + 15) = *(_OWORD *)(v17 - 24);
  *((void *)v15 + 32) = *(void *)(v17 - 8);
  *(_OWORD *)(v15 + 264) = v18;
  *((void *)v15 + 35) = *(void *)(v17 + 16);
  *(void *)uint64_t v17 = 0;
  *(void *)(v17 + 8) = 0;
  *(void *)(v17 + 16) = 0;
  long long v19 = *(_OWORD *)(v17 + 24);
  *((void *)v15 + 38) = *(void *)(v17 + 40);
  *((_OWORD *)v15 + 18) = v19;
  v15[312] = *(unsigned char *)(v17 + 48);
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v26 = operator new(8 * *(void *)&prime);
          double v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          double v29 = (void *)*v14;
          if (*v14)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v14;
            uint8x8_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_56;
                  }
                  *double v29 = *v35;
                  *uint8x8_t v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  uint8x8_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_56:
                double v29 = v35;
                uint8x8_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_60;
        }
        unint64_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_60:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  unint64_t v37 = *(void **)(*(void *)a1 + 8 * v4);
  BOOL i = (void *)v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_73:
    *unint64_t v37 = i;
    goto LABEL_74;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v4) = v14;
  if (*i)
  {
    unint64_t v38 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    unint64_t v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_73;
  }
LABEL_74:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
  return i;
}

void sub_221F81AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::Ducker>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *Phase::HeapAllocator::Destroy(Phase::HeapAllocator *this)
{
  unsigned int v2 = *((_DWORD *)this + 8);
  if ((v2 & 0x10) != 0) {
    Phase::SpinLock::Lock((atomic_uchar *)this);
  }
  int v3 = (v2 >> 4) & 1;
  unint64_t v4 = (Phase::VirtualAllocator *)*((void *)this + 118);
  if (v4)
  {
    Phase::VirtualAllocator::DecommitPages(v4, (const void *)*((unsigned int *)this + 239));
    Phase::VirtualAllocator::ReleaseAddressSpace(*((Phase::VirtualAllocator **)this + 118), (const void *)*((unsigned int *)this + 238));
  }
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *((void *)this + 11) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  *((void *)this + 1) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 0;
  uint64_t result = memset((char *)this + 132, 255, 0x280uLL);
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_DWORD *)this + 198) = 0;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((void *)this + 122) = 0;
  if (v3) {
    atomic_store(0, (unsigned __int8 *)this);
  }
  return result;
}

void sub_221F81BC4(_Unwind_Exception *a1)
{
  if (v2) {
    atomic_store(0, v1);
  }
  _Unwind_Resume(a1);
}

void Phase::HeapAllocator::InitializeWithBacking(Phase::HeapAllocator *this, unint64_t a2, const char *a3, int a4, uint64_t a5, int a6)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  if (HIDWORD(a2))
  {
    double v46 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 64);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      int v58 = 136315650;
      double v59 = "HeapAllocator.cpp";
      __int16 v60 = 1024;
      int v61 = 1100;
      __int16 v62 = 2048;
      uint64_t v63 = a2;
      _os_log_impl(&dword_221E5E000, v46, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inMaxSizeInBytes > 0xffffffff is true]: \"Invalid inMaxSizeInBytes: %zu!\\n\"", (uint8_t *)&v58, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid inMaxSizeInBytes: %zu!\n");
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)a5);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] != 1)
  {
    double v48 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 64);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      int v58 = 136315650;
      double v59 = "HeapAllocator.cpp";
      __int16 v60 = 1024;
      int v61 = 1107;
      __int16 v62 = 2048;
      uint64_t v63 = a5;
      _os_log_impl(&dword_221E5E000, v48, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!IsPowerOfTwo(inAlignmentInBytes) is true]: \"Invalid inAlignmentInBytes: %zu!\\n\"", (uint8_t *)&v58, 0x1Cu);
    }
    char v49 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v49, "Invalid inAlignmentInBytes: %zu!\n");
  }
  *(_OWORD *)((char *)this + 40) = 0u;
  unint64_t v13 = (char *)this + 40;
  *((void *)this + 11) = 0;
  float v14 = (char *)this + 88;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  BOOL v15 = (char *)this + 132;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 68) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
  long long v16 = (_OWORD *)((char *)this + 800);
  *((_OWORD *)this + 1) = 0u;
  memset((char *)this + 132, 255, 0x280uLL);
  *((_OWORD *)v13 + 46) = 0u;
  *((_DWORD *)v13 + 188) = 0;
  _OWORD *v16 = 0u;
  *(_OWORD *)(v13 + 776) = 0u;
  *(_OWORD *)(v13 + 792) = 0u;
  *(_OWORD *)(v13 + 808) = 0u;
  *(_OWORD *)(v13 + 824) = 0u;
  *(_OWORD *)(v13 + 840) = 0u;
  *(_OWORD *)(v13 + 856) = 0u;
  *(_OWORD *)(v13 + 872) = 0u;
  *(_OWORD *)(v13 + 888) = 0u;
  *(_OWORD *)(v13 + 904) = 0u;
  *(_OWORD *)(v13 + 920) = 0u;
  *((void *)v13 + 117) = 0;
  *((_DWORD *)v13 - 2) = a4;
  *((void *)v13 - 4) = a3;
  uint64_t v17 = (_DWORD *)MEMORY[0x263EF8AF0];
  unint64_t v18 = (*MEMORY[0x263EF8AE8] + a2) >> *MEMORY[0x263EF8AF0];
  if (!a2) {
    LODWORD(v18) = 0;
  }
  *((_DWORD *)v13 + 228) = v18;
  long long v19 = (Phase::Logger *)Phase::VirtualAllocator::ReserveAddressSpace((Phase::VirtualAllocator *)v18);
  *((void *)v13 + 113) = v19;
  if (!v19)
  {
    uint64_t v50 = (Phase::Logger *)Phase::HeapAllocator::Destroy(this);
    double v51 = **(NSObject ***)(Phase::Logger::GetInstance(v50) + 32);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      int v58 = 136315394;
      double v59 = "HeapAllocator.cpp";
      __int16 v60 = 1024;
      int v61 = 195;
      _os_log_impl(&dword_221E5E000, v51, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (OutOfMemory): \"Could not acquire the specified amount of address space from the virtual allocator!\"", (uint8_t *)&v58, 0x12u);
    }
    double v52 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    _ZN5Phase11OutOfMemoryCI1St11logic_errorEPKc(v52, "Could not acquire the specified amount of address space from the virtual allocator!");
  }
  float v20 = v19;
  unint64_t v21 = 8;
  if (a5 > 8) {
    unint64_t v21 = a5;
  }
  int v22 = __clz(v21) ^ 0x3F;
  *((_DWORD *)this + 6) = v22;
  *((void *)this + 116) = v19;
  if (a6 < 0)
  {
    double v53 = **(NSObject ***)(Phase::Logger::GetInstance(v19) + 64);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      int v58 = 136315650;
      double v59 = "HeapAllocator.cpp";
      __int16 v60 = 1024;
      int v61 = 89;
      __int16 v62 = 2048;
      uint64_t v63 = a6;
      _os_log_impl(&dword_221E5E000, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inMaximumAllocationCount < 0 is true]: \"Invalid inMaximumAllocationCount: %lld!\\n\"", (uint8_t *)&v58, 0x1Cu);
    }
    float64x2_t v54 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v54, "Invalid inMaximumAllocationCount: %lld!\n");
  }
  int v23 = (((2454267027u * (unint64_t)(((a6 + 15) & 0xFFFFFFF0) >> 1)) >> 32 << 6) & 0xFFFFFF00)
      + (((((a6 + 15) & 0xFFFFFFF0) + 34) / 0x1F) << 9)
      + 688 * ((((a6 + 15) & 0xFFFFFFF0) + 24) / 0x15)
      + 11008;
  *((_DWORD *)this + 235) = v23;
  signed int v24 = (v23 + ~(-1 << v22)) >> v22;
  *((void *)this + 2) = (char *)v19 + (v24 << v22);
  if (v24 >= (int)(a2 >> v22))
  {
    uint64_t v55 = (Phase::Logger *)Phase::HeapAllocator::Destroy(this);
    float64x2_t v56 = **(NSObject ***)(Phase::Logger::GetInstance(v55) + 32);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      int v58 = 136315394;
      double v59 = "HeapAllocator.cpp";
      __int16 v60 = 1024;
      int v61 = 211;
      _os_log_impl(&dword_221E5E000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"InitializeWithBacking failed!\"", (uint8_t *)&v58, 0x12u);
    }
    double v57 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v57, "InitializeWithBacking failed!");
  }
  unsigned int v25 = *((_DWORD *)this + 8);
  int v26 = (v25 >> 4) & 1;
  if ((v25 & 0x10) != 0
    && (Phase::SpinLock::Lock((atomic_uchar *)this), (float v20 = (Phase::VirtualAllocator *)*((void *)this + 118)) == 0))
  {
    BOOL v28 = 1;
  }
  else
  {
    double v27 = (const void *)*((unsigned int *)this + 239);
    if (v27)
    {
      Phase::VirtualAllocator::DecommitPages(v20, v27);
      float v20 = (Phase::VirtualAllocator *)*((void *)this + 118);
      BOOL v28 = v20 == 0;
    }
    else
    {
      BOOL v28 = 0;
    }
  }
  *((_DWORD *)this + 234) = 0;
  *((void *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0;
  *(_OWORD *)unint64_t v13 = 0u;
  *((_OWORD *)v13 + 1) = 0u;
  *(_OWORD *)(v13 + 28) = 0u;
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)float v14 = 0;
  *((_DWORD *)v14 + 6) = 0;
  memset(v15, 255, 0x280uLL);
  _OWORD *v16 = 0u;
  v16[1] = 0u;
  v16[2] = 0u;
  void v16[3] = 0u;
  v16[4] = 0u;
  v16[5] = 0u;
  v16[6] = 0u;
  v16[7] = 0u;
  if (!v28)
  {
    uint64_t v29 = *((unsigned int *)this + 235);
    if (v29) {
      unint64_t v30 = (unint64_t)(*MEMORY[0x263EF8AE8] + v29) >> *v17;
    }
    else {
      unint64_t v30 = 0;
    }
    Phase::VirtualAllocator::CommitPages(v20, (void *)v30);
    *((_DWORD *)this + 239) = v30;
    *((_DWORD *)this + 7) = (*((_DWORD *)this + 236) + *MEMORY[0x263EF8AF8] * (int)v30 - *((_DWORD *)this + 4)) >> *((_DWORD *)this + 6);
  }
  uint64_t v31 = *((void *)this + 116);
  if (v31)
  {
    unsigned int v32 = *((_DWORD *)this + 234);
    for (uint64_t i = 132; i != 644; i += 8)
    {
      unsigned int v34 = Phase::HeapAllocator::AddLookupSet(this, (unsigned int *)(v31 + v32));
      unsigned int v32 = *((_DWORD *)this + 234) + 128;
      *((_DWORD *)this + 234) = v32;
      uint64_t v31 = *((void *)this + 116);
      *(int32x2_t *)((char *)this + i) = vdup_n_s32(v34 - v31);
    }
    do
    {
      unsigned int v35 = Phase::HeapAllocator::AddLookupSet(this, (unsigned int *)(v31 + v32));
      unsigned int v32 = *((_DWORD *)this + 234) + 128;
      *((_DWORD *)this + 234) = v32;
      uint64_t v31 = *((void *)this + 116);
      *(int32x2_t *)((char *)this + i) = vdup_n_s32(v35 - v31);
      i += 8;
    }
    while (i != 772);
    uint64_t v36 = 6;
    do
    {
      unint64_t v37 = Phase::HeapAllocator::AddLookupSet(this, (unsigned int *)(*((void *)this + 116) + v32));
      unsigned int v32 = *((_DWORD *)this + 234) + 128;
      *((_DWORD *)this + 234) = v32;
      uint64_t v38 = *((void *)this + 15);
      if (v38) {
        v37[29] = v38 - *((_DWORD *)this + 232);
      }
      *((void *)this + 15) = v37;
      ++*((_DWORD *)this + 32);
      --v36;
    }
    while (v36);
    Phase::HeapAllocator::AddBlockSet(this, (char *)(*((void *)this + 116) + v32));
    uint64_t v39 = (*((_DWORD *)this + 234) + 688);
    *((_DWORD *)this + 234) = v39;
    Phase::HeapAllocator::AddGapSet(this, (_OWORD *)(*((void *)this + 116) + v39));
    *((_DWORD *)this + 234) += 512;
    signed int v40 = *((_DWORD *)this + 7);
    if (v40 > 0) {
      Phase::HeapAllocator::AddGap(this, 0, v40, 0xFFFFFFFF, 0xFFFFFFFF);
    }
    int v41 = *((_DWORD *)this + 8);
    if (v41)
    {
      Phase::Memset8(*((Phase **)this + 2), (void *)0xCDCDCDCDCDCDCDCDLL, (int)(*((_DWORD *)this + 7) << *((_DWORD *)this + 6)));
      int v41 = *((_DWORD *)this + 8);
    }
    if ((v41 & 0x20) != 0)
    {
      uint64_t v42 = *((void *)this + 118);
      uint64_t v43 = v42
          ? v42 + *MEMORY[0x263EF8AF8] * *((unsigned int *)this + 238) - *((void *)this + 2)
          : (int)(*((_DWORD *)this + 7) << *((_DWORD *)this + 6));
      uint64_t v44 = ((0x8000000 - v43) & ((0x8000000 - v43) >> 63)) + v43;
      Internal = Phase::HeapAllocator::AllocateInternal(this, ((unint64_t)((int)(v44 >> 10) + 63) >> 3) & 0x1FFFFFFFFFFFFFF8, "Internal Small Allocation Bits", 0, 0);
      *((void *)this + 98) = Internal;
      if (Internal)
      {
        *((void *)this + 97) = (*((void *)this + 2) + 1023) & 0xFFFFFFFFFFFFFC00;
        *((_DWORD *)this + 198) = (unint64_t)v44 >> 10;
        Phase::Memset8(Internal, 0, ((unint64_t)((int)(v44 >> 10) + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
    }
  }
  if (v26) {
    atomic_store(0, (unsigned __int8 *)this);
  }
}

void sub_221F8247C(_Unwind_Exception *exception_object)
{
  if (v2) {
    atomic_store(0, v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::HeapAllocator::Free(Phase::HeapAllocator *this, Phase *a2)
{
  unsigned int v4 = *((_DWORD *)this + 8);
  if ((v4 & 0x10) != 0) {
    Phase::SpinLock::Lock((atomic_uchar *)this);
  }
  uint64_t result = Phase::HeapAllocator::FreeInternal(this, a2);
  if ((v4 >> 4)) {
    atomic_store(0, (unsigned __int8 *)this);
  }
  return result;
}

void sub_221F82514(_Unwind_Exception *a1)
{
  if (v2) {
    atomic_store(0, v1);
  }
  _Unwind_Resume(a1);
}

unsigned int *Phase::HeapAllocator::AddLookupSet(Phase::HeapAllocator *this, unsigned int *a2)
{
  if (a2)
  {
LABEL_7:
    *(void *)&long long v4 = -1;
    *((void *)&v4 + 1) = -1;
    *((_OWORD *)a2 + 5) = v4;
    *((_OWORD *)a2 + 6) = v4;
    *((_OWORD *)a2 + 3) = v4;
    *((_OWORD *)a2 + 4) = v4;
    *((_OWORD *)a2 + 1) = v4;
    *((_OWORD *)a2 + 2) = v4;
    *(_OWORD *)a2 = v4;
    *((void *)a2 + 14) = 0xFFFFFFFF00000000;
    a2[30] = -1;
    return a2;
  }
  a2 = (unsigned int *)*((void *)this + 15);
  if (a2)
  {
    uint64_t v2 = a2[29];
    if (v2 == -1) {
      uint64_t v3 = 0;
    }
    else {
      uint64_t v3 = *((void *)this + 116) + v2;
    }
    *((void *)this + 15) = v3;
    --*((_DWORD *)this + 32);
    goto LABEL_7;
  }
  return a2;
}

void Phase::HeapAllocator::AddBlockSet(Phase::HeapAllocator *this, char *a2)
{
  bzero(a2, 0x2B0uLL);
  uint64_t v4 = 0;
  uint64_t v5 = *((void *)this + 116);
  do
  {
    char v6 = &a2[v4];
    *(_DWORD *)char v6 = -1;
    *((_DWORD *)v6 + 2) = -1;
    *((_DWORD *)v6 + 3) = a2 - v5 + 32 + v4;
    v4 += 32;
  }
  while (v4 != 672);
  uint64_t v7 = *((void *)this + 9);
  int v8 = v7 - v5;
  if (!v7) {
    int v8 = -1;
  }
  *((_DWORD *)a2 + 163) = v8;
  *((void *)this + 9) = a2;
  *((_DWORD *)this + 20) += 21;
  if (*((void *)this + 7))
  {
    *((void *)a2 + 84) = 0;
    uint64_t v10 = *((void *)this + 8);
    unint64_t v9 = (void *)((char *)this + 64);
    *((void *)a2 + 85) = v10;
    *(void *)(v10 + 672) = a2;
  }
  else
  {
    *((void *)a2 + 84) = 0;
    *((void *)a2 + 85) = 0;
    *((void *)this + 7) = a2;
    unint64_t v9 = (void *)((char *)this + 64);
  }
  *unint64_t v9 = a2;
}

void *Phase::HeapAllocator::AddGapSet(Phase::HeapAllocator *this, _OWORD *a2)
{
  uint64_t v2 = 0;
  a2[30] = 0u;
  a2[31] = 0u;
  a2[28] = 0u;
  a2[29] = 0u;
  a2[26] = 0u;
  a2[27] = 0u;
  a2[24] = 0u;
  a2[25] = 0u;
  a2[22] = 0u;
  a2[23] = 0u;
  a2[20] = 0u;
  a2[21] = 0u;
  a2[18] = 0u;
  a2[19] = 0u;
  a2[16] = 0u;
  a2[17] = 0u;
  a2[14] = 0u;
  a2[15] = 0u;
  a2[12] = 0u;
  a2[13] = 0u;
  a2[10] = 0u;
  a2[11] = 0u;
  a2[8] = 0u;
  a2[9] = 0u;
  a2[6] = 0u;
  a2[7] = 0u;
  a2[4] = 0u;
  a2[5] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  *a2 = 0u;
  a2[1] = 0u;
  uint64_t v3 = *((void *)this + 116);
  do
  {
    uint64_t v4 = &a2[v2];
    *uint64_t v4 = -1;
    v4[2] = -1;
    v4[3] = a2 - v3 + 16 + v2 * 16;
    ++v2;
  }
  while (v2 != 31);
  uint64_t v5 = *((void *)this + 13);
  int v6 = v5 - v3;
  if (v5) {
    int v7 = v6;
  }
  else {
    int v7 = -1;
  }
  *((_DWORD *)a2 + 123) = v7;
  *((void *)this + 13) = a2;
  *((_DWORD *)this + 28) += 31;
  if (*((void *)this + 11))
  {
    uint64_t v9 = *((void *)this + 12);
    uint64_t result = (void *)((char *)this + 96);
    *((void *)a2 + 62) = 0;
    *((void *)a2 + 63) = v9;
    *(void *)(v9 + 496) = a2;
  }
  else
  {
    *((void *)a2 + 62) = 0;
    *((void *)a2 + 63) = 0;
    *((void *)this + 11) = a2;
    uint64_t result = (void *)((char *)this + 96);
  }
  *uint64_t result = a2;
  return result;
}

_DWORD *Phase::HeapAllocator::AddGap(Phase::HeapAllocator *this, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if (!a3) {
    __assert_rtn("AddGap", "HeapAllocator.cpp", 1847, "inPageSize != 0");
  }
  if (!*((_DWORD *)this + 28)) {
    return 0;
  }
  uint64_t v10 = (_DWORD *)*((void *)this + 13);
  unsigned int v11 = __clz(a3) ^ 0x1F;
  uint64_t v12 = (Phase::Logger *)Phase::HeapAllocator::AddLookup((uint64_t)this, (_DWORD *)this + 2 * (int)(((15 - v11) & ((int)(15 - v11) >> 31)) + v11) + 161, a3, (int)v10 - *((_DWORD *)this + 232));
  if (!v12) {
    return 0;
  }
  --*((_DWORD *)this + 28);
  uint64_t v13 = v10[3];
  if (v13 == -1) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = *((void *)this + 116) + v13;
  }
  *((void *)this + 13) = v14;
  *uint64_t v10 = a2;
  v10[1] = -a3;
  _DWORD v10[2] = a4;
  v10[3] = a5;
  if (a4 != -1 && *(int *)(*((void *)this + 116) + a4 + 4) <= 0)
  {
    long long v16 = **(NSObject ***)(Phase::Logger::GetInstance(v12) + 64);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v20 = 136315394;
      unint64_t v21 = "HeapAllocator.cpp";
      __int16 v22 = 1024;
      int v23 = 1889;
      _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [ToAllocElem(inNeighborLow)->mSize <= 0 is true]: \"FindGapLookup() failed!\\n\"", (uint8_t *)&v20, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "FindGapLookup() failed!\n");
  }
  if (a5 != -1 && *(int *)(*((void *)this + 116) + a5 + 4) <= 0)
  {
    unint64_t v18 = **(NSObject ***)(Phase::Logger::GetInstance(v12) + 64);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = 136315394;
      unint64_t v21 = "HeapAllocator.cpp";
      __int16 v22 = 1024;
      int v23 = 1895;
      _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [ToAllocElem(inNeighborHigh)->mSize <= 0 is true]: \"FindGapLookup() failed!\\n\"", (uint8_t *)&v20, 0x12u);
    }
    long long v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v19, "FindGapLookup() failed!\n");
  }
  if (a4 == -1) {
    *((void *)this + 5) = v10;
  }
  else {
    *(_DWORD *)(*((void *)this + 116) + a4 + 12) = v10 - *((void *)this + 116);
  }
  if (a5 == -1) {
    *((void *)this + 6) = v10;
  }
  else {
    *(_DWORD *)(*((void *)this + 116) + a5 + 8) = v10 - *((void *)this + 116);
  }
  return v10;
}

void sub_221F829DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase *Phase::HeapAllocator::AllocateInternal(Phase::HeapAllocator *this, unint64_t a2, const char *a3, int a4, unint64_t a5)
{
  uint64_t v9 = this;
  uint64_t v118 = *MEMORY[0x263EF8340];
  if (!a3 && (*((_DWORD *)this + 8) & 8) != 0)
  {
    double v87 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 64);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
    {
      double v88 = (const char *)*((void *)v9 + 1);
      if (!v88) {
        double v88 = "<Unnamed>";
      }
      *(_DWORD *)buf = 136315650;
      double v113 = "HeapAllocator.cpp";
      __int16 v114 = 1024;
      int v115 = 1124;
      __int16 v116 = 2080;
      unint64_t v117 = (unint64_t)v88;
      _os_log_impl(&dword_221E5E000, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(mFlags & kHeapFlagRequireOwnerName) && (pInOwnerName == nullptr) is true]: \"Heap '%s' requires owner name!\\n\"", buf, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Heap '%s' requires owner name!\n");
  }
  unsigned int v10 = a2 - 1;
  unsigned int v11 = ((1 << *((_DWORD *)this + 6)) + a2 - 1) >> *((_DWORD *)this + 6);
  if (!v11) {
    return 0;
  }
  if (a3 == "Internal Bookkeeping") {
    goto LABEL_13;
  }
  Phase::HeapAllocator::AllocateBookkeeping(this);
  if (a4 || a2 > 0xC0 || !*((void *)v9 + 98)) {
    goto LABEL_13;
  }
  unsigned int v12 = 0;
  signed int v13 = 31 - __clz(v10);
  if ((int)a2 <= 1) {
    signed int v13 = 0;
  }
  if (v13 >= 4) {
    unsigned int v12 = ((v10 >> (v13 - 1)) & 1 | (2 * v13)) - 7;
  }
  int v14 = 8 * (v12 & 1);
  unsigned int v15 = v12 >> 1;
  if ((unint64_t)(16 - v14) << (v12 >> 1) < a5)
  {
LABEL_13:
    int v16 = *((_DWORD *)v9 + 6);
    if (1 << v16 >= a5)
    {
      LODWORD(v17) = 0;
      a5 = 0;
    }
    else
    {
      if ((a5 & (a5 - 1)) != 0)
      {
        double v94 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 64);
        if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          double v113 = "HeapAllocator.cpp";
          __int16 v114 = 1024;
          int v115 = 1165;
          __int16 v116 = 2048;
          unint64_t v117 = a5;
          _os_log_impl(&dword_221E5E000, v94, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!IsPowerOfTwo(alignment) is true]: \"invalid alignment: %zu!\\n\"", buf, 0x1Cu);
        }
        double v95 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](v95, "invalid alignment: %zu!\n");
      }
      unint64_t v17 = a5 >> v16;
    }
    unsigned int v18 = ((*((_DWORD *)v9 + 8) >> 2) & 1) + v11;
    double v111 = 0;
    unsigned int v110 = 0;
    GapBySize = (Phase::Logger *)Phase::HeapAllocator::FindGapBySize((uint64_t)v9, &v111, &v110, v18, v17);
    int v20 = GapBySize;
    if (GapBySize)
    {
LABEL_49:
      int v58 = *(_DWORD *)v20;
      if (a5
        && (int v59 = *((_DWORD *)v9 + 6),
            uint64_t v60 = (v58 << v59) + *((void *)v9 + 2),
            a5 = (((a5 + v60 - 1) & -(uint64_t)a5) - v60) >> v59,
            a5))
      {
        if (!*((_DWORD *)v9 + 28) || *((_DWORD *)v9 + 32) <= 1u)
        {
          BOOL v90 = **(NSObject ***)(Phase::Logger::GetInstance(GapBySize) + 64);
          if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            double v113 = "HeapAllocator.cpp";
            __int16 v114 = 1024;
            int v115 = 1226;
            _os_log_impl(&dword_221E5E000, v90, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [(mGapFreeCount < 1) || (mLookupSetFreeCount < 2) is true]: \"not enough memory in additional bookkeeping data to create a new gap!\"", buf, 0x12u);
          }
          double v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v91, "not enough memory in additional bookkeeping data to create a new gap!");
        }
        int v61 = a4;
        char v109 = 0;
      }
      else
      {
        int v61 = a4;
        char v109 = 1;
      }
      if (!*((_DWORD *)v9 + 20)) {
        goto LABEL_92;
      }
      int v62 = a5 + v58;
      uint64_t v63 = *((unsigned int *)v20 + 2);
      uint64_t v64 = *((void *)v9 + 116);
      unsigned int v65 = v20 - v64;
      uint64_t v66 = *((void *)v9 + 9);
      unsigned int v67 = -306674912;
      int v68 = 4;
      unsigned int v69 = v62;
      do
      {
        unsigned int v67 = Phase::sCRC32LookupTable[(v69 ^ v67)] ^ (v67 >> 8);
        v69 >>= 8;
        --v68;
      }
      while (v68);
      GapBySize = (Phase::Logger *)Phase::HeapAllocator::AddLookup((uint64_t)v9, (_DWORD *)v9 + 2 * (v67 & 0x3F) + 33, v62, (int)v66 - (int)v64);
      if (!GapBySize)
      {
LABEL_92:
        double v85 = **(NSObject ***)(Phase::Logger::GetInstance(GapBySize) + 64);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          double v113 = "HeapAllocator.cpp";
          __int16 v114 = 1024;
          int v115 = 1234;
          _os_log_impl(&dword_221E5E000, v85, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (OutOfMemory) [pBlock == nullptr is true]: \"we ran out of bookkeeping data to make allocations!\"", buf, 0x12u);
        }
        double v86 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        _ZN5Phase11OutOfMemoryCI1St11logic_errorEPKc(v86, "we ran out of bookkeeping data to make allocations!");
      }
      --*((_DWORD *)v9 + 20);
      uint64_t v70 = *(unsigned int *)(v66 + 12);
      if (v70 == -1) {
        uint64_t v71 = 0;
      }
      else {
        uint64_t v71 = *((void *)v9 + 116) + v70;
      }
      *((void *)v9 + 9) = v71;
      *(_DWORD *)uint64_t v66 = v62;
      *(_DWORD *)(v66 + 4) = v18;
      *(_DWORD *)(v66 + 8) = v63;
      *(_DWORD *)(v66 + 12) = v65;
      *(_DWORD *)(v66 + 24) = 0;
      *(void *)(v66 + 16) = 0;
      if (v63 == -1) {
        *((void *)v9 + 5) = v66;
      }
      else {
        *(_DWORD *)(*((void *)v9 + 116) + v63 + 12) = v66 - *((void *)v9 + 116);
      }
      if (v65 == -1) {
        *((void *)v9 + 6) = v66;
      }
      else {
        *(_DWORD *)(*((void *)v9 + 116) + v65 + 8) = v66 - *((void *)v9 + 116);
      }
      *(_DWORD *)(v66 + 24) = v61;
      *(void *)(v66 + 16) = a3;
      int v72 = *((_DWORD *)v20 + 1);
      if (v72 >= 0) {
        int v73 = *((_DWORD *)v20 + 1);
      }
      else {
        int v73 = -v72;
      }
      if (v73 <= (int)(a5 + v18))
      {
        Phase::HeapAllocator::RemoveGap((uint64_t)v9, (uint64_t)v20, (uint64_t)v111, v110);
      }
      else
      {
        *(_DWORD *)v20 += a5 + v18;
        Phase::HeapAllocator::ResizeGap((uint64_t)v9, (uint64_t)v20, (uint64_t)v111, v110, v73 - (a5 + v18));
      }
      if ((v109 & 1) == 0
        && !Phase::HeapAllocator::AddGap(v9, *(_DWORD *)v66 - (int)a5, a5, *(_DWORD *)(v66 + 8), (int)v66 - *((_DWORD *)v9 + 232)))
      {
        int32x4_t v96 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 64);
        if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          double v113 = "HeapAllocator.cpp";
          __int16 v114 = 1024;
          int v115 = 1259;
          __int16 v116 = 2048;
          unint64_t v117 = 0;
          _os_log_impl(&dword_221E5E000, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (OutOfMemory) [pFrontGap == nullptr is true]: \"pFrontGap %p should be nullptr!\\n\"", buf, 0x1Cu);
        }
        int32x4_t v97 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        _ZN5Phase11OutOfMemoryCI1St11logic_errorEPKc(v97, "pFrontGap %p should be nullptr!\n");
      }
      int v74 = *((_DWORD *)v9 + 6);
      uint64_t v75 = (*(_DWORD *)v66 << v74);
      int v45 = (Phase *)(*((void *)v9 + 2) + v75);
      int v76 = *((_DWORD *)v9 + 8);
      if (v76)
      {
        BOOL v77 = Phase::MemCompare8((Phase *)(*((void *)v9 + 2) + v75), (const void *)0xCDCDCDCDCDCDCDCDLL, v18 << v74);
        if (!v77)
        {
          double v98 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v77) + 64);
          if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            double v113 = "HeapAllocator.cpp";
            __int16 v114 = 1024;
            int v115 = 1269;
            _os_log_impl(&dword_221E5E000, v98, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (OutOfMemory) [!success is true]: \"MemCompare8 failed!\\n\"", buf, 0x12u);
          }
          float v99 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          _ZN5Phase11OutOfMemoryCI1St11logic_errorEPKc(v99, "MemCompare8 failed!\n");
        }
        int v76 = *((_DWORD *)v9 + 8);
      }
      if ((v76 & 2) != 0)
      {
        Phase::Memset8(v45, 0, v18 << *((_DWORD *)v9 + 6));
        int v76 = *((_DWORD *)v9 + 8);
      }
      if ((v76 & 4) != 0)
      {
        int v78 = *((_DWORD *)v9 + 6);
        double v79 = (Phase *)((char *)v45 + ((v18 - 1) << v78));
        size_t v80 = 1 << v78;
        float v81 = (void *)0xEFEFEFEFEFEFEFEFLL;
LABEL_83:
        Phase::Memset8(v79, v81, v80);
        return v45;
      }
      return v45;
    }
    uint64_t v21 = *((void *)v9 + 118);
    if (!v21)
    {
LABEL_103:
      double v92 = **(NSObject ***)(Phase::Logger::GetInstance(GapBySize) + 64);
      if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        double v113 = "HeapAllocator.cpp";
        __int16 v114 = 1024;
        int v115 = 1210;
        _os_log_impl(&dword_221E5E000, v92, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [pGap == nullptr is true]: \"no gap could be found to fit this allocation (and we weren't able to get additional memory from the backing allocator)!\"", buf, 0x12u);
      }
      double v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v93, "no gap could be found to fit this allocation (and we weren't able to get additional memory from the backing allocator)!");
    }
    uint64_t v22 = *((void *)v9 + 6);
    if (v22) {
      LODWORD(v22) = -*(_DWORD *)(v22 + 4) & (*(int *)(v22 + 4) >> 31);
    }
    BOOL v23 = v17 + v18 >= v22;
    int v24 = v17 + v18 - v22;
    if (v24 == 0 || !v23)
    {
      float v100 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 32);
      if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        double v113 = "HeapAllocator.cpp";
        __int16 v114 = 1024;
        int v115 = 1200;
        _os_log_impl(&dword_221E5E000, v100, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"InitializeWithoutBacking failed!\"", buf, 0x12u);
      }
      float v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v102, "InitializeWithoutBacking failed!");
    }
    uint64_t v25 = *MEMORY[0x263EF8AF8];
    unint64_t v26 = ((unint64_t)(v24 << v16) + *MEMORY[0x263EF8AF8] - 1) / *MEMORY[0x263EF8AF8];
    uint64_t v27 = *((unsigned int *)v9 + 239);
    uint64_t v28 = (*((_DWORD *)v9 + 238) - v27) - v26;
    uint64_t v29 = v28 & (v28 >> 63);
    int v30 = v29 + v26;
    if (v29 + v26)
    {
      Phase::VirtualAllocator::CommitPages((Phase::VirtualAllocator *)(v21 + v25 * v27), (void *)(v29 + v26));
      LODWORD(v27) = *((_DWORD *)v9 + 239) + v30;
      *((_DWORD *)v9 + 239) = v27;
      uint64_t v21 = *((void *)v9 + 118);
      int v16 = *((_DWORD *)v9 + 6);
    }
    int v31 = v21 + v25 * v27;
    uint64_t v32 = *((void *)v9 + 2);
    int v33 = (v31 - (int)v32) >> v16;
    int v34 = *((_DWORD *)v9 + 7);
    unsigned int v35 = v33 - v34;
    if (v33 <= v34)
    {
LABEL_48:
      GapBySize = (Phase::Logger *)Phase::HeapAllocator::FindGapBySize((uint64_t)v9, &v111, &v110, v18, v17);
      int v20 = GapBySize;
      if (GapBySize) {
        goto LABEL_49;
      }
      goto LABEL_103;
    }
    if (*((unsigned char *)v9 + 32)) {
      Phase::Memset8((Phase *)(v32 + (v34 << v16)), (void *)0xCDCDCDCDCDCDCDCDLL, (int)(v35 << v16));
    }
    uint64_t v36 = *((void *)v9 + 6);
    if (v36)
    {
      int v37 = *(_DWORD *)(v36 + 4);
      if (v37 < 0)
      {
        Phase::HeapAllocator::ResizeGap((uint64_t)v9, v36, 0, 0, v35 - v37);
        goto LABEL_47;
      }
      unsigned int v38 = v36 - *((_DWORD *)v9 + 232);
    }
    else
    {
      unsigned int v38 = -1;
    }
    Phase::HeapAllocator::AddGap(v9, *((_DWORD *)v9 + 7), v35, v38, 0xFFFFFFFF);
LABEL_47:
    *((_DWORD *)v9 + 7) = v33;
    goto LABEL_48;
  }
  uint64_t v39 = v12;
  signed int v40 = (unint64_t *)((char *)v9 + 8 * v12 + 800);
  unint64_t v41 = *v40;
  if (!*v40)
  {
    this = (Phase::HeapAllocator *)Phase::HeapAllocator::AllocateInternal(v9, 0x400uLL, "Internal Small Allocation Bundle", 0, 0x400uLL);
    if (this)
    {
      unint64_t v51 = (unint64_t)this - *((void *)v9 + 97);
      unint64_t v52 = v51 >> 10;
      uint64_t v53 = *((void *)v9 + 98);
      unint64_t v54 = v51 >> 16;
      uint64_t v55 = *(void *)(v53 + 8 * v54);
      uint64_t v56 = 1 << v52;
      if ((v56 & v55) != 0)
      {
        double v107 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 64);
        if (os_log_type_enabled(v107, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          double v113 = "HeapAllocator.cpp";
          __int16 v114 = 1024;
          int v115 = 2254;
          _os_log_impl(&dword_221E5E000, v107, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [(mSmallBundleAllocBits[bundleIndex >> 6] & (0x1ULL << (bundleIndex & 0x3f))) != 0 is true]: \"FindGapLookup() failed!\\n\"", buf, 0x12u);
        }
        double v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v108, "FindGapLookup() failed!\n");
      }
      *(void *)(v53 + 8 * v54) = v56 | v55;
      unint64_t v41 = (unint64_t)this + 992;
      unint64_t v57 = (unint64_t)(v14 | 0x10u) << v15;
      *((_WORD *)this + 496) = v57;
      *((unsigned char *)this + 994) = 0x3E0u / (unsigned __int16)v57;
      *((unsigned char *)this + 995) = 0x3E0u / (unsigned __int16)v57;
      *((void *)this + 125) = 0;
      *((void *)this + 127) = 0;
      *((void *)this + 126) = 0;
      *signed int v40 = (unint64_t)this + 992;
      *((void *)v9 + v39 + 108) = (char *)this + 992;
      if (*((unsigned char *)v9 + 32))
      {
        Phase::Memset8(this, (void *)0xCDCDCDCDCDCDCDCDLL, ((unsigned __int16)v57 & 0xFFF8) * (unint64_t)(0x3E0u / (unsigned __int16)v57));
        unint64_t v41 = *v40;
      }
      goto LABEL_32;
    }
    return 0;
  }
LABEL_32:
  uint64_t v42 = *(void *)(v41 + 8);
  unsigned int v43 = __clz(~v42);
  if (v43 >= *(unsigned __int8 *)(v41 + 2))
  {
    double v103 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 64);
    if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      double v113 = "HeapAllocator.cpp";
      __int16 v114 = 1024;
      int v115 = 2283;
      _os_log_impl(&dword_221E5E000, v103, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [freeIndex >= pBundle->mBlockTotalCount is true]: \"FindGapLookup() failed!\\n\"", buf, 0x12u);
    }
    double v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v104, "FindGapLookup() failed!\n");
  }
  uint64_t v44 = *(unsigned __int16 *)v41;
  int v45 = (Phase *)((v41 & 0xFFFFFFFFFFFFFC00) + v43 * v44);
  if (v43 <= 0x3F) {
    unint64_t v46 = 0x8000000000000000 >> v43;
  }
  else {
    unint64_t v46 = 0;
  }
  *(void *)(v41 + 8) = v46 | v42;
  char v47 = *(unsigned char *)(v41 + 3) - 1;
  *(unsigned char *)(v41 + 3) = v47;
  if (!v47)
  {
    double v48 = (char *)v9 + 8 * v39;
    if (v41 == *((void *)v48 + 108))
    {
      char v49 = 0;
      uint64_t v50 = v48 + 864;
    }
    else
    {
      char v49 = *(unsigned __int16 **)(v41 + 16);
      uint64_t v50 = v49 + 12;
    }
    *signed int v40 = (unint64_t)v49;
    *uint64_t v50 = 0;
    *(void *)(v41 + 16) = 0;
    *(void *)(v41 + 24) = 0;
  }
  int v83 = *((_DWORD *)v9 + 8);
  if (v83)
  {
    BOOL v84 = Phase::MemCompare8(v45, (const void *)0xCDCDCDCDCDCDCDCDLL, v44);
    if (!v84)
    {
      double v105 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v84) + 64);
      if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        double v113 = "HeapAllocator.cpp";
        __int16 v114 = 1024;
        int v115 = 2314;
        _os_log_impl(&dword_221E5E000, v105, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!success is true]: \"MemCompare8 failed!\\n\"", buf, 0x12u);
      }
      double v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v106, "MemCompare8 failed!\n");
    }
    int v83 = *((_DWORD *)v9 + 8);
  }
  if ((v83 & 2) != 0)
  {
    size_t v80 = *(unsigned __int16 *)v41;
    double v79 = v45;
    float v81 = 0;
    goto LABEL_83;
  }
  return v45;
}

void sub_221F837CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

Phase *Phase::HeapAllocator::Allocate(Phase::HeapAllocator *this, unint64_t a2, const char *a3, int a4, unint64_t a5)
{
  unsigned int v10 = *((_DWORD *)this + 8);
  if ((v10 & 0x10) != 0) {
    Phase::SpinLock::Lock((atomic_uchar *)this);
  }
  uint64_t result = Phase::HeapAllocator::AllocateInternal(this, a2, a3, a4, a5);
  if ((v10 >> 4)) {
    atomic_store(0, (unsigned __int8 *)this);
  }
  return result;
}

void sub_221F83884(_Unwind_Exception *a1)
{
  if (v2) {
    atomic_store(0, v1);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::HeapAllocator::FreeInternal(Phase::HeapAllocator *this, Phase *a2)
{
  uint64_t v95 = *MEMORY[0x263EF8340];
  if (!a2) {
    return 0;
  }
  int v2 = this;
  char v3 = 0;
  int v4 = *((_DWORD *)this + 6);
  while (1)
  {
    uint64_t v5 = ((uint64_t)a2 - *((void *)v2 + 2)) >> v4;
    if (v5 < 0 || v5 >= *((int *)v2 + 7))
    {
      int v62 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 32);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        uint64_t v63 = (const char *)*((void *)v2 + 1);
        if (!v63) {
          uint64_t v63 = "<Unnamed>";
        }
        *(_DWORD *)buf = 136315650;
        BOOL v90 = "HeapAllocator.cpp";
        __int16 v91 = 1024;
        int v92 = 1303;
        __int16 v93 = 2080;
        double v94 = v63;
        _os_log_impl(&dword_221E5E000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Something tried to free an allocation from heap '%s' that was outside of its memory range.\\n\"", buf, 0x1Cu);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Something tried to free an allocation from heap '%s' that was outside of its memory range.\n");
    }
    uint64_t v6 = *((void *)v2 + 98);
    if (!v6) {
      break;
    }
    uint64_t v7 = *((void *)v2 + 97);
    uint64_t v8 = (uint64_t)a2 - v7;
    if (*((unsigned int *)v2 + 198) <= ((uint64_t)a2 - v7) >> 10) {
      break;
    }
    unint64_t v9 = (unint64_t)v8 >> 10;
    if (((*(void *)(v6 + 8 * (v8 >> 16)) >> ((unint64_t)v8 >> 10)) & 1) == 0) {
      break;
    }
    uint64_t v10 = v7 + (int)(v9 << 10);
    size_t v11 = *(unsigned __int16 *)(v10 + 992);
    if ((v11 - 193) <= 0xFFFFFF4E)
    {
      unsigned int v65 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 32);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
      {
        uint64_t v66 = (const char *)*((void *)v2 + 1);
        if (!v66) {
          uint64_t v66 = "<Unnamed>";
        }
        *(_DWORD *)buf = 136315650;
        BOOL v90 = "HeapAllocator.cpp";
        __int16 v91 = 1024;
        int v92 = 2340;
        __int16 v93 = 2080;
        double v94 = v66;
        _os_log_impl(&dword_221E5E000, v65, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Tried to free a bundled small allocation from heap %s, but the bundle is malformed.\\n\"", buf, 0x1Cu);
      }
      unsigned int v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v67, "Tried to free a bundled small allocation from heap %s, but the bundle is malformed.\n");
    }
    unint64_t v12 = ((unint64_t)a2 - v10) / v11;
    if (a2 != (Phase *)(v10 + v12 * v11))
    {
      int v68 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 32);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        unsigned int v69 = (const char *)*((void *)v2 + 1);
        if (!v69) {
          unsigned int v69 = "<Unnamed>";
        }
        *(_DWORD *)buf = 136315650;
        BOOL v90 = "HeapAllocator.cpp";
        __int16 v91 = 1024;
        int v92 = 2353;
        __int16 v93 = 2080;
        double v94 = v69;
        _os_log_impl(&dword_221E5E000, v68, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Tried to free a bundled small allocation from heap %s, but the address is misaligned.\\n\"", buf, 0x1Cu);
      }
      uint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v70, "Tried to free a bundled small allocation from heap %s, but the address is misaligned.\n");
    }
    uint64_t v13 = v10 + 992;
    unint64_t v14 = 0x8000000000000000 >> v12;
    uint64_t v15 = *(void *)(v10 + 1000);
    if ((v15 & v14) == 0)
    {
      uint64_t v71 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 64);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        BOOL v90 = "HeapAllocator.cpp";
        __int16 v91 = 1024;
        int v92 = 2361;
        _os_log_impl(&dword_221E5E000, v71, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!(pBundle->mBlockAllocBits & blockMask) is true]: \"MemCompare8 failed!\\n\"", buf, 0x12u);
      }
      int v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v72, "MemCompare8 failed!\n");
    }
    *(void *)(v10 + 1000) = v15 & ~v14;
    int v16 = *(unsigned __int8 *)(v10 + 995);
    *(unsigned char *)(v10 + 995) = v16 + 1;
    unsigned int v17 = __clz(v11 - 1);
    this = (Phase::HeapAllocator *)(((2 * v17) ^ 0x3E) & 0xFFFFFFFE | ((v11 - 1) >> (30 - v17)) & 1);
    if ((v11 - 1) >= 0x10) {
      uint64_t v18 = (this - 7);
    }
    else {
      uint64_t v18 = 0;
    }
    if (*(unsigned __int8 *)(v10 + 994) != (v16 + 1)
      || (long long v19 = (char *)v2 + 8 * v18, *((void *)v19 + 100) == v13))
    {
      if (!v16)
      {
        int v37 = (char *)v2 + 8 * v18;
        unsigned int v38 = v37 + 864;
        uint64_t v39 = *((void *)v37 + 108);
        if (v39)
        {
          *(void *)(v10 + 1016) = v39;
          signed int v40 = (void *)(*v38 + 16);
        }
        else
        {
          signed int v40 = v37 + 800;
        }
        *signed int v40 = v13;
        *unsigned int v38 = v13;
      }
      if (*((unsigned char *)v2 + 32))
      {
        Phase::Memset8(a2, (void *)0xCDCDCDCDCDCDCDCDLL, v11);
        return 0;
      }
      goto LABEL_61;
    }
    uint64_t v20 = *(void *)(v10 + 1016);
    *(void *)(v20 + 16) = *(void *)(v10 + 1008);
    if (*((void *)v19 + 108) == v13) {
      uint64_t v21 = v19 + 864;
    }
    else {
      uint64_t v21 = (void *)(*(void *)(v10 + 1008) + 24);
    }
    *uint64_t v21 = v20;
    char v3 = 1;
    *(void *)(*((void *)v2 + 98) + 8 * ((int)v9 >> 6)) &= ~(1 << v9);
    a2 = (Phase *)v10;
    if (!v10) {
      return 0;
    }
  }
  unsigned int v22 = -306674912;
  int v23 = 4;
  unsigned int v24 = -306674912;
  unsigned int v25 = v5;
  do
  {
    unsigned int v24 = Phase::sCRC32LookupTable[(v25 ^ v24)] ^ (v24 >> 8);
    v25 >>= 8;
    --v23;
  }
  while (v23);
  uint64_t v26 = *((unsigned int *)v2 + 2 * (v24 & 0x3F) + 33);
  if (v26 == -1) {
    goto LABEL_107;
  }
  uint64_t v27 = *((void *)v2 + 116);
  while (1)
  {
    uint64_t v28 = v26 + v27;
    int v29 = *(_DWORD *)(v26 + v27 + 112);
    uint64_t v26 = *(unsigned int *)(v26 + v27 + 116);
    if (v29) {
      break;
    }
LABEL_29:
    if (v26 == 0xFFFFFFFFLL) {
      goto LABEL_107;
    }
  }
  unsigned int v30 = 0;
  int v31 = (_DWORD *)(v28 + 4);
  while (*(v31 - 1) != v5)
  {
    ++v30;
    v31 += 2;
    if (v29 == v30) {
      goto LABEL_29;
    }
  }
  uint64_t v32 = (unsigned int *)(*v31 + v27);
  if (!v32)
  {
LABEL_107:
    int v73 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 32);
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      int v74 = (const char *)*((void *)v2 + 1);
      if (!v74) {
        int v74 = "<Unnamed>";
      }
      *(_DWORD *)buf = 136315650;
      BOOL v90 = "HeapAllocator.cpp";
      __int16 v91 = 1024;
      int v92 = 1328;
      __int16 v93 = 2080;
      double v94 = v74;
      _os_log_impl(&dword_221E5E000, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Something tried to free an allocation from heap '%s' that did not exist in the heap.\\n\"", buf, 0x1Cu);
    }
    uint64_t v75 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](v75, "Something tried to free an allocation from heap '%s' that did not exist in the heap.\n");
  }
  Phase::HeapAllocator::AllocateBookkeeping(v2);
  if ((*((unsigned char *)v2 + 32) & 4) != 0)
  {
    BOOL v33 = Phase::MemCompare8((Phase *)(*((void *)v2 + 2) + ((*v32 + v32[1] - 1) << *((_DWORD *)v2 + 6))), (const void *)0xEFEFEFEFEFEFEFEFLL, 1 << *((_DWORD *)v2 + 6));
    if (!v33)
    {
      int v78 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v33) + 64);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        BOOL v90 = "HeapAllocator.cpp";
        __int16 v91 = 1024;
        int v92 = 1340;
        _os_log_impl(&dword_221E5E000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!success is true]: \"MemCompare8 failed!\\n\"", buf, 0x12u);
      }
      double v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v79, "MemCompare8 failed!\n");
    }
  }
  uint64_t v35 = v32[2];
  uint64_t v34 = v32[3];
  if (v35 == -1) {
    uint64_t v36 = 0;
  }
  else {
    uint64_t v36 = *((void *)v2 + 116) + v35;
  }
  if (v34 == -1) {
    unint64_t v41 = 0;
  }
  else {
    unint64_t v41 = (_DWORD *)(*((void *)v2 + 116) + v34);
  }
  uint64_t v42 = v32[6];
  unsigned int v43 = *v32;
  unsigned int v86 = v32[1];
  if ((!v36 || *(int *)(v36 + 4) >= 1)
    && (!v41 || (int)v41[1] >= 1)
    && (!*((_DWORD *)v2 + 28) || *((_DWORD *)v2 + 32) < 2u))
  {
LABEL_61:
    uint64_t v42 = 0;
    goto LABEL_86;
  }
  uint64_t v44 = *((void *)v2 + 116);
  if (*v31 != v32 - v44)
  {
    int v76 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v33) + 64);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      BOOL v90 = "HeapAllocator.cpp";
      __int16 v91 = 1024;
      int v92 = 1763;
      _os_log_impl(&dword_221E5E000, v76, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [pInLookupSet->mLookups[inLookupIndex].mValue != ToOffset(pInBlock) is true]: \"FindGapLookup() failed!\\n\"", buf, 0x12u);
    }
    BOOL v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v77, "FindGapLookup() failed!\n");
  }
  if (v35 == -1)
  {
    uint64_t v47 = v44 + v34;
    if (v34 == -1) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = v44 + v34;
    }
    *((void *)v2 + 5) = v48;
    if (v34 != -1) {
      goto LABEL_57;
    }
    uint64_t v45 = 0;
  }
  else
  {
    uint64_t v45 = v44 + v35;
    *(_DWORD *)(v44 + v35 + 12) = v34;
    uint64_t v46 = v32[3];
    if (v46 != -1)
    {
      uint64_t v47 = v46 + v44;
LABEL_57:
      *(_DWORD *)(v47 + 8) = v35;
      goto LABEL_65;
    }
  }
  *((void *)v2 + 6) = v45;
LABEL_65:
  unsigned int v85 = v43;
  unsigned int v82 = v34;
  int v83 = v41;
  uint64_t v84 = v36;
  *(void *)uint64_t v32 = 0;
  v32[2] = -1;
  uint64_t v49 = *((void *)v2 + 9);
  int v50 = v49 - v44;
  if (!v49) {
    int v50 = -1;
  }
  v32[3] = v50;
  *((void *)v2 + 9) = v32;
  ++*((_DWORD *)v2 + 20);
  unsigned int v51 = *(v31 - 1);
  int v52 = 4;
  do
  {
    unsigned int v22 = Phase::sCRC32LookupTable[(v51 ^ v22)] ^ (v22 >> 8);
    v51 >>= 8;
    --v52;
  }
  while (v52);
  Phase::HeapAllocator::RemoveLookup(v2, (_DWORD *)v2 + 2 * (v22 & 0x3F) + 33, v28, v30);
  if (*((unsigned char *)v2 + 32)) {
    Phase::Memset8((Phase *)(*((void *)v2 + 2) + (v85 << *((_DWORD *)v2 + 6))), (void *)0xCDCDCDCDCDCDCDCDLL, v86 << *((_DWORD *)v2 + 6));
  }
  uint64_t v53 = v84;
  if (!v84 || (int v54 = *(_DWORD *)(v84 + 4), (v54 & 0x80000000) == 0))
  {
    uint64_t v53 = (uint64_t)v83;
    if (!v83 || (int v55 = v83[1], (v55 & 0x80000000) == 0))
    {
      Phase::HeapAllocator::AddGap(v2, v85, v86, v35, v82);
      goto LABEL_86;
    }
    *v83 -= v86;
    unsigned int v60 = v86 - v55;
    uint64_t v59 = (uint64_t)v2;
    goto LABEL_85;
  }
  unsigned int v56 = v86 - v54;
  if (v83)
  {
    int v57 = v83[1];
    if (v57 < 0)
    {
      uint64_t v88 = 0;
      unsigned int v87 = 0;
      uint64_t GapLookup = Phase::HeapAllocator::FindGapLookup((uint64_t)v2, &v88, &v87, (uint64_t)v83);
      if ((GapLookup & 1) == 0)
      {
        size_t v80 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)GapLookup) + 64);
        if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315394;
          BOOL v90 = "HeapAllocator.cpp";
          __int16 v91 = 1024;
          int v92 = 1389;
          _os_log_impl(&dword_221E5E000, v80, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!result is true]: \"FindGapLookup() failed!\\n\"", buf, 0x12u);
        }
        float v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v81, "FindGapLookup() failed!\n");
      }
      v56 -= v57;
      Phase::HeapAllocator::RemoveGap((uint64_t)v2, (uint64_t)v83, v88, v87);
      uint64_t v53 = v84;
      int v54 = *(_DWORD *)(v84 + 4);
    }
  }
  if (v54 < 0) {
    int v54 = -v54;
  }
  if (v54 != v56)
  {
    uint64_t v59 = (uint64_t)v2;
    unsigned int v60 = v56;
LABEL_85:
    Phase::HeapAllocator::ResizeGap(v59, v53, 0, 0, v60);
  }
LABEL_86:
  if (v3) {
    return 0;
  }
  return v42;
}

void sub_221F84384(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::HeapAllocator::AllocateBookkeeping(Phase::HeapAllocator *this)
{
  do
  {
    while (1)
    {
      if (*((_DWORD *)this + 20) >= 4u)
      {
        if (*((_DWORD *)this + 28) >= 4u)
        {
          if (*((_DWORD *)this + 32) >= 6u) {
            return;
          }
          BOOL v5 = 0;
          goto LABEL_19;
        }
        BOOL v5 = 0;
      }
      else
      {
        uint64_t v2 = *((unsigned int *)this + 234);
        if (v2 + 688 <= (unint64_t)*((unsigned int *)this + 235))
        {
          Internal = (char *)(*((void *)this + 116) + v2);
          *((_DWORD *)this + 234) = v2 + 688;
          int v4 = 1;
        }
        else
        {
          Internal = (char *)Phase::HeapAllocator::AllocateInternal(this, 0x560uLL, "Internal Bookkeeping", 0, 8uLL);
          int v4 = 2;
        }
        BOOL v5 = Internal != 0;
        if (Internal)
        {
          do
          {
            Phase::HeapAllocator::AddBlockSet(this, Internal);
            Internal += 688;
            --v4;
          }
          while (v4);
        }
        if (*((_DWORD *)this + 28) > 3u) {
          goto LABEL_18;
        }
      }
      uint64_t v6 = *((unsigned int *)this + 234);
      if (v6 + 512 <= (unint64_t)*((unsigned int *)this + 235))
      {
        uint64_t v7 = (_OWORD *)(*((void *)this + 116) + v6);
        *((_DWORD *)this + 234) = v6 + 512;
        int v8 = 1;
        if (!v7) {
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v7 = (_OWORD *)Phase::HeapAllocator::AllocateInternal(this, 0x400uLL, "Internal Bookkeeping", 0, 8uLL);
        int v8 = 2;
        if (!v7) {
          goto LABEL_18;
        }
      }
      do
      {
        Phase::HeapAllocator::AddGapSet(this, v7);
        v7 += 32;
        --v8;
      }
      while (v8);
      BOOL v5 = 1;
LABEL_18:
      if (*((_DWORD *)this + 32) > 5u) {
        goto LABEL_26;
      }
LABEL_19:
      uint64_t v9 = *((unsigned int *)this + 234);
      if (v9 + 128 <= (unint64_t)*((unsigned int *)this + 235)) {
        break;
      }
      int v10 = 8;
      size_t v11 = (unsigned int *)Phase::HeapAllocator::AllocateInternal(this, 0x400uLL, "Internal Bookkeeping", 0, 8uLL);
      if (!v11) {
        goto LABEL_26;
      }
      do
      {
LABEL_21:
        unint64_t v12 = Phase::HeapAllocator::AddLookupSet(this, v11);
        uint64_t v13 = *((void *)this + 15);
        if (v13) {
          v12[29] = v13 - *((_DWORD *)this + 232);
        }
        v11 += 32;
        *((void *)this + 15) = v12;
        ++*((_DWORD *)this + 32);
        --v10;
      }
      while (v10);
    }
    size_t v11 = (unsigned int *)(*((void *)this + 116) + v9);
    *((_DWORD *)this + 234) = v9 + 128;
    int v10 = 1;
    if (v11) {
      goto LABEL_21;
    }
LABEL_26:
    ;
  }
  while (v5);
}

uint64_t Phase::HeapAllocator::FindGapLookup(uint64_t a1, void *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result = 0;
  int v6 = *(_DWORD *)(a4 + 4);
  if (v6 >= 0) {
    unsigned int v7 = *(_DWORD *)(a4 + 4);
  }
  else {
    unsigned int v7 = -v6;
  }
  unsigned int v8 = 31 - __clz(v7);
  if (v6) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 8 * (int)(((15 - v9) & ((int)(15 - v9) >> 31)) + v9) + 644);
  if (v10 != -1)
  {
    uint64_t v11 = *(void *)(a1 + 928);
    while (1)
    {
      uint64_t v12 = v10 + v11;
      int v13 = *(_DWORD *)(v10 + v11 + 112);
      uint64_t v10 = *(unsigned int *)(v10 + v11 + 116);
      if (v13) {
        break;
      }
LABEL_13:
      if (v10 == 0xFFFFFFFFLL) {
        return 0;
      }
    }
    int v14 = 0;
    uint64_t v15 = 4;
    while (*(_DWORD *)(v12 + v15) != a4 - v11)
    {
      ++v14;
      v15 += 8;
      if (v13 == v14) {
        goto LABEL_13;
      }
    }
    *a2 = v12;
    *a3 = v14;
    return 1;
  }
  return result;
}

Phase::Logger *Phase::HeapAllocator::RemoveGap(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 928);
  if (*(_DWORD *)(a3 + 8 * a4 + 4) != a2 - v4)
  {
    uint64_t v18 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 64);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v20 = 136315394;
      uint64_t v21 = "HeapAllocator.cpp";
      __int16 v22 = 1024;
      int v23 = 1930;
      _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [pInLookupSet->mLookups[inLookupIndex].mValue != ToOffset(pInGap) is true]: \"FindGapLookup() failed!\\n\"", (uint8_t *)&v20, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "FindGapLookup() failed!\n");
  }
  uint64_t v5 = *(unsigned int *)(a2 + 8);
  if (v5 == -1)
  {
    uint64_t v9 = *(unsigned int *)(a2 + 12);
    uint64_t v8 = v9 + v4;
    BOOL v10 = v9 == -1;
    if (v9 == -1) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v9 + v4;
    }
    *(void *)(a1 + 40) = v11;
    if (!v10) {
      goto LABEL_9;
    }
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = v5 + v4;
    *(_DWORD *)(v5 + v4 + 12) = *(_DWORD *)(a2 + 12);
    uint64_t v7 = *(unsigned int *)(a2 + 12);
    if (v7 != -1)
    {
      uint64_t v8 = v7 + v4;
LABEL_9:
      *(_DWORD *)(v8 + 8) = v5;
      goto LABEL_12;
    }
  }
  *(void *)(a1 + 48) = v6;
LABEL_12:
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  uint64_t v12 = *(void *)(a1 + 104);
  int v13 = v12 - v4;
  if (!v12) {
    int v13 = -1;
  }
  *(_DWORD *)(a2 + 12) = v13;
  *(void *)(a1 + 104) = a2;
  ++*(_DWORD *)(a1 + 112);
  unsigned int v14 = *(_DWORD *)(a3 + 8 * a4);
  unsigned int v15 = 31 - __clz(v14);
  if (v14) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = 0;
  }

  return Phase::HeapAllocator::RemoveLookup((Phase::Logger *)a1, (_DWORD *)(a1 + 8 * (int)(((15 - v16) & ((int)(15 - v16) >> 31)) + v16) + 644), a3, a4);
}

void sub_221F84820(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::HeapAllocator::ResizeGap(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  uint64_t v7 = (Phase::Logger *)result;
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v22 = a3;
  unsigned int v21 = a4;
  if (!a3)
  {
    uint64_t result = Phase::HeapAllocator::FindGapLookup(result, &v22, &v21, a2);
    if (!result)
    {
      long long v19 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)result) + 32);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v24 = "HeapAllocator.cpp";
        __int16 v25 = 1024;
        int v26 = 1986;
        _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"FindGapLookup failed!\"", buf, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "FindGapLookup failed!");
    }
    a3 = v22;
    a4 = v21;
  }
  if (*(_DWORD *)(a3 + 8 * a4 + 4) != a2 - *((_DWORD *)v7 + 232))
  {
    unsigned int v15 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)result) + 64);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v24 = "HeapAllocator.cpp";
      __int16 v25 = 1024;
      int v26 = 1995;
      _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [pInLookupSet->mLookups[inLookupIndex].mValue != ToOffset(pInGap) is true]: \"FindGapLookup() failed!\\n\"", buf, 0x12u);
    }
    unsigned int v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v16, "FindGapLookup() failed!\n");
  }
  int v8 = *(_DWORD *)(a2 + 4);
  if (v8 >= 0) {
    unsigned int v9 = *(_DWORD *)(a2 + 4);
  }
  else {
    unsigned int v9 = -v8;
  }
  unsigned int v10 = 31 - __clz(v9);
  if (v8) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = 0;
  }
  unsigned int v12 = ((15 - v11) & ((int)(15 - v11) >> 31)) + v11;
  unsigned int v13 = 31 - __clz(a5);
  if (!a5) {
    unsigned int v13 = 0;
  }
  unsigned int v14 = ((15 - v13) & ((int)(15 - v13) >> 31)) + v13;
  if (v12 == v14)
  {
    *(_DWORD *)(a3 + 8 * a4) = a5;
  }
  else
  {
    Phase::HeapAllocator::RemoveLookup(v7, (_DWORD *)v7 + 2 * (int)v12 + 161, a3, a4);
    uint64_t result = Phase::HeapAllocator::AddLookup((uint64_t)v7, (_DWORD *)v7 + 2 * (int)v14 + 161, a5, (int)a2 - *((_DWORD *)v7 + 232));
    if ((result & 1) == 0)
    {
      unsigned int v17 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)result) + 32);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v24 = "HeapAllocator.cpp";
        __int16 v25 = 1024;
        int v26 = 2013;
        _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"AddLookup failed!\"", buf, 0x12u);
      }
      uint64_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v18, "AddLookup failed!");
    }
  }
  *(_DWORD *)(a2 + 4) = -a5;
  return result;
}

void sub_221F84B70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *Phase::HeapAllocator::FindGapBySize(uint64_t a1, unsigned int **a2, unsigned int *a3, unsigned int a4, int a5)
{
  unsigned int v5 = 31 - __clz(a4);
  if (!a4) {
    unsigned int v5 = 0;
  }
  unsigned int v6 = ((15 - v5) & ((int)(15 - v5) >> 31)) + v5;
  if (v6 > 0xF) {
    return 0;
  }
  uint64_t v7 = (unsigned int *)(a1 + 8 * v6 + 644);
  unsigned int v8 = -1;
  do
  {
    uint64_t v9 = *v7;
    if (v9 != -1)
    {
      long long v19 = 0;
      do
      {
        unsigned int v10 = (unsigned int *)(*(void *)(a1 + 928) + v9);
        unsigned int v11 = v10[28];
        uint64_t v9 = v10[29];
        if (v11)
        {
          unsigned int v12 = 0;
          unsigned int v13 = v10;
          do
          {
            unsigned int v14 = *v13;
            if (*v13 >= a4 && v14 < v8)
            {
              unsigned int v16 = (_DWORD *)(*(void *)(a1 + 928) + v13[1]);
              if (!a5
                || v14 >= a5 - 1 + a4
                || (int v17 = (*(void *)(a1 + 16) >> *(_DWORD *)(a1 + 24)) + *v16, v14 >= ((v17 + a5 - 1) & -a5)
                                                                                      - v17
                                                                                      + a4))
              {
                *a2 = v10;
                *a3 = v12;
                unsigned int v8 = *v13;
                if (*v13 == a4) {
                  return v16;
                }
                unsigned int v11 = v10[28];
                long long v19 = v16;
              }
            }
            ++v12;
            v13 += 2;
          }
          while (v12 < v11);
        }
      }
      while (v9 != 0xFFFFFFFFLL);
      if (v19) {
        return v19;
      }
    }
    ++v6;
    v7 += 2;
  }
  while (v6 != 16);
  return 0;
}

uint64_t Phase::HeapAllocator::AddLookup(uint64_t a1, _DWORD *a2, int a3, int a4)
{
  uint64_t v4 = a2[1];
  if (v4 == -1)
  {
    uint64_t v13 = *(void *)(a1 + 120);
    if (v13)
    {
      uint64_t v14 = *(unsigned int *)(v13 + 116);
      if (v14 == -1) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = *(void *)(a1 + 928) + v14;
      }
      *(void *)(a1 + 120) = v15;
      --*(_DWORD *)(a1 + 128);
      *(void *)&long long v18 = -1;
      *((void *)&v18 + 1) = -1;
      *(_OWORD *)(v13 + 80) = v18;
      *(_OWORD *)(v13 + 96) = v18;
      *(_OWORD *)(v13 + 48) = v18;
      *(_OWORD *)(v13 + 64) = v18;
      *(_OWORD *)(v13 + 16) = v18;
      *(_OWORD *)(v13 + 32) = v18;
      *(_OWORD *)uint64_t v13 = v18;
      *(_DWORD *)(v13 + 120) = -1;
      int v19 = v13 - *(_DWORD *)(a1 + 928);
      *a2 = v19;
      a2[1] = v19;
      *(void *)(v13 + 112) = 0xFFFFFFFF00000001;
      *(_DWORD *)uint64_t v13 = a3;
      *(_DWORD *)(v13 + 4) = a4;
      return 1;
    }
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 928);
  uint64_t v6 = v5 + v4;
  uint64_t v7 = *(unsigned int *)(v6 + 112);
  if (v7 >= 0xE)
  {
    uint64_t v8 = *(void *)(a1 + 120);
    if (v8)
    {
      uint64_t v9 = *(unsigned int *)(v8 + 116);
      uint64_t v10 = v9 + v5;
      if (v9 == -1) {
        uint64_t v10 = 0;
      }
      *(void *)(a1 + 120) = v10;
      --*(_DWORD *)(a1 + 128);
      *(void *)&long long v11 = -1;
      *((void *)&v11 + 1) = -1;
      *(_OWORD *)(v8 + 32) = v11;
      *(_OWORD *)(v8 + 48) = v11;
      *(_OWORD *)(v8 + 64) = v11;
      *(_OWORD *)(v8 + 80) = v11;
      *(_OWORD *)(v8 + 96) = v11;
      *(_OWORD *)uint64_t v8 = v11;
      *(_OWORD *)(v8 + 16) = v11;
      int v12 = *(_DWORD *)(a1 + 928);
      *(_DWORD *)(v8 + 120) = v6 - v12;
      a2[1] = v8 - v12;
      *(void *)(v8 + 112) = 0xFFFFFFFF00000001;
      *(_DWORD *)(v6 + 116) = v8 - v12;
      *(_DWORD *)uint64_t v8 = a3;
      *(_DWORD *)(v8 + 4) = a4;
      return 1;
    }
    return 0;
  }
  unsigned int v16 = (_DWORD *)(v6 + 8 * v7);
  _DWORD *v16 = a3;
  v16[1] = a4;
  *(_DWORD *)(v6 + 112) = v7 + 1;
  return 1;
}

Phase::Logger *Phase::HeapAllocator::RemoveLookup(Phase::Logger *result, _DWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a3 + 112);
  if (v4 == 1)
  {
    if (a4)
    {
      uint64_t v9 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 64);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        uint64_t v14 = "HeapAllocator.cpp";
        __int16 v15 = 1024;
        int v16 = 1605;
        _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [inLookupIndex != 0 is true]: \"FindGapLookup() failed!\\n\"", (uint8_t *)&v13, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "FindGapLookup() failed!\n");
    }
    if (a2[1] != a3 - *((_DWORD *)result + 232))
    {
      long long v11 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 64);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        uint64_t v14 = "HeapAllocator.cpp";
        __int16 v15 = 1024;
        int v16 = 1609;
        _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [pLookupList->mTailOffset != ToOffset(pLookupSet) is true]: \"FindGapLookup() failed!\\n\"", (uint8_t *)&v13, 0x12u);
      }
      int v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v12, "FindGapLookup() failed!\n");
    }
  }
  else
  {
    if (v4 == a4 + 1 && *(_DWORD *)(a3 + 116) == -1)
    {
      *(void *)(a3 + 8 * a4) = 0;
      *(_DWORD *)(a3 + 112) = v4 - 1;
      return result;
    }
    uint64_t v6 = *((void *)result + 116) + a2[1];
    unsigned int v7 = *(_DWORD *)(v6 + 112) - 1;
    uint64_t v8 = (void *)(v6 + 8 * v7);
    *(void *)(a3 + 8 * a4) = *v8;
    *uint64_t v8 = 0;
    *(_DWORD *)(v6 + 112) = v7;
    if (v7) {
      return result;
    }
  }

  return (Phase::Logger *)Phase::HeapAllocator::RemoveLastLookup((uint64_t)result, a2);
}

void sub_221F85034(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::HeapAllocator::RemoveLastLookup(uint64_t result, _DWORD *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = a2[1];
  uint64_t v3 = *(void *)(result + 928);
  uint64_t v4 = v3 + v2;
  uint64_t v5 = *(unsigned int *)(v3 + v2 + 120);
  if (v5 == -1)
  {
    if (*a2 != v2)
    {
      long long v11 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)result) + 64);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        uint64_t v14 = "HeapAllocator.cpp";
        __int16 v15 = 1024;
        int v16 = 1662;
        _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [pInLookupList->mHeadOffset != pInLookupList->mTailOffset is true]: \"FindGapLookup() failed!\\n\"", (uint8_t *)&v13, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "FindGapLookup() failed!\n");
    }
    int v6 = *(_DWORD *)(v4 + 116);
    *a2 = v6;
  }
  else
  {
    *(_DWORD *)(v5 + v3 + 116) = *(_DWORD *)(v4 + 116);
    int v6 = *(_DWORD *)(v4 + 116);
  }
  if (v6 != -1)
  {
    uint64_t v9 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)result) + 64);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "HeapAllocator.cpp";
      __int16 v15 = 1024;
      int v16 = 1668;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [pLookupSet->mNextOffset != kInvalidOffset is true]: \"FindGapLookup() failed!\\n\"", (uint8_t *)&v13, 0x12u);
    }
    uint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "FindGapLookup() failed!\n");
  }
  a2[1] = v5;
  *(void *)uint64_t v4 = 0;
  *(_DWORD *)(v4 + 112) = 0;
  *(_DWORD *)(v4 + 120) = -1;
  uint64_t v7 = *(void *)(result + 120);
  int v8 = v7 - v3;
  if (!v7) {
    int v8 = -1;
  }
  *(_DWORD *)(v4 + 116) = v8;
  *(void *)(result + 120) = v4;
  ++*(_DWORD *)(result + 128);
  return result;
}

void sub_221F8526C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

atomic_uchar *Phase::SpinLock::Lock(atomic_uchar *this)
{
  if (atomic_exchange_explicit(this, 1u, memory_order_acquire))
  {
    uint64_t v1 = this;
    do
    {
      while ((*v1 & 1) != 0)
        this = (atomic_uchar *)sched_yield();
    }
    while ((atomic_exchange_explicit(v1, 1u, memory_order_acquire) & 1) != 0);
  }
  return this;
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void std::vector<Phase::Controller::HrirAsset::Implementation::Node>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      int v6 = v4 - 3;
      do
      {
        uint64_t v9 = v6;
        std::vector<Phase::Controller::HrirAsset::Implementation::Node>::__destroy_vector::operator()[abi:ne180100](&v9);
        uint64_t v7 = *(v6 - 3);
        if (v7)
        {
          *(v6 - 2) = v7;
          operator delete(v7);
        }
        uint64_t v9 = v6 - 6;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
        int v8 = v6 - 7;
        v6 -= 10;
      }
      while (v8 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::default_delete<Phase::Controller::HrirAsset::Implementation>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (void **)(a2 + 64);
    std::vector<Phase::Controller::HrirAsset::Implementation::Node>::__destroy_vector::operator()[abi:ne180100](&v4);
    uint64_t v4 = (void **)(a2 + 40);
    std::vector<Phase::Controller::HrirAsset::Implementation::Dimension>::__destroy_vector::operator()[abi:ne180100](&v4);
    if (*(char *)(a2 + 39) < 0) {
      operator delete(*(void **)(a2 + 16));
    }
    return MEMORY[0x223C938A0](a2, 0x1032C40B7D69034);
  }
  return result;
}

void std::vector<Phase::Controller::HrirAsset::Implementation::Dimension>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::Controller::HrirAsset::Implementation::Dimension>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Phase::Controller::HrirAsset::Implementation::Dimension>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0) {
      operator delete(*(void **)(i - 40));
    }
  }
  a1[1] = v2;
}

vDSP_DFT_Setup Phase::DspLayer::IConvolver::GetFftFwd(Phase::DspLayer::IConvolver *this, int a2)
{
  if (a2 <= 2047)
  {
    switch(a2)
    {
      case 256:
        vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTFwd_256;
        if (!Phase::DspLayer::IConvolver::mFFTFwd_256)
        {
          vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x100uLL, vDSP_DFT_FORWARD);
          Phase::DspLayer::IConvolver::mFFTFwd_256 = (uint64_t)result;
        }
        break;
      case 512:
        vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTFwd_512;
        if (!Phase::DspLayer::IConvolver::mFFTFwd_512)
        {
          vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x200uLL, vDSP_DFT_FORWARD);
          Phase::DspLayer::IConvolver::mFFTFwd_512 = (uint64_t)result;
        }
        break;
      case 1024:
        vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTFwd_1024;
        if (!Phase::DspLayer::IConvolver::mFFTFwd_1024)
        {
          vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x400uLL, vDSP_DFT_FORWARD);
          Phase::DspLayer::IConvolver::mFFTFwd_1024 = (uint64_t)result;
        }
        break;
      default:
        goto LABEL_25;
    }
  }
  else if (a2 >= 0x2000)
  {
    if (a2 == 0x2000)
    {
      vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTFwd_8192;
      if (!Phase::DspLayer::IConvolver::mFFTFwd_8192)
      {
        vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x2000uLL, vDSP_DFT_FORWARD);
        Phase::DspLayer::IConvolver::mFFTFwd_8192 = (uint64_t)result;
      }
    }
    else
    {
      if (a2 != 0x4000) {
        goto LABEL_25;
      }
      vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTFwd_16384;
      if (!Phase::DspLayer::IConvolver::mFFTFwd_16384)
      {
        vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x4000uLL, vDSP_DFT_FORWARD);
        Phase::DspLayer::IConvolver::mFFTFwd_16384 = (uint64_t)result;
      }
    }
  }
  else
  {
    if (a2 != 2048)
    {
      if (a2 == 4096)
      {
        vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTFwd_4096;
        if (!Phase::DspLayer::IConvolver::mFFTFwd_4096)
        {
          vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x1000uLL, vDSP_DFT_FORWARD);
          Phase::DspLayer::IConvolver::mFFTFwd_4096 = (uint64_t)result;
        }
        return result;
      }
LABEL_25:
      __assert_rtn("GetFftFwd", "IConvolver.cpp", 53, "false && \"No global forward vDSP_DFT_Setup is available for requested size.\"");
    }
    vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTFwd_2048;
    if (!Phase::DspLayer::IConvolver::mFFTFwd_2048)
    {
      vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x800uLL, vDSP_DFT_FORWARD);
      Phase::DspLayer::IConvolver::mFFTFwd_2048 = (uint64_t)result;
    }
  }
  return result;
}

vDSP_DFT_Setup Phase::DspLayer::IConvolver::GetFftInv(Phase::DspLayer::IConvolver *this, int a2)
{
  if (a2 <= 2047)
  {
    switch(a2)
    {
      case 256:
        vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTInv_256;
        if (!Phase::DspLayer::IConvolver::mFFTInv_256)
        {
          vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x100uLL, vDSP_DFT_INVERSE);
          Phase::DspLayer::IConvolver::mFFTInv_256 = (uint64_t)result;
        }
        break;
      case 512:
        vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTInv_512;
        if (!Phase::DspLayer::IConvolver::mFFTInv_512)
        {
          vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x200uLL, vDSP_DFT_INVERSE);
          Phase::DspLayer::IConvolver::mFFTInv_512 = (uint64_t)result;
        }
        break;
      case 1024:
        vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTInv_1024;
        if (!Phase::DspLayer::IConvolver::mFFTInv_1024)
        {
          vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x400uLL, vDSP_DFT_INVERSE);
          Phase::DspLayer::IConvolver::mFFTInv_1024 = (uint64_t)result;
        }
        break;
      default:
        goto LABEL_25;
    }
  }
  else if (a2 >= 0x2000)
  {
    if (a2 == 0x2000)
    {
      vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTInv_8192;
      if (!Phase::DspLayer::IConvolver::mFFTInv_8192)
      {
        vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x2000uLL, vDSP_DFT_INVERSE);
        Phase::DspLayer::IConvolver::mFFTInv_8192 = (uint64_t)result;
      }
    }
    else
    {
      if (a2 != 0x4000) {
        goto LABEL_25;
      }
      vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTInv_16384;
      if (!Phase::DspLayer::IConvolver::mFFTInv_16384)
      {
        vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x4000uLL, vDSP_DFT_INVERSE);
        Phase::DspLayer::IConvolver::mFFTInv_16384 = (uint64_t)result;
      }
    }
  }
  else
  {
    if (a2 != 2048)
    {
      if (a2 == 4096)
      {
        vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTInv_4096;
        if (!Phase::DspLayer::IConvolver::mFFTInv_4096)
        {
          vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x1000uLL, vDSP_DFT_INVERSE);
          Phase::DspLayer::IConvolver::mFFTInv_4096 = (uint64_t)result;
        }
        return result;
      }
LABEL_25:
      __assert_rtn("GetFftInv", "IConvolver.cpp", 84, "false && \"No global inverse vDSP_DFT_Setup is available for requested size.\"");
    }
    vDSP_DFT_Setup result = (vDSP_DFT_Setup)Phase::DspLayer::IConvolver::mFFTInv_2048;
    if (!Phase::DspLayer::IConvolver::mFFTInv_2048)
    {
      vDSP_DFT_Setup result = vDSP_DFT_zrop_CreateSetup(0, 0x800uLL, vDSP_DFT_INVERSE);
      Phase::DspLayer::IConvolver::mFFTInv_2048 = (uint64_t)result;
    }
  }
  return result;
}

uint64_t Phase::DspLayer::IConvolver::GetReblockerIn(Phase::DspLayer::IConvolver *this)
{
  return 0;
}

void Phase::SpatialModeler::ImportanceSampling::init(void **this, void *a2, float a3)
{
  if (*this)
  {
    bzero(this[2], 4 * (void)*this);
    bzero(this[3], 4 * (void)*this + 4);
  }
  *((float *)this + 2) = a3;
}

void **Phase::SpatialModeler::ImportanceSampling::operator=(void **this, uint64_t a2)
{
  if (this != (void **)a2)
  {
    Phase::SpatialModeler::ImportanceSampling::alloc(this, *(void **)a2);
    if (*this)
    {
      memcpy(this[2], *(const void **)(a2 + 16), 4 * (void)*this);
      memcpy(this[3], *(const void **)(a2 + 24), 4 * (void)*this + 4);
    }
    *((_DWORD *)this + 2) = *(_DWORD *)(a2 + 8);
  }
  return this;
}

void Phase::SpatialModeler::ImportanceSampling::alloc(void **this, void *a2)
{
  if (*this != a2)
  {
    *this = a2;
    free(this[2]);
    this[2] = 0;
    free(this[3]);
    this[3] = 0;
    if (a2)
    {
      size_t v4 = 4 * (void)a2;
      this[2] = malloc_type_malloc(v4, 0x100004052888210uLL);
      this[3] = malloc_type_malloc(v4 + 4, 0x100004052888210uLL);
    }
  }
}

void Phase::SpatialModeler::ImportanceSampling::~ImportanceSampling(void **this)
{
}

uint64_t Phase::SpatialModeler::ImportanceSampling::computeProbabilityDistribution(uint64_t result, uint64_t a2, uint64_t a3, void *a4, float *a5)
{
  *a5 = 0.0;
  unint64_t v5 = *(void *)result;
  if (*(void *)result)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(result + 16);
    int v8 = (float32x2_t *)(*a4 + 28);
    do
    {
      float v9 = *(float *)a2 - v8[-1].f32[1];
      float32x2_t v10 = vsub_f32(*(float32x2_t *)(a2 + 4), *v8);
      float32x2_t v11 = vmul_f32(v10, v10);
      float v12 = sqrtf((float)((float)(v9 * v9) + v11.f32[0]) + v11.f32[1]);
      float v13 = *(float *)(result + 8);
      float v14 = 1.0;
      if ((float)(v12 * v12) > v13)
      {
        float v15 = fminf(fmaxf((float)(v13 / (float)(v12 * v12)) * 0.5, 0.0), 1.0);
        float32x2_t v16 = vmul_f32(v10, *(float32x2_t *)(a3 + 4));
        float v17 = fabsf((float)((float)(v9 * *(float *)a3) + v16.f32[0]) + v16.f32[1]);
        float v14 = (float)((float)(v15 * v17) / v12) + (float)((float)(v15 * v17) / v12);
      }
      *(float *)(v7 + 4 * v6) = v14;
      float v18 = v14 + *a5;
      *a5 = v18;
      ++v6;
      v8 += 7;
    }
    while (v5 > v6);
    uint64_t v19 = 0;
    float v20 = v18 / (float)v5;
    if (v18 <= 0.0) {
      float v20 = 1.0;
    }
    unsigned int v21 = *(_DWORD **)(result + 24);
    *unsigned int v21 = 0;
    float v22 = 0.0;
    do
    {
      float v22 = v22 + (float)((float)(*(float *)(v7 + 4 * v19++) / v20) / (float)v5);
      *(float *)&v21[v19] = v22;
    }
    while (v5 > v19);
  }
  else
  {
    **(_DWORD **)(result + 24) = 0;
  }
  return result;
}

uint64_t Phase::SpatialModeler::ImportanceSampling::pickRandomSource(Phase::SpatialModeler::ImportanceSampling *this, float a2)
{
  if (a2 == 1.0) {
    a2 = 0.0;
  }
  uint64_t v2 = (float *)*((void *)this + 3);
  if (a2 < *v2) {
    return 0;
  }
  unint64_t v3 = *(void *)this;
  float v4 = v2[*(void *)this];
  if (a2 >= v4) {
    return 0;
  }
  uint64_t result = (float)((float)((float)(a2 - *v2) / (float)(v4 - *v2)) * (float)v3);
  if (a2 >= v2[result] && a2 < v2[(result + 1)]) {
    return result;
  }
  if (v3 < 2) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    unsigned int v6 = (result + v3) >> 1;
    float v7 = v2[v6];
    if (a2 >= v7) {
      uint64_t result = v6;
    }
    else {
      uint64_t result = result;
    }
    if (a2 < v7) {
      LODWORD(v3) = v6;
    }
  }
  while ((v3 - result) > 1);
  return result;
}

uint64_t Phase::Controller::InMemoryAudioFile::Init(uint64_t a1, void *a2, AudioFileTypeID a3, uint64_t a4, void *a5)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  id v9 = a2;
  float32x2_t v10 = v9;
  if (!v9)
  {
    float v13 = [NSString stringWithFormat:@"inAudioFileData is null!"];
    int v23 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v13)
                                                                                        + 816)));
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      BOOL v33 = "InMemoryAudioFile.mm";
      __int16 v34 = 1024;
      int v35 = 31;
      __int16 v36 = 2048;
      uint64_t v37 = a4;
      __int16 v38 = 2080;
      uint64_t v39 = [(Phase::Logger *)v13 UTF8String];
      _os_log_impl(&dword_221E5E000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (!a5) {
      goto LABEL_19;
    }
    uint64_t v30 = *MEMORY[0x263F08320];
    int v31 = v13;
    float v17 = [NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
    id v22 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920803 userInfo:v17];
LABEL_17:
    *a5 = v22;
LABEL_18:

LABEL_19:
    uint64_t v24 = 0;
    goto LABEL_20;
  }
  id v11 = v9;
  if (![v11 bytes] || !objc_msgSend(v11, "length"))
  {
    float v13 = [NSString stringWithFormat:@"inAudioFileData.bytes is null! This is either because the NSData bytes property was explicitly set to nil, or because the NSData length property was explicitly set to 0."];
    unsigned int v21 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v13)
                                                                                        + 816)));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      BOOL v33 = "InMemoryAudioFile.mm";
      __int16 v34 = 1024;
      int v35 = 40;
      __int16 v36 = 2048;
      uint64_t v37 = a4;
      __int16 v38 = 2080;
      uint64_t v39 = [(Phase::Logger *)v13 UTF8String];
      _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (!a5) {
      goto LABEL_19;
    }
    uint64_t v28 = *MEMORY[0x263F08320];
    int v29 = v13;
    float v17 = [NSDictionary dictionaryWithObjects:&v29 forKeys:&v28 count:1];
    id v22 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920803 userInfo:v17];
    goto LABEL_17;
  }
  objc_storeStrong((id *)a1, v11);
  OSStatus v12 = AudioFileOpenWithCallbacks((void *)a1, (AudioFile_ReadProc)Phase::Controller::InMemoryAudioFile::sReadProc, 0, (AudioFile_GetSizeProc)Phase::Controller::InMemoryAudioFile::sGetSizeProc, 0, a3, (AudioFileID *)(a1 + 8));
  if (v12)
  {
    float v13 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F08410] code:v12 userInfo:0];
    float v14 = NSString;
    float v15 = [v11 description];
    float32x2_t v16 = [(Phase::Logger *)v13 description];
    float v17 = [v14 stringWithFormat:@"AudioFileOpenWithCallbacks() failed to read audio file data from '%@' with error '%@'.", v15, v16];

    uint64_t v19 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v18)
                                                                                        + 816)));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      BOOL v33 = "InMemoryAudioFile.mm";
      __int16 v34 = 1024;
      int v35 = 56;
      __int16 v36 = 2048;
      uint64_t v37 = a4;
      __int16 v38 = 2080;
      uint64_t v39 = [v17 UTF8String];
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", buf, 0x26u);
    }

    if (a5)
    {
      uint64_t v26 = *MEMORY[0x263F08320];
      uint64_t v27 = v17;
      float v20 = [NSDictionary dictionaryWithObjects:&v27 forKeys:&v26 count:1];
      *a5 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920801 userInfo:v20];
    }
    goto LABEL_18;
  }
  if (!*(void *)(a1 + 8)) {
    std::terminate();
  }
  uint64_t v24 = 1;
LABEL_20:

  return v24;
}

void sub_221F85F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::InMemoryAudioFile::sReadProc(id *this, Phase::Logger *a2, uint64_t a3, void *a4, int *a5, unsigned int *a6)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!this) {
    std::terminate();
  }
  unsigned int v8 = a3;
  id v11 = (Phase::Logger *)objc_msgSend(*this, "length", a3, a4, a5, a6);
  if ((uint64_t)v11 < (uint64_t)a2) {
    a2 = v11;
  }
  if ((uint64_t)v11 >= (uint64_t)((char *)a2 + v8)) {
    OSStatus v12 = (char *)a2 + v8;
  }
  else {
    OSStatus v12 = (char *)v11;
  }
  int v13 = v12 - a2;
  if ((uint64_t)v12 > (uint64_t)a2)
  {
    memcpy(a4, (char *)a2 + [*this bytes], v12 - (char *)a2);
    uint64_t result = 0;
    if (!a5) {
      return result;
    }
    goto LABEL_14;
  }
  float v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v11)
                                                                                      + 384)));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    id v16 = [*this description];
    int v17 = 136316162;
    float v18 = "InMemoryAudioFile.mm";
    __int16 v19 = 1024;
    int v20 = 105;
    __int16 v21 = 2080;
    uint64_t v22 = [v16 UTF8String];
    __int16 v23 = 2048;
    uint64_t v24 = v12;
    __int16 v25 = 2048;
    uint64_t v26 = a2;
    _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid read request for audio file data '%s'! The end position %lld is <= the start position %lld,", (uint8_t *)&v17, 0x30u);
  }
  uint64_t result = 4294967256;
  if (a5)
  {
    int v13 = 0;
LABEL_14:
    *a5 = v13;
  }
  return result;
}

void sub_221F861E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::InMemoryAudioFile::sGetSizeProc(void **this, void *a2)
{
  if (!this) {
    std::terminate();
  }
  uint64_t v2 = *this;

  return [v2 length];
}

void Phase::Controller::InMemoryAudioFile::~InMemoryAudioFile(Phase::Controller::InMemoryAudioFile *this)
{
  Phase::Controller::InMemoryAudioFile::CloseAudioFile(this, 0);
  uint64_t v2 = *(void **)this;
  *(void *)this = 0;
}

void Phase::Controller::InMemoryAudioFile::CloseAudioFile(Phase::Controller::InMemoryAudioFile *this, int a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  unint64_t v3 = (OpaqueAudioFileID *)*((void *)this + 1);
  if (v3)
  {
    OSStatus v5 = AudioFileClose(v3);
    if (v5)
    {
      unsigned int v6 = [MEMORY[0x263F087E8] errorWithDomain:*MEMORY[0x263F08410] code:v5 userInfo:0];
      float v7 = v6;
      if (a2)
      {
        OSStatus v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v6)
                                                                                            + 384)));
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          id v13 = [*(id *)this description];
          uint64_t v14 = [v13 UTF8String];
          id v15 = [(Phase::Logger *)v7 description];
          int v17 = 136315906;
          float v18 = "InMemoryAudioFile.mm";
          __int16 v19 = 1024;
          int v20 = 139;
          __int16 v21 = 2080;
          uint64_t v22 = v14;
          __int16 v23 = 2080;
          uint64_t v24 = [v15 UTF8String];
          _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Failed to close audio file referencing audio file data '%s' with error '%s'.\"", (uint8_t *)&v17, 0x26u);
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Failed to close audio file referencing audio file data '%s' with error '%s'.");
      }
      unsigned int v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v6)
                                                                                         + 384)));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id v9 = [*(id *)this description];
        uint64_t v10 = [v9 UTF8String];
        id v11 = [(Phase::Logger *)v7 description];
        int v17 = 136315906;
        float v18 = "InMemoryAudioFile.mm";
        __int16 v19 = 1024;
        int v20 = 146;
        __int16 v21 = 2080;
        uint64_t v22 = v10;
        __int16 v23 = 2080;
        uint64_t v24 = [v11 UTF8String];
        _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d Failed to close audio file referencing audio file data '%s' with error '%s'.", (uint8_t *)&v17, 0x26u);
      }
    }
    *((void *)this + 1) = 0;
  }
}

void sub_221F864F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::InMemoryAudioFile::Description(id *this@<X0>, void *a2@<X8>)
{
  id v3 = [*this description];
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v3 UTF8String]);
}

void sub_221F865CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::IR::IRBuilder::IRBuilder(uint64_t a1, _OWORD *a2, const Phase::Controller::Spatializer *a3)
{
  *(_OWORD *)a1 = *a2;
  OSStatus v5 = (Phase::Logger *)std::unordered_map<unsigned int,unsigned int>::unordered_map(a1 + 16, (uint64_t)(a2 + 1));
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 1065353216;
  *(void *)(a1 + 96) = 0;
  uint64_t Instance = Phase::Logger::GetInstance(v5);
  float v7 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 272));
  unsigned int v8 = (Phase::Logger *)Phase::Logger::GetInstance(v7);
  if (*((unsigned char *)v8 + 280))
  {
    id v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v8)
                                                                                       + 272)));
    uint64_t v10 = v9;
    if ((unint64_t)v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v10, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v7, "Phase_IrBuilder_Construction", "IR builders construction", buf, 2u);
    }
  }
  if ((*(_DWORD *)(a1 + 12) | 2) == 2)
  {
    *(_OWORD *)__n = 0u;
    long long v18 = 0u;
    int v19 = 1065353216;
    operator new();
  }
  Phase::Controller::IR::IRBuilder::SetSpatializer((Phase::Controller::IR::IRBuilder *)a1, a3);
  OSStatus v12 = (Phase::Logger *)Phase::Logger::GetInstance(v11);
  if (*((unsigned char *)v12 + 280))
  {
    id v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v12)
                                                                                        + 272)));
    uint64_t v14 = v13;
    if ((unint64_t)v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v14, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v7, "Phase_IrBuilder_Construction", (const char *)&unk_222112ABB, buf, 2u);
    }
  }
  return a1;
}

void sub_221F8759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  operator delete(v30);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)&a29);
  std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::~__hash_table(v29);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a11);
  _Unwind_Resume(a1);
}

void Phase::Controller::IR::IRBuilder::SetSpatializer(Phase::Controller::IR::IRBuilder *this, const Phase::Controller::Spatializer *a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*((const Phase::Controller::Spatializer **)this + 12) != a2)
  {
    Phase::Controller::Spatializer::AcquireFilters(a2, (uint64_t)v9);
    OSStatus v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 272)));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr))(*(void *)v11 + 40))(__p);
      unsigned int v6 = v8 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315650;
      id v15 = "IRBuilder.mm";
      __int16 v16 = 1024;
      int v17 = 77;
      __int16 v18 = 2080;
      int v19 = v6;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Reinitializing IR builder with new spatializer encoder. Encoder Details: %s", buf, 0x1Cu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }

    *((void *)this + 12) = a2;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void sub_221F87844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  Phase::Controller::SpatializerFilterHandle::~SpatializerFilterHandle((Phase::Controller::SpatializerFilterHandle *)va);
  _Unwind_Resume(a1);
}

void Phase::Controller::IR::IRBuilder::~IRBuilder(Phase::Controller::IR::IRBuilder *this)
{
  for (uint64_t i = (void *)*((void *)this + 9); i; uint64_t i = (void *)*i)
  {
    for (uint64_t j = (void *)i[5]; j; uint64_t j = (void *)*j)
    {
      uint64_t v4 = j[3];
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::~__hash_table((uint64_t)this + 56);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 16);
}

uint64_t Phase::Controller::IR::IRBuilder::GetWorkBufferSizeInBytes(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unsigned int v6 = std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::find<Phase::Controller::IR::IRBuilder::Processor>((void *)(a1 + 56), a3);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  float v7 = std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::find<Phase::Controller::IR::IRBuilder::Processor>(v6 + 3, a4);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7[3] + 16))(v7[3], a2);
}

void sub_221F879B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2 == 1)
  {
    id v9 = (Phase::Logger *)__cxa_begin_catch(exception_object);
    uint64_t v10 = **(id **)(Phase::Logger::GetInstance(v9) + 272);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "IRBuilder.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 99;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Requested an IR Build on a builder hasn't been created. Make sure the builder is requested as an initialization parameter.\"", (uint8_t *)&a9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Requested an IR Build on a builder hasn't been created. Make sure the builder is requested as an initialization parameter.");
  }
  _Unwind_Resume(exception_object);
}

void sub_221F87A78(_Unwind_Exception *a1)
{
}

void sub_221F87A98(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x221F87AA0);
  }
  __clang_call_terminate(a1);
}

uint64_t Phase::Controller::IR::IRBuilder::GetOutputBufferSizeInSamples(Phase::Controller::IR::IRBuilder *this, const Phase::Controller::IR::Metadata *a2)
{
  uint64_t v2 = (char *)a2 + 16;
  uint64_t v3 = *((void *)a2 + 4);
  unsigned int MaxDelayInSamples = Phase::Controller::IR::GetMaxDelayInSamples(a2, a2);
  LODWORD(v2) = (*(uint64_t (**)(uint64_t, char *))(*(void *)v3 + 64))(v3, v2) + MaxDelayInSamples;
  return (int)((*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3) * v2);
}

void Phase::Controller::IR::IRBuilder::Build(Phase::Logger *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t Instance = Phase::Logger::GetInstance(a1);
  id v13 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 272));
  uint64_t v14 = (Phase::Logger *)Phase::Logger::GetInstance(v13);
  if (*((unsigned char *)v14 + 280))
  {
    id v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v14)
                                                                                        + 272)));
    __int16 v16 = v15;
    if ((unint64_t)v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
    {
      int v17 = *(void **)(a2 + 8);
      if (v17)
      {
        if (*(_DWORD *)v17 == 3)
        {
          int v17 = (void *)v17[13];
          if (v17) {
            int v17 = (void *)*v17;
          }
        }
        else
        {
          int v17 = 0;
        }
      }
      int v24 = 134217984;
      uint64_t v25 = v17;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v16, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v13, "Phase_IrBuilder_Build", "IR Build: %zu reflections", (uint8_t *)&v24, 0xCu);
    }
  }
  __int16 v18 = std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::find<Phase::Controller::IR::IRBuilder::Processor>((void *)a1 + 7, a3);
  if (!v18) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v19 = std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::find<Phase::Controller::IR::IRBuilder::Processor>(v18 + 3, a4);
  if (!v19) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v20 = (Phase::Logger *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v19[3] + 24))(v19[3], a2, a5, a6);
  __int16 v21 = (Phase::Logger *)Phase::Logger::GetInstance(v20);
  if (*((unsigned char *)v21 + 280))
  {
    uint64_t v22 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v21)
                                                                                        + 272)));
    __int16 v23 = v22;
    if ((unint64_t)v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
    {
      LOWORD(v24) = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v23, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v13, "Phase_IrBuilder_Build", (const char *)&unk_222112ABB, (uint8_t *)&v24, 2u);
    }
  }
}

void sub_221F87D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2 == 1)
  {
    id v9 = (Phase::Logger *)__cxa_begin_catch(exception_object);
    uint64_t v10 = **(id **)(Phase::Logger::GetInstance(v9) + 272);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315394;
      *(void *)((char *)&a9 + 4) = "IRBuilder.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 129;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Requested an IR Build on a builder hasn't been created. Make sure the builder is requested as an initialization parameter.\"", (uint8_t *)&a9, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Requested an IR Build on a builder hasn't been created. Make sure the builder is requested as an initialization parameter.");
  }
  _Unwind_Resume(exception_object);
}

void sub_221F87E34(_Unwind_Exception *a1)
{
}

void sub_221F87E54(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

char *Phase::Controller::IR::IRBuilder::GetMethodString(Phase::Controller::IR::IRBuilder *this, const Method *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(int *)this;
  if (v2 >= 4)
  {
    OSStatus v5 = **(id **)(Phase::Logger::GetInstance(this) + 272);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(int *)this;
      int v8 = 136315650;
      id v9 = "IRBuilder.mm";
      __int16 v10 = 1024;
      int v11 = 158;
      __int16 v12 = 2048;
      uint64_t v13 = v6;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Invalid IR builder method index %lu\"", (uint8_t *)&v8, 0x1Cu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid IR builder method index %lu");
  }
  return off_2645F75A0[v2];
}

void sub_221F87F94(_Unwind_Exception *exception_object)
{
}

uint64_t std::unordered_map<unsigned int,unsigned int>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  OSStatus v5 = *(uint64_t ***)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    unint64_t v7 = *(void *)(a1 + 8);
    do
    {
      unint64_t v8 = *((unsigned int *)v5 + 4);
      id v9 = v5[2];
      if (v7)
      {
        uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v10.i16[0] = vaddlv_u8(v10);
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v2 = *((unsigned int *)v5 + 4);
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
        int v11 = *(uint64_t ***)(*(void *)a1 + 8 * v2);
        if (v11)
        {
          for (uint64_t i = *v11; i; uint64_t i = (uint64_t *)*i)
          {
            unint64_t v13 = i[1];
            if (v13 == v8)
            {
              if (*((_DWORD *)i + 4) == v8) {
                goto LABEL_41;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v13 >= v7) {
                  v13 %= v7;
                }
              }
              else
              {
                v13 &= v7 - 1;
              }
              if (v13 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v14 = operator new(0x18uLL);
      void *v14 = 0;
      v14[1] = v8;
      v14[2] = v9;
      float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v16 = *(float *)(a1 + 32);
      if (!v7 || (float)(v16 * (float)v7) < v15)
      {
        BOOL v17 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v17 = 1;
        }
        unint64_t v18 = v17 | (2 * v7);
        unint64_t v19 = vcvtps_u32_f32(v15 / v16);
        if (v18 <= v19) {
          size_t v20 = v19;
        }
        else {
          size_t v20 = v18;
        }
        std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v20);
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v7 <= v8) {
            unint64_t v2 = v8 % v7;
          }
          else {
            unint64_t v2 = v8;
          }
        }
        else
        {
          unint64_t v2 = (v7 - 1) & v8;
        }
      }
      uint64_t v21 = *(void *)a1;
      uint64_t v22 = *(void **)(*(void *)a1 + 8 * v2);
      if (v22)
      {
        void *v14 = *v22;
      }
      else
      {
        void *v14 = *v6;
        *uint64_t v6 = v14;
        *(void *)(v21 + 8 * v2) = v6;
        if (!*v14) {
          goto LABEL_40;
        }
        unint64_t v23 = *(void *)(*v14 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v23 >= v7) {
            v23 %= v7;
          }
        }
        else
        {
          v23 &= v7 - 1;
        }
        uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
      }
      void *v22 = v14;
LABEL_40:
      ++*(void *)(a1 + 24);
LABEL_41:
      OSStatus v5 = (uint64_t **)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_221F881E4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::find<Phase::Controller::IR::IRBuilder::Processor>(void *a1, int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  OSStatus v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t Phase::Controller::IR::IRBuilderCpuFIRCrossover::IRBuilderCpuFIRCrossover(uint64_t a1, uint64_t a2, signed int a3, int a4, double a5)
{
  *(void *)a1 = &unk_26D477C50;
  uint64_t v8 = a1 + 8;
  Phase::Controller::IR::FIRUtilManager::FIRUtilManager((Phase::Controller::IR::FIRUtilManager *)(a1 + 8), a5);
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  *(_DWORD *)(a1 + 272) = a3;
  if (*(void *)(a2 + 16)) {
    operator new();
  }
  unsigned int v9 = 31 - __clz(a3);
  if (a3 <= 0) {
    int v10 = 0;
  }
  else {
    int v10 = v9;
  }
  if (v10 <= a4)
  {
    do
    {
      float v11 = ldexpf(1.0, v10);
      Phase::Controller::IR::FIRUtilManager::AddNewFFTSizeSupport(v8, (int)v11);
      ++v10;
    }
    while (a4 + 1 != v10);
  }
  return a1;
}

void sub_221F88500(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>>>::~__hash_table(v2);
  Phase::Controller::IR::FIRUtilManager::~FIRUtilManager(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::IR::FIRUtilManager::AddNewFFTSizeSupport(uint64_t this, int a2)
{
  int v5 = a2;
  if (a2 <= 0) {
    std::terminate();
  }
  uint64_t v2 = this;
  if ((atomic_fetch_or((atomic_ullong *volatile)(this + 216), a2) & v5) == 0)
  {
    uint64_t v3 = this + 48;
    char v4 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(this + 48));
    unint64_t v7 = &v5;
    v6[0] = (double *)v2;
    v6[1] = (double *)&v5;
    std::__hash_table<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<double const&,int &>>((void *)(v2 + 8), &v5, (uint64_t)&std::piecewise_construct, &v7, v6);
    return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v3);
  }
  return this;
}

void sub_221F885E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Phase::Controller::IR::FIRUtilManager::~FIRUtilManager(Phase::Controller::IR::FIRUtilManager *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 48);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 160));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 112));
  std::mutex::~mutex(v2);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>>>::~__hash_table((uint64_t)this + 8);
}

void Phase::Controller::IR::IRBuilderCpuFIRCrossover::~IRBuilderCpuFIRCrossover(Phase::Controller::IR::IRBuilderCpuFIRCrossover *this)
{
  *(void *)this = &unk_26D477C50;
  uint64_t v2 = (std::mutex *)((char *)this + 56);
  std::__hash_table<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>>>::~__hash_table((uint64_t)this + 232);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 168));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::mutex::~mutex(v2);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>>>::~__hash_table((uint64_t)this + 16);
}

{
  uint64_t vars8;

  Phase::Controller::IR::IRBuilderCpuFIRCrossover::~IRBuilderCpuFIRCrossover(this);

  JUMPOUT(0x223C938A0);
}

unint64_t Phase::Controller::IR::IRBuilderCpuFIRCrossover::GetWorkBufferSizeInBytes(Phase::Controller::IR::IRBuilderCpuFIRCrossover *this, const Phase::Controller::IR::Metadata *a2)
{
  char v4 = (char *)a2 + 16;
  int v5 = (const Phase::Controller::SpatializerEncoder *)*((void *)a2 + 4);
  int v6 = (*(uint64_t (**)(const Phase::Controller::SpatializerEncoder *))(*(void *)v5 + 48))(v5);
  int v7 = (*(uint64_t (**)(const Phase::Controller::SpatializerEncoder *, char *))(*(void *)v5 + 80))(v5, v4);
  uint64_t v8 = *((void *)a2 + 1);
  if (v8 && *(_DWORD *)v8 == 3 && (uint64_t v9 = *(void *)(v8 + 104)) != 0) {
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else {
    LODWORD(v10) = 0;
  }
  int64_t v11 = Phase::Controller::IR::IRBuilderCpuFIRCrossover::CalculateFilterProperties(this, a2, v5);
  uint64_t v12 = (v7 + 63) & 0x1FFFFFFF0;
  if (v7 <= 0) {
    uint64_t v12 = 48;
  }
  uint64_t v13 = 8 * v6;
  unint64_t v14 = v12 + v13;
  if (v6 < 1)
  {
    unint64_t v20 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
    unint64_t v17 = (v11 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v19 = ((((v13 + v20 + 15) | 0xC) + v17) & 0xFFFFFFFFFFFFFFF0) + v13;
  }
  else
  {
    int v15 = v6;
    do
    {
      unint64_t v14 = ((v14 + 15) & 0xFFFFFFFFFFFFFFF0) + 4 * (int)v11;
      --v15;
    }
    while (v15);
    unint64_t v16 = ((v14 + 15) & 0xFFFFFFFFFFFFFFF0) + v13;
    unint64_t v17 = (v11 >> 30) & 0xFFFFFFFFFFFFFFFCLL;
    int v18 = v6;
    do
    {
      unint64_t v16 = ((v16 + 15) & 0xFFFFFFFFFFFFFFF0) + v17;
      --v18;
    }
    while (v18);
    unint64_t v19 = ((v17 + ((v16 + 15) & 0xFFFFFFFFFFFFFFF0) + 15) & 0xFFFFFFFFFFFFFFF0) + v13;
    do
    {
      unint64_t v19 = ((v19 + 15) & 0xFFFFFFFFFFFFFFF0) + v17;
      --v6;
    }
    while (v6);
  }
  unint64_t result = ((v19 + 15) & 0xFFFFFFFFFFFFFFF0) + 8 * (int)v10;
  if ((int)v10 >= 1)
  {
    do
    {
      unint64_t result = ((result + 15) & 0xFFFFFFFFFFFFFFF0) + v17;
      LODWORD(v10) = v10 - 1;
    }
    while (v10);
  }
  return result;
}

unint64_t Phase::Controller::IR::IRBuilderCpuFIRCrossover::CalculateFilterProperties(Phase::Controller::IR::IRBuilderCpuFIRCrossover *this, const Phase::Controller::IR::Metadata *a2, const Phase::Controller::SpatializerEncoder *a3)
{
  unsigned int MaxDelayInSamples = Phase::Controller::IR::GetMaxDelayInSamples(a2, a2);
  __n128 v7 = ((__n128 (*)(const Phase::Controller::SpatializerEncoder *, char *))*(void *)(*(void *)a3 + 64))(a3, (char *)a2 + 16);
  int v9 = *((_DWORD *)this + 68);
  unsigned int v10 = v8 + MaxDelayInSamples + v9;
  uint64_t v11 = v10 - 1;
  v7.n128_u32[0] = v10 - 1;
  v7.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v7.n128_u64[0]);
  v7.n128_u16[0] = vaddlv_u8((uint8x8_t)v7.n128_u64[0]);
  if (v7.n128_u32[0] != 1)
  {
    float v12 = log2f((float)(int)v11);
    double v13 = ldexp(1.0, vcvtms_s32_f32(v12));
    int v14 = (int)v13;
    if (v9 >= 0) {
      int v15 = v9;
    }
    else {
      int v15 = v9 + 1;
    }
    if ((int)v11 - v14 >= v15 >> 1)
    {
      unsigned int v16 = v10 - 2;
      unsigned int v17 = 1;
      do
      {
        v16 |= v16 >> v17;
        BOOL v18 = v17 >= 0x10;
        v17 *= 2;
      }
      while (!v18);
      uint64_t v11 = v16 + 1;
    }
    else
    {
      v9 -= v11 - v14;
      uint64_t v11 = (int)v13;
    }
  }
  return v9 | (unint64_t)(v11 << 32);
}

void Phase::Controller::IR::IRBuilderCpuFIRCrossover::Build(Phase::Controller::IR::IRBuilderCpuFIRCrossover *this, const Phase::Controller::IR::Metadata *a2, char *a3, float *a4)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  int v8 = (char *)a2 + 16;
  int v9 = (const Phase::Controller::SpatializerEncoder *)*((void *)a2 + 4);
  int v10 = (*(uint64_t (**)(const Phase::Controller::SpatializerEncoder *))(*(void *)v9 + 48))(v9);
  float v102 = v8;
  int v11 = (*(uint64_t (**)(const Phase::Controller::SpatializerEncoder *, char *))(*(void *)v9 + 80))(v9, v8);
  double v104 = a2;
  uint64_t v12 = *((void *)a2 + 1);
  float v99 = a4;
  if (v12 && *(_DWORD *)v12 == 3 && (uint64_t v13 = *(void *)(v12 + 104)) != 0) {
    uint64_t v14 = *(unsigned int *)(v13 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  int v15 = (*(uint64_t (**)(const Phase::Controller::SpatializerEncoder *, char *))(*(void *)v9 + 64))(v9, v102);
  int64_t v16 = Phase::Controller::IR::IRBuilderCpuFIRCrossover::CalculateFilterProperties(this, a2, v9);
  int v98 = v17;
  unint64_t v18 = HIDWORD(v16);
  if (v16 >= 0) {
    int v19 = HIDWORD(v16);
  }
  else {
    int v19 = HIDWORD(v16) + 1;
  }
  uint64_t v20 = *((void *)v104 + 1);
  int v109 = v19;
  if (v20 && *(_DWORD *)v20 == 3 && (uint64_t v21 = *(unsigned int **)(v20 + 104)) != 0) {
    uint64_t v105 = *v21;
  }
  else {
    uint64_t v105 = 0;
  }
  *(void *)a3 = 0;
  uint64_t v22 = a3 + 48;
  if (v11 >= 1)
  {
    unint64_t v23 = (unint64_t)(a3 + 63) & 0xFFFFFFFFFFFFFFF0;
    *(void *)a3 = v23;
    uint64_t v22 = (char *)(v23 + v11);
  }
  unint64_t v24 = (unint64_t)(v22 + 15);
  uint64_t v25 = 8 * v10;
  v24 &= 0xFFFFFFFFFFFFFFF0;
  *((void *)a3 + 1) = v24;
  unint64_t v26 = v24 + v25;
  uint64_t v27 = v10;
  if (v10 <= 0)
  {
    unint64_t v34 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
    *((void *)a3 + 2) = v34;
    float v101 = (uint64_t *)(a3 + 16);
    unint64_t v32 = v34 + v25;
  }
  else
  {
    uint64_t v28 = 0;
    do
    {
      unint64_t v29 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(*((void *)a3 + 1) + v28) = v29;
      unint64_t v26 = v29 + 4 * (int)v16;
      v28 += 8;
    }
    while (8 * v10 != v28);
    uint64_t v30 = 0;
    unint64_t v31 = (v26 + 15) & 0xFFFFFFFFFFFFFFF0;
    *((void *)a3 + 2) = v31;
    unint64_t v32 = v31 + v25;
    do
    {
      unint64_t v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(*((void *)a3 + 2) + v30) = v33;
      unint64_t v32 = v33 + ((v16 >> 30) & 0xFFFFFFFFFFFFFFFCLL);
      v30 += 8;
    }
    while (8 * v10 != v30);
    float v101 = (uint64_t *)(a3 + 16);
  }
  unint64_t v35 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v36 = 4 * (v16 >> 32);
  uint64_t __N = v16 >> 32;
  unint64_t v37 = (v35 + v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  *((void *)a3 + 3) = v35;
  *((void *)a3 + 4) = v37;
  unint64_t v38 = v37 + v25;
  if (v10 >= 1)
  {
    uint64_t v39 = 0;
    do
    {
      unint64_t v40 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(*((void *)a3 + 4) + v39) = v40;
      unint64_t v38 = v40 + v36;
      v39 += 8;
    }
    while (8 * v10 != v39);
  }
  unint64_t v41 = (v38 + 15) & 0xFFFFFFFFFFFFFFF0;
  *((void *)a3 + 5) = v41;
  unint64_t v42 = v41 + 8 * (int)v14;
  uint64_t __n = 4 * (int)v16;
  if ((int)v14 >= 1)
  {
    uint64_t v43 = 0;
    do
    {
      unint64_t v44 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(*((void *)a3 + 5) + v43) = v44;
      unint64_t v42 = v44 + v36;
      v43 += 8;
    }
    while (8 * v14 != v43);
  }
  uint64_t v45 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::IR::IRBuilderCpuFIRCrossover *, Phase::Controller::IR::Metadata *))(*(void *)this + 16))(this, v104);
  if (v45 != (Phase::Logger *)(v42 - (void)a3))
  {
    __int16 v91 = **(id **)(Phase::Logger::GetInstance(v45) + 272);
    if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v115 = "IRBuilderCpuFIRCrossover.mm";
      __int16 v116 = 1024;
      int v117 = 177;
      _os_log_impl(&dword_221E5E000, v91, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [GetWorkBufferSizeInBytes(inMetadata) != PointerDiff(pMemory, pInWorkBuffer) is true]: \"Memory Allocation Error\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Memory Allocation Error");
  }
  __A.realp = 0;
  __A.imagp = 0;
  v112.realp = 0;
  v112.imagp = 0;
  __D.realp = 0;
  __D.imagp = 0;
  Phase::Controller::IR::FIRUtilManager::AddNewFFTSizeSupport((uint64_t)this + 8, v18);
  FIRUtils = Phase::Controller::IR::FIRUtilManager::GetFIRUtils((Phase::Controller::IR::IRBuilderCpuFIRCrossover *)((char *)this + 8), v18);
  double v108 = (const vDSP_DFT_SetupStruct ***)FIRUtils;
  unint64_t v47 = *((void *)this + 30);
  if (!v47) {
    goto LABEL_47;
  }
  uint8x8_t v48 = (uint8x8_t)vcnt_s8((int8x8_t)v47);
  v48.i16[0] = vaddlv_u8(v48);
  if (v48.u32[0] > 1uLL)
  {
    unint64_t v49 = (int)v14;
    if (v47 <= (int)v14) {
      unint64_t v49 = (int)v14 % v47;
    }
  }
  else
  {
    unint64_t v49 = (v47 - 1) & (int)v14;
  }
  int v50 = *(uint64_t ***)(*((void *)this + 29) + 8 * v49);
  if (!v50 || (unsigned int v51 = *v50) == 0)
  {
LABEL_47:
    uint64_t v53 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)FIRUtils) + 272);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      int v115 = "IRBuilderCpuFIRCrossover.mm";
      __int16 v116 = 1024;
      int v117 = 316;
      __int16 v118 = 2048;
      double v119 = this;
      __int16 v120 = 1024;
      int v121 = v14;
      _os_log_impl(&dword_221E5E000, v53, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"IRBuilderCpuFIRCrossover:%p Filterbank with %d bands is not supported.\"", buf, 0x22u);
    }
    int v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "IRBuilderCpuFIRCrossover:%p Filterbank with %d bands is not supported.");
  }
  int v103 = v109 >> 1;
  while (1)
  {
    unint64_t v52 = v51[1];
    if (v52 == (int)v14) {
      break;
    }
    if (v48.u32[0] > 1uLL)
    {
      if (v52 >= v47) {
        v52 %= v47;
      }
    }
    else
    {
      v52 &= v47 - 1;
    }
    if (v52 != v49) {
      goto LABEL_47;
    }
LABEL_46:
    unsigned int v51 = (uint64_t *)*v51;
    if (!v51) {
      goto LABEL_47;
    }
  }
  if (*((_DWORD *)v51 + 4) != v14) {
    goto LABEL_46;
  }
  int32x4_t v96 = (Phase::LinkwitzRileyFilterBank *)v51[3];
  if (!v96)
  {
    __int16 v93 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)FIRUtils) + 272);
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      int v115 = "IRBuilderCpuFIRCrossover.mm";
      __int16 v116 = 1024;
      int v117 = 196;
      __int16 v118 = 1024;
      LODWORD(v119) = v14;
      _os_log_impl(&dword_221E5E000, v93, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pFilterBankInUse is true]: \"Failed to get filter bank for subband count %d\"", buf, 0x18u);
    }
    double v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v94, "Failed to get filter bank for subband count %d");
  }
  vDSP_Length v55 = __N;
  if (v10 >= 1)
  {
    uint64_t v56 = 0;
    do
    {
      vDSP_vclr(*(float **)(*((void *)a3 + 4) + v56), 1, __N);
      v56 += 8;
    }
    while (8 * v10 != v56);
  }
  int v106 = v10;
  uint64_t v57 = 4 * v10;
  unsigned int v110 = a3;
  if ((int)v14 >= 1)
  {
    uint64_t v58 = 0;
    uint64_t v107 = 8 * v106;
    uint64_t v95 = v14;
    do
    {
      vDSP_vclr(*((float **)a3 + 3), 1, v55);
      OneBandImpulseResponse = (const void *)Phase::LinkwitzRileyFilterBank::GetOneBandImpulseResponse(v96, v58);
      memcpy(*((void **)v110 + 3), OneBandImpulseResponse, __n);
      uint64_t v60 = *((void *)v110 + 5);
      v112.realp = *(float **)(v60 + 8 * v58);
      v112.imagp = (float *)(*(void *)(v60 + 8 * v58) + 4 * v103);
      Phase::DFTUtils::ProcessDFT(*v108, *((DSPComplex **)v110 + 3), &v112, 0.5);
      if (v106 > 0)
      {
        uint64_t v63 = 0;
        do
        {
          vDSP_vclr(*(float **)(*v101 + v63), 1, __N);
          v63 += 8;
        }
        while (v107 != v63);
      }
      if ((int)v105 >= 1)
      {
        for (uint64_t i = 0; i != v105; ++i)
        {
          unsigned int v65 = (void *)*((void *)v104 + 1);
          uint64_t v66 = v65[1] + 12 * i;
          v61.n128_u32[0] = *(_DWORD *)(v66 + 4);
          v62.n128_u32[0] = *(_DWORD *)(v66 + 8);
          float v67 = *(float *)(v65[7] + 4 * i);
          float v68 = *(float *)v104;
          uint64_t v69 = v65[13];
          uint64_t v70 = *(void *)(v69 + 8);
          BOOL v71 = *(unsigned __int8 *)(v65[18] + i) == 0;
          uint64_t v72 = (*(uint64_t (**)(const Phase::Controller::SpatializerEncoder *, char *, void, __n128, __n128))(*(void *)v9 + 88))(v9, v102, *(void *)v110, v61, v62);
          v61.n128_u32[0] = *(_DWORD *)(v69 + 4 * v70 * i + 16 + 4 * v58);
          if (!v71) {
            v61.n128_f32[0] = -v61.n128_f32[0];
          }
          if (v106 > 0)
          {
            uint64_t v73 = 0;
            uint64_t v74 = *v101;
            uint64_t v75 = 4 * (int)vcvtas_u32_f32(v67 * v68);
            do
            {
              if (v15 >= 1)
              {
                int v76 = (float *)(*(void *)(v74 + 8 * v73) + v75);
                BOOL v77 = (float *)v72;
                uint64_t v78 = v15;
                do
                {
                  *int v76 = *v76 + (float)(*v77 * v61.n128_f32[0]);
                  ++v76;
                  BOOL v77 = (float *)((char *)v77 + v57);
                  --v78;
                }
                while (v78);
              }
              ++v73;
              v72 += 4;
            }
            while (v73 != v27);
          }
        }
      }
      if (v106 >= 1)
      {
        uint64_t v79 = 0;
        do
        {
          uint64_t v80 = *((void *)v110 + 2);
          float v81 = (float *)(*((void *)v110 + 3) + 4 * v103);
          __A.realp = (float *)*((void *)v110 + 3);
          __A.imagp = v81;
          Phase::DFTUtils::ProcessDFT(*v108, *(DSPComplex **)(v80 + v79), &__A, 0.5);
          uint64_t v83 = *((void *)v110 + 4);
          uint64_t v82 = *((void *)v110 + 5);
          v112.realp = *(float **)(v82 + 8 * v58);
          v112.imagp = (float *)(*(void *)(v82 + 8 * v58) + 4 * v103);
          __D.realp = *(float **)(v83 + v79);
          __D.imagp = (float *)(*(void *)(v83 + v79) + 4 * v103);
          Phase::DFTUtils::MultiplyAddComplexPackedSpectrums((Phase::DFTUtils *)*v108, &__A, &v112, &__D, &__D, v103);
          v79 += 8;
        }
        while (v107 != v79);
      }
      ++v58;
      a3 = v110;
      vDSP_Length v55 = __N;
    }
    while (v58 != v95);
  }
  if (v106 >= 1)
  {
    uint64_t v84 = 0;
    do
    {
      unsigned int v85 = (DSPComplex *)*((void *)a3 + 3);
      uint64_t v86 = *((void *)a3 + 4);
      __D.realp = *(float **)(v86 + 8 * v84);
      __D.imagp = (float *)(*(void *)(v86 + 8 * v84) + 4 * v103);
      Phase::DFTUtils::ProcessIDFT(*v108, &__D, v85);
      a3 = v110;
      if (v98 > 0)
      {
        unsigned int v87 = (float *)*((void *)v110 + 3);
        uint64_t v88 = v99;
        uint64_t v89 = v98;
        do
        {
          float v90 = *v87++;
          *uint64_t v88 = v90 + *v88;
          uint64_t v88 = (float *)((char *)v88 + v57);
          --v89;
        }
        while (v89);
      }
      ++v84;
      ++v99;
    }
    while (v84 != v27);
  }
}

void sub_221F89378(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *Phase::Controller::IR::FIRUtilManager::GetFIRUtils(Phase::Controller::IR::FIRUtilManager *this, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v9 = a2;
  __n128 v7 = (char *)this + 48;
  char v8 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 48));
  uint64_t v3 = std::__hash_table<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeServerCommand>,std::equal_to<Phase::ActionTreeServerCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeServerCommand,std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeServerCommand>,std::hash<Phase::ActionTreeServerCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeServerCommand,std::function<void ()(void const*)>>>>::find<Phase::ActionTreeServerCommand>((void *)this + 1, &v9);
  if (!v3)
  {
    int v5 = **(id **)(Phase::Logger::GetInstance(0) + 272);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      int v11 = "IRBuilderFIRUtilManager.h";
      __int16 v12 = 1024;
      int v13 = 77;
      __int16 v14 = 1024;
      int v15 = v9;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [mFIRUtilsPool.end() == FFTUtilsIt is true]: \"Failed to get DFT/FIR utils from pool for FFT length %i\"", buf, 0x18u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Failed to get DFT/FIR utils from pool for FFT length %i");
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v7);
  return v3 + 3;
}

void sub_221F894F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

Phase::Controller::IR::FIRUtilManager *Phase::Controller::IR::FIRUtilManager::FIRUtilManager(Phase::Controller::IR::FIRUtilManager *this, double a2)
{
  *(double *)this = a2;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 48));
  *((void *)this + 27) = 0;
  return this;
}

void sub_221F89568(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<int const,Phase::Controller::IR::FIRUtilManager::FIRUtils>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

vDSP_DFT_Setup *std::__destroy_at[abi:ne180100]<std::pair<int const,Phase::Controller::IR::FIRUtilManager::FIRUtils>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  std::unique_ptr<Phase::FIRFilterUtils>::reset[abi:ne180100]((Phase::FIRFilterUtils **)(a1 + 16), 0);

  return std::unique_ptr<Phase::DFTUtils>::reset[abi:ne180100]((vDSP_DFT_Setup **)(a1 + 8), 0);
}

Phase::FIRFilterUtils *std::unique_ptr<Phase::FIRFilterUtils>::reset[abi:ne180100](Phase::FIRFilterUtils **a1, Phase::FIRFilterUtils *a2)
{
  unint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::FIRFilterUtils::~FIRFilterUtils(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::FIRFilterUtils::~FIRFilterUtils(Phase::FIRFilterUtils *this)
{
  for (uint64_t i = 0; i != -384; i -= 128)
  {
    uint64_t v3 = (char *)this + i;
    int v9 = (void **)((char *)this + i + 456);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
    int v9 = (void **)((char *)this + i + 432);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
    char v4 = *(void **)((char *)this + i + 408);
    if (v4)
    {
      *((void *)v3 + 52) = v4;
      operator delete(v4);
    }
    int v5 = (void *)*((void *)v3 + 46);
    if (v5)
    {
      *(void *)((char *)this + i + 376) = v5;
      operator delete(v5);
    }
  }
  int v6 = (void *)*((void *)this + 6);
  if (v6)
  {
    *((void *)this + 7) = v6;
    operator delete(v6);
  }
  __n128 v7 = (void *)*((void *)this + 3);
  if (v7)
  {
    *((void *)this + 4) = v7;
    operator delete(v7);
  }
  char v8 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v8;
    operator delete(v8);
  }
}

vDSP_DFT_Setup *std::unique_ptr<Phase::DFTUtils>::reset[abi:ne180100](vDSP_DFT_Setup **a1, vDSP_DFT_Setup *a2)
{
  unint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::DFTUtils::~DFTUtils(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<double const&,int &>>(void *a1, int *a2, uint64_t a3, _DWORD **a4, double **a5)
{
  unint64_t v5 = *a2;
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    goto LABEL_18;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v6);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v8 = *a2;
    if (*(void *)&v6 <= v5) {
      unint64_t v8 = v5 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v6 - 1) & v5;
  }
  int v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9 || (int v10 = *v9) == 0) {
LABEL_18:
  }
    std::__hash_table<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<double const&,int &>>((uint64_t)a1, *a2, a4, a5, (uint64_t)v13);
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == v5) {
      break;
    }
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v6) {
        v11 %= *(void *)&v6;
      }
    }
    else
    {
      v11 &= *(void *)&v6 - 1;
    }
    if (v11 != v8) {
      goto LABEL_18;
    }
LABEL_17:
    int v10 = (uint64_t *)*v10;
    if (!v10) {
      goto LABEL_18;
    }
  }
  if (*((_DWORD *)v10 + 4) != v5) {
    goto LABEL_17;
  }
  return v10;
}

void sub_221F899E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<double const&,int &>>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, double **a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  int v10 = operator new(0x40uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *int v10 = 0;
  v10[1] = a2;
  unint64_t v11 = *a4;
  *((_DWORD *)v10 + 4) = **a3;
  Phase::Controller::IR::FIRUtilManager::FIRUtils::FIRUtils((Phase::Controller::IR::FIRUtilManager::FIRUtils *)(v10 + 3), *v11);
}

void sub_221F89A74(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void Phase::Controller::IR::FIRUtilManager::FIRUtils::FIRUtils(Phase::Controller::IR::FIRUtilManager::FIRUtils *this, double a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  operator new();
}

void sub_221F89B6C(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 24) = v5;
    operator delete(v5);
  }
  std::unique_ptr<Phase::FIRFilterUtils>::reset[abi:ne180100](v2, 0);
  std::unique_ptr<Phase::DFTUtils>::reset[abi:ne180100]((vDSP_DFT_Setup **)v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<int const,Phase::Controller::IR::FIRUtilManager::FIRUtils>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>>>::__deallocate_node(a1, *(Phase::LinkwitzRileyFilterBank ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>>>::__deallocate_node(uint64_t a1, Phase::LinkwitzRileyFilterBank **a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *v2;
      std::unique_ptr<Phase::LinkwitzRileyFilterBank>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      uint64_t v2 = (Phase::LinkwitzRileyFilterBank **)v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  int v13 = (void *)(a1 + 16);
  unint64_t v11 = operator new(0x20uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t v11 = *v21;
LABEL_38:
    *uint64_t v21 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *v13;
  *int v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_221F89EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,void *>>>::operator()[abi:ne180100](uint64_t a1, Phase::LinkwitzRileyFilterBank **__p)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::unique_ptr<Phase::LinkwitzRileyFilterBank>::reset[abi:ne180100](__p + 3, 0);
  }
  if (__p)
  {
    operator delete(__p);
  }
}

Phase::LinkwitzRileyFilterBank *std::unique_ptr<Phase::LinkwitzRileyFilterBank>::reset[abi:ne180100](Phase::LinkwitzRileyFilterBank **a1, Phase::LinkwitzRileyFilterBank *a2)
{
  unint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::LinkwitzRileyFilterBank::~LinkwitzRileyFilterBank(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::Controller::IR::IRBuilderCpuFIREq::~IRBuilderCpuFIREq(Phase::Controller::IR::IRBuilderCpuFIREq *this)
{
  *(void *)this = &unk_26D477C80;
  uint64_t v2 = (std::mutex *)((char *)this + 56);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 168));
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 120));
  std::mutex::~mutex(v2);
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::IR::FIRUtilManager::FIRUtils>>>::~__hash_table((uint64_t)this + 16);
}

{
  uint64_t vars8;

  Phase::Controller::IR::IRBuilderCpuFIREq::~IRBuilderCpuFIREq(this);

  JUMPOUT(0x223C938A0);
}

unint64_t Phase::Controller::IR::IRBuilderCpuFIREq::GetWorkBufferSizeInBytes(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 80))(v4, v3);
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7 && *(_DWORD *)v7 == 3 && (uint64_t v8 = *(void *)(v7 + 104)) != 0) {
    uint64_t v9 = ((uint64_t)(*(void *)(v8 + 8) << 32) >> 30) + 15;
  }
  else {
    uint64_t v9 = 15;
  }
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 64))(v4, v3);
  uint64_t v11 = (v6 + 95) & 0x1FFFFFFF0;
  if (v6 <= 0) {
    uint64_t v11 = 80;
  }
  unint64_t v12 = ((v9 + v11) & 0xFFFFFFFFFFFFFFF0) + 8 * v5;
  uint64_t v13 = 4 * v10;
  if (v5 >= 1)
  {
    do
    {
      unint64_t v12 = ((v12 + 15) & 0xFFFFFFFFFFFFFFF0) + v13;
      --v5;
    }
    while (v5);
  }
  if (v10 >= 0) {
    int v14 = v10;
  }
  else {
    int v14 = v10 + 1;
  }
  int v15 = (v14 >> 1) + 1;
  return ((((((((((((v12 + 15) & 0xFFFFFFFFFFFFFFF0) + 4 * v15 + 15) & 0xFFFFFFFFFFFFFFF0) + 4 * v15 + 15) & 0xFFFFFFFFFFFFFFF0)
             + 4 * v15
             + 15) & 0xFFFFFFFFFFFFFFF0)
           + 4 * v15
           + 15) & 0xFFFFFFFFFFFFFFF0)
         + 8 * v15
         + 15) & 0xFFFFFFFFFFFFFFF0)
       + v13;
}

void Phase::Controller::IR::IRBuilderCpuFIREq::Build(Phase::Controller::IR::IRBuilderCpuFIREq *this, const Phase::Controller::IR::Metadata *a2, char *a3, float *a4)
{
  __p[4] = *(void **)MEMORY[0x263EF8340];
  uint64_t v8 = (char *)a2 + 16;
  uint64_t v9 = *((void *)a2 + 4);
  int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  uint64_t v67 = v9;
  float v68 = v8;
  int v11 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v9 + 80))(v9, v8);
  uint64_t v69 = a2;
  uint64_t v12 = *((void *)a2 + 1);
  if (v12 && *(_DWORD *)v12 == 3 && (uint64_t v13 = *(void *)(v12 + 104)) != 0) {
    uint64_t v14 = *(void *)(v13 + 8) << 32;
  }
  else {
    uint64_t v14 = 0;
  }
  int v15 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v9 + 64))(v9, v68);
  int v16 = v15;
  if (v15 >= 0) {
    int v17 = v15;
  }
  else {
    int v17 = v15 + 1;
  }
  int v18 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v9 + 64))(v9, v68);
  uint64_t v19 = *((void *)v69 + 1);
  if (v19 && *(_DWORD *)v19 == 3 && (uint64_t v20 = *(unsigned int **)(v19 + 104)) != 0) {
    uint64_t v66 = *v20;
  }
  else {
    uint64_t v66 = 0;
  }
  int v21 = v17 >> 1;
  *(void *)a3 = 0;
  unint64_t v22 = a3 + 72;
  if (v11 >= 1)
  {
    unint64_t v23 = (unint64_t)(a3 + 87) & 0xFFFFFFFFFFFFFFF0;
    *(void *)a3 = v23;
    unint64_t v22 = (char *)(v23 + v11);
  }
  int v24 = v21 + 1;
  unint64_t v25 = (unint64_t)(v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v26 = (v25 + (v14 >> 30) + 15) & 0xFFFFFFFFFFFFFFF0;
  *((void *)a3 + 1) = v25;
  *((void *)a3 + 2) = v26;
  unint64_t v27 = v26 + 8 * v10;
  uint64_t v28 = 4 * v16;
  if (v10 >= 1)
  {
    uint64_t v29 = 0;
    do
    {
      unint64_t v30 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(*((void *)a3 + 2) + v29) = v30;
      unint64_t v27 = v30 + v28;
      v29 += 8;
    }
    while (8 * v10 != v29);
  }
  unint64_t v31 = (v27 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v32 = (v31 + 4 * v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  *((void *)a3 + 3) = v31;
  *((void *)a3 + 4) = v32;
  unint64_t v33 = (v32 + 4 * v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v34 = (v33 + 4 * v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  *((void *)a3 + 5) = v33;
  *((void *)a3 + 6) = v34;
  unint64_t v35 = (v34 + 4 * v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v36 = (v35 + 8 * v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  *((void *)a3 + 7) = v35;
  *((void *)a3 + 8) = v36;
  unint64_t v37 = v36 + v28;
  unint64_t v38 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::IR::IRBuilderCpuFIREq *, const Phase::Controller::IR::Metadata *))(*(void *)this + 16))(this, v69);
  if (v38 != (Phase::Logger *)(v37 - (void)a3))
  {
    __n128 v61 = **(id **)(Phase::Logger::GetInstance(v38) + 272);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "IRBuilderCpuFIREq.mm";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 149;
      _os_log_impl(&dword_221E5E000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [GetWorkBufferSizeInBytes(inMetadata) != PointerDiff(pMemory, pInWorkBuffer) is true]: \"Memory Allocation Error\"", (uint8_t *)__p, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Memory Allocation Error");
  }
  uint64_t v39 = (Phase::Controller::IR::IRBuilderCpuFIREq *)((char *)this + 8);
  Phase::Controller::IR::FIRUtilManager::AddNewFFTSizeSupport((uint64_t)v39, v16);
  FIRUtils = Phase::Controller::IR::FIRUtilManager::GetFIRUtils(v39, v16);
  DSPSplitComplex v41 = *(DSPSplitComplex *)(a3 + 40);
  DSPSplitComplex v42 = *(DSPSplitComplex *)(a3 + 24);
  DSPSplitComplex __C = v42;
  DSPSplitComplex v72 = v41;
  if ((int)v66 >= 1)
  {
    uint64_t v43 = FIRUtils;
    uint64_t v44 = 0;
    vDSP_Length v65 = v18;
    int v63 = v18;
    int v64 = FIRUtils + 16;
    uint64_t v45 = v18;
    do
    {
      uint64_t v46 = (void *)*((void *)v69 + 1);
      uint64_t v47 = v46[1] + 12 * v44;
      float v48 = *(float *)(v46[7] + 4 * v44);
      float v49 = *(float *)v69;
      uint64_t v50 = v46[13];
      uint64_t v51 = *(void *)(v50 + 8);
      uint64_t v70 = v44;
      if (*(unsigned char *)(v46[18] + v44)) {
        float v52 = -1.0;
      }
      else {
        float v52 = 1.0;
      }
      LODWORD(v42.realp) = *(_DWORD *)(v47 + 4);
      LODWORD(v41.realp) = *(_DWORD *)(v47 + 8);
      uint64_t v53 = (DSPComplex *)(*(uint64_t (**)(uint64_t, char *, void, DSPSplitComplex, DSPSplitComplex))(*(void *)v67 + 88))(v67, v68, *(void *)a3, v42, v41);
      memcpy(*((void **)a3 + 1), (const void *)(v50 + 4 * v51 * v70 + 16), v14 >> 30);
      Phase::ArrayFunction::Deinterleave(v53, *((const float **)a3 + 2), v65, v10);
      int v54 = (const void *)*((void *)a3 + 1);
      memset(__p, 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(__p, v54, (uint64_t)v54 + 4 * (v14 >> 32), v14 >> 32);
      Phase::FIRFilterUtils::ConstructFIREqFilter(v43[1], 1, (uint64_t)__p, v64, v72.realp, v72.imagp, *((DSPComplex **)a3 + 7));
      if (v10 >= 1)
      {
        uint64_t v55 = 0;
        unsigned int v56 = v10 * vcvtas_u32_f32(v48 * v49);
        do
        {
          Phase::DFTUtils::ProcessDFT((const vDSP_DFT_SetupStruct **)*v43, *(DSPComplex **)(*((void *)a3 + 2) + 8 * v55), &__C, 0.5);
          Phase::DFTUtils::MultiplyComplexPackedSpectrums((Phase::DFTUtils *)*v43, &__C, &v72, &__C, v21);
          Phase::DFTUtils::ProcessIDFT((const vDSP_DFT_SetupStruct **)*v43, &__C, *((DSPComplex **)a3 + 8));
          if (v63 >= 1)
          {
            uint64_t v57 = (float *)*((void *)a3 + 8);
            unsigned int v58 = v56;
            uint64_t v59 = v45;
            do
            {
              float v60 = *v57++;
              a4[v58] = a4[v58] + (float)(v52 * v60);
              v58 += v10;
              --v59;
            }
            while (v59);
          }
          ++v55;
          ++v56;
        }
        while (v55 != v10);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      uint64_t v44 = v70 + 1;
    }
    while (v70 + 1 != v66);
  }
}

void sub_221F8A764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  __cxa_free_exception(v26);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::IR::IRBuilderCpuIIRCrossover::IRBuilderCpuIIRCrossover(uint64_t result, uint64_t a2)
{
  *(void *)unint64_t result = &unk_26D477CB0;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_DWORD *)(result + 40) = 1065353216;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_DWORD *)(result + 80) = 1065353216;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_DWORD *)(result + 120) = 1065353216;
  if (*(void *)(a2 + 16)) {
    operator new();
  }
  return result;
}

void sub_221F8B0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  operator delete(v20);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v19);
  std::__hash_table<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>>>::~__hash_table(v18);
  _Unwind_Resume(a1);
}

void Phase::Controller::IR::IRBuilderCpuIIRCrossover::~IRBuilderCpuIIRCrossover(Phase::Controller::IR::IRBuilderCpuIIRCrossover *this)
{
  *(void *)this = &unk_26D477CB0;
  for (uint64_t i = (void *)*((void *)this + 3); i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = (vDSP_biquad_Setup *)i[3];
    uint64_t v4 = (vDSP_biquad_Setup *)i[4];
    while (v3 != v4)
      vDSP_biquad_DestroySetup(*v3++);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unique_ptr<Phase::LinkwitzRileyFilterBank>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  Phase::Controller::IR::IRBuilderCpuIIRCrossover::~IRBuilderCpuIIRCrossover(this);

  JUMPOUT(0x223C938A0);
}

unint64_t Phase::Controller::IR::IRBuilderCpuIIRCrossover::GetWorkBufferSizeInBytes(Phase::Controller::IR::IRBuilderCpuIIRCrossover *this, const Phase::Controller::IR::Metadata *a2)
{
  uint64_t v4 = (char *)a2 + 16;
  uint64_t v5 = *((void *)a2 + 4);
  unsigned int MaxDelayInSamples = Phase::Controller::IR::GetMaxDelayInSamples(a2, a2);
  int v7 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v5 + 64))(v5, v4);
  int v8 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v5 + 80))(v5, v4);
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
  uint64_t v10 = *((void *)a2 + 1);
  if (v10 && *(_DWORD *)v10 == 3 && (uint64_t v11 = *(void *)(v10 + 104)) != 0) {
    int v12 = *(_DWORD *)(v11 + 8);
  }
  else {
    int v12 = 0;
  }
  uint64_t v13 = std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::find<Phase::Controller::IR::IRBuilder::Processor>((void *)this + 11, v12);
  if (!v13) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  int v14 = v7 + MaxDelayInSamples;
  uint64_t v15 = (v8 + 63) | 8;
  if (v8 <= 0) {
    uint64_t v15 = 56;
  }
  uint64_t v16 = 8 * v9;
  unint64_t v17 = ((((v15 + 8 * *((int *)v13 + 5) + 8) & 0xFFFFFFFFFFFFFFF0) + 4 * v14 + 15) & 0xFFFFFFFFFFFFFFF0) + v16;
  if (v9 < 1) {
    return ((v17 + 15) & 0xFFFFFFFFFFFFFFF0) + v16;
  }
  uint64_t v18 = 4 * v14;
  int v19 = v9;
  do
  {
    unint64_t v17 = ((v17 + 15) & 0xFFFFFFFFFFFFFFF0) + v18;
    --v19;
  }
  while (v19);
  unint64_t result = ((v17 + 15) & 0xFFFFFFFFFFFFFFF0) + v16;
  do
  {
    unint64_t result = ((result + 15) & 0xFFFFFFFFFFFFFFF0) + v18;
    --v9;
  }
  while (v9);
  return result;
}

void Phase::Controller::IR::IRBuilderCpuIIRCrossover::Build(Phase::Controller::IR::IRBuilderCpuIIRCrossover *this, const Phase::Controller::IR::Metadata *a2, char *a3, float *a4)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  int v8 = (char *)a2 + 16;
  uint64_t v9 = *((void *)a2 + 4);
  unsigned int MaxDelayInSamples = Phase::Controller::IR::GetMaxDelayInSamples(a2, a2);
  int v11 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v9 + 64))(v9, v8);
  uint64_t v84 = v8;
  int v12 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v9 + 80))(v9, v8);
  int v87 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
  unsigned int v85 = a2;
  uint64_t v13 = *((void *)a2 + 1);
  if (v13 && *(_DWORD *)v13 == 3 && (uint64_t v14 = *(void *)(v13 + 104)) != 0) {
    uint64_t v15 = *(void *)(v14 + 8);
  }
  else {
    LODWORD(v15) = 0;
  }
  int v82 = v15;
  uint64_t v16 = std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::find<Phase::Controller::IR::IRBuilder::Processor>((void *)this + 11, v15);
  if (!v16) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (v13 && *(_DWORD *)v13 == 3 && (unint64_t v17 = *(unsigned int **)(v13 + 104)) != 0) {
    uint64_t v86 = *v17;
  }
  else {
    uint64_t v86 = 0;
  }
  uint64_t v18 = v11 + MaxDelayInSamples;
  uint64_t __N = 2 * *((int *)v16 + 5) + 2;
  *(void *)a3 = 0;
  int v19 = a3 + 40;
  if (v12 >= 1)
  {
    unint64_t v20 = (unint64_t)(a3 + 55) & 0xFFFFFFFFFFFFFFF0;
    *(void *)a3 = v20;
    int v19 = (char *)(v20 + v12);
  }
  unint64_t v21 = (unint64_t)(v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  unint64_t v22 = (v21 + 4 * __N + 15) & 0xFFFFFFFFFFFFFFF0;
  *((void *)a3 + 1) = v21;
  *((void *)a3 + 2) = v22;
  uint64_t v23 = v22 + 4 * (int)v18 + 15;
  uint64_t v24 = 8 * v87;
  v23 &= 0xFFFFFFFFFFFFFFF0;
  *((void *)a3 + 3) = v23;
  uint64_t v25 = v23 + v24;
  if (v87 <= 0)
  {
    unint64_t v34 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
    *((void *)a3 + 4) = v34;
    unint64_t v31 = (uint64_t *)(a3 + 32);
    unint64_t v32 = v34 + v24;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v27 = 4 * (int)v18;
    do
    {
      unint64_t v28 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(*((void *)a3 + 3) + v26) = v28;
      uint64_t v25 = v28 + v27;
      v26 += 8;
    }
    while (8 * v87 != v26);
    uint64_t v29 = 0;
    unint64_t v30 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
    *((void *)a3 + 4) = v30;
    unint64_t v31 = (uint64_t *)(a3 + 32);
    unint64_t v32 = v30 + v24;
    do
    {
      unint64_t v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
      *(void *)(*v31 + v29) = v33;
      unint64_t v32 = v33 + v27;
      v29 += 8;
    }
    while (8 * v87 != v29);
  }
  unint64_t v35 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::IR::IRBuilderCpuIIRCrossover *, const Phase::Controller::IR::Metadata *))(*(void *)this + 16))(this, v85);
  uint64_t Instance = Phase::Logger::GetInstance(v35);
  if (v35 != (Phase::Logger *)(v32 - (void)a3))
  {
    uint64_t v75 = **(id **)(Instance + 272);
    if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v91 = "IRBuilderCpuIIRCrossover.mm";
      __int16 v92 = 1024;
      int v93 = 202;
      _os_log_impl(&dword_221E5E000, v75, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [GetWorkBufferSizeInBytes(inMetadata) != PointerDiff(pMemory, pInWorkBuffer) is true]: \"Memory Allocation Error\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Memory Allocation Error");
  }
  int v37 = v82;
  uint64_t v80 = a4;
  if (v82 == 31)
  {
    unint64_t v38 = (uint64_t *)&Phase::Controller::IR::sGetCompensationGains(unsigned long)::sThirdOctaveBandCompensationGains;
    goto LABEL_31;
  }
  if (v82 == 10)
  {
    unint64_t v38 = (uint64_t *)&Phase::Controller::IR::sGetCompensationGains(unsigned long)::sOctaveBandCompensationGains;
LABEL_31:
    uint64_t v83 = v38;
    goto LABEL_32;
  }
  if (v82 != 3)
  {
    BOOL v77 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)Instance) + 272);
    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v91 = "IRBuilderCpuIIRCrossover.mm";
      __int16 v92 = 1024;
      int v93 = 212;
      __int16 v94 = 1024;
      LODWORD(v95) = v82;
      _os_log_impl(&dword_221E5E000, v77, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [nullptr == pSubbandCompensationGains is true]: \"Failed to get compensation gains for subband count %d\"", buf, 0x18u);
    }
    uint64_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v78, "Failed to get compensation gains for subband count %d");
  }
  uint64_t v83 = &qword_267F77B20;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_16, memory_order_acquire) & 1) == 0)
  {
    uint64_t Instance = __cxa_guard_acquire(&_MergedGlobals_16);
    if (Instance)
    {
      qword_267F77B20 = 0x3F8000003F9820D7;
      uint64_t v83 = &qword_267F77B20;
      dword_267F77B28 = 1065353216;
      __cxa_guard_release(&_MergedGlobals_16);
    }
    int v37 = v82;
  }
LABEL_32:
  vDSP_Length v39 = (int)v18;
  if (v87 >= 1)
  {
    uint64_t v40 = 0;
    do
    {
      vDSP_vclr(*(float **)(*v31 + v40), 1, (int)v18);
      v40 += 8;
    }
    while (8 * v87 != v40);
  }
  uint64_t v79 = v18;
  float v81 = this;
  BOOL v41 = v37 < 1;
  int v42 = v87;
  if (!v41)
  {
    uint64_t v43 = 0;
    uint64_t v88 = 8 * v87;
    do
    {
      if (v42 >= 1)
      {
        uint64_t v44 = 0;
        do
        {
          vDSP_vclr(*(float **)(*((void *)a3 + 3) + v44), 1, v39);
          v44 += 8;
        }
        while (v88 != v44);
      }
      if ((int)v86 >= 1)
      {
        for (uint64_t i = 0; i != v86; ++i)
        {
          uint64_t v46 = (void *)*((void *)v85 + 1);
          float v47 = *(float *)(v46[7] + 4 * i);
          float v48 = *(float *)v85;
          int v49 = *(unsigned __int8 *)(v46[18] + i);
          uint64_t v50 = v46[13] + 4 * *(void *)(v46[13] + 8) * i + 4 * v43;
          uint64_t Instance = (*(uint64_t (**)(uint64_t, char *, void, float, float))(*(void *)v9 + 88))(v9, v84, *(void *)a3, *(float *)(v46[1] + 12 * i + 4), *(float *)(v46[1] + 12 * i + 8));
          float v51 = *(float *)(v50 + 16);
          float v52 = -(float)(v51 * *((float *)v83 + v43));
          if (!v49) {
            float v52 = v51 * *((float *)v83 + v43);
          }
          if (v87 >= 1)
          {
            uint64_t v53 = 0;
            unsigned int v54 = vcvtas_u32_f32(v47 * v48);
            uint64_t v55 = *((void *)a3 + 3);
            do
            {
              if (v11 >= 1)
              {
                uint64_t v56 = *(void *)(v55 + 8 * v53);
                signed int v57 = v54;
                unsigned int v58 = (float *)Instance;
                uint64_t v59 = v11;
                do
                {
                  *(float *)(v56 + 4 * v57) = *(float *)(v56 + 4 * v57) + (float)(*v58 * v52);
                  v58 += v87;
                  ++v57;
                  --v59;
                }
                while (v59);
              }
              ++v53;
              Instance += 4;
            }
            while (v53 != v87);
          }
        }
      }
      unint64_t v60 = *((void *)v81 + 2);
      if (!v60) {
        goto LABEL_79;
      }
      uint8x8_t v61 = (uint8x8_t)vcnt_s8((int8x8_t)v60);
      v61.i16[0] = vaddlv_u8(v61);
      if (v61.u32[0] > 1uLL)
      {
        unint64_t v62 = v82;
        if (v60 <= v82) {
          unint64_t v62 = v82 % v60;
        }
      }
      else
      {
        unint64_t v62 = (v60 - 1) & v82;
      }
      int v63 = *(uint64_t ***)(*((void *)v81 + 1) + 8 * v62);
      if (!v63 || (int v64 = *v63) == 0)
      {
LABEL_79:
        uint64_t v73 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)Instance) + 272);
        if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315906;
          __int16 v91 = "IRBuilderCpuIIRCrossover.mm";
          __int16 v92 = 1024;
          int v93 = 328;
          __int16 v94 = 2048;
          uint64_t v95 = v81;
          __int16 v96 = 1024;
          int v97 = v82;
          _os_log_impl(&dword_221E5E000, v73, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"IRBuilderCpuIIRCrossover:%p Filterbank with %d bands is not supported.\"", buf, 0x22u);
        }
        uint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v74, "IRBuilderCpuIIRCrossover:%p Filterbank with %d bands is not supported.");
      }
      while (1)
      {
        unint64_t v65 = v64[1];
        if (v65 == v82) {
          break;
        }
        if (v61.u32[0] > 1uLL)
        {
          if (v65 >= v60) {
            v65 %= v60;
          }
        }
        else
        {
          v65 &= v60 - 1;
        }
        if (v65 != v62) {
          goto LABEL_79;
        }
LABEL_66:
        int v64 = (uint64_t *)*v64;
        if (!v64) {
          goto LABEL_79;
        }
      }
      if (*((_DWORD *)v64 + 4) != v82) {
        goto LABEL_66;
      }
      int v42 = v87;
      if (v87 >= 1)
      {
        uint64_t v66 = 0;
        do
        {
          vDSP_vclr(*((float **)a3 + 1), 1, __N);
          vDSP_biquad(*(const vDSP_biquad_SetupStruct **)(v64[3] + 8 * v43), *((float **)a3 + 1), *(const float **)(*((void *)a3 + 3) + v66), 1, *((float **)a3 + 2), 1, v39);
          vDSP_vclr(*((float **)a3 + 1), 1, __N);
          vDSP_biquad(*(const vDSP_biquad_SetupStruct **)(v64[3] + 8 * v43), *((float **)a3 + 1), *((const float **)a3 + 2), 1, *((float **)a3 + 2), 1, v39);
          vDSP_vadd(*((const float **)a3 + 2), 1, *(const float **)(*((void *)a3 + 4) + v66), 1, *(float **)(*((void *)a3 + 4) + v66), 1, v39);
          v66 += 8;
        }
        while (v88 != v66);
      }
      ++v43;
    }
    while (v43 != v82);
  }
  if (v42 >= 1)
  {
    uint64_t v67 = 0;
    uint64_t v68 = *v31;
    do
    {
      if (v79)
      {
        uint64_t v69 = *(float **)(v68 + 8 * v67);
        int v70 = v67;
        uint64_t v71 = v79;
        do
        {
          float v72 = *v69++;
          v80[v70] = v72 + v80[v70];
          v70 += v42;
          --v71;
        }
        while (v71);
      }
      ++v67;
    }
    while (v67 != v87);
  }
}

void sub_221F8BCE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221F8BCF4(_Unwind_Exception *a1)
{
}

void sub_221F8BD0C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,long long buf,__int16 a24,__int16 a25,int a26,int a27,int a28)
{
  __cxa_free_exception(v29);
  if (a2 == 2)
  {
    unint64_t v32 = (Phase::Logger *)__cxa_begin_catch(a1);
    unint64_t v33 = **(id **)(Phase::Logger::GetInstance(v32) + 272);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "IRBuilderCpuIIRCrossover.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 297;
      a25 = 2048;
      LOWORD(a28) = 1024;
      *(int *)((char *)&a28 + 2) = v28;
      _os_log_impl(&dword_221E5E000, v33, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"IRBuilderCpuIIRCrossover: %p Failed to filter subband %u\"", (uint8_t *)&buf, 0x22u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "IRBuilderCpuIIRCrossover: %p Failed to filter subband %u");
  }
  _Unwind_Resume(a1);
}

void sub_221F8BE04(_Unwind_Exception *a1)
{
}

void sub_221F8BE24(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x221F8BE2CLL);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void Phase::Controller::IR::IRBuilderCpuSimple::~IRBuilderCpuSimple(Phase::Controller::IR::IRBuilderCpuSimple *this)
{
}

uint64_t Phase::Controller::IR::IRBuilderCpuSimple::GetWorkBufferSizeInBytes(uint64_t a1, uint64_t a2)
{
  int v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 32) + 80))(*(void *)(a2 + 32), a2 + 16);
  if (v2 <= 0) {
    return 8;
  }
  else {
    return v2 + 16;
  }
}

void Phase::Controller::IR::IRBuilderCpuSimple::Build(Phase::Controller::IR::IRBuilderCpuSimple *this, const Phase::Controller::IR::Metadata *a2, char *a3, float *a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  int v7 = (char *)a2 + 16;
  uint64_t v8 = *((void *)a2 + 4);
  unsigned int MaxDelayInSamples = Phase::Controller::IR::GetMaxDelayInSamples(a2, a2);
  int v10 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 64))(v8, v7);
  int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  vDSP_Length v39 = v7;
  int v11 = (*(uint64_t (**)(uint64_t, char *))(*(void *)v8 + 80))(v8, v7);
  uint64_t v12 = *((void *)a2 + 1);
  if (v12 && *(_DWORD *)v12 == 3 && (uint64_t v13 = *(unsigned int **)(v12 + 104)) != 0)
  {
    int v14 = v13[2];
    uint64_t v15 = *v13;
  }
  else
  {
    int v14 = 0;
    uint64_t v15 = 0;
  }
  *(void *)a3 = 0;
  uint64_t v16 = a3 + 8;
  if (v11 >= 1)
  {
    unint64_t v17 = (unint64_t)(a3 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(void *)a3 = v17;
    uint64_t v16 = (char *)(v17 + v11);
  }
  uint64_t v18 = (Phase::Logger *)(*(uint64_t (**)(Phase::Controller::IR::IRBuilderCpuSimple *, const Phase::Controller::IR::Metadata *))(*(void *)this + 16))(this, a2);
  if (v18 != (Phase::Logger *)(v16 - a3))
  {
    int v37 = **(id **)(Phase::Logger::GetInstance(v18) + 272);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v43 = "IRBuilderCpuSimple.mm";
      __int16 v44 = 1024;
      int v45 = 76;
      _os_log_impl(&dword_221E5E000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [GetWorkBufferSizeInBytes(inMetadata) != PointerDiff(pMemory, pInWorkBuffer) is true]: \"Memory Allocation Error\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Memory Allocation Error");
  }
  vDSP_vclr(a4, 1, (int)(v41 * (v10 + MaxDelayInSamples)));
  if (v14)
  {
    if (v14 > 1)
    {
      unint64_t v22 = **(id **)(Phase::Logger::GetInstance(v19) + 272);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        uint64_t v43 = "IRBuilderCpuSimple.mm";
        __int16 v44 = 1024;
        int v45 = 91;
        __int16 v46 = 2048;
        float v47 = this;
        __int16 v48 = 1024;
        int v49 = v14;
        _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d IRBuilderCpuSimple@%p: Metadata has %d subbands. Falling back on first subband.", buf, 0x22u);
      }
    }
    if ((int)v15 >= 1)
    {
      uint64_t v23 = 0;
      vDSP_Length v24 = v41 * v10;
      uint64_t v25 = 4;
      do
      {
        uint64_t v26 = (void *)*((void *)a2 + 1);
        uint64_t v27 = (unsigned __int32 *)(v26[1] + v25);
        v20.n128_u32[0] = *v27;
        v21.n128_u32[0] = v27[1];
        float v28 = *(float *)(v26[7] + 4 * v23);
        float v29 = *(float *)a2;
        uint64_t v30 = v26[13];
        uint64_t v31 = *(void *)(v30 + 8);
        BOOL v32 = *(unsigned __int8 *)(v26[18] + v23) == 0;
        unint64_t v33 = (const float *)(*(uint64_t (**)(uint64_t, char *, void, __n128, __n128))(*(void *)v8 + 88))(v8, v39, *(void *)a3, v20, v21);
        unsigned int v34 = vcvtas_u32_f32(v28 * v29);
        *(_DWORD *)buf = 0;
        float v35 = *(float *)(v30 + 4 * v31 * v23 + 16);
        if (!v32) {
          float v35 = -v35;
        }
        *(float *)buf = v35;
        vDSP_vsma(v33, 1, (const float *)buf, &a4[v41 * v34], 1, &a4[v41 * v34], 1, v24);
        ++v23;
        v25 += 12;
      }
      while (v15 != v23);
    }
  }
  else
  {
    unint64_t v36 = **(id **)(Phase::Logger::GetInstance(v19) + 272);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      uint64_t v43 = "IRBuilderCpuSimple.mm";
      __int16 v44 = 1024;
      int v45 = 83;
      __int16 v46 = 2048;
      float v47 = this;
      __int16 v48 = 1024;
      int v49 = 0;
      _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d IRBuilderCpuSimple@%p: Metadata has %d subbands. Clearing the output.", buf, 0x22u);
    }
  }
}

void sub_221F8C3DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::IR::Metadata::Metadata(uint64_t a1, uint64_t a2, Phase::Controller::Spatializer *this, float a4)
{
  *(float *)a1 = a4;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = this;
  Phase::Controller::Spatializer::AcquireFilters(this, (uint64_t)&v15);
  uint64_t v6 = v15;
  uint64_t v5 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v9 = v17;
  uint64_t v8 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v12 = v19;
  int v11 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  return a1;
}

void sub_221F8C4EC(_Unwind_Exception *a1)
{
  Phase::Controller::SpatializerFilterHandle::~SpatializerFilterHandle(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::IR::Metadata::~Metadata(Phase::Controller::IR::Metadata *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

unsigned int Phase::Controller::IR::GetMaxDelayInSamples(Phase::Controller::IR *this, const Phase::Controller::IR::Metadata *a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 0;
  }
  if (*(_DWORD *)v2 != 3) {
    return 0;
  }
  uint64_t v3 = *(float **)(v2 + 56);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(uint64_t **)(v2 + 104);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = *v4;
  if (!v5) {
    return 0;
  }
  if (*(unsigned char *)(v2 + 201))
  {
    float v7 = v3[v5 - 1] * *(float *)this;
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(this);
    if (*(unsigned char *)(*((void *)Instance + 34) + 8))
    {
      uint64_t v9 = *(float **)(v2 + 56);
      unint64_t v10 = *(void *)(v2 + 96);
      if (v10 >= 2)
      {
        int v11 = v9 + 1;
        float v12 = *v9;
        uint64_t v13 = 4 * v10 - 4;
        int v14 = v9 + 1;
        do
        {
          float v15 = *v14++;
          float v16 = v15;
          if (v12 < v15)
          {
            float v12 = v16;
            uint64_t v9 = v11;
          }
          int v11 = v14;
          v13 -= 4;
        }
        while (v13);
      }
      float v17 = *v9 * *(float *)this;
      if (v17 != v7)
      {
        uint64_t v18 = **(id **)(Phase::Logger::GetInstance(Instance) + 272);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          int v27 = 136315906;
          float v28 = "IRBuilderMetadata.mm";
          __int16 v29 = 1024;
          int v30 = 80;
          __int16 v31 = 2048;
          double v32 = v7;
          __int16 v33 = 2048;
          double v34 = v17;
          _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d Invalid metadata sorting flag. Read max delay %f, actual value %f.", (uint8_t *)&v27, 0x26u);
        }
      }
    }
    return vcvtas_u32_f32(v7);
  }
  else
  {
    unint64_t v20 = *(void *)(v2 + 96);
    if (v20 >= 2)
    {
      __n128 v21 = v3 + 1;
      float v22 = *v3;
      uint64_t v23 = 4 * v20 - 4;
      vDSP_Length v24 = v3 + 1;
      do
      {
        float v25 = *v24++;
        float v26 = v25;
        if (v22 < v25)
        {
          float v22 = v26;
          uint64_t v3 = v21;
        }
        __n128 v21 = v24;
        v23 -= 4;
      }
      while (v23);
    }
    return vcvtas_u32_f32(*v3 * *(float *)this);
  }
}

void Phase::DspLayer::IRBuilderStereo3BandShelving::GetNewRegistryEntry(Phase::DspLayer::IRBuilderStereo3BandShelving *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v1 = malloc_type_malloc(0xA8uLL, 0x1050040B063AAFAuLL);
  *uint64_t v1 = "Low Gain dB";
  v1[1] = 0x500000000;
  *(void *)((char *)v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  v1[4] = 0xC05E000000000000;
  v1[5] = 0;
  v1[6] = 0;
  v1[7] = "Mid Gain dB";
  v1[8] = 0x500000001;
  *(void *)((char *)v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  v1[11] = 0xC05E000000000000;
  v1[12] = 0;
  v1[13] = 0;
  v1[14] = "High Gain dB";
  v1[15] = 0x500000002;
  *(void *)((char *)v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  v1[19] = 0;
  v1[20] = 0;
  v1[18] = 0xC05E000000000000;
  operator new();
}

void sub_221F8C910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::IRBuilderStereo3BandShelving::~IRBuilderStereo3BandShelving(Phase::DspLayer::IRBuilderStereo3BandShelving *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::IRBuilderStereo3BandShelvingSlice::~IRBuilderStereo3BandShelvingSlice(_anonymous_namespace_::IRBuilderStereo3BandShelvingSlice *this)
{
}

double anonymous namespace'::IRBuilderStereo3BandShelvingSlice::Reset(_OWORD *a1)
{
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[26] = 0u;
  a1[27] = 0u;
  a1[28] = 0u;
  a1[29] = 0u;
  a1[30] = 0u;
  a1[31] = 0u;
  a1[32] = 0u;
  a1[33] = 0u;
  a1[34] = 0u;
  a1[35] = 0u;
  a1[36] = 0u;
  a1[37] = 0u;
  a1[38] = 0u;
  a1[39] = 0u;
  a1[40] = 0u;
  a1[41] = 0u;
  a1[42] = 0u;
  (*(void (**)(_OWORD *))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  a1[43] = 0u;
  a1[44] = 0u;
  return result;
}

uint64_t anonymous namespace'::IRBuilderStereo3BandShelvingSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  *(void *)(a1 + 96 + 8 * a3) = 0;
  *(_DWORD *)(a1 + 96 + 4 * a3 + 32) = 0;
  *(_DWORD *)(a1 + 432 + 4 * a3) = 0;
  uint64_t v7 = 4 * a3 + 16;
  *(_DWORD *)(a1 + 432 + v7) = 0;
  *(_DWORD *)(a1 + 464 + 4 * a3) = 0;
  uint64_t v8 = (_DWORD *)(a1 + 4 * a3);
  v8[4] = 0;
  *(_DWORD *)(a1 + 464 + v7) = 0;
  *(_DWORD *)(a1 + 496 + 4 * a3) = 0;
  v8[8] = 0;
  *(_DWORD *)(a1 + 496 + v7) = 0;
  *(_DWORD *)(a1 + 528 + 4 * a3) = 0;
  v8[12] = 0;
  *(_DWORD *)(a1 + 528 + v7) = 0;
  *(_DWORD *)(a1 + 560 + 4 * a3) = 0;
  v8[16] = 0;
  *(_DWORD *)(a1 + 560 + v7) = 0;
  *(_DWORD *)(a1 + 592 + 4 * a3) = 0;
  v8[20] = 0;
  *(_DWORD *)(a1 + 592 + v7) = 0;
  *(_DWORD *)(a1 + 624 + 4 * a3) = 0;
  v8[104] = 0;
  *(_DWORD *)(a1 + 624 + v7) = 0;
  *(_DWORD *)(a1 + 656 + 4 * a3) = 0;
  *(_DWORD *)(a1 + 656 + v7) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 8 * a3 + 688) = a4;
  return result;
}

uint64_t anonymous namespace'::IRBuilderStereo3BandShelvingSlice::GetParameter(_anonymous_namespace_::IRBuilderStereo3BandShelvingSlice *this, unsigned int a2)
{
  if (a2 > 2) {
    return 9;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::IRBuilderStereo3BandShelvingSlice::SetParameter(_anonymous_namespace_::IRBuilderStereo3BandShelvingSlice *this, int a2, int a3, double a4)
{
  if (a2 == 2)
  {
    uint64_t result = 0;
    float v7 = a4;
    *((float *)this + a3 + 12) = v7;
  }
  else if (a2 == 1)
  {
    uint64_t result = 0;
    float v8 = a4;
    *((float *)this + a3 + 8) = v8;
  }
  else if (a2)
  {
    return 9;
  }
  else
  {
    uint64_t result = 0;
    float v6 = a4;
    *((float *)this + a3 + 4) = v6;
  }
  return result;
}

float32x4_t anonymous namespace'::IRBuilderStereo3BandShelvingSlice::UpdateParameters(uint64_t a1, int32x2_t *a2)
{
  long long v4 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 400) = v4;
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a1 + 96);
  v5.i64[0] = -1;
  v5.i64[1] = -1;
  int32x4_t v48 = vaddq_s32(*(int32x4_t *)(a1 + 400), v5);
  float32x4_t v51 = *(float32x4_t *)(a1 + 32);
  float32x4_t v53 = (float32x4_t)vdupq_n_s32(0x3D4CCCCDu);
  simd_float4 v47 = _simd_exp10_f4((simd_float4)vmulq_f32(v51, v53));
  float32x4_t v56 = vsubq_f32(*(float32x4_t *)(a1 + 48), v51);
  float32x4_t v37 = (float32x4_t)vdupq_n_s32(0x3CCCCCCDu);
  simd_float4 v43 = _simd_exp10_f4((simd_float4)vmulq_f32(v56, v37));
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v59 = _Q1;
  float32x4_t v49 = vaddq_f32((float32x4_t)v43, _Q1);
  __asm { FMOV            V1.4S, #-1.0 }
  float32x4_t v35 = _Q1;
  float32x4_t v54 = vaddq_f32((float32x4_t)v43, _Q1);
  double v12 = *(double *)a2;
  *(float *)&double v12 = *(double *)a2->i32;
  *(float *)&double v12 = 31416.0 / *(float *)&v12;
  simd_float4 x = (simd_float4)vdupq_lane_s32(*(int32x2_t *)&v12, 0);
  simd_float4 v41 = _simd_cos_f4(x);
  float32x4_t v32 = vmulq_f32(v54, (float32x4_t)v41);
  float32x4_t v39 = vaddq_f32(v49, v32);
  float32x4_t v13 = (float32x4_t)_simd_exp10_f4((simd_float4)vmulq_f32(v56, v53));
  float32x4_t v57 = vmulq_f32(v54, vnegq_f32(v54));
  float32x4_t v34 = (float32x4_t)vdupq_n_s32(0x3F9837F0u);
  float32x4_t v14 = vmulq_f32((float32x4_t)_simd_sin_f4(x), vmlaq_f32(v57, v34, vsqrtq_f32(vaddq_f32(v13, v59))));
  float32x4_t v15 = vsubq_f32(v49, v32);
  float32x4_t v16 = vdivq_f32(v59, vaddq_f32(v15, v14));
  simd_float4 xa = (simd_float4)vmulq_f32(vmulq_f32((float32x4_t)v43, vaddq_f32(v39, v14)), v16);
  float32x4_t v17 = vmulq_f32(v49, (float32x4_t)v41);
  v18.i64[0] = 0xC0000000C0000000;
  v18.i64[1] = 0xC0000000C0000000;
  float32x4_t v50 = vmulq_f32(vmulq_f32(vmulq_f32((float32x4_t)v43, v18), vaddq_f32(v54, v17)), v16);
  float32x4_t v19 = vsubq_f32(v54, v17);
  float32x4_t v42 = vmulq_f32(vaddq_f32(v19, v19), v16);
  float32x4_t v44 = vmulq_f32(vmulq_f32((float32x4_t)v43, vsubq_f32(v39, v14)), v16);
  float32x4_t v40 = vmulq_f32(vsubq_f32(v15, v14), v16);
  float32x4_t v33 = vsubq_f32(*(float32x4_t *)(a1 + 16), v51);
  simd_float4 v38 = _simd_exp10_f4((simd_float4)vmulq_f32(v33, v37));
  float32x4_t v52 = vaddq_f32((float32x4_t)v38, v59);
  float32x4_t v55 = vaddq_f32((float32x4_t)v38, v35);
  int32x2_t v20 = *a2;
  *(float *)v20.i32 = *(double *)a2->i32;
  *(float *)v20.i32 = 3141.6 / *(float *)v20.i32;
  simd_float4 v30 = (simd_float4)vdupq_lane_s32(v20, 0);
  simd_float4 v36 = _simd_cos_f4(v30);
  float32x4_t v29 = vmulq_f32(v55, (float32x4_t)v36);
  float32x4_t v31 = vsubq_f32(v52, v29);
  float32x4_t v58 = vmlaq_f32(v57, v34, vsqrtq_f32(vaddq_f32((float32x4_t)_simd_exp10_f4((simd_float4)vmulq_f32(v33, v53)), v59)));
  float32x4_t v21 = vmulq_f32((float32x4_t)_simd_sin_f4(v30), v58);
  float32x4_t v22 = vaddq_f32(v52, v29);
  float32x4_t v23 = vdivq_f32(v59, vaddq_f32(v22, v21));
  float32x4_t v24 = vmulq_f32(v52, (float32x4_t)v36);
  long long v25 = *(_OWORD *)(a1 + 64);
  long long v26 = *(_OWORD *)(a1 + 80);
  v27.i64[0] = 0xC0000000C0000000;
  v27.i64[1] = 0xC0000000C0000000;
  *(int32x4_t *)(a1 + 144) = v48;
  *(simd_float4 *)(a1 + 160) = v47;
  *(simd_float4 *)(a1 + 176) = xa;
  *(float32x4_t *)(a1 + 192) = v50;
  *(float32x4_t *)(a1 + 208) = v44;
  *(float32x4_t *)(a1 + 224) = v42;
  *(float32x4_t *)(a1 + 240) = v40;
  *(float32x4_t *)(a1 + 256) = vmulq_f32(vmulq_f32((float32x4_t)v38, vaddq_f32(v31, v21)), v23);
  *(float32x4_t *)(a1 + 272) = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)v38, (float32x4_t)v38), vsubq_f32(v55, v24)), v23);
  *(float32x4_t *)(a1 + 288) = vmulq_f32(vmulq_f32((float32x4_t)v38, vsubq_f32(v31, v21)), v23);
  float32x4_t result = vmulq_f32(vsubq_f32(v22, v21), v23);
  *(float32x4_t *)(a1 + 304) = vmulq_f32(vmulq_f32(vaddq_f32(v55, v24), v27), v23);
  *(float32x4_t *)(a1 + 320) = result;
  *(_OWORD *)(a1 + 336) = v25;
  *(_OWORD *)(a1 + 352) = v26;
  return result;
}

float anonymous namespace'::IRBuilderStereo3BandShelvingSlice::UpdateParameters(uint64_t a1, double *a2, int a3)
{
  *(void *)(a1 + 368 + 8 * a3) = *(void *)(a1 + 96 + 8 * a3);
  int v4 = *(_DWORD *)(a1 + 96 + 4 * a3 + 32);
  *(_DWORD *)(a1 + 368 + 4 * a3 + 32) = v4;
  int v5 = v4 - 1;
  uint64_t v6 = a1 + 4 * a3;
  float v28 = *(float *)(v6 + 32);
  float v34 = __exp10f(v28 * 0.05);
  float v7 = *(float *)(v6 + 48) - v28;
  float v8 = __exp10f(v7 * 0.025);
  float v9 = v8 + -1.0;
  double v27 = *a2;
  float v10 = 31415.9258 / *a2;
  __float2 v11 = __sincosf_stret(v10);
  float v12 = (float)(v8 + -1.0) * v11.__cosval;
  float v13 = (float)(v8 + 1.0) + v12;
  float v14 = v11.__sinval * (float)((float)(sqrtf(__exp10f(v7 * 0.05) + 1.0) * 1.1892) - (float)(v9 * v9));
  float v15 = 1.0 / (float)((float)((float)(v8 + 1.0) - v12) + v14);
  float v32 = (float)((float)(v8 * -2.0) * (float)((float)(v8 + -1.0) + (float)((float)(v8 + 1.0) * v11.__cosval))) * v15;
  float v33 = (float)(v8 * (float)(v13 + v14)) * v15;
  float v30 = (float)((float)(v9 - (float)((float)(v8 + 1.0) * v11.__cosval))
              + (float)(v9 - (float)((float)(v8 + 1.0) * v11.__cosval)))
      * v15;
  float v31 = (float)(v8 * (float)(v13 - v14)) * v15;
  float v29 = (float)((float)((float)(v8 + 1.0) - v12) - v14) * v15;
  float v16 = *(float *)(v6 + 16) - v28;
  float v17 = __exp10f(v16 * 0.025);
  float v18 = 3141.59277 / v27;
  __float2 v19 = __sincosf_stret(v18);
  float v20 = v19.__cosval * (float)(v17 + -1.0);
  float v21 = (float)(v17 + 1.0) - v20;
  float v22 = v19.__sinval * (float)((float)(sqrtf(__exp10f(v16 * 0.05) + 1.0) * 1.1892) - (float)(v9 * v9));
  float v23 = 1.0 / (float)((float)((float)(v17 + 1.0) + v20) + v22);
  int v24 = *(_DWORD *)(v6 + 64);
  int v25 = *(_DWORD *)(v6 + 80);
  *(_DWORD *)(v6 + 144) = v5;
  *(float *)(v6 + 160) = v34;
  *(float *)(v6 + 176) = v33;
  *(float *)(v6 + 192) = v32;
  *(float *)(v6 + 208) = v31;
  *(float *)(v6 + 224) = v30;
  *(float *)(v6 + 240) = v29;
  *(float *)(v6 + 256) = (float)(v17 * (float)(v21 + v22)) * v23;
  *(float *)(v6 + 272) = (float)((float)(v17 + v17)
                               * (float)((float)(v17 + -1.0) - (float)(v19.__cosval * (float)(v17 + 1.0))))
                       * v23;
  *(float *)(v6 + 288) = (float)(v17 * (float)(v21 - v22)) * v23;
  *(float *)(v6 + 304) = (float)((float)((float)(v17 + -1.0) + (float)(v19.__cosval * (float)(v17 + 1.0))) * -2.0) * v23;
  float result = (float)((float)((float)(v17 + 1.0) + v20) - v22) * v23;
  *(float *)(v6 + 320) = result;
  *(_DWORD *)(v6 + 336) = v24;
  *(_DWORD *)(v6 + 352) = v25;
  return result;
}

__n128 anonymous namespace'::IRBuilderStereo3BandShelvingSlice::Run(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int32x4_t v5 = *(int32x4_t *)(a1 + 144);
  float32x4_t v4 = *(float32x4_t *)(a1 + 160);
  float32x4_t v6 = *(float32x4_t *)(a1 + 176);
  float32x4_t v7 = *(float32x4_t *)(a1 + 192);
  float32x4_t v8 = *(float32x4_t *)(a1 + 208);
  float32x4_t v9 = *(float32x4_t *)(a1 + 224);
  float32x4_t v11 = *(float32x4_t *)(a1 + 240);
  float32x4_t v10 = *(float32x4_t *)(a1 + 256);
  float32x4_t v13 = *(float32x4_t *)(a1 + 272);
  float32x4_t v12 = *(float32x4_t *)(a1 + 288);
  float32x4_t v14 = 0uLL;
  float32x4_t v16 = *(float32x4_t *)(a1 + 304);
  float32x4_t v15 = *(float32x4_t *)(a1 + 320);
  HIDWORD(v18) = a4 - 1;
  LODWORD(v18) = a4 - 1;
  int v17 = v18 >> 1;
  int32x4_t v19 = *(int32x4_t *)(a1 + 416);
  int32x4_t v20 = vminq_s32(vmaxq_s32(vminq_s32(v19, v5), (int32x4_t)0), v5);
  float32x4_t v21 = 0uLL;
  switch(v17)
  {
    case 0:
      v21.i32[0] = *(_DWORD *)(*(void *)(a1 + 368) + 4 * v20.i32[0]);
      break;
    case 1:
      v21.i32[0] = *(_DWORD *)(*(void *)(a1 + 368) + 4 * v20.i32[0]);
      v21.i32[1] = *(_DWORD *)(*(void *)(a1 + 376) + 4 * v20.i32[1]);
      break;
    case 3:
      v21.i32[0] = *(_DWORD *)(*(void *)(a1 + 368) + 4 * v20.i32[0]);
      v21.i32[1] = *(_DWORD *)(*(void *)(a1 + 376) + 4 * v20.i32[1]);
      v21.i32[2] = *(_DWORD *)(*(void *)(a1 + 384) + 4 * v20.i32[2]);
      break;
    case 7:
      v21.i32[0] = *(_DWORD *)(*(void *)(a1 + 368) + 4 * v20.i32[0]);
      v21.i32[1] = *(_DWORD *)(*(void *)(a1 + 376) + 4 * v20.i32[1]);
      v21.i32[2] = *(_DWORD *)(*(void *)(a1 + 384) + 4 * v20.i32[2]);
      v21.i32[3] = *(_DWORD *)(*(void *)(a1 + 392) + 4 * v20.i32[3]);
      break;
    default:
      break;
  }
  float32x4_t v22 = vmulq_f32(v4, v21);
  float32x4_t v23 = vnegq_f32(v9);
  float32x4_t v24 = vmlsq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v7, *(float32x4_t *)(a1 + 432)), v22, v6), *(float32x4_t *)(a1 + 448), v8), *(float32x4_t *)(a1 + 464), v9);
  float32x4_t v25 = vnegq_f32(v11);
  float32x4_t v26 = vmlsq_f32(v24, *(float32x4_t *)(a1 + 480), v11);
  v27.i64[0] = 0x100000001;
  v27.i64[1] = 0x100000001;
  int32x4_t v28 = vminq_s32(vmaxq_s32(vminq_s32(vaddq_s32(v19, v27), v5), (int32x4_t)0), v5);
  switch(v17)
  {
    case 0:
      v14.i32[0] = *(_DWORD *)(*(void *)(a1 + 368) + 4 * v28.i32[0]);
      break;
    case 1:
      v14.i32[0] = *(_DWORD *)(*(void *)(a1 + 368) + 4 * v28.i32[0]);
      v14.i32[1] = *(_DWORD *)(*(void *)(a1 + 376) + 4 * v28.i32[1]);
      break;
    case 3:
      v14.i32[0] = *(_DWORD *)(*(void *)(a1 + 368) + 4 * v28.i32[0]);
      v14.i32[1] = *(_DWORD *)(*(void *)(a1 + 376) + 4 * v28.i32[1]);
      v14.i32[2] = *(_DWORD *)(*(void *)(a1 + 384) + 4 * v28.i32[2]);
      break;
    case 7:
      v14.i32[0] = *(_DWORD *)(*(void *)(a1 + 368) + 4 * v28.i32[0]);
      v14.i32[1] = *(_DWORD *)(*(void *)(a1 + 376) + 4 * v28.i32[1]);
      v14.i32[2] = *(_DWORD *)(*(void *)(a1 + 384) + 4 * v28.i32[2]);
      v14.i32[3] = *(_DWORD *)(*(void *)(a1 + 392) + 4 * v28.i32[3]);
      break;
    default:
      break;
  }
  float32x4_t v29 = vmulq_f32(v4, v14);
  float32x4_t v30 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v7, *(float32x4_t *)(a1 + 496)), v29, v6), *(float32x4_t *)(a1 + 512), v8), *(float32x4_t *)(a1 + 528), v23), *(float32x4_t *)(a1 + 544), v25);
  float32x4_t v31 = vmlsq_f32(vmlsq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v13, *(float32x4_t *)(a1 + 560)), v26, v10), *(float32x4_t *)(a1 + 576), v12), *(float32x4_t *)(a1 + 592), v16), *(float32x4_t *)(a1 + 608), v15);
  float32x4_t v32 = vmlaq_f32(vmlaq_f32(vmulq_f32(v13, *(float32x4_t *)(a1 + 624)), v30, v10), *(float32x4_t *)(a1 + 640), v12);
  float32x4_t v33 = *(float32x4_t *)(a1 + 672);
  float32x4_t v34 = vmlsq_f32(v32, *(float32x4_t *)(a1 + 656), v16);
  int8x16_t v35 = vandq_s8((int8x16_t)v31, vorrq_s8((int8x16_t)vcltzq_f32(v31), (int8x16_t)vcgezq_f32(v31)));
  switch(v17)
  {
    case 0:
      goto LABEL_15;
    case 1:
      goto LABEL_14;
    case 3:
      goto LABEL_13;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(a1 + 348)) = v35.i32[3];
LABEL_13:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(a1 + 344)) = v35.i32[2];
LABEL_14:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(a1 + 340)) = v35.i32[1];
LABEL_15:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(a1 + 336)) = v35.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v36 = vmlsq_f32(v34, v33, v15);
  int8x16_t v37 = vandq_s8((int8x16_t)v36, vorrq_s8((int8x16_t)vcltzq_f32(v36), (int8x16_t)vcgezq_f32(v36)));
  switch(v17)
  {
    case 0:
      goto LABEL_20;
    case 1:
      goto LABEL_19;
    case 3:
      goto LABEL_18;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(a1 + 364)) = v37.i32[3];
LABEL_18:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(a1 + 360)) = v37.i32[2];
LABEL_19:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(a1 + 356)) = v37.i32[1];
LABEL_20:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(a1 + 352)) = v37.i32[0];
      break;
    default:
      break;
  }
  v38.i64[0] = 0x200000002;
  v38.i64[1] = 0x200000002;
  int32x4_t v39 = vaddq_s32(v19, v38);
  long long v40 = *(_OWORD *)(a1 + 432);
  *(int32x4_t *)(a1 + 416) = v39;
  *(float32x4_t *)(a1 + 432) = v22;
  long long v41 = *(_OWORD *)(a1 + 464);
  *(_OWORD *)(a1 + 448) = v40;
  *(float32x4_t *)(a1 + 464) = v26;
  long long v42 = *(_OWORD *)(a1 + 496);
  *(_OWORD *)(a1 + 480) = v41;
  *(float32x4_t *)(a1 + 496) = v29;
  long long v43 = *(_OWORD *)(a1 + 528);
  *(_OWORD *)(a1 + 512) = v42;
  *(float32x4_t *)(a1 + 528) = v30;
  long long v44 = *(_OWORD *)(a1 + 560);
  *(_OWORD *)(a1 + 544) = v43;
  *(float32x4_t *)(a1 + 560) = v26;
  long long v45 = *(_OWORD *)(a1 + 592);
  *(_OWORD *)(a1 + 576) = v44;
  *(float32x4_t *)(a1 + 592) = v31;
  long long v46 = *(_OWORD *)(a1 + 624);
  *(_OWORD *)(a1 + 608) = v45;
  *(float32x4_t *)(a1 + 624) = v30;
  __n128 result = *(__n128 *)(a1 + 656);
  *(float32x4_t *)(a1 + 656) = v36;
  *(__n128 *)(a1 + 672) = result;
  *(_OWORD *)(a1 + 640) = v46;
  return result;
}

float anonymous namespace'::IRBuilderStereo3BandShelvingSlice::CopyVoiceState(_anonymous_namespace_::IRBuilderStereo3BandShelvingSlice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  float32x4_t v4 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  int32x4_t v5 = (_DWORD *)((char *)this + 4 * (int)a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  v5[20] = v4[20];
  *((void *)this + (int)a4 + 12) = *((void *)a2 + (int)a3 + 12);
  *((_DWORD *)this + (int)a4 + 32) = *((_DWORD *)a2 + (int)a3 + 32);
  v5[36] = v4[36];
  v5[40] = v4[40];
  v5[44] = v4[44];
  v5[48] = v4[48];
  v5[52] = v4[52];
  v5[56] = v4[56];
  v5[60] = v4[60];
  v5[64] = v4[64];
  v5[68] = v4[68];
  v5[72] = v4[72];
  v5[76] = v4[76];
  v5[80] = v4[80];
  v5[84] = v4[84];
  LODWORD(v4) = v4[88];
  *((void *)this + (int)a4 + 46) = *((void *)a2 + (int)a3 + 46);
  v5[88] = v4;
  *((_DWORD *)this + (int)a4 + 100) = *((_DWORD *)a2 + (int)a3 + 100);
  if (a3 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  }
  if (a4 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  }
  *((_DWORD *)this + a4 + 104) = *((_DWORD *)a2 + a3 + 104);
  *((_DWORD *)this + a4 + 108) = *((_DWORD *)a2 + a3 + 108);
  uint64_t v6 = 4 * a3 + 16;
  uint64_t v7 = 4 * a4 + 16;
  *(_DWORD *)((char *)this + v7 + 432) = *(_DWORD *)((char *)a2 + v6 + 432);
  *((_DWORD *)this + a4 + 116) = *((_DWORD *)a2 + a3 + 116);
  *(_DWORD *)((char *)this + v7 + 464) = *(_DWORD *)((char *)a2 + v6 + 464);
  *((_DWORD *)this + a4 + 124) = *((_DWORD *)a2 + a3 + 124);
  *(_DWORD *)((char *)this + v7 + 496) = *(_DWORD *)((char *)a2 + v6 + 496);
  *((_DWORD *)this + a4 + 132) = *((_DWORD *)a2 + a3 + 132);
  *(_DWORD *)((char *)this + v7 + 528) = *(_DWORD *)((char *)a2 + v6 + 528);
  *((_DWORD *)this + a4 + 140) = *((_DWORD *)a2 + a3 + 140);
  *(_DWORD *)((char *)this + v7 + 560) = *(_DWORD *)((char *)a2 + v6 + 560);
  *((_DWORD *)this + a4 + 148) = *((_DWORD *)a2 + a3 + 148);
  *(_DWORD *)((char *)this + v7 + 592) = *(_DWORD *)((char *)a2 + v6 + 592);
  *((_DWORD *)this + a4 + 156) = *((_DWORD *)a2 + a3 + 156);
  *(_DWORD *)((char *)this + v7 + 624) = *(_DWORD *)((char *)a2 + v6 + 624);
  *((_DWORD *)this + a4 + 164) = *((_DWORD *)a2 + a3 + 164);
  float result = *(float *)((char *)a2 + v6 + 656);
  *(float *)((char *)this + v7 + 656) = result;
  *((void *)this + (int)a4 + 86) = *((void *)a2 + (int)a3 + 86);
  return result;
}

uint64_t anonymous namespace'::IRBuilderStereo3BandShelvingSlice::GetOutput(_anonymous_namespace_::IRBuilderStereo3BandShelvingSlice *this, int a2, int a3)
{
  if (a2 == 1)
  {
    uint64_t v3 = (char *)this + 4 * a3 + 80;
    return (unint64_t)*(unsigned int *)v3 << 32;
  }
  if (!a2)
  {
    uint64_t v3 = (char *)this + 4 * a3 + 64;
    return (unint64_t)*(unsigned int *)v3 << 32;
  }
  return 0xFFFFFFFF00000008;
}

uint64_t anonymous namespace'::IRBuilderStereo3BandShelvingSlice::SetOutput(_anonymous_namespace_::IRBuilderStereo3BandShelvingSlice *this, int a2, int a3, int a4)
{
  if (a2 == 1)
  {
    float32x4_t v4 = (char *)this + 4 * a3 + 80;
    goto LABEL_5;
  }
  if (!a2)
  {
    float32x4_t v4 = (char *)this + 4 * a3 + 64;
LABEL_5:
    uint64_t result = 0;
    *(_DWORD *)float32x4_t v4 = a4;
    return result;
  }
  return 8;
}

uint64_t anonymous namespace'::IRBuilderStereo3BandShelvingSlice::GetBuffer@<X0>(uint64_t this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    uint64_t v4 = 0;
    int v5 = -1;
    int v6 = 10;
  }
  else
  {
    int v6 = 0;
    uint64_t v4 = *(void *)(this + 96 + 8 * a3);
    int v5 = *(_DWORD *)(this + 96 + 4 * a3 + 32);
  }
  *(_DWORD *)a4 = v6;
  *(void *)(a4 + 8) = v4;
  *(_DWORD *)(a4 + 16) = v5;
  return this;
}

uint64_t anonymous namespace'::IRBuilderStereo3BandShelvingSlice::SetBuffer(_anonymous_namespace_::IRBuilderStereo3BandShelvingSlice *this, int a2, int a3, void *a4, int a5)
{
  if (a2) {
    return 10;
  }
  uint64_t result = 0;
  this = (_anonymous_namespace_::IRBuilderStereo3BandShelvingSlice *)((char *)this + 96);
  *((void *)this + a3) = a4;
  *((_DWORD *)this + a3 + 8) = a5;
  return result;
}

void std::__function::__func<Phase::DspLayer::IRBuilderStereo3BandShelving::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::IRBuilderStereo3BandShelving::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::IRBuilderStereo3BandShelving::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::IRBuilderStereo3BandShelving::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D477E08;
  return result;
}

void std::__function::__func<Phase::DspLayer::IRBuilderStereo3BandShelving::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::IRBuilderStereo3BandShelving::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D477E08;
}

void std::__function::__func<Phase::DspLayer::IRBuilderStereo3BandShelving::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::IRBuilderStereo3BandShelving::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_221F8DA6C(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

uint64_t Phase::Job::Job(uint64_t a1, uint64_t a2, long long *a3)
{
  *(void *)a1 = &unk_26D477E50;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 32) = a2;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = a1 + 48;
  *(void *)(a1 + 56) = a1 + 48;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 88) = 0;
  MEMORY[0x223C93600](a1 + 96);
  *(unsigned char *)(a1 + 383) = 0;
  *(unsigned char *)(a1 + 511) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0x1FFFFFFFFLL;
  *(void *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  return a1;
}

void sub_221F8DB68(_Unwind_Exception *a1)
{
  std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::destroy(v4, *(void **)(v1 + 80));
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v3);
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void Phase::Job::~Job(Phase::Job *this)
{
  *(void *)this = &unk_26D477E50;
  std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 67, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 68);
  if (*((unsigned char *)this + 511)) {
    (**((void (***)(void))this + 48))();
  }
  if (*((unsigned char *)this + 383)) {
    (**((void (***)(void))this + 32))();
  }
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 96));
  std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)this + 6);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  Phase::Job::~Job(this);

  JUMPOUT(0x223C93890);
}

void Phase::Job::Run(Phase::Job *this)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(*((void *)this + 4) + 32));
  uint64_t v2 = *((void *)this + 4);
  unint64_t v3 = *(void *)(v2 + 24);
  int32x4_t v19 = 0;
  uint64_t v20 = 0;
  std::vector<unsigned int> __p = 0;
  if (v3)
  {
    std::vector<void *>::__vallocate[abi:ne180100](&__p, v3);
    uint64_t v4 = (char *)v19;
    bzero(v19, 8 * v3);
    int32x4_t v19 = &v4[8 * v3];
    unint64_t v3 = (unint64_t)__p;
  }
  uint64_t v5 = v2 + 8;
  uint64_t v6 = *(void *)(v2 + 16);
  if (v6 == v2 + 8)
  {
    uint64_t v7 = v2 + 8;
  }
  else
  {
    do
    {
      (*(void (**)(void, Phase::Job *, unint64_t))(**(void **)(v6 + 16) + 16))(*(void *)(v6 + 16), this, v3);
      v3 += 8;
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6 != v5);
    unint64_t v3 = (unint64_t)__p;
    uint64_t v7 = *(void *)(v2 + 16);
  }
  if (*((unsigned char *)this + 383))
  {
    if (v7 == v5) {
      goto LABEL_11;
    }
    do
    {
      (*(void (**)(void, Phase::Job *, unint64_t))(**(void **)(v7 + 16) + 24))(*(void *)(v7 + 16), this, v3);
      v3 += 8;
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7 != v5);
    if (*((unsigned char *)this + 383)) {
LABEL_11:
    }
      (*(void (**)(void))(*((void *)this + 32) + 16))();
    unint64_t v3 = (unint64_t)__p;
    uint64_t v8 = *(void *)(v2 + 16);
    if (v8 == v5)
    {
      uint64_t v7 = v2 + 8;
    }
    else
    {
      do
      {
        (*(void (**)(void, Phase::Job *, unint64_t))(**(void **)(v8 + 16) + 32))(*(void *)(v8 + 16), this, v3);
        v3 += 8;
        uint64_t v8 = *(void *)(v8 + 8);
      }
      while (v8 != v5);
      unint64_t v3 = (unint64_t)__p;
      uint64_t v7 = *(void *)(v2 + 16);
    }
  }
  if (!*((unsigned char *)this + 511)) {
    goto LABEL_32;
  }
  while (v7 != v5)
  {
    (*(void (**)(void, Phase::Job *, unint64_t))(**(void **)(v7 + 16) + 40))(*(void *)(v7 + 16), this, v3);
    v3 += 8;
    uint64_t v7 = *(void *)(v7 + 8);
  }
  uint64_t v9 = *((void *)this + 64);
  if (v9)
  {
    uint64_t v10 = **(void **)(v9 + 8);
    unint64_t v22 = 0;
    BOOL v21 = 1;
    float32x4_t v11 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v10, 16, &v22, &v21);
    if (!v11)
    {
      uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
      Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
      float32x4_t v16 = **(NSObject ***)(v10 + 48);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        float32x4_t v24 = "CommandQueue.hpp";
        __int16 v25 = 1024;
        int v26 = 100;
        _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffe"
          "r is full, unable to grow.\"",
          buf,
          0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    }
    if (v21)
    {
      float32x4_t v12 = **(NSObject ***)(v10 + 48);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136315906;
        float32x4_t v24 = "CommandQueue.hpp";
        __int16 v25 = 1024;
        int v26 = 89;
        __int16 v27 = 2048;
        unint64_t v28 = v22;
        __int16 v29 = 2048;
        uint64_t v30 = 16;
        _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
      }
    }
    *float32x4_t v11 = &unk_26D477E70;
    v11[1] = this;
    Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v10, 16);
    atomic_store(0, (unsigned __int8 *)(v10 + 40));
  }
  else if (*((unsigned char *)this + 511))
  {
    (*(void (**)(void))(*((void *)this + 48) + 16))();
  }
  uint64_t v13 = *(void *)(v2 + 16);
  if (v13 != v5)
  {
    float32x4_t v14 = (char *)__p;
    do
    {
      (*(void (**)(void, Phase::Job *, char *))(**(void **)(v13 + 16) + 48))(*(void *)(v13 + 16), this, v14);
      v14 += 8;
      uint64_t v13 = *(void *)(v13 + 8);
    }
    while (v13 != v5);
    unint64_t v3 = (unint64_t)__p;
    uint64_t v7 = *(void *)(v2 + 16);
LABEL_32:
    while (v7 != v5)
    {
      (*(void (**)(void, Phase::Job *, unint64_t))(**(void **)(v7 + 16) + 56))(*(void *)(v7 + 16), this, v3);
      v3 += 8;
      uint64_t v7 = *(void *)(v7 + 8);
    }
  }
  std::__shared_mutex_base::unlock_shared((std::__shared_mutex_base *)(*((void *)this + 4) + 32));
  if (__p)
  {
    int32x4_t v19 = __p;
    operator delete(__p);
  }
}

void sub_221F8E16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (a2)
  {
    __cxa_free_exception(v12);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v11);
    __cxa_end_catch();
    JUMPOUT(0x221F8DFD0);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::destroy(a1, *a2);
    std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::destroy(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[5];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete(a2);
  }
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *uint64_t result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

void Phase::LambdaFunction<Phase::Job::Run(void)::$_0,void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<Phase::Job::Run(void)::$_0,void>::operator()(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if (*(unsigned char *)(v1 + 511)) {
    return (*(uint64_t (**)(void))(*(void *)(v1 + 384) + 16))();
  }
  return result;
}

_OWORD *Phase::JobManager::TreeLock::TreeLock(_OWORD *a1, Phase::JobManager *a2, uint64_t *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  uint64_t v7 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::GetRootJob(a2, (uint64_t)&v6, a1);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::recursive_mutex::lock((std::recursive_mutex *)(*(void *)a1 + 96));
  return a1;
}

__n128 Phase::JobManager::GetRootJob@<Q0>(Phase::JobManager *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *(Phase::Job **)a2;
  Dependents = (Phase::JobManager *)Phase::JobManager::GetDependents(a1, *(Phase::Job **)a2);
  if (!*((void *)Dependents + 2)) {
    goto LABEL_11;
  }
  uint64_t v8 = Phase::JobManager::GetDependents(Dependents, v6);
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(std::__shared_weak_count **)(*(void *)v8 + 40);
  if (!v10) {
    goto LABEL_11;
  }
  uint64_t v11 = std::__shared_weak_count::lock(v10);
  if (!v11) {
    goto LABEL_11;
  }
  float32x4_t v12 = v11;
  if (!*(void *)(v9 + 32))
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_11:
    __n128 result = *(__n128 *)a2;
    *a3 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    return result;
  }
  uint64_t v14 = *(void *)(v9 + 32);
  float32x4_t v15 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  Phase::JobManager::GetRootJob(a1, &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  return result;
}

void sub_221F8E5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void Phase::JobManager::TreeLock::~TreeLock(std::__shared_weak_count **this)
{
  std::recursive_mutex::unlock((std::recursive_mutex *)&(*this)[4]);
  uint64_t v2 = this[1];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

Phase::JobManager *Phase::JobManager::JobManager(Phase::JobManager *this)
{
  *(void *)this = &unk_26D477E98;
  *((void *)this + 1) = (char *)this + 8;
  *((void *)this + 2) = (char *)this + 8;
  *((void *)this + 3) = 0;
  uint64_t v2 = (Phase::Logger *)std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)((char *)this + 32));
  *((void *)this + 26) = 0;
  if (*(unsigned char *)(Phase::Logger::GetInstance(v2) + 472)) {
    operator new();
  }
  return this;
}

void sub_221F8E6BC(_Unwind_Exception *a1)
{
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::JobManager::AddObserver(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v7 = a1 + 32;
  char v8 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)(a1 + 32));
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v5 = v3[1];
  v4[1] = ++v3;
  v4[2] = a2;
  *uint64_t v4 = v5;
  *(void *)(v5 + 8) = v4;
  *uint64_t v3 = v4;
  ++v3[2];
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v7);
}

void sub_221F8E750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void Phase::JobManager::~JobManager(Phase::JobManager *this)
{
  *(void *)this = &unk_26D477E98;
  uint64_t v2 = *((void *)this + 26);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)this + 3);
  std::condition_variable::~condition_variable((std::condition_variable *)this + 2);
  std::mutex::~mutex((std::mutex *)((char *)this + 32));
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear((void *)this + 1);
}

void Phase::JobManager::Create(Phase::Logger *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (a1 != 1)
  {
    if (!a1) {
      operator new();
    }
    uint64_t v1 = **(id **)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315394;
      uint64_t v4 = "JobManager.mm";
      __int16 v5 = 1024;
      int v6 = 93;
      _os_log_impl(&dword_221E5E000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Invalid Backend to create JobManager instance.\"", (uint8_t *)&v3, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid Backend to create JobManager instance.");
  }
  operator new();
}

void sub_221F8E9BC(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::JobManager::DestroyJob(Phase::JobManager *this, Phase::Job *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*((void *)a2 + 11))
  {
    uint64_t v2 = *(void *)(*((void *)a2 + 9) + 40);
    if (v2)
    {
      if (*(void *)(v2 + 8) != -1)
      {
        __int16 v5 = **(id **)(Phase::Logger::GetInstance(this) + 464);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        {
          int v7 = 136315394;
          char v8 = "JobManager.mm";
          __int16 v9 = 1024;
          int v10 = 123;
          _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pInJob->mDependentJobs.begin()->expired() is false.", (uint8_t *)&v7, 0x12u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: pInJob->mDependentJobs.begin()->expired() is false.");
      }
    }
  }
  int v3 = *(uint64_t (**)(Phase::Job *))(*(void *)a2 + 8);

  return v3(a2);
}

void sub_221F8EB58(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::JobManager::GetDependencies(Phase::JobManager *this, Phase::Job *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    int v3 = **(id **)(Phase::Logger::GetInstance(this) + 464);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int v6 = "JobManager.mm";
      __int16 v7 = 1024;
      int v8 = 131;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInJob is false.", (uint8_t *)&v5, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: nullptr != pInJob is false.");
  }
  return (uint64_t)a2 + 48;
}

void sub_221F8EC74(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::JobManager::GetDependents(Phase::JobManager *this, Phase::Job *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    int v3 = **(id **)(Phase::Logger::GetInstance(this) + 464);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int v6 = "JobManager.mm";
      __int16 v7 = 1024;
      int v8 = 145;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInJob is false.", (uint8_t *)&v5, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: nullptr != pInJob is false.");
  }
  return (uint64_t)a2 + 72;
}

void sub_221F8ED90(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::JobManager::GetExecutionState(Phase::JobManager *this, Phase::Job *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    int v3 = **(id **)(Phase::Logger::GetInstance(this) + 464);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      int v6 = "JobManager.mm";
      __int16 v7 = 1024;
      int v8 = 181;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInJob is false.", (uint8_t *)&v5, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: nullptr != pInJob is false.");
  }
  return (uint64_t)a2 + 532;
}

void sub_221F8EEAC(_Unwind_Exception *exception_object)
{
}

unint64_t Phase::JobManager::RunJob(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = Phase::JobManager::RunJobAsync(a1, v12);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (HIDWORD(v5) || !v5)
  {
    __int16 v7 = (std::__shared_weak_count *)a2[1];
    uint64_t v10 = *a2;
    uint64_t v11 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *, double))(*(void *)a1 + 96))(a1, &v10, 0.0);
    LODWORD(v5) = v8;
    unint64_t v6 = HIDWORD(v8);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  return v5 | ((unint64_t)v6 << 32);
}

void sub_221F8EFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t Phase::JobManager::RunJobAsync(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  uint64_t v14 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 144))(a1, &v13);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (HIDWORD(v5)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = v5 == 0;
  }
  if (v6)
  {
    __int16 v7 = (std::__shared_weak_count *)a2[1];
    uint64_t v11 = *a2;
    float32x4_t v12 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t *, double))(*(void *)a1 + 120))(a1, &v11, 0.0);
    LODWORD(v5) = v8;
    unint64_t v9 = HIDWORD(v8);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  return v5 | ((unint64_t)v9 << 32);
}

void sub_221F8F0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void Phase::JobManager::ScheduleJobWithPeriod(uint64_t a1, uint64_t *a2, uint64_t a3, double a4)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  HasManualJobs = (Phase::Logger *)Phase::JobManager::HasManualJobs(*a2);
  if (HasManualJobs)
  {
    uint64_t v9 = *(void *)(a3 + 24);
    uint64_t v10 = **(id **)(Phase::Logger::GetInstance(HasManualJobs) + 464);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!v9)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "JobManager.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 262;
        _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"\\\"Job graph containing at least one manual job can't be scheduled.\\\"\"", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "\"Job graph containing at least one manual job can't be scheduled.\"");
    }
    if (v11)
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 262;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d \"Job graph containing at least one manual job can't be scheduled.\"", buf, 0x12u);
    }
    uint64_t v12 = a2[1];
    *(void *)buf = *a2;
    *(void *)&uint8_t buf[8] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    std::list<std::shared_ptr<Phase::Job>>::list(v39, buf, 1);
    std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(a3, 0);
    uint64_t v13 = v39;
  }
  else if (a4 <= 0.0)
  {
    uint64_t v20 = *(void *)(a3 + 24);
    BOOL v21 = **(id **)(Phase::Logger::GetInstance(HasManualJobs) + 464);
    BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "JobManager.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 268;
        __int16 v42 = 2048;
        double v43 = a4;
        _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"\\\"Job graph job can't be scheduled with invalid period %f\\\"\"", buf, 0x1Cu);
      }
      __int16 v29 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](v29, "\"Job graph job can't be scheduled with invalid period %f\"");
    }
    if (v22)
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "JobManager.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 268;
      __int16 v42 = 2048;
      double v43 = a4;
      _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d \"Job graph job can't be scheduled with invalid period %f\"", buf, 0x1Cu);
    }
    uint64_t v23 = a2[1];
    *(void *)buf = *a2;
    *(void *)&uint8_t buf[8] = v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    }
    std::list<std::shared_ptr<Phase::Job>>::list(v38, buf, 1);
    std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(a3, 0);
    uint64_t v13 = v38;
  }
  else
  {
    uint64_t v14 = (std::__shared_weak_count *)a2[1];
    uint64_t v36 = *a2;
    int8x16_t v37 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 144))(a1, &v36);
    float32x4_t v16 = (Phase::Logger *)v37;
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    if (HIDWORD(v15)) {
      BOOL v17 = 1;
    }
    else {
      BOOL v17 = v15 == 0;
    }
    if (v17)
    {
      uint64_t v18 = a2[1];
      *(void *)buf = *a2;
      *(void *)&uint8_t buf[8] = v18;
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      }
      std::list<std::shared_ptr<Phase::Job>>::list(v35, buf, 1);
      float32x4_t v32 = (double *)&v32;
      float32x4_t v33 = (void **)&v32;
      uint64_t v34 = 0;
      int32x4_t v19 = (double *)operator new(0x18uLL);
      v19[2] = a4;
      *(void *)int32x4_t v19 = &v32;
      *((void *)v19 + 1) = &v32;
      float32x4_t v32 = v19;
      float32x4_t v33 = (void **)v19;
      uint64_t v34 = 1;
      std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__value_func[abi:ne180100]((uint64_t)v40, a3);
      (*(void (**)(uint64_t, uint64_t *, double **, void *))(*(void *)a1 + 128))(a1, v35, &v32, v40);
      std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100](v40);
      std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(&v32);
      uint64_t v13 = v35;
    }
    else
    {
      BOOL v24 = *(void *)(a3 + 24) == 0;
      __int16 v25 = **(id **)(Phase::Logger::GetInstance(v16) + 464);
      BOOL v26 = os_log_type_enabled(v25, OS_LOG_TYPE_ERROR);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "JobManager.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 280;
          __int16 v42 = 1024;
          LODWORD(v43) = v15;
          _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"\\\"Job graph prepare error %i\\\"\"", buf, 0x18u);
        }
        uint64_t v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](v30, "\"Job graph prepare error %i\"");
      }
      if (v26)
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "JobManager.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 280;
        __int16 v42 = 1024;
        LODWORD(v43) = v15;
        _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d \"Job graph prepare error %i\"", buf, 0x18u);
      }
      uint64_t v27 = a2[1];
      *(void *)buf = *a2;
      *(void *)&uint8_t buf[8] = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      std::list<std::shared_ptr<Phase::Job>>::list(v31, buf, 1);
      std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(a3, 0);
      uint64_t v13 = v31;
    }
  }
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v13);
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
}

void sub_221F8F6A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  __cxa_free_exception(v27);
  _Unwind_Resume(a1);
}

uint64_t Phase::JobManager::HasManualJobs(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 528) == 1) {
    return 1;
  }
  uint64_t v2 = (void *)(a1 + 48);
  int v3 = (void *)(a1 + 48);
  do
  {
    int v3 = (void *)v3[1];
    BOOL v1 = v3 != v2;
    if (v3 == v2) {
      break;
    }
    uint64_t v4 = v3[2];
    unint64_t v5 = (std::__shared_weak_count *)v3[3];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int HasManualJobs = Phase::JobManager::HasManualJobs(v4);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  while (!HasManualJobs);
  return v1;
}

void sub_221F8F7D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

void Phase::JobManager::ScheduleJobsWithPeriods(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16) != *(void *)(a3 + 16))
  {
    uint64_t v15 = *(void *)(a4 + 24);
    float32x4_t v16 = **(id **)(Phase::Logger::GetInstance(a1) + 464);
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (!v15)
    {
      if (v17)
      {
        uint64_t v23 = *(void *)(a2 + 16);
        uint64_t v24 = *(void *)(a3 + 16);
        *(_DWORD *)buf = 136315906;
        float32x4_t v33 = "JobManager.mm";
        __int16 v34 = 1024;
        int v35 = 303;
        __int16 v36 = 2048;
        uint64_t v37 = v23;
        __int16 v38 = 2048;
        uint64_t v39 = v24;
        _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"\\\"Argument list size mismatch %lu jobs / %lu periods\\\"\"", buf, 0x26u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "\"Argument list size mismatch %lu jobs / %lu periods\"");
    }
    if (v17)
    {
      uint64_t v18 = *(void *)(a2 + 16);
      uint64_t v19 = *(void *)(a3 + 16);
      *(_DWORD *)buf = 136315906;
      float32x4_t v33 = "JobManager.mm";
      __int16 v34 = 1024;
      int v35 = 303;
      __int16 v36 = 2048;
      uint64_t v37 = v18;
      __int16 v38 = 2048;
      uint64_t v39 = v19;
      _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d \"Argument list size mismatch %lu jobs / %lu periods\"", buf, 0x26u);
    }
    std::list<std::shared_ptr<Phase::Job>>::list(v30, a2);
    std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(a4, 0);
    uint64_t v14 = v30;
    goto LABEL_21;
  }
  unint64_t v8 = *(void **)(a2 + 8);
  if (v8 == (void *)a2)
  {
LABEL_16:
    std::list<std::shared_ptr<Phase::Job>>::list(v27, a2);
    std::list<double>::list(v26, a3);
    std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__value_func[abi:ne180100]((uint64_t)v31, a4);
    (*(void (**)(Phase::Logger *, uint64_t *, void *, void *))(*(void *)a1 + 128))(a1, v27, v26, v31);
    std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100](v31);
    std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear(v26);
    uint64_t v14 = v27;
LABEL_21:
    std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v14);
    return;
  }
  uint64_t v9 = a3;
  do
  {
    uint64_t v9 = *(void *)(v9 + 8);
    int HasManualJobs = (Phase::Logger *)Phase::JobManager::HasManualJobs(v8[2]);
    if (HasManualJobs)
    {
      uint64_t v20 = **(id **)(Phase::Logger::GetInstance(HasManualJobs) + 464);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        float32x4_t v33 = "JobManager.mm";
        __int16 v34 = 1024;
        int v35 = 316;
        _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: not HasManualJobs(jobIt->get()) is false.", buf, 0x12u);
      }
      BOOL v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v21, "PRECONDITION: not HasManualJobs(jobIt->get()) is false.");
LABEL_29:
      v21->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    }
    if (*(double *)(v9 + 16) <= 0.0)
    {
      BOOL v22 = **(id **)(Phase::Logger::GetInstance(HasManualJobs) + 464);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        float32x4_t v33 = "JobManager.mm";
        __int16 v34 = 1024;
        int v35 = 319;
        _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: *periodIt > 0. is false.", buf, 0x12u);
      }
      BOOL v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v21, "PRECONDITION: *periodIt > 0. is false.");
      goto LABEL_29;
    }
    BOOL v11 = (std::__shared_weak_count *)v8[3];
    uint64_t v28 = v8[2];
    __int16 v29 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v12 = (*(uint64_t (**)(Phase::Logger *, uint64_t *))(*(void *)a1 + 144))(a1, &v28);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    unint64_t v8 = (void *)v8[1];
  }
  while (v8 != (void *)a2);
  if (HIDWORD(v12)) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v12 == 0;
  }
  if (v13) {
    goto LABEL_16;
  }
}

void sub_221F8FC88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221F8FC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
}

void sub_221F8FCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  __cxa_free_exception(v21);
  if (a2 == 1)
  {
    BOOL v26 = (Phase::Logger *)__cxa_begin_catch(a1);
    uint64_t v27 = v26;
    if (*(void *)(v19 + 24))
    {
      uint64_t v28 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v26)
                                                                                          + 464)));
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = (*(uint64_t (**)(Phase::Logger *))(*(void *)v27 + 16))(v27);
        *(_DWORD *)(v23 - 128) = 136315650;
        *(void *)(v22 + 4) = "JobManager.mm";
        *(_WORD *)(v23 - 116) = 1024;
        *(_DWORD *)(v22 + 14) = 333;
        *(_WORD *)(v23 - 110) = 2080;
        *(void *)(v22 + 20) = v29;
        _os_log_impl(&dword_221E5E000, v28, OS_LOG_TYPE_ERROR, "%25s:%-5d \"Job graph prepare error %s\"", (uint8_t *)(v23 - 128), 0x1Cu);
      }

      std::list<std::shared_ptr<Phase::Job>>::list(&a15, v20);
      std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(v19, 0);
      std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&a15);
      __cxa_end_catch();
      JUMPOUT(0x221F8FA58);
    }
    uint64_t v30 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v26)
                                                                                        + 464)));
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = (*(uint64_t (**)(Phase::Logger *))(*(void *)v27 + 16))(v27);
      *(_DWORD *)(v23 - 128) = 136315650;
      *(void *)(v22 + 4) = "JobManager.mm";
      *(_WORD *)(v23 - 116) = 1024;
      *(_DWORD *)(v22 + 14) = 333;
      *(_WORD *)(v23 - 110) = 2080;
      *(void *)(v22 + 20) = v31;
      _os_log_impl(&dword_221E5E000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"\\\"Job graph prepare error %s\\\"\"", (uint8_t *)(v23 - 128), 0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "\"Job graph prepare error %s\"");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  _Unwind_Resume(a1);
}

void sub_221F8FF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_221F8FF44(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void Phase::JobManager::StopScheduledJob(Phase::Logger *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  BOOL v1 = **(id **)(Phase::Logger::GetInstance(a1) + 464);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315394;
    char v4 = "JobManager.mm";
    __int16 v5 = 1024;
    int v6 = 346;
    _os_log_impl(&dword_221E5E000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Attempting to stop a job that was not scheduled!\"", (uint8_t *)&v3, 0x12u);
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempting to stop a job that was not scheduled!");
}

void sub_221F9002C(_Unwind_Exception *exception_object)
{
}

void Phase::JobManager::StopScheduledJobs(Phase::Logger *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  BOOL v1 = **(id **)(Phase::Logger::GetInstance(a1) + 464);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315394;
    char v4 = "JobManager.mm";
    __int16 v5 = 1024;
    int v6 = 351;
    _os_log_impl(&dword_221E5E000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Attempting to stop a list of jobs that were not scheduled!\"", (uint8_t *)&v3, 0x12u);
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempting to stop a list of jobs that were not scheduled!");
}

void sub_221F90114(_Unwind_Exception *exception_object)
{
}

void Phase::JobManager::StopScheduledJobAsync(Phase::Logger *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  BOOL v1 = **(id **)(Phase::Logger::GetInstance(a1) + 464);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315394;
    char v4 = "JobManager.mm";
    __int16 v5 = 1024;
    int v6 = 356;
    _os_log_impl(&dword_221E5E000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Attempting to stop a job that was not scheduled!\"", (uint8_t *)&v3, 0x12u);
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempting to stop a job that was not scheduled!");
}

void sub_221F901FC(_Unwind_Exception *exception_object)
{
}

void Phase::JobManager::StopScheduledJobsAsync(Phase::Logger *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  BOOL v1 = **(id **)(Phase::Logger::GetInstance(a1) + 464);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v3 = 136315394;
    char v4 = "JobManager.mm";
    __int16 v5 = 1024;
    int v6 = 361;
    _os_log_impl(&dword_221E5E000, v1, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): \"Attempting to stop a list of jobs that were not scheduled!\"", (uint8_t *)&v3, 0x12u);
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempting to stop a list of jobs that were not scheduled!");
}

void sub_221F902E4(_Unwind_Exception *exception_object)
{
}

void Phase::JobObserverSignpost::~JobObserverSignpost(Phase::JobObserverSignpost *this)
{
}

void Phase::JobObserverSignpost::Initialize(Phase::JobObserverSignpost *this, const Phase::Job *a2, void **a3)
{
}

void sub_221F9036C(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

void Phase::JobObserverSignpost::ExecuteBegin(Phase::JobObserverSignpost *this, const Phase::Job *a2, os_signpost_id_t **a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  char v4 = *a3;
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(this);
  if (*((unsigned char *)Instance + 472))
  {
    int v6 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                       + 464)));
    uint64_t v7 = v6;
    os_signpost_id_t v8 = *v4;
    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      uint64_t v9 = (void *)((char *)a2 + 8);
      if (*((char *)a2 + 31) < 0) {
        uint64_t v9 = (void *)*v9;
      }
      int v10 = 136315138;
      BOOL v11 = v9;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v8, "Phase_Job_Run", "%s", (uint8_t *)&v10, 0xCu);
    }
  }
}

void Phase::JobObserverSignpost::ExecuteEnd(Phase::JobObserverSignpost *this, const Phase::Job *a2, os_signpost_id_t **a3)
{
  int v3 = *a3;
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(this);
  if (*((unsigned char *)Instance + 472))
  {
    __int16 v5 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                       + 464)));
    int v6 = v5;
    os_signpost_id_t v7 = *v3;
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      *(_WORD *)os_signpost_id_t v8 = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v6, OS_SIGNPOST_INTERVAL_END, v7, "Phase_Job_Run", (const char *)&unk_222112ABB, v8, 2u);
    }
  }
}

uint64_t Phase::JobObserverSignpost::Finalize(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result = *a3;
  if (*a3) {
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t *std::list<std::shared_ptr<Phase::Job>>::list(uint64_t *a1, void *a2, uint64_t a3)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      std::list<std::shared_ptr<Phase::Job>>::push_back(a1, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_221F905AC(_Unwind_Exception *a1)
{
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void Phase::JobDispatch::~JobDispatch(Phase::JobDispatch *this)
{
  *(void *)this = &unk_26D477F90;
  std::mutex::~mutex((std::mutex *)((char *)this + 632));
  std::unique_ptr<Phase::JobDispatch::Schedule>::reset[abi:ne180100]((uint64_t *)this + 78, 0);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *((void *)this + 73);
  if (v3) {
    dispatch_release(v3);
  }
  char v4 = (const void *)*((void *)this + 72);
  if (v4) {
    _Block_release(v4);
  }

  Phase::Job::~Job(this);
}

{
  uint64_t vars8;

  Phase::JobDispatch::~JobDispatch(this);

  JUMPOUT(0x223C93890);
}

void Phase::JobManagerDispatch::~JobManagerDispatch(Phase::JobManagerDispatch *this)
{
  *(void *)this = &unk_26D477FB0;
  atomic_store(1u, (unsigned __int8 *)this + 220);
  int v2 = atomic_load((unsigned int *)this + 54);
  if (v2 >= 1)
  {
    do
    {
      __ns.__rep_ = 10000000;
      std::this_thread::sleep_for (&__ns);
      int v3 = atomic_load((unsigned int *)this + 54);
    }
    while (v3 > 0);
  }
  std::__tree<std::__value_type<Phase::Job::Priority,applesauce::dispatch::v1::queue>,std::__map_value_compare<Phase::Job::Priority,std::__value_type<Phase::Job::Priority,applesauce::dispatch::v1::queue>,std::less<Phase::Job::Priority>,true>,std::allocator<std::__value_type<Phase::Job::Priority,applesauce::dispatch::v1::queue>>>::destroy(*((void **)this + 29));
  Phase::JobManager::~JobManager(this);
}

{
  uint64_t vars8;

  Phase::JobManagerDispatch::~JobManagerDispatch(this);

  JUMPOUT(0x223C938A0);
}

void Phase::JobManagerDispatch::CreateJob(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  int v6 = operator new(0x300uLL, (std::align_val_t)0x80uLL);
  Phase::Job::Job((uint64_t)v6, a1, a2);
  *int v6 = &unk_26D477F90;
  v6[72] = 0;
  v6[73] = dispatch_group_create();
  v6[74] = 0;
  *((_WORD *)v6 + 300) = 0;
  v6[76] = 0;
  v6[78] = 0;
  v6[77] = 0;
  v6[79] = 850045863;
  *((_OWORD *)v6 + 40) = 0u;
  *((_OWORD *)v6 + 41) = 0u;
  *((_OWORD *)v6 + 42) = 0u;
  v6[86] = 0;
  *a3 = v6;
  operator new();
}

void sub_221F908F0(void *a1)
{
  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 112))(v1, v2);
  __cxa_rethrow();
}

void sub_221F90928(_Unwind_Exception *a1)
{
}

uint64_t Phase::JobManager::DestroyJob(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t Phase::JobManagerDispatch::AddDependency(Phase::Logger *a1, Phase::Job **a2, Phase::Job **a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  if (!*a2)
  {
    uint64_t v18 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 107;
      _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependent is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: nullptr != pInDependent is false.");
  }
  uint64_t v5 = *a3;
  if (!*a3)
  {
    uint64_t v20 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 108;
      _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependency is false.", buf, 0x12u);
    }
    BOOL v21 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v21, "PRECONDITION: nullptr != pInDependency is false.");
  }
  os_signpost_id_t v8 = (std::__shared_weak_count *)a2[1];
  v24[0] = (uint64_t)*a2;
  v24[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::TreeLock::TreeLock(buf, a1, v24);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if ((*((unsigned char *)v3 + 592) & 2) != 0 || (*((unsigned char *)v5 + 592) & 2) != 0)
  {
    uint64_t v13 = 3;
  }
  else
  {
    Dependents = (uint64_t **)Phase::JobManager::GetDependents(a1, v5);
    int v10 = (std::__shared_weak_count *)a2[1];
    uint64_t v22 = *a2;
    uint64_t v23 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__emplace_unique_key_args<std::weak_ptr<Phase::Job>,std::weak_ptr<Phase::Job>>(Dependents, (uint64_t)&v22, (uint64_t)&v22);
    char v12 = v11;
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
    if (v12)
    {
      uint64_t v15 = *a3;
      int v16 = *((_DWORD *)*a3 + 131);
      if (v16 <= *((_DWORD *)*a2 + 131)) {
        int v16 = *((_DWORD *)*a2 + 131);
      }
      *((_DWORD *)v15 + 131) = v16;
      atomic_store(1u, (unsigned __int8 *)v15 + 40);
      Dependencies = (uint64_t *)Phase::JobManager::GetDependencies(a1, v3);
      std::list<std::shared_ptr<Phase::Job>>::push_back(Dependencies, a3);
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = 2;
    }
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(*(void *)buf + 96));
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  return v13;
}

void sub_221F90C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
}

uint64_t Phase::JobManagerDispatch::AddEnqueuedDependency(Phase::Logger *a1, dispatch_group_t **a2, uint64_t *a3, double a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  char v4 = *a2;
  if (!*a2)
  {
    uint64_t v22 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 131;
      _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependent is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: nullptr != pInDependent is false.");
  }
  uint64_t v6 = *a3;
  if (!*a3)
  {
    uint64_t v24 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 132;
      _os_log_impl(&dword_221E5E000, v24, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependency is false.", buf, 0x12u);
    }
    __int16 v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v25, "PRECONDITION: nullptr != pInDependency is false.");
  }
  int v10 = (std::__shared_weak_count *)a2[1];
  v29[0] = (uint64_t)*a2;
  v29[1] = (uint64_t)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::TreeLock::TreeLock(buf, a1, v29);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  unsigned int v11 = atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, (Phase::Job *)v4));
  if (v11 == 3)
  {
    uint64_t v12 = 3;
  }
  else
  {
    Dependents = (uint64_t **)Phase::JobManager::GetDependents(a1, (Phase::Job *)v6);
    uint64_t v14 = (std::__shared_weak_count *)a2[1];
    uint64_t v27 = *a2;
    uint64_t v28 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__emplace_unique_key_args<std::weak_ptr<Phase::Job>,std::weak_ptr<Phase::Job>>(Dependents, (uint64_t)&v27, (uint64_t)&v27);
    char v16 = v15;
    if (v28) {
      std::__shared_weak_count::__release_weak(v28);
    }
    if (v16)
    {
      int v17 = *(_DWORD *)(v6 + 524);
      if (v17 <= *((_DWORD *)*a2 + 131)) {
        int v17 = *((_DWORD *)*a2 + 131);
      }
      *(_DWORD *)(v6 + 524) = v17;
      atomic_store(1u, (unsigned __int8 *)(v6 + 40));
      Dependencies = (uint64_t *)Phase::JobManager::GetDependencies(a1, (Phase::Job *)v4);
      std::list<std::shared_ptr<Phase::Job>>::push_back(Dependencies, a3);
      dispatch_group_enter(v4[73]);
      uint64_t v19 = *a3;
      uint64_t v20 = (std::__shared_weak_count *)a3[1];
      v26[0] = v19;
      v26[1] = (uint64_t)v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Phase::JobManagerDispatch::doRunJob(a1, v26, a4);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = 2;
    }
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(*(void *)buf + 96));
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  return v12;
}

void sub_221F90F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  Phase::JobManager::TreeLock::~TreeLock(&a15);
  _Unwind_Resume(a1);
}

uint64_t Phase::JobManagerDispatch::doRunJob(Phase::JobManager *a1, uint64_t *a2, double a3)
{
  uint64_t v6 = *a2;
  os_signpost_id_t v7 = (std::__shared_weak_count *)a2[1];
  v32[0] = *a2;
  v32[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::TreeLock::TreeLock(&v33, a1, v32);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  os_signpost_id_t v8 = (std::__shared_weak_count *)a2[1];
  v31[0] = *a2;
  v31[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v9 = Phase::JobManagerDispatch::PrepareJobForExecution(a1, (uint64_t)v31);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (!v9) {
    goto LABEL_32;
  }
  if (*(void *)(v6 + 624))
  {
    int v10 = *(void **)(v6 + 576);
    ConcurrentQueue = Phase::JobManagerDispatch::GetConcurrentQueue(a1, *(_DWORD *)(*a2 + 524));
    notification_block[0] = MEMORY[0x263EF8330];
    notification_block[1] = 1174405120;
    notification_block[2] = ___ZN5Phase18JobManagerDispatch8doRunJobENSt3__110shared_ptrINS_3JobEEEd_block_invoke;
    notification_block[3] = &__block_descriptor_tmp_8;
    uint64_t v13 = *a2;
    uint64_t v12 = (std::__shared_weak_count *)a2[1];
    notification_block[4] = a1;
    notification_block[5] = v13;
    uint64_t v30 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    dispatch_block_notify(v10, ConcurrentQueue, notification_block);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
  }
  if (!*(void *)(Phase::JobManager::GetDependencies(a1, (Phase::Job *)v6) + 16))
  {
    uint64_t v20 = *a2;
    if (!*(_DWORD *)(*a2 + 528))
    {
      *(void *)(v6 + 592) |= 4uLL;
      if (a3 == 0.0)
      {
        BOOL v21 = Phase::JobManagerDispatch::GetConcurrentQueue(a1, *(_DWORD *)(v20 + 524));
        dispatch_async(v21, *(dispatch_block_t *)(v6 + 576));
      }
      else
      {
        dispatch_time_t v25 = dispatch_time(0, (uint64_t)(a3 * 1000000000.0));
        uint64_t v26 = Phase::JobManagerDispatch::GetConcurrentQueue(a1, *(_DWORD *)(*a2 + 524));
        dispatch_after(v25, v26, *(dispatch_block_t *)(v6 + 576));
      }
    }
LABEL_32:
    uint64_t v16 = 1;
    goto LABEL_33;
  }
  uint64_t Dependencies = Phase::JobManager::GetDependencies(a1, (Phase::Job *)v6);
  char v15 = *(void **)(Dependencies + 8);
  if (v15 == (void *)Dependencies)
  {
    uint64_t v16 = 1;
  }
  else
  {
    LODWORD(v16) = 1;
    do
    {
      uint64_t v18 = v15[2];
      int v17 = (std::__shared_weak_count *)v15[3];
      if (v17)
      {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        dispatch_group_enter(*(dispatch_group_t *)(v6 + 584));
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        dispatch_group_enter(*(dispatch_group_t *)(v6 + 584));
      }
      v28[0] = v18;
      v28[1] = v17;
      int v19 = Phase::JobManagerDispatch::doRunJob(a1, v28, a3);
      if (v17)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      uint64_t v16 = (v19 + v16);
      char v15 = (void *)v15[1];
    }
    while (v15 != (void *)Dependencies);
  }
  uint64_t v22 = *a2;
  if (!*(_DWORD *)(*a2 + 528))
  {
    *(void *)(v6 + 592) |= 4uLL;
    uint64_t v23 = *(NSObject **)(v6 + 584);
    uint64_t v24 = Phase::JobManagerDispatch::GetConcurrentQueue(a1, *(_DWORD *)(v22 + 524));
    dispatch_group_notify(v23, v24, *(dispatch_block_t *)(v6 + 576));
  }
LABEL_33:
  std::recursive_mutex::unlock((std::recursive_mutex *)(v33 + 96));
  if (*((void *)&v33 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
  }
  return v16;
}

void sub_221F912CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  Phase::JobManager::TreeLock::~TreeLock((std::__shared_weak_count **)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::JobManagerDispatch::InsertDependency(Phase::Logger *a1, uint64_t *a2, uint64_t *a3, Phase::Job **a4)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  if (!*a2)
  {
    uint64_t v37 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 162;
      _os_log_impl(&dword_221E5E000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInInsertor is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: nullptr != pInInsertor is false.");
  }
  uint64_t v6 = *a3;
  if (!*a3)
  {
    uint64_t v39 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 163;
      _os_log_impl(&dword_221E5E000, v39, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependent is false.", buf, 0x12u);
    }
    uint64_t v40 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v40, "PRECONDITION: nullptr != pInDependent is false.");
  }
  os_signpost_id_t v8 = *a4;
  if (!*a4)
  {
    long long v41 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 164;
      _os_log_impl(&dword_221E5E000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependency is false.", buf, 0x12u);
    }
    __int16 v42 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v42, "PRECONDITION: nullptr != pInDependency is false.");
  }
  unsigned int v11 = (std::__shared_weak_count *)a3[1];
  v48[0] = *a3;
  v48[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::TreeLock::TreeLock(buf, a1, v48);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  unsigned int v12 = atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, (Phase::Job *)v6));
  if (v12 == 3 || (unsigned int v13 = atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, v8)), v13 == 3))
  {
    uint64_t v14 = 3;
  }
  else
  {
    uint64_t v16 = *(void *)(Phase::JobManager::GetDependencies(a1, (Phase::Job *)v6) + 8);
    uint64_t Dependencies = Phase::JobManager::GetDependencies(a1, (Phase::Job *)v6);
    if (v16 != Dependencies)
    {
      while (*(Phase::Job **)(v16 + 16) != *a4)
      {
        uint64_t v16 = *(void *)(v16 + 8);
        if (v16 == Dependencies)
        {
          uint64_t v16 = Dependencies;
          break;
        }
      }
    }
    if (v16 == Phase::JobManager::GetDependencies(a1, (Phase::Job *)v6)) {
      goto LABEL_46;
    }
    Dependents = (uint64_t **)Phase::JobManager::GetDependents(a1, v8);
    int v19 = (std::__shared_weak_count *)a2[1];
    uint64_t v46 = *a2;
    simd_float4 v47 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__emplace_unique_key_args<std::weak_ptr<Phase::Job>,std::weak_ptr<Phase::Job>>(Dependents, (uint64_t)&v46, (uint64_t)&v46);
    if (v20)
    {
      uint64_t v22 = (uint64_t **)Phase::JobManager::GetDependents(a1, (Phase::Job *)v4);
      uint64_t v23 = (std::__shared_weak_count *)a3[1];
      uint64_t v44 = *a3;
      long long v45 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__emplace_unique_key_args<std::weak_ptr<Phase::Job>,std::weak_ptr<Phase::Job>>(v22, (uint64_t)&v44, (uint64_t)&v44);
      int v21 = v24 & 1;
      if (v45) {
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    else
    {
      int v21 = 0;
    }
    if (v47) {
      std::__shared_weak_count::__release_weak(v47);
    }
    if (!v21)
    {
LABEL_46:
      uint64_t v14 = 2;
    }
    else
    {
      int v25 = *(_DWORD *)(v4 + 524);
      if (v25 <= *(_DWORD *)(v6 + 524)) {
        int v25 = *(_DWORD *)(v6 + 524);
      }
      *(_DWORD *)(v4 + 524) = v25;
      atomic_store(1u, (unsigned __int8 *)(v4 + 40));
      uint64_t v26 = (uint64_t *)Phase::JobManager::GetDependencies(a1, (Phase::Job *)v6);
      std::list<std::shared_ptr<Phase::Job>>::push_back(v26, a2);
      uint64_t v27 = (uint64_t *)Phase::JobManager::GetDependencies(a1, (Phase::Job *)v4);
      std::list<std::shared_ptr<Phase::Job>>::push_back(v27, a4);
      unsigned int v28 = atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, v8));
      if (v28 == 1)
      {
        dispatch_group_enter(*(dispatch_group_t *)(v6 + 584));
        uint64_t v29 = *a2;
        uint64_t v30 = (std::__shared_weak_count *)a2[1];
        v43[0] = v29;
        v43[1] = v30;
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v31 = Phase::JobManagerDispatch::PrepareJobForExecution(a1, (uint64_t)v43);
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        if (v31)
        {
          uint64_t v32 = Phase::JobManager::GetDependencies(a1, (Phase::Job *)v4);
          for (uint64_t i = *(void *)(v32 + 8); i != v32; uint64_t i = *(void *)(i + 8))
          {
            __int16 v34 = *(std::__shared_weak_count **)(i + 24);
            if (v34)
            {
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
              dispatch_group_enter(*(dispatch_group_t *)(v4 + 584));
              std::__shared_weak_count::__release_shared[abi:ne180100](v34);
            }
            else
            {
              dispatch_group_enter(*(dispatch_group_t *)(v4 + 584));
            }
          }
          if (!*(_DWORD *)(v4 + 528))
          {
            *(void *)(v4 + 592) |= 4uLL;
            int v35 = *(NSObject **)(v4 + 584);
            ConcurrentQueue = Phase::JobManagerDispatch::GetConcurrentQueue(a1, *(_DWORD *)(v4 + 524));
            dispatch_group_notify(v35, ConcurrentQueue, *(dispatch_block_t *)(v4 + 576));
          }
        }
      }
      uint64_t v14 = 0;
    }
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(*(void *)buf + 96));
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  return v14;
}

void sub_221F91848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
}

BOOL Phase::JobManagerDispatch::PrepareJobForExecution(Phase::JobManager *this, uint64_t a2)
{
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x3802000000;
  v15[3] = __Block_byref_object_copy_;
  uint64_t v5 = *(Phase::Job **)a2;
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  void v15[4] = __Block_byref_object_dispose_;
  void v15[5] = v5;
  uint64_t v16 = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v5 = *(Phase::Job **)a2;
  }
  unsigned int v6 = atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(this, v5));
  if (v6 != 3)
  {
    os_signpost_id_t v8 = *(Phase::Job **)a2;
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v5 + 76) = v8;
    BOOL v9 = (std::__shared_weak_count *)*((void *)v5 + 77);
    *((void *)v5 + 77) = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    *((void *)v5 + 74) |= 2uLL;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN5Phase18JobManagerDispatch22PrepareJobForExecutionENSt3__110shared_ptrINS_3JobEEE_block_invoke;
    block[3] = &unk_2645F75C8;
    block[4] = v15;
    block[5] = this;
    dispatch_block_t v10 = dispatch_block_create(DISPATCH_BLOCK_INHERIT_QOS_CLASS|DISPATCH_BLOCK_DETACHED, block);
    unsigned int v11 = v10;
    if (v10) {
      dispatch_block_t v10 = _Block_copy(v10);
    }
    unsigned int v12 = (const void *)*((void *)v5 + 72);
    *((void *)v5 + 72) = v10;
    if (v12) {
      _Block_release(v12);
    }
    _Block_release(v11);
  }
  _Block_object_dispose(v15, 8);
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  return v6 != 3;
}

void sub_221F91A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  _Unwind_Resume(a1);
}

void *Phase::JobManagerDispatch::GetConcurrentQueue(void *a1, int a2)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v5 = (void **)(a1 + 29);
  uint64_t v4 = a1[29];
  if (!v4) {
    goto LABEL_11;
  }
  unsigned int v6 = (void **)(a1 + 29);
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      BOOL v9 = (uint64_t *)v4;
    }
    else {
      BOOL v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      unsigned int v6 = (void **)v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == v5 || *((_DWORD *)v6 + 8) > a2)
  {
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(&v42, "PHASE JobManager concurrent queue ");
    std::to_string(&v39, a2);
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      dispatch_block_t v10 = &v39;
    }
    else {
      dispatch_block_t v10 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v39.__r_.__value_.__l.__size_;
    }
    unsigned int v12 = std::string::append(&v42, (const std::string::value_type *)v10, size);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    int64_t v41 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::vector<unsigned int> __p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if (a2 >= 3)
    {
      uint64_t v37 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)v12) + 464);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v42.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + 4) = (std::string::size_type)"JobManagerDispatch.cpp";
        WORD2(v42.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v42.__r_.__value_.__r.__words[1] + 6) = 50;
        _os_log_impl(&dword_221E5E000, v37, OS_LOG_TYPE_ERROR, "%25s:%-5d INVARIANT: false is false.", (uint8_t *)&v42, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "INVARIANT: false is false.");
    }
    uint64_t v14 = (void **)a1[28];
    char v15 = dispatch_queue_attr_make_with_qos_class(MEMORY[0x263EF83A8], (dispatch_qos_class_t)dword_2220A6368[a2], 0);
    if (v41 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    int v17 = dispatch_queue_create((const char *)v16, v15);
    uint64_t v18 = v17;
    if (v5 == v14 || (int v19 = *((_DWORD *)v14 + 8), v19 > a2))
    {
      char v20 = *v14;
      if ((void **)a1[28] == v14)
      {
        uint64_t v22 = v14;
        goto LABEL_40;
      }
      if (v20)
      {
        int v21 = (void **)*v14;
        do
        {
          uint64_t v22 = v21;
          int v21 = (void **)v21[1];
        }
        while (v21);
      }
      else
      {
        uint64_t v26 = v14;
        do
        {
          uint64_t v22 = (void **)v26[2];
          BOOL v27 = *v22 == v26;
          uint64_t v26 = v22;
        }
        while (v27);
      }
      if (*((_DWORD *)v22 + 8) < a2)
      {
LABEL_40:
        BOOL v27 = v20 == 0;
        if (v20) {
          unsigned int v28 = v22;
        }
        else {
          unsigned int v28 = v14;
        }
        if (v27) {
          char v24 = v14;
        }
        else {
          char v24 = v22 + 1;
        }
        unsigned int v6 = (void **)*v24;
        if (!*v24)
        {
          uint64_t v14 = v28;
LABEL_66:
          unsigned int v6 = (void **)operator new(0x30uLL);
          *((_DWORD *)v6 + 8) = a2;
          v6[5] = v18;
          *unsigned int v6 = 0;
          v6[1] = 0;
          v6[2] = v14;
          *char v24 = v6;
          uint64_t v34 = *(void *)a1[28];
          int v35 = (uint64_t *)v6;
          if (v34)
          {
            a1[28] = v34;
            int v35 = (uint64_t *)*v24;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[29], v35);
          ++a1[30];
LABEL_72:
          if (SHIBYTE(v41) < 0) {
            operator delete(__p[0]);
          }
          return v6[5];
        }
LABEL_70:
        if (v17) {
          dispatch_release(v17);
        }
        goto LABEL_72;
      }
      uint64_t v29 = *v5;
      char v24 = v5;
      uint64_t v14 = v5;
      if (!*v5) {
        goto LABEL_66;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (void **)v29;
          int v30 = *((_DWORD *)v29 + 8);
          if (v30 <= a2) {
            break;
          }
          uint64_t v29 = *v14;
          char v24 = v14;
          if (!*v14) {
            goto LABEL_66;
          }
        }
        if (v30 >= a2) {
          break;
        }
        uint64_t v29 = v14[1];
        if (!v29) {
          goto LABEL_54;
        }
      }
    }
    else if (v19 < a2)
    {
      char v24 = v14 + 1;
      uint64_t v23 = (void **)v14[1];
      if (v23)
      {
        do
        {
          char v24 = v23;
          uint64_t v23 = (void **)*v23;
          uint64_t v14 = v24;
          int v25 = v24;
        }
        while (v23);
      }
      else
      {
        int v25 = v14;
        do
        {
          BOOL v31 = v25;
          int v25 = (void **)v25[2];
        }
        while (*v25 != v31);
      }
      if (v25 == v5) {
        goto LABEL_66;
      }
      if (*((_DWORD *)v25 + 8) > a2) {
        goto LABEL_66;
      }
      uint64_t v32 = *v5;
      char v24 = v5;
      uint64_t v14 = v5;
      if (!*v5) {
        goto LABEL_66;
      }
      while (1)
      {
        while (1)
        {
          uint64_t v14 = (void **)v32;
          int v33 = *((_DWORD *)v32 + 8);
          if (v33 <= a2) {
            break;
          }
          uint64_t v32 = *v14;
          char v24 = v14;
          if (!*v14) {
            goto LABEL_66;
          }
        }
        if (v33 >= a2) {
          break;
        }
        uint64_t v32 = v14[1];
        if (!v32)
        {
LABEL_54:
          char v24 = v14 + 1;
          goto LABEL_66;
        }
      }
    }
    unsigned int v6 = v14;
    goto LABEL_70;
  }
  return v6[5];
}

void sub_221F91E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  __cxa_free_exception(v28);
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::JobManagerDispatch::ReplaceDependency(Phase::Logger *a1, uint64_t *a2, uint64_t a3, Phase::Job **a4)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  if (!*a2)
  {
    uint64_t v34 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 221;
      _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInReplacement is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: nullptr != pInReplacement is false.");
  }
  unsigned int v6 = *(Phase::Job **)a3;
  if (!*(void *)a3)
  {
    __int16 v36 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 222;
      _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependent is false.", buf, 0x12u);
    }
    uint64_t v37 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v37, "PRECONDITION: nullptr != pInDependent is false.");
  }
  BOOL v8 = *a4;
  if (!*a4)
  {
    __int16 v38 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 223;
      _os_log_impl(&dword_221E5E000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependency is false.", buf, 0x12u);
    }
    std::string v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v39, "PRECONDITION: nullptr != pInDependency is false.");
  }
  unsigned int v11 = *(std::__shared_weak_count **)(a3 + 8);
  v44[0] = *(void *)a3;
  v44[1] = (uint64_t)v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::TreeLock::TreeLock(buf, a1, v44);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  unsigned int v12 = *(void **)(Phase::JobManager::GetDependencies(a1, v6) + 8);
  uint64_t Dependencies = Phase::JobManager::GetDependencies(a1, v6);
  if (v12 != (void *)Dependencies)
  {
    while ((Phase::Job *)v12[2] != *a4)
    {
      unsigned int v12 = (void *)v12[1];
      if (v12 == (void *)Dependencies)
      {
        unsigned int v12 = (void *)Dependencies;
        break;
      }
    }
  }
  if ((void *)Phase::JobManager::GetDependencies(a1, v6) == v12)
  {
    uint64_t v32 = 2;
  }
  else
  {
    int v14 = *(_DWORD *)(v4 + 524);
    if (v14 <= *((_DWORD *)v8 + 131)) {
      int v14 = *((_DWORD *)v8 + 131);
    }
    *(_DWORD *)(v4 + 524) = v14;
    atomic_store(1u, (unsigned __int8 *)(v4 + 40));
    uint64_t v16 = *a2;
    uint64_t v15 = a2[1];
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    int v17 = (std::__shared_weak_count *)v12[3];
    uint64_t v12[2] = v16;
    v12[3] = v15;
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    uint64_t Dependents = Phase::JobManager::GetDependents(a1, v8);
    int v19 = *(std::__shared_weak_count **)(a3 + 8);
    std::string v42 = *(Phase::Job **)a3;
    uint64_t v43 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__erase_unique<std::weak_ptr<Phase::Job>>(Dependents, (uint64_t)&v42);
    if (v43) {
      std::__shared_weak_count::__release_weak(v43);
    }
    char v20 = (uint64_t **)Phase::JobManager::GetDependents(a1, (Phase::Job *)v4);
    int v21 = *(std::__shared_weak_count **)(a3 + 8);
    std::string v42 = *(Phase::Job **)a3;
    uint64_t v43 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__emplace_unique_key_args<std::weak_ptr<Phase::Job>,std::weak_ptr<Phase::Job>>(v20, (uint64_t)&v42, (uint64_t)&v42);
    if (v43) {
      std::__shared_weak_count::__release_weak(v43);
    }
    unsigned int v22 = atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, v8));
    if (v22 == 1)
    {
      uint64_t v23 = *a2;
      char v24 = (std::__shared_weak_count *)a2[1];
      v41[0] = v23;
      v41[1] = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v25 = Phase::JobManagerDispatch::PrepareJobForExecution(a1, (uint64_t)v41);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      if (v25)
      {
        uint64_t v26 = Phase::JobManager::GetDependencies(a1, (Phase::Job *)v4);
        for (uint64_t i = *(void **)(v26 + 8); i != (void *)v26; uint64_t i = (void *)i[1])
        {
          uint64_t v29 = i[2];
          unsigned int v28 = (std::__shared_weak_count *)i[3];
          if (v28)
          {
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
            dispatch_group_enter(*(dispatch_group_t *)(v4 + 584));
            atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            dispatch_group_enter(*(dispatch_group_t *)(v4 + 584));
          }
          v40[0] = v29;
          v40[1] = (uint64_t)v28;
          Phase::JobManagerDispatch::doRunJob(a1, v40, 0.0);
          if (v28)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
            std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          }
        }
        if (!*(_DWORD *)(v4 + 528))
        {
          *(void *)(v4 + 592) |= 4uLL;
          int v30 = *(NSObject **)(v4 + 584);
          ConcurrentQueue = Phase::JobManagerDispatch::GetConcurrentQueue(a1, *(_DWORD *)(v4 + 524));
          dispatch_group_notify(v30, ConcurrentQueue, *(dispatch_block_t *)(v4 + 576));
        }
      }
    }
    uint64_t v32 = 0;
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(*(void *)buf + 96));
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  return v32;
}

void sub_221F923D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN5Phase18JobManagerDispatch22PrepareJobForExecutionENSt3__110shared_ptrINS_3JobEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  int v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3)
  {
    uint64_t v4 = *(Phase::JobManager **)(a1 + 40);
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      unsigned int v6 = v5;
      uint64_t v7 = *(void *)(v2 + 40);
      if (v7)
      {
        ExecutionState = (atomic_uint *)Phase::JobManager::GetExecutionState(v4, (Phase::Job *)v7);
        int v9 = 0;
        atomic_compare_exchange_strong(ExecutionState, (unsigned int *)&v9, 1u);
        if (!v9)
        {
          Phase::Job::Run((Phase::Job *)v7);
          atomic_store(2u, (unsigned int *)Phase::JobManager::GetExecutionState(v4, (Phase::Job *)v7));
          *(void *)(v7 + 592) |= 8uLL;
          atomic_store(1u, (unsigned __int8 *)(v7 + 600));
          dispatch_block_t v10 = *(std::__shared_weak_count **)(v7 + 616);
          *(_OWORD *)(v7 + 608) = 0u;
          if (v10) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
          uint64_t Dependents = (void *)Phase::JobManager::GetDependents(v4, (Phase::Job *)v7);
          unsigned int v12 = Dependents + 1;
          long long v13 = (void *)*Dependents;
          if ((void *)*Dependents != Dependents + 1)
          {
            do
            {
              int v14 = (std::__shared_weak_count *)v13[5];
              if (v14)
              {
                uint64_t v15 = v13[4];
                atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                uint64_t v16 = std::__shared_weak_count::lock(v14);
                if (v16)
                {
                  int v17 = v16;
                  if (v15) {
                    dispatch_group_leave(*(dispatch_group_t *)(v15 + 584));
                  }
                  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                }
                std::__shared_weak_count::__release_weak(v14);
              }
              uint64_t v18 = (void *)v13[1];
              if (v18)
              {
                do
                {
                  int v19 = v18;
                  uint64_t v18 = (void *)*v18;
                }
                while (v18);
              }
              else
              {
                do
                {
                  int v19 = (void *)v13[2];
                  BOOL v20 = *v19 == (void)v13;
                  long long v13 = v19;
                }
                while (!v20);
              }
              long long v13 = v19;
            }
            while (v19 != v12);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_221F92610(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::JobManagerDispatch::RunManualJob(Phase::JobManager *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = (uint64_t)v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::TreeLock::TreeLock(&v13, a1, v12);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unsigned int v6 = atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, (Phase::Job *)v4));
  if (v6 == 3 || (*(void *)(v4 + 592) & 0x16) != 2)
  {
    uint64_t v9 = 3;
  }
  else
  {
    *(void *)(v4 + 592) |= 4uLL;
    if (*(void *)(Phase::JobManager::GetDependencies(a1, (Phase::Job *)v4) + 16))
    {
      uint64_t v7 = *(NSObject **)(v4 + 584);
      ConcurrentQueue = Phase::JobManagerDispatch::GetConcurrentQueue(a1, *(_DWORD *)(*a2 + 524));
      dispatch_group_notify(v7, ConcurrentQueue, *(dispatch_block_t *)(v4 + 576));
    }
    else
    {
      dispatch_block_t v10 = Phase::JobManagerDispatch::GetConcurrentQueue(a1, *(_DWORD *)(*a2 + 524));
      dispatch_async(v10, *(dispatch_block_t *)(v4 + 576));
    }
    uint64_t v9 = 0;
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v13 + 96));
  if (*((void *)&v13 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
  }
  return v9;
}

void sub_221F92740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::JobManagerDispatch::RunJob(Phase::JobManager *a1, uint64_t a2, double a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t Dependents = (Phase::Logger *)Phase::JobManager::GetDependents(a1, *(Phase::Job **)a2);
  if (*((void *)Dependents + 2))
  {
    unsigned int v11 = **(NSObject ***)(Phase::Logger::GetInstance(Dependents) + 464);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v15 = "JobManagerDispatch.cpp";
      __int16 v16 = 1024;
      int v17 = 389;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: GetDependents(static_cast<JobDispatch*>(pInJob.get())).empty() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: GetDependents(static_cast<JobDispatch*>(pInJob.get())).empty() is false.");
  }
  uint64_t v7 = *(Phase::Job **)a2;
  BOOL v8 = *(std::__shared_weak_count **)(a2 + 8);
  v13[0] = (uint64_t)v7;
  v13[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = Phase::JobManagerDispatch::doRunJob(a1, v13, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return 2 * (v9 == 0);
}

void sub_221F928C4(_Unwind_Exception *exception_object)
{
}

void ___ZN5Phase18JobManagerDispatch8doRunJobENSt3__110shared_ptrINS_3JobEEEd_block_invoke(void *a1)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v1 = (unsigned __int8 *)a1[4];
  uint64_t v2 = a1[5];
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::mutex::lock((std::mutex *)(v2 + 632));
  uint64_t v5 = *(void *)(v2 + 624);
  if (v5)
  {
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v5 + 25));
    if (v6 & 1) != 0 || (unsigned __int8 v7 = atomic_load(v1 + 220), (v7))
    {
      atomic_store(0, (unsigned __int8 *)(v5 + 24));
      std::condition_variable::notify_all((std::condition_variable *)(v5 + 32));
    }
    else
    {
      double v8 = (double)std::chrono::steady_clock::now().__d_.__rep_ / 1000000000.0;
      long double v9 = *(double *)v5;
      long double v10 = v8 - (*(double *)(v5 + 8) + *(double *)(v5 + 16));
      *(double *)(v5 + 8) = v8;
      *(long double *)(v5 + 16) = v9 - fmod(v10, v9);
      *(void *)buf = v2;
      *(void *)&uint8_t buf[8] = v3;
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      Phase::JobManagerDispatch::ResetJob((Phase::JobManager *)v1, (uint64_t *)buf);
      if (v3)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
        int v14 = v3;
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        int v14 = 0;
      }
      uint64_t v13 = v2;
      (*(void (**)(unsigned __int8 *, uint64_t *, double))(*(void *)v1 + 120))(v1, &v13, *(double *)(v5 + 16));
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
  }
  else if ((*(unsigned char *)(v2 + 592) & 0x10) == 0)
  {
    unsigned int v11 = **(NSObject ***)(Phase::Logger::GetInstance(v4) + 464);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 638;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pJob->mRunState[JobDispatch::kRunStateCancelled] is true]: \"Unexpected periodic job state on iteration.\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unexpected periodic job state on iteration.");
  }
  std::mutex::unlock((std::mutex *)(v2 + 632));
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_221F92B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v11);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrIN5Phase3JobEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c38_ZTSNSt3__110shared_ptrIN5Phase3JobEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void Phase::JobManagerDispatch::ScheduleJobs(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*(void *)(a2 + 16) != *(void *)(a3 + 16))
  {
    uint64_t v5 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      long double v9 = "JobManagerDispatch.cpp";
      __int16 v10 = 1024;
      int v11 = 459;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inJobs.size() == inPeriodsSeconds.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: inJobs.size() == inPeriodsSeconds.size() is false.");
  }
  if (*(void *)(a2 + 8) != a2) {
    operator new();
  }
  if (*(void *)(a4 + 24))
  {
    std::list<std::shared_ptr<Phase::Job>>::list(v7, a2);
    std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(a4, 1);
    std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v7);
  }
}

void sub_221F92E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void Phase::JobManagerDispatch::StopScheduledJob(Phase::Logger *a1, uint64_t *a2, int a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(*a2 + 624);
  if (!v4)
  {
    int v17 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v26 = 136315394;
      *(void *)BOOL v27 = "JobManagerDispatch.cpp";
      *(_WORD *)&v27[8] = 1024;
      *(_DWORD *)&v27[10] = 491;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pJob->mSchedule is false.", v26, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: pJob->mSchedule is false.");
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v3 + 632);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v3 + 632));
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(v4 + 24));
  if (v7)
  {
    atomic_store(1u, (unsigned __int8 *)(v4 + 25));
    if (a3)
    {
      Phase::JobManagerDispatch::doCancelJob((Phase::JobManagerDispatch *)v26, a1, v3, 0);
      for (uint64_t i = *(void *)&v27[4]; (uint8_t *)i != v26; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v9 = *(void *)(i + 16);
        __int16 v10 = *(std::__shared_weak_count **)(i + 24);
        if (v10)
        {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          BOOL v20 = v10;
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          BOOL v20 = 0;
        }
        uint64_t v19 = v9;
        unint64_t v11 = (*(uint64_t (**)(Phase::Logger *, uint64_t *, double))(*(void *)a1 + 96))(a1, &v19, 0.0);
        uint64_t v12 = (Phase::Logger *)v20;
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        if (HIDWORD(v11)) {
          BOOL v13 = 1;
        }
        else {
          BOOL v13 = v11 == 0;
        }
        if (!v13)
        {
          int v14 = **(NSObject ***)(Phase::Logger::GetInstance(v12) + 464);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315394;
            uint64_t v23 = "JobManagerDispatch.cpp";
            __int16 v24 = 1024;
            int v25 = 514;
            _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d Couldn't wait on running job.", buf, 0x12u);
          }
        }
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
      std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)v26);
    }
    unsigned __int8 v15 = atomic_load((unsigned __int8 *)(v4 + 24));
    if (v15)
    {
      do
      {
        std::condition_variable::wait((std::condition_variable *)(v4 + 32), &__lk);
        unsigned __int8 v16 = atomic_load((unsigned __int8 *)(v4 + 24));
      }
      while ((v16 & 1) != 0);
    }
    atomic_store(0, (unsigned __int8 *)(v4 + 25));
  }
  std::unique_ptr<Phase::JobDispatch::Schedule>::reset[abi:ne180100]((uint64_t *)(v3 + 624), 0);
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_221F9313C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14) {
    std::mutex::unlock(a13);
  }
  _Unwind_Resume(exception_object);
}

void Phase::JobManagerDispatch::doCancelJob(Phase::JobManagerDispatch *this, Phase::JobDispatch *a2, uint64_t a3, int a4)
{
  *(void *)this = this;
  *((void *)this + 1) = this;
  *((void *)this + 2) = 0;
  if ((*(unsigned char *)(a3 + 592) & 0x10) != 0) {
    return;
  }
  double v8 = *(std::__shared_weak_count **)(a3 + 616);
  uint64_t v50 = *(void *)(a3 + 608);
  float32x4_t v51 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(void **)(a3 + 576);
  if (v9)
  {
    dispatch_block_cancel(v9);
    int v10 = 0;
    atomic_compare_exchange_strong((atomic_uint *volatile)Phase::JobManager::GetExecutionState(a2, (Phase::Job *)a3), (unsigned int *)&v10, 3u);
    if (v10)
    {
      atomic_store(3u, (unsigned int *)Phase::JobManager::GetExecutionState(a2, (Phase::Job *)a3));
      goto LABEL_12;
    }
    if (!v51 || v51->__shared_owners_ <= 0) {
      __assert_rtn("doCancelJob", "JobManagerDispatch.cpp", 682, "jobRef.use_count() > 1");
    }
    atomic_store(1u, (unsigned __int8 *)(a3 + 600));
    unint64_t v11 = *(std::__shared_weak_count **)(a3 + 616);
    *(_OWORD *)(a3 + 608) = 0u;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  int v10 = 0;
LABEL_12:
  *(void *)(a3 + 592) |= 0x10uLL;
  uint64_t Dependencies = Phase::JobManager::GetDependencies(a2, (Phase::Job *)a3);
  for (uint64_t i = *(void **)(Dependencies + 8); i != (void *)Dependencies; uint64_t i = (void *)i[1])
  {
    uint64_t v14 = i[2];
    unsigned __int8 v15 = (std::__shared_weak_count *)i[3];
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Phase::JobManagerDispatch::doCancelJob((Phase::JobManagerDispatch *)&v47, a2, v14);
    uint64_t v16 = v49;
    if (v49)
    {
      uint64_t v18 = v47;
      int v17 = v48;
      uint64_t v19 = *v48;
      *(void *)(v19 + 8) = *(void *)(v47 + 8);
      **(void **)(v18 + 8) = v19;
      uint64_t v20 = *(void *)this;
      *(void *)(v20 + 8) = v17;
      void *v17 = v20;
      *(void *)this = v18;
      *(void *)(v18 + 8) = this;
      *((void *)this + 2) += v16;
      uint64_t v49 = 0;
    }
    std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&v47);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  if (v10 == 1) {
    std::list<std::shared_ptr<Phase::Job>>::push_back((uint64_t *)this, &v50);
  }
  if (a4)
  {
    uint64_t Dependents = (void *)Phase::JobManager::GetDependents(a2, (Phase::Job *)a3);
    unsigned int v22 = Dependents + 1;
    uint64_t v23 = (void *)*Dependents;
    if ((void *)*Dependents != Dependents + 1)
    {
      do
      {
        uint64_t v25 = v23[4];
        __int16 v24 = (std::__shared_weak_count *)v23[5];
        atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v26 = std::__shared_weak_count::lock(v24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        BOOL v27 = *(std::__shared_weak_count **)(v25 + 616);
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        Phase::JobManagerDispatch::doCancelJob((Phase::JobManagerDispatch *)&v47, a2, v25);
        uint64_t v28 = v49;
        if (v49)
        {
          uint64_t v30 = v47;
          uint64_t v29 = v48;
          uint64_t v31 = *v48;
          *(void *)(v31 + 8) = *(void *)(v47 + 8);
          **(void **)(v30 + 8) = v31;
          uint64_t v32 = *(void *)this;
          *(void *)(v32 + 8) = v29;
          *uint64_t v29 = v32;
          *(void *)this = v30;
          *(void *)(v30 + 8) = this;
          *((void *)this + 2) += v28;
          uint64_t v49 = 0;
        }
        std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&v47);
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        std::__shared_weak_count::__release_weak(v24);
        int v33 = (void *)v23[1];
        if (v33)
        {
          do
          {
            uint64_t v34 = v33;
            int v33 = (void *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            uint64_t v34 = (void *)v23[2];
            BOOL v35 = *v34 == (void)v23;
            uint64_t v23 = v34;
          }
          while (!v35);
        }
        uint64_t v23 = v34;
      }
      while (v34 != v22);
    }
  }
  if (!v10)
  {
    __int16 v36 = (void *)Phase::JobManager::GetDependents(a2, (Phase::Job *)a3);
    uint64_t v37 = v36 + 1;
    __int16 v38 = (void *)*v36;
    if ((void *)*v36 != v36 + 1)
    {
      do
      {
        std::string v39 = (std::__shared_weak_count *)v38[5];
        if (v39)
        {
          uint64_t v40 = v38[4];
          atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          int64_t v41 = std::__shared_weak_count::lock(v39);
          if (v41)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
            uint64_t v42 = v40 + 584;
          }
          else
          {
            uint64_t v42 = 584;
          }
          dispatch_group_leave(*(dispatch_group_t *)v42);
          std::__shared_weak_count::__release_weak(v39);
        }
        else
        {
          dispatch_group_leave(MEMORY[0x248]);
        }
        uint64_t v43 = (void *)v38[1];
        if (v43)
        {
          do
          {
            uint64_t v44 = v43;
            uint64_t v43 = (void *)*v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            uint64_t v44 = (void *)v38[2];
            BOOL v35 = *v44 == (void)v38;
            __int16 v38 = v44;
          }
          while (!v35);
        }
        __int16 v38 = v44;
      }
      while (v44 != v37);
    }
    uint64_t v45 = *(void *)(a3 + 624);
    if (v45)
    {
      unsigned __int8 v46 = atomic_load((unsigned __int8 *)(v45 + 25));
      if (v46) {
        atomic_store(0, (unsigned __int8 *)(*(void *)(a3 + 624) + 24));
      }
    }
  }
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
}

void sub_221F93558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v14);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<Phase::JobDispatch::Schedule>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    std::condition_variable::~condition_variable((std::condition_variable *)(v2 + 32));
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::JobManagerDispatch::StopScheduledJobs(uint64_t a1, void *a2, char a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "StopScheduledJobsRoot");
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)a1 + 16))(&v20, a1, __p);
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  for (uint64_t i = (void *)a2[1]; i != a2; uint64_t i = (void *)i[1])
  {
    uint64_t v8 = i[2];
    unsigned __int8 v7 = (std::__shared_weak_count *)i[3];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "StopScheduledJob");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)a1 + 16))(&v16, a1, __p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = v16;
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(v9 + 256) = &unk_26D4780C0;
      *(void *)(v9 + 264) = v8;
      *(void *)(v9 + 272) = v7;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(v9 + 280) = a1;
      *(unsigned char *)(v9 + 288) = a3;
      std::__shared_weak_count::__release_weak(v7);
      *(unsigned char *)(v9 + 383) = 1;
      std::__shared_weak_count::__release_weak(v7);
      atomic_store(1u, (unsigned __int8 *)(v9 + 40));
      std::__shared_weak_count::__release_weak(v7);
    }
    else
    {
      *(void *)(v16 + 256) = &unk_26D4780C0;
      *(void *)(v9 + 264) = v8;
      *(void *)(v9 + 272) = 0;
      *(void *)(v9 + 280) = a1;
      *(unsigned char *)(v9 + 288) = a3;
      *(unsigned char *)(v9 + 383) = 1;
      atomic_store(1u, (unsigned __int8 *)(v9 + 40));
    }
    uint64_t v14 = v20;
    unsigned __int8 v15 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = v16;
    BOOL v13 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 24))(a1, &v14, &v12);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  int v10 = v21;
  v11[0] = v20;
  v11[1] = (uint64_t)v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::RunJob(a1, v11);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_221F9389C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  _Unwind_Resume(exception_object);
}

void Phase::JobManagerDispatch::StopScheduledJobAsync(Phase::Logger *a1, void **a2, uint64_t a3, char a4)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  if (!*((void *)*a2 + 78))
  {
    uint64_t v14 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
      __int16 v31 = 1024;
      int v32 = 554;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pJob->mSchedule is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: pJob->mSchedule is false.");
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "StopScheduledJobAsync");
  (*(void (**)(uint64_t *__return_ptr, Phase::Logger *, unsigned char *))(*(void *)a1 + 16))(&v24, a1, buf);
  if (v33 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v8 = v24;
  uint64_t v9 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = *a2;
  unint64_t v11 = (std::__shared_weak_count *)a2[1];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(v8 + 256) = &unk_26D4780E8;
    *(void *)(v8 + 264) = v10;
    *(void *)(v8 + 272) = v11;
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(v8 + 280) = a1;
    *(unsigned char *)(v8 + 288) = a4;
    std::__shared_weak_count::__release_weak(v11);
    *(unsigned char *)(v8 + 383) = 1;
    std::__shared_weak_count::__release_weak(v11);
    atomic_store(1u, (unsigned __int8 *)(v8 + 40));
    std::__shared_weak_count::__release_weak(v11);
  }
  else
  {
    *(void *)(v8 + 256) = &unk_26D4780E8;
    *(void *)(v8 + 264) = v10;
    *(void *)(v8 + 272) = 0;
    *(void *)(v8 + 280) = a1;
    *(unsigned char *)(v8 + 288) = a4;
    *(unsigned char *)(v8 + 383) = 1;
    atomic_store(1u, (unsigned __int8 *)(v8 + 40));
  }
  if (*(void *)(a3 + 24))
  {
    uint64_t v12 = (std::__shared_weak_count *)a2[1];
    std::vector<unsigned int> __p = *a2;
    uint64_t v28 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::list<std::shared_ptr<Phase::Job>>::list((uint64_t *)buf, &__p, 1);
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "StopScheduledJobAsyncCallback");
    (*(void (**)(uint64_t *__return_ptr, Phase::Logger *, void **))(*(void *)a1 + 16))(&v22, a1, &__p);
    uint64_t v8 = v22;
    BOOL v13 = v23;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
    if (v29 < 0) {
      operator delete(__p);
    }
    std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__value_func[abi:ne180100]((uint64_t)v26, a3);
    std::list<std::shared_ptr<Phase::Job>>::list(v21, (uint64_t)buf);
    Phase::Job::SetTaskFunction<std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>,BOOL,std::list<std::shared_ptr<Phase::Job>>>(v8, (uint64_t)v26, (uint64_t)v21);
    std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v21);
    std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100](v26);
    uint64_t v19 = v8;
    uint64_t v20 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = v24;
    uint64_t v18 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(Phase::Logger *, uint64_t *, uint64_t *))(*(void *)a1 + 24))(a1, &v19, &v17);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)buf);
  }
  else
  {
    BOOL v13 = v9;
  }
  v16[0] = v8;
  v16[1] = (uint64_t)v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::RunJobAsync((uint64_t)a1, v16);
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_221F93D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  __cxa_free_exception(v31);
  _Unwind_Resume(a1);
}

void *Phase::Job::SetTaskFunction<std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>,BOOL,std::list<std::shared_ptr<Phase::Job>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v15[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__value_func[abi:ne180100]((uint64_t)v14, a2);
  std::list<std::shared_ptr<Phase::Job>>::list(&v11, a3);
  std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)v14);
  *(void *)(a1 + 256) = &unk_26D478110;
  std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__value_func[abi:ne180100](a1 + 264, (uint64_t)v15);
  *(unsigned char *)(a1 + 296) = 1;
  *(void *)(a1 + 304) = a1 + 304;
  *(void *)(a1 + 312) = a1 + 304;
  *(void *)(a1 + 320) = 0;
  uint64_t v5 = v13;
  if (v13)
  {
    uint64_t v7 = v11;
    unsigned __int8 v6 = v12;
    uint64_t v8 = *v12;
    *(void *)(v8 + 8) = *(void *)(v11 + 8);
    **(void **)(v7 + 8) = v8;
    uint64_t v9 = *(void *)(a1 + 304);
    *(void *)(v9 + 8) = v6;
    *unsigned __int8 v6 = v9;
    *(void *)(a1 + 304) = v7;
    *(void *)(v7 + 8) = a1 + 304;
    *(void *)(a1 + 320) = v5;
    uint64_t v13 = 0;
  }
  std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100](v15);
  *(unsigned char *)(a1 + 383) = 1;
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&v11);
  __n128 result = std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100](v14);
  atomic_store(1u, (unsigned __int8 *)(a1 + 40));
  return result;
}

void sub_221F93F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
}

void Phase::JobManagerDispatch::StopScheduledJobsAsync(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(buf, "StopScheduledJobsAsyncRoot");
  uint64_t v8 = (Phase::Logger *)(*(void *(**)(uint64_t *__return_ptr, uint64_t, unsigned char *))(*(void *)a1 + 16))(&v25, a1, buf);
  if (v31 < 0) {
    operator delete(*(void **)buf);
  }
  for (uint64_t i = *(void **)(a2 + 8); i != (void *)a2; uint64_t i = (void *)i[1])
  {
    uint64_t v11 = i[2];
    int v10 = (std::__shared_weak_count *)i[3];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!*(void *)(v11 + 624))
    {
      unsigned __int8 v15 = **(NSObject ***)(Phase::Logger::GetInstance(v8) + 464);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "JobManagerDispatch.cpp";
        __int16 v29 = 1024;
        int v30 = 585;
        _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: static_cast<JobDispatch*>(inJob.get())->mSchedule is false.", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "PRECONDITION: static_cast<JobDispatch*>(inJob.get())->mSchedule is false.");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    }
    std::string::basic_string[abi:ne180100]<0>(buf, "StopScheduledJobAsync");
    (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned char *))(*(void *)a1 + 16))(&v23, a1, buf);
    if (v31 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v12 = v23;
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(v12 + 256) = &unk_26D478138;
      *(void *)(v12 + 264) = v11;
      *(void *)(v12 + 272) = v10;
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *(void *)(v12 + 280) = a1;
      *(unsigned char *)(v12 + 288) = a4;
      std::__shared_weak_count::__release_weak(v10);
      *(unsigned char *)(v12 + 383) = 1;
      std::__shared_weak_count::__release_weak(v10);
      atomic_store(1u, (unsigned __int8 *)(v12 + 40));
      std::__shared_weak_count::__release_weak(v10);
    }
    else
    {
      *(void *)(v23 + 256) = &unk_26D478138;
      *(void *)(v12 + 264) = v11;
      *(void *)(v12 + 272) = 0;
      *(void *)(v12 + 280) = a1;
      *(unsigned char *)(v12 + 288) = a4;
      *(unsigned char *)(v12 + 383) = 1;
      atomic_store(1u, (unsigned __int8 *)(v12 + 40));
    }
    uint64_t v21 = v25;
    uint64_t v22 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = v23;
    uint64_t v20 = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)a1 + 24))(a1, &v21, &v19);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    uint64_t v8 = (Phase::Logger *)v24;
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  if (*(void *)(a3 + 24))
  {
    uint64_t v13 = v25;
    std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::__value_func[abi:ne180100]((uint64_t)v27, a3);
    std::list<std::shared_ptr<Phase::Job>>::list(v18, a2);
    Phase::Job::SetTaskFunction<std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>,BOOL,std::list<std::shared_ptr<Phase::Job>>>(v13, (uint64_t)v27, (uint64_t)v18);
    std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v18);
    std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100](v27);
  }
  uint64_t v14 = v26;
  v17[0] = v25;
  v17[1] = (uint64_t)v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::RunJobAsync(a1, v17);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
}

void sub_221F94314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, std::__shared_weak_count *);
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)va);
  std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

void Phase::JobManagerDispatch::ResetJob(Phase::JobManager *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *(void *)(*a2 + 592);
  if ((v3 & 0x1F) != 0)
  {
    unsigned __int8 v6 = *(const void **)(v2 + 576);
    *(void *)(v2 + 576) = 0;
    if (v6)
    {
      _Block_release(v6);
      uint64_t v3 = *(void *)(v2 + 592);
    }
    *(void *)(v2 + 592) = v3 & 0xFFFFFFFFFFFFFFE0;
    atomic_store(0, (unsigned int *)Phase::JobManager::GetExecutionState(a1, (Phase::Job *)v2));
    atomic_store(0, (unsigned __int8 *)(v2 + 600));
    atomic_store(0, (unsigned __int8 *)(v2 + 601));
    uint64_t v7 = *a2;
    uint64_t v8 = (std::__shared_weak_count *)a2[1];
    v25[0] = v7;
    v25[1] = (uint64_t)v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Phase::JobManager::TreeLock::TreeLock(&v26, a1, v25);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    uint64_t Dependencies = Phase::JobManager::GetDependencies(a1, (Phase::Job *)v2);
    for (uint64_t i = *(void **)(Dependencies + 8); i != (void *)Dependencies; uint64_t i = (void *)i[1])
    {
      uint64_t v11 = i[2];
      uint64_t v12 = (std::__shared_weak_count *)i[3];
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v24[0] = v11;
      v24[1] = v12;
      Phase::JobManagerDispatch::ResetJob(a1, v24);
      if (v12)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    uint64_t Dependents = (void *)Phase::JobManager::GetDependents(a1, (Phase::Job *)v2);
    uint64_t v14 = Dependents + 1;
    uint64_t v15 = (void *)*Dependents;
    if ((void *)*Dependents != Dependents + 1)
    {
      do
      {
        uint64_t v16 = (std::__shared_weak_count *)v15[5];
        if (v16)
        {
          uint64_t v17 = v15[4];
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v22 = 0;
          uint64_t v18 = std::__shared_weak_count::lock(v16);
          uint64_t v23 = v18;
          if (v18) {
            uint64_t v22 = v17;
          }
        }
        else
        {
          uint64_t v18 = 0;
          uint64_t v22 = 0;
          uint64_t v23 = 0;
        }
        Phase::JobManagerDispatch::ResetJob(a1, &v22);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        if (v16) {
          std::__shared_weak_count::__release_weak(v16);
        }
        uint64_t v19 = (void *)v15[1];
        if (v19)
        {
          do
          {
            uint64_t v20 = v19;
            uint64_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            uint64_t v20 = (void *)v15[2];
            BOOL v21 = *v20 == (void)v15;
            uint64_t v15 = v20;
          }
          while (!v21);
        }
        uint64_t v15 = v20;
      }
      while (v20 != v14);
    }
    std::recursive_mutex::unlock((std::recursive_mutex *)(v26 + 96));
    if (*((void *)&v26 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
    }
  }
}

void sub_221F945DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  Phase::JobManager::TreeLock::~TreeLock((std::__shared_weak_count **)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::JobManagerDispatch::CancelJob(Phase::JobManager *a1, uint64_t *a2, int a3)
{
  uint64_t v4 = *a2;
  uint64_t v29 = (uint64_t)&v29;
  int v30 = &v29;
  uint64_t v31 = 0;
  if (*(void *)(v4 + 624))
  {
    uint64_t v5 = a2[1];
    uint64_t v27 = v4;
    uint64_t v28 = (std::__shared_weak_count *)v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(Phase::JobManager *, uint64_t *, uint64_t))(*(void *)a1 + 64))(a1, &v27, 1);
    unsigned __int8 v6 = v28;
    if (v28) {
LABEL_5:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    uint64_t v13 = (std::__shared_weak_count *)a2[1];
    v25[0] = v4;
    v25[1] = (uint64_t)v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    Phase::JobManager::TreeLock::TreeLock(&v26, a1, v25);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    Phase::JobManagerDispatch::doCancelJob((Phase::JobManagerDispatch *)&v22, a1, v4, a3);
    std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&v29);
    uint64_t v14 = v24;
    if (v24)
    {
      uint64_t v16 = v22;
      uint64_t v15 = v23;
      uint64_t v17 = *v23;
      *(void *)(v17 + 8) = *(void *)(v22 + 8);
      **(void **)(v16 + 8) = v17;
      uint64_t v18 = v29;
      *(void *)(v29 + 8) = v15;
      *uint64_t v15 = v18;
      *(void *)(v16 + 8) = &v29;
      uint64_t v29 = v16;
      v31 += v14;
      uint64_t v24 = 0;
    }
    std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&v22);
    std::recursive_mutex::unlock((std::recursive_mutex *)(v26 + 96));
    unsigned __int8 v6 = (std::__shared_weak_count *)*((void *)&v26 + 1);
    if (*((void *)&v26 + 1)) {
      goto LABEL_5;
    }
  }
  uint64_t v7 = v30;
  if (v30 == &v29)
  {
    uint64_t v11 = 0;
  }
  else
  {
    do
    {
      uint64_t v8 = v7[2];
      uint64_t v9 = (std::__shared_weak_count *)v7[3];
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v21 = v9;
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        BOOL v21 = 0;
      }
      uint64_t v20 = v8;
      unint64_t v10 = (*(uint64_t (**)(Phase::JobManager *, uint64_t *, double))(*(void *)a1 + 96))(a1, &v20, 0.0);
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7 != &v29);
    if (HIDWORD(v10)) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = v10;
    }
  }
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(&v29);
  return v11;
}

void sub_221F94858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  Phase::JobManager::TreeLock::~TreeLock((std::__shared_weak_count **)va);
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)(v8 - 72));
  _Unwind_Resume(a1);
}

uint64_t Phase::JobManagerDispatch::WaitForJob(Phase::JobManager *a1, Phase::Job **a2, double a3)
{
  uint64_t v3 = *a2;
  if (*((void *)*a2 + 78)) {
    return 1;
  }
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)v3 + 600);
  if (v5)
  {
    unsigned int v8 = atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, *a2));
    BOOL v9 = v8 == 2;
  }
  else
  {
    if (!*((void *)v3 + 72)) {
      return 3;
    }
    uint64_t result = 1;
    if (atomic_exchange((atomic_uchar *volatile)v3 + 601, 1u)) {
      return result;
    }
    int64_t v6 = (unint64_t)(a3 * 1000000000.0);
    if (v6) {
      dispatch_time_t v7 = dispatch_time(0, v6);
    }
    else {
      dispatch_time_t v7 = -1;
    }
    BOOL v9 = dispatch_block_wait(*((dispatch_block_t *)v3 + 72), v7) == 0;
  }
  unsigned int v10 = !v9;
  return 4 * v10;
}

uint64_t Phase::JobManagerDispatch::DestroyJob(atomic_uint *this, Phase::Job *a2)
{
  uint64_t result = Phase::JobManager::DestroyJob((Phase::JobManager *)this, a2);
  atomic_fetch_add(this + 54, 0xFFFFFFFF);
  return result;
}

uint64_t Phase::JobManagerDispatch::PrepareJob(Phase::JobManager *a1, uint64_t *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManager::TreeLock::TreeLock(&v13, a1, v12);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unsigned __int8 v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  uint64_t v11 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(Phase::JobManager *, uint64_t *, double))(*(void *)a1 + 96))(a1, &v10, 0.0);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v6 = *a2;
  dispatch_time_t v7 = (std::__shared_weak_count *)a2[1];
  v9[0] = v6;
  v9[1] = (uint64_t)v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  Phase::JobManagerDispatch::ResetJob(a1, v9);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)(v13 + 96));
  if (*((void *)&v13 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
  }
  return 0;
}

void sub_221F94A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  Phase::JobManager::TreeLock::~TreeLock((std::__shared_weak_count **)va);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<Phase::Job::Priority,applesauce::dispatch::v1::queue>,std::__map_value_compare<Phase::Job::Priority,std::__value_type<Phase::Job::Priority,applesauce::dispatch::v1::queue>,std::less<Phase::Job::Priority>,true>,std::allocator<std::__value_type<Phase::Job::Priority,applesauce::dispatch::v1::queue>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<Phase::Job::Priority,applesauce::dispatch::v1::queue>,std::__map_value_compare<Phase::Job::Priority,std::__value_type<Phase::Job::Priority,applesauce::dispatch::v1::queue>,std::less<Phase::Job::Priority>,true>,std::allocator<std::__value_type<Phase::Job::Priority,applesauce::dispatch::v1::queue>>>::destroy(*a1);
    std::__tree<std::__value_type<Phase::Job::Priority,applesauce::dispatch::v1::queue>,std::__map_value_compare<Phase::Job::Priority,std::__value_type<Phase::Job::Priority,applesauce::dispatch::v1::queue>,std::less<Phase::Job::Priority>,true>,std::allocator<std::__value_type<Phase::Job::Priority,applesauce::dispatch::v1::queue>>>::destroy(a1[1]);
    uint64_t v2 = a1[5];
    if (v2) {
      dispatch_release(v2);
    }
    operator delete(a1);
  }
}

void std::__shared_ptr_pointer<Phase::JobDispatch *,std::__bind<void (Phase::JobManagerDispatch::*)(Phase::Job *),Phase::JobManagerDispatch*,std::placeholders::__ph<1> const&>,std::allocator<Phase::JobDispatch>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_pointer<Phase::JobDispatch *,std::__bind<void (Phase::JobManagerDispatch::*)(Phase::Job *),Phase::JobManagerDispatch*,std::placeholders::__ph<1> const&>,std::allocator<Phase::JobDispatch>>::__on_zero_shared(void *a1)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = (uint64_t (*)(void *, void))a1[4];
  uint64_t v3 = (void *)(a1[6] + (v1 >> 1));
  if (v1) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v3 + v2);
  }
  return v2(v3, a1[3]);
}

uint64_t **std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__emplace_unique_key_args<std::weak_ptr<Phase::Job>,std::weak_ptr<Phase::Job>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  unsigned __int8 v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *(void *)(a2 + 8);
    while (1)
    {
      while (1)
      {
        unsigned int v8 = (uint64_t **)v5;
        unint64_t v9 = v5[5];
        if (v7 >= v9) {
          break;
        }
        unsigned __int8 v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unsigned __int8 v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned int v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    std::__tree<Phase::SpatialCategory>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__erase_unique<std::weak_ptr<Phase::Job>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[5];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[5]) {
    return 0;
  }
  std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::erase((uint64_t **)a1, v4);
  return 1;
}

uint64_t *std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::erase(uint64_t **a1, uint64_t *a2)
{
  unint64_t v3 = std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::UniqueObjectId>>>::__remove_node_pointer(a1, a2);
  uint64_t v4 = (std::__shared_weak_count *)a2[5];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  operator delete(a2);
  return v3;
}

void *Phase::Command<128>::Invoker<Phase::JobManagerDispatch::StopScheduledJobs(std::list<std::shared_ptr<Phase::Job>>,BOOL)::$_0,void>::~Invoker(void *a1)
{
  *a1 = &unk_26D4780C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void Phase::Command<128>::Invoker<Phase::JobManagerDispatch::StopScheduledJobs(std::list<std::shared_ptr<Phase::Job>>,BOOL)::$_0,void>::~Invoker(void *a1)
{
  *a1 = &unk_26D4780C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::Command<128>::Invoker<Phase::JobManagerDispatch::StopScheduledJobs(std::list<std::shared_ptr<Phase::Job>>,BOOL)::$_0,void>::Call(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      unint64_t v5 = v4;
      if (*(void *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 8);
        unint64_t v7 = v4;
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v3 + 64))(v3, &v6, *(unsigned __int8 *)(a1 + 32));
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_221F94EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void *Phase::Command<128>::Invoker<Phase::JobManagerDispatch::StopScheduledJobAsync(std::shared_ptr<Phase::Job>,std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>,BOOL)::$_0,void>::~Invoker(void *a1)
{
  *a1 = &unk_26D4780E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void Phase::Command<128>::Invoker<Phase::JobManagerDispatch::StopScheduledJobAsync(std::shared_ptr<Phase::Job>,std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>,BOOL)::$_0,void>::~Invoker(void *a1)
{
  *a1 = &unk_26D4780E8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::Command<128>::Invoker<Phase::JobManagerDispatch::StopScheduledJobAsync(std::shared_ptr<Phase::Job>,std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>,BOOL)::$_0,void>::Call(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      unint64_t v5 = v4;
      if (*(void *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 8);
        unint64_t v7 = v4;
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v3 + 64))(v3, &v6, *(unsigned __int8 *)(a1 + 32));
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_221F9501C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void *Phase::Command<128>::Invoker<std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>,void,BOOL,std::list<std::shared_ptr<Phase::Job>>>::~Invoker(void *a1)
{
  *a1 = &unk_26D478110;
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(a1 + 6);
  std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void Phase::Command<128>::Invoker<std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>,void,BOOL,std::list<std::shared_ptr<Phase::Job>>>::~Invoker(void *a1)
{
  *a1 = &unk_26D478110;
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(a1 + 6);
  std::__function::__value_func<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x223C938A0);
}

void Phase::Command<128>::Invoker<std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>,void,BOOL,std::list<std::shared_ptr<Phase::Job>>>::Call(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  char v2 = *(unsigned char *)(a1 + 40);
  std::list<std::shared_ptr<Phase::Job>>::list(v3, a1 + 48);
  std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(v1, v2);
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v3);
}

void sub_221F95144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *Phase::Command<128>::Invoker<Phase::JobManagerDispatch::StopScheduledJobsAsync(std::list<std::shared_ptr<Phase::Job>>,std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>,BOOL)::$_0,void>::~Invoker(void *a1)
{
  *a1 = &unk_26D478138;
  char v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void Phase::Command<128>::Invoker<Phase::JobManagerDispatch::StopScheduledJobsAsync(std::list<std::shared_ptr<Phase::Job>>,std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>,BOOL)::$_0,void>::~Invoker(void *a1)
{
  *a1 = &unk_26D478138;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::Command<128>::Invoker<Phase::JobManagerDispatch::StopScheduledJobsAsync(std::list<std::shared_ptr<Phase::Job>>,std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>,BOOL)::$_0,void>::Call(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 24);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      unint64_t v5 = v4;
      if (*(void *)(a1 + 8))
      {
        uint64_t v6 = *(void *)(a1 + 8);
        unint64_t v7 = v4;
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v3 + 64))(v3, &v6, *(unsigned __int8 *)(a1 + 32));
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_221F952B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void Phase::JobManagerSynchronous::CreateJob(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x280uLL, (std::align_val_t)0x80uLL);
  Phase::Job::Job((uint64_t)v6, a1, a2);
  *uint64_t v6 = &unk_26D478160;
  v6[72] = v6 + 72;
  v6[73] = v6 + 72;
  v6[74] = 0;
  *a3 = v6;
  operator new();
}

void sub_221F953A4(void *a1)
{
  __cxa_begin_catch(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 112))(v2, v1);
  __cxa_rethrow();
}

void sub_221F953DC(_Unwind_Exception *a1)
{
}

uint64_t Phase::JobManagerSynchronous::AddDependency(Phase::Logger *a1, uint64_t a2, Phase::Job **a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(Phase::Job **)a2;
  if (!*(void *)a2)
  {
    uint64_t v17 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)BOOL v21 = 136315394;
      *(void *)&v21[4] = "JobManagerSynchronous.cpp";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 33;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependent is false.", v21, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: nullptr != pInDependent is false.");
  }
  unint64_t v5 = *a3;
  if (!*a3)
  {
    uint64_t v19 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)BOOL v21 = 136315394;
      *(void *)&v21[4] = "JobManagerSynchronous.cpp";
      *(_WORD *)&v21[12] = 1024;
      *(_DWORD *)&v21[14] = 34;
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependency is false.", v21, 0x12u);
    }
    uint64_t v20 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v20, "PRECONDITION: nullptr != pInDependency is false.");
  }
  if (atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, *(Phase::Job **)a2))) {
    return 3;
  }
  uint64_t Dependents = (uint64_t **)Phase::JobManager::GetDependents(a1, v5);
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)BOOL v21 = *(void *)a2;
  *(void *)&v21[8] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
  }
  std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__emplace_unique_key_args<std::weak_ptr<Phase::Job>,std::weak_ptr<Phase::Job>>(Dependents, (uint64_t)v21, (uint64_t)v21);
  char v13 = v12;
  if (*(void *)&v21[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v21[8]);
  }
  if ((v13 & 1) == 0) {
    return 2;
  }
  uint64_t v14 = *a3;
  int v15 = *((_DWORD *)*a3 + 131);
  if (v15 <= *(_DWORD *)(*(void *)a2 + 524)) {
    int v15 = *(_DWORD *)(*(void *)a2 + 524);
  }
  *((_DWORD *)v14 + 131) = v15;
  atomic_store(1u, (unsigned __int8 *)v14 + 40);
  uint64_t Dependencies = (uint64_t *)Phase::JobManager::GetDependencies(a1, v3);
  std::list<std::shared_ptr<Phase::Job>>::push_back(Dependencies, a3);
  return 0;
}

void sub_221F9566C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::JobManagerSynchronous::AddEnqueuedDependency(Phase::Logger *a1, uint64_t a2, Phase::Job **a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(uint64_t **)a2;
  if (!*(void *)a2)
  {
    uint64_t v16 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v20 = 136315394;
      *(void *)&v20[4] = "JobManagerSynchronous.cpp";
      *(_WORD *)&v20[12] = 1024;
      *(_DWORD *)&v20[14] = 55;
      _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependent is false.", v20, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: nullptr != pInDependent is false.");
  }
  unint64_t v5 = *a3;
  if (!*a3)
  {
    uint64_t v18 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v20 = 136315394;
      *(void *)&v20[4] = "JobManagerSynchronous.cpp";
      *(_WORD *)&v20[12] = 1024;
      *(_DWORD *)&v20[14] = 56;
      _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependency is false.", v20, 0x12u);
    }
    uint64_t v19 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v19, "PRECONDITION: nullptr != pInDependency is false.");
  }
  if (atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, *a3))) {
    return 3;
  }
  uint64_t Dependents = (uint64_t **)Phase::JobManager::GetDependents(a1, v5);
  uint64_t v11 = *(void *)(a2 + 8);
  *(void *)uint64_t v20 = *(void *)a2;
  *(void *)&v20[8] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
  }
  std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__emplace_unique_key_args<std::weak_ptr<Phase::Job>,std::weak_ptr<Phase::Job>>(Dependents, (uint64_t)v20, (uint64_t)v20);
  char v13 = v12;
  if (*(void *)&v20[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v20[8]);
  }
  if ((v13 & 1) == 0) {
    return 2;
  }
  uint64_t Dependencies = (uint64_t *)Phase::JobManager::GetDependencies(a1, (Phase::Job *)v3);
  std::list<std::shared_ptr<Phase::Job>>::push_back(Dependencies, a3);
  unsigned int v15 = atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, (Phase::Job *)v3));
  if (v15 == 1) {
    std::list<std::shared_ptr<Phase::Job>>::push_back(v3 + 72, a3);
  }
  return 0;
}

void sub_221F95904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::JobManagerSynchronous::InsertDependency(Phase::Logger *a1, uint64_t a2, uint64_t a3, Phase::Job **a4)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(Phase::Job **)a2;
  if (!*(void *)a2)
  {
    uint64_t v27 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerSynchronous.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 84;
      _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInInsertor is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: nullptr != pInInsertor is false.");
  }
  uint64_t v6 = *(uint64_t **)a3;
  if (!*(void *)a3)
  {
    uint64_t v29 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerSynchronous.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 85;
      _os_log_impl(&dword_221E5E000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependent is false.", buf, 0x12u);
    }
    int v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v30, "PRECONDITION: nullptr != pInDependent is false.");
  }
  unsigned int v8 = *a4;
  if (!*a4)
  {
    uint64_t v31 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "JobManagerSynchronous.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 86;
      _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependency is false.", buf, 0x12u);
    }
    uint64_t v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v32, "PRECONDITION: nullptr != pInDependency is false.");
  }
  if (atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, *(Phase::Job **)a2))) {
    return 3;
  }
  uint64_t v13 = *(void *)(Phase::JobManager::GetDependencies(a1, (Phase::Job *)v6) + 8);
  uint64_t Dependencies = Phase::JobManager::GetDependencies(a1, (Phase::Job *)v6);
  if (v13 != Dependencies)
  {
    while (*(Phase::Job **)(v13 + 16) != *a4)
    {
      uint64_t v13 = *(void *)(v13 + 8);
      if (v13 == Dependencies)
      {
        uint64_t v13 = Dependencies;
        break;
      }
    }
  }
  if (v13 == Phase::JobManager::GetDependencies(a1, (Phase::Job *)v6)) {
    return 2;
  }
  uint64_t Dependents = (uint64_t **)Phase::JobManager::GetDependents(a1, v8);
  uint64_t v16 = *(void *)(a2 + 8);
  *(void *)buf = *(void *)a2;
  *(void *)&uint8_t buf[8] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
  }
  std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__emplace_unique_key_args<std::weak_ptr<Phase::Job>,std::weak_ptr<Phase::Job>>(Dependents, (uint64_t)buf, (uint64_t)buf);
  if (v17)
  {
    uint64_t v19 = (uint64_t **)Phase::JobManager::GetDependents(a1, v4);
    uint64_t v20 = *(std::__shared_weak_count **)(a3 + 8);
    char v33 = *(uint64_t **)a3;
    uint64_t v34 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__emplace_unique_key_args<std::weak_ptr<Phase::Job>,std::weak_ptr<Phase::Job>>(v19, (uint64_t)&v33, (uint64_t)&v33);
    int v18 = v21 & 1;
    if (v34) {
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  else
  {
    int v18 = 0;
  }
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  if (!v18) {
    return 2;
  }
  int v22 = *((_DWORD *)v4 + 131);
  if (v22 <= *((_DWORD *)v6 + 131)) {
    int v22 = *((_DWORD *)v6 + 131);
  }
  *((_DWORD *)v4 + 131) = v22;
  atomic_store(1u, (unsigned __int8 *)v4 + 40);
  uint64_t v23 = (uint64_t *)Phase::JobManager::GetDependencies(a1, (Phase::Job *)v6);
  std::list<std::shared_ptr<Phase::Job>>::push_back(v23, (void *)a2);
  uint64_t v24 = (uint64_t *)Phase::JobManager::GetDependencies(a1, v4);
  std::list<std::shared_ptr<Phase::Job>>::push_back(v24, a4);
  unsigned int v25 = atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, (Phase::Job *)v6));
  if (v25 == 1)
  {
    long long v26 = v6 + 72;
    std::list<std::shared_ptr<Phase::Job>>::remove(v26, (uint64_t)*a4);
    std::list<std::shared_ptr<Phase::Job>>::push_back(v26, (void *)a2);
    std::list<std::shared_ptr<Phase::Job>>::push_back((uint64_t *)v4 + 72, a4);
  }
  return 0;
}

void sub_221F95D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  _Unwind_Resume(exception_object);
}

void std::list<std::shared_ptr<Phase::Job>>::remove(uint64_t *a1, uint64_t a2)
{
  v11[0] = (uint64_t)v11;
  v11[1] = (uint64_t)v11;
  uint64_t v12 = 0;
  uint64_t v2 = (uint64_t *)a1[1];
  if (v2 != a1)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = (uint64_t *)v2[1];
      if (v2[2] == a2)
      {
        if (v4 == a1)
        {
          BOOL v5 = 1;
LABEL_9:
          uint64_t v4 = a1;
        }
        else
        {
          while (1)
          {
            BOOL v5 = v4[2] == a2;
            if (v4[2] != a2) {
              break;
            }
            uint64_t v4 = (uint64_t *)v4[1];
            if (v4 == a1) {
              goto LABEL_9;
            }
          }
        }
        if (v2 != v4)
        {
          uint64_t v6 = *v4;
          if (v11 != a1)
          {
            uint64_t v7 = 1;
            if ((uint64_t *)v6 != v2)
            {
              unsigned int v8 = v2;
              do
              {
                unsigned int v8 = (uint64_t *)v8[1];
                ++v7;
              }
              while (v8 != (uint64_t *)v6);
            }
            a1[2] -= v7;
            v3 += v7;
            uint64_t v12 = v3;
          }
          uint64_t v9 = *v2;
          *(void *)(v9 + 8) = *(void *)(v6 + 8);
          **(void **)(v6 + 8) = v9;
          uint64_t v10 = v11[0];
          *(void *)(v11[0] + 8) = v2;
          uint64_t *v2 = v10;
          v11[0] = v6;
          *(void *)(v6 + 8) = v11;
        }
        if (!v5) {
          uint64_t v4 = (uint64_t *)v4[1];
        }
      }
      uint64_t v2 = v4;
    }
    while (v4 != a1);
  }
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v11);
}

uint64_t Phase::JobManagerSynchronous::ReplaceDependency(Phase::Logger *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  if (!*a2)
  {
    unsigned int v25 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v31 = 136315394;
      *(void *)&void v31[4] = "JobManagerSynchronous.cpp";
      *(_WORD *)&v31[12] = 1024;
      *(_DWORD *)&v31[14] = 125;
      _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInReplacement is false.", v31, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: nullptr != pInReplacement is false.");
  }
  uint64_t v6 = *(Phase::Job **)a3;
  if (!*(void *)a3)
  {
    uint64_t v27 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v31 = 136315394;
      *(void *)&void v31[4] = "JobManagerSynchronous.cpp";
      *(_WORD *)&v31[12] = 1024;
      *(_DWORD *)&v31[14] = 126;
      _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependent is false.", v31, 0x12u);
    }
    uint64_t v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v28, "PRECONDITION: nullptr != pInDependent is false.");
  }
  unsigned int v8 = (Phase::Job *)*a4;
  if (!*a4)
  {
    uint64_t v29 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v31 = 136315394;
      *(void *)&void v31[4] = "JobManagerSynchronous.cpp";
      *(_WORD *)&v31[12] = 1024;
      *(_DWORD *)&v31[14] = 127;
      _os_log_impl(&dword_221E5E000, v29, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: nullptr != pInDependency is false.", v31, 0x12u);
    }
    int v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v30, "PRECONDITION: nullptr != pInDependency is false.");
  }
  uint64_t v11 = *(void **)(Phase::JobManager::GetDependencies(a1, *(Phase::Job **)a3) + 8);
  uint64_t Dependencies = Phase::JobManager::GetDependencies(a1, v6);
  if (v11 != (void *)Dependencies)
  {
    while (v11[2] != *a4)
    {
      uint64_t v11 = (void *)v11[1];
      if (v11 == (void *)Dependencies)
      {
        uint64_t v11 = (void *)Dependencies;
        break;
      }
    }
  }
  if (atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, (Phase::Job *)v4))) {
    return 3;
  }
  if ((void *)Phase::JobManager::GetDependencies(a1, v6) == v11) {
    return 2;
  }
  int v15 = *(_DWORD *)(v4 + 524);
  if (v15 <= *((_DWORD *)v8 + 131)) {
    int v15 = *((_DWORD *)v8 + 131);
  }
  *(_DWORD *)(v4 + 524) = v15;
  atomic_store(1u, (unsigned __int8 *)(v4 + 40));
  uint64_t v17 = *a2;
  uint64_t v16 = a2[1];
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  int v18 = (std::__shared_weak_count *)v11[3];
  uint64_t v11[2] = v17;
  v11[3] = v16;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t Dependents = Phase::JobManager::GetDependents(a1, v8);
  uint64_t v20 = *(void *)(a3 + 8);
  *(void *)uint64_t v31 = *(void *)a3;
  *(void *)&v31[8] = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 16), 1uLL, memory_order_relaxed);
  }
  std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__erase_unique<std::weak_ptr<Phase::Job>>(Dependents, (uint64_t)v31);
  if (*(void *)&v31[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v31[8]);
  }
  char v21 = (uint64_t **)Phase::JobManager::GetDependents(a1, (Phase::Job *)v4);
  uint64_t v22 = *(void *)(a3 + 8);
  *(void *)uint64_t v31 = *(void *)a3;
  *(void *)&v31[8] = v22;
  if (v22) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 16), 1uLL, memory_order_relaxed);
  }
  std::__tree<std::weak_ptr<Phase::Job>,std::owner_less<std::weak_ptr<Phase::Job>>,std::allocator<std::weak_ptr<Phase::Job>>>::__emplace_unique_key_args<std::weak_ptr<Phase::Job>,std::weak_ptr<Phase::Job>>(v21, (uint64_t)v31, (uint64_t)v31);
  if (*(void *)&v31[8]) {
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v31[8]);
  }
  unsigned int v23 = atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, v6));
  if (v23 == 1)
  {
    uint64_t v24 = (uint64_t *)((char *)v6 + 576);
    std::list<std::shared_ptr<Phase::Job>>::remove(v24, *a4);
    std::list<std::shared_ptr<Phase::Job>>::push_back(v24, a2);
  }
  return 0;
}

void sub_221F96278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::JobManagerSynchronous::WaitForJob()
{
  return 1;
}

unint64_t Phase::JobManagerSynchronous::CancelJob(Phase::JobManager *this, uint64_t a2, int a3)
{
  BOOL v5 = *(Phase::Job **)a2;
  if (a3)
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a2 + 8);
    char v21 = v5;
    uint64_t v22 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __n128 RootJob = Phase::JobManager::GetRootJob(this, (uint64_t)&v21, &v23);
    unint64_t v8 = (*(uint64_t (**)(Phase::JobManager *, long long *, void, __n128))(*(void *)this + 104))(this, &v23, 0, RootJob);
    unsigned int v9 = v8;
    unint64_t v10 = HIDWORD(v8);
    if (*((void *)&v23 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  else
  {
    ExecutionState = (atomic_uint *)Phase::JobManager::GetExecutionState(this, v5);
    unsigned int v9 = 3;
    int v12 = 1;
    atomic_compare_exchange_strong(ExecutionState, (unsigned int *)&v12, 3u);
    if (v12 == 1)
    {
      uint64_t Dependencies = Phase::JobManager::GetDependencies(this, *(Phase::Job **)a2);
      uint64_t v14 = *(void **)(Dependencies + 8);
      if (v14 != (void *)Dependencies)
      {
        int v15 = (void *)Dependencies;
        do
        {
          uint64_t v16 = v14[2];
          uint64_t v17 = (std::__shared_weak_count *)v14[3];
          if (v17)
          {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v20 = v17;
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            uint64_t v20 = 0;
          }
          uint64_t v19 = v16;
          (*(void (**)(Phase::JobManager *, uint64_t *, void))(*(void *)this + 104))(this, &v19, 0);
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          uint64_t v14 = (void *)v14[1];
        }
        while (v14 != v15);
      }
      unsigned int v9 = 0;
    }
    LODWORD(v10) = 0;
  }
  return v9 | ((unint64_t)v10 << 32);
}

void sub_221F96440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::JobManagerSynchronous::RunJob(Phase::JobManager *a1, uint64_t a2, double a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a3 <= 0.0)
  {
    uint64_t Dependents = (Phase::Logger *)Phase::JobManager::GetDependents(a1, *(Phase::Job **)a2);
    if (*((void *)Dependents + 2))
    {
      unint64_t v10 = **(NSObject ***)(Phase::Logger::GetInstance(Dependents) + 464);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v14 = "JobManagerSynchronous.cpp";
        __int16 v15 = 1024;
        int v16 = 216;
        _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: GetDependents(pJob).empty() is false.", buf, 0x12u);
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: GetDependents(pJob).empty() is false.");
    }
    uint64_t v7 = *(Phase::Job **)a2;
    unint64_t v8 = *(atomic_ullong **)(a2 + 8);
    v12[0] = v7;
    v12[1] = (Phase::Job *)v8;
    if (v8) {
      atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
    }
    unsigned int v3 = 2 * (Phase::JobManagerSynchronous::doRunJob(a1, v12) == 0);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8);
    }
  }
  else
  {
    return 1;
  }
  return v3;
}

void sub_221F965E0(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::JobManagerSynchronous::doRunJob(Phase::JobManager *a1, Phase::Job **a2)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  unsigned int v3 = *a2;
  ExecutionState = (atomic_uint *)Phase::JobManager::GetExecutionState(a1, *a2);
  int v5 = 0;
  atomic_compare_exchange_strong(ExecutionState, (unsigned int *)&v5, 1u);
  if (!v5)
  {
    uint64_t v6 = *(void **)(Phase::JobManager::GetDependencies(a1, v3) + 8);
    uint64_t Dependencies = Phase::JobManager::GetDependencies(a1, v3);
    if (v6 == (void *)Dependencies)
    {
      uint64_t v18 = *((void *)v3 + 74);
      if (v18)
      {
LABEL_19:
        LODWORD(v17) = 1;
        do
        {
          uint64_t v20 = (uint64_t *)*((void *)v3 + 73);
          uint64_t v22 = v20[2];
          char v21 = (std::__shared_weak_count *)v20[3];
          if (v21)
          {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
            uint64_t v20 = (uint64_t *)*((void *)v3 + 73);
            uint64_t v18 = *((void *)v3 + 74);
            long long v23 = (std::__shared_weak_count *)v20[3];
          }
          else
          {
            long long v23 = 0;
          }
          uint64_t v24 = *v20;
          *(void *)(v24 + 8) = v20[1];
          *(void *)v20[1] = v24;
          *((void *)v3 + 74) = v18 - 1;
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          operator delete(v20);
          v28[0] = v22;
          v28[1] = v21;
          if (v21) {
            atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v25 = Phase::JobManagerSynchronous::doRunJob(a1, v28);
          if (v21)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          uint64_t v17 = (v25 + v17);
          uint64_t v18 = *((void *)v3 + 74);
        }
        while (v18);
        goto LABEL_30;
      }
    }
    else
    {
      unint64_t v8 = (void *)Dependencies;
      unsigned int v9 = operator new(0x20uLL);
      unint64_t v10 = v9;
      *unsigned int v9 = 0;
      v9[1] = 0;
      uint64_t v9[2] = v6[2];
      uint64_t v11 = v6[3];
      v9[3] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      int v12 = (void *)v6[1];
      if (v12 == v8)
      {
        uint64_t v13 = 1;
      }
      else
      {
        uint64_t v13 = 1;
        uint64_t v14 = v9;
        do
        {
          unsigned int v9 = operator new(0x20uLL);
          *unsigned int v9 = v14;
          v9[1] = 0;
          uint64_t v9[2] = v12[2];
          uint64_t v15 = v12[3];
          v9[3] = v15;
          if (v15) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
          }
          v14[1] = v9;
          ++v13;
          int v12 = (void *)v12[1];
          uint64_t v14 = v9;
        }
        while (v12 != v8);
      }
      uint64_t v19 = *((void *)v3 + 72);
      *(void *)(v19 + 8) = v10;
      *unint64_t v10 = v19;
      *((void *)v3 + 72) = v9;
      v9[1] = (char *)v3 + 576;
      uint64_t v18 = *((void *)v3 + 74) + v13;
      *((void *)v3 + 74) = v18;
      if (v18) {
        goto LABEL_19;
      }
    }
    uint64_t v17 = 1;
LABEL_30:
    unsigned int v26 = atomic_load((unsigned int *)Phase::JobManager::GetExecutionState(a1, v3));
    if (v26 != 3)
    {
      Phase::Job::Run(v3);
      atomic_store(2u, (unsigned int *)Phase::JobManager::GetExecutionState(a1, v3));
    }
    return v17;
  }
  if (v5 != 3)
  {
    int v16 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)ExecutionState) + 464);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      int v30 = "JobManagerSynchronous.cpp";
      __int16 v31 = 1024;
      int v32 = 250;
      __int16 v33 = 1024;
      int v34 = v5;
      _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d Attempting to run a job with active state %i", buf, 0x18u);
    }
  }
  return 0;
}

void sub_221F968E0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    while (1)
    {
      unsigned int v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
      if (!v3) {
        __cxa_rethrow();
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void Phase::JobManagerSynchronous::ScheduleJobs(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (!*(void *)(a4 + 24))
  {
    int v5 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 464);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unsigned int v9 = "JobManagerSynchronous.cpp";
      __int16 v10 = 1024;
      int v11 = 265;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Schedule periodic jobs is not supported in JobManagerSynchronous\"", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Schedule periodic jobs is not supported in JobManagerSynchronous");
  }
  std::list<std::shared_ptr<Phase::Job>>::list(v7, a2);
  std::function<void ()(BOOL,std::list<std::shared_ptr<Phase::Job>>)>::operator()(a4, 0);
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v7);
}

void sub_221F96A74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t Phase::JobManagerSynchronous::RunManualJob()
{
  return 1;
}

uint64_t Phase::JobManagerSynchronous::PrepareJob(Phase::JobManager *a1, Phase::Job **a2)
{
  unsigned int v3 = (uint64_t *)*a2;
  unsigned int v4 = 2 * (*((_DWORD *)*a2 + 132) == 1);
  atomic_store(0, (unsigned int *)Phase::JobManager::GetExecutionState(a1, *a2));
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear(v3 + 72);
  uint64_t Dependencies = Phase::JobManager::GetDependencies(a1, (Phase::Job *)v3);
  uint64_t v6 = *(void **)(Dependencies + 8);
  if (v6 != (void *)Dependencies)
  {
    uint64_t v7 = (void *)Dependencies;
    do
    {
      uint64_t v8 = v6[2];
      unsigned int v9 = (std::__shared_weak_count *)v6[3];
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v15 = v9;
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        uint64_t v15 = 0;
      }
      uint64_t v14 = v8;
      unint64_t v10 = (*(uint64_t (**)(Phase::JobManager *, uint64_t *))(*(void *)a1 + 144))(a1, &v14);
      if (HIDWORD(v10)) {
        BOOL v11 = 1;
      }
      else {
        BOOL v11 = v10 == 0;
      }
      int v12 = v11;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (!v12) {
        unsigned int v4 = 2;
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      uint64_t v6 = (void *)v6[1];
    }
    while (v6 != v7);
  }
  return v4;
}

void sub_221F96BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void Phase::JobManagerSynchronous::~JobManagerSynchronous(Phase::JobManagerSynchronous *this)
{
  Phase::JobManager::~JobManager(this);

  JUMPOUT(0x223C938A0);
}

void Phase::JobSynchronous::~JobSynchronous(Phase::JobSynchronous *this)
{
  *(void *)this = &unk_26D478160;
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)this + 72);

  Phase::Job::~Job(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D478160;
  std::__list_imp<std::shared_ptr<Phase::Job>>::clear((uint64_t *)this + 72);
  Phase::Job::~Job(this);

  JUMPOUT(0x223C93890);
}

void std::__shared_ptr_pointer<Phase::JobSynchronous *,std::__bind<void (Phase::JobManager::*)(Phase::Job *),Phase::JobManagerSynchronous *,std::placeholders::__ph<1> const&>,std::allocator<Phase::JobSynchronous>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__shared_ptr_pointer<Phase::JobSynchronous *,std::__bind<void (Phase::JobManager::*)(Phase::Job *),Phase::JobManagerSynchronous *,std::placeholders::__ph<1> const&>,std::allocator<Phase::JobSynchronous>>::__on_zero_shared(void *a1)
{
  uint64_t v1 = a1[5];
  uint64_t v2 = (uint64_t (*)(void *, void))a1[4];
  unsigned int v3 = (void *)(a1[6] + (v1 >> 1));
  if (v1) {
    uint64_t v2 = *(uint64_t (**)(void *, void))(*v3 + v2);
  }
  return v2(v3, a1[3]);
}

uint64_t Phase::ParseJSONFile(void *a1, void *a2, void **a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  id v62 = a1;
  int v5 = [MEMORY[0x263F08850] defaultManager];
  uint64_t v6 = [v62 resourceSpecifier];
  unint64_t v60 = v5;
  uint64_t v7 = [v5 contentsAtPath:v6];

  float32x4_t v59 = v7;
  if (v7)
  {
    id v63 = v7;
    if (a3) {
      *a3 = 0;
    }
    id v61 = [MEMORY[0x263F08900] JSONObjectWithData:v63 options:2 error:a3];
    if (a3 && ((uint64_t v8 = *a3, !v61) || v8))
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      uint64_t v24 = [v8 userInfo];
      int v25 = [v24 allValues];

      obuint64_t j = v25;
      uint64_t v26 = [v25 countByEnumeratingWithState:&v80 objects:buf count:16];
      if (v26)
      {
        uint64_t v65 = *(void *)v81;
        do
        {
          uint64_t v66 = v26;
          for (uint64_t i = 0; i != v66; ++i)
          {
            if (*(void *)v81 != v65) {
              objc_enumerationMutation(obj);
            }
            uint64_t v28 = *(void **)(*((void *)&v80 + 1) + 8 * i);
            uint64_t v29 = (Phase::Logger *)[v28 hasPrefix:@"Badly formed object around character"];
            if (v29)
            {
              int v30 = [v28 substringFromIndex:objc_msgSend(@"Badly formed object around character", "length")];
              int v31 = [v30 intValue];
              id v32 = v63;
              __int16 v33 = (void *)[[NSString alloc] initWithData:v32 encoding:4];
              unint64_t v34 = 0;
              int v35 = 0;
              int v36 = 0;
              if (v31 < 0) {
                int v37 = -1;
              }
              else {
                int v37 = v31;
              }
              uint64_t v38 = (v37 + 1);
              while ([v33 length] > v34)
              {
                if ([v33 characterAtIndex:v34] == 10)
                {
                  ++v35;
                  int v36 = v34;
                }
                if (v38 + 1 == ++v34)
                {

                  uint64_t v40 = **(id **)(Phase::Logger::GetInstance(v39) + 16);
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)uint64_t v69 = 136315906;
                    int v70 = "JSONParser.mm";
                    __int16 v71 = 1024;
                    int v72 = 92;
                    __int16 v73 = 1024;
                    *(_DWORD *)uint64_t v74 = v35;
                    *(_WORD *)&v74[4] = 1024;
                    *(_DWORD *)&v74[6] = v38 - v36;
                    _os_log_impl(&dword_221E5E000, v40, OS_LOG_TYPE_ERROR, "%25s:%-5d JSON parse error at line %d, column %d", v69, 0x1Eu);
                  }
                  goto LABEL_43;
                }
              }

              int64_t v41 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v43)
                                                                                                  + 16)));
              if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
              {
                uint64_t v44 = [v28 UTF8String];
                *(_DWORD *)uint64_t v69 = 136315650;
                int v70 = "JSONParser.mm";
                __int16 v71 = 1024;
                int v72 = 96;
                __int16 v73 = 2080;
                *(void *)uint64_t v74 = v44;
                _os_log_impl(&dword_221E5E000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", v69, 0x1Cu);
              }
            }
            else
            {
              int64_t v41 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v29)
                                                                                                  + 16)));
              if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
              {
                uint64_t v42 = [v28 UTF8String];
                *(_DWORD *)uint64_t v69 = 136315650;
                int v70 = "JSONParser.mm";
                __int16 v71 = 1024;
                int v72 = 101;
                __int16 v73 = 2080;
                *(void *)uint64_t v74 = v42;
                _os_log_impl(&dword_221E5E000, v41, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", v69, 0x1Cu);
              }
            }

LABEL_43:
            ;
          }
          uint64_t v26 = [obj countByEnumeratingWithState:&v80 objects:buf count:16];
        }
        while (v26);
      }
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        obuint64_t j = [v61 objectForKeyedSubscript:@"PHASEJSONVersion"];
        if (obj && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
        {
          if ([obj integerValue] == 1)
          {
            *a2 = v61;
            uint64_t v9 = 1;
LABEL_52:

            goto LABEL_53;
          }
          float32x4_t v53 = NSString;
          float32x4_t v54 = [MEMORY[0x263F086E0] mainBundle];
          float32x4_t v55 = [v54 localizedStringForKey:@"Unsupported PHASEJSONVersion.  Should be %d, found %d", &stru_26D47BF58, 0 value table];
          int32x4_t v48 = objc_msgSend(v53, "stringWithFormat:", v55, 1, objc_msgSend(obj, "intValue"), v7);

          float32x4_t v57 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v56)
                                                                                              + 16)));
          if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "JSONParser.mm";
            __int16 v76 = 1024;
            int v77 = 118;
            __int16 v78 = 2080;
            uint64_t v79 = [v48 UTF8String];
            _os_log_impl(&dword_221E5E000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
          }

          if (a3)
          {
            *(void *)&long long v80 = *MEMORY[0x263F08320];
            *(void *)buf = v48;
            float32x4_t v58 = [NSDictionary dictionaryWithObjects:buf forKeys:&v80 count:1];
            *a3 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346924647 userInfo:v58];
          }
        }
        else
        {
          uint64_t v45 = NSString;
          unsigned __int8 v46 = [MEMORY[0x263F086E0] mainBundle];
          uint64_t v47 = [v46 localizedStringForKey:@"Data is not a valid PHASE JSON" value:&stru_26D47BF58 table:0];
          int32x4_t v48 = [v45 stringWithFormat:v47];

          uint64_t v50 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v49)
                                                                                              + 16)));
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315650;
            *(void *)&uint8_t buf[4] = "JSONParser.mm";
            __int16 v76 = 1024;
            int v77 = 131;
            __int16 v78 = 2080;
            uint64_t v79 = [v48 UTF8String];
            _os_log_impl(&dword_221E5E000, v50, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
          }

          if (a3)
          {
            *(void *)&long long v80 = *MEMORY[0x263F08320];
            *(void *)buf = v48;
            float32x4_t v51 = [NSDictionary dictionaryWithObjects:buf forKeys:&v80 count:1];
            *a3 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346924648 userInfo:v51];
          }
        }
      }
      else
      {
        uint64_t v18 = NSString;
        uint64_t v19 = [MEMORY[0x263F086E0] mainBundle];
        uint64_t v20 = [v19 localizedStringForKey:@"Data is not a valid PHASE JSON" value:&stru_26D47BF58 table:0];
        obuint64_t j = [v18 stringWithFormat:v20];

        uint64_t v22 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v21)
                                                                                            + 16)));
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "JSONParser.mm";
          __int16 v76 = 1024;
          int v77 = 146;
          __int16 v78 = 2080;
          uint64_t v79 = [obj UTF8String];
          _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
        }

        if (a3)
        {
          *(void *)&long long v80 = *MEMORY[0x263F08320];
          *(void *)buf = obj;
          long long v23 = [NSDictionary dictionaryWithObjects:buf forKeys:&v80 count:1];
          *a3 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346924648 userInfo:v23];
        }
      }
    }
    uint64_t v9 = 0;
    goto LABEL_52;
  }
  unint64_t v10 = NSString;
  BOOL v11 = [MEMORY[0x263F086E0] mainBundle];
  int v12 = [v11 localizedStringForKey:@"Could not read file %@" value:&stru_26D47BF58 table:0];
  uint64_t v13 = [v62 resourceSpecifier];
  uint64_t v14 = objc_msgSend(v10, "stringWithFormat:", v12, v13);

  int v16 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v15)
                                                                                      + 16)));
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "JSONParser.mm";
    __int16 v76 = 1024;
    int v77 = 29;
    __int16 v78 = 2080;
    uint64_t v79 = [v14 UTF8String];
    _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d %s", buf, 0x1Cu);
  }

  if (a3)
  {
    uint64_t v67 = *MEMORY[0x263F08320];
    uint64_t v68 = v14;
    uint64_t v17 = [NSDictionary dictionaryWithObjects:&v68 forKeys:&v67 count:1];
    *a3 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346924647 userInfo:v17];
  }
  uint64_t v9 = 0;
LABEL_53:

  return v9;
}

void sub_221F97804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void Phase::MakeDataBundleFromJSONFile(uint64_t a1@<X0>, void *a2@<X1>, void **a3@<X3>, void *a4@<X8>)
{
  id v9 = a2;
  id v10 = 0;
  char v7 = Phase::ParseJSONFile(v9, &v10, a3);
  id v8 = v10;
  if (v7) {
    Phase::MakeDataBundle(a1, v8);
  }
  *a4 = 0;
}

void sub_221F97AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::LateReverbIRBuildControl::IsNewIRPerceptuallyDifferent(uint64_t a1, float *a2, int a3)
{
  uint64_t v6 = *((unsigned int *)a2 + 31);
  if (v6 == *(_DWORD *)(a1 + 124) && (uint64_t v7 = *((unsigned int *)a2 + 63), v7 == *(_DWORD *)(a1 + 252)))
  {
    if (v6)
    {
      id v8 = (float *)a1;
      id v9 = a2;
      do
      {
        float v10 = *v9;
        if (*v8 == 0.0)
        {
          if (v10 != 0.0) {
            goto LABEL_20;
          }
        }
        else if (v10 == 0.0 {
               || fabsf((float)(v10 / *v8) + -1.0) > (float)(Phase::SpatialModeler::LateReverbIRBuildControl::sToleranceRT60InPercent[*(unsigned int *)(a1 + 256)]
        }
                                                           / 100.0))
        {
          goto LABEL_20;
        }
        ++v9;
        ++v8;
        --v6;
      }
      while (v6);
    }
    if (v7)
    {
      BOOL v11 = a2 + 32;
      int v12 = (float *)(a1 + 128);
      do
      {
        float v13 = *v11;
        if (*v12 == 0.0)
        {
          if (v13 != 0.0) {
            goto LABEL_20;
          }
        }
        else if (v13 == 0.0 {
               || fabsf(log10f(v13 / *v12) * 10.0) > Phase::SpatialModeler::LateReverbIRBuildControl::sToleranceEnergyInDb[*(unsigned int *)(a1 + 256)])
        }
        {
          goto LABEL_20;
        }
        ++v11;
        ++v12;
        --v7;
      }
      while (v7);
    }
    return 0;
  }
  else
  {
LABEL_20:
    if (a3)
    {
      long long v15 = *(_OWORD *)a2;
      long long v16 = *((_OWORD *)a2 + 1);
      long long v17 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v17;
      *(_OWORD *)a1 = v15;
      *(_OWORD *)(a1 + 16) = v16;
      long long v18 = *((_OWORD *)a2 + 4);
      long long v19 = *((_OWORD *)a2 + 5);
      long long v20 = *((_OWORD *)a2 + 7);
      *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
      *(_OWORD *)(a1 + 112) = v20;
      *(_OWORD *)(a1 + 64) = v18;
      *(_OWORD *)(a1 + 80) = v19;
      long long v21 = *((_OWORD *)a2 + 8);
      long long v22 = *((_OWORD *)a2 + 9);
      long long v23 = *((_OWORD *)a2 + 11);
      *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
      *(_OWORD *)(a1 + 176) = v23;
      *(_OWORD *)(a1 + 128) = v21;
      *(_OWORD *)(a1 + 144) = v22;
      long long v24 = *((_OWORD *)a2 + 12);
      long long v25 = *((_OWORD *)a2 + 13);
      long long v26 = *((_OWORD *)a2 + 15);
      *(_OWORD *)(a1 + 224) = *((_OWORD *)a2 + 14);
      *(_OWORD *)(a1 + 240) = v26;
      *(_OWORD *)(a1 + 192) = v24;
      *(_OWORD *)(a1 + 208) = v25;
    }
    return 1;
  }
}

void *Phase::SpatialModeler::LateReverbSimulationImpl::AllocClusterQueryState@<X0>(Phase::SpatialModeler::LateReverbSimulationImpl *this@<X0>, Phase::SpatialModeler::LateReverbSimulation *a2@<X1>, void *a3@<X8>)
{
  void v12[4] = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(*((void *)a2 + 11) + 48)) {
    uint64_t v6 = (char *)this + 26640;
  }
  else {
    uint64_t v6 = (char *)this + 1344;
  }
  uint64_t v7 = v6 + 25256;
  id v8 = (void *)Phase::SpatialModeler::SingleBlockAllocator::Alloc(v6 + 25256, 137856, 0x10uLL);
  bzero(v8, 0x21A80uLL);
  Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState::ClusterQueryState((Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *)v8);
  v12[0] = &unk_26D4763C8;
  v12[1] = v7;
  v12[3] = v12;
  float v10 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)v12);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v12);
  v8[9] = *((void *)this + 3);
  v8[17226] = Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationBegin;
  float v10 = 0;
  *a3 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v11);
  std::unique_ptr<Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v10, 0);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v11);
}

uint64_t Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationBegin@<X0>(Phase::SpatialModeler::LateReverbSimulationImpl *this@<X0>, Phase::SpatialModeler::RoomSimulation *a2@<X1>, Phase::SpatialModeler::Query *a3@<X2>, Phase::Logger *a4@<X8>)
{
  uint64_t v122 = *MEMORY[0x263EF8340];
  uint64_t Instance = Phase::Logger::GetInstance(this);
  float v10 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 208));
  int v109 = v10;
  BOOL v11 = (Phase::Logger *)Phase::Logger::GetInstance(v10);
  if (*((unsigned char *)v11 + 1192))
  {
    int v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v11)
                                                                                        + 1184)));
    float v13 = v12;
    if ((unint64_t)v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v13, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v10, "Phase_RoomSimulation_LateReverbBegin", "LateReverbBegin", buf, 2u);
    }
  }
  double v108 = (os_signpost_id_t *)&v109;
  Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationBeginInitCommon(this, a2, a3, (uint64_t)v106);
  if (v107 == 2)
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v105, (uint64_t)v106);
    Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v108, (uint64_t)v105);
    uint64_t v14 = v105;
LABEL_20:
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v106);
  }
  long long v15 = (float *)((char *)a3 + 112800);
  uint64_t v16 = *((void *)a2 + 8);
  uint64_t v17 = *((void *)a2 + 11);
  long long v18 = (float *)((char *)a3 + 112876);
  Phase::SpatialModeler::RoomSimulationImpl::ParseOptionalProperties((uint64_t)this, v16, v17, (uint64_t *)a3 + 16940, (float *)a3 + 28219, (float *)a3 + 28216, (uint64_t)buf);
  std::__variant_detail::__assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>>::__generic_assign[abi:ne180100]<std::__variant_detail::__move_assignment<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>>((uint64_t)v106, (uint64_t)buf);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
  if (v107 == 2)
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v104, (uint64_t)v106);
    Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v108, (uint64_t)v104);
    uint64_t v14 = v104;
    goto LABEL_20;
  }
  if (*(unsigned char *)(v17 + 48)) {
    long long v20 = (Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 26720);
  }
  else {
    long long v20 = (Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 1424);
  }
  if (*v15 <= 0.0)
  {
    Phase::SpatialModeler::RayTracerState::State::operator=((uint64_t)v20 + 496, (uint64_t)a3 + 113248);
    Phase::SpatialModeler::LateReverbSimulationImpl::ClusterLateReverb((Phase::SpatialModeler::LateReverbSimulationImpl *)v103, this, a2, a3);
    Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v108, (uint64_t)v103);
    uint64_t v14 = v103;
    goto LABEL_20;
  }
  if (*(unsigned char *)(v17 + 48))
  {
    uint64_t v21 = *((void *)a2 + 11);
    uint64_t v22 = (*(uint64_t (**)(Phase::SpatialModeler::LateReverbSimulationImpl *, float))(*(void *)this + 104))(this, *v15);
    if (v22 && *(void *)(v22 + 19448))
    {
      Phase::SpatialModeler::RayTracerState::operator=((uint64_t)this + 26720, v22);
      Phase::SpatialModeler::RoomSimulationLogging::CheckLRClusterResultAndSourceListenerResultCoherence((void *)this + 3340, (uint64_t)"RoomSimulationBegin - LR after sustain -> attack cache load", 59);
      Phase::SpatialModeler::RoomSimulationLogging::logInQuerySources((Phase::Logger *)(v21 + 104), (uint64_t)"RoomSimulationBegin - LR after sustain -> attack cache load", 59);
      Phase::SpatialModeler::RoomSimulationLogging::logRayTracerStateStatus((Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 26720), (uint64_t)"RoomSimulationBegin - LR after sustain -> attack cache load", 59);
      Phase::SpatialModeler::RoomSimulationImpl::CheckClusterQueryInput((uint64_t)this, a2, (uint64_t)v110);
      if (v111 == 2)
      {
        std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)v101, (uint64_t)v110);
LABEL_91:
        std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v110);
        Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v108, (uint64_t)v101);
        uint64_t v14 = v101;
        goto LABEL_20;
      }
      if (*((void *)this + 5771))
      {
        uint64_t v40 = *((void *)a2 + 8);
        int64_t v41 = (uint64_t *)*((void *)a2 + 12);
        __int16 v91 = (void *)*((void *)a2 + 11);
        uint64_t v42 = (char *)operator new(0x150uLL, (std::align_val_t)0x10uLL);
        uint64_t v43 = v42;
        uint64_t v93 = v40;
        uint64_t v44 = 0;
        *((_DWORD *)v42 + 8) = 0;
        *(_OWORD *)uint64_t v42 = 0u;
        *((_OWORD *)v42 + 1) = 0u;
        *(void *)(v42 + 36) = 1065353216;
        *(void *)(v42 + 44) = 0;
        *((_DWORD *)v42 + 13) = 1065353216;
        do
        {
          uint64_t v45 = &v42[v44];
          *((_DWORD *)v45 + 14) = 0;
          *((void *)v45 + 8) = 0;
          v44 += 16;
        }
        while (v44 != 128);
        *((void *)v42 + 23) = 0;
        *(void *)&long long v117 = 0;
        DWORD2(v117) = 0;
        Phase::Subbands<float>::Subbands((uint64_t)(v42 + 192), &v117, 3);
        v43[320] = 0;
        double v119 = (unint64_t *)&unk_26D476410;
        LOBYTE(v120) = 0;
        int v121 = &v119;
        *(void *)&long long v117 = v43;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v117 + 8, (uint64_t)&v119);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v119);
        uint64_t v46 = v117;
        *(void *)&long long v117 = 0;
        *(void *)buf = v46;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v117 + 8);
        *((void *)&v115 + 1) = 1;
        std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v117);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v117 + 1);
        __int16 v96 = (Phase::Geometry::SystemState *)(v41 + 1);
        std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100](v41 + 1, (uint64_t *)buf);
        v41[6] = *((void *)&v115 + 1);
        std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
        uint64_t v47 = operator new(1uLL, (std::align_val_t)1uLL);
        double v119 = (unint64_t *)&unk_26D4764E8;
        LOBYTE(v120) = 0;
        int v121 = &v119;
        *(void *)&long long v117 = v47;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v117 + 8, (uint64_t)&v119);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v119);
        uint64_t v48 = v117;
        *(void *)&long long v117 = 0;
        *(void *)buf = v48;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v117 + 8);
        *((void *)&v115 + 1) = 1;
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v117);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v117 + 1);
        float v90 = (char **)(v41 + 7);
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](v41 + 7, (uint64_t *)buf);
        v41[12] = *((void *)&v115 + 1);
        std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
        unint64_t v49 = v91[18];
        uint64_t v112 = 8;
        unint64_t v113 = v49;
        double v119 = &v113;
        __int16 v120 = &v112;
        Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput>(unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(v49, (uint64_t)&v119, &v117);
        uint64_t v50 = v117;
        *(void *)&long long v117 = 0;
        *(void *)buf = v50;
        std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v117 + 8);
        *((void *)&v115 + 1) = v49;
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v117);
        std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v117 + 1);
        uint64_t v89 = v41 + 13;
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100](v41 + 13, (uint64_t *)buf);
        v41[18] = *((void *)&v115 + 1);
        std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
        float32x4_t v51 = (float32x2_t *)std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
        uint64_t v53 = v40;
        if (!v91[18])
        {
LABEL_84:
          Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryCleanupCommon(this, a2, a3, v52);
          int v84 = 1;
LABEL_90:
          int v102 = v84;
          goto LABEL_91;
        }
        float32x4_t v54 = v91;
        unint64_t v55 = 0;
        uint64_t v56 = 16;
        while (1)
        {
          uint64_t v57 = v54[13];
          uint64_t v58 = v57 + 304 * v55;
          uint64_t v59 = *(void *)(v58 + 144);
          if (*(_DWORD *)(v53 + 136) <= v59) {
            break;
          }
          uint64_t v60 = *(void *)(v53 + 120);
          if (*(_DWORD *)(v60 + 24 * v59 + 20) != HIDWORD(v59)) {
            break;
          }
          float32x4_t v51 = *(float32x2_t **)(v60 + 24 * *(void *)(v58 + 144));
          if (!v51 || v51->i32[0] != 3) {
            break;
          }
          float v61 = *((float *)this + 12380) - v51[9].f32[0];
          float32x2_t v62 = vsub_f32(*(float32x2_t *)((char *)this + 49512), v51[8]);
          float v63 = sqrtf(vaddv_f32(vmul_f32(v62, v62)) + (float)(v61 * v61));
          if (v63 <= 1000000.0) {
            float v64 = v63;
          }
          else {
            float v64 = 1000000.0;
          }
          unint64_t v113 = *(void *)(*((void *)this + 5770) + 16);
          long long v117 = xmmword_2220A59B0;
          if (v54[12])
          {
            char v65 = 0;
            long long v117 = *(_OWORD *)v54[7];
          }
          else
          {
            char v65 = 1;
          }
          *const char *v90 = v65;
          LODWORD(v112) = 0;
          Phase::SpatialModeler::getClosestLRClusterToSourceInClusteringResults(v51, (Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 26720), &v113, &v117, (float *)&v112);
          uint64_t v66 = *(void *)v96;
          *(void *)(v66 + 184) = v113;
          *(_OWORD *)uint64_t v66 = v117;
          *(unsigned char *)(*(void *)v96 + 320) = 1;
          *const char *v90 = 1;
          uint64_t v67 = *(unsigned int *)(v58 + 140);
          if (v67)
          {
            uint64_t v53 = v93;
            uint64_t v68 = (float *)(v57 + v56);
            float v69 = -3.4028e38;
            do
            {
              float v70 = *v68++;
              float v71 = v70;
              if (v69 < v70) {
                float v69 = v71;
              }
              --v67;
            }
            while (v67);
          }
          else
          {
            float v69 = -3.4028e38;
            uint64_t v53 = v93;
          }
          float v72 = (float)(fmaxf(v64, 1.0) * -0.5) + -6.0;
          uint64_t v73 = *v89 + 16 * v55;
          *(void *)uint64_t v73 = 0;
          if (v72 >= *(float *)&v112) {
            float v74 = *(float *)&v112;
          }
          else {
            float v74 = (float)(v72 + *(float *)&v112) * 0.5;
          }
          *(double *)(v73 + 8) = v74;
          float SharedEnergyReFixedDb = Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb((Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 26720), &v113);
          uint64_t v76 = *v89 + 16 * v55;
          float v77 = *(double *)(v76 + 8);
          float v78 = v77 + (float)(*(float *)(v53 + 928) * (float)(SharedEnergyReFixedDb - v77));
          if (!*(void *)(v53 + 904)) {
            float v78 = *(double *)(v76 + 8);
          }
          *(double *)(v76 + 8) = v78;
          *(float *)&double v119 = v69;
          *((float *)&v119 + 1) = v69;
          *(float *)&__int16 v120 = v69;
          float32x4_t v51 = (float32x2_t *)Phase::Subbands<float>::Subbands((uint64_t)buf, &v119, 3);
          uint64_t v79 = *(_OWORD **)v96;
          long long v80 = v116[2];
          v79[16] = v116[1];
          v79[17] = v80;
          long long v81 = v116[4];
          v79[18] = v116[3];
          v79[19] = v81;
          long long v82 = *(_OWORD *)&buf[16];
          v79[12] = *(_OWORD *)buf;
          v79[13] = v82;
          long long v83 = v116[0];
          v79[14] = v115;
          v79[15] = v83;
          ++v55;
          float32x4_t v54 = v91;
          v56 += 304;
          if (v55 >= v91[18]) {
            goto LABEL_84;
          }
        }
        int v87 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v51) + 1184);
        if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
        {
          uint64_t v88 = *(void *)(v58 + 144);
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "LateReverbSimulationImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 773;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(void *)&buf[20] = v88;
          _os_log_impl(&dword_221E5E000, v87, OS_LOG_TYPE_ERROR, "%25s:%-5d Source from persisting state not found in the Geo Layer (Handle %llu).", buf, 0x1Cu);
        }
        unsigned int v85 = (char *)this + 72;
        uint64_t v86 = 6;
      }
      else
      {
        unsigned int v85 = (char *)this + 72;
        uint64_t v86 = 4;
      }
      v101[0] = v86;
      v101[1] = v85;
      int v84 = 2;
      goto LABEL_90;
    }
  }
  else
  {
    if (!*((unsigned char *)a3 + 112947))
    {
      uint64_t v32 = *((void *)a2 + 8);
      uint64_t v94 = *((void *)a2 + 11);
      uint64_t v33 = *(void *)(v94 + 152);
      if (*(_DWORD *)(v32 + 136) <= v33
        || (uint64_t v34 = *(void *)(v32 + 120), *(_DWORD *)(v34 + 24 * v33 + 20) != HIDWORD(v33))
        || (int v35 = *(_DWORD **)(v34 + 24 * *(void *)(v94 + 152))) == 0
        || *v35 != 2)
      {
        int v35 = 0;
      }
      uint64_t v92 = (uint64_t)v35;
      uint64_t v95 = (Phase::Geometry::SystemState *)*((void *)a2 + 8);
      if (Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache)
      {
        uint64_t v36 = caulk::concurrent::multi_buffer<Phase::SpatialModeler::RayTracerState,3>::read_if ((unsigned int *)Phase::SpatialModeler::RoomSimulation::psERtoLRModelerCache);
        if (v36)
        {
          if ((float)((float)(std::chrono::steady_clock::now().__d_.__rep_ - *(void *)(v36 + 25048)) / 1000000000.0) < (float)(2.0 / *v18))
          {
            Phase::SpatialModeler::RayTracerState::CopyStateAndAssignToModelerInstance((uint64_t)this + 1424, (uint64_t)this, (uint64_t *)(v94 + 104), v92, v36, (uint64_t)v95);
            Phase::SpatialModeler::SimulationController::RequireSimulation((float *)this + 20, (Phase::SpatialModeler::Query *)((char *)a3 + 112752), (Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 1424), v95, (uint64_t)buf);
            long long v37 = v116[0];
            *(_OWORD *)((char *)this + 24264) = v115;
            *(_OWORD *)((char *)this + 24280) = v37;
            *(_OWORD *)((char *)this + 24294) = *(_OWORD *)((char *)v116 + 14);
            long long v38 = *(_OWORD *)&buf[16];
            *(_OWORD *)((char *)this + 24232) = *(_OWORD *)buf;
            *(_OWORD *)((char *)this + 24248) = v38;
            Phase::SpatialModeler::RoomSimulationLogging::logInQuerySources((Phase::Logger *)(v94 + 104), (uint64_t)"RoomSimulationBegin - LR after ER -> LR modeler cache load", 58);
            Phase::SpatialModeler::RoomSimulationLogging::logRayTracerStateStatus((Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 1424), (uint64_t)"RoomSimulationBegin - LR after ER -> LR modeler cache load", 58);
            Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationFinish(this, (Phase::Geometry::SystemState **)a2, a3, (Phase::Logger *)v100);
            Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v108, (uint64_t)v100);
            uint64_t v14 = v100;
            goto LABEL_20;
          }
        }
      }
    }
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationBeginHandleSustainQueryCommon(this, a2, a3, (Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 1424), v19);
    uint64_t v25 = 0;
    long long v26 = (char *)this + 24251;
    do
    {
      int v27 = v26[v25];
      if (v26[v25]) {
        BOOL v28 = 1;
      }
      else {
        BOOL v28 = v25 == 18;
      }
      ++v25;
    }
    while (!v28);
    if (!v27)
    {
      Phase::SpatialModeler::RayTracerState::State::operator=((uint64_t)this + 1920, (uint64_t)a3 + 113248);
      Phase::SpatialModeler::LateReverbSimulationImpl::ClusterLateReverb((Phase::SpatialModeler::LateReverbSimulationImpl *)v99, this, a2, a3);
      Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v108, (uint64_t)v99);
      uint64_t v14 = v99;
      goto LABEL_20;
    }
    if (!*((unsigned char *)this + 26464) || *((float *)this + 387) != *v18 || *((float *)this + 368) != *v15)
    {
      uint64_t v29 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v24)
                                                                                          + 1184)));
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        Phase::SpatialModeler::RoomSimulationLogging::MakeInfoString((uint64_t)this + 1424, *((_DWORD *)this + 8));
        int v30 = v118 >= 0 ? &v117 : (long long *)v117;
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "LateReverbSimulationImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 256;
        *(_WORD *)&unsigned char buf[18] = 2080;
        *(void *)&buf[20] = v30;
        _os_log_impl(&dword_221E5E000, v29, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s", buf, 0x1Cu);
        if (v118 < 0) {
          operator delete((void *)v117);
        }
      }
    }
  }
  int v31 = *(_DWORD *)(v16 + 168)
     && !*(unsigned char *)(v16 + 932)
     && *((void *)this + 6) <= (unint64_t)((uint64_t)(*((void *)v20 + 2617) - *((void *)v20 + 2616)) >> 2);
  Phase::SpatialModeler::RoomSimulationImpl::PrepareRayTrace(a3, v20, (Phase::SpatialModeler::RayTracerState *)*((unsigned int *)this + 15), v31);
  std::string v39 = operator new(8uLL);
  *std::string v39 = a3;
  memset(buf, 0, 24);
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(buf, v39, (uint64_t)(v39 + 1), 1uLL);
  operator delete(v39);
  memset(v97, 0, sizeof(v97));
  std::vector<Phase::Geometry::SceneQueryBatch *>::__init_with_size[abi:ne180100]<Phase::Geometry::SceneQueryBatch **,Phase::Geometry::SceneQueryBatch **>(v97, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
  int v98 = 3;
  Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v108, (uint64_t)v97);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v97);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v106);
}

void sub_221F98A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60)
{
}

void Phase::SpatialModeler::LateReverbSimulationImpl::RunCullQuery(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_DWORD *)(*(void *)(a1 + 96) + 8) = 0;
  *(_DWORD *)(a2 + 24) = 1;
}

void Phase::SpatialModeler::LateReverbSimulationImpl::RunClusterQuery(Phase::Logger *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a3)
  {
    if (*(unsigned char *)(*(void *)(a2 + 88) + 48)) {
      id v8 = (char *)a1 + 26640;
    }
    else {
      id v8 = (char *)a1 + 1344;
    }
    id v9 = (uint64_t (**)(Phase::Logger *, uint64_t, uint64_t))(a3 + 137808);
    if (*(uint64_t (**)@<X0>(Phase::SpatialModeler::LateReverbSimulationImpl *@<X0>, Phase::SpatialModeler::RoomSimulation *@<X1>, Phase::SpatialModeler::Query *@<X2>, Phase::Logger *@<X8>))(a3 + 137808) == Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationBegin)
    {
      uint64_t Instance = Phase::Logger::GetInstance(a1);
      BOOL v11 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 208));
      *((void *)v8 + 2966) = v11;
      int v12 = (Phase::Logger *)Phase::Logger::GetInstance(v11);
      if (*((unsigned char *)v12 + 1192))
      {
        float v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v12)
                                                                                            + 1184)));
        uint64_t v14 = v13;
        os_signpost_id_t v15 = *((void *)v8 + 2966);
        if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_221E5E000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v15, "Phase_RoomSimulation_LRClusterQuery", "LateReverbClusterQuery", buf, 2u);
        }
      }
    }
    uint64_t v16 = (Phase::Logger *)(*v9)(a1, a2, a3);
    if (*(_DWORD *)(a4 + 24) == 1)
    {
      uint64_t v17 = (Phase::Logger *)Phase::Logger::GetInstance(v16);
      if (*((unsigned char *)v17 + 1192))
      {
        long long v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v17)
                                                                                            + 1184)));
        long long v19 = v18;
        os_signpost_id_t v20 = *((void *)v8 + 2966);
        if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
        {
          *(_WORD *)uint64_t v21 = 0;
          _os_signpost_emit_with_name_impl(&dword_221E5E000, v19, OS_SIGNPOST_INTERVAL_END, v20, "Phase_RoomSimulation_LRClusterQuery", (const char *)&unk_222112ABB, v21, 2u);
        }
      }
    }
  }
  else
  {
    *(void *)a4 = 1;
    *(void *)(a4 + 8) = (char *)a1 + 72;
    *(_DWORD *)(a4 + 24) = 2;
  }
}

void sub_221F98CF4(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::LateReverbSimulationImpl::RunSpatialQuery(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v322 = *MEMORY[0x263EF8340];
  uint64_t Instance = Phase::Logger::GetInstance((Phase::Logger *)a1);
  uint64_t v6 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 208));
  uint64_t v7 = (Phase::Logger *)Phase::Logger::GetInstance(v6);
  if (*((unsigned char *)v7 + 216))
  {
    id v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v7)
                                                                                       + 208)));
    id v9 = v8;
    if ((unint64_t)v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v9, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v6, "Phase_LateReverb_Spatial_Query_Begin", "LateReverbSimulation: Spatial Query Begin", buf, 2u);
    }
  }
  uint64_t v10 = Phase::Logger::GetInstance(v7);
  spid = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(v10 + 208));
  BOOL v11 = (Phase::Logger *)Phase::Logger::GetInstance(spid);
  if (*((unsigned char *)v11 + 1192))
  {
    int v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v11)
                                                                                        + 1184)));
    float v13 = v12;
    if ((unint64_t)spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v13, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)spid, "Phase_RoomSimulation_LRSpatialQuery", "LateReverbSpatialQuery", buf, 2u);
    }
  }
  uint64_t v14 = Phase::Logger::GetInstance(v11);
  v283 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(v14 + 416));
  os_signpost_id_t v15 = (Phase::Logger *)Phase::Logger::GetInstance(v283);
  if (*((unsigned char *)v15 + 1192))
  {
    uint64_t v16 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v15)
                                                                                        + 1184)));
    uint64_t v17 = v16;
    if ((unint64_t)v283 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v17, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v283, "Phase_RoomSimulation_HandleResultsLateReverb", "LateReverbHandleResults", buf, 2u);
    }
  }
  long long v18 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationImpl::CheckSpatialQueryInput(a1, a2, (uint64_t)v293);
  if (v294 == 2)
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, (uint64_t)v293);
    goto LABEL_345;
  }
  uint64_t v19 = a2[8];
  uint64_t v20 = a2[11];
  uint64_t v21 = a2[12];
  uint64_t v22 = *(void *)(v20 + 552);
  if (*(_DWORD *)(v19 + 136) <= v22
    || (uint64_t v23 = *(void *)(v19 + 120), *(_DWORD *)(v23 + 24 * v22 + 20) != HIDWORD(v22))
    || (v274 = *(float32x2_t **)(v23 + 24 * *(void *)(v20 + 552))) == 0
    || v274->i32[0] != 2)
  {
    v274 = 0;
  }
  if (*(unsigned char *)(v20 + 48)) {
    uint64_t v24 = a1 + 26720;
  }
  else {
    uint64_t v24 = a1 + 1424;
  }
  unint64_t v25 = 1;
  unint64_t v292 = 1;
  uint64_t v282 = v19;
  if (*(void *)(v20 + 376) != 1)
  {
    long long v26 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v18)
                                                                                        + 1184)));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      uint64_t v27 = *(void *)(v20 + 376);
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = "LateReverbSimulationImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 874;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v292;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = v27;
      _os_log_impl(&dword_221E5E000, v26, OS_LOG_TYPE_ERROR, "%25s:%-5d Cluster Key mismatch in HandleResultsLR: %llu vs. %llu", buf, 0x26u);
    }

    unint64_t v25 = v292;
  }
  BOOL v28 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t *)(v24 + 19464), v25, (uint64_t *)&v292);
  uint64_t v30 = 0;
  v280 = (_DWORD *)(v24 + 19016);
  BOOL v31 = v28[3] == 0;
  int v32 = *(unsigned __int8 *)(v20 + 48);
  uint64_t v33 = v24 + 22865;
  do
  {
    int v34 = *(unsigned __int8 *)(v33 + v30);
    if (*(unsigned char *)(v33 + v30)) {
      BOOL v35 = 1;
    }
    else {
      BOOL v35 = v30 == 18;
    }
    ++v30;
  }
  while (!v35);
  v276 = (uint64_t *)(v24 + 19464);
  if (v34) {
    BOOL v36 = 1;
  }
  else {
    BOOL v36 = *(unsigned char *)(v24 + 168) == 0;
  }
  char v37 = *(unsigned char *)(v24 + 132);
  v291[0] = 0;
  v291[1] = 0;
  unint64_t v279 = *(void *)(a2[11] + 8);
  uint64_t v38 = *(void *)(a1 + 16);
  if (*(void *)(v38 + 2760) && (uint64_t v38 = Phase::Geometry::SystemDebugger::GetFromSystem(v38)) != 0)
  {
    std::string v39 = *(void **)(v38 + 112);
    if (!v39) {
      goto LABEL_56;
    }
    unint64_t v40 = *(void *)(v20 + 552);
    uint64_t v41 = v38 + 112;
    do
    {
      unint64_t v42 = v39[4];
      BOOL v43 = v42 >= v40;
      if (v42 >= v40) {
        uint64_t v44 = v39;
      }
      else {
        uint64_t v44 = v39 + 1;
      }
      if (v43) {
        uint64_t v41 = (uint64_t)v39;
      }
      std::string v39 = (void *)*v44;
    }
    while (*v44);
    if (v41 == v38 + 112)
    {
LABEL_56:
      v278 = 0;
    }
    else
    {
      unint64_t v45 = *(void *)(v41 + 32);
      uint64_t v46 = v41 + 40;
      if (v45 <= v40) {
        uint64_t v47 = (void *)v46;
      }
      else {
        uint64_t v47 = 0;
      }
      v278 = v47;
    }
    BOOL v273 = *(unsigned char *)(v38 + 80) != 0;
    uint64_t v275 = v38;
    BOOL v48 = *(unsigned char *)(v38 + 40) != 0;
  }
  else
  {
    v278 = 0;
    uint64_t v275 = 0;
    BOOL v273 = 0;
    BOOL v48 = 1;
  }
  BOOL v272 = v48;
  if (*(float *)(v24 + 19512) > 0.0 && *v280)
  {
    if (!*(unsigned char *)(v24 + 168)) {
      goto LABEL_75;
    }
    uint64_t v49 = 0;
    uint64_t v50 = v24 + 22808;
    do
    {
      int v51 = *(unsigned __int8 *)(v50 + v49);
      if (*(unsigned char *)(v50 + v49)) {
        BOOL v52 = 1;
      }
      else {
        BOOL v52 = v49 == 18;
      }
      ++v49;
    }
    while (!v52);
    if (v51) {
      goto LABEL_75;
    }
    uint64_t v53 = 0;
    uint64_t v54 = v24 + 22827;
    do
    {
      int v55 = *(unsigned __int8 *)(v54 + v53);
      if (*(unsigned char *)(v54 + v53)) {
        BOOL v56 = 1;
      }
      else {
        BOOL v56 = v53 == 18;
      }
      ++v53;
    }
    while (!v56);
    if (v55)
    {
LABEL_75:
      float v57 = (float)(*(float *)(v24 + 19308) / (float)(*v280 - *(_DWORD *)(v24 + 64))) * 100.0;
      if (v57 > 3.0)
      {
        uint64_t v58 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v38)
                                                                                            + 1184)));
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "LateReverbSimulationImpl.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 924;
          *(_WORD *)&unsigned char buf[18] = 2048;
          *(double *)&buf[20] = v57;
          _os_log_impl(&dword_221E5E000, v58, OS_LOG_TYPE_ERROR, "%25s:%-5d High energy loss: %.1f%%.\n", buf, 0x1Cu);
        }
      }
    }
  }
  Phase::SpatialModeler::RoomSimulationLogging::logInvalidIntersections((Phase::SpatialModeler::RoomSimulationLogging *)v24, v29);
  int v60 = v32 | v31;
  if (!((v37 | v36) | v60))
  {
    int v66 = v60;
    uint64_t v67 = v278;
    uint64_t v68 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v276, v292, (uint64_t *)&v292)[3];
    if (v68) {
      uint64_t v68 = (Phase::Logger *)Phase::SpatialModeler::CopyMetadata<float>((uint64_t)v68, v21);
    }
    uint64_t v271 = 0;
    goto LABEL_209;
  }
  if (*(void *)(v20 + 208))
  {
    float v61 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v59)
                                                                                        + 1184)));
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "LateReverbSimulationImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 937;
      _os_log_impl(&dword_221E5E000, v61, OS_LOG_TYPE_ERROR, "%25s:%-5d LR Spatial Query is called with an individual source but must be called with a cluster key.", buf, 0x12u);
    }
  }
  int8x8_t v62 = *(int8x8_t *)(v24 + 19432);
  if (!*(void *)&v62) {
    goto LABEL_103;
  }
  unint64_t v63 = *(void *)(v20 + 376);
  uint8x8_t v64 = (uint8x8_t)vcnt_s8(v62);
  v64.i16[0] = vaddlv_u8(v64);
  if (v64.u32[0] > 1uLL)
  {
    unint64_t v65 = *(void *)(v20 + 376);
    if (*(void *)&v62 <= v63) {
      unint64_t v65 = v63 % *(void *)&v62;
    }
  }
  else
  {
    unint64_t v65 = (*(void *)&v62 - 1) & v63;
  }
  float v69 = *(void **)(*(void *)(v24 + 19424) + 8 * v65);
  if (!v69 || (float v70 = (void *)*v69) == 0)
  {
LABEL_103:
    uint64_t v271 = 0;
    goto LABEL_104;
  }
  while (1)
  {
    unint64_t v71 = v70[1];
    if (v71 == v63) {
      break;
    }
    if (v64.u32[0] > 1uLL)
    {
      if (v71 >= *(void *)&v62) {
        v71 %= *(void *)&v62;
      }
    }
    else
    {
      v71 &= *(void *)&v62 - 1;
    }
    if (v71 != v65) {
      goto LABEL_103;
    }
LABEL_102:
    float v70 = (void *)*v70;
    if (!v70) {
      goto LABEL_103;
    }
  }
  if (v70[2] != v63) {
    goto LABEL_102;
  }
  if (!v70[8]) {
    goto LABEL_103;
  }
  Phase::SpatialModeler::RayTracerState::CopyDirectivityHistogram((Phase::Logger *)v24, v70 + 8, buf);
  long long v110 = *(_OWORD *)buf;
  *(void *)buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v59 = v291[1];
  *(_OWORD *)v291 = v110;
  uint64_t v271 = (uint64_t)(v70 + 3);
  uint64_t v76 = (Phase::SpatialModeler::RayTracerState *)v110;
  if (!(void)v110)
  {
LABEL_104:
    if (*(void *)(v20 + 208))
    {
      float v72 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v59)
                                                                                          + 1184)));
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        uint64_t v73 = *(void *)(v20 + 208);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "LateReverbSimulationImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 957;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v73;
        float v74 = "%25s:%-5d No histogram found for given sound source handle %llu.";
        goto LABEL_109;
      }
    }
    else
    {
      float v72 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v59)
                                                                                          + 1184)));
      if (os_log_type_enabled(v72, OS_LOG_TYPE_ERROR))
      {
        uint64_t v75 = *(void *)(v20 + 376);
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = "LateReverbSimulationImpl.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 962;
        *(_WORD *)&unsigned char buf[18] = 2048;
        *(void *)&buf[20] = v75;
        float v74 = "%25s:%-5d No histogram found for given cluster key %llu.";
LABEL_109:
        _os_log_impl(&dword_221E5E000, v72, OS_LOG_TYPE_ERROR, v74, buf, 0x1Cu);
      }
    }

    uint64_t v76 = 0;
  }
  long long v301 = 0u;
  memset(v300, 0, sizeof(v300));
  long long v298 = 0u;
  long long v299 = 0u;
  long long v297 = 0u;
  memset(v296, 0, sizeof(v296));
  memset(buf, 0, sizeof(buf));
  if (v272)
  {
    uint64_t v77 = *(void *)(a1 + 48);
    if (v77)
    {
      float SumOfActiveRays = Phase::SpatialModeler::RayTracerState::getSumOfActiveRays((Phase::SpatialModeler::RayTracerState *)v24);
      float v79 = *(float *)(v24 + 19512);
      float v80 = 0.0;
      long long v81 = (float *)(v24 + 19904);
      do
      {
        float v82 = 3.4028e38;
        if (SumOfActiveRays > 0.0 && v79 > 0.0 && *v81 > 0.0) {
          float v82 = sqrtf((float)((float)(v79 * 0.163) / *v81) / (float)(SumOfActiveRays * 12.566)) * 4.34;
        }
        if (v82 >= v80) {
          float v80 = v82;
        }
        ++v81;
        --v77;
      }
      while (v77);
      if (v80 > 3.0 && v80 < 3.4028e38)
      {
        int v84 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v59)
                                                                                            + 1184)));
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
        {
          __dst[0].i32[0] = 136315650;
          *(uint64_t *)((char *)__dst[0].i64 + 4) = (uint64_t)"LateReverbSimulationImpl.mm";
          __dst[0].i16[6] = 1024;
          *(__int32 *)((char *)&__dst[0].i32[3] + 2) = 984;
          __dst[1].i16[1] = 2048;
          *(double *)((char *)__dst[1].i64 + 4) = v80;
          _os_log_impl(&dword_221E5E000, v84, OS_LOG_TYPE_DEBUG, "%25s:%-5d High ray tracing simulation uncertainty for total level: %.1fdB", (uint8_t *)__dst, 0x1Cu);
        }
      }
    }
    else
    {
      float v80 = 0.0;
    }
    if (*(unsigned char *)(v282 + 932))
    {
LABEL_131:
      unsigned int v85 = (_OWORD *)(v24 + 19776);
    }
    else
    {
      float v86 = fminf(fmaxf((float)(v80 + -0.5) / 2.5, 0.0), 1.0);
      if (*(unsigned char *)(a2[11] + 48)) {
        uint64_t v87 = a1 + 26640;
      }
      else {
        uint64_t v87 = a1 + 1344;
      }
      uint64_t v88 = v87 + 25136;
      *(void *)(v87 + 25136) = v76;
      float SharedEnergyReFixedDb = Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb((Phase::SpatialModeler::RayTracerState *)v24, &v292);
      float v90 = expf((float)((float)(SharedEnergyReFixedDb * -10.0) / 10.0) * 0.23026);
      uint64_t v91 = v24 + 20800;
      float v92 = (float)(v86 + -1.0) + 1.0;
      if (!*(_DWORD *)(v282 + 168))
      {
        Phase::SpatialModeler::TailCorrection::execute(v88, (Phase::SpatialModeler::TailCorrection *)v24, v91, (float *)(v24 + 20544), v92, v90);
        goto LABEL_131;
      }
      unsigned int v85 = (_OWORD *)(v24 + 21040);
      Phase::SpatialModeler::TailCorrection::executeTargetRt60(v88, (Phase::SpatialModeler::TailCorrection *)v24, v91, v24 + 21040, (float *)(v24 + 20544), v92, v90);
    }
    long long v93 = v85[5];
    v296[1] = v85[4];
    long long v297 = v93;
    long long v94 = v85[7];
    long long v298 = v85[6];
    long long v299 = v94;
    long long v95 = v85[1];
    *(_OWORD *)buf = *v85;
    *(_OWORD *)&uint8_t buf[16] = v95;
    long long v96 = v85[3];
    *(_OWORD *)&unsigned char buf[32] = v85[2];
    v296[0] = v96;
    uint64_t v76 = v291[0];
  }
  if (!v76) {
    goto LABEL_181;
  }
  uint64_t v97 = *(void *)(a1 + 48);
  memset(__dst, 0, sizeof(__dst));
  long long v317 = 0u;
  long long v318 = 0u;
  long long v319 = 0u;
  long long v320 = 0u;
  memset(v321, 0, 28);
  *(_DWORD *)&v321[28] = v97;
  int v98 = (Phase::Logger *)Phase::Logger::GetInstance(v59);
  if (*(void *)(a1 + 48) == (uint64_t)(*((void *)v98 + 185) - *((void *)v98 + 184)) >> 2)
  {
    float v99 = (Phase::Logger *)Phase::Logger::GetInstance(v98);
    float v100 = (unsigned char *)*((void *)v99 + 184);
    float v101 = (Phase::Logger *)Phase::Logger::GetInstance(v99);
    int v102 = (unsigned char *)*((void *)v101 + 185);
    if (v102 != v100) {
      float v101 = (Phase::Logger *)memmove(__dst, v100, v102 - v100);
    }
  }
  else
  {
    if (*(_DWORD *)&v321[28]) {
      bzero(__dst, 4 * *(unsigned int *)&v321[28]);
    }
    int v103 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v98)
                                                                                         + 1184)));
    BOOL v104 = os_log_type_enabled(v103, OS_LOG_TYPE_ERROR);
    if (v104)
    {
      uint64_t v105 = Phase::Logger::GetInstance((Phase::Logger *)v104);
      uint64_t v106 = (uint64_t)(*(void *)(v105 + 1480) - *(void *)(v105 + 1472)) >> 2;
      uint64_t v107 = *(void *)(a1 + 48);
      *(_DWORD *)v315 = 136315906;
      *(void *)&v315[4] = "LateReverbSimulationImpl.mm";
      *(_WORD *)&v315[12] = 1024;
      *(_DWORD *)&v315[14] = 1054;
      *(_WORD *)&v315[18] = 2048;
      *(void *)&v315[20] = v106;
      *(_WORD *)&v315[28] = 2048;
      *(void *)&v315[30] = v107;
      _os_log_impl(&dword_221E5E000, v103, OS_LOG_TYPE_ERROR, "%25s:%-5d Error setting phase_room_eq_lr: Its sub-band count of %zu does not match the modeler internal sub-band count of %zu", v315, 0x26u);
    }
  }
  if ((*(_DWORD *)(v282 + 168) | 2) != 3) {
    goto LABEL_164;
  }
  double v108 = (Phase::Logger *)Phase::Logger::GetInstance(v101);
  if (!*((unsigned char *)v108 + 1440) || *(unsigned char *)(v282 + 932)) {
    goto LABEL_164;
  }
  uint64_t v109 = *(void *)(a1 + 48);
  switch(v109)
  {
    case 31:
      *(_OWORD *)&v315[108] = *(_OWORD *)(v282 + 736);
      long long v113 = *(_OWORD *)(v282 + 708);
      *(_OWORD *)&v315[64] = *(_OWORD *)(v282 + 692);
      *(_OWORD *)&v315[80] = v113;
      *(_OWORD *)&v315[96] = *(_OWORD *)(v282 + 724);
      long long v114 = *(_OWORD *)(v282 + 644);
      *(_OWORD *)v315 = *(_OWORD *)(v282 + 628);
      *(_OWORD *)&v315[16] = v114;
      long long v115 = *(_OWORD *)(v282 + 676);
      *(_OWORD *)&v315[32] = *(_OWORD *)(v282 + 660);
      *(_OWORD *)&v315[48] = v115;
      *(_DWORD *)&v315[124] = 31;
      goto LABEL_160;
    case 10:
      long long v111 = *(_OWORD *)(v282 + 316);
      *(_OWORD *)v315 = *(_OWORD *)(v282 + 300);
      *(_OWORD *)&v315[16] = v111;
      uint64_t v112 = *(void *)(v282 + 332);
      memset(&v315[40], 0, 80);
      *(void *)&v315[32] = v112;
      *(void *)&v315[120] = 0xA00000000;
LABEL_160:
      Phase::Subbands<float>::operator+=(__dst, (float32x4_t *)v315);
      goto LABEL_164;
    case 3:
      *(void *)v315 = *(void *)(v282 + 196);
      *(_DWORD *)&v315[8] = *(_DWORD *)(v282 + 204);
      *(_DWORD *)&v315[124] = 3;
      memset(&v315[12], 0, 112);
      goto LABEL_160;
  }
  __int16 v116 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v108)
                                                                                       + 1184)));
  if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
  {
    uint64_t v117 = *(void *)(a1 + 48);
    *(_DWORD *)v315 = 136315650;
    *(void *)&v315[4] = "LateReverbSimulationImpl.mm";
    *(_WORD *)&v315[12] = 1024;
    *(_DWORD *)&v315[14] = 1083;
    *(_WORD *)&v315[18] = 2048;
    *(void *)&v315[20] = v117;
    _os_log_impl(&dword_221E5E000, v116, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported sub-band count: %zu\n", v315, 0x1Cu);
  }

LABEL_164:
  if (*(void *)(a1 + 48))
  {
    uint64_t v118 = 0;
    unsigned int v119 = 0;
    do
    {
      float v120 = __exp10f(__dst[0].f32[v118] / 10.0);
      if (!*((unsigned char *)v76 + 36))
      {
        uint64_t v121 = *((unsigned int *)v76 + 7);
        if (v121 > v119)
        {
          int v122 = *((_DWORD *)v76 + 6);
          if (v122)
          {
            double v123 = (float *)(*((void *)v76 + 1) + 4 * v119);
            uint64_t v124 = 4 * v121;
            do
            {
              *double v123 = v120 * *v123;
              double v123 = (float *)((char *)v123 + v124);
              --v122;
            }
            while (v122);
          }
        }
      }
      unint64_t v125 = *(void *)(a1 + 48);
      uint64_t v118 = ++v119;
    }
    while (v125 > v119);
    HIDWORD(v301) = *(void *)(a1 + 48);
    if (v125)
    {
      uint64_t v126 = 0;
      int v127 = *((unsigned __int8 *)v76 + 36);
      do
      {
        float v128 = 0.0;
        if (!v127)
        {
          int v129 = *((_DWORD *)v76 + 6);
          if (v129)
          {
            float64_t v130 = (float *)(*((void *)v76 + 1) + 4 * v126);
            do
            {
              float v128 = v128 + *v130;
              v130 += *((unsigned int *)v76 + 7);
              --v129;
            }
            while (v129);
          }
        }
        *((float *)v300 + v126++) = v128;
      }
      while (v126 != v125);
    }
  }
  else
  {
    HIDWORD(v301) = 0;
  }
LABEL_181:
  char v131 = *(unsigned char *)(v24 + 132) | Phase::SpatialModeler::LateReverbIRBuildControl::IsNewIRPerceptuallyDifferent(v24 + 22896, (float *)buf, 1);
  BOOL v132 = v131 != 0;
  if (v273 || *(unsigned char *)(v24 + 72)) {
    float v133 = *(float *)(v24 + 108);
  }
  else {
    float v133 = 0.0;
  }
  if (v291[0]) {
    float v134 = *((float *)v291[0] + 10);
  }
  else {
    float v134 = 0.0;
  }
  int v135 = (v131 | v60);
  float v136 = *(float *)(v24 + 464);
  float v138 = log10f((float)((float)(1.0 / (float)((float)(v134 * v136) * (float)(v134 * v136))) * *(float *)(v24 + 104))+ 1.0e-15);
  double v139 = *(double *)(a1 + 40);
  if (*(unsigned char *)(v24 + 135)) {
    int v140 = 0;
  }
  else {
    int v140 = (int)(v139 * v134);
  }
  if (v135 && v291[0])
  {
    float v141 = *(float *)(v24 + 19512);
    float v142 = *(float *)(v24 + 128);
    float v143 = *(float *)(v24 + 112);
    uint64_t v144 = Phase::Logger::GetInstance(v137);
    float v146 = expf((float)((float)(*(float *)(v144 + 1204) * 10.0) / 10.0) * 0.11513);
    float v145 = v139;
    Phase::SpatialModeler::generateDirectionalMetadataLR(v291[0], v140, (uint64_t *)v21, v279, v141, v136, v145, fminf(fmaxf(v138 * 10.0, -144.0), -60.0), v142, v133, v143, v146);
    int v66 = v60;
    double v147 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v276, v292, (uint64_t *)&v292);
    uint64_t v148 = v147[3];
    if (!v148)
    {
      double v149 = operator new(0xE8uLL);
      v149[1] = 0;
      v149[2] = 0;
      *double v149 = &unk_26D478260;
      *((_DWORD *)v149 + 6) = 3;
      uint64_t v148 = (uint64_t)(v149 + 3);
      *((unsigned char *)v149 + 28) = 1;
      v149[4] = 0;
      *((_DWORD *)v149 + 57) = 0;
      v149[9] = 0;
      v149[10] = 0;
      v149[8] = 0;
      v149[15] = 0;
      v149[16] = 0;
      v149[14] = 0;
      v149[20] = 0;
      v149[21] = 0;
      v149[26] = 0;
      v149[27] = 0;
      *((_WORD *)v149 + 112) = 0;
      v149[25] = 0;
      double v150 = (std::__shared_weak_count *)v147[4];
      v147[3] = v149 + 3;
      v147[4] = v149;
      if (v150)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v150);
        uint64_t v148 = v147[3];
      }
    }
    uint64_t v68 = (Phase::Logger *)Phase::SpatialModeler::CopyMetadata<float>(v21, v148);
    if (v273 || *(unsigned char *)(v24 + 72))
    {
      unint64_t v151 = *(void *)(v21 + 48);
      if (v151)
      {
        uint64_t v152 = 0;
        uint64_t v153 = 0;
        float v154 = *(float *)(v24 + 76);
        float v155 = *(float *)(v24 + 108) - v154;
        double v156 = *(double *)(a1 + 40);
        uint64_t v157 = *(void *)(v21 + 56);
        float v158 = (float)(v156 * (float)(v154 + v154)) + -1.0;
        do
        {
          float v159 = *(float *)(v157 + 4 * v153) - v155;
          if (v159 >= 0.0 && v159 < *(float *)(v24 + 76))
          {
            float v160 = cosf((float)((float)(v156 * v159) * 6.2832) / v158);
            if (v279)
            {
              float v161 = (float)(1.0 - v160) * 0.5;
              float64x2_t v162 = (float *)(*(void *)(v21 + 104) + *(void *)(*(void *)(v21 + 104) + 8) * v152 + 16);
              unint64_t v163 = v279;
              do
              {
                *float64x2_t v162 = v161 * *v162;
                ++v162;
                --v163;
              }
              while (v163);
            }
          }
          ++v153;
          v152 += 4;
        }
        while (v151 > v153);
      }
    }
  }
  else
  {
    int v66 = v60;
    uint64_t v68 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v276, v292, (uint64_t *)&v292)[3];
    if (v68) {
      uint64_t v68 = (Phase::Logger *)Phase::SpatialModeler::CopyMetadata<float>((uint64_t)v68, v21);
    }
  }
  uint64_t v67 = v278;
  if (!v132)
  {
LABEL_209:
    if (!v66
      && *(void *)(v282 + 904) == *(void *)(a1 + 1288)
      && vabds_f32(*(float *)(v282 + 928), *(float *)(a1 + 1296)) < 0.05)
    {
      int v164 = 0;
      int v277 = 0;
      goto LABEL_216;
    }
  }
  float v165 = Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb((Phase::SpatialModeler::RayTracerState *)v24, &v292);
  float v166 = *(float *)(v282 + 928);
  float64x2_t v167 = *(uint64_t **)(a1 + 1280);
  uint64_t v169 = Phase::Logger::GetInstance(v168);
  float v170 = expf((float)((float)(v165 * -10.0) / 10.0) * 0.23026);
  uint64_t v68 = (Phase::Logger *)Phase::SpatialModeler::SpaceBlending((unint64_t *)(v282 + 904), (float *)(v282 + 912), v167, 1, *(_DWORD *)(v169 + 1228), v21, *(void *)(a1 + 48), v166, -144.0, v170);
  int v277 = (int)v68;
  if (*(unsigned char *)(v24 + 170))
  {
    __int32 v171 = v274[7].i32[1];
    float v172 = -v274[7].f32[0];
    *(float32x2_t *)buf = vneg_f32(v274[6]);
    *(float *)&uint8_t buf[8] = v172;
    *(_DWORD *)&unsigned char buf[12] = v171;
    Phase::SpatialModeler::RotateMetadata<float>(v21, (float *)buf);
  }
  int v164 = 1;
LABEL_216:
  if (v275)
  {
    if (v67)
    {
      float64x2_t v173 = v291[0];
      if (v291[0])
      {
        if (!*(unsigned char *)(v20 + 48))
        {
          if (v67[9])
          {
            *(void *)&unsigned char buf[40] = 0;
            *(void *)&v296[0] = 0;
            *((void *)&v296[1] + 1) = 0;
            long long v297 = 0uLL;
            *((void *)&v298 + 1) = 0;
            long long v299 = 0uLL;
            memset((char *)v300 + 8, 0, 96);
            long long v301 = 0u;
            long long v302 = 0u;
            long long v303 = 0u;
            long long v304 = 0u;
            long long v305 = 0u;
            long long v306 = 0u;
            long long v313 = 0u;
            long long v314 = 0u;
            long long v311 = 0u;
            long long v312 = 0u;
            long long v309 = 0u;
            long long v310 = 0u;
            *(void *)buf = 0;
            *(void *)&uint8_t buf[8] = 0;
            uint64_t v174 = *(void *)(v24 + 22576);
            *(void *)&unsigned char buf[32] = 0;
            *(void *)&uint8_t buf[16] = v174;
            *((void *)&v296[0] + 1) = *((unsigned int *)v291[0] + 7);
            *(void *)&v296[1] = *((unsigned int *)v291[0] + 6);
            __dst[0].i32[0] = 0;
            std::vector<float>::assign((char **)&v296[1] + 1, LODWORD(v296[1]) * (unint64_t)DWORD2(v296[0]), __dst);
            unint64_t v175 = *((void *)&v296[0] + 1);
            if (*((void *)&v296[0] + 1))
            {
              LODWORD(v176) = 0;
              int v177 = 0;
              long long v178 = v296[1];
              do
              {
                if ((void)v178)
                {
                  LODWORD(v179) = 0;
                  unsigned int v180 = *((_DWORD *)v173 + 7);
                  unsigned int v181 = v176;
                  do
                  {
                    int v182 = 0;
                    if (v180 > v176 && *((_DWORD *)v173 + 6) > v179) {
                      int v182 = *(_DWORD *)(*((void *)v173 + 1) + 4 * v181);
                    }
                    *(_DWORD *)(*((void *)&v178 + 1) + 4 * (v177 + v179)) = v182;
                    unint64_t v179 = (v179 + 1);
                    v181 += v180;
                  }
                  while ((unint64_t)v178 > v179);
                  v177 += v179;
                }
                unint64_t v176 = (v176 + 1);
              }
              while (v175 > v176);
            }
            std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator()((uint64_t)(v67 + 6), (uint64_t)buf);
            Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)buf);
          }
          if (v67[5])
          {
            *(void *)(v24 + 23216) = *(void *)(v24 + 22576);
            v183 = *(unsigned char **)(v24 + 23240);
            v184 = *(unsigned char **)(v24 + 23232);
            *(void *)&unsigned char buf[40] = 0;
            *(void *)&v296[0] = 0;
            *(void *)&unsigned char buf[32] = 0;
            size_t v185 = v183 - v184;
            BOOL v35 = v183 == v184;
            uint64_t v186 = (v183 - v184) >> 2;
            uint64_t v187 = 0x6DB6DB6DB6DB6DB7 * v186;
            *(void *)(v24 + 23224) = 0x6DB6DB6DB6DB6DB7 * v186;
            long long v188 = *(_OWORD *)(v24 + 23216);
            *(_OWORD *)buf = *(_OWORD *)(v24 + 23200);
            *(_OWORD *)&uint8_t buf[16] = v188;
            if (!v35)
            {
              std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugIntersection>::__vallocate[abi:ne180100](&buf[32], 0x6DB6DB6DB6DB6DB7 * v186);
              uint64_t v189 = *(void *)&buf[40];
              memmove(*(void **)&buf[40], v184, v185);
              *(void *)&unsigned char buf[40] = v189 + 28 * v187;
            }
            *(_OWORD *)((char *)v296 + 8) = *(_OWORD *)(v24 + 23256);
            long long v297 = 0uLL;
            *((void *)&v296[1] + 1) = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)&v296[1] + 1, *(const void **)(v24 + 23272), *(void *)(v24 + 23280), (uint64_t)(*(void *)(v24 + 23280) - *(void *)(v24 + 23272)) >> 2);
            long long v298 = *(unint64_t *)(v24 + 23296);
            long long v299 = 0uLL;
            uint64_t v190 = *(void *)(v24 + 23304);
            uint64_t v191 = *(void *)(v24 + 23312);
            __dst[0].i64[0] = (uint64_t)&v298 + 8;
            __dst[0].i8[8] = 0;
            if (v191 != v190)
            {
              std::vector<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>::__vallocate[abi:ne180100]((void *)&v298 + 1, 0xCCCCCCCCCCCCCCCDLL * ((v191 - v190) >> 3));
              *(void *)&long long v299 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource>,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*,Phase::SpatialModeler::RoomSimulationDebugger::DebugImageSource*>((uint64_t)&v299 + 8, v190, v191, v299);
            }
            Phase::SpatialModeler::RoomSimulationDebugger::DebugDirectionalMetadata::DebugDirectionalMetadata((Phase::SpatialModeler::RoomSimulationDebugger::DebugDirectionalMetadata *)v300, (const Phase::SpatialModeler::RoomSimulationDebugger::DebugDirectionalMetadata *)(v24 + 23328));
            Phase::SpatialModeler::RoomSimulationDebugger::DebugDirectionalMetadata::DebugDirectionalMetadata((Phase::SpatialModeler::RoomSimulationDebugger::DebugDirectionalMetadata *)((char *)&v300[6] + 8), (const Phase::SpatialModeler::RoomSimulationDebugger::DebugDirectionalMetadata *)(v24 + 23432));
            uint64_t v307 = *(void *)(v24 + 23536);
            int v308 = *(_DWORD *)(v24 + 23544);
            *(void *)&long long v310 = 0;
            long long v309 = 0uLL;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v309, *(const void **)(v24 + 23552), *(void *)(v24 + 23560), (uint64_t)(*(void *)(v24 + 23560) - *(void *)(v24 + 23552)) >> 2);
            long long v311 = 0uLL;
            *((void *)&v310 + 1) = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)&v310 + 1, *(const void **)(v24 + 23576), *(void *)(v24 + 23584), (uint64_t)(*(void *)(v24 + 23584) - *(void *)(v24 + 23576)) >> 2);
            long long v312 = 0uLL;
            *(void *)&long long v313 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v312, *(const void **)(v24 + 23600), *(void *)(v24 + 23608), (uint64_t)(*(void *)(v24 + 23608) - *(void *)(v24 + 23600)) >> 2);
            long long v314 = 0uLL;
            *((void *)&v313 + 1) = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)&v313 + 1, *(const void **)(v24 + 23624), *(void *)(v24 + 23632), (uint64_t)(*(void *)(v24 + 23632) - *(void *)(v24 + 23624)) >> 2);
            uint64_t v67 = v278;
            std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator()((uint64_t)(v278 + 2), (uint64_t)buf);
            Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)buf);
          }
          char v192 = v164 ^ 1;
          if (!v67[21]) {
            char v192 = 1;
          }
          if ((v192 & 1) == 0)
          {
            *(void *)&unsigned char buf[40] = 0;
            *(void *)&v296[0] = 0;
            *((void *)&v296[1] + 1) = 0;
            long long v297 = 0uLL;
            *((void *)&v298 + 1) = 0;
            long long v299 = 0uLL;
            memset((char *)v300 + 8, 0, 96);
            long long v301 = 0u;
            long long v302 = 0u;
            long long v303 = 0u;
            long long v304 = 0u;
            long long v305 = 0u;
            long long v306 = 0u;
            long long v313 = 0u;
            long long v314 = 0u;
            long long v311 = 0u;
            long long v312 = 0u;
            long long v309 = 0u;
            long long v310 = 0u;
            memset(buf, 0, 24);
            *(void *)&unsigned char buf[32] = 0;
            unint64_t v193 = *(void *)(v21 + 48);
            __dst[0].i64[0] = 0;
            __dst[0].i32[2] = 0;
            std::vector<Phase::Vector<float,3ul>>::assign((char **)&v301, v193, __dst);
            __dst[0].i32[0] = 0;
            std::vector<float>::assign((char **)&v302 + 1, v193, __dst);
            *(_DWORD *)v315 = 0;
            std::vector<float>::vector(__dst, v279, v315);
            std::vector<std::vector<float>>::assign((uint64_t *)&v304, v193, (uint64_t)__dst);
            if (__dst[0].i64[0])
            {
              __dst[0].i64[1] = __dst[0].i64[0];
              operator delete((void *)__dst[0].i64[0]);
            }
            __dst[0].i8[0] = 0;
            std::vector<unsigned char>::assign((char **)&v305 + 1, v193, (char *)__dst);
            *((void *)&v300[6] + 1) = v193;
            *(float32x2_t *)&uint8_t buf[16] = v274[1];
            if (v193)
            {
              uint64_t v194 = 0;
              for (uint64_t i = 0; i != v193; ++i)
              {
                v196 = (_DWORD *)(*(void *)(v21 + 8) + 12 * i);
                v197 = (_DWORD *)(v301 + 12 * i);
                _DWORD *v197 = *v196;
                v197[1] = v196[1];
                v197[2] = v196[2];
                *(_DWORD *)(*((void *)&v302 + 1) + 4 * i) = *(_DWORD *)(*(void *)(v21 + 56) + 4 * i);
                *(unsigned char *)(*((void *)&v305 + 1) + i) = *(unsigned char *)(*(void *)(v21 + 144) + i);
                if (v279)
                {
                  v198 = *(_DWORD **)(v304 + 24 * i);
                  v199 = (int *)(*(void *)(v21 + 104) + *(void *)(*(void *)(v21 + 104) + 8) * v194 + 16);
                  unint64_t v200 = v279;
                  do
                  {
                    int v201 = *v199++;
                    *v198++ = v201;
                    --v200;
                  }
                  while (v200);
                }
                v194 += 4;
              }
            }
            std::function<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::operator()((uint64_t)(v67 + 18), (uint64_t)buf);
            Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::~RoomSimulationDebugView((Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)buf);
          }
        }
      }
    }
  }
  if (v164)
  {
    *(unsigned char *)(v21 + 4) = 1;
    float v202 = Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb((Phase::SpatialModeler::RayTracerState *)v24, &v292);
    float v203 = expf((float)((float)(v202 * 10.0) / 10.0) * 0.23026);
    float v204 = v203;
    if (*(void *)(a1 + 1304))
    {
      uint64_t v205 = v282;
      if (v291[0])
      {
        *(void *)&long long v299 = 0;
        long long v297 = 0u;
        long long v298 = 0u;
        memset(v296, 0, sizeof(v296));
        memset(buf, 0, sizeof(buf));
        *((int32x2_t *)&v299 + 1) = vrev64_s32(*(int32x2_t *)(v24 + 19508));
        uint64_t v206 = Phase::Logger::GetInstance(v68);
        int v207 = v277;
        float v208 = expf((float)((float)(*(float *)(v206 + 1204) * 10.0) / 10.0) * 0.23026);
        if (*(unsigned char *)(v282 + 932))
        {
          uint64_t v209 = *(void *)(v21 + 104);
          if (v209) {
            unint64_t v210 = *(void *)(v209 + 8);
          }
          else {
            unint64_t v210 = 0;
          }
          *(_DWORD *)v315 = 0;
          std::vector<float>::vector(__dst, v210, v315);
          Phase::SpatialModeler::GetRT60EstimateFromDirectionalMetadata(v21, (uint64_t *)__dst, -3.0, -15.0);
          Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationHandleResultsLateReverberation(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &)::$_0::operator()<unsigned long,std::vector<float>,Phase::PackedSubbands<float,10ul>>((Phase::Logger *)((__dst[0].i64[1] - __dst[0].i64[0]) >> 2), __dst[0].i64[0], __dst[0].i64[1], (uint64_t)buf);
          if (__dst[0].i64[0])
          {
            __dst[0].i64[1] = __dst[0].i64[0];
            operator delete((void *)__dst[0].i64[0]);
          }
        }
        else
        {
          if (*(_DWORD *)(v282 + 168)) {
            uint64_t v211 = v24 + 21040;
          }
          else {
            uint64_t v211 = v24 + 19776;
          }
          Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationHandleResultsLateReverberation(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &)::$_0::operator()<unsigned long,std::array<float,31ul>,Phase::PackedSubbands<float,10ul>>(*(Phase::Logger **)(a1 + 48), v211, (uint64_t)buf);
        }
        if (v277)
        {
          memset(&v315[8], 0, 40);
          Phase::SpatialModeler::GetRoomDataForSpaceBlendTarget((uint64_t *)(v282 + 904), (uint64_t)v315);
          uint64_t v212 = 0;
          *((float32x2_t *)&v299 + 1) = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v315, *(float *)(v282 + 928)), (float32x2_t)vrev64_s32(*(int32x2_t *)(v24 + 19508)), 1.0 - *(float *)(v282 + 928));
          do
          {
            *(float *)&buf[v212] = (float)(*(float *)(v282 + 928) * *(float *)&v315[v212 + 8])
                                 + (float)((float)(1.0 - *(float *)(v282 + 928)) * *(float *)&buf[v212]);
            v212 += 4;
          }
          while (v212 != 40);
          std::vector<unsigned int> __p = 0;
          v289 = 0;
          v290 = 0;
          if (*(void *)(a1 + 48))
          {
            unint64_t v213 = 0;
            do
            {
              float v214 = v204 * Phase::SpatialModeler::GetTotalEnergyInBand<float>(v21, v213);
              v215 = v289;
              if (v289 >= (float *)v290)
              {
                v217 = (float *)__p;
                uint64_t v218 = ((char *)v289 - (unsigned char *)__p) >> 2;
                unint64_t v219 = v218 + 1;
                if ((unint64_t)(v218 + 1) >> 62) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v220 = v290 - (unsigned char *)__p;
                if ((v290 - (unsigned char *)__p) >> 1 > v219) {
                  unint64_t v219 = v220 >> 1;
                }
                if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v221 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v221 = v219;
                }
                if (v221)
                {
                  v222 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v290, v221);
                  v217 = (float *)__p;
                  v215 = v289;
                }
                else
                {
                  v222 = 0;
                }
                v223 = (float *)&v222[4 * v218];
                float *v223 = v214;
                uint64_t v216 = (uint64_t)(v223 + 1);
                while (v215 != v217)
                {
                  int v224 = *((_DWORD *)v215-- - 1);
                  *((_DWORD *)v223-- - 1) = v224;
                }
                std::vector<unsigned int> __p = v223;
                v289 = (float *)v216;
                v290 = &v222[4 * v221];
                if (v217) {
                  operator delete(v217);
                }
              }
              else
              {
                float *v289 = v214;
                uint64_t v216 = (uint64_t)(v215 + 1);
              }
              v289 = (float *)v216;
              ++v213;
              v225 = *(Phase::Logger **)(a1 + 48);
            }
            while ((unint64_t)v225 > v213);
            v226 = __p;
            uint64_t v205 = v282;
            int v207 = v277;
          }
          else
          {
            uint64_t v216 = 0;
            v226 = 0;
            v225 = 0;
          }
          Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationHandleResultsLateReverberation(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &)::$_0::operator()<unsigned long,std::vector<float>,Phase::PackedSubbands<float,10ul>>(v225, (uint64_t)v226, v216, (uint64_t)&v297);
          v285 = 0;
          v286 = 0;
          uint64_t v287 = 0;
          Phase::SpatialModeler::RayTracerState::calculateTotalSpecularEarlyEnergy((Phase::SpatialModeler::RayTracerState *)v24, (char *)__dst);
          float v248 = *(float *)(v205 + 928);
          uint64_t v250 = Phase::Logger::GetInstance(v249);
          Phase::SpatialModeler::EstimateEarlyEnergy((int *)__dst, &v285, *(_DWORD *)(v250 + 1228), *(uint64_t **)(a1 + 1280), *(void *)(v282 + 904), v248);
          v251 = v285;
          v252 = v286;
          if (v285 == v286)
          {
            v255 = v285;
            v254 = v285;
          }
          else
          {
            v253 = (float *)v285;
            do
            {
              float *v253 = v208 * *v253;
              ++v253;
            }
            while (v253 != v252);
            v254 = v285;
            v255 = v286;
          }
          Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationHandleResultsLateReverberation(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &)::$_0::operator()<unsigned long,std::vector<float>,Phase::PackedSubbands<float,10ul>>((Phase::Logger *)(((char *)v252 - v251) >> 2), (uint64_t)v254, (uint64_t)v255, (uint64_t)&buf[40]);
          if (v285)
          {
            v286 = (float *)v285;
            operator delete(v285);
          }
        }
        else
        {
          std::vector<unsigned int> __p = 0;
          v289 = 0;
          v290 = 0;
          if (*(void *)(a1 + 48))
          {
            v227 = 0;
            unint64_t v228 = 0;
            do
            {
              float v229 = 0.0;
              if (!*((unsigned char *)v291[0] + 36))
              {
                int v230 = *((_DWORD *)v291[0] + 6);
                if (v230)
                {
                  v231 = (float *)(*((void *)v291[0] + 1) + 4 * v228);
                  do
                  {
                    float v229 = v229 + *v231;
                    v231 += *((unsigned int *)v291[0] + 7);
                    --v230;
                  }
                  while (v230);
                }
              }
              float v232 = v204 * (float)(v208 * v229);
              if (v227 >= (float *)v290)
              {
                v233 = (float *)__p;
                uint64_t v234 = ((char *)v227 - (unsigned char *)__p) >> 2;
                unint64_t v235 = v234 + 1;
                if ((unint64_t)(v234 + 1) >> 62) {
                  std::vector<float>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v236 = v290 - (unsigned char *)__p;
                if ((v290 - (unsigned char *)__p) >> 1 > v235) {
                  unint64_t v235 = v236 >> 1;
                }
                if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v237 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v237 = v235;
                }
                if (v237)
                {
                  v238 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v290, v237);
                  v233 = (float *)__p;
                  v227 = v289;
                }
                else
                {
                  v238 = 0;
                }
                v239 = (float *)&v238[4 * v234];
                float *v239 = v232;
                v240 = v239 + 1;
                while (v227 != v233)
                {
                  int v241 = *((_DWORD *)v227-- - 1);
                  *((_DWORD *)v239-- - 1) = v241;
                }
                std::vector<unsigned int> __p = v239;
                v289 = v240;
                v290 = &v238[4 * v237];
                if (v233) {
                  operator delete(v233);
                }
                v227 = v240;
              }
              else
              {
                *v227++ = v232;
              }
              v289 = v227;
              ++v228;
              v242 = *(Phase::Logger **)(a1 + 48);
            }
            while ((unint64_t)v242 > v228);
            v243 = __p;
          }
          else
          {
            v227 = 0;
            v243 = 0;
            v242 = 0;
          }
          Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationHandleResultsLateReverberation(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &)::$_0::operator()<unsigned long,std::vector<float>,Phase::PackedSubbands<float,10ul>>(v242, (uint64_t)v243, (uint64_t)v227, (uint64_t)&v297);
          Phase::SpatialModeler::RayTracerState::calculateTotalSpecularEarlyEnergy((Phase::SpatialModeler::RayTracerState *)v24, v315);
          uint64_t v244 = *(unsigned int *)&v315[124];
          memset(__dst, 0, sizeof(__dst));
          long long v317 = 0u;
          long long v318 = 0u;
          long long v319 = 0u;
          long long v320 = 0u;
          memset(v321, 0, 28);
          *(_DWORD *)&v321[28] = *(_DWORD *)&v315[124];
          if (*(_DWORD *)&v315[124])
          {
            v245 = __dst;
            v246 = (float *)v315;
            do
            {
              float v247 = *v246++;
              v245->f32[0] = v208 * v247;
              v245 = (float32x4_t *)((char *)v245 + 4);
              --v244;
            }
            while (v244);
          }
          Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationHandleResultsLateReverberation(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &)::$_0::operator()<unsigned long,std::array<float,31ul>,Phase::PackedSubbands<float,10ul>>(*(Phase::Logger **)(a1 + 48), (uint64_t)__dst, (uint64_t)&buf[40]);
        }
        if (__p)
        {
          v289 = (float *)__p;
          operator delete(__p);
        }
        uint64_t v256 = *(void *)(a1 + 1304);
        long long v319 = v296[1];
        long long v320 = v297;
        *(_OWORD *)v321 = v298;
        *(_OWORD *)&v321[16] = v299;
        __dst[0] = *(float32x4_t *)buf;
        __dst[1] = *(float32x4_t *)&buf[16];
        long long v317 = *(_OWORD *)&buf[32];
        long long v318 = v296[0];
        uint64_t v257 = **(void **)(v256 + 8);
        std::vector<unsigned int> __p = 0;
        LOBYTE(v285) = 1;
        uint64_t v258 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v257, 144, (unint64_t *)&__p, (BOOL *)&v285);
        if (!v258)
        {
          v268 = (Phase::Logger *)Phase::Logger::GetInstance(0);
          Phase::Logger::DumpTailspinWithThrottleAsync(v268, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
          v269 = **(id **)(v257 + 48);
          if (os_log_type_enabled(v269, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v315 = 136315394;
            *(void *)&v315[4] = "CommandQueue.hpp";
            *(_WORD *)&v315[12] = 1024;
            *(_DWORD *)&v315[14] = 100;
            _os_log_impl(&dword_221E5E000, v269, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; b"
              "uffer is full, unable to grow.\"",
              v315,
              0x12u);
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
        }
        if ((_BYTE)v285)
        {
          v259 = **(id **)(v257 + 48);
          if (os_log_type_enabled(v259, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)v315 = 136315906;
            *(void *)&v315[4] = "CommandQueue.hpp";
            *(_WORD *)&v315[12] = 1024;
            *(_DWORD *)&v315[14] = 89;
            *(_WORD *)&v315[18] = 2048;
            *(void *)&v315[20] = __p;
            *(_WORD *)&v315[28] = 2048;
            *(void *)&v315[30] = 144;
            _os_log_impl(&dword_221E5E000, v259, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", v315, 0x26u);
          }
        }
        *(void *)uint64_t v258 = &unk_26D478298;
        *(void *)(v258 + 8) = v256;
        float32x4_t v260 = __dst[0];
        *(_OWORD *)(v258 + 80) = v319;
        *(_OWORD *)(v258 + 96) = v320;
        *(_OWORD *)(v258 + 112) = *(_OWORD *)v321;
        *(_OWORD *)(v258 + 128) = *(_OWORD *)&v321[16];
        *(float32x4_t *)(v258 + 16) = v260;
        *(float32x4_t *)(v258 + 32) = __dst[1];
        *(_OWORD *)(v258 + 48) = v317;
        *(_OWORD *)(v258 + 64) = v318;
        Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v257, 144);
        atomic_store(0, (unsigned __int8 *)(v257 + 40));
        uint64_t v205 = v282;
        uint64_t v68 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::logRoomStatisticsAtIRBuild(v24, v271, (uint64_t)buf, *(unsigned __int8 *)(v282 + 932), v207, v204);
      }
    }
    else
    {
      uint64_t v205 = v282;
      if (v291[0]) {
        uint64_t v68 = (Phase::Logger *)Phase::SpatialModeler::RoomSimulationLogging::logRoomStatisticsAtIRBuild((Phase::SpatialModeler::RoomSimulationLogging *)v24, v291[0], (const Phase::SpatialModeler::DirectivityHistogram *)*(unsigned __int8 *)(v282 + 932), v203);
      }
    }
    *(_DWORD *)(a1 + 1296) = *(_DWORD *)(v205 + 928);
    *(void *)(a1 + 1288) = *(void *)(v205 + 904);
    ++*(_DWORD *)(v24 + 22132);
  }
  else
  {
    *(unsigned char *)(v21 + 4) = 0;
  }
  if (v291[0]) {
    Phase::SpatialModeler::RayTracerState::FreeDirectivityHistogram((Phase::Logger *)v24, v291);
  }
  *(_DWORD *)&buf[24] = 1;
  v261 = (Phase::Logger *)Phase::Logger::GetInstance(v68);
  if (*((unsigned char *)v261 + 1192))
  {
    v262 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v261)
                                                                                         + 1184)));
    v263 = v262;
    if ((unint64_t)v283 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v262))
    {
      __dst[0].i16[0] = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v263, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v283, "Phase_RoomSimulation_HandleResultsLateReverb", (const char *)&unk_222112ABB, (uint8_t *)__dst, 2u);
    }
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor(a3, (uint64_t)buf);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
  if (v291[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v291[1]);
  }
LABEL_345:
  v264 = (Phase::Logger *)std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v293);
  v265 = (Phase::Logger *)Phase::Logger::GetInstance(v264);
  if (*((unsigned char *)v265 + 1192))
  {
    v266 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v265)
                                                                                         + 1184)));
    v267 = v266;
    if ((unint64_t)spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v266))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v267, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)spid, "Phase_RoomSimulation_LRSpatialQuery", (const char *)&unk_222112ABB, buf, 2u);
    }
  }
}

void sub_221F9AD9C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    __cxa_begin_catch(a1);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v3);
    __cxa_end_catch();
    JUMPOUT(0x221F9AAFCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationBegin(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(Phase::Logger *a1, os_signpost_id_t **a2, uint64_t a3)
{
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(a1);
  if (*((unsigned char *)Instance + 1192))
  {
    uint64_t v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                       + 1184)));
    id v8 = v7;
    os_signpost_id_t v9 = **a2;
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      *(_WORD *)BOOL v11 = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v8, OS_SIGNPOST_INTERVAL_END, v9, "Phase_RoomSimulation_LateReverbBegin", (const char *)&unk_222112ABB, v11, 2u);
    }
  }
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a3);
}

uint64_t Phase::SpatialModeler::LateReverbSimulationImpl::ClusterLateReverb(Phase::SpatialModeler::LateReverbSimulationImpl *this, Phase::SpatialModeler::RoomSimulation *a2, Phase::SpatialModeler::Query *a3, Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState *a4)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  Phase::SpatialModeler::RoomSimulationImpl::CheckClusterQueryInput((uint64_t)a2, a3, (uint64_t)v108);
  if (v109 == 2)
  {
    std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)this, (uint64_t)v108);
    return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v108);
  }
  uint64_t v6 = *((void *)a3 + 8);
  uint64_t v7 = *((void *)a3 + 11);
  id v8 = (uint64_t *)*((void *)a3 + 12);
  if (*(unsigned char *)(v7 + 48)) {
    os_signpost_id_t v9 = (float32x2_t *)((char *)a2 + 26720);
  }
  else {
    os_signpost_id_t v9 = (float32x2_t *)((char *)a2 + 1424);
  }
  uint64_t v10 = (char *)operator new(0x150uLL, (std::align_val_t)0x10uLL);
  BOOL v11 = v10;
  uint64_t v12 = 0;
  *((_DWORD *)v10 + 8) = 0;
  *(_OWORD *)uint64_t v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *(void *)(v10 + 36) = 1065353216;
  *(void *)(v10 + 44) = 0;
  *((_DWORD *)v10 + 13) = 1065353216;
  do
  {
    float v13 = &v10[v12];
    *((_DWORD *)v13 + 14) = 0;
    *((void *)v13 + 8) = 0;
    v12 += 16;
  }
  while (v12 != 128);
  float v99 = a3;
  *((void *)v10 + 23) = 0;
  memset(v119, 0, sizeof(v119));
  Phase::Subbands<float>::Subbands((uint64_t)(v10 + 192), v119, 3);
  v11[320] = 0;
  *(void *)&long long v126 = &unk_26D476410;
  BYTE8(v126) = 0;
  int v127 = &v126;
  *(void *)unsigned int v119 = v11;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v119[8], (uint64_t)&v126);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v126);
  uint64_t v14 = *(void *)v119;
  *(void *)unsigned int v119 = 0;
  *(void *)buf = v14;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v119[8]);
  *((void *)&v113 + 1) = 1;
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v119);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v119[8]);
  float v100 = (_OWORD **)(v8 + 1);
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100](v8 + 1, (uint64_t *)buf);
  v8[6] = *((void *)&v113 + 1);
  std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
  os_signpost_id_t v15 = operator new(1uLL, (std::align_val_t)1uLL);
  *(void *)&long long v126 = &unk_26D4764E8;
  BYTE8(v126) = 0;
  int v127 = &v126;
  *(void *)unsigned int v119 = v15;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v119[8], (uint64_t)&v126);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v126);
  uint64_t v16 = *(void *)v119;
  *(void *)unsigned int v119 = 0;
  *(void *)buf = v16;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v119[8]);
  *((void *)&v113 + 1) = 1;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v119);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v119[8]);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](v8 + 7, (uint64_t *)buf);
  v8[12] = *((void *)&v113 + 1);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
  uint64_t v107 = (Phase::SpatialModeler::RayTracerState *)1;
  uint64_t v17 = v8[1];
  *(void *)(v17 + 184) = 1;
  *(unsigned char *)(v17 + 320) = 1;
  *(unsigned char *)v8[7] = 1;
  *(_OWORD *)uint64_t v17 = xmmword_2220A59B0;
  if (*(void *)(v7 + 96))
  {
    long long v18 = *(_OWORD **)(v7 + 56);
    if (*(void *)v18) {
      *(_OWORD *)uint64_t v17 = *v18;
    }
  }
  *(void *)buf = &v107;
  uint64_t v19 = std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)&v9[2428], (unint64_t *)&v107, (uint64_t)&std::piecewise_construct, (void **)buf);
  *(_OWORD *)(v19 + 11) = **v100;
  float MaximumEnergy = Phase::SpatialModeler::GetMaximumEnergy((Phase::SpatialModeler *)v9, (const Phase::SpatialModeler::RayTracerState *)(v7 + 152), v20);
  float v23 = __exp10f((float)(v9[18].f32[1] - v9[18].f32[0]) / 10.0);
  float32x2_t v24 = v9[2366];
  uint64_t v25 = *(void *)&v9[2367] - *(void *)&v24;
  if (v25)
  {
    uint64_t v26 = v25 / 56;
    if ((unint64_t)(v25 / 56) <= 1) {
      uint64_t v26 = 1;
    }
    uint64_t v27 = 48;
    while (1)
    {
      uint64_t v28 = *(void *)(*(void *)&v24 + v27);
      if (*(_DWORD *)(v6 + 136) <= v28) {
        break;
      }
      uint64_t v29 = *(void *)(v6 + 120);
      if (*(_DWORD *)(v29 + 24 * v28 + 20) != HIDWORD(v28)) {
        break;
      }
      uint64_t v30 = *(_DWORD **)(v29 + 24 * *(void *)(*(void *)&v24 + v27));
      if (!v30 || *v30 != 3) {
        break;
      }
      v27 += 56;
      if (!--v26) {
        goto LABEL_20;
      }
    }
    int v34 = **(id **)(Phase::Logger::GetInstance(v22) + 1184);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      uint64_t v35 = *(void *)(*(void *)&v9[2366] + v27);
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "LateReverbSimulationImpl.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 579;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v35;
      _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d Source from persisting state not found in the Geo Layer (Handle %llu).", buf, 0x1Cu);
    }
    *(void *)this = 6;
    *((void *)this + 1) = (char *)a2 + 72;
    *((_DWORD *)this + 6) = 2;
  }
  else
  {
LABEL_20:
    BOOL v31 = v19 + 3;
    float v32 = MaximumEnergy * v23;
    if (v19[8])
    {
      memset(buf, 0, sizeof(buf));
      LODWORD(v113) = 1065353216;
      *((void *)&v113 + 1) = 0;
      *(void *)&long long v114 = 0;
      Phase::SpatialModeler::ConstructSharedHistogram(a2, v7, v32, v6, (uint64_t)v9, (uint64_t)buf);
      Phase::SpatialModeler::AggregateSharedHistogram((Phase::SpatialModeler *)v9, v107, (uint64_t)buf, v33);
      Phase::SpatialModeler::RayTracerState::FreeDirectivityHistogram((Phase::Logger *)v9, (void *)&v113 + 1);
      if ((void)v114) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v114);
      }
      std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)buf);
    }
    else
    {
      Phase::SpatialModeler::ConstructSharedHistogram(a2, v7, v32, v6, (uint64_t)v9, (uint64_t)(v19 + 3));
    }
    float SharedEnergyReFixedDb = Phase::SpatialModeler::RayTracerState::GetSharedEnergyReFixedDb((Phase::SpatialModeler::RayTracerState *)v9, (unint64_t *)&v107);
    float v37 = expf((float)((float)(SharedEnergyReFixedDb * -10.0) / 10.0) * 0.23026);
    int v102 = (float *)v19;
    Phase::SpatialModeler::DirectivityHistogram::operator*=((void *)v19[8], v37);
    int v98 = this;
    uint64_t v38 = *(void *)(v7 + 144);
    uint64_t v110 = 8;
    unint64_t SoundSourceHash = v38;
    *(void *)&long long v126 = &SoundSourceHash;
    *((void *)&v126 + 1) = &v110;
    Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput>(unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(v38, (uint64_t)&v126, v119);
    uint64_t v39 = *(void *)v119;
    *(void *)unsigned int v119 = 0;
    *(void *)buf = v39;
    std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v119[8]);
    *((void *)&v113 + 1) = v38;
    std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v119);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v119[8]);
    unint64_t v40 = v8 + 13;
    std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100](v8 + 13, (uint64_t *)buf);
    v8[18] = *((void *)&v113 + 1);
    std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
    std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
    if (*(void *)(v7 + 144))
    {
      uint64_t v105 = (uint64_t)v31;
      unint64_t v41 = 0;
      float v42 = -3.4028e38;
      uint64_t v43 = 16;
      int64x2_t v103 = vdupq_n_s64(4uLL);
      while (1)
      {
        uint64_t v44 = *(void *)(v7 + 104);
        uint64_t v45 = v44 + 304 * v41;
        unint64_t SoundSourceHash = 0;
        uint64_t v46 = (uint64_t *)(v45 + 144);
        unint64_t SoundSourceHash = Phase::SpatialModeler::GetSoundSourceHash(*(void *)(v45 + 144), *(void *)(v7 + 152), v45 + 160);
        *(void *)buf = &SoundSourceHash;
        uint64_t v47 = (float32x2_t *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v105, &SoundSourceHash, (uint64_t)&std::piecewise_construct, (void **)buf);
        float32x2_t v48 = vsub_f32(v9[2849], v47[3]);
        float v49 = sqrtf(vaddv_f32(vmul_f32(v48, v48))+ (float)((float)(v9[2850].f32[0] - v47[4].f32[0]) * (float)(v9[2850].f32[0] - v47[4].f32[0])));
        if (v49 <= 1000000.0) {
          float v50 = v49;
        }
        else {
          float v50 = 1000000.0;
        }
        uint64_t v51 = *(unsigned int *)(v45 + 140);
        if (v51)
        {
          BOOL v52 = (float *)(v44 + v43);
          do
          {
            float v53 = *v52++;
            float v54 = v53;
            if (v42 < v53) {
              float v42 = v54;
            }
            --v51;
          }
          while (v51);
        }
        *(void *)(*v40 + 16 * v41) = 0;
        Phase::SpatialModeler::RayTracerState::GetSourceListenerResult((uint64_t)v9, v46, (uint64_t *)(v7 + 152), v45 + 160, (uint64_t)buf);
        uint64_t v57 = *v40;
        uint64_t v58 = *v40 + 16 * v41;
        *(void *)(v58 + 8) = 0xC7EFFFFFE0000000;
        uint64_t v59 = (double *)(v58 + 8);
        if (*(void *)&buf[16])
        {
          float v60 = 1.1755e-38;
          uint64_t v61 = v105;
          if (v102[20] > 1.1755e-38)
          {
            float v62 = 0.0;
            if (!*(unsigned char *)(*(void *)&buf[16] + 36))
            {
              uint64_t v63 = (*(_DWORD *)(*(void *)&buf[16] + 28) * *(_DWORD *)(*(void *)&buf[16] + 24));
              if (v63)
              {
                uint64_t v64 = (v63 + 3) & 0x1FFFFFFFCLL;
                uint64x2_t v65 = (uint64x2_t)vdupq_n_s64(v63 - 1);
                int v66 = (__int32 *)(*(void *)(*(void *)&buf[16] + 8) + 8);
                int64x2_t v67 = (int64x2_t)xmmword_2220A5520;
                int64x2_t v68 = (int64x2_t)xmmword_2220A5510;
                float32x4_t v69 = (float32x4_t)xmmword_2220A5530;
                do
                {
                  float32x4_t v70 = v69;
                  int32x4_t v71 = (int32x4_t)vcgeq_u64(v65, (uint64x2_t)v67);
                  *(int32x2_t *)v55.i8 = vmovn_s64((int64x2_t)v71);
                  *(int16x4_t *)v69.f32 = vmovn_s32(v55);
                  if (v69.i8[0]) {
                    v69.i32[0] = *(v66 - 2);
                  }
                  if (vmovn_s32(v55).i8[2]) {
                    v69.i32[1] = *(v66 - 1);
                  }
                  int32x4_t v55 = (int32x4_t)vcgeq_u64(v65, (uint64x2_t)v68);
                  int32x2_t v72 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v56, (int64x2_t)v55));
                  if (v72.i8[4]) {
                    v69.i32[2] = *v66;
                  }
                  int32x2_t v56 = (int32x2_t)vmovn_s32(vmovn_hight_s64(v72, (int64x2_t)v55));
                  if (v56.i8[6]) {
                    v69.i32[3] = v66[1];
                  }
                  float32x4_t v69 = vaddq_f32(v70, v69);
                  int64x2_t v68 = vaddq_s64(v68, v103);
                  int64x2_t v67 = vaddq_s64(v67, v103);
                  v66 += 4;
                  v64 -= 4;
                }
                while (v64);
                int8x16_t v73 = vbslq_s8((int8x16_t)vuzp1q_s32(v71, v55), (int8x16_t)v69, (int8x16_t)v70);
                float v62 = (float)(vaddv_f32(*(float32x2_t *)v73.i8) + *(float *)&v73.i32[2]) + *(float *)&v73.i32[3];
              }
            }
            float v60 = v62 / v9[60].f32[0];
          }
          float v74 = (float)(fmaxf(v50, 1.0) * -0.5) + -6.0;
          float v75 = log10f(v60 + 1.1755e-38) * 10.0;
          if ((float)(v75 - SharedEnergyReFixedDb) >= v74)
          {
            float v85 = v9[18].f32[0];
            if ((float)(v75 - SharedEnergyReFixedDb) > v85) {
              float v75 = SharedEnergyReFixedDb + v85;
            }
            double v79 = v75;
            *uint64_t v59 = v79;
          }
          else
          {
            *(void *)unsigned int v119 = &SoundSourceHash;
            uint64_t v76 = (float *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v105, &SoundSourceHash, (uint64_t)&std::piecewise_construct, (void **)v119);
            if (!v9[19].i8[4]
              || ((float v77 = v76[9], (float)(v77 - SharedEnergyReFixedDb) >= v74)
                ? (BOOL v78 = (float)(v77 - SharedEnergyReFixedDb) <= v9[18].f32[0])
                : (BOOL v78 = 0),
                  !v78))
            {
              float v77 = SharedEnergyReFixedDb + v74;
            }
            double v79 = v77;
            uint64_t v57 = *v40;
            *(double *)(*v40 + 16 * v41 + 8) = v79;
          }
        }
        else
        {
          if (*(_DWORD *)(v6 + 136) <= *v46
            || (uint64_t v80 = *(void *)(v6 + 120), *(_DWORD *)(v80 + 24 * *v46 + 20) != HIDWORD(*v46))
            || (long long v81 = *(float32x2_t **)(v80 + 24 * *v46)) == 0
            || v81->i32[0] != 3)
          {
            *(void *)int v98 = 6;
            *((void *)v98 + 1) = (char *)a2 + 72;
            *((_DWORD *)v98 + 6) = 2;
            if (*(void *)&buf[24]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[24]);
            }
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v108);
          }
          uint64_t v110 = 0;
          long long v126 = 0uLL;
          float v106 = -3.4028e38;
          Phase::SpatialModeler::getClosestLRClusterToSourceInClusteringResults(v81, (Phase::SpatialModeler::RayTracerState *)v9, &v110, &v126, &v106);
          uint64_t v61 = v105;
          long long v83 = **(id **)(Phase::Logger::GetInstance(v82) + 1184);
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)unsigned int v119 = 136315906;
            *(void *)&v119[4] = "LateReverbSimulationImpl.mm";
            __int16 v120 = 1024;
            int v121 = 708;
            __int16 v122 = 2048;
            unint64_t v123 = SoundSourceHash;
            __int16 v124 = 2048;
            double v125 = v106;
            _os_log_impl(&dword_221E5E000, v83, OS_LOG_TYPE_DEBUG, "%25s:%-5d ClusterLateReverb Warning: no histogram for for source %llu setting send to %f", v119, 0x26u);
          }
          uint64_t v57 = *v40;
          uint64_t v84 = *v40 + 16 * v41;
          *(double *)(v84 + 8) = v106;
          double v79 = *(double *)(v84 + 8);
        }
        float v86 = v79;
        if (*(void *)(v6 + 904)) {
          float v87 = v86 + (float)(*(float *)(v6 + 928) * (float)(SharedEnergyReFixedDb - v86));
        }
        else {
          float v87 = v86;
        }
        *(double *)(v57 + 16 * v41 + 8) = v87;
        *(void *)unsigned int v119 = &SoundSourceHash;
        *((float *)std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::ClusteredSourceInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(v61, &SoundSourceHash, (uint64_t)&std::piecewise_construct, (void **)v119)+ 9) = v87;
        if (*(void *)&buf[24]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[24]);
        }
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        ++v41;
        v43 += 304;
        if (v41 >= *(void *)(v7 + 144)) {
          goto LABEL_82;
        }
      }
    }
    float v42 = -3.4028e38;
LABEL_82:
    *(float *)unsigned int v119 = v42;
    *(float *)&v119[4] = v42;
    *(float *)&v119[8] = v42;
    Phase::Subbands<float>::Subbands((uint64_t)buf, v119, 3);
    uint64_t v89 = *v100;
    long long v90 = v116;
    long long v91 = v117;
    v89[16] = v115;
    v89[17] = v90;
    long long v92 = v118;
    v89[18] = v91;
    v89[19] = v92;
    long long v93 = *(_OWORD *)&buf[16];
    v89[12] = *(_OWORD *)buf;
    v89[13] = v93;
    long long v94 = v114;
    v89[14] = v113;
    v89[15] = v94;
    if (!*(unsigned char *)(v7 + 48))
    {
      (*(void (**)(Phase::SpatialModeler::RoomSimulation *, float32x2_t *))(*(void *)a2 + 96))(a2, v9);
      std::string::basic_string[abi:ne180100]<0>(buf, "ClusterLateReverb - after StoreRayTracerStateToCache");
      if ((buf[23] & 0x80u) == 0) {
        long long v95 = buf;
      }
      else {
        long long v95 = *(uint8_t **)buf;
      }
      if ((buf[23] & 0x80u) == 0) {
        uint64_t v96 = buf[23];
      }
      else {
        uint64_t v96 = *(void *)&buf[8];
      }
      Phase::SpatialModeler::RoomSimulationLogging::CheckLRClusterResultAndSourceListenerResultCoherence(v9, (uint64_t)v95, v96);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }
    Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryCleanupCommon(a2, v99, a4, v88);
    *((_DWORD *)v98 + 6) = 1;
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v108);
}

void sub_221F9BC74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationFinish@<X0>(Phase::SpatialModeler::LateReverbSimulationImpl *this@<X0>, Phase::Geometry::SystemState **a2@<X1>, Phase::SpatialModeler::Query *a3@<X2>, Phase::Logger *a4@<X8>)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  uint64_t Instance = Phase::Logger::GetInstance(this);
  uint64_t v10 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 416));
  BOOL v52 = v10;
  BOOL v11 = (Phase::Logger *)Phase::Logger::GetInstance(v10);
  if (*((unsigned char *)v11 + 1192))
  {
    uint64_t v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v11)
                                                                                        + 1184)));
    float v13 = v12;
    if ((unint64_t)v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v13, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v10, "Phase_RoomSimulation_LateReverbFinish", "LateReverbFinish", buf, 2u);
    }
  }
  uint64_t v51 = (os_signpost_id_t *)&v52;
  Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationFinishCommonPreProcess(this, a2, (std::chrono::steady_clock::time_point *)a3, (uint64_t)buf);
  if (v50 == 2)
  {
    std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__copy_constructor((uint64_t)v48, (uint64_t)buf);
    uint64_t v14 = v48;
    Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationFinish(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v51, (uint64_t)v48);
    goto LABEL_32;
  }
  uint64_t v45 = (unsigned int *)((char *)a3 + 131768);
  os_signpost_id_t v15 = a2[8];
  if (*((unsigned char *)a2[11] + 48)) {
    uint64_t v16 = (Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 26720);
  }
  else {
    uint64_t v16 = (Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 1424);
  }
  if (*((unsigned char *)a2[11] + 48))
  {
    Phase::SpatialModeler::RayTracerState::operator=((uint64_t)this + 26720, (uint64_t)a3 + 112752);
LABEL_28:
    if (*((_DWORD *)v15 + 42)) {
      BOOL v40 = *((unsigned char *)v15 + 932) == 0;
    }
    else {
      BOOL v40 = 0;
    }
    *(float *)&double v41 = Phase::SpatialModeler::RayTracerState::UpdateLaunchedRayHistory(v16, *v45);
    Phase::SpatialModeler::RoomSimulationImpl::RoomSimulationFinishHandleMatchReverbTimes((Phase::SpatialModeler::RoomSimulationImpl *)v40, (Phase::SpatialModeler::Query *)((char *)a3 + 112752), v16, v42, v41);
    *((unsigned char *)v16 + 25041) = 0;
    Phase::SpatialModeler::LateReverbSimulationImpl::ClusterLateReverb((Phase::SpatialModeler::LateReverbSimulationImpl *)v46, this, (Phase::SpatialModeler::Query *)a2, a3);
    uint64_t v14 = v46;
    Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationFinish(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v51, (uint64_t)v46);
    goto LABEL_32;
  }
  if (*((unsigned char *)this + 26465))
  {
LABEL_23:
    float v23 = (Phase::SpatialModeler::RayTracerState *)*((void *)this + 2);
    Phase::SpatialModeler::RoomSimulationLogging::logRoomStatistics((unsigned int *)this + 356, *((_DWORD *)this + 8), (uint64_t)"RoomSimulationFinish after aggregation", 38);
    Phase::SpatialModeler::RoomSimulationDebugger::ExecuteRoomDataCallbacks((int32x2_t *)this + 178, v23, v15, v24);
    *((_OWORD *)this + 1435) = *((_OWORD *)this + 1408);
    *((_OWORD *)this + 1436) = *((_OWORD *)this + 1409);
    *((_OWORD *)this + 1437) = *((_OWORD *)this + 1410);
    *((_OWORD *)this + 1438) = *((_OWORD *)this + 1411);
    *((_OWORD *)this + 1431) = *((_OWORD *)this + 1404);
    *((_OWORD *)this + 1432) = *((_OWORD *)this + 1405);
    *((_OWORD *)this + 1433) = *((_OWORD *)this + 1406);
    *((_OWORD *)this + 1434) = *((_OWORD *)this + 1407);
    long long v25 = *((_OWORD *)this + 1341);
    long long v26 = *((_OWORD *)this + 1342);
    long long v27 = *((_OWORD *)this + 1343);
    *((_OWORD *)this + 1458) = *((_OWORD *)this + 1344);
    *((_OWORD *)this + 1457) = v27;
    *((_OWORD *)this + 1456) = v26;
    *((_OWORD *)this + 1455) = v25;
    long long v28 = *((_OWORD *)this + 1345);
    long long v29 = *((_OWORD *)this + 1346);
    long long v30 = *((_OWORD *)this + 1347);
    *((_OWORD *)this + 1462) = *((_OWORD *)this + 1348);
    *((_OWORD *)this + 1461) = v30;
    *((_OWORD *)this + 1460) = v29;
    *((_OWORD *)this + 1459) = v28;
    long long v31 = *((_OWORD *)this + 1309);
    long long v32 = *((_OWORD *)this + 1310);
    long long v33 = *((_OWORD *)this + 1311);
    *((_OWORD *)this + 1466) = *((_OWORD *)this + 1312);
    *((_OWORD *)this + 1465) = v33;
    *((_OWORD *)this + 1464) = v32;
    *((_OWORD *)this + 1463) = v31;
    long long v34 = *((_OWORD *)this + 1313);
    long long v35 = *((_OWORD *)this + 1314);
    long long v36 = *((_OWORD *)this + 1315);
    *((_OWORD *)this + 1470) = *((_OWORD *)this + 1316);
    *((_OWORD *)this + 1469) = v36;
    *((_OWORD *)this + 1468) = v35;
    *((_OWORD *)this + 1467) = v34;
    *((void *)this + 2942) = *((void *)this + 2616);
    *((_DWORD *)this + 5886) = *((_DWORD *)this + 5234);
    *((_DWORD *)this + 5887) = *((_DWORD *)this + 5110);
    *((_DWORD *)this + 5888) = *((_DWORD *)this + 5188);
    float v37 = a2[8];
    uint64_t v38 = *((unsigned int *)v37 + 42);
    if ((v38 & 0x80000000) == 0) {
      ++*((_DWORD *)this + v38 + 5893);
    }
    int v39 = *((_DWORD *)v37 + 234);
    if (*((_DWORD *)this + 5897) != v39)
    {
      *((_DWORD *)this + 5897) = v39;
      ++*((_DWORD *)this + 5898);
    }
    Phase::SpatialModeler::Telemetry::Send((Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 22896));
    goto LABEL_28;
  }
  uint64_t v44 = (float32x2_t *)((char *)this + 80);
  uint64_t v17 = (float *)((char *)a3 + 112872);
  if (!Phase::SpatialModeler::SimulationController::ShouldEnableListenerOutsideMitigation((Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 80), (Phase::SpatialModeler::Query *)((char *)a3 + 112752), (Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 1424), *((unsigned char *)v15 + 932))|| !*((unsigned char *)a3 + 112945))
  {
    Phase::SpatialModeler::SimulationController::AdjustAggregationCoefficientsDefault(*v17, *((float *)a3 + 28219), (uint64_t)v44, (float *)a3 + 28190);
    if (*((unsigned char *)this + 1592) && *((unsigned char *)this + 1593)) {
      Phase::SpatialModeler::SimulationController::AdjustAggregationCoefficientsDynamic(v44, (uint64_t)this + 24232, (float *)a3 + 28190, *v17, *((float *)a3 + 28219), *((float *)this + 5613), (float)*v45);
    }
    Phase::SpatialModeler::RoomChangeDetector::IncrementResultsFromTracerStates((Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 672), (Phase::SpatialModeler::Query *)((char *)a3 + 112752));
    Phase::SpatialModeler::GetRoomChangeProbabilityEstimate((Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 672), v21);
    *((_DWORD *)a3 + 33447) = v22;
    Phase::SpatialModeler::RayTracerState::AggregateResultData((Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 1424), (Phase::SpatialModeler::Query *)((char *)a3 + 112752), v15);
    Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView::operator=((uint64_t)this + 24624, (uint64_t)a3 + 135952);
    goto LABEL_23;
  }
  Phase::SpatialModeler::RayTracerState::UpdateResultData((Phase::SpatialModeler::LateReverbSimulationImpl *)((char *)this + 1424), (Phase::SpatialModeler::Query *)((char *)a3 + 112752), v15);
  uint64_t v19 = **(id **)(Phase::Logger::GetInstance(v18) + 1184);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = *((_DWORD *)this + 5614);
    *(_DWORD *)float v53 = 136315650;
    float v54 = "LateReverbSimulationImpl.mm";
    __int16 v55 = 1024;
    int v56 = 306;
    __int16 v57 = 1024;
    int v58 = v20;
    _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d listenerOutsideMitigation LR: Listener is outside, mitigating by skipping aggregation, counter %u", v53, 0x18u);
  }
  Phase::SpatialModeler::LateReverbSimulationImpl::ClusterLateReverb((Phase::SpatialModeler::LateReverbSimulationImpl *)v47, this, (Phase::SpatialModeler::Query *)a2, a3);
  uint64_t v14 = v47;
  Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationFinish(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(a4, &v51, (uint64_t)v47);
LABEL_32:
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v14);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
}

void sub_221F9C208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationFinish(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &,Phase::SpatialModeler::RoomSimulationImpl::ClusterQueryState &)::$_0::operator()(Phase::Logger *a1, os_signpost_id_t **a2, uint64_t a3)
{
  uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(a1);
  if (*((unsigned char *)Instance + 1192))
  {
    uint64_t v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(Instance)
                                                                                       + 1184)));
    id v8 = v7;
    os_signpost_id_t v9 = **a2;
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      *(_WORD *)BOOL v11 = 0;
      _os_signpost_emit_with_name_impl(&dword_221E5E000, v8, OS_SIGNPOST_INTERVAL_END, v9, "Phase_RoomSimulation_LateReverbFinish", (const char *)&unk_222112ABB, v11, 2u);
    }
  }
  return std::__variant_detail::__move_constructor<std::__variant_detail::__traits<std::monostate,Phase::SpatialModeler::ReturnSuccess,Phase::SpatialModeler::ReturnError,Phase::SpatialModeler::WaitOnSceneQueries,Phase::SpatialModeler::ClaimOrWaitOnToken,Phase::SpatialModeler::ReleaseToken>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)a1, a3);
}

void Phase::SpatialModeler::SingleLRClusterResult::~SingleLRClusterResult(Phase::SpatialModeler::SingleLRClusterResult *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this);
}

void Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationHandleResultsLateReverberation(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &)::$_0::operator()<unsigned long,std::array<float,31ul>,Phase::PackedSubbands<float,10ul>>(Phase::Logger *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1 == (Phase::Logger *)31)
  {
    uint64_t v6 = a2 + 124;
    uint64_t v7 = Phase::sThirdOctaveBandFrequencies;
    id v8 = (float *)&constinit_1;
    goto LABEL_6;
  }
  if (a1 == (Phase::Logger *)10)
  {
    long long v9 = *(_OWORD *)a2;
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)(a3 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)a3 = v9;
    *(_OWORD *)(a3 + 16) = v10;
    return;
  }
  if (a1 == (Phase::Logger *)3)
  {
    uint64_t v6 = a2 + 124;
    uint64_t v7 = (float *)&Phase::sThreeBandFrequencies;
    id v8 = Phase::sOctaveBandFrequencies;
LABEL_6:
    Phase::GetValuesFromFrequencyResponse<float const*,float const*,float const*,float *,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(v7, v8, a2, v6, Phase::sOctaveBandFrequencies, Phase::sThirdOctaveBandFrequencies, a3);
    return;
  }
  BOOL v11 = **(id **)(Phase::Logger::GetInstance(a1) + 1184);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    int v12 = 136315650;
    uint64_t v13 = "LateReverbSimulationImpl.mm";
    __int16 v14 = 1024;
    int v15 = 1347;
    __int16 v16 = 2048;
    uint64_t v17 = a1;
    _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported sub-band count: %zu\n", (uint8_t *)&v12, 0x1Cu);
  }
}

void Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationHandleResultsLateReverberation(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &)::$_0::operator()<unsigned long,std::vector<float>,Phase::PackedSubbands<float,10ul>>(Phase::Logger *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (a1 == (Phase::Logger *)31)
  {
    uint64_t v6 = Phase::sThirdOctaveBandFrequencies;
    uint64_t v7 = (float *)&constinit_1;
    goto LABEL_6;
  }
  if (a1 == (Phase::Logger *)10)
  {
    long long v8 = *(_OWORD *)a2;
    long long v9 = *(_OWORD *)(a2 + 16);
    *(void *)(a4 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)a4 = v8;
    *(_OWORD *)(a4 + 16) = v9;
    return;
  }
  if (a1 == (Phase::Logger *)3)
  {
    uint64_t v6 = (float *)&Phase::sThreeBandFrequencies;
    uint64_t v7 = Phase::sOctaveBandFrequencies;
LABEL_6:
    Phase::GetValuesFromFrequencyResponse<float const*,std::__wrap_iter<float const*>,float const*,float *,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(v6, v7, a2, a4);
    return;
  }
  long long v10 = **(id **)(Phase::Logger::GetInstance(a1) + 1184);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    int v11 = 136315650;
    int v12 = "LateReverbSimulationImpl.mm";
    __int16 v13 = 1024;
    int v14 = 1347;
    __int16 v15 = 2048;
    __int16 v16 = a1;
    _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d Unsupported sub-band count: %zu\n", (uint8_t *)&v11, 0x1Cu);
  }
}

float Phase::SpatialModeler::GetTotalEnergyInBand<float>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(vDSP_Length **)(a1 + 104);
  float result = 0.0;
  if (v2)
  {
    vDSP_Length v4 = *v2;
    vDSP_Stride v5 = v2[1];
    if (*v2) {
      BOOL v6 = v5 == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      float __C = 0.0;
      vDSP_svesq((const float *)v2 + a2 + 4, v5, &__C, v4);
      return __C;
    }
  }
  return result;
}

void Phase::SpatialModeler::RoomSimulationDebugger::DebugDirectionalMetadata::~DebugDirectionalMetadata(Phase::SpatialModeler::RoomSimulationDebugger::DebugDirectionalMetadata *this)
{
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  vDSP_Stride v5 = (void **)((char *)this + 56);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  uint64_t v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  vDSP_Length v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

Phase::SpatialModeler::RoomSimulationDebugger::DebugDirectionalMetadata *Phase::SpatialModeler::RoomSimulationDebugger::DebugDirectionalMetadata::DebugDirectionalMetadata(Phase::SpatialModeler::RoomSimulationDebugger::DebugDirectionalMetadata *this, const Phase::SpatialModeler::RoomSimulationDebugger::DebugDirectionalMetadata *a2)
{
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<Phase::Vector<float,3ul>>::__init_with_size[abi:ne180100]<Phase::Vector<float,3ul>*,Phase::Vector<float,3ul>*>((char *)this + 8, *((_DWORD **)a2 + 1), *((_DWORD **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 2));
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)this + 4, *((const void **)a2 + 4), *((void *)a2 + 5), (uint64_t)(*((void *)a2 + 5) - *((void *)a2 + 4)) >> 2);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  uint64_t v4 = *((void *)a2 + 7);
  uint64_t v5 = *((void *)a2 + 8);
  if (v5 != v4)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((void *)this + 7, 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 3));
    *((void *)this + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)this + 72, v4, v5, *((void **)this + 8));
  }
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  uint64_t v7 = (unsigned char *)*((void *)a2 + 10);
  BOOL v6 = (unsigned char *)*((void *)a2 + 11);
  size_t v8 = v6 - v7;
  if (v6 != v7)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100]((void *)this + 10, v6 - v7);
    long long v9 = (char *)*((void *)this + 11);
    memmove(v9, v7, v8);
    *((void *)this + 11) = &v9[v8];
  }
  return this;
}

void sub_221F9C83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  int v14 = *v12;
  if (*v12)
  {
    v9[11] = v14;
    operator delete(v14);
  }
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  __int16 v15 = *v11;
  if (*v11)
  {
    v9[5] = v15;
    operator delete(v15);
  }
  __int16 v16 = *v10;
  if (*v10)
  {
    uint64_t v9[2] = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void Phase::GetValuesFromFrequencyResponse<float const*,std::__wrap_iter<float const*>,float const*,float *,&float Phase::Square<float>,&float Phase::SquareRoot<float>>(float *a1, float *a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a1)
  {
    for (uint64_t i = a1 + 1; i != a2; ++i)
    {
      float v7 = *(i - 1);
      float v6 = *i;
      if (v6 < v7) {
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 262, "std::is_sorted(inFrequenciesFirst, inFrequenciesLast)");
      }
    }
  }
  uint64_t v8 = 0;
  uint64_t v9 = a2 - a1;
  while (v8 != 9)
  {
    float v10 = Phase::sOctaveBandFrequencies[v8 + 1];
    float v11 = Phase::sOctaveBandFrequencies[v8++];
    if (v10 < v11) {
      __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 263, "std::is_sorted(inOutputFrequenciesFirst, inOutputFrequenciesLast)");
    }
  }
  Phase::GetBandsFromCenterFrequencies<float const*,float>(a1, a2, (float **)v81, 22000.0);
  Phase::GetBandsFromCenterFrequencies<float const*,float>(Phase::sOctaveBandFrequencies, Phase::sThirdOctaveBandFrequencies, (float **)v80, 22000.0);
  int v12 = 0;
  __int16 v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  std::vector<unsigned int> __p = 0;
  BOOL v78 = 0;
  double v79 = 0;
  float v74 = 0;
  float v75 = 0;
  uint64_t v76 = 0;
  uint64_t v16 = v9 - 1;
  int32x4_t v71 = 0;
  int8x16_t v73 = 0;
  do
  {
    uint64_t v17 = (float *)((char *)v80[0] + 8 * v15);
    float v18 = *v17;
    float v19 = v17[1];
    BOOL v78 = (float *)__p;
    float v75 = v13;
    int32x2_t v72 = v12;
    if (v14 < v9)
    {
      int v20 = (float *)((char *)v81[0] + 8 * v14);
      float v21 = *v20;
      float v22 = v20[1];
      if (v19 < v22) {
        float v22 = v19;
      }
      if (v21 >= v18) {
        float v23 = *v20;
      }
      else {
        float v23 = v18;
      }
      float v24 = fmaxf(v22 - v23, 0.0);
      float v25 = v19;
      uint64_t v26 = v14;
      if (v24 == 0.0)
      {
LABEL_58:
        v14 -= v21 != v25;
      }
      else
      {
        while (1)
        {
          long long v27 = v78;
          if (v78 >= v79)
          {
            long long v29 = (float *)__p;
            uint64_t v30 = ((char *)v78 - (unsigned char *)__p) >> 2;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v32 = (char *)v79 - (unsigned char *)__p;
            if (((char *)v79 - (unsigned char *)__p) >> 1 > v31) {
              unint64_t v31 = v32 >> 1;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              long long v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v79, v33);
              long long v29 = (float *)__p;
              long long v27 = v78;
            }
            else
            {
              long long v34 = 0;
            }
            long long v35 = (float *)&v34[4 * v30];
            *long long v35 = v24;
            long long v28 = v35 + 1;
            while (v27 != v29)
            {
              int v36 = *((_DWORD *)v27-- - 1);
              *((_DWORD *)v35-- - 1) = v36;
            }
            std::vector<unsigned int> __p = v35;
            BOOL v78 = v28;
            double v79 = (float *)&v34[4 * v33];
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            float *v78 = v24;
            long long v28 = v27 + 1;
          }
          BOOL v78 = v28;
          float v37 = v75;
          if (v75 >= v76)
          {
            uint64_t v38 = (char *)v74;
            uint64_t v39 = (v75 - (unsigned char *)v74) >> 3;
            unint64_t v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v41 = v76 - (unsigned char *)v74;
            if ((v76 - (unsigned char *)v74) >> 2 > v40) {
              unint64_t v40 = v41 >> 2;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v42 = v40;
            }
            if (v42)
            {
              uint64_t v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v76, v42);
              uint64_t v38 = (char *)v74;
              float v37 = v75;
            }
            else
            {
              uint64_t v43 = 0;
            }
            uint64_t v44 = (uint64_t *)&v43[8 * v39];
            *uint64_t v44 = v14;
            __int16 v13 = (char *)(v44 + 1);
            while (v37 != v38)
            {
              uint64_t v45 = *((void *)v37 - 1);
              v37 -= 8;
              *--uint64_t v44 = v45;
            }
            float v74 = v44;
            float v75 = v13;
            uint64_t v76 = &v43[8 * v42];
            if (v38) {
              operator delete(v38);
            }
          }
          else
          {
            *(void *)float v75 = v14;
            __int16 v13 = v37 + 8;
          }
          float v75 = v13;
          if (v14 == v16) {
            uint64_t v26 = v14;
          }
          if (++v14 == v9) {
            break;
          }
          uint64_t v46 = (float *)((char *)v81[0] + 8 * v14);
          float v21 = *v46;
          float v47 = v46[1];
          float32x2_t v48 = (float *)((char *)v80[0] + 8 * v15);
          float v49 = *v48;
          float v25 = v48[1];
          if (v25 < v47) {
            float v47 = v48[1];
          }
          if (v21 >= v49) {
            float v49 = v21;
          }
          float v24 = fmaxf(v47 - v49, 0.0);
          if (v24 == 0.0) {
            goto LABEL_58;
          }
        }
        uint64_t v14 = v26;
      }
    }
    int v50 = v72;
    if (v13 == v74)
    {
      float v53 = 0.0;
    }
    else
    {
      unint64_t v51 = 0;
      float v52 = v19 - v18;
      float v53 = 0.0;
      float v54 = v72;
      __int16 v13 = (char *)v74;
      do
      {
        float v55 = *((float *)__p + v51) / v52;
        float v56 = *(float *)(a3 + 4 * *(void *)&v13[8 * v51]);
        float v57 = v55 * (float)(v56 * v56);
        if (v54 >= v73)
        {
          int v58 = v71;
          uint64_t v59 = v54 - v71;
          unint64_t v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62) {
            std::vector<float>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v61 = (char *)v73 - (char *)v71;
          if (((char *)v73 - (char *)v71) >> 1 > v60) {
            unint64_t v60 = v61 >> 1;
          }
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v62 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v60;
          }
          if (v62)
          {
            uint64_t v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v73, v62);
            int v58 = v71;
            float v54 = v72;
          }
          else
          {
            uint64_t v63 = 0;
          }
          uint64_t v64 = (float *)&v63[4 * v59];
          float *v64 = v57;
          int v50 = v64 + 1;
          while (v54 != v58)
          {
            int v65 = *((_DWORD *)v54-- - 1);
            *((_DWORD *)v64-- - 1) = v65;
          }
          int32x4_t v71 = v64;
          int8x16_t v73 = (float *)&v63[4 * v62];
          if (v58) {
            operator delete(v58);
          }
        }
        else
        {
          *float v54 = v57;
          int v50 = v54 + 1;
        }
        float v53 = v53 + v55;
        int32x2_t v72 = v50;
        ++v51;
        __int16 v13 = (char *)v74;
        float v54 = v50;
      }
      while (v51 < (v75 - (unsigned char *)v74) >> 3);
    }
    int v12 = v71;
    double v66 = 0.0;
    if (v71 != v50)
    {
      int64x2_t v67 = v71;
      do
      {
        float v68 = *v67++;
        double v66 = v66 + v68;
      }
      while (v67 != v50);
    }
    float v69 = v66;
    uint64_t v16 = v9 - 1;
    *(float *)(a4 + 4 * v15++) = sqrtf(v69 / v53);
  }
  while (v15 != 10);
  if (v71)
  {
    operator delete(v71);
    __int16 v13 = (char *)v74;
  }
  if (v13)
  {
    float v75 = v13;
    operator delete(v13);
  }
  if (__p)
  {
    BOOL v78 = (float *)__p;
    operator delete(__p);
  }
  if (v80[0])
  {
    v80[1] = v80[0];
    operator delete(v80[0]);
  }
  if (v81[0])
  {
    v81[1] = v81[0];
    operator delete(v81[0]);
  }
}

void sub_221F9CDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    float v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      float v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          float v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v13 = a1 + 16;
  uint64_t v14 = (char *)operator new(0x68uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v7;
  *((void *)v14 + 2) = **a4;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  *((void *)v14 + 8) = 0;
  *((void *)v14 + 9) = 0;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  float v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *float v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  float v11 = (void *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return v11;
}

void sub_221F9D0A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRClusterResult>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::SpatialModeler::SingleLRClusterResult>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::SpatialModeler::SingleLRSpatialResult>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint8x8_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = *v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = a1 + 2;
  uint64_t i = operator new(0x28uLL);
  void *i = 0;
  i[1] = v5;
  uint64_t v13 = *a3;
  i[3] = 0;
  i[4] = 0;
  i[2] = v13;
  float v14 = (float)(unint64_t)(a1[3] + 1);
  float v15 = *((float *)a1 + 8);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v26 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      long long v35 = (void *)*a1;
      *a1 = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  size_t v20 = operator new(8 * *(void *)&prime);
  float v21 = (void *)*a1;
  *a1 = (uint64_t)v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  float v23 = (void *)*v12;
  if (*v12)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v24) = v12;
    long long v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          if (!*(void *)(*a1 + 8 * v30))
          {
            *(void *)(*a1 + 8 * v30) = v23;
            goto LABEL_56;
          }
          *float v23 = *v29;
          *long long v29 = **(void **)(*a1 + 8 * v30);
          **(void **)(*a1 + 8 * v30) = v29;
          long long v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_56:
        float v23 = v29;
        long long v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v31 = *a1;
  uint64_t v32 = *(void **)(*a1 + 8 * v5);
  if (v32)
  {
    void *i = *v32;
LABEL_72:
    void *v32 = i;
    goto LABEL_73;
  }
  void *i = *v12;
  *unint64_t v12 = i;
  *(void *)(v31 + 8 * v5) = v12;
  if (*i)
  {
    unint64_t v33 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v33 >= v7) {
        v33 %= v7;
      }
    }
    else
    {
      v33 &= v7 - 1;
    }
    uint64_t v32 = (void *)(*a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return i;
}

void sub_221F9D4F8(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long,std::shared_ptr<Phase::Job>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D478260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D478260;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C938A0);
}

void *std::__shared_ptr_emplace<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::__on_zero_shared(uint64_t a1)
{
  return std::allocator<Phase::SpatialModeler::DirectionalMetadataOutput<float>>::destroy[abi:ne180100]((uint64_t)&v2, (uint64_t *)(a1 + 24));
}

void Phase::LambdaFunction<Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationHandleResultsLateReverberation(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &)::$_3,void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<Phase::SpatialModeler::LateReverbSimulationImpl::RoomSimulationHandleResultsLateReverberation(Phase::SpatialModeler::RoomSimulation &,Phase::SpatialModeler::Query &)::$_3,void>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), a1 + 16);
}

void Phase::SpatialModeler::LateReverbSimulation::GetSupportedQueryDescs(std::string **a1@<X8>)
{
  *(void *)&long long v29 = *MEMORY[0x263EF8340];
  char v14 = 4;
  strcpy((char *)&v13, "CULL");
  uint64_t v15 = 0;
  uint64_t v16 = 0x100000001;
  int v17 = 1;
  memset(v18, 0, sizeof(v18));
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)v18, 7uLL);
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)v18;
  do
  {
    *(_DWORD *)(v4 + v3 * 4) = Phase::SpatialModeler::LateReverbSimulationPrivate::sCullQueryPropertyUIDs[v3];
    ++v3;
  }
  while (v3 != 7);
  v19[23] = 7;
  strcpy(v19, "CLUSTER");
  uint64_t v20 = 1;
  uint64_t v21 = 0x200000003;
  int v22 = 1;
  memset(v23, 0, sizeof(v23));
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)v23, 7uLL);
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)v23;
  do
  {
    *(_DWORD *)(v6 + v5 * 4) = Phase::SpatialModeler::LateReverbSimulationPrivate::sClusterQueryPropertyUIDs[v5];
    ++v5;
  }
  while (v5 != 7);
  v24[23] = 7;
  strcpy(v24, "SPATIAL");
  uint64_t v25 = 2;
  uint64_t v26 = 0x300000002;
  int v27 = 2;
  memset(v28, 0, sizeof(v28));
  std::vector<unsigned int>::resize((std::vector<unsigned int> *)v28, 7uLL);
  uint64_t v7 = 0;
  uint64_t v8 = *(void *)v28;
  do
  {
    *(_DWORD *)(v8 + v7 * 4) = Phase::SpatialModeler::LateReverbSimulationPrivate::sSpatialQueryPropertyUIDs[v7];
    ++v7;
  }
  while (v7 != 7);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint8x8_t v9 = (std::string *)operator new(0xF0uLL);
  *a1 = v9;
  a1[1] = v9;
  a1[2] = v9 + 10;
  uint64_t v10 = 0;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::QueryDesc>,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc*>((uint64_t)(a1 + 2), &v13, &v29, v9);
  do
  {
    unint64_t v11 = (char *)&v13 + v10;
    unint64_t v12 = *(void **)&v28[v10];
    if (v12)
    {
      *((void *)v11 + 27) = v12;
      operator delete(v12);
    }
    if (v11[183] < 0) {
      operator delete(*((void **)v11 + 20));
    }
    v10 -= 80;
  }
  while (v10 != -240);
}

void sub_221F9D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  *(void *)(v12 + 8) = v13;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (uint64_t i = 160; i != -80; i -= 80)
    Phase::SpatialModeler::QueryDesc::~QueryDesc((Phase::SpatialModeler::QueryDesc *)(&a12 + i));
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::LateReverbSimulation::GetEntityShapeTemplates@<X0>(Phase::SpatialModeler::LateReverbSimulation *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  int v7 = 0;
  memset(v8, 0, sizeof(v8));
  int v9 = 1065353216;
  int v10 = 4;
  int v3 = *(_DWORD *)(Phase::Logger::GetInstance(this) + 1200);
  if (!v3) {
    int v3 = 3;
  }
  int v7 = v3;
  if ((v3 - 4) < 0xFFFFFFFD) {
    __assert_rtn("GetEntityShapeTemplates", "LateReverbSimulationModeler.cpp", 238, "occluderTemplate.mShapeType > Geometry::DefaultShapeType::Invalid && occluderTemplate.mShapeType < Geometry::DefaultShapeType::Count");
  }
  uint64_t v4 = (int *)a2[1];
  if ((unint64_t)v4 >= a2[2])
  {
    uint64_t v5 = std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__push_back_slow_path<Phase::SpatialModeler::EntityShapeTemplate const&>(a2, &v7);
  }
  else
  {
    *uint64_t v4 = v3;
    std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map((uint64_t)(v4 + 2), (uint64_t)v8);
    v4[12] = v10;
    uint64_t v5 = (uint64_t)(v4 + 14);
    a2[1] = (uint64_t)(v4 + 14);
  }
  a2[1] = v5;
  return std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table((uint64_t)v8);
}

void sub_221F9D99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = v12;
  *(void *)(v10 + 8) = v13;
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v11);
  a10 = (void **)v10;
  std::vector<Phase::SpatialModeler::EntityShapeTemplate>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::LateReverbSimulation::Init(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  *(void *)(a1 + 40) = a2[3];
  *(_DWORD *)(a1 + 32) = 3;
  *(_DWORD *)(a1 + 60) = Phase::Geometry::SceneQueryTypeRegistry::DeriveNewType((Phase::Geometry::SceneQueryTypeRegistry *)(*(void *)(a1 + 16) + 2288), 3u);
  *(_DWORD *)(a1 + 64) = Phase::Geometry::SceneQueryTypeRegistry::DeriveNewType((Phase::Geometry::SceneQueryTypeRegistry *)(*(void *)(a1 + 16) + 2288), 3u);
  Phase::Geometry::System::GetCurrentState(*(Phase::Geometry::System **)(a1 + 16), &v12);
  uint64_t v4 = (long long *)a2[1];
  if (v4)
  {
    long long v5 = *v4;
    *(_OWORD *)(a1 + 1072) = v4[1];
    *(_OWORD *)(a1 + 1056) = v5;
    long long v6 = v4[2];
    long long v7 = v4[3];
    long long v8 = v4[4];
    *(_OWORD *)(a1 + 1136) = v4[5];
    *(_OWORD *)(a1 + 1120) = v8;
    *(_OWORD *)(a1 + 1104) = v7;
    *(_OWORD *)(a1 + 1088) = v6;
    long long v9 = v4[6];
    long long v10 = v4[7];
    long long v11 = v4[8];
    *(_DWORD *)(a1 + 1200) = *((_DWORD *)v4 + 36);
    *(_OWORD *)(a1 + 1184) = v11;
    *(_OWORD *)(a1 + 1168) = v10;
    *(_OWORD *)(a1 + 1152) = v9;
  }
  Phase::SpatialModeler::RoomSimulationConfig::ReadDefaultsWriteFlags((Phase::SpatialModeler::RoomSimulationConfig *)(a1 + 1056));
  *(void *)(a1 + 1280) = *a2;
  *(void *)(a1 + 1304) = a2[2];
  operator new();
}

void sub_221F9DD98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::SpatialModeler::LateReverbSimulation::Shutdown(Phase::SpatialModeler::LateReverbSimulation *this)
{
  uint64_t v1 = *((void *)this + 164);
  *((void *)this + 164) = 0;
  if (v1) {
    std::default_delete<caulk::concurrent::multi_buffer<Phase::SpatialModeler::RayTracerState,3>>::operator()[abi:ne180100]((uint64_t)this + 1312, v1);
  }

  return Phase::SpatialModeler::RoomSimulation::DeinitERtoLRModelerCache(this);
}

uint64_t Phase::SpatialModeler::LateReverbSimulation::RunQuery@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v3 = a2[10];
  if (v3 > 2)
  {
    *(void *)a3 = 2;
    *(void *)(a3 + 8) = result + 72;
    *(_DWORD *)(a3 + 24) = 2;
  }
  else
  {
    uint64_t v4 = (_DWORD *)a2[11];
    if (v4 && (long long v5 = Phase::SpatialModeler::LateReverbSimulationPrivate::QueryTable[v3], *((_DWORD *)v5 + 4) == *v4))
    {
      long long v6 = (_DWORD *)a2[12];
      if (v6 && *((_DWORD *)v5 + 5) == *v6) {
        return (*((uint64_t (**)(void))v5 + 8))();
      }
      uint64_t v7 = result + 72;
      uint64_t v8 = 4;
    }
    else
    {
      uint64_t v7 = result + 72;
      uint64_t v8 = 3;
    }
    *(void *)a3 = v8;
    *(void *)(a3 + 8) = v7;
    *(_DWORD *)(a3 + 24) = 2;
  }
  return result;
}

uint64_t Phase::SpatialModeler::LateReverbSimulation::AllocateQueryState@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 <= 2)
  {
    unint64_t v3 = (uint64_t (*)(void))*((void *)Phase::SpatialModeler::LateReverbSimulationPrivate::QueryTable[v2] + 7);
    if (v3) {
      return v3();
    }
  }
  *a2 = 0;
  a2[4] = 0;
  return result;
}

uint64_t Phase::SpatialModeler::LateReverbSimulation::GetGraphDescription@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 2:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x223C933A0](a2, "LateReverbSimSpatialQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t result = MEMORY[0x223C933A0](v4, "FullLateReverbSimSpatialGraph");
      goto LABEL_7;
    case 1:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x223C933A0](a2, "LateReverbSimClusterQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t result = MEMORY[0x223C933A0](v4, "FullLateReverbSimClusterGraph");
      goto LABEL_7;
    case 0:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x223C933A0](a2, "LateReverbSimCullQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t result = MEMORY[0x223C933A0](v4, "FullLateReverbSimCullGraph");
LABEL_7:
      *(void *)(v4 + 24) = 0xFFFFFFFFLL;
      return result;
  }
  *(_OWORD *)(a2 + 16) = 0uLL;
  *(_OWORD *)(a2 + 32) = 0uLL;
  *(_OWORD *)a2 = 0uLL;
  return result;
}

void sub_221F9E004(_Unwind_Exception *a1)
{
  Phase::SpatialModeler::GraphDescription::~GraphDescription(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::LateReverbSimulation::GetErrorCategory(Phase::SpatialModeler::LateReverbSimulation *this)
{
  return (uint64_t)this + 72;
}

BOOL Phase::SpatialModeler::LateReverbSimulation::IsQueryIndexValid(Phase::SpatialModeler::LateReverbSimulation *this, unint64_t a2)
{
  return a2 < 3;
}

void Phase::SpatialModeler::LateReverbSimulation::StoreRayTracerStateToCache(Phase::SpatialModeler::LateReverbSimulation *this, const Phase::SpatialModeler::RayTracerState *a2)
{
  uint64_t v2 = MEMORY[0x270FA5388](this);
  v5[3133] = *(void **)MEMORY[0x263EF8340];
  unint64_t v3 = *(unsigned int **)(v2 + 1312);
  Phase::SpatialModeler::RayTracerState::RayTracerState((Phase::SpatialModeler::RayTracerState *)v5, v4);
  caulk::concurrent::multi_buffer<Phase::SpatialModeler::RayTracerState,3>::write(v3, (const Phase::SpatialModeler::RayTracerState *)v5);
  Phase::SpatialModeler::RayTracerState::~RayTracerState(v5);
}

void sub_221F9E0CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t Phase::SpatialModeler::LateReverbSimulation::LoadRayTracerStateFromCache(unsigned int **this)
{
  return caulk::concurrent::multi_buffer<Phase::SpatialModeler::RayTracerState,3>::read_if (this[164]);
}

void Phase::SpatialModeler::LateReverbSimulation::~LateReverbSimulation(Phase::SpatialModeler::LateReverbSimulation *this)
{
  Phase::SpatialModeler::RoomSimulation::~RoomSimulation(this);

  JUMPOUT(0x223C938A0);
}

Phase::SpatialModeler::LaunchConfig *Phase::SpatialModeler::LaunchConfig::LaunchConfig(Phase::SpatialModeler::LaunchConfig *this, unsigned int a2, unsigned int a3)
{
  *(void *)this = 0;
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  Phase::SpatialModeler::LaunchConfig::Init(this, a2, a3);
  return this;
}

void sub_221F9E170(_Unwind_Exception *a1)
{
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](v2);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)(v1 + 24));
  _Unwind_Resume(a1);
}

float Phase::SpatialModeler::LaunchConfig::Init(Phase::SpatialModeler::LaunchConfig *this, unsigned int a2, unsigned int a3)
{
  float result = Phase::SpatialModeler::LaunchConfig::SetLaunchingAngles((uint64_t)this, (uint64_t)&Phase::SpatialModeler::launchconfig_128x256, a2, a3);
  if (a2 != 256 || *(_DWORD *)this != 128) {
    std::terminate();
  }
  return result;
}

float Phase::SpatialModeler::LaunchConfig::SetLaunchingAngles(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  v19[4] = *MEMORY[0x263EF8340];
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = a4;
  *(_DWORD *)a1 = a4 / a3;
  uint64_t v6 = a4;
  uint64_t v13 = 4;
  uint64_t v14 = a4;
  uint64_t v15 = &v14;
  v16[0] = &v13;
  Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>>(unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(a4, (uint64_t)&v15, &v18);
  uint64_t v7 = v18;
  uint64_t v18 = 0;
  uint64_t v15 = (uint64_t *)v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v19);
  uint64_t v17 = v6;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](&v18);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v19);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 16), (uint64_t *)&v15);
  *(void *)(a1 + 56) = v17;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v15);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v16);
  if (*(void *)(a1 + 56))
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    long long v11 = (float *)(a2 + 4);
    do
    {
      *(_DWORD *)(*(void *)(a1 + 16) + v9) = 1065353216;
      *(float *)(*(void *)(a1 + 16) + v9 + 4) = *(v11 - 1);
      float v12 = *v11;
      v11 += 2;
      float result = v12;
      *(float *)(*(void *)(a1 + 16) + v9 + 8) = v12;
      ++v10;
      v9 += 12;
    }
    while (*(void *)(a1 + 56) > v10);
  }
  return result;
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  unint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x223C93430](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_221F9E4D8(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x223C937D0](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x223C93440](a1 + 2);
  std::istream::~istream();
  MEMORY[0x223C937D0](a1 + 53);
  return a1;
}

void Phase::DspLayer::LinearFade::GetNewRegistryEntry(Phase::DspLayer::LinearFade *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)malloc_type_malloc(0xA8uLL, 0x1050040B063AAFAuLL);
  *(void *)uint64_t v1 = "Duration";
  *((void *)v1 + 1) = 0x500000000;
  *(void *)(v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2220A4F90;
  *((void *)v1 + 6) = 0;
  *((void *)v1 + 7) = "Start";
  *((void *)v1 + 8) = 0x500000001;
  *(void *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2220A4F90;
  *((void *)v1 + 13) = 0;
  *((void *)v1 + 14) = "End";
  *((void *)v1 + 15) = 0x500000002;
  *(void *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  *((_OWORD *)v1 + 9) = xmmword_2220A4F90;
  *((void *)v1 + 20) = 0x3FF0000000000000;
  operator new();
}

void sub_221F9E78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::LinearFade::~LinearFade(Phase::DspLayer::LinearFade *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::LinearFadeSlice::~LinearFadeSlice(_anonymous_namespace_::LinearFadeSlice *this)
{
}

double anonymous namespace'::LinearFadeSlice::Reset(_OWORD *a1)
{
  a1[1] = 0u;
  a1[2] = 0u;
  __asm { FMOV            V0.4S, #1.0 }
  a1[3] = _Q0;
  a1[4] = 0u;
  a1[261] = 0u;
  a1[524] = 0u;
  a1[525] = 0u;
  (*(void (**)(_OWORD *))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  a1[527] = 0u;
  a1[526] = 0u;
  return result;
}

uint64_t anonymous namespace'::LinearFadeSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 0;
  v7[8] = 0;
  v7[12] = 1065353216;
  v7[16] = 0;
  v7[1044] = 0;
  v7[2096] = 0;
  v7[2100] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 8 * a3 + 8416) = a4;
  return result;
}

uint64_t anonymous namespace'::LinearFadeSlice::GetParameter(_anonymous_namespace_::LinearFadeSlice *this, unsigned int a2)
{
  if (a2 > 2) {
    return 9;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::LinearFadeSlice::SetParameter(_anonymous_namespace_::LinearFadeSlice *this, int a2, int a3, double a4)
{
  if (a2 == 2)
  {
    uint64_t result = 0;
    float v7 = a4;
    *((float *)this + a3 + 12) = v7;
  }
  else if (a2 == 1)
  {
    uint64_t result = 0;
    float v8 = a4;
    *((float *)this + a3 + 8) = v8;
  }
  else if (a2)
  {
    return 9;
  }
  else
  {
    uint64_t result = 0;
    float v6 = a4;
    *((float *)this + a3 + 4) = v6;
  }
  return result;
}

float32x4_t anonymous namespace'::LinearFadeSlice::UpdateParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const float *)(a2 + 8);
  float32x4_t v4 = vld1q_dup_f32(v3);
  float32x4_t v6 = *(float32x4_t *)(a1 + 48);
  float32x4_t v7 = vdivq_f32(v4, *(float32x4_t *)(a1 + 16));
  long long v8 = *(_OWORD *)(a1 + 4176);
  float32x4_t v9 = *(float32x4_t *)(a1 + 32);
  memcpy((void *)(a1 + 4192), (const void *)(a1 + 64), 0x1010uLL);
  *(float32x4_t *)(a1 + 8304) = v6;
  *(float32x4_t *)(a1 + 8320) = v7;
  *(_OWORD *)(a1 + 8336) = v8;
  *(float32x4_t *)(a1 + 8352) = v9;
  float32x4_t result = vsubq_f32(v6, v9);
  *(float32x4_t *)(a1 + 8368) = result;
  return result;
}

float anonymous namespace'::LinearFadeSlice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = a1 + 4 * a3;
  float v4 = *(float *)(v3 + 48);
  float v5 = *(float *)(v3 + 16);
  float v6 = *(float *)(a2 + 8);
  int v7 = *(_DWORD *)(v3 + 4176);
  float v8 = *(float *)(v3 + 32);
  uint64_t v9 = *(unsigned int *)(v3 + 64);
  *(_DWORD *)(v3 + 4192) = v9;
  if ((int)v9 >= 1)
  {
    unint64_t v10 = (_DWORD *)(a1 + 4 * a3);
    do
    {
      v10[1052] = v10[20];
      v10[1056] = v10[24];
      v10 += 8;
      --v9;
    }
    while (v9);
  }
  uint64_t v11 = a1 + 4 * a3;
  *(float *)(v11 + 8304) = v4;
  *(float *)(v11 + 8320) = v6 / v5;
  *(_DWORD *)(v11 + 8336) = v7;
  float result = v4 - v8;
  *(float *)(v11 + 8352) = v8;
  *(float *)(v11 + 8368) = result;
  return result;
}

uint64_t anonymous namespace'::LinearFadeSlice::Run(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  float32x4_t v4 = *(float32x4_t *)(result + 8304);
  __asm { FMOV            V2.4S, #1.0 }
  int8x16_t v10 = (int8x16_t)vminnmq_f32(vaddq_f32(*(float32x4_t *)(result + 8320), *(float32x4_t *)(result + 8400)), _Q2);
  int8x16_t v11 = (int8x16_t)vceqq_f32(v4, *(float32x4_t *)(result + 8384));
  int32x4_t v12 = (int32x4_t)vandq_s8(*(int8x16_t *)(result + 4192), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2220A5190));
  int64x2_t v13 = (int64x2_t)vcgtzq_s32(v12);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v13, 1), (int8x16_t)v13).u64[0])
  {
    uint64_t v14 = *(void *)(a2 + 56);
    uint64_t v15 = (float32x4_t *)(result + 4224);
    float32x4_t v16 = 0uLL;
    int32x4_t v17 = 0uLL;
    v18.i64[0] = 0x100000001;
    v18.i64[1] = 0x100000001;
    do
    {
      v19.i32[0] = *(_DWORD *)(v14 + 4 * v15[-1].i32[0]);
      v19.i32[1] = *(_DWORD *)(v14 + 4 * v15[-1].i32[1]);
      v19.i32[2] = *(_DWORD *)(v14 + 4 * v15[-1].i32[2]);
      v19.i32[3] = *(_DWORD *)(v14 + 4 * v15[-1].i32[3]);
      float32x4_t v16 = vmlaq_f32(v16, (float32x4_t)vandq_s8((int8x16_t)v13, v19), *v15);
      int32x4_t v17 = vaddq_s32(v17, v18);
      int64x2_t v13 = (int64x2_t)vcgtq_s32(v12, v17);
      v15 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v13, 1), (int8x16_t)v13).u64[0]);
  }
  else
  {
    float32x4_t v16 = 0uLL;
  }
  float32x4_t v20 = (float32x4_t)vandq_s8(v10, v11);
  HIDWORD(v21) = a4 - 1;
  LODWORD(v21) = a4 - 1;
  float32x4_t v22 = vmulq_f32(vmlaq_f32(*(float32x4_t *)(result + 8352), *(float32x4_t *)(result + 8368), v20), v16);
  int8x16_t v23 = vandq_s8((int8x16_t)v22, vorrq_s8((int8x16_t)vcltzq_f32(v22), (int8x16_t)vcgezq_f32(v22)));
  switch((v21 >> 1))
  {
    case 0u:
      goto LABEL_10;
    case 1u:
      goto LABEL_9;
    case 3u:
      goto LABEL_8;
    case 7u:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8348)) = v23.i32[3];
LABEL_8:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8344)) = v23.i32[2];
LABEL_9:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8340)) = v23.i32[1];
LABEL_10:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8336)) = v23.i32[0];
      break;
    default:
      break;
  }
  *(float32x4_t *)(result + 8384) = v4;
  *(float32x4_t *)(result + 8400) = v20;
  return result;
}

float anonymous namespace'::LinearFadeSlice::CopyVoiceState(_anonymous_namespace_::LinearFadeSlice *this, Phase::DspLayer::VoicePoolSlice *a2, unsigned int a3, unsigned int a4)
{
  float32x4_t v4 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  float v5 = (_DWORD *)((char *)this + 4 * (int)a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  uint64_t v6 = v4[16];
  v5[16] = v6;
  if ((int)v6 >= 1)
  {
    int v7 = (_DWORD *)((char *)this + 4 * (int)a4 + 96);
    float v8 = (int *)((char *)a2 + 4 * (int)a3 + 96);
    do
    {
      *(v7 - 4) = *(v8 - 4);
      int v9 = *v8;
      v8 += 8;
      *int v7 = v9;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  int8x16_t v10 = (_DWORD *)((char *)this + 4 * (int)a4);
  int8x16_t v11 = (_DWORD *)((char *)a2 + 4 * (int)a3);
  uint64_t v12 = v11[1048];
  v10[1048] = v12;
  if ((int)v12 >= 1)
  {
    int64x2_t v13 = v10 + 1056;
    uint64_t v14 = v11 + 1056;
    do
    {
      *(v13 - 4) = *(v14 - 4);
      int v15 = *v14;
      v14 += 8;
      *int64x2_t v13 = v15;
      v13 += 8;
      --v12;
    }
    while (v12);
  }
  v10[1044] = v11[1044];
  v10[2076] = v11[2076];
  v10[2080] = v11[2080];
  v10[2084] = v11[2084];
  v10[2088] = v11[2088];
  v10[2092] = v11[2092];
  if (a3 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 507, "fromLane >= 0 && fromLane < PHASE_SIMD_WIDTH");
  }
  if (a4 >= 4) {
    __assert_rtn("Copy", "DelaylineLinear.hpp", 508, "toLane >= 0 && toLane < PHASE_SIMD_WIDTH");
  }
  float32x4_t v16 = (char *)a2 + 4 * a3;
  int32x4_t v17 = (char *)this + 4 * a4;
  *((_DWORD *)v17 + 2096) = *((_DWORD *)v16 + 2096);
  float result = *((float *)v16 + 2100);
  *((float *)v17 + 2100) = result;
  *((void *)this + (int)a4 + 1052) = *((void *)a2 + (int)a3 + 1052);
  return result;
}

uint64_t anonymous namespace'::LinearFadeSlice::AddInput(_anonymous_namespace_::LinearFadeSlice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  int v7 = (char *)this + 64;
  uint64_t v8 = *((int *)this + a3 + 16);
  if ((int)v8 > 127) {
    return 6;
  }
  uint64_t result = 0;
  int v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 20) = a4;
  *((float *)v9 + 24) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t anonymous namespace'::LinearFadeSlice::RemoveInput(_anonymous_namespace_::LinearFadeSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  else {
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 64, a3, a4);
  }
}

uint64_t anonymous namespace'::LinearFadeSlice::SetInputGain(_anonymous_namespace_::LinearFadeSlice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v6 = *((unsigned int *)this + a3 + 16);
  if ((int)v6 < 1) {
    return 7;
  }
  uint64_t v7 = 0;
  for (uint64_t i = (float *)((char *)this + 4 * a3 + 96); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7) {
      return 7;
    }
  }
  if ((v7 & 0x80000000) != 0) {
    return 7;
  }
  uint64_t result = 0;
  float *i = a5;
  return result;
}

void anonymous namespace'::LinearFadeSlice::GetInputs(_anonymous_namespace_::LinearFadeSlice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 64, a3, (char **)a4);
  }
}

uint64_t anonymous namespace'::LinearFadeSlice::ClearInputs(_anonymous_namespace_::LinearFadeSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 16) = 0;
  return 0;
}

uint64_t anonymous namespace'::LinearFadeSlice::GetMaximumInputConnectionCount(_anonymous_namespace_::LinearFadeSlice *this, int a2)
{
  return (a2 == 0) << 7;
}

unint64_t anonymous namespace'::LinearFadeSlice::GetOutput(_anonymous_namespace_::LinearFadeSlice *this, int a2, int a3)
{
  if (a2) {
    return 0xFFFFFFFF00000008;
  }
  else {
    return (unint64_t)*((unsigned int *)this + a3 + 1044) << 32;
  }
}

uint64_t anonymous namespace'::LinearFadeSlice::SetOutput(_anonymous_namespace_::LinearFadeSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  uint64_t result = 0;
  *((_DWORD *)this + a3 + 1044) = a4;
  return result;
}

void std::__function::__func<Phase::DspLayer::LinearFade::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::LinearFade::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::LinearFade::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::LinearFade::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D478510;
  return result;
}

void std::__function::__func<Phase::DspLayer::LinearFade::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::LinearFade::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D478510;
}

void std::__function::__func<Phase::DspLayer::LinearFade::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::LinearFade::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_221F9F0C8(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

uint64_t Phase::LinkedList::InsertNodeBefore(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(result + 16);
  *(_DWORD *)(result + 16) = v3 + 1;
  if (*(void *)result || *(void *)(result + 8))
  {
    if (a3)
    {
      if (*(void *)result == a3)
      {
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = a3;
        *(void *)(a3 + 8) = a2;
        *(void *)uint64_t result = a2;
      }
      else
      {
        *(void *)(a2 + 8) = *(void *)(a3 + 8);
        *(void *)(a2 + 16) = a3;
        *(void *)(a3 + 8) = a2;
      }
    }
    else
    {
      *(_DWORD *)(result + 16) = v3;
    }
  }
  else
  {
    *(void *)uint64_t result = a2;
    *(void *)(result + 8) = a2;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t Phase::LinkedList::InsertNodeAfter(uint64_t result, uint64_t a2, uint64_t a3)
{
  ++*(_DWORD *)(result + 16);
  uint64_t v3 = *(void *)(result + 8);
  if (*(_OWORD *)result == 0)
  {
    *(void *)uint64_t result = a2;
    *(void *)(result + 8) = a2;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)(a2 + 8) = a3;
    if (v3 == a3)
    {
      *(void *)(a2 + 16) = 0;
      *(void *)(a3 + 16) = a2;
      *(void *)(result + 8) = a2;
    }
    else
    {
      *(void *)(a2 + 16) = *(void *)(a3 + 16);
      *(void *)(a3 + 16) = a2;
    }
  }
  return result;
}

Phase::Logger *Phase::LinkedList::RemoveNode(Phase::Logger *result, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)result;
  if (!*(void *)result && !*((void *)result + 1))
  {
    int8x16_t v11 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 336);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "LinkedList.cpp";
      __int16 v15 = 1024;
      int v16 = 94;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: !IsEmpty() is false.", (uint8_t *)&v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "PRECONDITION: !IsEmpty() is false.");
  }
  if (!a2) {
    goto LABEL_15;
  }
  uint64_t v3 = a2;
  do
  {
    uint64_t v4 = v3;
    uint64_t v3 = *(void *)(v3 + 8);
  }
  while (v3);
  if (v4 != v2)
  {
LABEL_15:
    int v9 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 336);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      uint64_t v14 = "LinkedList.cpp";
      __int16 v15 = 1024;
      int v16 = 95;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: IsNodeOwner(pInNode) is false.", (uint8_t *)&v13, 0x12u);
    }
    int8x16_t v10 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v10, "PRECONDITION: IsNodeOwner(pInNode) is false.");
  }
  --*((_DWORD *)result + 4);
  uint64_t v5 = *((void *)result + 1);
  if (v2 == v5)
  {
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)uint64_t result = 0;
    *((void *)result + 1) = 0;
  }
  else if (v2 == a2)
  {
    uint64_t v7 = *(void *)(a2 + 16);
    *(void *)(v7 + 8) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)uint64_t result = v7;
  }
  else if (v5 == a2)
  {
    uint64_t v8 = *(void *)(a2 + 8);
    *(void *)(v8 + 16) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *((void *)result + 1) = v8;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)(v6 + 16) = *(void *)(a2 + 16);
    *(void *)(*(void *)(a2 + 16) + 8) = v6;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

void sub_221F9F3CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

Phase::LinkwitzRileyFilterBank *Phase::LinkwitzRileyFilterBank::LinkwitzRileyFilterBank(Phase::LinkwitzRileyFilterBank *this, int a2, int a3, int a4, int a5)
{
  *(_DWORD *)this = a5;
  *((_DWORD *)this + 1) = a2;
  *((_DWORD *)this + 2) = a3;
  *((_DWORD *)this + 3) = a4;
  *((_DWORD *)this + 4) = 5;
  *(_OWORD *)((char *)this + 24) = 0u;
  uint64_t v8 = (char *)this + 24;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((void *)this + 9) = 0;
  *((_DWORD *)this + 20) = 1065353216;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  std::vector<float>::resize((uint64_t)this + 88, a3 * a2);
  std::vector<double>::resize((uint64_t)v8, *((int *)this + 4) * (uint64_t)*((int *)this + 2) * *((int *)this + 3));
  Phase::LinkwitzRileyFilterBank::GetDefaultCenterFrequencies(v9, a3, __p);
  Phase::LinkwitzRileyFilterBank::CreateWithCenterFrequency((int *)this, a4, (double **)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_221F9F4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v14 = *v12;
  if (*v12)
  {
    *(void *)(v10 + 96) = v14;
    operator delete(v14);
  }
  std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::~__hash_table(v10 + 48);
  __int16 v15 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 32) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(a1);
}

_OWORD *Phase::LinkwitzRileyFilterBank::GetDefaultCenterFrequencies@<X0>(Phase::LinkwitzRileyFilterBank *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2 > 9)
  {
    if (a2 == 10)
    {
      memset(v9, 0, sizeof(v9));
      uint64_t result = std::vector<double>::__init_with_size[abi:ne180100]<float const*,float const*>(v9, Phase::sOctaveBandFrequencies, &flt_2220E657C, 0xAuLL);
    }
    else
    {
      if (a2 != 31)
      {
LABEL_12:
        uint64_t v7 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 624);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int v9 = 136315650;
          *(void *)&v9[4] = "LinkwitzRileyFilterBank.cpp";
          *(_WORD *)&v9[12] = 1024;
          *(_DWORD *)&v9[14] = 154;
          *(_WORD *)&v9[18] = 1024;
          *(_DWORD *)&v9[20] = a2;
          _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error): \"Current number of bands (%d bands) not defined in Subbands.hpp. Please, create your own custom vector of \" \"center frequencies.\"", v9, 0x18u);
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Current number of bands (%d bands) not defined in Subbands.hpp. Please, create your own custom vector of center frequencies.");
      }
      memset(v9, 0, sizeof(v9));
      uint64_t result = std::vector<double>::__init_with_size[abi:ne180100]<float const*,float const*>(v9, Phase::sThirdOctaveBandFrequencies, Phase::sOctaveBandFrequencies, 0x1FuLL);
    }
LABEL_10:
    uint64_t v5 = *(char **)&v9[16];
    *(_OWORD *)a3 = *(_OWORD *)v9;
    goto LABEL_11;
  }
  if (a2 == 3)
  {
    memset(v9, 0, sizeof(v9));
    uint64_t result = std::vector<double>::__init_with_size[abi:ne180100]<float const*,float const*>(v9, Phase::sThreeBandFrequencies, &Phase::sThreeBandFrequencies[3], 3uLL);
    goto LABEL_10;
  }
  if (a2 != 5) {
    goto LABEL_12;
  }
  uint64_t result = operator new(0x28uLL);
  *uint64_t result = xmmword_2220E6580;
  result[1] = unk_2220E6590;
  *((void *)result + 4) = 0x40BF400000000000;
  uint64_t v5 = (char *)result + 40;
  *a3 = result;
  a3[1] = (char *)result + 40;
LABEL_11:
  a3[2] = v5;
  return result;
}

void sub_221F9F714(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::LinkwitzRileyFilterBank::CreateWithCenterFrequency(int *a1, int a2, double **a3)
{
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<double *>,double>(*a3, a3[1], (double **)__p, (double)((*a1 >> 1) - 1));
  Phase::LinkwitzRileyFilterBank::CreateWithBands(a1, a2, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_221F9F798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::LinkwitzRileyFilterBank::~LinkwitzRileyFilterBank(Phase::LinkwitzRileyFilterBank *this)
{
  unint64_t v2 = (void *)*((void *)this + 11);
  if (v2)
  {
    *((void *)this + 12) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::~__hash_table((uint64_t)this + 48);
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
}

void Phase::LinkwitzRileyFilterBank::CreateWithBands(int *a1, int a2, void *a3)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  a1[3] = a2;
  unsigned int v6 = *a1;
  std::vector<double>::resize((uint64_t)(a1 + 6), a1[2] * a2 * a1[4]);
  int v89 = 0;
  int v7 = a1[2];
  if (v7 >= 1)
  {
    int v8 = 0;
    int v9 = 0;
    double v76 = (double)(v6 >> 1);
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v81 = _Q0;
    _Q0.f64[0] = NAN;
    _Q0.f64[1] = NAN;
    int8x16_t v78 = (int8x16_t)vnegq_f64(_Q0);
    do
    {
      __int16 v15 = (double *)(*a3 + 16 * v8);
      if (v15[1] >= v76) {
        __assert_rtn("CreateWithBands", "LinkwitzRileyFilterBank.cpp", 69, "band.mHighCutInHertz < nyquist");
      }
      if (*v15 <= 0.0) {
        __assert_rtn("CreateWithBands", "LinkwitzRileyFilterBank.cpp", 70, "band.mLowCutInHertz > dc");
      }
      uint64_t v16 = a1[3];
      if (v16)
      {
        if ((v16 & 0x80000000) != 0) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = (char *)operator new(40 * v16);
        int32x4_t v18 = &v17[40 * (int)v16];
        uint64_t v84 = v17;
        int8x16_t v19 = v17;
        do
        {
          *(void *)int8x16_t v19 = 0x3FF0000000000000;
          *(_OWORD *)(v19 + 8) = 0uLL;
          *(_OWORD *)(v19 + 24) = 0uLL;
          v19 += 40;
        }
        while (v19 != v18);
      }
      else
      {
        uint64_t v84 = 0;
        int32x4_t v18 = 0;
      }
      float32x4_t v20 = std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)a1 + 6, v8, &v89);
      unint64_t v21 = (void *)v20[3];
      if (v21)
      {
        v20[4] = v21;
        operator delete(v21);
        float v20[3] = 0;
        v20[4] = 0;
        v20[5] = 0;
      }
      float v20[3] = v84;
      v20[4] = v18;
      v20[5] = v18;
      LODWORD(v3) = *a1;
      double v22 = *v15;
      double v23 = v15[1];
      uint64_t v24 = std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)a1 + 6, v8, &v89)[3];
      uint64_t v25 = std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)a1 + 6, v8, &v89);
      double v26 = (double)*(unint64_t *)&v3;
      if ((double)*(unint64_t *)&v3 * 0.5 <= v23
        || (v22 > 0.0 ? (BOOL v27 = v23 <= v22) : (BOOL v27 = 1),
            v27 || (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v25[4] - v24) >> 3)) < a2))
      {
        __assert_rtn("ButterworthBandPassNthOrder", "Biquad.hpp", 561, "inHighCutoffFrequencyInHertz > inLowCutoffFrequencyInHertz && inLowCutoffFrequencyInHertz > T(0) && inHighCutoffFrequencyInHertz < inSampleRateInHertz / T(2) && std::distance(outSectionFirst, outSectionLast) >= inOrder");
      }
      double v28 = sqrt(v22 * v23) / v26 * 6.28318531;
      *(_OWORD *)__Y = xmmword_2220A4F90;
      double v95 = v28 * 0.0;
      double v96 = v28;
      std::exp[abi:ne180100]<double>(&v95);
      __Delay = v29;
      float v87 = v30;
      if (a2 > 0)
      {
        long double v31 = v26 / 3.14159265 * tan(v22 * 3.14159265 / v26);
        uint64_t v32 = 0;
        long double v33 = v26 / 3.14159265 * tan(v23 * 3.14159265 / v26);
        double v34 = sqrt(v31 * v33);
        double v82 = (v33 - v31) / v34;
        double v35 = v82 * 0.5;
        double v3 = v34 * 6.28318531;
        double v36 = v26 + v26;
        float v37 = (double *)(v24 + 16);
        do
        {
          __double2 v38 = __sincos_stret(((double)(int)++v32 * 2.0 + -1.0) * 3.14159265 / ((double)a2 + (double)a2));
          v39.f64[0] = *(double *)__Y * v38.__cosval - v38.__sinval;
          double v83 = v39.f64[0];
          double v85 = *(double *)&__Y[1] * v38.__cosval;
          v39.f64[1] = *(double *)&__Y[1] * v38.__cosval;
          float64x2_t v94 = vmulq_f64(vmulq_n_f64(v39, v82), v81);
          *(double *)v40.i64 = std::operator*[abi:ne180100]<double>(v94.f64, v94.f64);
          *(double *)v42.i64 = -v41;
          v43.i64[0] = 0x7FF0000000000000;
          if (fabs(v41) != INFINITY)
          {
            *(double *)v43.i64 = 1.0 - *(double *)v40.i64;
            if (fabs(1.0 - *(double *)v40.i64) == INFINITY)
            {
              if (*(double *)v43.i64 <= 0.0)
              {
                v42.i64[0] = vbslq_s8(v78, v43, v42).u64[0];
                v43.i64[0] = 0;
              }
              else
              {
                v40.i64[0] = 0;
                v42.i64[0] = vbslq_s8(v78, v40, v42).u64[0];
              }
            }
            else
            {
              long double v79 = -v41;
              long double v80 = 1.0 - *(double *)v40.i64;
              double v55 = sqrt(hypot(*(long double *)v43.i64, -v41));
              double v56 = atan2(v79, v80);
              v42.i64[0] = 0x7FF8000000000000;
              v43.i64[0] = 0x7FF8000000000000;
              if ((*(void *)&v55 & 0x8000000000000000) == 0)
              {
                if (fabs(v56 * 0.5) == INFINITY)
                {
                  v42.i64[0] = 0x7FF8000000000000;
                  if (v55 == INFINITY) {
                    *(double *)v43.i64 = v55;
                  }
                  else {
                    *(double *)v43.i64 = NAN;
                  }
                }
                else
                {
                  __double2 v57 = __sincos_stret(v56 * 0.5);
                  *(double *)v43.i64 = v55 * v57.__cosval;
                  *(double *)v42.i64 = v55 * v57.__sinval;
                }
              }
            }
          }
          v93[0] = *(double *)v43.i64;
          v93[1] = *(double *)v42.i64;
          double v45 = v3 * (v35 * v83 + std::operator*[abi:ne180100]<double>((double *)__Y, v93)) / v36;
          double v95 = v45 + 1.0;
          double v96 = v3 * (v35 * v85 + v44) / v36;
          double v91 = 1.0 - v45;
          double v92 = -v96;
          long double v46 = std::operator/[abi:ne180100]<double>(&v95, &v91);
          long double v48 = hypot(v46, v47);
          double v49 = v48 * v48;
          v37[1] = v46 * -2.0;
          double v37[2] = v49;
          double v95 = 1.0;
          double v96 = v46 * -2.0;
          double v97 = v49;
          double v91 = Phase::Biquad::details::EvaluatePolynomial<double>(dbl_2220E65B8, (double *)&__Delay);
          double v92 = v50;
          v90[0] = Phase::Biquad::details::EvaluatePolynomial<double>(&v95, (double *)&__Delay);
          v90[1] = v51;
          double v52 = std::operator/[abi:ne180100]<double>(&v91, v90);
          long double v54 = 1.0 / hypot(v52, v53);
          *(v37 - 2) = v54;
          *(v37 - 1) = 0.0;
          *float v37 = -v54;
          v37 += 5;
        }
        while (a2 != v32);
      }
      if (a1[3] >= 1)
      {
        uint64_t v58 = 0;
        uint64_t v59 = 0;
        do
        {
          unint64_t v60 = a1 + 6;
          *(void *)(*((void *)a1 + 3) + 8 * v9) = *(void *)(std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)a1 + 6, v8, &v89)[3]+ v58);
          *(void *)(*v60 + 8 * v9 + 8) = *(void *)(std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)a1 + 6, v8, &v89)[3]+ v58+ 8);
          *(void *)(*v60 + 8 * v9 + 16) = *(void *)(std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)a1 + 6, v8, &v89)[3]+ v58+ 16);
          *(void *)(*v60 + 8 * v9 + 24) = *(void *)(std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)a1 + 6, v8, &v89)[3]+ v58+ 24);
          *(void *)(*v60 + 8 * v9 + 32) = *(void *)(std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t *)a1 + 6, v8, &v89)[3]+ v58+ 32);
          v9 += a1[4];
          ++v59;
          v58 += 40;
        }
        while (v59 < a1[3]);
      }
      int v89 = ++v8;
      int v7 = a1[2];
    }
    while (v8 < v7);
  }
  if (v7)
  {
    if (v7 < 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    size_t v61 = 8 * v7;
    unint64_t v62 = (vDSP_biquad_SetupD *)operator new(v61);
    bzero(v62, v61);
    uint64_t v63 = 0;
    uint64_t v64 = &v62[v61 / 8];
    do
    {
      OneBandBiquadStage = (const double *)Phase::LinkwitzRileyFilterBank::GetOneBandBiquadStage((Phase::LinkwitzRileyFilterBank *)a1, v63);
      v62[v63++] = vDSP_biquad_CreateSetupD(OneBandBiquadStage, a1[3]);
    }
    while (v63 < a1[2]);
  }
  else
  {
    unint64_t v62 = 0;
    uint64_t v64 = 0;
  }
  unint64_t v66 = a1[1];
  __Y[0] = 0;
  std::vector<double>::vector(&v95, v66, __Y);
  unint64_t v67 = a1[1];
  __Delay = 0;
  std::vector<double>::vector(__Y, v67, &__Delay);
  **(void **)&double v95 = 0x3FF0000000000000;
  if (a1[2] >= 1)
  {
    uint64_t v68 = 0;
    unint64_t v69 = 2 * a1[3] + 2;
    do
    {
      v94.f64[0] = 0.0;
      std::vector<double>::vector(&__Delay, v69, &v94);
      vDSP_biquadD(v62[v68], __Delay, *(const double **)&v95, 1, __Y[0], 1, a1[1]);
      vDSP_vclrD(__Delay, 1, v69);
      vDSP_biquadD(v62[v68], __Delay, __Y[0], 1, __Y[0], 1, a1[1]);
      uint64_t v70 = a1[1];
      if ((int)v70 >= 1)
      {
        int32x4_t v71 = __Y[0];
        int32x2_t v72 = (float *)(*((void *)a1 + 11) + 4 * (int)v70 * (int)v68);
        do
        {
          double v73 = *v71++;
          float v74 = v73;
          *v72++ = v74;
          --v70;
        }
        while (v70);
      }
      if (__Delay)
      {
        float v87 = __Delay;
        operator delete(__Delay);
      }
      ++v68;
    }
    while (v68 < a1[2]);
  }
  if (v62 != v64)
  {
    float v75 = v62;
    do
      vDSP_biquad_DestroySetupD(*v75++);
    while (v75 != v64);
  }
  if (__Y[0])
  {
    __Y[1] = __Y[0];
    operator delete(__Y[0]);
  }
  if (v95 != 0.0)
  {
    double v96 = v95;
    operator delete(*(void **)&v95);
  }
  if (v62) {
    operator delete(v62);
  }
}

void sub_221FA0078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  float64x2_t v39 = *(void **)(v37 - 184);
  if (v39)
  {
    *(void *)(v37 - 176) = v39;
    operator delete(v39);
  }
  if (v36) {
    operator delete(v36);
  }
  _Unwind_Resume(exception_object);
}

Phase::Logger *Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<double *>,double>@<X0>(double *a1@<X0>, double *a2@<X1>, double **a3@<X8>, double a4@<D0>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v8 = (char *)a2 - (char *)a1;
  int64_t v9 = a2 - a1;
  *(void *)double v41 = 0;
  *(void *)&v41[8] = 0;
  uint64_t result = (Phase::Logger *)std::vector<Phase::FrequencyBand<double>>::vector(a3, v9, v41);
  int8x16_t v11 = *a3;
  **a3 = 10.0;
  if (v9 == 31)
  {
    if (a1 == a2)
    {
      BOOL v15 = 0;
      BOOL v20 = 1;
    }
    else
    {
      uint64_t v17 = a1 + 1;
      int32x4_t v18 = Phase::sThirdOctaveBandFrequencies;
      do
      {
        float v19 = *v18++;
        BOOL v20 = *(v17 - 1) == v19;
        BOOL v21 = *(v17 - 1) != v19 || v17 == a2;
        ++v17;
      }
      while (!v21);
      BOOL v15 = 0;
    }
  }
  else
  {
    if (v9 != 10)
    {
      BOOL v15 = 0;
LABEL_20:
      BOOL v20 = 0;
      goto LABEL_21;
    }
    if (a1 != a2)
    {
      uint64_t v12 = a1 + 1;
      int v13 = Phase::sOctaveBandFrequencies;
      do
      {
        float v14 = *v13++;
        BOOL v15 = *(v12 - 1) == v14;
        BOOL v16 = *(v12 - 1) != v14 || v12 == a2;
        ++v12;
      }
      while (!v16);
      goto LABEL_20;
    }
    BOOL v20 = 0;
    BOOL v15 = 1;
  }
LABEL_21:
  if (v8 >= 1)
  {
    int64_t v22 = 0;
    int64_t v23 = v9 - 1;
    if (v9 <= 1) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = v9;
    }
    uint64_t v25 = v11 + 2;
    double v26 = a1;
    do
    {
      double v27 = *v26;
      if (v15)
      {
        double v28 = v27 + v27 / 1.41421356 * 0.5;
        if (v28 >= a4) {
          double v28 = a4;
        }
        double v29 = 20.3630682;
      }
      else if (v20)
      {
        double v28 = v27 + v27 / 4.24264069 * 0.5;
        if (v28 >= a4) {
          double v28 = a4;
        }
        double v29 = 17.6429774;
      }
      else
      {
        if ((*(void *)&v27 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          long double v31 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 1136);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            double v32 = *v26;
            *(_DWORD *)double v41 = 136315650;
            *(void *)&v41[4] = "FrequencyResponse.hpp";
            *(_WORD *)&v41[12] = 1024;
            *(_DWORD *)&v41[14] = 99;
            __int16 v42 = 2048;
            double v43 = v32;
            _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [!std::isfinite(inFrequenciesFirst[i]) is true]: \"GetBandsFromCenterFrequencies: bad center frequency: %fHz\"", v41, 0x1Cu);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: bad center frequency: %fHz");
LABEL_60:
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        }
        if (v27 < 10.0)
        {
          double v36 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 1136);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            double v37 = *v26;
            *(_DWORD *)double v41 = 136315906;
            *(void *)&v41[4] = "FrequencyResponse.hpp";
            *(_WORD *)&v41[12] = 1024;
            *(_DWORD *)&v41[14] = 103;
            __int16 v42 = 2048;
            double v43 = v37;
            __int16 v44 = 2048;
            double v45 = 10.0;
            _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inFrequenciesFirst[i] < lowestSupportedFreqInHz is true]: \"GetBandsFromCenterFrequencies: center frequency: %fHz cannot be below lowest supported frequency: %fHz\"", v41, 0x26u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequency: %fHz cannot be below lowest supported frequency: %fHz");
          goto LABEL_60;
        }
        if (v27 > a4)
        {
          double v34 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 1136);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
          {
            double v35 = *v26;
            *(_DWORD *)double v41 = 136315906;
            *(void *)&v41[4] = "FrequencyResponse.hpp";
            *(_WORD *)&v41[12] = 1024;
            *(_DWORD *)&v41[14] = 107;
            __int16 v42 = 2048;
            double v43 = v35;
            __int16 v44 = 2048;
            double v45 = a4;
            _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inFrequenciesFirst[i] > highestSupportedFreqInHz is true]: \"GetBandsFromCenterFrequencies: center frequency: %fHz cannot be above highest supported frequency: %fHz\"", v41, 0x26u);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequency: %fHz cannot be above highest supported frequency: %fHz");
          goto LABEL_60;
        }
        if (v22)
        {
          uint64_t v30 = (v22 - 1);
          if (a1[v30] >= v27)
          {
            __double2 v38 = **(NSObject ***)(Phase::Logger::GetInstance(result) + 1136);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
            {
              double v39 = a1[v30];
              double v40 = *v26;
              *(_DWORD *)double v41 = 136315906;
              *(void *)&v41[4] = "FrequencyResponse.hpp";
              *(_WORD *)&v41[12] = 1024;
              *(_DWORD *)&v41[14] = 111;
              __int16 v42 = 2048;
              double v43 = v39;
              __int16 v44 = 2048;
              double v45 = v40;
              _os_log_impl(&dword_221E5E000, v38, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [i > 0 && inFrequenciesFirst[i - 1] >= inFrequenciesFirst[i] is true]: \"GetBandsFromCenterFrequencies: center frequencies are not in ascending order. %fHz is before %fHz\"", v41, 0x26u);
            }
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "GetBandsFromCenterFrequencies: center frequencies are not in ascending order. %fHz is before %fHz");
            goto LABEL_60;
          }
        }
        double v29 = 10.0;
        if (v23 <= v22) {
          double v28 = a4;
        }
        else {
          double v28 = v27 * sqrt(v26[1] / v27);
        }
      }
      *(v25 - 1) = v28;
      *int8x16_t v11 = v29;
      if (v23 > v22) {
        *uint64_t v25 = v28;
      }
      ++v22;
      ++v26;
      v25 += 2;
    }
    while (v24 != v22);
  }
  return result;
}

void sub_221FA060C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::LinkwitzRileyFilterBank::GetOneBandImpulseResponse(Phase::LinkwitzRileyFilterBank *this, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 2) <= a2)
  {
    uint64_t v4 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 624);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = *((_DWORD *)this + 2);
      *(_DWORD *)buf = 136315906;
      int64_t v9 = "LinkwitzRileyFilterBank.cpp";
      __int16 v10 = 1024;
      int v11 = 173;
      __int16 v12 = 1024;
      int v13 = a2;
      __int16 v14 = 1024;
      int v15 = v5;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inBand > mNumBands - 1 is true]: \"Current band (%d) is bigger than than the current constructed filter bank (%d bands)\"", buf, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Current band (%d) is bigger than than the current constructed filter bank (%d bands)");
  }
  return *((void *)this + 11) + 4 * *((_DWORD *)this + 1) * a2;
}

void sub_221FA078C(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::LinkwitzRileyFilterBank::GetOneBandBiquadStage(Phase::LinkwitzRileyFilterBank *this, int a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 2) <= a2)
  {
    uint64_t v4 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 624);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = *((_DWORD *)this + 2);
      *(_DWORD *)buf = 136315906;
      int64_t v9 = "LinkwitzRileyFilterBank.cpp";
      __int16 v10 = 1024;
      int v11 = 182;
      __int16 v12 = 1024;
      int v13 = a2;
      __int16 v14 = 1024;
      int v15 = v5;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inBand > mNumBands - 1 is true]: \"Current band (%d) is bigger than than the current constructed filter bank (%d bands)\"", buf, 0x1Eu);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Current band (%d) is bigger than than the current constructed filter bank (%d bands)");
  }
  return *((void *)this + 3) + 8 * *((_DWORD *)this + 4) * a2 * *((_DWORD *)this + 3);
}

void sub_221FA08DC(_Unwind_Exception *exception_object)
{
}

void Phase::LinkwitzRileyFilterBank::CreateVDSPFilterBankSetup(Phase::LinkwitzRileyFilterBank *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<vDSP_biquad_SetupStruct *>::resize((uint64_t)a2, *((int *)this + 2));
  if (*((int *)this + 2) >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      OneBandBiquadStage = (const double *)Phase::LinkwitzRileyFilterBank::GetOneBandBiquadStage(this, v4);
      *(void *)(*a2 + 8 * v4++) = vDSP_biquad_CreateSetup(OneBandBiquadStage, *((int *)this + 3));
    }
    while (v4 < *((int *)this + 2));
  }
}

void sub_221FA0974(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<vDSP_biquad_SetupStruct *>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<vDSP_biquad_SetupStruct *>::__append((char **)a1, a2 - v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    unint64_t v2 = __p;
    do
    {
      double v3 = (void *)*v2;
      uint64_t v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  unsigned int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  int v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      __int16 v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v4, v13);
      uint64_t v8 = *a1;
      int v7 = a1[1];
    }
    else
    {
      __int16 v14 = 0;
    }
    int v15 = &v14[8 * v11];
    uint64_t v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    uint64_t v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__hash_table<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<Phase::Biquad::Coefficients<double>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t *a1, int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      unint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 2;
  unint64_t v10 = operator new(0x30uLL);
  *unint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[4] = 0;
  v10[5] = 0;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = a1[1];
    }
    if (*(void *)&prime > v7) {
      goto LABEL_30;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (*(void *)&prime <= v25) {
        int8x8_t prime = (int8x8_t)v25;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          float v19 = operator new(8 * *(void *)&prime);
          BOOL v20 = (void *)*a1;
          *a1 = (uint64_t)v19;
          if (v20) {
            operator delete(v20);
          }
          uint64_t v21 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(void *)(*a1 + 8 * v21++) = 0;
          while (*(void *)&prime != v21);
          int64_t v22 = (void *)*v12;
          if (*v12)
          {
            unint64_t v23 = v22[1];
            uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(void *)&prime) {
                v23 %= *(void *)&prime;
              }
            }
            else
            {
              v23 &= *(void *)&prime - 1;
            }
            *(void *)(*a1 + 8 * v23) = v12;
            double v28 = (void *)*v22;
            if (*v22)
            {
              do
              {
                unint64_t v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(void *)&prime) {
                    v29 %= *(void *)&prime;
                  }
                }
                else
                {
                  v29 &= *(void *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(void *)(*a1 + 8 * v29))
                  {
                    *(void *)(*a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  void *v22 = *v28;
                  *double v28 = **(void **)(*a1 + 8 * v29);
                  **(void **)(*a1 + 8 * v29) = v28;
                  double v28 = v22;
                }
                unint64_t v29 = v23;
LABEL_55:
                int64_t v22 = v28;
                double v28 = (void *)*v28;
                unint64_t v23 = v29;
              }
              while (v28);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        double v34 = (void *)*a1;
        *a1 = 0;
        if (v34) {
          operator delete(v34);
        }
        unint64_t v7 = 0;
        a1[1] = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v30 = *a1;
  long double v31 = *(void **)(*a1 + 8 * v3);
  if (v31)
  {
    *unint64_t v10 = *v31;
LABEL_72:
    *long double v31 = v10;
    goto LABEL_73;
  }
  *unint64_t v10 = *v12;
  *uint64_t v12 = v10;
  *(void *)(v30 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v32 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    long double v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_221FA0F4C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::vector<vDSP_biquad_SetupStruct *>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::exp[abi:ne180100]<double>(double *a1)
{
  long double v1 = *a1;
  double v2 = a1[1];
  if (v2 == 0.0)
  {
    exp(v1);
    return;
  }
  if (fabs(v1) == INFINITY)
  {
    if (v1 >= 0.0)
    {
      if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
        return;
      }
    }
    else if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      double v2 = 1.0;
    }
  }
  double v3 = v2;
  exp(v1);
  __sincos_stret(v3);
}

double std::operator*[abi:ne180100]<double>(double *a1, double *a2)
{
  return *a1 * *a2 - a1[1] * a2[1];
}

double std::operator/[abi:ne180100]<double>(double *a1, long double *a2)
{
  double v8 = *a1;
  double v9 = a1[1];
  long double v10 = a2[1];
  __simd_float4 x = *a2;
  double v2 = logb(fmax(fabs(*a2), fabs(v10)));
  if ((*(void *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    int v3 = 0;
    double v4 = v10;
  }
  else
  {
    int v3 = (int)v2;
    __simd_float4 x = ldexp(__x, -(int)v2);
    double v4 = ldexp(v10, -v3);
  }
  double v11 = v4;
  long double v5 = v4 * v4 + __x * __x;
  double v6 = ldexp((v9 * v4 + v8 * __x) / v5, -v3);
  ldexp((v9 * __x - v8 * v11) / v5, -v3);
  return v6;
}

double Phase::Biquad::details::EvaluatePolynomial<double>(double *a1, double *a2)
{
  uint64_t v3 = 0;
  double v4 = a1 + 1;
  double v7 = *a1;
  uint64_t v8 = 0;
  do
  {
    double result = std::operator*[abi:ne180100]<double>(a2, &v7) + *(double *)&v4[v3];
    double v7 = result;
    uint64_t v8 = v6;
    ++v3;
  }
  while (v3 != 2);
  return result;
}

void *std::vector<double>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Phase::FrequencyBand<float>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    double v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_221FA157C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<double>::__init_with_size[abi:ne180100]<float const*,float const*>(char *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<Phase::FrequencyBand<float>>::__vallocate[abi:ne180100](result, a4);
    double v7 = (double *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_221FA15F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<Phase::FrequencyBand<double>>::vector(void *a1, unint64_t a2, _OWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<Phase::Geometry::MpsCpuScene>>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_OWORD *)a1[1];
    double v7 = &v6[a2];
    uint64_t v8 = 16 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 16;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_221FA1678(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<vDSP_biquad_SetupStruct *>::__append(char **a1, unint64_t a2)
{
  long double v5 = a1[1];
  double v4 = a1[2];
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = v5 - *a1;
    unint64_t v8 = a2 + (v7 >> 3);
    if (v8 >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 2 > v8) {
      unint64_t v8 = v9 >> 2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      double v11 = (char *)operator new(8 * v10);
    }
    else
    {
      double v11 = 0;
    }
    uint64_t v12 = &v11[8 * (v7 >> 3)];
    float v13 = &v11[8 * v10];
    bzero(v12, 8 * a2);
    float v14 = &v12[8 * a2];
    if (v5 != v6)
    {
      do
      {
        uint64_t v15 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v12 - 1) = v15;
        v12 -= 8;
      }
      while (v5 != v6);
      long double v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v14;
    a1[2] = v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void Phase::Controller::ListenerHeadTracker::ListenerHeadTracker(Phase::Controller::ListenerHeadTracker *this)
{
}

void sub_221FA1800(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void Phase::Controller::ListenerHeadTracker::~ListenerHeadTracker(id **this)
{
  uint64_t v1 = *this;
  if (v1)
  {
    Phase::Controller::ListenerHeadTrackerImpl::~ListenerHeadTrackerImpl(v1);
    MEMORY[0x223C938A0]();
  }
}

double Phase::Controller::ListenerHeadTrackerImpl::UpdateAndGetLatest(id *a1, _OWORD *a2)
{
  long long v21 = xmmword_2220A4E00;
  if (![*a1 _currentAudioListenerPose:v20 timestamp:0])
  {
    float v3 = v20[1];
    float v4 = v20[2];
    float v5 = v20[0];
    float v6 = v20[3];
    *(float *)&long long v21 = v3;
    *((float *)&v21 + 1) = -v4;
    *((float *)&v21 + 2) = -v5;
    *((float *)&v21 + 3) = v6;
  }
  Phase::Matrix33From<float>((float *)&v21, (float *)v22);
  uint64_t v9 = *(void *)v22;
  int v10 = *(_DWORD *)&v22[8];
  int v11 = 0;
  uint64_t v12 = *(void *)&v22[12];
  int v13 = *(_DWORD *)&v22[20];
  int v14 = 0;
  uint64_t v15 = *(void *)&v22[24];
  int v16 = v23;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  int v19 = 1065353216;
  Phase::AffineFrom<float>((float *)&v9, (uint64_t)v22);
  double result = *(double *)v22;
  long long v8 = *(_OWORD *)&v22[16];
  *a2 = *(_OWORD *)v22;
  a2[1] = v8;
  return result;
}

id *Phase::Controller::ListenerHeadTrackerImpl::ListenerHeadTrackerImpl(id *this)
{
  *this = 0;
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2050000000;
  double v2 = (void *)_MergedGlobals_17;
  uint64_t v13 = _MergedGlobals_17;
  if (!_MergedGlobals_17)
  {
    RelativeMotionLibraryCore(0);
    v11[3] = (uint64_t)objc_getClass("RMMediaSessionOptions");
    _MergedGlobals_17 = v11[3];
    double v2 = (void *)v11[3];
  }
  float v3 = v2;
  _Block_object_dispose(&v10, 8);
  id v4 = [v3 alloc];
  [v4 setPredictionIntervalMicroseconds:100000];
  [v4 setClientMode:0];
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2050000000;
  float v5 = (void *)qword_267F77B40;
  uint64_t v13 = qword_267F77B40;
  if (!qword_267F77B40)
  {
    RelativeMotionLibraryCore(0);
    v11[3] = (uint64_t)objc_getClass("RMMediaSession");
    qword_267F77B40 = v11[3];
    float v5 = (void *)v11[3];
  }
  float v6 = v5;
  _Block_object_dispose(&v10, 8);
  uint64_t v7 = [[v6 alloc] _initWithOptions:v4];
  id v8 = *this;
  *this = (id)v7;

  [*this _start];
  return this;
}

void sub_221FA1B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

Class ___ZL29getRMMediaSessionOptionsClassv_block_invoke(uint64_t a1)
{
  RelativeMotionLibraryCore((char **)a1);
  Class result = objc_getClass("RMMediaSessionOptions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  _MergedGlobals_17 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void RelativeMotionLibraryCore(char **a1)
{
  if (!RelativeMotionLibraryCore(char **)::frameworkLibrary) {
    RelativeMotionLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  }
}

uint64_t ___ZL25RelativeMotionLibraryCorePPc_block_invoke()
{
  uint64_t result = _sl_dlopen();
  RelativeMotionLibraryCore(char **)::frameworkLibrary = result;
  return result;
}

Class ___ZL22getRMMediaSessionClassv_block_invoke(uint64_t a1)
{
  RelativeMotionLibraryCore((char **)a1);
  Class result = objc_getClass("RMMediaSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_267F77B40 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void Phase::Controller::ListenerHeadTrackerImpl::~ListenerHeadTrackerImpl(id *this)
{
  [*this _stop];
  id v2 = *this;
  *this = 0;
}

float Phase::AffineFrom<float>@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  *(_OWORD *)a2 = xmmword_2220A4E00;
  *(_DWORD *)(a2 + 16) = 0;
  *(void *)(a2 + 20) = 0;
  *(_DWORD *)(a2 + 28) = 1065353216;
  float v5 = *a1;
  float v4 = a1[1];
  float v6 = a1[2];
  float v8 = a1[4];
  float v7 = a1[5];
  float v9 = a1[6];
  float v11 = a1[8];
  float v10 = a1[9];
  float v12 = a1[10];
  float v13 = sqrtf((float)((float)(v5 * v5) + (float)(v4 * v4)) + (float)(v6 * v6));
  float v14 = sqrtf((float)((float)(v8 * v8) + (float)(v7 * v7)) + (float)(v9 * v9));
  float v15 = sqrtf((float)((float)(v11 * v11) + (float)(v10 * v10)) + (float)(v12 * v12));
  float v16 = fmaxf(fmaxf(v13, v14), v15) * 0.001;
  float v17 = v13 - v14;
  if ((float)(v13 - v14) < 0.0) {
    float v17 = -(float)(v13 - v14);
  }
  if (v17 > v16) {
    goto LABEL_20;
  }
  float v18 = v13 - v15;
  if ((float)(v13 - v15) < 0.0) {
    float v18 = -(float)(v13 - v15);
  }
  if (v18 > v16)
  {
LABEL_20:
    long double v54 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 96);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      double v55 = *a1;
      double v56 = a1[1];
      double v57 = a1[2];
      double v58 = a1[3];
      double v59 = a1[4];
      double v60 = a1[5];
      double v61 = a1[6];
      double v62 = a1[7];
      double v63 = a1[8];
      double v64 = a1[9];
      double v65 = a1[10];
      double v66 = a1[11];
      double v67 = a1[12];
      double v68 = a1[13];
      double v69 = a1[14];
      double v70 = a1[15];
      *(_DWORD *)buf = 136319490;
      *(void *)&uint8_t buf[4] = "AffineFunctions.hpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 71;
      __int16 v74 = 2048;
      double v75 = v55;
      __int16 v76 = 2048;
      double v77 = v56;
      __int16 v78 = 2048;
      double v79 = v57;
      __int16 v80 = 2048;
      double v81 = v58;
      __int16 v82 = 2048;
      double v83 = v59;
      __int16 v84 = 2048;
      double v85 = v60;
      __int16 v86 = 2048;
      double v87 = v61;
      __int16 v88 = 2048;
      double v89 = v62;
      __int16 v90 = 2048;
      double v91 = v63;
      __int16 v92 = 2048;
      double v93 = v64;
      __int16 v94 = 2048;
      double v95 = v65;
      __int16 v96 = 2048;
      double v97 = v66;
      __int16 v98 = 2048;
      double v99 = v67;
      __int16 v100 = 2048;
      double v101 = v68;
      __int16 v102 = 2048;
      double v103 = v69;
      __int16 v104 = 2048;
      double v105 = v70;
      _os_log_impl(&dword_221E5E000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!IsNearlyEqual(len0, len1, uniformScalingEpsilon) || !IsNearlyEqual(len0, len2, uniformScalingEpsilon) is true]: \"Matrix 4x4 passed into AffineFrom() does not have uniform scale: [%f, %f, %f, %f], [%f, %f, %f, %f], [%f, %f, %f, \" \"%f], [%f, %f, %f, %f]\"", buf, 0xB2u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Matrix 4x4 passed into AffineFrom() does not have uniform scale: [%f, %f, %f, %f], [%f, %f, %f, %f], [%f, %f, %f, %f], [%f, %f, %f, %f]");
  }
  *(float *)(a2 + 28) = (float)((float)(v13 + v14) + v15) / 3.0;
  float v19 = 1.0 / v13;
  float v20 = v5 * v19;
  float v21 = v4 * v19;
  v72[0] = v20;
  v72[1] = v21;
  float v22 = v6 * v19;
  float v23 = 1.0 / v14;
  float v24 = v8 * v23;
  v72[2] = v22;
  v72[3] = v24;
  float v25 = v7 * v23;
  float v26 = v9 * v23;
  v72[4] = v25;
  v72[5] = v26;
  float v27 = 1.0 / v15;
  float v28 = v11 * v27;
  float v29 = v10 * v27;
  v72[6] = v28;
  v72[7] = v29;
  float v30 = v12 * v27;
  v72[8] = v30;
  float v31 = (float)(v22 * v26) + (float)((float)(v20 * v24) + (float)(v21 * v25));
  float v32 = -v31;
  if (v31 >= 0.0) {
    float v32 = (float)(v22 * v26) + (float)((float)(v20 * v24) + (float)(v21 * v25));
  }
  if (v32 > 0.017) {
    goto LABEL_17;
  }
  float v33 = (float)(v22 * v30) + (float)((float)(v20 * v28) + (float)(v21 * v29));
  if (v33 < 0.0) {
    float v33 = -v33;
  }
  if (v33 > 0.017) {
    goto LABEL_17;
  }
  float v34 = (float)(v26 * v30) + (float)((float)(v24 * v28) + (float)(v25 * v29));
  if (v34 < 0.0) {
    float v34 = -v34;
  }
  if (v34 > 0.017)
  {
LABEL_17:
    double v36 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 96);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      double v37 = *a1;
      double v38 = a1[1];
      double v39 = a1[2];
      double v40 = a1[3];
      double v41 = a1[4];
      double v42 = a1[5];
      double v43 = a1[6];
      double v44 = a1[7];
      double v45 = a1[8];
      double v46 = a1[9];
      double v47 = a1[10];
      double v48 = a1[11];
      double v49 = a1[12];
      double v50 = a1[13];
      double v51 = a1[14];
      double v52 = a1[15];
      *(_DWORD *)buf = 136319490;
      *(void *)&uint8_t buf[4] = "AffineFunctions.hpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 94;
      __int16 v74 = 2048;
      double v75 = v37;
      __int16 v76 = 2048;
      double v77 = v38;
      __int16 v78 = 2048;
      double v79 = v39;
      __int16 v80 = 2048;
      double v81 = v40;
      __int16 v82 = 2048;
      double v83 = v41;
      __int16 v84 = 2048;
      double v85 = v42;
      __int16 v86 = 2048;
      double v87 = v43;
      __int16 v88 = 2048;
      double v89 = v44;
      __int16 v90 = 2048;
      double v91 = v45;
      __int16 v92 = 2048;
      double v93 = v46;
      __int16 v94 = 2048;
      double v95 = v47;
      __int16 v96 = 2048;
      double v97 = v48;
      __int16 v98 = 2048;
      double v99 = v49;
      __int16 v100 = 2048;
      double v101 = v50;
      __int16 v102 = 2048;
      double v103 = v51;
      __int16 v104 = 2048;
      double v105 = v52;
      _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!IsNearlyEqual(dot1, T(0), orthogonalityEpsilon) || !IsNearlyEqual(dot2, T(0), orthogonalityEpsilon) || !IsNearlyEqual(dot3, T(0), orthogonalityEpsilon) is true]: \"Matrix 4x4 passed into AffineFrom() is not orthogonal: [%f, %f, %f, %f], [%f, %f, %f, %f], [%f, %f, %f, %f], [%f, %f, %f, %f]\"", buf, 0xB2u);
    }
    long double v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, "Matrix 4x4 passed into AffineFrom() is not orthogonal: [%f, %f, %f, %f], [%f, %f, %f, %f], [%f, %f, %f, %f], [%f, %f, %f, %f]");
  }
  Phase::QuaternionFromMatrix33<float>(v72, (float *)buf);
  *(_OWORD *)a2 = *(_OWORD *)buf;
  float result = a1[14];
  *(void *)(a2 + 16) = *((void *)a1 + 6);
  *(float *)(a2 + 24) = result;
  return result;
}

void sub_221FA22E4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float Phase::QuaternionFromMatrix33<float>@<S0>(float *a1@<X0>, float *a2@<X8>)
{
  float v2 = a1[8];
  float v3 = *a1;
  float v4 = a1[4];
  if (v2 >= 0.0)
  {
    float v7 = a1[1] - a1[3];
    if (v3 >= (float)-v4)
    {
      float v8 = v2 + (float)((float)(v3 + 1.0) + v4);
      float v5 = a1[5] - a1[7];
      float v9 = a1[6] - a1[2];
      float v6 = v8;
    }
    else
    {
      float v6 = v2 + (float)((float)(1.0 - v3) - v4);
      float v5 = a1[6] + a1[2];
      float v9 = a1[5] + a1[7];
      float v8 = a1[1] - a1[3];
      float v7 = v6;
    }
  }
  else
  {
    float v5 = a1[1] + a1[3];
    if (v3 <= v4)
    {
      float v9 = (float)((float)(1.0 - v3) + v4) - v2;
      float v7 = a1[5] + a1[7];
      float v8 = a1[6] - a1[2];
      float v6 = v9;
    }
    else
    {
      float v6 = (float)((float)(v3 + 1.0) - v4) - v2;
      float v7 = a1[6] + a1[2];
      float v8 = a1[5] - a1[7];
      float v9 = a1[1] + a1[3];
      float v5 = v6;
    }
  }
  float v10 = 0.5 / sqrtf(v6);
  *a2 = v5 * v10;
  a2[1] = v9 * v10;
  float result = v7 * v10;
  a2[2] = result;
  a2[3] = v8 * v10;
  return result;
}

void Phase::Controller::ListenerManager::ListenerManager(Phase::Controller::ListenerManager *this, const Phase::Controller::TaskManager *a2)
{
}

void sub_221FA249C(_Unwind_Exception *a1)
{
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::ListenerManager::Update(id ***this, float a2)
{
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  long long v11 = xmmword_2220A4E00;
  int v12 = 0;
  uint64_t v13 = 0;
  int v14 = 1065353216;
  float v3 = (uint64_t **)(this + 8);
  float v4 = (char *)(this + 8);
  do
  {
    float v4 = *(char **)v4;
    if (!v4)
    {
      std::unique_ptr<Phase::Controller::ListenerHeadTracker>::reset[abi:ne180100](this + 11, 0);
      goto LABEL_8;
    }
  }
  while (!v4[64]);
  float v5 = this[11];
  if (!v5) {
    operator new();
  }
  Phase::Controller::ListenerHeadTrackerImpl::UpdateAndGetLatest(*v5, &v11);
LABEL_8:
  for (uint64_t i = *v3; i; uint64_t i = (uint64_t *)*i)
  {
    long long v7 = *((_OWORD *)i + 3);
    long long v9 = *((_OWORD *)i + 2);
    long long v10 = v7;
    if (*((unsigned char *)i + 64))
    {
      Phase::operator*<float>((float32x2_t *)i + 4, (float *)&v11, (uint64_t)v8);
      long long v9 = v8[0];
      long long v10 = v8[1];
    }
    Phase::Geometry::SystemScheduler::UpdateTransform((uint64_t)(this[5] + 294), i[3], &v9);
  }
}

void sub_221FA25BC(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::ListenerManager::AddListener(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = **(void **)(a1 + 8);
  unint64_t v12 = 0;
  BOOL v11 = 1;
  float v5 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v4, 24, &v12, &v11);
  if (!v5)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    long long v9 = **(id **)(v4 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 100;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v11)
  {
    float v6 = **(id **)(v4 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      int v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 89;
      __int16 v17 = 2048;
      unint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 24;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *float v5 = &unk_26D478588;
  v5[1] = a1;
  v5[2] = a2;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v4, 24);
  atomic_store(0, (unsigned __int8 *)(v4 + 40));
  return result;
}

void sub_221FA27EC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FA2704);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::ListenerManager::RemoveListener(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = **(void **)(a1 + 8);
  unint64_t v12 = 0;
  BOOL v11 = 1;
  float v5 = (void *)Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v4, 24, &v12, &v11);
  if (!v5)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    long long v9 = **(id **)(v4 + 48);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 100;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v11)
  {
    float v6 = **(id **)(v4 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      int v14 = "CommandQueue.hpp";
      __int16 v15 = 1024;
      int v16 = 89;
      __int16 v17 = 2048;
      unint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = 24;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *float v5 = &unk_26D4785B0;
  v5[1] = a1;
  v5[2] = a2;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v4, 24);
  atomic_store(0, (unsigned __int8 *)(v4 + 40));
  return result;
}

void sub_221FA2A58(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FA2970);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::ListenerManager::UpdateTransform(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v12 = a3[1];
  long long v13 = *a3;
  uint64_t v5 = **(void **)(a1 + 8);
  unint64_t v15 = 0;
  BOOL v14 = 1;
  uint64_t v6 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v5, 56, &v15, &v14);
  if (!v6)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    long long v10 = **(id **)(v5 + 48);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v17 = "CommandQueue.hpp";
      __int16 v18 = 1024;
      int v19 = 100;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v14)
  {
    long long v7 = **(id **)(v5 + 48);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      __int16 v17 = "CommandQueue.hpp";
      __int16 v18 = 1024;
      int v19 = 89;
      __int16 v20 = 2048;
      unint64_t v21 = v15;
      __int16 v22 = 2048;
      uint64_t v23 = 56;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v6 = &unk_26D4785D8;
  *(void *)(v6 + 8) = a1;
  *(void *)(v6 + 16) = a2;
  *(_OWORD *)(v6 + 24) = v13;
  *(_OWORD *)(v6 + 40) = v12;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v5, 56);
  atomic_store(0, (unsigned __int8 *)(v5 + 40));
  return result;
}

void sub_221FA2CDC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FA2BF4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::ListenerManager::SetTracking(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v6 = **(void **)(a1 + 8);
  unint64_t v14 = 0;
  BOOL v13 = 1;
  uint64_t v7 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v6, 32, &v14, &v13);
  if (!v7)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    BOOL v11 = **(id **)(v6 + 48);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 100;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v13)
  {
    float v8 = **(id **)(v6 + 48);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      int v16 = "CommandQueue.hpp";
      __int16 v17 = 1024;
      int v18 = 89;
      __int16 v19 = 2048;
      unint64_t v20 = v14;
      __int16 v21 = 2048;
      uint64_t v22 = 32;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v7 = &unk_26D478600;
  *(void *)(v7 + 8) = a1;
  *(void *)(v7 + 16) = a2;
  *(unsigned char *)(v7 + 24) = a3;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v6, 32);
  atomic_store(0, (unsigned __int8 *)(v6 + 40));
  return result;
}

void sub_221FA2F50(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FA2E68);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::ListenerManager::~ListenerManager(id ***this)
{
  Phase::Controller::ListenerManager::~ListenerManager(this);

  JUMPOUT(0x223C938A0);
}

{
  id **v2;
  id **v3;
  id **v4;
  uint64_t vars8;

  *this = (id **)&unk_26D478558;
  std::unique_ptr<Phase::Controller::ListenerHeadTracker>::reset[abi:ne180100](this + 11, 0);
  uint64_t v2 = this[8];
  if (v2)
  {
    do
    {
      float v3 = (id **)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = this[6];
  this[6] = 0;
  if (v4) {
    operator delete(v4);
  }

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

id **std::unique_ptr<Phase::Controller::ListenerHeadTracker>::reset[abi:ne180100](id ***a1, id **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::ListenerHeadTracker::~ListenerHeadTracker(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::LambdaFunction<Phase::Controller::ListenerManager::AddListener(Phase::Handle64)::$_0,void>::~LambdaFunction()
{
}

double Phase::LambdaFunction<Phase::Controller::ListenerManager::AddListener(Phase::Handle64)::$_0,void>::operator()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = (void **)(v3 + 48);
  if (std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((void *)(v3 + 48), v2))
  {
    return result;
  }
  unint64_t v6 = *(void *)(v3 + 56);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v1 = v2;
      if (v6 <= v2) {
        unint64_t v1 = v2 % v6;
      }
    }
    else
    {
      unint64_t v1 = (v6 - 1) & v2;
    }
    float v8 = (void **)*((void *)*v4 + v1);
    if (v8)
    {
      long long v9 = (char *)*v8;
      if (*v8)
      {
        do
        {
          unint64_t v10 = *((void *)v9 + 1);
          if (v10 == v2)
          {
            if (*((void *)v9 + 2) == v2) {
              goto LABEL_75;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6) {
                v10 %= v6;
              }
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v1) {
              break;
            }
          }
          long long v9 = *(char **)v9;
        }
        while (v9);
      }
    }
  }
  long long v9 = (char *)operator new(0x48uLL);
  *(void *)long long v9 = 0;
  *((void *)v9 + 1) = v2;
  *((void *)v9 + 2) = v2;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *((_DWORD *)v9 + 11) = 1065353216;
  *((_DWORD *)v9 + 15) = 1065353216;
  float v11 = (float)(unint64_t)(*(void *)(v3 + 72) + 1);
  float v12 = *(float *)(v3 + 80);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    BOOL v13 = 1;
    if (v6 >= 3) {
      BOOL v13 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v14 = v13 | (2 * v6);
    unint64_t v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15) {
      int8x8_t prime = (int8x8_t)v15;
    }
    else {
      int8x8_t prime = (int8x8_t)v14;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *(void *)(v3 + 56);
    }
    if (*(void *)&prime > v6) {
      goto LABEL_31;
    }
    if (*(void *)&prime < v6)
    {
      unint64_t v23 = vcvtps_u32_f32((float)*(unint64_t *)(v3 + 72) / *(float *)(v3 + 80));
      if (v6 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
      {
        unint64_t v23 = std::__next_prime(v23);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v23 - 1);
        if (v23 >= 2) {
          unint64_t v23 = v25;
        }
      }
      if (*(void *)&prime <= v23) {
        int8x8_t prime = (int8x8_t)v23;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *(void *)(v3 + 56);
      }
      else
      {
        if (prime)
        {
LABEL_31:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          __int16 v17 = operator new(8 * *(void *)&prime);
          int v18 = *v4;
          *uint64_t v4 = v17;
          if (v18) {
            operator delete(v18);
          }
          uint64_t v19 = 0;
          *(int8x8_t *)(v3 + 56) = prime;
          do
            *((void *)*v4 + v19++) = 0;
          while (*(void *)&prime != v19);
          unint64_t v20 = *(void **)(v3 + 64);
          if (v20)
          {
            unint64_t v21 = v20[1];
            uint8x8_t v22 = (uint8x8_t)vcnt_s8(prime);
            v22.i16[0] = vaddlv_u8(v22);
            if (v22.u32[0] > 1uLL)
            {
              if (v21 >= *(void *)&prime) {
                v21 %= *(void *)&prime;
              }
            }
            else
            {
              v21 &= *(void *)&prime - 1;
            }
            *((void *)*v4 + v21) = v3 + 64;
            float v26 = (void *)*v20;
            if (*v20)
            {
              do
              {
                unint64_t v27 = v26[1];
                if (v22.u32[0] > 1uLL)
                {
                  if (v27 >= *(void *)&prime) {
                    v27 %= *(void *)&prime;
                  }
                }
                else
                {
                  v27 &= *(void *)&prime - 1;
                }
                if (v27 != v21)
                {
                  if (!*((void *)*v4 + v27))
                  {
                    *((void *)*v4 + v27) = v20;
                    goto LABEL_56;
                  }
                  *unint64_t v20 = *v26;
                  *float v26 = **((void **)*v4 + v27);
                  **((void **)*v4 + v27) = v26;
                  float v26 = v20;
                }
                unint64_t v27 = v21;
LABEL_56:
                unint64_t v20 = v26;
                float v26 = (void *)*v26;
                unint64_t v21 = v27;
              }
              while (v26);
            }
          }
          unint64_t v6 = (unint64_t)prime;
          goto LABEL_60;
        }
        float v31 = *v4;
        *uint64_t v4 = 0;
        if (v31) {
          operator delete(v31);
        }
        unint64_t v6 = 0;
        *(void *)(v3 + 56) = 0;
      }
    }
LABEL_60:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v2) {
        unint64_t v1 = v2 % v6;
      }
      else {
        unint64_t v1 = v2;
      }
    }
    else
    {
      unint64_t v1 = (v6 - 1) & v2;
    }
  }
  float v28 = *v4;
  float v29 = (void *)*((void *)*v4 + v1);
  if (v29)
  {
    *(void *)long long v9 = *v29;
  }
  else
  {
    *(void *)long long v9 = *(void *)(v3 + 64);
    *(void *)(v3 + 64) = v9;
    v28[v1] = v3 + 64;
    if (!*(void *)v9) {
      goto LABEL_74;
    }
    unint64_t v30 = *(void *)(*(void *)v9 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v30 >= v6) {
        v30 %= v6;
      }
    }
    else
    {
      v30 &= v6 - 1;
    }
    float v29 = (char *)*v4 + 8 * v30;
  }
  *float v29 = v9;
LABEL_74:
  ++*(void *)(v3 + 72);
LABEL_75:
  *((void *)v9 + 3) = v2;
  double result = 0.0;
  *((_OWORD *)v9 + 2) = xmmword_2220A4E00;
  *((_OWORD *)v9 + 3) = xmmword_2220A4E00;
  v9[64] = 0;
  return result;
}

void sub_221FA3460(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void Phase::LambdaFunction<Phase::Controller::ListenerManager::RemoveListener(Phase::Handle64)::$_0,void>::~LambdaFunction()
{
}

void Phase::LambdaFunction<Phase::Controller::ListenerManager::RemoveListener(Phase::Handle64)::$_0,void>::operator()(uint64_t a1)
{
  unint64_t v1 = *(void **)(a1 + 8);
  unint64_t v2 = v1 + 6;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(v1 + 6, *(void *)(a1 + 16));
  if (!v3) {
    return;
  }
  int8x8_t v4 = (int8x8_t)v1[7];
  uint64_t v5 = *v3;
  unint64_t v6 = v3[1];
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v4);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    if (v6 >= *(void *)&v4) {
      v6 %= *(void *)&v4;
    }
  }
  else
  {
    v6 &= *(void *)&v4 - 1;
  }
  float v8 = *(uint64_t **)(*v2 + 8 * v6);
  do
  {
    long long v9 = v8;
    float v8 = (uint64_t *)*v8;
  }
  while (v8 != v3);
  if (v9 == v1 + 8) {
    goto LABEL_20;
  }
  unint64_t v10 = v9[1];
  if (v7.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v4) {
      v10 %= *(void *)&v4;
    }
  }
  else
  {
    v10 &= *(void *)&v4 - 1;
  }
  if (v10 != v6)
  {
LABEL_20:
    if (v5)
    {
      unint64_t v11 = *(void *)(v5 + 8);
      if (v7.u32[0] > 1uLL)
      {
        unint64_t v12 = *(void *)(v5 + 8);
        if (v11 >= *(void *)&v4) {
          unint64_t v12 = v11 % *(void *)&v4;
        }
      }
      else
      {
        unint64_t v12 = v11 & (*(void *)&v4 - 1);
      }
      if (v12 == v6) {
        goto LABEL_24;
      }
    }
    *(void *)(*v2 + 8 * v6) = 0;
    uint64_t v5 = *v3;
  }
  if (v5)
  {
    unint64_t v11 = *(void *)(v5 + 8);
LABEL_24:
    if (v7.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v4) {
        v11 %= *(void *)&v4;
      }
    }
    else
    {
      v11 &= *(void *)&v4 - 1;
    }
    if (v11 != v6)
    {
      *(void *)(*v2 + 8 * v11) = v9;
      uint64_t v5 = *v3;
    }
  }
  *long long v9 = v5;
  *uint64_t v3 = 0;
  --v1[9];

  operator delete(v3);
}

void Phase::LambdaFunction<Phase::Controller::ListenerManager::UpdateTransform(Phase::Handle64,Phase::Affine<float> const&)::$_0,void>::~LambdaFunction()
{
}

float Phase::LambdaFunction<Phase::Controller::ListenerManager::UpdateTransform(Phase::Handle64,Phase::Affine<float> const&)::$_0,void>::operator()(uint64_t a1)
{
  unint64_t v2 = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((void *)(*(void *)(a1 + 8) + 48), *(void *)(a1 + 16));
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 24);
  *((_DWORD *)v2 + 9) = *(_DWORD *)(a1 + 28);
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 32);
  *((_DWORD *)v2 + 11) = *(_DWORD *)(a1 + 36);
  *((_DWORD *)v2 + 12) = *(_DWORD *)(a1 + 40);
  *((_DWORD *)v2 + 13) = *(_DWORD *)(a1 + 44);
  *((_DWORD *)v2 + 14) = *(_DWORD *)(a1 + 48);
  float result = *(float *)(a1 + 52);
  *((float *)v2 + 15) = result;
  return result;
}

void Phase::LambdaFunction<Phase::Controller::ListenerManager::SetTracking(Phase::Handle64,BOOL)::$_0,void>::~LambdaFunction()
{
}

void *Phase::LambdaFunction<Phase::Controller::ListenerManager::SetTracking(Phase::Handle64,BOOL)::$_0,void>::operator()(uint64_t a1)
{
  float result = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>((void *)(*(void *)(a1 + 8) + 48), *(void *)(a1 + 16));
  if (!result) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  *((unsigned char *)result + 64) = *(unsigned char *)(a1 + 24);
  return result;
}

void Phase::Controller::LoadBalancer::LoadBalancer(Phase::Controller::LoadBalancer *this, const Phase::StringId *a2, Phase::Controller::VoiceManager *a3, Phase::Controller::ProfileRegistry *a4, Phase::Geometry::System *a5)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  Phase::Logger::GetInstance(this);
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::Commandable(this);
}

void sub_221FA3978(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  std::mutex::~mutex((std::mutex *)(v1 + 264));
  if (!*(unsigned char *)(v1 + 168)) {
    free(*(void **)(v1 + 160));
  }
  *(void *)(v1 + 152) = 0;
  *(void *)(v1 + 160) = v3;
  *(unsigned char *)(v1 + 168) = 1;
  if (!*(unsigned char *)(v1 + 56)) {
    free(*(void **)(v1 + 48));
  }
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = v3;
  *(unsigned char *)(v1 + 56) = 1;
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable((void *)v1);
  _Unwind_Resume(a1);
}

void Phase::Controller::LoadBalancer::SetProfile(const char **this, const Phase::StringId *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((!*(void *)a2 || *(void *)a2 == -1)
    && ((int8x8_t v4 = (unsigned char *)*((void *)a2 + 1), v4 == (unsigned char *)&str_33) || !*v4))
  {
    unint64_t v11 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 800);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315650;
      unint64_t v15 = "LoadBalancer.mm";
      __int16 v16 = 1024;
      int v17 = 177;
      __int16 v18 = 2048;
      uint64_t v19 = (Phase::Controller::LoadBalancer *)this;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d loadbalancer@%p: inProfile is invalid or empty. Not setting profile.", (uint8_t *)&v14, 0x1Cu);
    }
  }
  else
  {
    uint64_t v5 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(this[31], (unint64_t *)a2);
    if (v5)
    {
      if (*(const char **)a2 != this[5]
        || (uint64_t v6 = (const char *)*((void *)a2 + 1), v7 = this[6], v6 != v7)
        && (uint64_t v5 = (Phase::Logger *)strcmp(v6, v7), v5))
      {
        float v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v5)
                                                                                           + 800)));
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          long long v9 = this[6];
          uint64_t v10 = *((void *)a2 + 1);
          int v14 = 136316162;
          unint64_t v15 = "LoadBalancer.mm";
          __int16 v16 = 1024;
          int v17 = 192;
          __int16 v18 = 2048;
          uint64_t v19 = (Phase::Controller::LoadBalancer *)this;
          __int16 v20 = 2080;
          unint64_t v21 = v9;
          __int16 v22 = 2080;
          uint64_t v23 = v10;
          _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d loadbalancer@%p: Profile changed from '%s' to '%s'", (uint8_t *)&v14, 0x30u);
        }

        Phase::StringId::operator=((uint64_t)(this + 5), (uint64_t)a2);
        if (!*((unsigned char *)this + 216)) {
          this[29] = (const char *)((unint64_t)this[29] | 1);
        }
      }
    }
    else
    {
      unint64_t v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                          + 800)));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        BOOL v13 = (const char *)*((void *)a2 + 1);
        int v14 = 136315906;
        unint64_t v15 = "LoadBalancer.mm";
        __int16 v16 = 1024;
        int v17 = 185;
        __int16 v18 = 2048;
        uint64_t v19 = (Phase::Controller::LoadBalancer *)this;
        __int16 v20 = 2080;
        unint64_t v21 = v13;
        _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d loadbalancer@%p: Failed to find a profile with name '%s' in the profile registry. Not setting profile.", (uint8_t *)&v14, 0x26u);
      }
    }
  }
}

void Phase::Controller::LoadBalancer::Update(Phase::Controller::LoadBalancer *this)
{
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  Phase::Geometry::System::GetCurrentState(*((Phase::Geometry::System **)this + 32), &v40);
  if (v40)
  {
    uint64_t v2 = *(void *)(v40 + 936);
    uint64_t v3 = v2 & ~(v2 >> 63);
    if (v3 != *((void *)this + 8))
    {
      if (v2 <= 1) {
        uint64_t v2 = 1;
      }
      long double v4 = pow(1.0 - 1.0 / (double)v2, 10000.0);
      double v6 = Phase::Controller::sClamp<double>(v5, 1.0 - v4, *((double *)this + 9), *((double *)this + 10));
      if (v6 == *((double *)this + 12))
      {
        if (!*((unsigned char *)this + 104))
        {
LABEL_10:
          *((void *)this + 8) = v3;
          goto LABEL_11;
        }
      }
      else
      {
        *((double *)this + 12) = v6;
      }
      *((unsigned char *)this + 104) = 0;
      if (!*((unsigned char *)this + 216)) {
        *((void *)this + 29) |= 2uLL;
      }
      goto LABEL_10;
    }
  }
LABEL_11:
  uint64_t v7 = *((void *)this + 29);
  if (v7)
  {
    if (*((unsigned char *)this + 216)) {
      float v8 = (char *)this + 152;
    }
    else {
      float v8 = (char *)this + 40;
    }
    Phase::StringId::StringId((uint64_t)v37, (uint64_t)v8);
    if (*((unsigned char *)this + 216)) {
      double v9 = *((double *)this + 25);
    }
    else {
      double v9 = fmin(fmax(*((double *)this + 12) * *((double *)this + 17), 0.0), 1.0);
    }
    Phase::Controller::ProfileRegistry::GetModelers(*((Phase::Controller::ProfileRegistry **)this + 31), (const Phase::StringId *)v37, v34);
    if (*(unsigned char *)(*(void *)(Phase::Logger::GetInstance(v10) + 800) + 8))
    {
      if (v36)
      {
        for (uint64_t i = v35; i; uint64_t i = (void *)*i)
          ;
      }
    }
    Phase::Controller::ProfileRegistry::GetParameters(*((Phase::Controller::ProfileRegistry **)this + 31), (const Phase::StringId *)v37, v9, __p);
    Phase::Logger::GetInstance(v12);
    Phase::Controller::SpatialModelerSystem::SetModelers((Phase::Logger *)(**((void **)this + 30) + 560), (uint64_t)v34, (uint64_t *)__p);
    Phase::Controller::ProfileRegistry::GetComputeWeights(*((Phase::Controller::ProfileRegistry **)this + 31), (const Phase::StringId *)v37, (uint64_t)v30);
    if (*(unsigned char *)(*(void *)(Phase::Logger::GetInstance(v13) + 800) + 8))
    {
      if (v32)
      {
        for (uint64_t j = v31; j; uint64_t j = (void *)*j)
          ;
      }
    }
    uint64_t ComputeTime = Phase::Controller::ProfileRegistry::GetComputeTime(*((Phase::Controller::ProfileRegistry **)this + 31), (const Phase::StringId *)v37);
    int v17 = (double *)v31;
    if (v31)
    {
      double v18 = *(double *)&ComputeTime;
      double v19 = 0.0;
      __int16 v20 = (double *)v31;
      do
      {
        double v19 = v19 + v20[3];
        __int16 v20 = *(double **)v20;
      }
      while (v20);
      if (!v16) {
        double v18 = 1.79769313e308;
      }
      double v21 = v18 / v19;
      do
      {
        v17[3] = v21 * v17[3];
        int v17 = *(double **)v17;
      }
      while (v17);
    }
    Phase::Controller::SpatialModelerSystem::SetComputeTimes((Phase::Logger *)(**((void **)this + 30) + 560), (uint64_t)v30);
    Phase::Controller::ProfileRegistry::GetOverflowParameters(*((Phase::Controller::ProfileRegistry **)this + 31), (const Phase::StringId *)v37, (uint64_t)&v28);
    if (v29)
    {
      for (uint64_t k = *(void **)(**((void **)this + 30) + 576); k; uint64_t k = (void *)*k)
      {
        uint64_t v23 = k[3];
        long long v24 = v28;
        *(_OWORD *)(v23 + 136) = v28;
        *(_OWORD *)(*(void *)(v23 + 80) + 320) = v24;
      }
    }
    *((void *)this + 29) &= 0xFFFFFFFFFFFFFFFCLL;
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v30);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)v34);
    if (!v39) {
      free(v38);
    }
    uint64_t v7 = *((void *)this + 29);
  }
  if ((v7 & 2) != 0)
  {
    if (*((unsigned char *)this + 216)) {
      uint64_t v25 = (char *)this + 152;
    }
    else {
      uint64_t v25 = (char *)this + 40;
    }
    Phase::StringId::StringId((uint64_t)v34, (uint64_t)v25);
    if (*((unsigned char *)this + 216)) {
      double v26 = *((double *)this + 25);
    }
    else {
      double v26 = fmin(fmax(*((double *)this + 12) * *((double *)this + 17), 0.0), 1.0);
    }
    Phase::Controller::ProfileRegistry::GetParameters(*((Phase::Controller::ProfileRegistry **)this + 31), (const Phase::StringId *)v34, v26, v30);
    Phase::Logger::GetInstance(v27);
    Phase::Controller::SpatialModelerSystem::SetParameters((unsigned __int8 *)(**((void **)this + 30) + 560), (uint64_t *)v30);
    *((void *)this + 29) &= ~2uLL;
    if (v30[0])
    {
      v30[1] = v30[0];
      operator delete(v30[0]);
    }
    if (!(_BYTE)v35) {
      free((void *)v34[1]);
    }
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
}

void sub_221FA3FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,void *a22,char a23)
{
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 40);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::LoadBalancer::~LoadBalancer(Phase::Controller::LoadBalancer *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 264));
  if (!*((unsigned char *)this + 168)) {
    free(*((void **)this + 20));
  }
  *((void *)this + 19) = 0;
  *((void *)this + 20) = &str_33;
  *((unsigned char *)this + 168) = 1;
  if (!*((unsigned char *)this + 56)) {
    free(*((void **)this + 6));
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = &str_33;
  *((unsigned char *)this + 56) = 1;

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  uint64_t vars8;

  Phase::Controller::LoadBalancer::~LoadBalancer(this);

  JUMPOUT(0x223C938A0);
}

void Phase::Controller::LoadBalancer::SetProfileOverride(Phase::Controller::LoadBalancer *this, uint64_t a2, double a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  ProfileId = (Phase::Logger *)Phase::Controller::ProfileRegistry::FindProfileId(*((void *)this + 31), a2, (uint64_t)&v17);
  if (v17 && v17 != -1 || __s1 != (char *)&str_33 && *__s1)
  {
    uint64_t v7 = (uint64_t)std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::find<Phase::StringId>(*((void **)this + 31), &v17);
    if (!v7)
    {
      int v14 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(0)
                                                                                          + 800)));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        double v21 = "LoadBalancer.mm";
        __int16 v22 = 1024;
        int v23 = 274;
        __int16 v24 = 2048;
        uint64_t v25 = this;
        __int16 v26 = 2080;
        unint64_t v27 = __s1;
        _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d loadbalancer@%p: Failed to find a profile with name '%s' in the profile registry. Not overriding profile.", buf, 0x26u);
      }
      goto LABEL_23;
    }
    if (v17 != *((void *)this + 19)
      || (uint64_t v7 = (uint64_t)__s1, v8 = (char *)*((void *)this + 20), __s1 != v8) && (uint64_t v7 = strcmp(__s1, v8), v7))
    {
      double v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)v7)
                                                                                         + 800)));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = (char *)*((void *)this + 20);
        *(_DWORD *)buf = 136316162;
        double v21 = "LoadBalancer.mm";
        __int16 v22 = 1024;
        int v23 = 281;
        __int16 v24 = 2048;
        uint64_t v25 = this;
        __int16 v26 = 2080;
        unint64_t v27 = v10;
        __int16 v28 = 2080;
        char v29 = __s1;
        _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d loadbalancer@%p: Overridden Profile changed from '%s' to '%s'", buf, 0x30u);
      }

      uint64_t v7 = Phase::StringId::operator=((uint64_t)this + 152, (uint64_t)&v17);
      *((void *)this + 29) |= 1uLL;
    }
    double v12 = Phase::Controller::sClamp<double>((Phase::Logger *)v7, a3, *((double *)this + 22), *((double *)this + 23));
    if (v12 == *((double *)this + 25))
    {
      if (!*((unsigned char *)this + 208)) {
        goto LABEL_21;
      }
    }
    else
    {
      *((double *)this + 25) = v12;
      *((unsigned char *)this + 208) = 1;
    }
    *((unsigned char *)this + 208) = 0;
    *((void *)this + 29) |= 2uLL;
LABEL_21:
    *((unsigned char *)this + 216) = 1;
    int v14 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v11)
                                                                                        + 800)));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v15 = (char *)*((void *)this + 20);
      char v16 = (char *)*((void *)this + 25);
      *(_DWORD *)buf = 136316162;
      double v21 = "LoadBalancer.mm";
      __int16 v22 = 1024;
      int v23 = 301;
      __int16 v24 = 2048;
      uint64_t v25 = this;
      __int16 v26 = 2080;
      unint64_t v27 = v15;
      __int16 v28 = 2048;
      char v29 = v16;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d loadbalancer@%p: Overriding the Load Balancer with profile name: %s, balance: %f", buf, 0x30u);
    }
LABEL_23:

    goto LABEL_24;
  }
  BOOL v13 = **(id **)(Phase::Logger::GetInstance(ProfileId) + 800);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    double v21 = "LoadBalancer.mm";
    __int16 v22 = 1024;
    int v23 = 266;
    __int16 v24 = 2048;
    uint64_t v25 = this;
    __int16 v26 = 2048;
    unint64_t v27 = (char *)a2;
    _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d loadbalancer@%p: Profile name hash 0x%llx not found. Not overriding profile.", buf, 0x26u);
  }
LABEL_24:
  if (!v19) {
    free(__s1);
  }
}

void sub_221FA44DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, char a12)
{
  if (!a12) {
    free(a11);
  }
  _Unwind_Resume(exception_object);
}

void Phase::Controller::LoadBalancer::ClearProfileOverride(Phase::Controller::LoadBalancer *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 216))
  {
    *((unsigned char *)this + 216) = 0;
    *((void *)this + 29) |= 1uLL;
    uint64_t v2 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(this)
                                                                                       + 800)));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v3 = *((void *)this + 6);
      uint64_t v4 = *((void *)this + 12);
      int v5 = 136316162;
      double v6 = "LoadBalancer.mm";
      __int16 v7 = 1024;
      int v8 = 315;
      __int16 v9 = 2048;
      uint64_t v10 = this;
      __int16 v11 = 2080;
      uint64_t v12 = v3;
      __int16 v13 = 2048;
      uint64_t v14 = v4;
      _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d loadbalancer@%p: Clearing the profile override in the Load Balancer. Going back to profile with name: %s, balance: %f", (uint8_t *)&v5, 0x30u);
    }
  }
}

uint64_t Phase::LockFreeQueueMPSC::GetWriteBuffer(atomic_uchar *this, uint64_t a2, unint64_t *a3, BOOL *a4)
{
  int v8 = (unsigned __int8 *)(this + 40);
  Phase::SpinLock::Lock(this + 40);
  uint64_t result = (uint64_t)Phase::LockFreeQueueSPSC::GetWriteBuffer(this, a2, a3);
  if (result)
  {
    *a4 = 0;
    return result;
  }
  if (!*a4)
  {
    uint64_t result = 0;
    goto LABEL_10;
  }
  uint64_t v10 = *(int *)this;
  if (a2 + 32 <= (unint64_t)(2 * v10)) {
    size_t v11 = 2 * v10;
  }
  else {
    size_t v11 = a2 + 32;
  }
  uint64_t result = Phase::LockFreeQueueSPSC::GrowBuffer(this, v11, a3);
  if (!result)
  {
    *a4 = 0;
LABEL_10:
    atomic_store(0, v8);
  }
  return result;
}

void Phase::LockFreeQueueSPSC::~LockFreeQueueSPSC(void **this)
{
  free(this[2]);
  uint64_t v2 = this[3];
  if (v2 != this[2]) {
    free(v2);
  }
}

_DWORD *Phase::LockFreeQueueSPSC::GetWriteBuffer(atomic_uchar *this, int a2, unint64_t *a3)
{
  unsigned __int8 explicit = atomic_load_explicit(this + 32, memory_order_acquire);
  uint64_t v4 = *((int *)this + 3);
  if (explicit)
  {
    int v5 = *((_DWORD *)this + 2);
  }
  else
  {
    int v5 = *((_DWORD *)this + 1);
    if ((int)v4 > v5)
    {
      int v6 = *((_DWORD *)this + 2) - v4 - 32;
      if (v6 < a2)
      {
        int v7 = v5 - 32;
        if (v5 - 32 >= a2) {
          goto LABEL_17;
        }
        goto LABEL_8;
      }
      unint64_t v8 = v6;
LABEL_19:
      *a3 = v8;
      return (_DWORD *)(*((void *)this + 3) + v4 + 16);
    }
    if ((int)v4 >= v5)
    {
      int v10 = *((_DWORD *)this + 2) - 32;
      if (v10 - (int)v4 >= a2)
      {
        unint64_t v8 = v10 - (int)v4;
        goto LABEL_19;
      }
      int v7 = v5 - 32;
      if (v5 - 32 >= a2)
      {
LABEL_17:
        uint64_t v12 = (_DWORD *)*((void *)this + 3);
        *uint64_t v12 = 0;
        __dmb(0xBu);
        *(_DWORD *)((char *)v12 + *((int *)this + 3)) = -1;
        *((_DWORD *)this + 3) = 0;
        *a3 = v7;
        return v12 + 4;
      }
      if (v10 >= a2)
      {
        uint64_t v9 = 0;
        size_t v11 = (_DWORD *)*((void *)this + 3);
        *size_t v11 = 0;
        __dmb(0xBu);
        *(_DWORD *)((char *)v11 + *((int *)this + 3)) = -1;
        *((_DWORD *)this + 3) = 0;
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  LODWORD(v8) = v5 - v4 - 32;
  if ((int)v8 >= a2)
  {
    unint64_t v8 = (int)v8;
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v9 = 0;
LABEL_9:
  *a3 = 0;
  return (_DWORD *)v9;
}

uint64_t Phase::LockFreeQueueSPSC::GrowBuffer(atomic_uchar *this, size_t size, unint64_t *a3)
{
  if (atomic_load_explicit(this + 32, memory_order_acquire)) {
    return 0;
  }
  int v3 = size;
  if (*(int *)this >= size) {
    return 0;
  }
  int v6 = malloc_type_malloc(size, 0xECB05BC0uLL);
  *((_DWORD *)this + 2) = v3;
  *((_DWORD *)this + 3) = 0;
  *a3 = v3 - 32;
  *((void *)this + 3) = v6;
  *int v6 = 0;
  __dmb(0xBu);
  atomic_store(1u, (unsigned __int8 *)this + 32);
  return (uint64_t)v6 + *((int *)this + 3) + 16;
}

uint64_t Phase::LockFreeQueueSPSC::CommitBytes(atomic_uchar *this, int a2)
{
  unsigned __int8 explicit = atomic_load_explicit(this + 32, memory_order_acquire);
  uint64_t v3 = *((int *)this + 3);
  if ((explicit & 1) != 0 || (int v4 = *((_DWORD *)this + 1), (int)v3 >= v4)) {
    int v4 = *((_DWORD *)this + 2);
  }
  if (v4 - (int)v3 - 32 < a2) {
    return 0;
  }
  int v6 = ((a2 + 15) & 0xFFFFFFF0) + v3 + 16;
  *((_DWORD *)this + 3) = v6;
  uint64_t v7 = *((void *)this + 3);
  *(_DWORD *)(v7 + v6) = 0;
  __dmb(0xBu);
  *(_DWORD *)(v7 + v3) = a2;
  return 1;
}

BOOL Phase::LockFreeQueueSPSC::HasData(Phase::LockFreeQueueSPSC *this)
{
  int v2 = *(_DWORD *)(*((void *)this + 2) + *((int *)this + 1));
  __dmb(9u);
  if (v2 == -1)
  {
    *((_DWORD *)this + 1) = 0;
    int v2 = **((_DWORD **)this + 2);
  }
  if (v2 > 0) {
    return 1;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)this + 32, memory_order_acquire) & 1) == 0) {
    return 0;
  }
  free(*((void **)this + 2));
  int v4 = (_DWORD *)*((void *)this + 3);
  *((void *)this + 2) = v4;
  *(void *)this = *((unsigned int *)this + 2);
  LODWORD(v4) = *v4;
  __dmb(0xBu);
  atomic_store(0, (unsigned __int8 *)this + 32);
  return (int)v4 > 0;
}

uint64_t Phase::Logger::GetInstance(Phase::Logger *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267F77B58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267F77B58))
  {
    operator new();
  }
  return qword_267F77B50;
}

void sub_221FA4A0C(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F0C405043A5F8);
  __cxa_guard_abort(&qword_267F77B58);
  _Unwind_Resume(a1);
}

void Phase::Logger::Logger(Phase::Logger *this)
{
}

void sub_221FA6CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void **a15)
{
  char v19 = *v17;
  if (*v17)
  {
    v15[182] = v19;
    operator delete(v19);
  }
  __int16 v20 = *a14;
  if (*a14)
  {
    v15[164] = v20;
    operator delete(v20);
  }
  double v21 = *a15;
  if (*a15)
  {
    v15[161] = v21;
    operator delete(v21);
  }
  __int16 v22 = *v16;
  if (*v16)
  {
    v15[158] = v22;
    operator delete(v22);
  }
  int v23 = (std::__shared_weak_count *)v15[147];
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void Phase::sReadDefaultsValue<float>(void *a1, uint64_t a2, _DWORD *a3)
{
  int v4 = [a1 objectForKey:a2];
  if (v4)
  {
    id v6 = v4;
    [v4 floatValue];
    *a3 = v5;
    int v4 = v6;
  }
}

void sub_221FA6DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Phase::sReadDefaultsValue<int>(void *a1, uint64_t a2, _DWORD *a3)
{
  int v4 = [a1 objectForKey:a2];
  if (v4)
  {
    id v5 = v4;
    *a3 = [v4 intValue];
    int v4 = v5;
  }
}

void sub_221FA6E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Phase::sReadDefaultsValue<std::vector<float>>(void *a1, void *a2, char **a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v28 = a1;
  id v29 = a2;
  id v5 = [v28 objectForKey:v29];
  if (v5)
  {
    a3[1] = *a3;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    __int16 v24 = [MEMORY[0x263F08708] characterSetWithCharactersInString:@",.0123456789"];
    uint64_t v25 = [v24 invertedSet];
    __int16 v26 = [v5 componentsSeparatedByCharactersInSet:v25];
    unint64_t v27 = [v26 componentsJoinedByString:&stru_26D47BF58];
    id v6 = [v27 componentsSeparatedByString:@","];
    uint64_t v7 = [v6 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v31;
      do
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v31 != v8) {
            objc_enumerationMutation(v6);
          }
          id v10 = *(id *)(*((void *)&v30 + 1) + 8 * i);
          [v10 floatValue];
          int v12 = v11;
          uint64_t v14 = a3[1];
          unint64_t v13 = (unint64_t)a3[2];
          if ((unint64_t)v14 >= v13)
          {
            char v16 = *a3;
            uint64_t v17 = (v14 - *a3) >> 2;
            unint64_t v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v19 = v13 - (void)v16;
            if (v19 >> 1 > v18) {
              unint64_t v18 = v19 >> 1;
            }
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v18;
            }
            if (v20)
            {
              double v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a3 + 2), v20);
              char v16 = *a3;
              uint64_t v14 = a3[1];
            }
            else
            {
              double v21 = 0;
            }
            __int16 v22 = &v21[4 * v17];
            *(_DWORD *)__int16 v22 = v12;
            uint64_t v15 = v22 + 4;
            while (v14 != v16)
            {
              int v23 = *((_DWORD *)v14 - 1);
              v14 -= 4;
              *((_DWORD *)v22 - 1) = v23;
              v22 -= 4;
            }
            *a3 = v22;
            a3[1] = v15;
            a3[2] = &v21[4 * v20];
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v14 = v11;
            uint64_t v15 = v14 + 4;
          }
          a3[1] = v15;
        }
        uint64_t v7 = [v6 countByEnumeratingWithState:&v30 objects:v34 count:16];
      }
      while (v7);
    }
  }
}

void sub_221FA7110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void Phase::sReadDefaultsValue<BOOL>(void *a1, uint64_t a2, unsigned char *a3)
{
  int v4 = [a1 objectForKey:a2];
  if (v4)
  {
    id v5 = v4;
    *a3 = [v4 BOOLValue];
    int v4 = v5;
  }
}

void sub_221FA7200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Phase::sReadDefaultsValue<char const*>(void *a1, uint64_t a2, void *a3)
{
  int v4 = [a1 objectForKey:a2];
  if (v4)
  {
    id v5 = v4;
    *a3 = [v4 UTF8String];
    int v4 = v5;
  }
}

void sub_221FA7274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Logger::CreateAudioCapturer@<X0>(Phase::Logger *this@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  if (qword_267F77B70 != -1) {
    dispatch_once(&qword_267F77B70, &__block_literal_global_499);
  }
  if (off_267F77B68) {
    uint64_t result = off_267F77B68(4386, "AudioCapture/PHASE", this, 1667327590, 0, a2);
  }
  else {
    uint64_t result = 0;
  }
  *a3 = result;
  return result;
}

void ___ZN5Phase6Logger25CheckTailspinWithThrottleEv_block_invoke()
{
  v0 = (const void *)MGCopyAnswer();
  if (v0) {
    BOOL v1 = v0 == (const void *)*MEMORY[0x263EFFB40];
  }
  else {
    BOOL v1 = 0;
  }
  char v2 = v1;
  _MergedGlobals_18 = v2;
  if (v0)
  {
    CFRelease(v0);
  }
}

void Phase::Logger::DumpTailspinWithThrottleAsync(Phase::Logger *this, const char *a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (qword_267F77B60 != -1) {
    dispatch_once(&qword_267F77B60, &__block_literal_global_2);
  }
  if (_MergedGlobals_18)
  {
    mach_absolute_time();
    unint64_t v4 = __udivti3();
    unint64_t v5 = atomic_load((unint64_t *)this + 197);
    if (!v5) {
      goto LABEL_6;
    }
LABEL_5:
    unint64_t v6 = atomic_load((unint64_t *)this + 198);
    if (v4 - v5 >= v6)
    {
LABEL_6:
      while (1)
      {
        unint64_t v7 = v5;
        atomic_compare_exchange_strong((atomic_ullong *volatile)this + 197, &v7, v4);
        if (v7 == v5) {
          break;
        }
        unint64_t v5 = v7;
        if (v7) {
          goto LABEL_5;
        }
      }
      uint64_t v8 = objc_msgSend(NSString, "stringWithFormat:", @"%s", a2);
      uint64_t v9 = dispatch_get_global_queue(25, 0);
      block[0] = MEMORY[0x263EF8330];
      block[1] = 3221225472;
      block[2] = ___ZN5Phase6Logger29DumpTailspinWithThrottleAsyncEPKc_block_invoke;
      block[3] = &unk_2645F7688;
      id v13 = v8;
      id v10 = v8;
      dispatch_async(v9, block);
    }
  }
  else
  {
    int v11 = **(id **)(Phase::Logger::GetInstance(this) + 1088);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v15 = "Log.mm";
      __int16 v16 = 1024;
      int v17 = 479;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_INFO, "%25s:%-5d skipping tailspin diagnostic on unsupported build", buf, 0x12u);
    }
  }
}

void ___ZN5Phase6Logger29DumpTailspinWithThrottleAsyncEPKc_block_invoke(uint64_t a1)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  BOOL v1 = (Phase::Logger *)*(id *)(a1 + 32);
  char v2 = **(id **)(Phase::Logger::GetInstance(v1) + 1088);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v40 = "Log.mm";
    __int16 v41 = 1024;
    v42[0] = 449;
    _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d firing tailspin request through audio analytics", buf, 0x12u);
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)buf, "issue_type");
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)((char *)&v40 + 4), "phase");
  uint64_t v3 = v1;
  unint64_t v4 = (char *)[(Phase::Logger *)v3 UTF8String];
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)((char *)v42 + 2), "context");
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v43, v4);
  keys = 0;
  double v37 = 0;
  double v38 = 0;
  std::vector<std::pair<int,float>>::reserve((void **)&keys, 2uLL);
  values = 0;
  float v34 = 0;
  uint64_t v35 = 0;
  std::vector<std::pair<int,float>>::reserve((void **)&values, 2uLL);
  for (uint64_t i = 0; i != 2; ++i)
  {
    unint64_t v6 = *(void **)&buf[16 * i];
    unint64_t v7 = v37;
    if (v37 >= v38)
    {
      uint64_t v9 = v37 - keys;
      if ((unint64_t)(v9 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = ((char *)v38 - (char *)keys) >> 2;
      if (v10 <= v9 + 1) {
        unint64_t v10 = v9 + 1;
      }
      if ((unint64_t)((char *)v38 - (char *)keys) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11) {
        int v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v38, v11);
      }
      else {
        int v12 = 0;
      }
      id v13 = (void **)&v12[8 * v9];
      *id v13 = v6;
      uint64_t v8 = v13 + 1;
      uint64_t v15 = keys;
      uint64_t v14 = v37;
      if (v37 != keys)
      {
        do
        {
          __int16 v16 = *--v14;
          *--id v13 = v16;
        }
        while (v14 != v15);
        uint64_t v14 = keys;
      }
      keys = v13;
      double v37 = v8;
      double v38 = (void **)&v12[8 * v11];
      if (v14) {
        operator delete(v14);
      }
    }
    else
    {
      *double v37 = v6;
      uint64_t v8 = v7 + 1;
    }
    double v37 = v8;
    int v17 = *(void **)((char *)&v40 + 16 * i + 4);
    uint64_t v18 = v34;
    if (v34 >= v35)
    {
      uint64_t v20 = v34 - values;
      if ((unint64_t)(v20 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v21 = ((char *)v35 - (char *)values) >> 2;
      if (v21 <= v20 + 1) {
        unint64_t v21 = v20 + 1;
      }
      if ((unint64_t)((char *)v35 - (char *)values) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22) {
        int v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v35, v22);
      }
      else {
        int v23 = 0;
      }
      __int16 v24 = (void **)&v23[8 * v20];
      *__int16 v24 = v17;
      uint64_t v19 = v24 + 1;
      __int16 v26 = values;
      uint64_t v25 = v34;
      if (v34 != values)
      {
        do
        {
          unint64_t v27 = *--v25;
          *--__int16 v24 = v27;
        }
        while (v25 != v26);
        uint64_t v25 = values;
      }
      values = v24;
      float v34 = v19;
      uint64_t v35 = (void **)&v23[8 * v22];
      if (v25) {
        operator delete(v25);
      }
    }
    else
    {
      void *v34 = v17;
      uint64_t v19 = v18 + 1;
    }
    float v34 = v19;
  }
  CFDictionaryRef v28 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (!v28)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if (values)
  {
    float v34 = values;
    operator delete(values);
  }
  if (keys)
  {
    double v37 = keys;
    operator delete(keys);
  }
  for (uint64_t j = 0; j != -8; j -= 4)
  {
    long long v30 = *(const void **)&v43[j * 4];
    if (v30) {
      CFRelease(v30);
    }
    long long v31 = *(const void **)((char *)&v42[j] + 2);
    if (v31) {
      CFRelease(v31);
    }
  }
  CAReportingClientSendSingleMessage();
  CFRelease(v28);
}

void sub_221FA7954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, CFTypeRef a15, CFTypeRef a16, CFTypeRef cf, uint64_t a18)
{
  __cxa_free_exception(v19);
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  uint64_t v21 = 0;
  while (1)
  {
    unint64_t v22 = *(const void **)((char *)&a18 + v21);
    if (v22) {
      CFRelease(v22);
    }
    int v23 = *(CFTypeRef *)((char *)&cf + v21);
    if (v23) {
      CFRelease(v23);
    }
    v21 -= 16;
    if (v21 == -32)
    {

      _Unwind_Resume(a1);
    }
  }
}

void *___Z16NewAudioCapturer20AudioCapturerOptionsPKcS1_jPK27AudioStreamBasicDescriptionRS3__block_invoke()
{
  uint64_t result = dlopen("/usr/local/lib/libAudioDiagnostics.dylib", 5);
  if (result)
  {
    uint64_t result = dlsym(result, "NewAudioCapturerImpl");
    if (result) {
      off_267F77B68 = (uint64_t (*)(void, void, void, void, void, void))result;
    }
  }
  return result;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRef::TypeRef(applesauce::CF::TypeRef *this, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    CFIndex v4 = v9;
  }
  else {
    CFIndex v4 = (CFIndex)__p[1];
  }
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(void *)this = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
  }
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_221FA7B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*v15) {
    CFRelease(*v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::LookupInterpolator::Initialize(Phase::LookupInterpolator *this, float a2, int a3, unsigned int a4, float *a5)
{
  *((float *)this + 2) = a2;
  *(_DWORD *)this = a3;
  *((_DWORD *)this + 1) = a4;
  std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)this + 16, (char *)a5, (uint64_t)&a5[a4], a4);
  *((void *)this + 8) = *((void *)this + 7);
  Phase::LookupInterpolator::EvaluateMeanRange((uint64_t)this);
  Phase::LookupInterpolator::EvaluateInterpolationRanges(this, *((_DWORD *)this + 11) - 1);

  Phase::LookupInterpolator::EvaluateFractionsFromInterpolationRanges(this);
}

uint64_t Phase::LookupInterpolator::EvaluateMeanRange(uint64_t this)
{
  uint64_t v1 = this;
  unsigned int v2 = (float)(**(float **)(this + 16) / (float)(*(float *)(this + 8) / (float)*(unsigned int *)this));
  if (v2)
  {
    int v3 = v2 + 1;
    int v4 = 1;
  }
  else
  {
    this = Phase::LookupInterpolator::GetSubbandCountBelowFirstFFTBin((Phase::LookupInterpolator *)this);
    if (vabds_f32(*(float *)(v1 + 8) / (float)*(unsigned int *)v1, *(float *)(*(void *)(v1 + 16) + 4 * this)) >= (float)((float)(*(float *)(*(void *)(v1 + 16) + 4 * (this + 1))- *(float *)(*(void *)(v1 + 16) + 4 * this))* 0.5))int v4 = this; {
    else
    }
      int v4 = this + 1;
    int v3 = 2;
  }
  *(_DWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 44) = v4;
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 52) = v3;
  return this;
}

void Phase::LookupInterpolator::EvaluateInterpolationRanges(Phase::LookupInterpolator *this, unsigned int a2)
{
  unsigned int v2 = (char *)*((void *)this + 7);
  *((void *)this + 8) = v2;
  int v3 = *((_DWORD *)this + 1);
  if (v3 - 1 > a2)
  {
    uint64_t v5 = a2;
    do
    {
      uint64_t v6 = *((void *)this + 2);
      float v7 = *((float *)this + 2) / (float)*(unsigned int *)this;
      unsigned int v8 = (float)(*(float *)(v6 + 4 * v5) / v7);
      unint64_t v9 = v5 + 1;
      float v10 = *(float *)(v6 + 4 * (v5 + 1)) / v7;
      unsigned int v11 = v10 - v8;
      if (v10 != v8)
      {
        unsigned int v12 = v8 + 1;
        unint64_t v13 = *((void *)this + 9);
        if ((unint64_t)v2 >= v13)
        {
          uint64_t v15 = (char *)*((void *)this + 7);
          uint64_t v16 = (v2 - v15) >> 4;
          unint64_t v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = v13 - (void)v15;
          if (v18 >> 3 > v17) {
            unint64_t v17 = v18 >> 3;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v17;
          }
          if (v19)
          {
            if (v19 >> 60) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v20 = (char *)operator new(16 * v19);
          }
          else
          {
            uint64_t v20 = 0;
          }
          uint64_t v21 = &v20[16 * v16];
          *(_DWORD *)uint64_t v21 = v5;
          *((_DWORD *)v21 + 1) = 1;
          *((_DWORD *)v21 + 2) = v12;
          *((_DWORD *)v21 + 3) = v11;
          unint64_t v22 = v21;
          if (v2 != v15)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *((_OWORD *)v2 - 1);
              v22 -= 16;
              v2 -= 16;
            }
            while (v2 != v15);
            unsigned int v2 = (char *)*((void *)this + 7);
          }
          uint64_t v14 = v21 + 16;
          *((void *)this + 7) = v22;
          *((void *)this + 8) = v21 + 16;
          *((void *)this + 9) = &v20[16 * v19];
          if (v2) {
            operator delete(v2);
          }
        }
        else
        {
          *(_DWORD *)unsigned int v2 = v5;
          *((_DWORD *)v2 + 1) = 1;
          uint64_t v14 = v2 + 16;
          *((_DWORD *)v2 + 2) = v12;
          *((_DWORD *)v2 + 3) = v11;
        }
        *((void *)this + 8) = v14;
        int v3 = *((_DWORD *)this + 1);
        unsigned int v2 = v14;
      }
      ++v5;
    }
    while (v9 < (v3 - 1));
  }
}

void Phase::LookupInterpolator::EvaluateFractionsFromInterpolationRanges(Phase::LookupInterpolator *this)
{
  unsigned int v2 = (uint64_t *)((char *)this + 104);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 13);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 10);
  uint64_t v3 = *((void *)this + 7);
  if (*((void *)this + 8) != v3)
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    do
    {
      uint64_t v6 = (unsigned int *)(v3 + 16 * v4);
      uint64_t v7 = *v6;
      unsigned int v8 = v6[1];
      unsigned int v10 = v6[2];
      unint64_t v9 = v6[3];
      uint64_t v11 = *((void *)this + 2);
      float v12 = *(float *)(v11 + 4 * v7);
      float v13 = *(float *)(v11 + 4 * (v8 + v7));
      std::vector<float>::vector(v28, v9);
      std::vector<float>::vector(__p, v9);
      if (v9)
      {
        float v14 = (float)*(unsigned int *)this;
        float v15 = v13 - v12;
        uint64_t v16 = (float *)v28[0];
        unint64_t v17 = (float *)v28[0];
        unint64_t v18 = v9;
        do
        {
          float v19 = (float)((float)((float)((float)(*((float *)this + 2) / v14) * (float)v10) - v12) / v15) * 3.14159265;
          float v20 = cosf(v19);
          *v17++ = (float)(1.0 - (float)((float)(1.0 - v20) * 0.5)) + (float)((float)((float)(1.0 - v20) * 0.5) * 0.0);
          ++v10;
          --v18;
        }
        while (v18);
        uint64_t v21 = (float *)__p[0];
        do
        {
          float v22 = *v16++;
          *v21++ = 1.0 - v22;
          --v9;
        }
        while (v9);
      }
      unint64_t v23 = *((void *)this + 11);
      if (v23 >= *((void *)this + 12))
      {
        uint64_t v24 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)this + 10, (uint64_t)v28);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)this + 80, (uint64_t)v28);
        uint64_t v24 = v23 + 24;
      }
      *((void *)this + 11) = v24;
      unint64_t v25 = *((void *)this + 14);
      if (v25 >= *((void *)this + 15))
      {
        uint64_t v26 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v2, (uint64_t)__p);
      }
      else
      {
        std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v2, (uint64_t)__p);
        uint64_t v26 = v25 + 24;
      }
      *((void *)this + 14) = v26;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v28[0])
      {
        v28[1] = v28[0];
        operator delete(v28[0]);
      }
      uint64_t v3 = *((void *)this + 7);
      uint64_t v4 = ++v5;
    }
    while (v5 < (unint64_t)((*((void *)this + 8) - v3) >> 4));
  }
}

void sub_221FA804C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::LookupInterpolator::GetSubbandCountBelowFirstFFTBin(Phase::LookupInterpolator *this)
{
  uint64_t v1 = *((unsigned int *)this + 1);
  if (!v1) {
    return (v1 - 1);
  }
  uint64_t result = 0;
  while (!(float)(*(float *)(*((void *)this + 2) + 4 * result)
                               / (float)(*((float *)this + 2) / (float)*(unsigned int *)this)))
  {
    if (v1 == ++result) {
      return (v1 - 1);
    }
  }
  return result;
}

void Phase::LookupInterpolator::InterpolateWithFractions(Phase::LookupInterpolator *this, float *a2, float *a3)
{
  float __C = 0.0;
  vDSP_meanv(&a2[*((unsigned int *)this + 10)], 1, &__C, *((unsigned int *)this + 11));
  vDSP_vfill(&__C, &a3[*((unsigned int *)this + 12)], 1, *((unsigned int *)this + 13));
  uint64_t v6 = *((void *)this + 7);
  uint64_t v7 = *((void *)this + 8);
  if (v7 != v6)
  {
    unint64_t v8 = 0;
    unsigned int v9 = 1;
    do
    {
      unsigned int v10 = (unsigned int *)(v6 + 16 * v8);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[2];
      vDSP_Length v13 = v10[3];
      float v14 = a2[v11];
      float v20 = a2[v10[1] + v11];
      float __B = v14;
      uint64_t v15 = 3 * v8;
      uint64_t v16 = *(const float **)(*((void *)this + 13) + 8 * v15);
      unint64_t v17 = &a3[v12];
      vDSP_vsma(*(const float **)(*((void *)this + 10) + 8 * v15), 1, &__B, v17, 1, v17, 1, v13);
      vDSP_vsma(v16, 1, &v20, v17, 1, v17, 1, v13);
      unint64_t v8 = v9;
      uint64_t v6 = *((void *)this + 7);
      uint64_t v7 = *((void *)this + 8);
      ++v9;
    }
    while (v8 < (v7 - v6) >> 4);
  }
  *a3 = *a2;
  int v18 = *(_DWORD *)(v7 - 4) + *(_DWORD *)(v7 - 8);
  vDSP_Length v19 = ((*(_DWORD *)this >> 1) - v18 + 1);
  float __B = a2[*((_DWORD *)this + 1) - 1];
  vDSP_vfill(&__B, &a3[v18], 1, v19);
}

void *std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_221FA8268(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    unsigned int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_221FA8374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void Phase::Zeppelin::MathUtils::Legendre(Phase::Zeppelin::MathUtils *this, int a2, long double a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a2 > (int)this)
  {
    uint64_t v6 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 928);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "MathUtils.cpp";
      __int16 v12 = 1024;
      int v13 = 40;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(inM > inN) is true]: ErrorDescriptions::kErrDescr_assocLegendreOrderGreaterThanDegree", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_assocLegendreOrderGreaterThanDegree);
  }
  switch((int)this)
  {
    case 0:
    case 1:
    case 2:
      return;
    case 3:
      if (a2 != 2 && a2 != 1)
      {
        if (a2) {
          pow(1.0 - a3 * a3, 1.5);
        }
        else {
          pow(a3, 3.0);
        }
      }
      break;
    case 4:
      switch(a2)
      {
        case 0:
          pow(a3, 4.0);
          break;
        case 3:
          double v4 = 1.0 - a3 * a3;
          long double v5 = 1.5;
          goto LABEL_83;
        default:
          return;
      }
      break;
    case 5:
      switch(a2)
      {
        case 0:
          pow(a3, 4.0);
          break;
        case 1:
          goto LABEL_54;
        case 2:
        case 4:
          return;
        case 3:
          pow(1.0 - a3 * a3, 1.5);
          break;
        default:
          pow(1.0 - a3 * a3, 2.5);
          break;
      }
      break;
    case 6:
      switch(a2)
      {
        case 0:
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 1:
          pow(a3, 4.0);
          break;
        case 2:
          goto LABEL_54;
        case 3:
          pow(1.0 - a3 * a3, 1.5);
          break;
        case 4:
          return;
        case 5:
          double v4 = 1.0 - a3 * a3;
          long double v5 = 2.5;
          goto LABEL_83;
        default:
          pow(1.0 - a3 * a3, 3.0);
          break;
      }
      break;
    case 7:
      switch(a2)
      {
        case 0:
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 1:
          goto LABEL_46;
        case 2:
          pow(a3, 4.0);
          break;
        case 3:
          pow(1.0 - a3 * a3, 1.5);
          pow(a3, 4.0);
          break;
        case 4:
          return;
        case 5:
          goto LABEL_41;
        case 6:
          double v4 = 1.0 - a3 * a3;
          long double v5 = 3.0;
          goto LABEL_83;
        default:
          pow(1.0 - a3 * a3, 3.5);
          break;
      }
      break;
    case 8:
      switch(a2)
      {
        case 0:
          pow(a3, 8.0);
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 1:
          goto LABEL_46;
        case 2:
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 3:
          pow(1.0 - a3 * a3, 1.5);
          pow(a3, 4.0);
          break;
        case 4:
          goto LABEL_54;
        case 5:
LABEL_41:
          pow(1.0 - a3 * a3, 2.5);
          break;
        case 6:
          pow(1.0 - a3 * a3, 3.0);
          break;
        case 7:
          double v4 = 1.0 - a3 * a3;
          long double v5 = 3.5;
          goto LABEL_83;
        default:
          pow(1.0 - a3 * a3, 4.0);
          break;
      }
      break;
    case 9:
      switch(a2)
      {
        case 0:
          pow(a3, 9.0);
          pow(a3, 7.0);
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 1:
          pow(a3, 8.0);
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 2:
          pow(a3, 7.0);
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 3:
LABEL_46:
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 4:
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 5:
LABEL_54:
          pow(a3, 4.0);
          break;
        case 6:
          pow(a3 * a3 + -1.0, 3.0);
          pow(a3, 3.0);
          break;
        case 7:
          pow(a3 * a3 + -1.0, 3.0);
          break;
        case 8:
          double v4 = a3 * a3 + -1.0;
          long double v5 = 4.0;
          goto LABEL_83;
        default:
          pow(1.0 - a3 * a3, 4.5);
          break;
      }
      break;
    case 10:
      switch(a2)
      {
        case 0:
          pow(a3, 10.0);
          pow(a3, 8.0);
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 1:
          pow(a3, 9.0);
          pow(a3, 7.0);
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 2:
          pow(a3, 8.0);
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 3:
          pow(a3, 7.0);
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 4:
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 5:
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 6:
          pow(a3 * a3 + -1.0, 3.0);
          pow(a3, 4.0);
          break;
        case 7:
          pow(a3 * a3 + -1.0, 3.0);
          pow(a3, 3.0);
          break;
        case 8:
          pow(a3 * a3 + -1.0, 4.0);
          break;
        case 9:
          double v4 = 1.0 - a3 * a3;
          long double v5 = 4.5;
          goto LABEL_83;
        default:
          pow(a3 * a3 + -1.0, 5.0);
          break;
      }
      break;
    case 11:
      switch(a2)
      {
        case 0:
          pow(a3, 11.0);
          pow(a3, 9.0);
          pow(a3, 7.0);
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 1:
          goto LABEL_76;
        case 2:
          pow(a3, 9.0);
          pow(a3, 7.0);
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 3:
          pow(1.0 - a3 * a3, 1.5);
          pow(a3, 8.0);
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 4:
          pow(a3, 7.0);
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 5:
          pow(1.0 - a3 * a3, 2.5);
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 6:
          pow(a3 * a3 + -1.0, 3.0);
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 7:
          pow(1.0 - a3 * a3, 3.5);
          pow(a3, 4.0);
          break;
        case 8:
          pow(a3 * a3 + -1.0, 4.0);
          pow(a3, 3.0);
          break;
        case 9:
          pow(1.0 - a3 * a3, 4.5);
          break;
        case 10:
          double v4 = a3 * a3 + -1.0;
          long double v5 = 5.0;
          goto LABEL_83;
        default:
          pow(1.0 - a3 * a3, 5.5);
          break;
      }
      break;
    case 12:
      switch(a2)
      {
        case 0:
          pow(a3, 12.0);
          pow(a3, 10.0);
          pow(a3, 8.0);
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 1:
          pow(a3, 11.0);
          pow(a3, 9.0);
          pow(a3, 7.0);
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 2:
LABEL_76:
          pow(a3, 10.0);
          pow(a3, 8.0);
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 3:
          pow(1.0 - a3 * a3, 1.5);
          pow(a3, 9.0);
          pow(a3, 7.0);
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 4:
          pow(a3, 8.0);
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 5:
          pow(1.0 - a3 * a3, 2.5);
          pow(a3, 7.0);
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 6:
          pow(a3 * a3 + -1.0, 3.0);
          pow(a3, 6.0);
          pow(a3, 4.0);
          break;
        case 7:
          pow(1.0 - a3 * a3, 3.5);
          pow(a3, 5.0);
          pow(a3, 3.0);
          break;
        case 8:
          pow(a3 * a3 + -1.0, 4.0);
          pow(a3, 4.0);
          break;
        case 9:
          pow(1.0 - a3 * a3, 4.5);
          pow(a3, 3.0);
          break;
        case 10:
          pow(a3 * a3 + -1.0, 5.0);
          break;
        case 11:
          double v4 = 1.0 - a3 * a3;
          long double v5 = 5.5;
LABEL_83:
          pow(v4, v5);
          break;
        default:
          pow(a3 * a3 + -1.0, 6.0);
          break;
      }
      break;
    default:
      unint64_t v8 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 928);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        int v10 = 136315394;
        uint64_t v11 = "MathUtils.cpp";
        __int16 v12 = 1024;
        int v13 = 447;
        _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument): ErrorDescriptions::kErrDescr_assocLegendreDegreeNotSupported", (uint8_t *)&v10, 0x12u);
      }
      unint64_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](v9, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_assocLegendreDegreeNotSupported);
  }
}

void sub_221FAA0D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void Phase::Zeppelin::MathUtils::ComputeSphHankelYUpToOrder(Phase::Zeppelin::MathUtils *this@<X0>, long double a2@<D0>, double **a3@<X8>)
{
  __p[3] = *(void **)MEMORY[0x263EF8340];
  if (a2 <= 0.0)
  {
    float v145 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 928);
    if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315394;
      *(void **)((char *)__p + 4) = "MathUtils.cpp";
      WORD2(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 6) = 634;
      _os_log_impl(&dword_221E5E000, v145, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [(0.0 >= inX) is true]: ErrorDescriptions::kErrDescr_sphHankelNegativeArgumentsNotSupported", (uint8_t *)__p, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, (const char *)Phase::Zeppelin::ErrorDescriptions::kErrDescr_sphHankelNegativeArgumentsNotSupported);
  }
  unsigned int v5 = this;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v6 = (this + 1);
  if (this != -1)
  {
    uint64_t v7 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::complex<double>>>((this + 1));
    *a3 = v7;
    a3[1] = v7;
    a3[2] = &v7[2 * v8];
  }
  if ((double)v5 <= a2)
  {
    memset(__p, 0, 24);
    std::vector<double>::reserve(__p, v6);
    double v13 = sin(a2);
    uint64_t v14 = (char *)__p[1];
    double v15 = v13 / a2;
    if (__p[1] >= __p[2])
    {
      uint64_t v16 = (char *)__p[0];
      int64_t v17 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      unint64_t v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v19 = (char *)__p[2] - (char *)__p[0];
      if (((char *)__p[2] - (char *)__p[0]) >> 2 > v18) {
        unint64_t v18 = v19 >> 2;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v18;
      }
      if (v20)
      {
        uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&__p[2], v20);
        uint64_t v16 = (char *)__p[0];
        uint64_t v14 = (char *)__p[1];
      }
      else
      {
        uint64_t v21 = 0;
      }
      double v47 = (double *)&v21[8 * v17];
      double v48 = &v21[8 * v20];
      *double v47 = v15;
      __int16 v12 = v47 + 1;
      while (v14 != v16)
      {
        uint64_t v49 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v47-- - 1) = v49;
      }
      __p[0] = v47;
      __p[1] = v12;
      __p[2] = v48;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *(double *)__p[1] = v15;
      __int16 v12 = (double *)(v14 + 8);
    }
    __p[1] = v12;
    if (!v5) {
      goto LABEL_141;
    }
    double v50 = v13 / (a2 * a2) - cos(a2) / a2;
    if (v12 >= __p[2])
    {
      double v52 = (double *)__p[0];
      uint64_t v53 = ((char *)v12 - (char *)__p[0]) >> 3;
      unint64_t v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v55 = (char *)__p[2] - (char *)__p[0];
      if (((char *)__p[2] - (char *)__p[0]) >> 2 > v54) {
        unint64_t v54 = v55 >> 2;
      }
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v54;
      }
      if (v56)
      {
        double v57 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&__p[2], v56);
        double v52 = (double *)__p[0];
        __int16 v12 = (double *)__p[1];
      }
      else
      {
        double v57 = 0;
      }
      double v69 = (double *)&v57[8 * v53];
      double v70 = &v57[8 * v56];
      *double v69 = v50;
      double v51 = v69 + 1;
      while (v12 != v52)
      {
        uint64_t v71 = *((void *)v12-- - 1);
        *((void *)v69-- - 1) = v71;
      }
      __p[0] = v69;
      __p[1] = v51;
      __p[2] = v70;
      if (v52) {
        operator delete(v52);
      }
    }
    else
    {
      *__int16 v12 = v50;
      double v51 = v12 + 1;
    }
    __p[1] = v51;
    if (v5 >= 2)
    {
      int32x2_t v72 = (double *)__p[0];
      uint64_t v73 = 2;
      do
      {
        double v74 = -(v72[v73 - 2] - (double)(2 * (int)v73 - 1) * (v72[v73 - 1] / a2));
        if (v51 >= __p[2])
        {
          uint64_t v75 = v51 - v72;
          unint64_t v76 = v75 + 1;
          if ((unint64_t)(v75 + 1) >> 61) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v77 = (char *)__p[2] - (char *)v72;
          if (((char *)__p[2] - (char *)v72) >> 2 > v76) {
            unint64_t v76 = v77 >> 2;
          }
          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v76;
          }
          if (v78)
          {
            double v79 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&__p[2], v78);
            int32x2_t v72 = (double *)__p[0];
            double v51 = (double *)__p[1];
          }
          else
          {
            double v79 = 0;
          }
          __int16 v80 = (double *)&v79[8 * v75];
          *__int16 v80 = v74;
          __int16 v12 = v80 + 1;
          while (v51 != v72)
          {
            uint64_t v81 = *((void *)v51-- - 1);
            *((void *)v80-- - 1) = v81;
          }
          __p[0] = v80;
          __p[1] = v12;
          __p[2] = &v79[8 * v78];
          if (v72)
          {
            operator delete(v72);
            int32x2_t v72 = (double *)__p[0];
          }
          else
          {
            int32x2_t v72 = v80;
          }
        }
        else
        {
          *double v51 = v74;
          __int16 v12 = v51 + 1;
        }
        __p[1] = v12;
        ++v73;
        double v51 = v12;
      }
      while (v73 != v6);
      goto LABEL_141;
    }
LABEL_125:
    __int16 v12 = v51;
    goto LABEL_141;
  }
  memset(__p, 0, 24);
  std::vector<double>::reserve(__p, v6);
  double v9 = sin(a2);
  double v10 = v9 / a2;
  if (v5 == 1)
  {
    double v22 = v9;
    unint64_t v23 = (char *)__p[1];
    uint64_t v24 = (double *)__p[2];
    if (__p[1] >= __p[2])
    {
      double v64 = (char *)__p[0];
      int64_t v65 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      unint64_t v66 = v65 + 1;
      if ((unint64_t)(v65 + 1) >> 61) {
        goto LABEL_229;
      }
      if (((char *)__p[2] - (char *)__p[0]) >> 2 > v66) {
        unint64_t v66 = ((char *)__p[2] - (char *)__p[0]) >> 2;
      }
      if ((void *)((char *)__p[2] - (char *)__p[0]) >= (void *)0x7FFFFFFFFFFFFFF8) {
        unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v67 = v66;
      }
      if (v67)
      {
        double v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&__p[2], v67);
        double v64 = (char *)__p[0];
        unint64_t v23 = (char *)__p[1];
      }
      else
      {
        double v68 = 0;
      }
      double v85 = (double *)&v68[8 * v65];
      uint64_t v24 = (double *)&v68[8 * v67];
      *double v85 = v10;
      unint64_t v25 = v85 + 1;
      while (v23 != v64)
      {
        uint64_t v86 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v85-- - 1) = v86;
      }
      __p[0] = v85;
      __p[1] = v25;
      __p[2] = &v68[8 * v67];
      if (v64)
      {
        operator delete(v64);
        uint64_t v24 = (double *)__p[2];
      }
    }
    else
    {
      *(double *)__p[1] = v10;
      unint64_t v25 = (double *)(v23 + 8);
    }
    __p[1] = v25;
    double v87 = v22 / (a2 * a2) - cos(a2) / a2;
    if (v25 >= v24)
    {
      double v58 = (double *)__p[0];
      uint64_t v88 = ((char *)v25 - (char *)__p[0]) >> 3;
      unint64_t v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v24 - (char *)__p[0]) >> 2 > v89) {
        unint64_t v89 = ((char *)v24 - (char *)__p[0]) >> 2;
      }
      if ((unint64_t)((char *)v24 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v90 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v90 = v89;
      }
      if (v90)
      {
        double v91 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&__p[2], v90);
        double v58 = (double *)__p[0];
        unint64_t v25 = (double *)__p[1];
      }
      else
      {
        double v91 = 0;
      }
      __int16 v92 = (double *)&v91[8 * v88];
      double v83 = &v91[8 * v90];
      *__int16 v92 = v87;
      __int16 v12 = v92 + 1;
      while (v25 != v58)
      {
        uint64_t v93 = *((void *)v25-- - 1);
        *((void *)v92-- - 1) = v93;
      }
      __p[0] = v92;
      goto LABEL_139;
    }
    *unint64_t v25 = v87;
    double v51 = v25 + 1;
    goto LABEL_125;
  }
  if (!v5)
  {
    uint64_t v11 = (double *)__p[1];
    if (__p[1] < __p[2])
    {
      *(double *)__p[1] = v10;
      __int16 v12 = v11 + 1;
      goto LABEL_141;
    }
    double v58 = (double *)__p[0];
    int64_t v59 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    unint64_t v60 = v59 + 1;
    if (!((unint64_t)(v59 + 1) >> 61))
    {
      int64_t v61 = (char *)__p[2] - (char *)__p[0];
      if (((char *)__p[2] - (char *)__p[0]) >> 2 > v60) {
        unint64_t v60 = v61 >> 2;
      }
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v62 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v60;
      }
      if (v62)
      {
        double v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&__p[2], v62);
        double v58 = (double *)__p[0];
        uint64_t v11 = (double *)__p[1];
      }
      else
      {
        double v63 = 0;
      }
      __int16 v82 = (double *)&v63[8 * v59];
      double v83 = &v63[8 * v62];
      *__int16 v82 = v10;
      __int16 v12 = v82 + 1;
      while (v11 != v58)
      {
        uint64_t v84 = *((void *)v11-- - 1);
        *((void *)v82-- - 1) = v84;
      }
      __p[0] = v82;
LABEL_139:
      __p[1] = v12;
      __p[2] = v83;
      if (v58) {
        operator delete(v58);
      }
      goto LABEL_141;
    }
LABEL_229:
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  int v26 = (int)(sqrt((double)v5) * 3.0) + v5;
  if (v26 >= 1)
  {
    double v27 = 1.0;
    double v28 = 0.0;
    do
    {
      double v29 = -(v28 - (double)((2 * v26) | 1) / a2 * v27);
      if (v26 - 1 <= v5)
      {
        long long v30 = (char *)__p[1];
        if (__p[1] >= __p[2])
        {
          long long v32 = (char *)__p[0];
          int64_t v33 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          int64_t v35 = (char *)__p[2] - (char *)__p[0];
          if (((char *)__p[2] - (char *)__p[0]) >> 2 > v34) {
            unint64_t v34 = v35 >> 2;
          }
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36)
          {
            double v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&__p[2], v36);
            long long v32 = (char *)__p[0];
            long long v30 = (char *)__p[1];
          }
          else
          {
            double v37 = 0;
          }
          double v38 = (double *)&v37[8 * v33];
          *double v38 = v29;
          long long v31 = v38 + 1;
          while (v30 != v32)
          {
            uint64_t v39 = *((void *)v30 - 1);
            v30 -= 8;
            *((void *)v38-- - 1) = v39;
          }
          __p[0] = v38;
          __p[1] = v31;
          __p[2] = &v37[8 * v36];
          if (v32) {
            operator delete(v32);
          }
        }
        else
        {
          *(double *)__p[1] = v29;
          long long v31 = v30 + 8;
        }
        __p[1] = v31;
      }
      double v28 = v27;
      double v27 = v29;
    }
    while (v26-- > 1);
  }
  __int16 v12 = (double *)__p[0];
  __int16 v41 = (double *)__p[1];
  if (__p[0] != __p[1])
  {
    double v42 = (char *)__p[1] - 8;
    if ((char *)__p[1] - 8 > __p[0])
    {
      double v43 = (char *)__p[0] + 8;
      do
      {
        uint64_t v44 = *((void *)v43 - 1);
        *((void *)v43 - 1) = *(void *)v42;
        *(void *)double v42 = v44;
        v42 -= 8;
        BOOL v45 = v43 >= v42;
        v43 += 8;
      }
      while (!v45);
    }
  }
  if (v12 != v41)
  {
    double v46 = v10 / *v12;
    do
    {
      *__int16 v12 = v46 * *v12;
      ++v12;
    }
    while (v12 != v41);
    __int16 v12 = v41;
  }
LABEL_141:
  __int16 v94 = (double *)__p[0];
  memset(__p, 0, 24);
  std::vector<double>::reserve(__p, v6);
  double v95 = -cos(a2);
  __int16 v96 = (char *)__p[1];
  double v97 = v95 / a2;
  if (__p[1] >= __p[2])
  {
    double v99 = (char *)__p[0];
    int64_t v100 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    unint64_t v101 = v100 + 1;
    if ((unint64_t)(v100 + 1) >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v102 = (char *)__p[2] - (char *)__p[0];
    if (((char *)__p[2] - (char *)__p[0]) >> 2 > v101) {
      unint64_t v101 = v102 >> 2;
    }
    if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v103 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v103 = v101;
    }
    if (v103)
    {
      __int16 v104 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&__p[2], v103);
      double v99 = (char *)__p[0];
      __int16 v96 = (char *)__p[1];
    }
    else
    {
      __int16 v104 = 0;
    }
    double v105 = (double *)&v104[8 * v100];
    uint64_t v106 = &v104[8 * v103];
    *double v105 = v97;
    __int16 v98 = v105 + 1;
    while (v96 != v99)
    {
      uint64_t v107 = *((void *)v96 - 1);
      v96 -= 8;
      *((void *)v105-- - 1) = v107;
    }
    __p[0] = v105;
    __p[1] = v98;
    __p[2] = v106;
    if (v99) {
      operator delete(v99);
    }
  }
  else
  {
    *(double *)__p[1] = v97;
    __int16 v98 = (double *)(v96 + 8);
  }
  __p[1] = v98;
  if (v5)
  {
    double v108 = v95 / (a2 * a2) - sin(a2) / a2;
    if (v98 >= __p[2])
    {
      uint64_t v110 = (double *)__p[0];
      uint64_t v111 = ((char *)v98 - (char *)__p[0]) >> 3;
      unint64_t v112 = v111 + 1;
      if ((unint64_t)(v111 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      int64_t v113 = (char *)__p[2] - (char *)__p[0];
      if (((char *)__p[2] - (char *)__p[0]) >> 2 > v112) {
        unint64_t v112 = v113 >> 2;
      }
      if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v114 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v114 = v112;
      }
      if (v114)
      {
        long long v115 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&__p[2], v114);
        uint64_t v110 = (double *)__p[0];
        __int16 v98 = (double *)__p[1];
      }
      else
      {
        long long v115 = 0;
      }
      long long v116 = (double *)&v115[8 * v111];
      long long v117 = &v115[8 * v114];
      *long long v116 = v108;
      int v109 = v116 + 1;
      while (v98 != v110)
      {
        uint64_t v118 = *((void *)v98-- - 1);
        *((void *)v116-- - 1) = v118;
      }
      __p[0] = v116;
      __p[1] = v109;
      __p[2] = v117;
      if (v110) {
        operator delete(v110);
      }
    }
    else
    {
      double *v98 = v108;
      int v109 = v98 + 1;
    }
    __p[1] = v109;
    if (v5 >= 2)
    {
      unsigned int v119 = (double *)__p[0];
      uint64_t v120 = 2;
      do
      {
        double v121 = -(v119[v120 - 2] - (double)(2 * (int)v120 - 1) * (v119[v120 - 1] / a2));
        if (v109 >= __p[2])
        {
          uint64_t v123 = v109 - v119;
          unint64_t v124 = v123 + 1;
          if ((unint64_t)(v123 + 1) >> 61) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v125 = (char *)__p[2] - (char *)v119;
          if (((char *)__p[2] - (char *)v119) >> 2 > v124) {
            unint64_t v124 = v125 >> 2;
          }
          if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v126 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v126 = v124;
          }
          if (v126)
          {
            int v127 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&__p[2], v126);
            unsigned int v119 = (double *)__p[0];
            int v109 = (double *)__p[1];
          }
          else
          {
            int v127 = 0;
          }
          uint64_t v128 = (double *)&v127[8 * v123];
          *uint64_t v128 = v121;
          __int16 v122 = v128 + 1;
          while (v109 != v119)
          {
            uint64_t v129 = *((void *)v109-- - 1);
            *((void *)v128-- - 1) = v129;
          }
          __p[0] = v128;
          __p[1] = v122;
          __p[2] = &v127[8 * v126];
          if (v119)
          {
            operator delete(v119);
            unsigned int v119 = (double *)__p[0];
          }
          else
          {
            unsigned int v119 = v128;
          }
        }
        else
        {
          *int v109 = v121;
          __int16 v122 = v109 + 1;
        }
        __p[1] = v122;
        ++v120;
        int v109 = (double *)v122;
      }
      while (v120 != v6);
    }
  }
  float64_t v130 = (double *)__p[0];
  if (v94 != v12)
  {
    char v131 = a3[1];
    BOOL v132 = v94;
    do
    {
      uint64_t v133 = *(void *)v132;
      double v134 = -*v130;
      unint64_t v135 = (unint64_t)a3[2];
      if ((unint64_t)v131 >= v135)
      {
        double v137 = *a3;
        uint64_t v138 = ((char *)v131 - (char *)*a3) >> 4;
        unint64_t v139 = v138 + 1;
        if ((unint64_t)(v138 + 1) >> 60) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v140 = v135 - (void)v137;
        if (v140 >> 3 > v139) {
          unint64_t v139 = v140 >> 3;
        }
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v141 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v141 = v139;
        }
        if (v141) {
          unint64_t v141 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::complex<double>>>(v141);
        }
        else {
          uint64_t v142 = 0;
        }
        unint64_t v143 = v141 + 16 * v138;
        *(void *)unint64_t v143 = v133;
        *(double *)(v143 + 8) = v134;
        uint64_t v144 = (double *)v143;
        if (v131 != v137)
        {
          do
          {
            *((_OWORD *)v144 - 1) = *((_OWORD *)v131 - 1);
            v144 -= 2;
            v131 -= 2;
          }
          while (v131 != v137);
          char v131 = *a3;
        }
        float v136 = (double *)(v143 + 16);
        *a3 = v144;
        a3[1] = (double *)(v143 + 16);
        a3[2] = (double *)(v141 + 16 * v142);
        if (v131) {
          operator delete(v131);
        }
      }
      else
      {
        *(void *)char v131 = v133;
        v131[1] = v134;
        float v136 = v131 + 2;
      }
      a3[1] = v136;
      ++v132;
      ++v130;
      char v131 = v136;
    }
    while (v132 != v12);
    float64_t v130 = (double *)__p[0];
  }
  if (v130)
  {
    __p[1] = v130;
    operator delete(v130);
  }
  if (v94) {
    operator delete(v94);
  }
}

void sub_221FAADC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  __int16 v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  double v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    double v9 = &v6[8 * v8];
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    __int16 v12 = v7;
    if (v11 != *a1)
    {
      __int16 v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::complex<double>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

void Phase::DspLayer::MatrixMixer1x12::GetNewRegistryEntry(Phase::DspLayer::MatrixMixer1x12 *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)malloc_type_malloc(0x2A0uLL, 0x1050040B063AAFAuLL);
  *(void *)uint64_t v1 = "Gain 0";
  *((void *)v1 + 1) = 0x500000000;
  *(void *)(v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2220A4F90;
  *((void *)v1 + 6) = 0x3FF0000000000000;
  *((void *)v1 + 7) = "Gain 1";
  *((void *)v1 + 8) = 0x500000001;
  *(void *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2220A4F90;
  *((void *)v1 + 13) = 0;
  *((void *)v1 + 14) = "Gain 2";
  *((void *)v1 + 15) = 0x500000002;
  *(void *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  *((_OWORD *)v1 + 9) = xmmword_2220A4F90;
  *((void *)v1 + 20) = 0;
  *((void *)v1 + 21) = "Gain 3";
  *((void *)v1 + 22) = 0x500000003;
  *(void *)(v1 + 188) = 0x100000000;
  *((_DWORD *)v1 + 49) = 3;
  *(_OWORD *)(v1 + 200) = xmmword_2220A4F90;
  *((void *)v1 + 27) = 0;
  *((void *)v1 + 28) = "Gain 4";
  *((void *)v1 + 29) = 0x500000004;
  *(void *)(v1 + 244) = 0x100000000;
  *((_DWORD *)v1 + 63) = 3;
  *((_OWORD *)v1 + 16) = xmmword_2220A4F90;
  *((void *)v1 + 34) = 0;
  *((void *)v1 + 35) = "Gain 5";
  *((void *)v1 + 36) = 0x500000005;
  *((_DWORD *)v1 + 75) = 0;
  *((void *)v1 + 38) = 0x300000001;
  *((void *)v1 + 39) = 0;
  *((_OWORD *)v1 + 20) = xmmword_2220A4FA0;
  *((void *)v1 + 42) = "Gain 6";
  *((void *)v1 + 43) = 0x500000006;
  *((_DWORD *)v1 + 89) = 0;
  *((void *)v1 + 45) = 0x300000001;
  *((_OWORD *)v1 + 23) = xmmword_2220A4F90;
  *((void *)v1 + 48) = 0;
  *((void *)v1 + 49) = "Gain 7";
  *((void *)v1 + 50) = 0x500000007;
  *((_DWORD *)v1 + 103) = 0;
  *((void *)v1 + 52) = 0x300000001;
  *((void *)v1 + 53) = 0;
  *((_OWORD *)v1 + 27) = xmmword_2220A4FA0;
  *((void *)v1 + 56) = "Gain 8";
  *((void *)v1 + 57) = 0x500000008;
  *((_DWORD *)v1 + 117) = 0;
  *((void *)v1 + 59) = 0x300000001;
  *((_OWORD *)v1 + 30) = xmmword_2220A4F90;
  *((void *)v1 + 62) = 0;
  *((void *)v1 + 63) = "Gain 9";
  *((void *)v1 + 64) = 0x500000009;
  *((_DWORD *)v1 + 131) = 0;
  *((void *)v1 + 66) = 0x300000001;
  *((void *)v1 + 67) = 0;
  *((_OWORD *)v1 + 34) = xmmword_2220A4FA0;
  *((void *)v1 + 70) = "Gain 10";
  *((void *)v1 + 71) = 0x50000000ALL;
  *((_DWORD *)v1 + 145) = 0;
  *((void *)v1 + 73) = 0x300000001;
  *((_OWORD *)v1 + 37) = xmmword_2220A4F90;
  *((void *)v1 + 76) = 0;
  *((void *)v1 + 77) = "Gain 11";
  *((void *)v1 + 78) = 0x50000000BLL;
  *((_DWORD *)v1 + 159) = 0;
  *((void *)v1 + 80) = 0x300000001;
  *((void *)v1 + 81) = 0;
  *((_OWORD *)v1 + 41) = xmmword_2220A4FA0;
  operator new();
}

void sub_221FAB448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::MatrixMixer1x12::~MatrixMixer1x12(Phase::DspLayer::MatrixMixer1x12 *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::MatrixMixer1x12Slice::~MatrixMixer1x12Slice(_anonymous_namespace_::MatrixMixer1x12Slice *this)
{
}

double anonymous namespace'::MatrixMixer1x12Slice::Reset(_OWORD *a1)
{
  __asm { FMOV            V0.4S, #1.0 }
  a1[1] = _Q0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[270] = 0u;
  a1[271] = 0u;
  a1[272] = 0u;
  a1[273] = 0u;
  a1[274] = 0u;
  a1[275] = 0u;
  a1[276] = 0u;
  a1[277] = 0u;
  a1[278] = 0u;
  a1[279] = 0u;
  a1[280] = 0u;
  a1[281] = 0u;
  (*(void (**)(_OWORD *))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  a1[564] = 0u;
  a1[563] = 0u;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x12Slice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 1065353216;
  v7[8] = 0;
  v7[12] = 0;
  v7[16] = 0;
  v7[20] = 0;
  v7[24] = 0;
  v7[28] = 0;
  v7[32] = 0;
  v7[36] = 0;
  v7[40] = 0;
  v7[44] = 0;
  v7[48] = 0;
  v7[52] = 0;
  v7[1080] = 0;
  v7[1084] = 0;
  v7[1088] = 0;
  v7[1092] = 0;
  v7[1096] = 0;
  v7[1100] = 0;
  v7[1104] = 0;
  v7[1108] = 0;
  v7[1112] = 0;
  v7[1116] = 0;
  v7[1120] = 0;
  v7[1124] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 8 * a3 + 9008) = a4;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x12Slice::GetParameter(_anonymous_namespace_::MatrixMixer1x12Slice *this, int a2)
{
  switch(a2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      uint64_t result = 0;
      break;
    default:
      uint64_t result = 9;
      break;
  }
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x12Slice::SetParameter(_anonymous_namespace_::MatrixMixer1x12Slice *this, int a2, int a3, double a4)
{
  switch(a2)
  {
    case 0:
      uint64_t result = 0;
      float v6 = a4;
      *((float *)this + a3 + 4) = v6;
      break;
    case 1:
      uint64_t result = 0;
      float v7 = a4;
      *((float *)this + a3 + 8) = v7;
      break;
    case 2:
      uint64_t result = 0;
      float v8 = a4;
      *((float *)this + a3 + 12) = v8;
      break;
    case 3:
      uint64_t result = 0;
      float v9 = a4;
      *((float *)this + a3 + 16) = v9;
      break;
    case 4:
      uint64_t result = 0;
      float v10 = a4;
      *((float *)this + a3 + 20) = v10;
      break;
    case 5:
      uint64_t result = 0;
      float v11 = a4;
      *((float *)this + a3 + 24) = v11;
      break;
    case 6:
      uint64_t result = 0;
      float v12 = a4;
      *((float *)this + a3 + 28) = v12;
      break;
    case 7:
      uint64_t result = 0;
      float v13 = a4;
      *((float *)this + a3 + 32) = v13;
      break;
    case 8:
      uint64_t result = 0;
      float v14 = a4;
      *((float *)this + a3 + 36) = v14;
      break;
    case 9:
      uint64_t result = 0;
      float v15 = a4;
      *((float *)this + a3 + 40) = v15;
      break;
    case 10:
      uint64_t result = 0;
      float v16 = a4;
      *((float *)this + a3 + 44) = v16;
      break;
    case 11:
      uint64_t result = 0;
      float v17 = a4;
      *((float *)this + a3 + 48) = v17;
      break;
    default:
      uint64_t result = 9;
      break;
  }
  return result;
}

__n128 anonymous namespace'::MatrixMixer1x12Slice::UpdateParameters(__n128 *a1)
{
  __n128 v25 = a1[271];
  __n128 v26 = a1[270];
  __n128 v9 = a1[1];
  __n128 v23 = a1[272];
  __n128 v24 = a1[2];
  __n128 v22 = a1[273];
  __n128 v8 = a1[3];
  __n128 v20 = a1[274];
  __n128 v21 = a1[4];
  __n128 v19 = a1[275];
  __n128 v7 = a1[5];
  __n128 v17 = a1[276];
  __n128 v18 = a1[6];
  __n128 v16 = a1[277];
  __n128 v14 = a1[278];
  __n128 v15 = a1[8];
  __n128 v5 = a1[9];
  __n128 v6 = a1[7];
  __n128 v12 = a1[10];
  __n128 v13 = a1[279];
  __n128 v10 = a1[281];
  __n128 v11 = a1[280];
  __n128 v3 = a1[11];
  __n128 v4 = a1[12];
  memcpy(&a1[282], &a1[13], 0x1010uLL);
  a1[539] = v26;
  a1[540] = v9;
  a1[541] = v25;
  a1[542] = v24;
  a1[543] = v23;
  a1[544] = v8;
  a1[545] = v22;
  a1[546] = v21;
  a1[547] = v20;
  a1[548] = v7;
  a1[549] = v19;
  a1[550] = v18;
  a1[551] = v17;
  a1[552] = v6;
  a1[553] = v16;
  a1[554] = v15;
  a1[555] = v14;
  a1[556] = v5;
  a1[557] = v13;
  a1[558] = v12;
  a1[559] = v11;
  a1[560] = v3;
  a1[561] = v10;
  __n128 result = v4;
  a1[562] = v4;
  return result;
}

_DWORD *anonymous namespace'::MatrixMixer1x12Slice::UpdateParameters(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v3 = (_DWORD *)(a1 + 4 * a3);
  int v4 = v3[1080];
  int v5 = v3[4];
  int v6 = v3[1084];
  uint64_t v7 = a3;
  int v8 = v3[8];
  int v9 = v3[1088];
  int v10 = v3[12];
  int v11 = v3[1092];
  int v12 = v3[16];
  int v13 = v3[1096];
  int v14 = v3[20];
  int v15 = v3[1100];
  int v16 = v3[24];
  int v17 = v3[1104];
  int v18 = v3[28];
  int v19 = v3[1108];
  int v20 = v3[32];
  int v21 = v3[1112];
  int v22 = v3[36];
  int v23 = v3[1116];
  int v24 = v3[40];
  int v25 = v3[1120];
  int v26 = v3[44];
  int v27 = v3[1124];
  int v28 = v3[48];
  uint64_t v29 = v3[52];
  v3[1128] = v29;
  if ((int)v29 >= 1)
  {
    long long v30 = (_DWORD *)(a1 + 4 * v7);
    do
    {
      v30[1132] = v30[56];
      v30[1136] = v30[60];
      v30 += 8;
      --v29;
    }
    while (v29);
  }
  __n128 result = (_DWORD *)(a1 + 4 * v7);
  result[2156] = v4;
  result[2160] = v5;
  result[2164] = v6;
  result[2168] = v8;
  result[2172] = v9;
  result[2176] = v10;
  result[2180] = v11;
  result[2184] = v12;
  result[2188] = v13;
  result[2192] = v14;
  result[2196] = v15;
  result[2200] = v16;
  result[2204] = v17;
  result[2208] = v18;
  result[2212] = v19;
  result[2216] = v20;
  result[2220] = v21;
  result[2224] = v22;
  result[2228] = v23;
  result[2232] = v24;
  result[2236] = v25;
  result[2240] = v26;
  result[2244] = v27;
  result[2248] = v28;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x12Slice::Run(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int32x4_t v4 = (int32x4_t)vandq_s8(*(int8x16_t *)(result + 4512), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2220A5190));
  int64x2_t v5 = (int64x2_t)vcgtzq_s32(v4);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0])
  {
    uint64_t v6 = *(void *)(a2 + 56);
    uint64_t v7 = (float32x4_t *)(result + 4544);
    float32x4_t v8 = 0uLL;
    int32x4_t v9 = 0uLL;
    v10.i64[0] = 0x100000001;
    v10.i64[1] = 0x100000001;
    do
    {
      v11.i32[0] = *(_DWORD *)(v6 + 4 * v7[-1].i32[0]);
      v11.i32[1] = *(_DWORD *)(v6 + 4 * v7[-1].i32[1]);
      v11.i32[2] = *(_DWORD *)(v6 + 4 * v7[-1].i32[2]);
      v11.i32[3] = *(_DWORD *)(v6 + 4 * v7[-1].i32[3]);
      float32x4_t v8 = vmlaq_f32(v8, (float32x4_t)vandq_s8((int8x16_t)v5, v11), *v7);
      int32x4_t v9 = vaddq_s32(v9, v10);
      int64x2_t v5 = (int64x2_t)vcgtq_s32(v4, v9);
      v7 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0]);
  }
  else
  {
    float32x4_t v8 = 0uLL;
  }
  float32x4_t v12 = *(float32x4_t *)(result + 8672);
  float32x4_t v13 = *(float32x4_t *)(result + 8704);
  float32x4_t v14 = *(float32x4_t *)(result + 8736);
  float32x4_t v15 = *(float32x4_t *)(result + 8768);
  float32x4_t v16 = *(float32x4_t *)(result + 8800);
  float32x4_t v17 = *(float32x4_t *)(result + 8832);
  float32x4_t v18 = *(float32x4_t *)(result + 8864);
  float32x4_t v19 = *(float32x4_t *)(result + 8896);
  float32x4_t v20 = *(float32x4_t *)(result + 8928);
  float32x4_t v21 = *(float32x4_t *)(result + 8960);
  HIDWORD(v23) = a4 - 1;
  LODWORD(v23) = a4 - 1;
  int v22 = v23 >> 1;
  float32x4_t v24 = *(float32x4_t *)(result + 8992);
  float32x4_t v25 = vmulq_f32(*(float32x4_t *)(result + 8640), v8);
  int8x16_t v26 = vandq_s8((int8x16_t)v25, vorrq_s8((int8x16_t)vcltzq_f32(v25), (int8x16_t)vcgezq_f32(v25)));
  switch(v22)
  {
    case 0:
      goto LABEL_10;
    case 1:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8636)) = v26.i32[3];
LABEL_8:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8632)) = v26.i32[2];
LABEL_9:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8628)) = v26.i32[1];
LABEL_10:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8624)) = v26.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v27 = vmulq_f32(v12, v8);
  int8x16_t v28 = vandq_s8((int8x16_t)v27, vorrq_s8((int8x16_t)vcltzq_f32(v27), (int8x16_t)vcgezq_f32(v27)));
  switch(v22)
  {
    case 0:
      goto LABEL_15;
    case 1:
      goto LABEL_14;
    case 3:
      goto LABEL_13;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8668)) = v28.i32[3];
LABEL_13:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8664)) = v28.i32[2];
LABEL_14:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8660)) = v28.i32[1];
LABEL_15:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8656)) = v28.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v29 = vmulq_f32(v13, v8);
  int8x16_t v30 = vandq_s8((int8x16_t)v29, vorrq_s8((int8x16_t)vcltzq_f32(v29), (int8x16_t)vcgezq_f32(v29)));
  switch(v22)
  {
    case 0:
      goto LABEL_20;
    case 1:
      goto LABEL_19;
    case 3:
      goto LABEL_18;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8700)) = v30.i32[3];
LABEL_18:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8696)) = v30.i32[2];
LABEL_19:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8692)) = v30.i32[1];
LABEL_20:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8688)) = v30.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v31 = vmulq_f32(v14, v8);
  int8x16_t v32 = vandq_s8((int8x16_t)v31, vorrq_s8((int8x16_t)vcltzq_f32(v31), (int8x16_t)vcgezq_f32(v31)));
  switch(v22)
  {
    case 0:
      goto LABEL_25;
    case 1:
      goto LABEL_24;
    case 3:
      goto LABEL_23;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8732)) = v32.i32[3];
LABEL_23:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8728)) = v32.i32[2];
LABEL_24:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8724)) = v32.i32[1];
LABEL_25:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8720)) = v32.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v33 = vmulq_f32(v15, v8);
  int8x16_t v34 = vandq_s8((int8x16_t)v33, vorrq_s8((int8x16_t)vcltzq_f32(v33), (int8x16_t)vcgezq_f32(v33)));
  switch(v22)
  {
    case 0:
      goto LABEL_30;
    case 1:
      goto LABEL_29;
    case 3:
      goto LABEL_28;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8764)) = v34.i32[3];
LABEL_28:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8760)) = v34.i32[2];
LABEL_29:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8756)) = v34.i32[1];
LABEL_30:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8752)) = v34.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v35 = vmulq_f32(v16, v8);
  int8x16_t v36 = vandq_s8((int8x16_t)v35, vorrq_s8((int8x16_t)vcltzq_f32(v35), (int8x16_t)vcgezq_f32(v35)));
  switch(v22)
  {
    case 0:
      goto LABEL_35;
    case 1:
      goto LABEL_34;
    case 3:
      goto LABEL_33;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8796)) = v36.i32[3];
LABEL_33:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8792)) = v36.i32[2];
LABEL_34:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8788)) = v36.i32[1];
LABEL_35:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8784)) = v36.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v37 = vmulq_f32(v17, v8);
  int8x16_t v38 = vandq_s8((int8x16_t)v37, vorrq_s8((int8x16_t)vcltzq_f32(v37), (int8x16_t)vcgezq_f32(v37)));
  switch(v22)
  {
    case 0:
      goto LABEL_40;
    case 1:
      goto LABEL_39;
    case 3:
      goto LABEL_38;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8828)) = v38.i32[3];
LABEL_38:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8824)) = v38.i32[2];
LABEL_39:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8820)) = v38.i32[1];
LABEL_40:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8816)) = v38.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v39 = vmulq_f32(v18, v8);
  int8x16_t v40 = vandq_s8((int8x16_t)v39, vorrq_s8((int8x16_t)vcltzq_f32(v39), (int8x16_t)vcgezq_f32(v39)));
  switch(v22)
  {
    case 0:
      goto LABEL_45;
    case 1:
      goto LABEL_44;
    case 3:
      goto LABEL_43;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8860)) = v40.i32[3];
LABEL_43:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8856)) = v40.i32[2];
LABEL_44:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8852)) = v40.i32[1];
LABEL_45:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8848)) = v40.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v41 = vmulq_f32(v19, v8);
  int8x16_t v42 = vandq_s8((int8x16_t)v41, vorrq_s8((int8x16_t)vcltzq_f32(v41), (int8x16_t)vcgezq_f32(v41)));
  switch(v22)
  {
    case 0:
      goto LABEL_50;
    case 1:
      goto LABEL_49;
    case 3:
      goto LABEL_48;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8892)) = v42.i32[3];
LABEL_48:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8888)) = v42.i32[2];
LABEL_49:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8884)) = v42.i32[1];
LABEL_50:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8880)) = v42.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v43 = vmulq_f32(v20, v8);
  int8x16_t v44 = vandq_s8((int8x16_t)v43, vorrq_s8((int8x16_t)vcltzq_f32(v43), (int8x16_t)vcgezq_f32(v43)));
  switch(v22)
  {
    case 0:
      goto LABEL_55;
    case 1:
      goto LABEL_54;
    case 3:
      goto LABEL_53;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8924)) = v44.i32[3];
LABEL_53:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8920)) = v44.i32[2];
LABEL_54:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8916)) = v44.i32[1];
LABEL_55:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8912)) = v44.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v45 = vmulq_f32(v21, v8);
  int8x16_t v46 = vandq_s8((int8x16_t)v45, vorrq_s8((int8x16_t)vcltzq_f32(v45), (int8x16_t)vcgezq_f32(v45)));
  switch(v22)
  {
    case 0:
      goto LABEL_60;
    case 1:
      goto LABEL_59;
    case 3:
      goto LABEL_58;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8956)) = v46.i32[3];
LABEL_58:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8952)) = v46.i32[2];
LABEL_59:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8948)) = v46.i32[1];
LABEL_60:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8944)) = v46.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v47 = vmulq_f32(v24, v8);
  int8x16_t v48 = vandq_s8((int8x16_t)v47, vorrq_s8((int8x16_t)vcltzq_f32(v47), (int8x16_t)vcgezq_f32(v47)));
  switch(v22)
  {
    case 0:
      goto LABEL_65;
    case 1:
      goto LABEL_64;
    case 3:
      goto LABEL_63;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8988)) = v48.i32[3];
LABEL_63:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8984)) = v48.i32[2];
LABEL_64:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8980)) = v48.i32[1];
LABEL_65:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8976)) = v48.i32[0];
      break;
    default:
      return result;
  }
  return result;
}

float anonymous namespace'::MatrixMixer1x12Slice::CopyVoiceState(_anonymous_namespace_::MatrixMixer1x12Slice *this, Phase::DspLayer::VoicePoolSlice *a2, int a3, int a4)
{
  int32x4_t v4 = (_DWORD *)((char *)a2 + 4 * a3);
  int64x2_t v5 = (_DWORD *)((char *)this + 4 * a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  v5[20] = v4[20];
  v5[24] = v4[24];
  v5[28] = v4[28];
  v5[32] = v4[32];
  v5[36] = v4[36];
  v5[40] = v4[40];
  v5[44] = v4[44];
  v5[48] = v4[48];
  uint64_t v6 = v4[52];
  v5[52] = v6;
  if ((int)v6 >= 1)
  {
    uint64_t v7 = (_DWORD *)((char *)this + 4 * a4 + 240);
    float32x4_t v8 = (int *)((char *)a2 + 4 * a3 + 240);
    do
    {
      *(v7 - 4) = *(v8 - 4);
      int v9 = *v8;
      v8 += 8;
      *uint64_t v7 = v9;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  int32x4_t v10 = (char *)this + 4 * a4;
  int8x16_t v11 = (char *)a2 + 4 * a3;
  uint64_t v12 = *((unsigned int *)v11 + 1128);
  *((_DWORD *)v10 + 1128) = v12;
  if ((int)v12 >= 1)
  {
    float32x4_t v13 = v10 + 4544;
    float32x4_t v14 = (int *)(v11 + 4544);
    do
    {
      *(v13 - 4) = *(v14 - 4);
      int v15 = *v14;
      v14 += 8;
      *float32x4_t v13 = v15;
      v13 += 8;
      --v12;
    }
    while (v12);
  }
  *((_DWORD *)v10 + 1080) = *((_DWORD *)v11 + 1080);
  *((_DWORD *)v10 + 1084) = *((_DWORD *)v11 + 1084);
  *((_DWORD *)v10 + 1088) = *((_DWORD *)v11 + 1088);
  *((_DWORD *)v10 + 1092) = *((_DWORD *)v11 + 1092);
  *((_DWORD *)v10 + 1096) = *((_DWORD *)v11 + 1096);
  *((_DWORD *)v10 + 1100) = *((_DWORD *)v11 + 1100);
  *((_DWORD *)v10 + 1104) = *((_DWORD *)v11 + 1104);
  *((_DWORD *)v10 + 1108) = *((_DWORD *)v11 + 1108);
  *((_DWORD *)v10 + 1112) = *((_DWORD *)v11 + 1112);
  *((_DWORD *)v10 + 1116) = *((_DWORD *)v11 + 1116);
  *((_DWORD *)v10 + 1120) = *((_DWORD *)v11 + 1120);
  *((_DWORD *)v10 + 1124) = *((_DWORD *)v11 + 1124);
  *((_DWORD *)v10 + 2156) = *((_DWORD *)v11 + 2156);
  *((_DWORD *)v10 + 2160) = *((_DWORD *)v11 + 2160);
  *((_DWORD *)v10 + 2164) = *((_DWORD *)v11 + 2164);
  *((_DWORD *)v10 + 2168) = *((_DWORD *)v11 + 2168);
  *((_DWORD *)v10 + 2172) = *((_DWORD *)v11 + 2172);
  *((_DWORD *)v10 + 2176) = *((_DWORD *)v11 + 2176);
  *((_DWORD *)v10 + 2180) = *((_DWORD *)v11 + 2180);
  *((_DWORD *)v10 + 2184) = *((_DWORD *)v11 + 2184);
  *((_DWORD *)v10 + 2188) = *((_DWORD *)v11 + 2188);
  *((_DWORD *)v10 + 2192) = *((_DWORD *)v11 + 2192);
  *((_DWORD *)v10 + 2196) = *((_DWORD *)v11 + 2196);
  *((_DWORD *)v10 + 2200) = *((_DWORD *)v11 + 2200);
  *((_DWORD *)v10 + 2204) = *((_DWORD *)v11 + 2204);
  *((_DWORD *)v10 + 2208) = *((_DWORD *)v11 + 2208);
  *((_DWORD *)v10 + 2212) = *((_DWORD *)v11 + 2212);
  *((_DWORD *)v10 + 2216) = *((_DWORD *)v11 + 2216);
  *((_DWORD *)v10 + 2220) = *((_DWORD *)v11 + 2220);
  *((_DWORD *)v10 + 2224) = *((_DWORD *)v11 + 2224);
  *((_DWORD *)v10 + 2228) = *((_DWORD *)v11 + 2228);
  *((_DWORD *)v10 + 2232) = *((_DWORD *)v11 + 2232);
  *((_DWORD *)v10 + 2236) = *((_DWORD *)v11 + 2236);
  *((_DWORD *)v10 + 2240) = *((_DWORD *)v11 + 2240);
  *((_DWORD *)v10 + 2244) = *((_DWORD *)v11 + 2244);
  float result = *((float *)v11 + 2248);
  *((float *)v10 + 2248) = result;
  *((void *)this + a4 + 1126) = *((void *)a2 + a3 + 1126);
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x12Slice::AddInput(_anonymous_namespace_::MatrixMixer1x12Slice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v7 = (char *)this + 208;
  uint64_t v8 = *((int *)this + a3 + 52);
  if ((int)v8 > 127) {
    return 6;
  }
  uint64_t result = 0;
  int v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 56) = a4;
  *((float *)v9 + 60) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x12Slice::RemoveInput(_anonymous_namespace_::MatrixMixer1x12Slice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  else {
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 208, a3, a4);
  }
}

uint64_t anonymous namespace'::MatrixMixer1x12Slice::SetInputGain(_anonymous_namespace_::MatrixMixer1x12Slice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v6 = *((unsigned int *)this + a3 + 52);
  if ((int)v6 < 1) {
    return 7;
  }
  uint64_t v7 = 0;
  for (uint64_t i = (float *)((char *)this + 4 * a3 + 240); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7) {
      return 7;
    }
  }
  if ((v7 & 0x80000000) != 0) {
    return 7;
  }
  uint64_t result = 0;
  float *i = a5;
  return result;
}

void anonymous namespace'::MatrixMixer1x12Slice::GetInputs(_anonymous_namespace_::MatrixMixer1x12Slice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 208, a3, (char **)a4);
  }
}

uint64_t anonymous namespace'::MatrixMixer1x12Slice::ClearInputs(_anonymous_namespace_::MatrixMixer1x12Slice *this, int a2)
{
  *((_DWORD *)this + a2 + 52) = 0;
  return 0;
}

uint64_t anonymous namespace'::MatrixMixer1x12Slice::GetMaximumInputConnectionCount(_anonymous_namespace_::MatrixMixer1x12Slice *this, int a2)
{
  return (a2 == 0) << 7;
}

unint64_t anonymous namespace'::MatrixMixer1x12Slice::GetOutput(_anonymous_namespace_::MatrixMixer1x12Slice *this, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4320;
      goto LABEL_14;
    case 1:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4336;
      goto LABEL_14;
    case 2:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4352;
      goto LABEL_14;
    case 3:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4368;
      goto LABEL_14;
    case 4:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4384;
      goto LABEL_14;
    case 5:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4400;
      goto LABEL_14;
    case 6:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4416;
      goto LABEL_14;
    case 7:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4432;
      goto LABEL_14;
    case 8:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4448;
      goto LABEL_14;
    case 9:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4464;
      goto LABEL_14;
    case 10:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4480;
      goto LABEL_14;
    case 11:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4496;
LABEL_14:
      unint64_t result = (unint64_t)*(unsigned int *)&v3[v4] << 32;
      break;
    default:
      unint64_t result = 0xFFFFFFFF00000008;
      break;
  }
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x12Slice::SetOutput(_anonymous_namespace_::MatrixMixer1x12Slice *this, int a2, int a3, int a4)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4320;
      goto LABEL_14;
    case 1:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4336;
      goto LABEL_14;
    case 2:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4352;
      goto LABEL_14;
    case 3:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4368;
      goto LABEL_14;
    case 4:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4384;
      goto LABEL_14;
    case 5:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4400;
      goto LABEL_14;
    case 6:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4416;
      goto LABEL_14;
    case 7:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4432;
      goto LABEL_14;
    case 8:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4448;
      goto LABEL_14;
    case 9:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4464;
      goto LABEL_14;
    case 10:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4480;
      goto LABEL_14;
    case 11:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4496;
LABEL_14:
      uint64_t result = 0;
      *(_DWORD *)&v4[v5] = a4;
      break;
    default:
      uint64_t result = 8;
      break;
  }
  return result;
}

void std::__function::__func<Phase::DspLayer::MatrixMixer1x12::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x12::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::MatrixMixer1x12::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x12::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D478790;
  return result;
}

void std::__function::__func<Phase::DspLayer::MatrixMixer1x12::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x12::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D478790;
}

void std::__function::__func<Phase::DspLayer::MatrixMixer1x12::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x12::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_221FACB44(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

void Phase::DspLayer::MatrixMixer1x2::GetNewRegistryEntry(Phase::DspLayer::MatrixMixer1x2 *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)malloc_type_malloc(0x70uLL, 0x1050040B063AAFAuLL);
  *(void *)uint64_t v1 = "Gain 0";
  *((void *)v1 + 1) = 0x500000000;
  *(void *)(v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2220A4F90;
  *((void *)v1 + 6) = 0x3FF0000000000000;
  *((void *)v1 + 7) = "Gain 1";
  *((void *)v1 + 8) = 0x500000001;
  *(void *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2220A4F90;
  *((void *)v1 + 13) = 0;
  operator new();
}

void sub_221FACD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::MatrixMixer1x2::~MatrixMixer1x2(Phase::DspLayer::MatrixMixer1x2 *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::MatrixMixer1x2Slice::~MatrixMixer1x2Slice(_anonymous_namespace_::MatrixMixer1x2Slice *this)
{
}

double anonymous namespace'::MatrixMixer1x2Slice::Reset(_OWORD *a1)
{
  __asm { FMOV            V0.4S, #1.0 }
  a1[1] = _Q0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[260] = 0u;
  a1[261] = 0u;
  (*(void (**)(_OWORD *))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  a1[524] = 0u;
  a1[523] = 0u;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x2Slice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 1065353216;
  v7[8] = 0;
  v7[12] = 0;
  v7[1040] = 0;
  v7[1044] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 8 * a3 + 8368) = a4;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x2Slice::GetParameter(_anonymous_namespace_::MatrixMixer1x2Slice *this, unsigned int a2)
{
  if (a2 > 1) {
    return 9;
  }
  else {
    return 0;
  }
}

uint64_t anonymous namespace'::MatrixMixer1x2Slice::SetParameter(_anonymous_namespace_::MatrixMixer1x2Slice *this, int a2, int a3, double a4)
{
  if (a2 == 1)
  {
    uint64_t result = 0;
    float v7 = a4;
    *((float *)this + a3 + 8) = v7;
  }
  else if (a2)
  {
    return 9;
  }
  else
  {
    uint64_t result = 0;
    float v6 = a4;
    *((float *)this + a3 + 4) = v6;
  }
  return result;
}

__n128 anonymous namespace'::MatrixMixer1x2Slice::UpdateParameters(__n128 *a1)
{
  __n128 v6 = a1[260];
  __n128 v3 = a1[1];
  __n128 v4 = a1[2];
  __n128 v5 = a1[261];
  memcpy(&a1[262], &a1[3], 0x1010uLL);
  a1[519] = v6;
  a1[520] = v3;
  a1[521] = v5;
  __n128 result = v4;
  a1[522] = v4;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x2Slice::UpdateParameters(uint64_t result, uint64_t a2, int a3)
{
  __n128 v3 = (_DWORD *)(result + 4 * a3);
  int v4 = v3[1040];
  int v5 = v3[4];
  int v6 = v3[1044];
  int v7 = v3[8];
  uint64_t v8 = v3[12];
  v3[1048] = v8;
  if ((int)v8 >= 1)
  {
    int v9 = (_DWORD *)(result + 4 * a3);
    do
    {
      v9[1052] = v9[16];
      v9[1056] = v9[20];
      v9 += 8;
      --v8;
    }
    while (v8);
  }
  int32x4_t v10 = (_DWORD *)(result + 4 * a3);
  v10[2076] = v4;
  v10[2080] = v5;
  v10[2084] = v6;
  v10[2088] = v7;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x2Slice::Run(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int32x4_t v4 = (int32x4_t)vandq_s8(*(int8x16_t *)(result + 4192), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2220A5190));
  int64x2_t v5 = (int64x2_t)vcgtzq_s32(v4);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0])
  {
    uint64_t v6 = *(void *)(a2 + 56);
    int v7 = (float32x4_t *)(result + 4224);
    float32x4_t v8 = 0uLL;
    int32x4_t v9 = 0uLL;
    v10.i64[0] = 0x100000001;
    v10.i64[1] = 0x100000001;
    do
    {
      v11.i32[0] = *(_DWORD *)(v6 + 4 * v7[-1].i32[0]);
      v11.i32[1] = *(_DWORD *)(v6 + 4 * v7[-1].i32[1]);
      v11.i32[2] = *(_DWORD *)(v6 + 4 * v7[-1].i32[2]);
      v11.i32[3] = *(_DWORD *)(v6 + 4 * v7[-1].i32[3]);
      float32x4_t v8 = vmlaq_f32(v8, (float32x4_t)vandq_s8((int8x16_t)v5, v11), *v7);
      int32x4_t v9 = vaddq_s32(v9, v10);
      int64x2_t v5 = (int64x2_t)vcgtq_s32(v4, v9);
      v7 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0]);
  }
  else
  {
    float32x4_t v8 = 0uLL;
  }
  float32x4_t v12 = *(float32x4_t *)(result + 8352);
  HIDWORD(v14) = a4 - 1;
  LODWORD(v14) = a4 - 1;
  int v13 = v14 >> 1;
  float32x4_t v15 = vmulq_f32(*(float32x4_t *)(result + 8320), v8);
  int8x16_t v16 = vandq_s8((int8x16_t)v15, vorrq_s8((int8x16_t)vcltzq_f32(v15), (int8x16_t)vcgezq_f32(v15)));
  switch(v13)
  {
    case 0:
      goto LABEL_10;
    case 1:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8316)) = v16.i32[3];
LABEL_8:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8312)) = v16.i32[2];
LABEL_9:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8308)) = v16.i32[1];
LABEL_10:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8304)) = v16.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v17 = vmulq_f32(v12, v8);
  int8x16_t v18 = vandq_s8((int8x16_t)v17, vorrq_s8((int8x16_t)vcltzq_f32(v17), (int8x16_t)vcgezq_f32(v17)));
  switch(v13)
  {
    case 0:
      goto LABEL_15;
    case 1:
      goto LABEL_14;
    case 3:
      goto LABEL_13;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8348)) = v18.i32[3];
LABEL_13:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8344)) = v18.i32[2];
LABEL_14:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8340)) = v18.i32[1];
LABEL_15:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8336)) = v18.i32[0];
      break;
    default:
      return result;
  }
  return result;
}

float anonymous namespace'::MatrixMixer1x2Slice::CopyVoiceState(_anonymous_namespace_::MatrixMixer1x2Slice *this, Phase::DspLayer::VoicePoolSlice *a2, int a3, int a4)
{
  int32x4_t v4 = (_DWORD *)((char *)a2 + 4 * a3);
  int64x2_t v5 = (_DWORD *)((char *)this + 4 * a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  uint64_t v6 = v4[12];
  v5[12] = v6;
  if ((int)v6 >= 1)
  {
    int v7 = (_DWORD *)((char *)this + 4 * a4 + 80);
    float32x4_t v8 = (int *)((char *)a2 + 4 * a3 + 80);
    do
    {
      *(v7 - 4) = *(v8 - 4);
      int v9 = *v8;
      v8 += 8;
      *int v7 = v9;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  int32x4_t v10 = (char *)this + 4 * a4;
  int8x16_t v11 = (char *)a2 + 4 * a3;
  uint64_t v12 = *((unsigned int *)v11 + 1048);
  *((_DWORD *)v10 + 1048) = v12;
  if ((int)v12 >= 1)
  {
    int v13 = v10 + 4224;
    unint64_t v14 = (int *)(v11 + 4224);
    do
    {
      *(v13 - 4) = *(v14 - 4);
      int v15 = *v14;
      v14 += 8;
      *int v13 = v15;
      v13 += 8;
      --v12;
    }
    while (v12);
  }
  *((_DWORD *)v10 + 1040) = *((_DWORD *)v11 + 1040);
  *((_DWORD *)v10 + 1044) = *((_DWORD *)v11 + 1044);
  *((_DWORD *)v10 + 2076) = *((_DWORD *)v11 + 2076);
  *((_DWORD *)v10 + 2080) = *((_DWORD *)v11 + 2080);
  *((_DWORD *)v10 + 2084) = *((_DWORD *)v11 + 2084);
  float result = *((float *)v11 + 2088);
  *((float *)v10 + 2088) = result;
  *((void *)this + a4 + 1046) = *((void *)a2 + a3 + 1046);
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x2Slice::AddInput(_anonymous_namespace_::MatrixMixer1x2Slice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  int v7 = (char *)this + 48;
  uint64_t v8 = *((int *)this + a3 + 12);
  if ((int)v8 > 127) {
    return 6;
  }
  uint64_t result = 0;
  int v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 16) = a4;
  *((float *)v9 + 20) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x2Slice::RemoveInput(_anonymous_namespace_::MatrixMixer1x2Slice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  else {
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 48, a3, a4);
  }
}

uint64_t anonymous namespace'::MatrixMixer1x2Slice::SetInputGain(_anonymous_namespace_::MatrixMixer1x2Slice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v6 = *((unsigned int *)this + a3 + 12);
  if ((int)v6 < 1) {
    return 7;
  }
  uint64_t v7 = 0;
  for (uint64_t i = (float *)((char *)this + 4 * a3 + 80); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7) {
      return 7;
    }
  }
  if ((v7 & 0x80000000) != 0) {
    return 7;
  }
  uint64_t result = 0;
  float *i = a5;
  return result;
}

void anonymous namespace'::MatrixMixer1x2Slice::GetInputs(_anonymous_namespace_::MatrixMixer1x2Slice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 48, a3, (char **)a4);
  }
}

uint64_t anonymous namespace'::MatrixMixer1x2Slice::ClearInputs(_anonymous_namespace_::MatrixMixer1x2Slice *this, int a2)
{
  *((_DWORD *)this + a2 + 12) = 0;
  return 0;
}

uint64_t anonymous namespace'::MatrixMixer1x2Slice::GetMaximumInputConnectionCount(_anonymous_namespace_::MatrixMixer1x2Slice *this, int a2)
{
  return (a2 == 0) << 7;
}

uint64_t anonymous namespace'::MatrixMixer1x2Slice::GetOutput(_anonymous_namespace_::MatrixMixer1x2Slice *this, int a2, int a3)
{
  if (a2 == 1)
  {
    __n128 v3 = (char *)this + 4 * a3;
    uint64_t v4 = 4176;
    return (unint64_t)*(unsigned int *)&v3[v4] << 32;
  }
  if (!a2)
  {
    __n128 v3 = (char *)this + 4 * a3;
    uint64_t v4 = 4160;
    return (unint64_t)*(unsigned int *)&v3[v4] << 32;
  }
  return 0xFFFFFFFF00000008;
}

uint64_t anonymous namespace'::MatrixMixer1x2Slice::SetOutput(_anonymous_namespace_::MatrixMixer1x2Slice *this, int a2, int a3, int a4)
{
  if (a2 == 1)
  {
    uint64_t v4 = (char *)this + 4 * a3;
    uint64_t v5 = 4176;
    goto LABEL_5;
  }
  if (!a2)
  {
    uint64_t v4 = (char *)this + 4 * a3;
    uint64_t v5 = 4160;
LABEL_5:
    uint64_t result = 0;
    *(_DWORD *)&v4[v5] = a4;
    return result;
  }
  return 8;
}

void std::__function::__func<Phase::DspLayer::MatrixMixer1x2::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x2::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::MatrixMixer1x2::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x2::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D4788D0;
  return result;
}

void std::__function::__func<Phase::DspLayer::MatrixMixer1x2::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x2::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4788D0;
}

void std::__function::__func<Phase::DspLayer::MatrixMixer1x2::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x2::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_221FAD600(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

void Phase::DspLayer::MatrixMixer1x6::GetNewRegistryEntry(Phase::DspLayer::MatrixMixer1x6 *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)malloc_type_malloc(0x150uLL, 0x1050040B063AAFAuLL);
  *(void *)uint64_t v1 = "Gain 0";
  *((void *)v1 + 1) = 0x500000000;
  *(void *)(v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2220A4F90;
  *((void *)v1 + 6) = 0x3FF0000000000000;
  *((void *)v1 + 7) = "Gain 1";
  *((void *)v1 + 8) = 0x500000001;
  *(void *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2220A4F90;
  *((void *)v1 + 13) = 0;
  *((void *)v1 + 14) = "Gain 2";
  *((void *)v1 + 15) = 0x500000002;
  *(void *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  *((_OWORD *)v1 + 9) = xmmword_2220A4F90;
  *((void *)v1 + 20) = 0;
  *((void *)v1 + 21) = "Gain 3";
  *((void *)v1 + 22) = 0x500000003;
  *(void *)(v1 + 188) = 0x100000000;
  *((_DWORD *)v1 + 49) = 3;
  *(_OWORD *)(v1 + 200) = xmmword_2220A4F90;
  *((void *)v1 + 27) = 0;
  *((void *)v1 + 28) = "Gain 4";
  *((void *)v1 + 29) = 0x500000004;
  *(void *)(v1 + 244) = 0x100000000;
  *((_DWORD *)v1 + 63) = 3;
  *((_OWORD *)v1 + 16) = xmmword_2220A4F90;
  *((void *)v1 + 34) = 0;
  *((void *)v1 + 35) = "Gain 5";
  *((void *)v1 + 36) = 0x500000005;
  *((_DWORD *)v1 + 75) = 0;
  *((void *)v1 + 38) = 0x300000001;
  *((void *)v1 + 39) = 0;
  *((_OWORD *)v1 + 20) = xmmword_2220A4FA0;
  operator new();
}

void sub_221FAD928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::MatrixMixer1x6::~MatrixMixer1x6(Phase::DspLayer::MatrixMixer1x6 *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::MatrixMixer1x6Slice::~MatrixMixer1x6Slice(_anonymous_namespace_::MatrixMixer1x6Slice *this)
{
}

double anonymous namespace'::MatrixMixer1x6Slice::Reset(_OWORD *a1)
{
  __asm { FMOV            V0.4S, #1.0 }
  a1[1] = _Q0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[264] = 0u;
  a1[265] = 0u;
  a1[266] = 0u;
  a1[267] = 0u;
  a1[268] = 0u;
  a1[269] = 0u;
  (*(void (**)(_OWORD *))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  a1[540] = 0u;
  a1[539] = 0u;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x6Slice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 1065353216;
  v7[8] = 0;
  v7[12] = 0;
  v7[16] = 0;
  v7[20] = 0;
  v7[24] = 0;
  v7[28] = 0;
  v7[1056] = 0;
  v7[1060] = 0;
  v7[1064] = 0;
  v7[1068] = 0;
  v7[1072] = 0;
  v7[1076] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 8 * a3 + 8624) = a4;
  return result;
}

double anonymous namespace'::MatrixMixer1x6Slice::GetParameter(_anonymous_namespace_::MatrixMixer1x6Slice *this, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 16);
      goto LABEL_8;
    case 1:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 32);
      goto LABEL_8;
    case 2:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 48);
      goto LABEL_8;
    case 3:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 64);
      goto LABEL_8;
    case 4:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 80);
      goto LABEL_8;
    case 5:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 96);
LABEL_8:
      double result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

float anonymous namespace'::MatrixMixer1x6Slice::SetParameter(_anonymous_namespace_::MatrixMixer1x6Slice *this, int a2, int a3, double a4)
{
  switch(a2)
  {
    case 0:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 4) = LODWORD(a4);
      break;
    case 1:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 8) = LODWORD(a4);
      break;
    case 2:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 12) = LODWORD(a4);
      break;
    case 3:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 16) = LODWORD(a4);
      break;
    case 4:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 20) = LODWORD(a4);
      break;
    case 5:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 24) = LODWORD(a4);
      break;
    default:
      return *(float *)&a4;
  }
  return *(float *)&a4;
}

__n128 anonymous namespace'::MatrixMixer1x6Slice::UpdateParameters(__n128 *a1)
{
  __n128 v13 = a1[265];
  __n128 v14 = a1[264];
  __n128 v6 = a1[1];
  __n128 v11 = a1[266];
  __n128 v12 = a1[2];
  __n128 v10 = a1[267];
  __n128 v8 = a1[268];
  __n128 v9 = a1[4];
  __n128 v7 = a1[269];
  __n128 v3 = a1[5];
  __n128 v4 = a1[6];
  __n128 v5 = a1[3];
  memcpy(&a1[270], &a1[7], 0x1010uLL);
  a1[527] = v14;
  a1[528] = v6;
  a1[529] = v13;
  a1[530] = v12;
  a1[531] = v11;
  a1[532] = v5;
  a1[533] = v10;
  a1[534] = v9;
  a1[535] = v8;
  a1[536] = v3;
  a1[537] = v7;
  __n128 result = v4;
  a1[538] = v4;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x6Slice::UpdateParameters(uint64_t result, uint64_t a2, int a3)
{
  __n128 v3 = (_DWORD *)(result + 4 * a3);
  int v4 = v3[1056];
  int v5 = v3[4];
  int v6 = v3[1060];
  int v7 = v3[8];
  int v8 = v3[1064];
  int v9 = v3[12];
  int v10 = v3[1068];
  int v11 = v3[16];
  int v12 = v3[1072];
  int v13 = v3[20];
  int v14 = v3[1076];
  int v15 = v3[24];
  uint64_t v16 = v3[28];
  v3[1080] = v16;
  if ((int)v16 >= 1)
  {
    float32x4_t v17 = (_DWORD *)(result + 4 * a3);
    do
    {
      v17[1084] = v17[32];
      v17[1088] = v17[36];
      v17 += 8;
      --v16;
    }
    while (v16);
  }
  int8x16_t v18 = (_DWORD *)(result + 4 * a3);
  v18[2108] = v4;
  v18[2112] = v5;
  v18[2116] = v6;
  v18[2120] = v7;
  v18[2124] = v8;
  v18[2128] = v9;
  v18[2132] = v10;
  v18[2136] = v11;
  v18[2140] = v12;
  v18[2144] = v13;
  v18[2148] = v14;
  v18[2152] = v15;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x6Slice::Run(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int32x4_t v4 = (int32x4_t)vandq_s8(*(int8x16_t *)(result + 4320), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2220A5190));
  int64x2_t v5 = (int64x2_t)vcgtzq_s32(v4);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0])
  {
    uint64_t v6 = *(void *)(a2 + 56);
    int v7 = (float32x4_t *)(result + 4352);
    float32x4_t v8 = 0uLL;
    int32x4_t v9 = 0uLL;
    v10.i64[0] = 0x100000001;
    v10.i64[1] = 0x100000001;
    do
    {
      v11.i32[0] = *(_DWORD *)(v6 + 4 * v7[-1].i32[0]);
      v11.i32[1] = *(_DWORD *)(v6 + 4 * v7[-1].i32[1]);
      v11.i32[2] = *(_DWORD *)(v6 + 4 * v7[-1].i32[2]);
      v11.i32[3] = *(_DWORD *)(v6 + 4 * v7[-1].i32[3]);
      float32x4_t v8 = vmlaq_f32(v8, (float32x4_t)vandq_s8((int8x16_t)v5, v11), *v7);
      int32x4_t v9 = vaddq_s32(v9, v10);
      int64x2_t v5 = (int64x2_t)vcgtq_s32(v4, v9);
      v7 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0]);
  }
  else
  {
    float32x4_t v8 = 0uLL;
  }
  float32x4_t v12 = *(float32x4_t *)(result + 8480);
  float32x4_t v13 = *(float32x4_t *)(result + 8512);
  float32x4_t v14 = *(float32x4_t *)(result + 8544);
  float32x4_t v15 = *(float32x4_t *)(result + 8576);
  float32x4_t v16 = *(float32x4_t *)(result + 8608);
  HIDWORD(v18) = a4 - 1;
  LODWORD(v18) = a4 - 1;
  int v17 = v18 >> 1;
  float32x4_t v19 = vmulq_f32(*(float32x4_t *)(result + 8448), v8);
  int8x16_t v20 = vandq_s8((int8x16_t)v19, vorrq_s8((int8x16_t)vcltzq_f32(v19), (int8x16_t)vcgezq_f32(v19)));
  switch(v17)
  {
    case 0:
      goto LABEL_10;
    case 1:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8444)) = v20.i32[3];
LABEL_8:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8440)) = v20.i32[2];
LABEL_9:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8436)) = v20.i32[1];
LABEL_10:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8432)) = v20.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v21 = vmulq_f32(v12, v8);
  int8x16_t v22 = vandq_s8((int8x16_t)v21, vorrq_s8((int8x16_t)vcltzq_f32(v21), (int8x16_t)vcgezq_f32(v21)));
  switch(v17)
  {
    case 0:
      goto LABEL_15;
    case 1:
      goto LABEL_14;
    case 3:
      goto LABEL_13;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8476)) = v22.i32[3];
LABEL_13:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8472)) = v22.i32[2];
LABEL_14:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8468)) = v22.i32[1];
LABEL_15:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8464)) = v22.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v23 = vmulq_f32(v13, v8);
  int8x16_t v24 = vandq_s8((int8x16_t)v23, vorrq_s8((int8x16_t)vcltzq_f32(v23), (int8x16_t)vcgezq_f32(v23)));
  switch(v17)
  {
    case 0:
      goto LABEL_20;
    case 1:
      goto LABEL_19;
    case 3:
      goto LABEL_18;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8508)) = v24.i32[3];
LABEL_18:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8504)) = v24.i32[2];
LABEL_19:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8500)) = v24.i32[1];
LABEL_20:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8496)) = v24.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v25 = vmulq_f32(v14, v8);
  int8x16_t v26 = vandq_s8((int8x16_t)v25, vorrq_s8((int8x16_t)vcltzq_f32(v25), (int8x16_t)vcgezq_f32(v25)));
  switch(v17)
  {
    case 0:
      goto LABEL_25;
    case 1:
      goto LABEL_24;
    case 3:
      goto LABEL_23;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8540)) = v26.i32[3];
LABEL_23:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8536)) = v26.i32[2];
LABEL_24:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8532)) = v26.i32[1];
LABEL_25:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8528)) = v26.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v27 = vmulq_f32(v15, v8);
  int8x16_t v28 = vandq_s8((int8x16_t)v27, vorrq_s8((int8x16_t)vcltzq_f32(v27), (int8x16_t)vcgezq_f32(v27)));
  switch(v17)
  {
    case 0:
      goto LABEL_30;
    case 1:
      goto LABEL_29;
    case 3:
      goto LABEL_28;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8572)) = v28.i32[3];
LABEL_28:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8568)) = v28.i32[2];
LABEL_29:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8564)) = v28.i32[1];
LABEL_30:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8560)) = v28.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v29 = vmulq_f32(v16, v8);
  int8x16_t v30 = vandq_s8((int8x16_t)v29, vorrq_s8((int8x16_t)vcltzq_f32(v29), (int8x16_t)vcgezq_f32(v29)));
  switch(v17)
  {
    case 0:
      goto LABEL_35;
    case 1:
      goto LABEL_34;
    case 3:
      goto LABEL_33;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8604)) = v30.i32[3];
LABEL_33:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8600)) = v30.i32[2];
LABEL_34:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8596)) = v30.i32[1];
LABEL_35:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8592)) = v30.i32[0];
      break;
    default:
      return result;
  }
  return result;
}

float anonymous namespace'::MatrixMixer1x6Slice::CopyVoiceState(_anonymous_namespace_::MatrixMixer1x6Slice *this, Phase::DspLayer::VoicePoolSlice *a2, int a3, int a4)
{
  int32x4_t v4 = (_DWORD *)((char *)a2 + 4 * a3);
  int64x2_t v5 = (_DWORD *)((char *)this + 4 * a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  v5[20] = v4[20];
  v5[24] = v4[24];
  uint64_t v6 = v4[28];
  v5[28] = v6;
  if ((int)v6 >= 1)
  {
    int v7 = (_DWORD *)((char *)this + 4 * a4 + 144);
    float32x4_t v8 = (int *)((char *)a2 + 4 * a3 + 144);
    do
    {
      *(v7 - 4) = *(v8 - 4);
      int v9 = *v8;
      v8 += 8;
      *int v7 = v9;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  int32x4_t v10 = (char *)this + 4 * a4;
  int8x16_t v11 = (char *)a2 + 4 * a3;
  uint64_t v12 = *((unsigned int *)v11 + 1080);
  *((_DWORD *)v10 + 1080) = v12;
  if ((int)v12 >= 1)
  {
    float32x4_t v13 = v10 + 4352;
    float32x4_t v14 = (int *)(v11 + 4352);
    do
    {
      *(v13 - 4) = *(v14 - 4);
      int v15 = *v14;
      v14 += 8;
      *float32x4_t v13 = v15;
      v13 += 8;
      --v12;
    }
    while (v12);
  }
  *((_DWORD *)v10 + 1056) = *((_DWORD *)v11 + 1056);
  *((_DWORD *)v10 + 1060) = *((_DWORD *)v11 + 1060);
  *((_DWORD *)v10 + 1064) = *((_DWORD *)v11 + 1064);
  *((_DWORD *)v10 + 1068) = *((_DWORD *)v11 + 1068);
  *((_DWORD *)v10 + 1072) = *((_DWORD *)v11 + 1072);
  *((_DWORD *)v10 + 1076) = *((_DWORD *)v11 + 1076);
  *((_DWORD *)v10 + 2108) = *((_DWORD *)v11 + 2108);
  *((_DWORD *)v10 + 2112) = *((_DWORD *)v11 + 2112);
  *((_DWORD *)v10 + 2116) = *((_DWORD *)v11 + 2116);
  *((_DWORD *)v10 + 2120) = *((_DWORD *)v11 + 2120);
  *((_DWORD *)v10 + 2124) = *((_DWORD *)v11 + 2124);
  *((_DWORD *)v10 + 2128) = *((_DWORD *)v11 + 2128);
  *((_DWORD *)v10 + 2132) = *((_DWORD *)v11 + 2132);
  *((_DWORD *)v10 + 2136) = *((_DWORD *)v11 + 2136);
  *((_DWORD *)v10 + 2140) = *((_DWORD *)v11 + 2140);
  *((_DWORD *)v10 + 2144) = *((_DWORD *)v11 + 2144);
  *((_DWORD *)v10 + 2148) = *((_DWORD *)v11 + 2148);
  float result = *((float *)v11 + 2152);
  *((float *)v10 + 2152) = result;
  *((void *)this + a4 + 1078) = *((void *)a2 + a3 + 1078);
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x6Slice::AddInput(_anonymous_namespace_::MatrixMixer1x6Slice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  int v7 = (char *)this + 112;
  uint64_t v8 = *((int *)this + a3 + 28);
  if ((int)v8 > 127) {
    return 6;
  }
  uint64_t result = 0;
  int v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 32) = a4;
  *((float *)v9 + 36) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x6Slice::RemoveInput(_anonymous_namespace_::MatrixMixer1x6Slice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  else {
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 112, a3, a4);
  }
}

uint64_t anonymous namespace'::MatrixMixer1x6Slice::SetInputGain(_anonymous_namespace_::MatrixMixer1x6Slice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v6 = *((unsigned int *)this + a3 + 28);
  if ((int)v6 < 1) {
    return 7;
  }
  uint64_t v7 = 0;
  for (uint64_t i = (float *)((char *)this + 4 * a3 + 144); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7) {
      return 7;
    }
  }
  if ((v7 & 0x80000000) != 0) {
    return 7;
  }
  uint64_t result = 0;
  float *i = a5;
  return result;
}

void anonymous namespace'::MatrixMixer1x6Slice::GetInputs(_anonymous_namespace_::MatrixMixer1x6Slice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 112, a3, (char **)a4);
  }
}

uint64_t anonymous namespace'::MatrixMixer1x6Slice::ClearInputs(_anonymous_namespace_::MatrixMixer1x6Slice *this, int a2)
{
  *((_DWORD *)this + a2 + 28) = 0;
  return 0;
}

uint64_t anonymous namespace'::MatrixMixer1x6Slice::GetMaximumInputConnectionCount(_anonymous_namespace_::MatrixMixer1x6Slice *this, int a2)
{
  return (a2 == 0) << 7;
}

unint64_t anonymous namespace'::MatrixMixer1x6Slice::GetOutput(_anonymous_namespace_::MatrixMixer1x6Slice *this, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4224;
      goto LABEL_9;
    case 1:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4240;
      goto LABEL_9;
    case 2:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4256;
      goto LABEL_9;
    case 3:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4272;
      goto LABEL_9;
    case 4:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4288;
      goto LABEL_9;
    case 5:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4304;
LABEL_9:
      unint64_t result = (unint64_t)*(unsigned int *)&v3[v4] << 32;
      break;
    default:
      unint64_t result = 0xFFFFFFFF00000008;
      break;
  }
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x6Slice::SetOutput(_anonymous_namespace_::MatrixMixer1x6Slice *this, int a2, int a3, int a4)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4224;
      goto LABEL_9;
    case 1:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4240;
      goto LABEL_9;
    case 2:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4256;
      goto LABEL_9;
    case 3:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4272;
      goto LABEL_9;
    case 4:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4288;
      goto LABEL_9;
    case 5:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4304;
LABEL_9:
      uint64_t result = 0;
      *(_DWORD *)&v4[v5] = a4;
      break;
    default:
      uint64_t result = 8;
      break;
  }
  return result;
}

void std::__function::__func<Phase::DspLayer::MatrixMixer1x6::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x6::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::MatrixMixer1x6::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x6::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D478A10;
  return result;
}

void std::__function::__func<Phase::DspLayer::MatrixMixer1x6::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x6::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D478A10;
}

void std::__function::__func<Phase::DspLayer::MatrixMixer1x6::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x6::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_221FAE834(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

void Phase::DspLayer::MatrixMixer1x8::GetNewRegistryEntry(Phase::DspLayer::MatrixMixer1x8 *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v1 = (char *)malloc_type_malloc(0x1C0uLL, 0x1050040B063AAFAuLL);
  *(void *)uint64_t v1 = "Gain 0";
  *((void *)v1 + 1) = 0x500000000;
  *(void *)(v1 + 20) = 0x100000000;
  *((_DWORD *)v1 + 7) = 3;
  *((_OWORD *)v1 + 2) = xmmword_2220A4F90;
  *((void *)v1 + 6) = 0x3FF0000000000000;
  *((void *)v1 + 7) = "Gain 1";
  *((void *)v1 + 8) = 0x500000001;
  *(void *)(v1 + 76) = 0x100000000;
  *((_DWORD *)v1 + 21) = 3;
  *(_OWORD *)(v1 + 88) = xmmword_2220A4F90;
  *((void *)v1 + 13) = 0;
  *((void *)v1 + 14) = "Gain 2";
  *((void *)v1 + 15) = 0x500000002;
  *(void *)(v1 + 132) = 0x100000000;
  *((_DWORD *)v1 + 35) = 3;
  *((_OWORD *)v1 + 9) = xmmword_2220A4F90;
  *((void *)v1 + 20) = 0;
  *((void *)v1 + 21) = "Gain 3";
  *((void *)v1 + 22) = 0x500000003;
  *(void *)(v1 + 188) = 0x100000000;
  *((_DWORD *)v1 + 49) = 3;
  *(_OWORD *)(v1 + 200) = xmmword_2220A4F90;
  *((void *)v1 + 27) = 0;
  *((void *)v1 + 28) = "Gain 4";
  *((void *)v1 + 29) = 0x500000004;
  *(void *)(v1 + 244) = 0x100000000;
  *((_DWORD *)v1 + 63) = 3;
  *((_OWORD *)v1 + 16) = xmmword_2220A4F90;
  *((void *)v1 + 34) = 0;
  *((void *)v1 + 35) = "Gain 5";
  *((void *)v1 + 36) = 0x500000005;
  *((_DWORD *)v1 + 75) = 0;
  *((void *)v1 + 38) = 0x300000001;
  *((void *)v1 + 39) = 0;
  *((_OWORD *)v1 + 20) = xmmword_2220A4FA0;
  *((void *)v1 + 42) = "Gain 6";
  *((void *)v1 + 43) = 0x500000006;
  *((_DWORD *)v1 + 89) = 0;
  *((void *)v1 + 45) = 0x300000001;
  *((_OWORD *)v1 + 23) = xmmword_2220A4F90;
  *((void *)v1 + 48) = 0;
  *((void *)v1 + 49) = "Gain 7";
  *((void *)v1 + 50) = 0x500000007;
  *((_DWORD *)v1 + 103) = 0;
  *((void *)v1 + 52) = 0x300000001;
  *((void *)v1 + 53) = 0;
  *((_OWORD *)v1 + 27) = xmmword_2220A4FA0;
  operator new();
}

void sub_221FAEC08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::MatrixMixer1x8::~MatrixMixer1x8(Phase::DspLayer::MatrixMixer1x8 *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::MatrixMixer1x8Slice::~MatrixMixer1x8Slice(_anonymous_namespace_::MatrixMixer1x8Slice *this)
{
}

double anonymous namespace'::MatrixMixer1x8Slice::Reset(_OWORD *a1)
{
  __asm { FMOV            V0.4S, #1.0 }
  a1[1] = _Q0;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[266] = 0u;
  a1[267] = 0u;
  a1[268] = 0u;
  a1[269] = 0u;
  a1[270] = 0u;
  a1[271] = 0u;
  a1[272] = 0u;
  a1[273] = 0u;
  (*(void (**)(_OWORD *))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  a1[548] = 0u;
  a1[547] = 0u;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x8Slice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = (_DWORD *)(a1 + 4 * a3);
  v7[4] = 1065353216;
  v7[8] = 0;
  v7[12] = 0;
  v7[16] = 0;
  v7[20] = 0;
  v7[24] = 0;
  v7[28] = 0;
  v7[32] = 0;
  v7[36] = 0;
  v7[1064] = 0;
  v7[1068] = 0;
  v7[1072] = 0;
  v7[1076] = 0;
  v7[1080] = 0;
  v7[1084] = 0;
  v7[1088] = 0;
  v7[1092] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 8 * a3 + 8752) = a4;
  return result;
}

double anonymous namespace'::MatrixMixer1x8Slice::GetParameter(_anonymous_namespace_::MatrixMixer1x8Slice *this, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 16);
      goto LABEL_10;
    case 1:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 32);
      goto LABEL_10;
    case 2:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 48);
      goto LABEL_10;
    case 3:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 64);
      goto LABEL_10;
    case 4:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 80);
      goto LABEL_10;
    case 5:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 96);
      goto LABEL_10;
    case 6:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 112);
      goto LABEL_10;
    case 7:
      __n128 v3 = (float *)((char *)this + 4 * a3 + 128);
LABEL_10:
      double result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

float anonymous namespace'::MatrixMixer1x8Slice::SetParameter(_anonymous_namespace_::MatrixMixer1x8Slice *this, int a2, int a3, double a4)
{
  switch(a2)
  {
    case 0:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 4) = LODWORD(a4);
      break;
    case 1:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 8) = LODWORD(a4);
      break;
    case 2:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 12) = LODWORD(a4);
      break;
    case 3:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 16) = LODWORD(a4);
      break;
    case 4:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 20) = LODWORD(a4);
      break;
    case 5:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 24) = LODWORD(a4);
      break;
    case 6:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 28) = LODWORD(a4);
      break;
    case 7:
      *(float *)&a4 = a4;
      *((_DWORD *)this + a3 + 32) = LODWORD(a4);
      break;
    default:
      return *(float *)&a4;
  }
  return *(float *)&a4;
}

__n128 anonymous namespace'::MatrixMixer1x8Slice::UpdateParameters(__n128 *a1)
{
  __n128 v17 = a1[267];
  __n128 v18 = a1[266];
  __n128 v7 = a1[1];
  __n128 v15 = a1[268];
  __n128 v16 = a1[2];
  __n128 v14 = a1[269];
  __n128 v6 = a1[3];
  __n128 v12 = a1[270];
  __n128 v13 = a1[4];
  __n128 v10 = a1[6];
  __n128 v11 = a1[271];
  __n128 v8 = a1[273];
  __n128 v9 = a1[272];
  __n128 v3 = a1[7];
  __n128 v4 = a1[8];
  __n128 v5 = a1[5];
  memcpy(&a1[274], &a1[9], 0x1010uLL);
  a1[531] = v18;
  a1[532] = v7;
  a1[533] = v17;
  a1[534] = v16;
  a1[535] = v15;
  a1[536] = v6;
  a1[537] = v14;
  a1[538] = v13;
  a1[539] = v12;
  a1[540] = v5;
  a1[541] = v11;
  a1[542] = v10;
  a1[543] = v9;
  a1[544] = v3;
  a1[545] = v8;
  __n128 result = v4;
  a1[546] = v4;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x8Slice::UpdateParameters(uint64_t result, uint64_t a2, int a3)
{
  __n128 v3 = (_DWORD *)(result + 4 * a3);
  int v4 = v3[1064];
  int v5 = v3[4];
  int v6 = v3[1068];
  int v7 = v3[8];
  int v8 = v3[1072];
  int v9 = v3[12];
  int v10 = v3[1076];
  int v11 = v3[16];
  int v12 = v3[1080];
  int v13 = v3[20];
  int v14 = v3[1084];
  int v15 = v3[24];
  int v16 = v3[1088];
  int v17 = v3[28];
  int v18 = v3[1092];
  int v19 = v3[32];
  uint64_t v20 = v3[36];
  v3[1096] = v20;
  if ((int)v20 >= 1)
  {
    float32x4_t v21 = (_DWORD *)(result + 4 * a3);
    do
    {
      v21[1100] = v21[40];
      v21[1104] = v21[44];
      v21 += 8;
      --v20;
    }
    while (v20);
  }
  int8x16_t v22 = (_DWORD *)(result + 4 * a3);
  v22[2124] = v4;
  v22[2128] = v5;
  v22[2132] = v6;
  v22[2136] = v7;
  v22[2140] = v8;
  v22[2144] = v9;
  v22[2148] = v10;
  v22[2152] = v11;
  v22[2156] = v12;
  v22[2160] = v13;
  v22[2164] = v14;
  v22[2168] = v15;
  v22[2172] = v16;
  v22[2176] = v17;
  v22[2180] = v18;
  v22[2184] = v19;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x8Slice::Run(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int32x4_t v4 = (int32x4_t)vandq_s8(*(int8x16_t *)(result + 4384), (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2220A5190));
  int64x2_t v5 = (int64x2_t)vcgtzq_s32(v4);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0])
  {
    uint64_t v6 = *(void *)(a2 + 56);
    int v7 = (float32x4_t *)(result + 4416);
    float32x4_t v8 = 0uLL;
    int32x4_t v9 = 0uLL;
    v10.i64[0] = 0x100000001;
    v10.i64[1] = 0x100000001;
    do
    {
      v11.i32[0] = *(_DWORD *)(v6 + 4 * v7[-1].i32[0]);
      v11.i32[1] = *(_DWORD *)(v6 + 4 * v7[-1].i32[1]);
      v11.i32[2] = *(_DWORD *)(v6 + 4 * v7[-1].i32[2]);
      v11.i32[3] = *(_DWORD *)(v6 + 4 * v7[-1].i32[3]);
      float32x4_t v8 = vmlaq_f32(v8, (float32x4_t)vandq_s8((int8x16_t)v5, v11), *v7);
      int32x4_t v9 = vaddq_s32(v9, v10);
      int64x2_t v5 = (int64x2_t)vcgtq_s32(v4, v9);
      v7 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0]);
  }
  else
  {
    float32x4_t v8 = 0uLL;
  }
  float32x4_t v12 = *(float32x4_t *)(result + 8544);
  float32x4_t v13 = *(float32x4_t *)(result + 8576);
  float32x4_t v14 = *(float32x4_t *)(result + 8608);
  float32x4_t v15 = *(float32x4_t *)(result + 8640);
  float32x4_t v16 = *(float32x4_t *)(result + 8672);
  float32x4_t v17 = *(float32x4_t *)(result + 8704);
  float32x4_t v18 = *(float32x4_t *)(result + 8736);
  HIDWORD(v20) = a4 - 1;
  LODWORD(v20) = a4 - 1;
  int v19 = v20 >> 1;
  float32x4_t v21 = vmulq_f32(*(float32x4_t *)(result + 8512), v8);
  int8x16_t v22 = vandq_s8((int8x16_t)v21, vorrq_s8((int8x16_t)vcltzq_f32(v21), (int8x16_t)vcgezq_f32(v21)));
  switch(v19)
  {
    case 0:
      goto LABEL_10;
    case 1:
      goto LABEL_9;
    case 3:
      goto LABEL_8;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8508)) = v22.i32[3];
LABEL_8:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8504)) = v22.i32[2];
LABEL_9:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8500)) = v22.i32[1];
LABEL_10:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8496)) = v22.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v23 = vmulq_f32(v12, v8);
  int8x16_t v24 = vandq_s8((int8x16_t)v23, vorrq_s8((int8x16_t)vcltzq_f32(v23), (int8x16_t)vcgezq_f32(v23)));
  switch(v19)
  {
    case 0:
      goto LABEL_15;
    case 1:
      goto LABEL_14;
    case 3:
      goto LABEL_13;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8540)) = v24.i32[3];
LABEL_13:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8536)) = v24.i32[2];
LABEL_14:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8532)) = v24.i32[1];
LABEL_15:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8528)) = v24.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v25 = vmulq_f32(v13, v8);
  int8x16_t v26 = vandq_s8((int8x16_t)v25, vorrq_s8((int8x16_t)vcltzq_f32(v25), (int8x16_t)vcgezq_f32(v25)));
  switch(v19)
  {
    case 0:
      goto LABEL_20;
    case 1:
      goto LABEL_19;
    case 3:
      goto LABEL_18;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8572)) = v26.i32[3];
LABEL_18:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8568)) = v26.i32[2];
LABEL_19:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8564)) = v26.i32[1];
LABEL_20:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8560)) = v26.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v27 = vmulq_f32(v14, v8);
  int8x16_t v28 = vandq_s8((int8x16_t)v27, vorrq_s8((int8x16_t)vcltzq_f32(v27), (int8x16_t)vcgezq_f32(v27)));
  switch(v19)
  {
    case 0:
      goto LABEL_25;
    case 1:
      goto LABEL_24;
    case 3:
      goto LABEL_23;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8604)) = v28.i32[3];
LABEL_23:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8600)) = v28.i32[2];
LABEL_24:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8596)) = v28.i32[1];
LABEL_25:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8592)) = v28.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v29 = vmulq_f32(v15, v8);
  int8x16_t v30 = vandq_s8((int8x16_t)v29, vorrq_s8((int8x16_t)vcltzq_f32(v29), (int8x16_t)vcgezq_f32(v29)));
  switch(v19)
  {
    case 0:
      goto LABEL_30;
    case 1:
      goto LABEL_29;
    case 3:
      goto LABEL_28;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8636)) = v30.i32[3];
LABEL_28:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8632)) = v30.i32[2];
LABEL_29:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8628)) = v30.i32[1];
LABEL_30:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8624)) = v30.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v31 = vmulq_f32(v16, v8);
  int8x16_t v32 = vandq_s8((int8x16_t)v31, vorrq_s8((int8x16_t)vcltzq_f32(v31), (int8x16_t)vcgezq_f32(v31)));
  switch(v19)
  {
    case 0:
      goto LABEL_35;
    case 1:
      goto LABEL_34;
    case 3:
      goto LABEL_33;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8668)) = v32.i32[3];
LABEL_33:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8664)) = v32.i32[2];
LABEL_34:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8660)) = v32.i32[1];
LABEL_35:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8656)) = v32.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v33 = vmulq_f32(v17, v8);
  int8x16_t v34 = vandq_s8((int8x16_t)v33, vorrq_s8((int8x16_t)vcltzq_f32(v33), (int8x16_t)vcgezq_f32(v33)));
  switch(v19)
  {
    case 0:
      goto LABEL_40;
    case 1:
      goto LABEL_39;
    case 3:
      goto LABEL_38;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8700)) = v34.i32[3];
LABEL_38:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8696)) = v34.i32[2];
LABEL_39:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8692)) = v34.i32[1];
LABEL_40:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8688)) = v34.i32[0];
      break;
    default:
      break;
  }
  float32x4_t v35 = vmulq_f32(v18, v8);
  int8x16_t v36 = vandq_s8((int8x16_t)v35, vorrq_s8((int8x16_t)vcltzq_f32(v35), (int8x16_t)vcgezq_f32(v35)));
  switch(v19)
  {
    case 0:
      goto LABEL_45;
    case 1:
      goto LABEL_44;
    case 3:
      goto LABEL_43;
    case 7:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8732)) = v36.i32[3];
LABEL_43:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8728)) = v36.i32[2];
LABEL_44:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8724)) = v36.i32[1];
LABEL_45:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * *(int *)(result + 8720)) = v36.i32[0];
      break;
    default:
      return result;
  }
  return result;
}

float anonymous namespace'::MatrixMixer1x8Slice::CopyVoiceState(_anonymous_namespace_::MatrixMixer1x8Slice *this, Phase::DspLayer::VoicePoolSlice *a2, int a3, int a4)
{
  int32x4_t v4 = (_DWORD *)((char *)a2 + 4 * a3);
  int64x2_t v5 = (_DWORD *)((char *)this + 4 * a4);
  v5[4] = v4[4];
  v5[8] = v4[8];
  v5[12] = v4[12];
  v5[16] = v4[16];
  v5[20] = v4[20];
  v5[24] = v4[24];
  v5[28] = v4[28];
  v5[32] = v4[32];
  uint64_t v6 = v4[36];
  v5[36] = v6;
  if ((int)v6 >= 1)
  {
    int v7 = (_DWORD *)((char *)this + 4 * a4 + 176);
    float32x4_t v8 = (int *)((char *)a2 + 4 * a3 + 176);
    do
    {
      *(v7 - 4) = *(v8 - 4);
      int v9 = *v8;
      v8 += 8;
      *int v7 = v9;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  int32x4_t v10 = (char *)this + 4 * a4;
  int8x16_t v11 = (char *)a2 + 4 * a3;
  uint64_t v12 = *((unsigned int *)v11 + 1096);
  *((_DWORD *)v10 + 1096) = v12;
  if ((int)v12 >= 1)
  {
    float32x4_t v13 = v10 + 4416;
    float32x4_t v14 = (int *)(v11 + 4416);
    do
    {
      *(v13 - 4) = *(v14 - 4);
      int v15 = *v14;
      v14 += 8;
      *float32x4_t v13 = v15;
      v13 += 8;
      --v12;
    }
    while (v12);
  }
  *((_DWORD *)v10 + 1064) = *((_DWORD *)v11 + 1064);
  *((_DWORD *)v10 + 1068) = *((_DWORD *)v11 + 1068);
  *((_DWORD *)v10 + 1072) = *((_DWORD *)v11 + 1072);
  *((_DWORD *)v10 + 1076) = *((_DWORD *)v11 + 1076);
  *((_DWORD *)v10 + 1080) = *((_DWORD *)v11 + 1080);
  *((_DWORD *)v10 + 1084) = *((_DWORD *)v11 + 1084);
  *((_DWORD *)v10 + 1088) = *((_DWORD *)v11 + 1088);
  *((_DWORD *)v10 + 1092) = *((_DWORD *)v11 + 1092);
  *((_DWORD *)v10 + 2124) = *((_DWORD *)v11 + 2124);
  *((_DWORD *)v10 + 2128) = *((_DWORD *)v11 + 2128);
  *((_DWORD *)v10 + 2132) = *((_DWORD *)v11 + 2132);
  *((_DWORD *)v10 + 2136) = *((_DWORD *)v11 + 2136);
  *((_DWORD *)v10 + 2140) = *((_DWORD *)v11 + 2140);
  *((_DWORD *)v10 + 2144) = *((_DWORD *)v11 + 2144);
  *((_DWORD *)v10 + 2148) = *((_DWORD *)v11 + 2148);
  *((_DWORD *)v10 + 2152) = *((_DWORD *)v11 + 2152);
  *((_DWORD *)v10 + 2156) = *((_DWORD *)v11 + 2156);
  *((_DWORD *)v10 + 2160) = *((_DWORD *)v11 + 2160);
  *((_DWORD *)v10 + 2164) = *((_DWORD *)v11 + 2164);
  *((_DWORD *)v10 + 2168) = *((_DWORD *)v11 + 2168);
  *((_DWORD *)v10 + 2172) = *((_DWORD *)v11 + 2172);
  *((_DWORD *)v10 + 2176) = *((_DWORD *)v11 + 2176);
  *((_DWORD *)v10 + 2180) = *((_DWORD *)v11 + 2180);
  float result = *((float *)v11 + 2184);
  *((float *)v10 + 2184) = result;
  *((void *)this + a4 + 1094) = *((void *)a2 + a3 + 1094);
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x8Slice::AddInput(_anonymous_namespace_::MatrixMixer1x8Slice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  int v7 = (char *)this + 144;
  uint64_t v8 = *((int *)this + a3 + 36);
  if ((int)v8 > 127) {
    return 6;
  }
  uint64_t result = 0;
  int v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 40) = a4;
  *((float *)v9 + 44) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x8Slice::RemoveInput(_anonymous_namespace_::MatrixMixer1x8Slice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  else {
    return Phase::DspLayer::VoiceConnectionList<128>::RemoveConnection((uint64_t)this + 144, a3, a4);
  }
}

uint64_t anonymous namespace'::MatrixMixer1x8Slice::SetInputGain(_anonymous_namespace_::MatrixMixer1x8Slice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v6 = *((unsigned int *)this + a3 + 36);
  if ((int)v6 < 1) {
    return 7;
  }
  uint64_t v7 = 0;
  for (uint64_t i = (float *)((char *)this + 4 * a3 + 176); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7) {
      return 7;
    }
  }
  if ((v7 & 0x80000000) != 0) {
    return 7;
  }
  uint64_t result = 0;
  float *i = a5;
  return result;
}

void anonymous namespace'::MatrixMixer1x8Slice::GetInputs(_anonymous_namespace_::MatrixMixer1x8Slice *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a2)
  {
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    Phase::DspLayer::VoiceConnectionList<128>::GetConnections((uint64_t)this + 144, a3, (char **)a4);
  }
}

uint64_t anonymous namespace'::MatrixMixer1x8Slice::ClearInputs(_anonymous_namespace_::MatrixMixer1x8Slice *this, int a2)
{
  *((_DWORD *)this + a2 + 36) = 0;
  return 0;
}

uint64_t anonymous namespace'::MatrixMixer1x8Slice::GetMaximumInputConnectionCount(_anonymous_namespace_::MatrixMixer1x8Slice *this, int a2)
{
  return (a2 == 0) << 7;
}

unint64_t anonymous namespace'::MatrixMixer1x8Slice::GetOutput(_anonymous_namespace_::MatrixMixer1x8Slice *this, int a2, int a3)
{
  switch(a2)
  {
    case 0:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4256;
      goto LABEL_11;
    case 1:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4272;
      goto LABEL_11;
    case 2:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4288;
      goto LABEL_11;
    case 3:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4304;
      goto LABEL_11;
    case 4:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4320;
      goto LABEL_11;
    case 5:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4336;
      goto LABEL_11;
    case 6:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4352;
      goto LABEL_11;
    case 7:
      __n128 v3 = (char *)this + 4 * a3;
      uint64_t v4 = 4368;
LABEL_11:
      unint64_t result = (unint64_t)*(unsigned int *)&v3[v4] << 32;
      break;
    default:
      unint64_t result = 0xFFFFFFFF00000008;
      break;
  }
  return result;
}

uint64_t anonymous namespace'::MatrixMixer1x8Slice::SetOutput(_anonymous_namespace_::MatrixMixer1x8Slice *this, int a2, int a3, int a4)
{
  switch(a2)
  {
    case 0:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4256;
      goto LABEL_11;
    case 1:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4272;
      goto LABEL_11;
    case 2:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4288;
      goto LABEL_11;
    case 3:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4304;
      goto LABEL_11;
    case 4:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4320;
      goto LABEL_11;
    case 5:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4336;
      goto LABEL_11;
    case 6:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4352;
      goto LABEL_11;
    case 7:
      uint64_t v4 = (char *)this + 4 * a3;
      uint64_t v5 = 4368;
LABEL_11:
      uint64_t result = 0;
      *(_DWORD *)&v4[v5] = a4;
      break;
    default:
      uint64_t result = 8;
      break;
  }
  return result;
}

void std::__function::__func<Phase::DspLayer::MatrixMixer1x8::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x8::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::MatrixMixer1x8::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x8::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D478B50;
  return result;
}

void std::__function::__func<Phase::DspLayer::MatrixMixer1x8::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x8::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D478B50;
}

void std::__function::__func<Phase::DspLayer::MatrixMixer1x8::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::MatrixMixer1x8::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_221FAFD98(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

void Phase::sGetStdStringFromNsString(Phase *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = this;
  std::string::basic_string[abi:ne180100](a2, (void *)[(Phase *)v4 UTF8String], [(Phase *)v4 lengthOfBytesUsingEncoding:4]);
}

void sub_221FAFE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Phase::MdlMeshAsset::Initialize(Phase::MdlMeshAsset *this, void *a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  __n128 v3 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  id v24 = v4;

  if (!v24)
  {
    int8x16_t v22 = **(id **)Phase::Logger::GetInstance(0);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int8x16_t v26 = "MdlMeshAsset.mm";
      __int16 v27 = 1024;
      int v28 = 161;
      _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [inMesh == nil is true]: \"Input pointer is not an MDLMesh instance!\"", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Input pointer is not an MDLMesh instance!");
  }
  uint64_t v5 = (void *)MEMORY[0x263EFF980];
  uint64_t v6 = [v24 submeshes];
  uint64_t v7 = objc_msgSend(v5, "arrayWithCapacity:", objc_msgSend(v6, "count"));

  for (unint64_t i = 0; ; ++i)
  {
    int v9 = [v24 submeshes];
    unint64_t v10 = [v9 count];

    if (i >= v10) {
      break;
    }
    int8x16_t v11 = [v24 submeshes];
    uint64_t v12 = [v11 objectAtIndexedSubscript:i];

    float32x4_t v13 = objc_msgSend(objc_alloc(MEMORY[0x263F13668]), "initWithMDLSubmesh:indexType:geometryType:", v12, objc_msgSend(v12, "indexType"), objc_msgSend(v12, "geometryType"));
    [v7 setObject:v13 atIndexedSubscript:i];
  }
  id v14 = objc_alloc(MEMORY[0x263F13618]);
  int v15 = [v24 vertexBuffers];
  uint64_t v16 = [v24 vertexCount];
  float32x4_t v17 = [v24 vertexDescriptor];
  uint64_t v18 = [v14 initWithVertexBuffers:v15 vertexCount:v16 descriptor:v17 submeshes:v7];
  int v19 = (void **)*((void *)this + 1);
  unint64_t v20 = *v19;
  void *v19 = (void *)v18;

  float32x4_t v21 = [v24 transform];
  [**((id **)this + 1) setTransform:v21];
}

void sub_221FB0110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Phase::MdlMeshAsset::MdlMeshAsset(Phase::MdlMeshAsset *this, const Phase::MdlMeshAsset *a2)
{
  *(_DWORD *)this = 1;
  operator new();
}

void sub_221FB022C(_Unwind_Exception *a1)
{
  std::unique_ptr<Phase::details::MdlMeshAssetImplementation>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t Phase::MdlMeshAsset::GetName(id **this)
{
  uint64_t v1 = [*this[1] name];
  uint64_t v2 = v1;
  if (v1) {
    uint64_t v3 = [v1 UTF8String];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_221FB02A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::MdlMeshAsset::SetVertexDescriptor(uint64_t a1, uint64_t *a2)
{
  id v27 = objc_alloc_init(MEMORY[0x263F136A8]);
  uint64_t v3 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v4 = 0;
    uint64_t v5 = 32;
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      uint64_t v11 = v3 + v5;
      switch(*(unsigned char *)(v3 + v5 - 8))
      {
        case '-':
          *(void *)&long long v26 = *(unsigned int *)(v3 + v5 + 24);
          uint64_t v12 = 786433;
          break;
        case '.':
          *(void *)&long long v26 = *(void *)(v3 + v5 + 24);
          uint64_t v12 = 786434;
          break;
        case '/':
          *(void *)&long long v26 = *(void *)(v3 + v5 + 24);
          uint64_t v12 = 786435;
          break;
        case '0':
          long long v26 = *(_OWORD *)(v3 + v5 + 24);
          uint64_t v12 = 786436;
          break;
        default:
          uint64_t v12 = 0;
          *(void *)&long long v26 = 0;
          break;
      }
      id v13 = objc_alloc(MEMORY[0x263F13698]);
      id v14 = [NSString alloc];
      int v15 = *(char *)(v3 + v5 - 9);
      if (v15 >= 0) {
        uint64_t v16 = v11 - 32;
      }
      else {
        uint64_t v16 = *(void *)(v11 - 32);
      }
      if (v15 >= 0) {
        uint64_t v17 = *(unsigned __int8 *)(v3 + v5 - 9);
      }
      else {
        uint64_t v17 = *(void *)(v3 + v5 - 24);
      }
      uint64_t v18 = (void *)[v14 initWithBytes:v16 length:v17 encoding:1];
      int v19 = (void *)[v13 initWithName:v18 format:v12 offset:*(void *)(v3 + v5) bufferIndex:*(void *)(v3 + v5 + 8)];

      [v19 setTime:*(double *)(v3 + v5 + 16)];
      [v19 setInitializationValue:*(double *)&v26];
      [v27 addOrReplaceAttribute:v19];

      ++v4;
      uint64_t v3 = *a2;
      v5 += 72;
    }
    while (0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3) > v4);
  }
  uint64_t v20 = a2[3];
  if (a2[4] != v20)
  {
    unint64_t v21 = 0;
    do
    {
      uint64_t v22 = *(void *)(v20 + 8 * v21);
      float32x4_t v23 = [v27 layouts];
      id v24 = [v23 objectAtIndexedSubscript:v21];
      [v24 setStride:v22];

      ++v21;
      uint64_t v20 = a2[3];
    }
    while (v21 < (a2[4] - v20) >> 3);
  }
  [**(id **)(a1 + 8) setVertexDescriptor:v27];
}

void sub_221FB0560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::MdlMeshAsset::GetVertexBuffer(id **this, uint64_t a2)
{
  uint64_t v3 = [*this[1] vertexBuffers];
  unint64_t v4 = [v3 objectAtIndexedSubscript:a2];
  uint64_t v5 = [v4 map];
  uint64_t v6 = [v5 bytes];

  return v6;
}

void sub_221FB062C(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

uint64_t Phase::MdlMeshAsset::GetSubmeshCount(id **this)
{
  uint64_t v1 = [*this[1] submeshes];
  uint64_t v2 = [v1 count];

  return v2;
}

void sub_221FB0698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *Phase::MdlMeshAsset::GetSubmesh(id **this, uint64_t a2)
{
  uint64_t v3 = [*this[1] submeshes];
  unint64_t v4 = [v3 objectAtIndexedSubscript:a2];

  return v4;
}

void sub_221FB06F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::MdlMeshAsset::SetTopology(uint64_t a1, int a2)
{
  unint64_t v3 = 0;
  if ((a2 - 1) < 5) {
    uint64_t v4 = (a2 - 1) + 1;
  }
  else {
    uint64_t v4 = 0;
  }
  while (1)
  {
    uint64_t v5 = [**(id **)(a1 + 8) submeshes];
    unint64_t v6 = [v5 count];

    if (v3 >= v6) {
      break;
    }
    uint64_t v7 = [**(id **)(a1 + 8) submeshes];
    uint64_t v8 = [v7 objectAtIndexedSubscript:v3];

    if ([v8 geometryType] != v4)
    {
      uint64_t v9 = [v8 indexType];
      unint64_t v10 = (void *)[objc_alloc(MEMORY[0x263F13668]) initWithMDLSubmesh:v8 indexType:v9 geometryType:v4];
      uint64_t v11 = [**(id **)(a1 + 8) submeshes];
      [v11 setObject:v10 atIndexedSubscript:v3];
    }
    ++v3;
  }
}

void sub_221FB0814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::MdlMeshAsset::Submesh::GetIndexBuffer(id *this)
{
  uint64_t v1 = [*this indexBuffer];
  uint64_t v2 = [v1 map];
  uint64_t v3 = [v2 bytes];

  return v3;
}

void sub_221FB08A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::MdlMeshAsset::Submesh::GetIndexBufferFormat(id *this)
{
  unint64_t v1 = __ROR8__([*this indexType], 3);
  if (v1 >= 5) {
    char v2 = 0;
  }
  else {
    char v2 = 0x300020100uLL >> (8 * v1);
  }
  return v2 & 3;
}

id **std::unique_ptr<Phase::details::MdlMeshAssetImplementation>::reset[abi:ne180100](id **result, id *a2)
{
  char v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {

    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t Phase::MallocAligned(Phase *this, size_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!this)
  {
    unint64_t v6 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 176);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v10 = 136315394;
      *(void *)&v10[4] = "Memory.cpp";
      __int16 v11 = 1024;
      int v12 = 56;
      _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inSizeInBytes > 0 is false.", v10, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: inSizeInBytes > 0 is false.");
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] != 1)
  {
    uint64_t v8 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 176);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v10 = 136315394;
      *(void *)&v10[4] = "Memory.cpp";
      __int16 v11 = 1024;
      int v12 = 58;
      _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: (inAlignment > 0) && IsPowerOfTwo(static_cast<uint64_t>(inAlignment)) is false.", v10, 0x12u);
    }
    uint64_t v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v9, "PRECONDITION: (inAlignment > 0) && IsPowerOfTwo(static_cast<uint64_t>(inAlignment)) is false.");
  }
  *(void *)unint64_t v10 = 0;
  size_t v4 = Phase::AlignUp<unsigned long>(this, a2);
  if (malloc_type_posix_memalign((void **)v10, a2, v4, 0xC9CCEEE9uLL)) {
    return 0;
  }
  else {
    return *(void *)v10;
  }
}

void sub_221FB0B4C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::AlignUp<unsigned long>(Phase::Logger *a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint8x8_t v2 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v2.i16[0] = vaddlv_u8(v2);
  if (v2.u32[0] != 1)
  {
    size_t v4 = **(NSObject ***)(Phase::Logger::GetInstance(a1) + 96);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      uint64_t v7 = "MathFunctions.h";
      __int16 v8 = 1024;
      int v9 = 648;
      _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: IsPowerOfTwo(alignment) is false.", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "PRECONDITION: IsPowerOfTwo(alignment) is false.");
  }
  return ((unint64_t)a1 + a2 - 1) & -a2;
}

void sub_221FB0C88(_Unwind_Exception *exception_object)
{
}

void Phase::Memset8(Phase *this, void *a2, size_t a3)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  __pattern8 = a2;
  if ((a3 & 0x8000000000000000) != 0)
  {
    uint8x8_t v3 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 176);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v7 = "Memory.cpp";
      __int16 v8 = 1024;
      int v9 = 214;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inSizeInBytes >= 0 is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: inSizeInBytes >= 0 is false.");
  }
  memset_pattern8(this, &__pattern8, a3);
}

void sub_221FB0DA8(_Unwind_Exception *exception_object)
{
}

BOOL Phase::MemCompare8(Phase *this, const void *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a3 < 0)
  {
    uint64_t v22 = **(NSObject ***)(Phase::Logger::GetInstance(this) + 176);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      int v24 = 136315394;
      float32x4_t v25 = "Memory.cpp";
      __int16 v26 = 1024;
      int v27 = 221;
      _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: inSizeInBytes >= 0 is false.", (uint8_t *)&v24, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: inSizeInBytes >= 0 is false.");
  }
  uint64_t v3 = a3 + 7;
  unint64_t v4 = (unint64_t)(a3 + 7) >> 3;
  unint64_t v5 = (a3 + 7) & 0xFFFFFFFFFFFFFFC0;
  int v6 = (const void **)((char *)this + v5);
  while (v5)
  {
    uint64_t v7 = *(const void **)this;
    __int16 v8 = (const void *)*((void *)this + 1);
    uint64_t v9 = *((void *)this + 2);
    uint64_t v10 = *((void *)this + 3);
    uint64_t v11 = *((void *)this + 4);
    uint64_t v12 = *((void *)this + 5);
    uint64_t v13 = *((void *)this + 6);
    uint64_t v14 = *((void *)this + 7);
    this = (Phase *)((char *)this + 64);
    v5 -= 64;
    if (v7 != a2 || v9 != v10 || v7 != v8 || v11 != v12 || v13 != v14) {
      return 0;
    }
  }
  unint64_t v20 = 8 * v4 - (v3 & 0xFFFFFFFFFFFFFFC0);
  do
  {
    BOOL result = v20 == 0;
    if (!v20) {
      break;
    }
    unint64_t v21 = *v6++;
    v20 -= 8;
  }
  while (v21 == a2);
  return result;
}

void sub_221FB0F30(_Unwind_Exception *exception_object)
{
}

uint64_t Phase::SetMetaParameterValue(void *a1, int a2, uint64_t a3, double a4)
{
  v8[4] = *MEMORY[0x263EF8340];
  if (a2 == 2)
  {
    a1[7] = a3;
    return 1;
  }
  if (a2 == 1)
  {
    double v6 = fmin(fmax(*(double *)&a3, *(double *)(*a1 + 32)), *(double *)(*a1 + 40));
    v8[0] = &unk_26D4715B0;
    v8[1] = Phase::CurveFunction::Linear<double>;
    v8[3] = v8;
    Phase::Fader<double>::SetInternal((uint64_t)(a1 + 1), (uint64_t)v8, v6, a4);
    std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](v8);
    a1[7] = a1[6];
    return 1;
  }
  return 0;
}

void sub_221FB102C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t Phase::GlobalMetaParameterManager::SetGlobalMetaParameter(uint64_t a1, unint64_t a2, int a3, uint64_t a4, double a5)
{
  unint64_t v39 = a2;
  uint64_t v10 = (void *)(a1 + 48);
  uint64_t v11 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)(a1 + 48), &v39);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = v11 + 3;
    id WeakRetained = objc_loadWeakRetained(v11 + 3);
    if (WeakRetained)
    {
      int v15 = WeakRetained;
      id v16 = objc_loadWeakRetained(v13);
      if ([v16 getMetaParameter])
      {
        id v17 = objc_loadWeakRetained(v13);
        unint64_t v5 = *(unsigned int *)([v17 getMetaParameter] + 12);

        if (v5 == a3) {
          goto LABEL_52;
        }
      }
      else
      {
      }
    }
  }
  uint64_t v18 = [*(id *)(a1 + 40) getGlobalMetaParameter:v39];
  if (!v18) {
    goto LABEL_15;
  }
  int v19 = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v10, &v39);
  if (v19)
  {
    std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::remove(v10, v19, (uint64_t)v40);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>>>>::reset[abi:ne180100]((uint64_t)v40, 0);
  }
  if ((Phase::GlobalMetaParameterManager::RegisterGlobalMetaParam((Phase::GlobalMetaParameterManager *)a1, v18) & 1) == 0
    || (uint64_t v12 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v10, &v39)) == 0)
  {
LABEL_15:

    return 0;
  }
  unint64_t v20 = v39;
  unint64_t v21 = *(void *)(a1 + 56);
  if (v21)
  {
    uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v21);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      unint64_t v5 = v39;
      if (v21 <= v39) {
        unint64_t v5 = v39 % v21;
      }
    }
    else
    {
      unint64_t v5 = (v21 - 1) & v39;
    }
    int v24 = *(id ***)(*v10 + 8 * v5);
    if (v24)
    {
      for (unint64_t i = *v24; i; unint64_t i = (id *)*i)
      {
        unint64_t v26 = (unint64_t)i[1];
        if (v26 == v39)
        {
          if (i[2] == (id)v39) {
            goto LABEL_51;
          }
        }
        else
        {
          if (v22.u32[0] > 1uLL)
          {
            if (v26 >= v21) {
              v26 %= v21;
            }
          }
          else
          {
            v26 &= v21 - 1;
          }
          if (v26 != v5) {
            break;
          }
        }
      }
    }
  }
  int v27 = operator new(0x20uLL);
  uint64_t v28 = (void *)(a1 + 64);
  v40[0] = v27;
  v40[1] = a1 + 64;
  *int v27 = 0;
  v27[1] = v20;
  _OWORD v27[2] = v20;
  v27[3] = 0;
  char v41 = 1;
  float v29 = (float)(unint64_t)(*(void *)(a1 + 72) + 1);
  float v30 = *(float *)(a1 + 80);
  if (!v21 || (float)(v30 * (float)v21) < v29)
  {
    BOOL v31 = 1;
    if (v21 >= 3) {
      BOOL v31 = (v21 & (v21 - 1)) != 0;
    }
    unint64_t v32 = v31 | (2 * v21);
    unint64_t v33 = vcvtps_u32_f32(v29 / v30);
    if (v32 <= v33) {
      size_t v34 = v33;
    }
    else {
      size_t v34 = v32;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>((uint64_t)v10, v34);
    unint64_t v21 = *(void *)(a1 + 56);
    if ((v21 & (v21 - 1)) != 0)
    {
      if (v21 <= v20) {
        unint64_t v5 = v20 % v21;
      }
      else {
        unint64_t v5 = v20;
      }
    }
    else
    {
      unint64_t v5 = (v21 - 1) & v20;
    }
  }
  float32x4_t v35 = *(void **)(*v10 + 8 * v5);
  if (v35)
  {
    *(void *)v40[0] = *v35;
    *float32x4_t v35 = v40[0];
  }
  else
  {
    *(void *)v40[0] = *v28;
    *uint64_t v28 = v40[0];
    *(void *)(*v10 + 8 * v5) = v28;
    if (*(void *)v40[0])
    {
      unint64_t v36 = *(void *)(*(void *)v40[0] + 8);
      if ((v21 & (v21 - 1)) != 0)
      {
        if (v36 >= v21) {
          v36 %= v21;
        }
      }
      else
      {
        v36 &= v21 - 1;
      }
      *(void *)(*v10 + 8 * v36) = v40[0];
    }
  }
  unint64_t i = (id *)v40[0];
  v40[0] = 0;
  ++*(void *)(a1 + 72);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>>>>::reset[abi:ne180100]((uint64_t)v40, 0);
LABEL_51:
  objc_storeWeak(i + 3, v18);

LABEL_52:
  id v37 = objc_loadWeakRetained(v12 + 3);
  int8x16_t v38 = (void *)[v37 getMetaParamState];

  return Phase::SetMetaParameterValue(v38, a3, a4, a5);
}

void sub_221FB13B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);

  _Unwind_Resume(a1);
}

uint64_t Phase::GlobalMetaParameterManager::RegisterGlobalMetaParam(Phase::GlobalMetaParameterManager *this, PHASEGlobalMetaParameterAsset *a2)
{
  uint64_t v3 = a2;
  unint64_t v4 = v3;
  if (!v3) {
    goto LABEL_4;
  }
  unint64_t v5 = [(PHASEGlobalMetaParameterAsset *)v3 getMetaParamState];
  uint64_t v6 = [(PHASEGlobalMetaParameterAsset *)v4 getMetaParameter];
  *unint64_t v5 = v6;
  v5[7] = *(void *)(v6 + 48);
  Phase::Fader<double>::SetDefaultValue((uint64_t)(v5 + 1), *(double *)(v6 + 48));
  uint64_t v7 = (void *)((char *)this + 48);
  if (std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v7, (unint64_t *)v6))
  {
    goto LABEL_4;
  }
  objc_initWeak(&location, v4);
  unint64_t v13 = *(void *)v6;
  objc_copyWeak(&v14, &location);
  std::__hash_table<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>>((uint64_t)v7, &v13, (uint64_t)&v13);
  char v9 = v8;
  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
  if (v9) {
    uint64_t v10 = 1;
  }
  else {
LABEL_4:
  }
    uint64_t v10 = 0;

  return v10;
}

void sub_221FB14DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(v11);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

uint64_t Phase::GlobalMetaParameterManager::GetGlobalMetaParameterState(Phase::GlobalMetaParameterManager *this, unint64_t a2, MetaParamState *a3)
{
  unint64_t v13 = a2;
  unint64_t v5 = (void *)((char *)this + 48);
  uint64_t v6 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)this + 6, &v13);
  if (v6) {
    goto LABEL_2;
  }
  char v8 = [*((id *)this + 5) getGlobalMetaParameter:v13];
  if (!v8 || (Phase::GlobalMetaParameterManager::RegisterGlobalMetaParam(this, v8) & 1) == 0) {
    goto LABEL_10;
  }
  uint64_t v6 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(v5, &v13);

  if (v6)
  {
LABEL_2:
    id WeakRetained = (PHASEGlobalMetaParameterAsset *)objc_loadWeakRetained(v6 + 3);
    char v8 = WeakRetained;
    if (WeakRetained)
    {
      uint64_t v9 = [(PHASEGlobalMetaParameterAsset *)WeakRetained getMetaParamState];
      a3->param = *(MetaParameter **)v9;
      if ((MetaParamState *)v9 != a3) {
        std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__assign_with_size[abi:ne180100]<Phase::Envelope<double>::SegmentInternal*,Phase::Envelope<double>::SegmentInternal*>((uint64_t)&a3->mFader, *(void **)(v9 + 8), *(void **)(v9 + 16), (uint64_t)(*(void *)(v9 + 16) - *(void *)(v9 + 8)) >> 6);
      }
      long long v10 = *(_OWORD *)(v9 + 32);
      a3->mFader.mValue = *(double *)(v9 + 48);
      *(_OWORD *)&a3->mFader.mOffset = v10;
      a3->currentInputValue.stringVal = *(void *)(v9 + 56);
      uint64_t v11 = 1;
      goto LABEL_11;
    }
LABEL_10:
    uint64_t v11 = 0;
LABEL_11:

    return v11;
  }
  return 0;
}

void sub_221FB1618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::GlobalMetaParameterManager::Update(Phase::GlobalMetaParameterManager *this, double a2)
{
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands((uint64_t)this);
  if (a2 > 0.0)
  {
    unint64_t v4 = (id *)*((void *)this + 8);
    if (v4)
    {
      unint64_t v5 = (void *)((char *)this + 48);
      do
      {
        id WeakRetained = objc_loadWeakRetained(v4 + 3);
        uint64_t v7 = WeakRetained;
        if (WeakRetained)
        {
          uint64_t v8 = [WeakRetained getMetaParamState];
          uint64_t v9 = v8;
          if (*(_DWORD *)(*(void *)v8 + 12) == 1)
          {
            Phase::Fader<double>::Update(v8 + 8, a2);
            *(void *)(v9 + 56) = *(void *)(v9 + 48);
          }
          unint64_t v4 = (id *)*v4;
        }
        else
        {
          long long v10 = (id *)*v4;
          std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::unique_ptr<Phase::Controller::ClientTapReceiverObject>>>>::remove(v5, v4, (uint64_t)v11);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
          unint64_t v4 = v10;
        }
      }
      while (v4);
    }
  }
}

void sub_221FB16F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint8x8_t v2 = *(id **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      objc_destroyWeak(v2 + 3);
    }
    operator delete(v2);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = a1 + 16;
  unint64_t v13 = operator new(0x20uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *(void *)unint64_t v13 = 0;
  *((void *)v13 + 1) = v6;
  *((void *)v13 + 2) = *(void *)a3;
  objc_moveWeak((id *)v13 + 3, (id *)(a3 + 8));
  char v24 = 1;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    BOOL v16 = 1;
    if (v7 >= 3) {
      BOOL v16 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v7);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v19);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *(void *)v23[0] = *v20;
    *unint64_t v20 = v23[0];
  }
  else
  {
    *(void *)v23[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v23[0];
    *(void *)(*(void *)a1 + 8 * v3) = v12;
    if (*(void *)v23[0])
    {
      unint64_t v21 = *(void *)(*(void *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7) {
          v21 %= v7;
        }
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v21) = v23[0];
    }
  }
  long long v10 = (void *)v23[0];
  v23[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>>>>::reset[abi:ne180100]((uint64_t)v23, 0);
  return v10;
}

void sub_221FB19AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::MorphDirectionalMetadata(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  *(_DWORD *)a3 = 3;
  *(unsigned char *)(a3 + 4) = 1;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 204) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 96) = 0;
  *(void *)(a3 + 104) = 0;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = 0;
  *(void *)(a3 + 184) = 0;
  *(void *)(a3 + 192) = 0;
  *(void *)(a3 + 176) = 0;
  *(_WORD *)(a3 + 200) = 0;
  if (*(void *)(a1 + 104))
  {
    if (!*(unsigned char *)(a1 + 201)) {
      Phase::SpatialModeler::SortMetadataByDelay<float>(a1);
    }
    if (!*(unsigned char *)(a2 + 201)) {
      Phase::SpatialModeler::SortMetadataByDelay<float>(a2);
    }
    uint64_t v10 = *(void *)(*(void *)(a1 + 104) + 8);
    switch(v10)
    {
      case 31:
        int64x2_t v53 = 0uLL;
        uint64_t v54 = 0;
        double v50 = 0;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        Phase::SpatialModeler::convertDirectionalMetadataToRayTracingPlaneWaveList<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(a1, (char **)&v53);
        Phase::SpatialModeler::convertDirectionalMetadataToRayTracingPlaneWaveList<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(a2, &v50);
        uint64_t v39 = 0;
        int64x2_t v38 = 0uLL;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave*,Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave*>(&v38, v53.i64[0], v53.i64[1], 0x8E38E38E38E38E39 * ((v53.i64[1] - v53.i64[0]) >> 4));
        int64x2_t v36 = 0uLL;
        uint64_t v37 = 0;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave*,Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave*>(&v36, (uint64_t)v50, v51, 0x8E38E38E38E38E39 * ((v51 - (uint64_t)v50) >> 4));
        if (a4 == 0.0 && a5 == 1.0)
        {
          int64x2_t v48 = v36;
          uint64_t v49 = v37;
          uint64_t v37 = 0;
          int64x2_t v36 = 0uLL;
        }
        else if (a4 == 1.0 && a5 == 0.0)
        {
          int64x2_t v48 = v38;
          uint64_t v49 = v39;
          uint64_t v39 = 0;
          int64x2_t v38 = 0uLL;
        }
        else
        {
          int64x2_t v48 = 0uLL;
          uint64_t v49 = 0;
          double v58 = 0;
          int64_t v59 = 0;
          uint64_t v60 = 0;
          int64_t v55 = 0;
          unint64_t v56 = 0;
          uint64_t v57 = 0;
          Phase::SpatialModeler::PrecalculateDbLevels<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(v38.i64[0], v38.i64[1], (float **)&v58);
          Phase::SpatialModeler::PrecalculateDbLevels<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(v36.i64[0], v36.i64[1], &v55);
          if (v38.i64[1] == v38.i64[0] || v36.i64[1] == v36.i64[0])
          {
            Phase::SpatialModeler::TerminateAndWeightRemainder_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(v38.i64[0], (float *)v38.i64[1], (float *)v36.i64[0], (float *)v36.i64[1], (char **)&v48, a4, a5);
          }
          else
          {
            do
            {
              if (v36.i64[1] == v36.i64[0]) {
                break;
              }
              Phase::SpatialModeler::FindPairAndMerge<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(&v38, (uint64_t *)&v58, v36.i64, &v55, &v48, a4, a5);
              Phase::SpatialModeler::TerminateAndWeightRemainder_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(v38.i64[0], (float *)v38.i64[1], (float *)v36.i64[0], (float *)v36.i64[1], (char **)&v48, a4, a5);
              uint64_t v13 = v38.i64[1];
              uint64_t v14 = v38.i64[0];
              if (v38.i64[1] == v38.i64[0]) {
                break;
              }
              if (v36.i64[1] != v36.i64[0])
              {
                Phase::SpatialModeler::FindPairAndMerge<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(&v36, (uint64_t *)&v55, v38.i64, &v58, &v48, a5, a4);
                Phase::SpatialModeler::TerminateAndWeightRemainder_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(v38.i64[0], (float *)v38.i64[1], (float *)v36.i64[0], (float *)v36.i64[1], (char **)&v48, a4, a5);
                uint64_t v13 = v38.i64[1];
                uint64_t v14 = v38.i64[0];
              }
            }
            while (v13 != v14);
          }
          if (v55)
          {
            unint64_t v56 = v55;
            operator delete(v55);
          }
          if (v58)
          {
            int64_t v59 = (float *)v58;
            operator delete(v58);
          }
        }
        uint64_t v24 = v53.i64[0];
        if (v53.i64[0])
        {
          float32x4_t v25 = (void *)v53.i64[0];
          if (v53.i64[1] != v53.i64[0])
          {
            uint64_t v26 = v53.i64[1] - 144;
            uint64_t v27 = v53.i64[1] - 144;
            uint64_t v28 = (uint64_t *)(v53.i64[1] - 144);
            do
            {
              uint64_t v29 = *v28;
              v28 -= 18;
              (*(void (**)(uint64_t))(v29 + 16))(v27);
              v26 -= 144;
              BOOL v23 = v27 == v24;
              uint64_t v27 = (uint64_t)v28;
            }
            while (!v23);
            float32x4_t v25 = (void *)v53.i64[0];
          }
          v53.i64[1] = v24;
          operator delete(v25);
        }
        int64x2_t v53 = v48;
        uint64_t v54 = v49;
        uint64_t v49 = 0;
        int64x2_t v48 = 0uLL;
        double v58 = &v48;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        double v58 = &v36;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        double v58 = &v38;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        Phase::SpatialModeler::convertRayTracingPlaneWaveListToDirectionalMetadata<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>((uint64_t)&v53, (uint64_t *)a3, 0);
        Phase::SpatialModeler::SortMetadataByDelay<float>(a3);
        double v58 = (int64x2_t *)&v50;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        double v58 = &v53;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        break;
      case 10:
        int64x2_t v53 = 0uLL;
        uint64_t v54 = 0;
        double v50 = 0;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        Phase::SpatialModeler::convertDirectionalMetadataToRayTracingPlaneWaveList<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(a1, (char **)&v53);
        Phase::SpatialModeler::convertDirectionalMetadataToRayTracingPlaneWaveList<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(a2, &v50);
        uint64_t v43 = 0;
        int64x2_t v42 = 0uLL;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave*,Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave*>(&v42, v53.i64[0], v53.i64[1], (v53.i64[1] - v53.i64[0]) >> 6);
        int64x2_t v40 = 0uLL;
        uint64_t v41 = 0;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave*,Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave*>(&v40, (uint64_t)v50, v51, (v51 - (uint64_t)v50) >> 6);
        if (a4 == 0.0 && a5 == 1.0)
        {
          int64x2_t v48 = v40;
          uint64_t v49 = v41;
          uint64_t v41 = 0;
          int64x2_t v40 = 0uLL;
        }
        else if (a4 == 1.0 && a5 == 0.0)
        {
          int64x2_t v48 = v42;
          uint64_t v49 = v43;
          uint64_t v43 = 0;
          int64x2_t v42 = 0uLL;
        }
        else
        {
          int64x2_t v48 = 0uLL;
          uint64_t v49 = 0;
          double v58 = 0;
          int64_t v59 = 0;
          uint64_t v60 = 0;
          int64_t v55 = 0;
          unint64_t v56 = 0;
          uint64_t v57 = 0;
          Phase::SpatialModeler::PrecalculateDbLevels<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(v42.i64[0], v42.i64[1], (float **)&v58);
          Phase::SpatialModeler::PrecalculateDbLevels<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(v40.i64[0], v40.i64[1], &v55);
          if (v42.i64[1] == v42.i64[0] || v40.i64[1] == v40.i64[0])
          {
            Phase::SpatialModeler::TerminateAndWeightRemainder_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(v42.i64[0], v42.i64[1], v40.i64[0], v40.i64[1], &v48, a4, a5);
          }
          else
          {
            do
            {
              if (v40.i64[1] == v40.i64[0]) {
                break;
              }
              Phase::SpatialModeler::FindPairAndMerge<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(&v42, (uint64_t *)&v58, v40.i64, &v55, &v48, a4, a5);
              Phase::SpatialModeler::TerminateAndWeightRemainder_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(v42.i64[0], v42.i64[1], v40.i64[0], v40.i64[1], &v48, a4, a5);
              uint64_t v15 = v42.i64[1];
              uint64_t v16 = v42.i64[0];
              if (v42.i64[1] == v42.i64[0]) {
                break;
              }
              if (v40.i64[1] != v40.i64[0])
              {
                Phase::SpatialModeler::FindPairAndMerge<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(&v40, (uint64_t *)&v55, v42.i64, &v58, &v48, a5, a4);
                Phase::SpatialModeler::TerminateAndWeightRemainder_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(v42.i64[0], v42.i64[1], v40.i64[0], v40.i64[1], &v48, a4, a5);
                uint64_t v15 = v42.i64[1];
                uint64_t v16 = v42.i64[0];
              }
            }
            while (v15 != v16);
          }
          if (v55)
          {
            unint64_t v56 = v55;
            operator delete(v55);
          }
          if (v58)
          {
            int64_t v59 = (float *)v58;
            operator delete(v58);
          }
        }
        uint64_t v30 = v53.i64[0];
        if (v53.i64[0])
        {
          BOOL v31 = (void *)v53.i64[0];
          if (v53.i64[1] != v53.i64[0])
          {
            uint64_t v32 = v53.i64[1] - 64;
            uint64_t v33 = v53.i64[1] - 64;
            size_t v34 = (uint64_t *)(v53.i64[1] - 64);
            do
            {
              uint64_t v35 = *v34;
              v34 -= 8;
              (*(void (**)(uint64_t))(v35 + 16))(v33);
              v32 -= 64;
              BOOL v23 = v33 == v30;
              uint64_t v33 = (uint64_t)v34;
            }
            while (!v23);
            BOOL v31 = (void *)v53.i64[0];
          }
          v53.i64[1] = v30;
          operator delete(v31);
        }
        int64x2_t v53 = v48;
        uint64_t v54 = v49;
        uint64_t v49 = 0;
        int64x2_t v48 = 0uLL;
        double v58 = &v48;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        double v58 = &v40;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        double v58 = &v42;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        Phase::SpatialModeler::convertRayTracingPlaneWaveListToDirectionalMetadata<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>((uint64_t)&v53, (uint64_t *)a3, 0);
        Phase::SpatialModeler::SortMetadataByDelay<float>(a3);
        double v58 = (int64x2_t *)&v50;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        double v58 = &v53;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        break;
      case 3:
        int64x2_t v53 = 0uLL;
        uint64_t v54 = 0;
        double v50 = 0;
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        Phase::SpatialModeler::convertDirectionalMetadataToRayTracingPlaneWaveList<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(a1, (char **)&v53);
        Phase::SpatialModeler::convertDirectionalMetadataToRayTracingPlaneWaveList<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(a2, &v50);
        uint64_t v47 = 0;
        int64x2_t v46 = 0uLL;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band*,Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band*>(&v46, v53.i64[0], v53.i64[1], (v53.i64[1] - v53.i64[0]) >> 5);
        int64x2_t v44 = 0uLL;
        uint64_t v45 = 0;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band*,Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band*>(&v44, (uint64_t)v50, v51, (v51 - (uint64_t)v50) >> 5);
        if (a4 == 0.0 && a5 == 1.0)
        {
          int64x2_t v48 = v44;
          uint64_t v49 = v45;
          uint64_t v45 = 0;
          int64x2_t v44 = 0uLL;
        }
        else if (a4 == 1.0 && a5 == 0.0)
        {
          int64x2_t v48 = v46;
          uint64_t v49 = v47;
          uint64_t v47 = 0;
          int64x2_t v46 = 0uLL;
        }
        else
        {
          int64x2_t v48 = 0uLL;
          uint64_t v49 = 0;
          double v58 = 0;
          int64_t v59 = 0;
          uint64_t v60 = 0;
          int64_t v55 = 0;
          unint64_t v56 = 0;
          uint64_t v57 = 0;
          Phase::SpatialModeler::PrecalculateDbLevels<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(v46.i64[0], v46.i64[1], (float **)&v58);
          Phase::SpatialModeler::PrecalculateDbLevels<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(v44.i64[0], v44.i64[1], &v55);
          if (v46.i64[1] == v46.i64[0] || v44.i64[1] == v44.i64[0])
          {
            Phase::SpatialModeler::TerminateAndWeightRemainder_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(v46.i64[0], v46.i64[1], v44.i64[0], v44.i64[1], &v48, a4, a5);
          }
          else
          {
            do
            {
              if (v44.i64[1] == v44.i64[0]) {
                break;
              }
              Phase::SpatialModeler::FindPairAndMerge<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(&v46, (uint64_t *)&v58, v44.i64, &v55, &v48, a4, a5);
              Phase::SpatialModeler::TerminateAndWeightRemainder_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(v46.i64[0], v46.i64[1], v44.i64[0], v44.i64[1], &v48, a4, a5);
              uint64_t v11 = v46.i64[1];
              uint64_t v12 = v46.i64[0];
              if (v46.i64[1] == v46.i64[0]) {
                break;
              }
              if (v44.i64[1] != v44.i64[0])
              {
                Phase::SpatialModeler::FindPairAndMerge<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(&v44, (uint64_t *)&v55, v46.i64, &v58, &v48, a5, a4);
                Phase::SpatialModeler::TerminateAndWeightRemainder_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(v46.i64[0], v46.i64[1], v44.i64[0], v44.i64[1], &v48, a4, a5);
                uint64_t v11 = v46.i64[1];
                uint64_t v12 = v46.i64[0];
              }
            }
            while (v11 != v12);
          }
          if (v55)
          {
            unint64_t v56 = v55;
            operator delete(v55);
          }
          if (v58)
          {
            int64_t v59 = (float *)v58;
            operator delete(v58);
          }
        }
        uint64_t v17 = v53.i64[0];
        if (v53.i64[0])
        {
          unint64_t v18 = (void *)v53.i64[0];
          if (v53.i64[1] != v53.i64[0])
          {
            uint64_t v19 = v53.i64[1] - 32;
            uint64_t v20 = v53.i64[1] - 32;
            unint64_t v21 = (uint64_t *)(v53.i64[1] - 32);
            do
            {
              uint64_t v22 = *v21;
              v21 -= 4;
              (*(void (**)(uint64_t))(v22 + 16))(v20);
              v19 -= 32;
              BOOL v23 = v20 == v17;
              uint64_t v20 = (uint64_t)v21;
            }
            while (!v23);
            unint64_t v18 = (void *)v53.i64[0];
          }
          v53.i64[1] = v17;
          operator delete(v18);
        }
        int64x2_t v53 = v48;
        uint64_t v54 = v49;
        uint64_t v49 = 0;
        int64x2_t v48 = 0uLL;
        double v58 = &v48;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        double v58 = &v44;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        double v58 = &v46;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        Phase::SpatialModeler::convertRayTracingPlaneWaveListToDirectionalMetadata<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>((uint64_t)&v53, (uint64_t *)a3, 0);
        Phase::SpatialModeler::SortMetadataByDelay<float>(a3);
        double v58 = (int64x2_t *)&v50;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        double v58 = &v53;
        std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
        break;
    }
  }
}

void sub_221FB2300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  int64x2_t v36 = *(void **)(v34 - 112);
  if (v36)
  {
    *(void *)(v34 - 104) = v36;
    operator delete(v36);
  }
  uint64_t v37 = *(void **)(v34 - 88);
  if (v37)
  {
    *(void *)(v34 - 80) = v37;
    operator delete(v37);
  }
  *(void *)(v34 - 88) = &a33;
  std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 88));
  *(void *)(v34 - 88) = &a25;
  std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 88));
  *(void *)(v34 - 88) = &a29;
  std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 88));
  *(void *)(v34 - 88) = v34 - 168;
  std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 88));
  *(void *)(v34 - 88) = v34 - 144;
  std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 88));
  Phase::SpatialModeler::DirectionalMetadataOutput<float>::~DirectionalMetadataOutput(v33);
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::convertDirectionalMetadataToRayTracingPlaneWaveList<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(uint64_t a1, char **a2)
{
  if (*(_DWORD *)(a1 + 204)) {
    std::terminate();
  }
  unint64_t v4 = *(unint64_t **)(a1 + 104);
  if (!v4 || ((unint64_t v5 = *v4, v6 = v4[1], *v4) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    uint64_t v9 = *a2;
    uint8x8_t v8 = a2[1];
    if (v8 != *a2)
    {
      uint64_t v10 = v8 - 32;
      uint64_t v11 = v8 - 32;
      uint64_t v12 = v8 - 32;
      do
      {
        uint64_t v13 = *(void *)v12;
        v12 -= 32;
        (*(void (**)(char *))(v13 + 16))(v11);
        v10 -= 32;
        BOOL v7 = v11 == v9;
        uint64_t v11 = v12;
      }
      while (!v7);
    }
    a2[1] = v9;
  }
  else
  {
    uint64_t v15 = *a2;
    uint64_t v14 = a2[1];
    unint64_t v16 = (v14 - *a2) >> 5;
    unint64_t v61 = v5;
    if (v5 <= v16)
    {
      if (v5 < v16)
      {
        unint64_t v35 = v6;
        int64x2_t v36 = &v15[32 * v5];
        if (v14 != v36)
        {
          uint64_t v37 = v14 - 32;
          int64x2_t v38 = v14 - 32;
          uint64_t v39 = v14 - 32;
          do
          {
            uint64_t v40 = *(void *)v39;
            v39 -= 32;
            (*(void (**)(char *))(v40 + 16))(v38);
            v37 -= 32;
            BOOL v7 = v38 == v36;
            int64x2_t v38 = v39;
          }
          while (!v7);
        }
        a2[1] = v36;
        unint64_t v5 = v61;
        unint64_t v6 = v35;
      }
    }
    else
    {
      uint64_t v17 = (uint64_t)(a2 + 2);
      unint64_t v18 = a2[2];
      if (v5 - v16 <= (v18 - v14) >> 5)
      {
        uint64_t v41 = &v14[32 * (v5 - v16)];
        int64x2_t v42 = a2[1];
        do
        {
          *(void *)int64x2_t v42 = &unk_26D476928;
          *((void *)v42 + 1) = 0;
          *((void *)v42 + 2) = 0;
          *((void *)v42 + 3) = 0;
          v14 += 32;
          v42 += 32;
        }
        while (v42 != v41);
        a2[1] = v41;
      }
      else
      {
        if (v5 >> 59) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v19 = v6;
        unint64_t v20 = v18 - v15;
        unint64_t v21 = (v18 - v15) >> 4;
        if (v21 <= v5) {
          unint64_t v21 = v5;
        }
        unint64_t v22 = v5;
        if (v20 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        int64_t v65 = a2 + 2;
        uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>(v17, v23);
        uint64_t v26 = &v24[32 * v16];
        uint64_t v27 = &v24[32 * v22];
        uint64_t v28 = v26;
        uint64_t v29 = v26;
        do
        {
          *(void *)uint64_t v29 = &unk_26D476928;
          *((void *)v29 + 1) = 0;
          *((void *)v29 + 2) = 0;
          *((void *)v29 + 3) = 0;
          v28 += 32;
          v29 += 32;
        }
        while (v29 != v27);
        uint64_t v30 = *a2;
        unint64_t v31 = (unint64_t)a2[1];
        if ((char *)v31 == *a2)
        {
          int64x2_t v34 = vdupq_n_s64(v31);
        }
        else
        {
          uint64_t v32 = (uint64_t)&v24[32 * v16 - 32];
          do
          {
            *((void *)v26 - 4) = &unk_26D476928;
            v26 -= 32;
            long long v33 = *(_OWORD *)(v31 - 24);
            *((void *)v26 + 3) = *(void *)(v31 - 8);
            *(_OWORD *)(v26 + 8) = v33;
            v32 -= 32;
            v31 -= 32;
          }
          while ((char *)v31 != v30);
          int64x2_t v34 = *(int64x2_t *)a2;
        }
        *a2 = v26;
        a2[1] = v27;
        int64x2_t v63 = v34;
        uint64_t v43 = a2[2];
        a2[2] = &v24[32 * v25];
        double v64 = v43;
        uint64_t v62 = v34.i64[0];
        std::__split_buffer<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::~__split_buffer((uint64_t)&v62);
        unint64_t v5 = v61;
        unint64_t v6 = v19;
      }
    }
    uint64_t v44 = 0;
    uint64_t v45 = *(void *)(a1 + 8);
    int64x2_t v46 = *a2;
    uint64_t v47 = *(void *)(a1 + 56);
    uint64_t v48 = *(void *)(a1 + 144);
    uint64_t v49 = *(void *)(a1 + 104);
    double v50 = (float *)(v49 + 16);
    uint64_t v51 = (float *)(v46 + 20);
    uint64_t v52 = 4 * *(void *)(v49 + 8);
    do
    {
      uint64_t v53 = v45 + 12 * v44;
      uint64_t v54 = &v46[32 * v44];
      *((float *)v54 + 2) = 90.0 - *(float *)(v53 + 4);
      float v55 = (float)((float)(180.0 - *(float *)(v53 + 8))
                  - (float)(floorf((float)(180.0 - *(float *)(v53 + 8)) / 360.0) * 360.0))
          + 0.0;
      if (v55 >= 360.0)
      {
        float v55 = nextafterf(360.0, 0.0);
        unint64_t v5 = v61;
      }
      *((float *)v54 + 3) = v55;
      *((_DWORD *)v54 + 4) = *(_DWORD *)(v47 + 4 * v44);
      float v56 = (float)(1 - 2 * *(unsigned __int8 *)(v48 + v44));
      uint64_t v57 = v50;
      double v58 = v51;
      unint64_t v59 = v6;
      do
      {
        float v60 = *v57++;
        *v58++ = v60 * v56;
        --v59;
      }
      while (v59);
      ++v44;
      v51 += 8;
      double v50 = (float *)((char *)v50 + v52);
    }
    while (v44 != v5);
  }
}

void Phase::SpatialModeler::convertDirectionalMetadataToRayTracingPlaneWaveList<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(uint64_t a1, char **a2)
{
  if (*(_DWORD *)(a1 + 204)) {
    std::terminate();
  }
  unint64_t v4 = *(unint64_t **)(a1 + 104);
  if (!v4 || ((unint64_t v5 = *v4, v6 = v4[1], *v4) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    uint64_t v9 = *a2;
    uint8x8_t v8 = a2[1];
    if (v8 != *a2)
    {
      uint64_t v10 = v8 - 64;
      uint64_t v11 = v8 - 64;
      uint64_t v12 = v8 - 64;
      do
      {
        uint64_t v13 = *(void *)v12;
        v12 -= 64;
        (*(void (**)(char *))(v13 + 16))(v11);
        v10 -= 64;
        BOOL v7 = v11 == v9;
        uint64_t v11 = v12;
      }
      while (!v7);
    }
    a2[1] = v9;
  }
  else
  {
    uint64_t v15 = *a2;
    uint64_t v14 = a2[1];
    unint64_t v16 = (v14 - *a2) >> 6;
    unint64_t v63 = v5;
    if (v5 <= v16)
    {
      if (v5 < v16)
      {
        unint64_t v37 = v6;
        int64x2_t v38 = &v15[64 * v5];
        if (v14 != v38)
        {
          uint64_t v39 = v14 - 64;
          uint64_t v40 = v14 - 64;
          uint64_t v41 = v14 - 64;
          do
          {
            uint64_t v42 = *(void *)v41;
            v41 -= 64;
            (*(void (**)(char *))(v42 + 16))(v40);
            v39 -= 64;
            BOOL v7 = v40 == v38;
            uint64_t v40 = v41;
          }
          while (!v7);
        }
        a2[1] = v38;
        unint64_t v5 = v63;
        unint64_t v6 = v37;
      }
    }
    else
    {
      uint64_t v17 = (uint64_t)(a2 + 2);
      unint64_t v18 = a2[2];
      if (v5 - v16 <= (v18 - v14) >> 6)
      {
        uint64_t v43 = &v14[64 * (v5 - v16)];
        uint64_t v44 = a2[1];
        do
        {
          *(void *)uint64_t v44 = &unk_26D476958;
          *(_OWORD *)(v44 + 8) = 0uLL;
          *(_OWORD *)(v44 + 24) = 0uLL;
          *(_OWORD *)(v44 + 40) = 0uLL;
          *((_DWORD *)v44 + 14) = 0;
          v14 += 64;
          v44 += 64;
        }
        while (v44 != v43);
        a2[1] = v43;
      }
      else
      {
        if (v5 >> 58) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v19 = v6;
        unint64_t v20 = v18 - v15;
        unint64_t v21 = (v18 - v15) >> 5;
        if (v21 <= v5) {
          unint64_t v21 = v5;
        }
        unint64_t v22 = v5;
        if (v20 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v23 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v23 = v21;
        }
        unint64_t v67 = a2 + 2;
        uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>>(v17, v23);
        uint64_t v26 = &v24[64 * v16];
        uint64_t v27 = &v24[64 * v22];
        uint64_t v28 = v26;
        uint64_t v29 = v26;
        do
        {
          *(void *)uint64_t v29 = &unk_26D476958;
          *(_OWORD *)(v29 + 8) = 0uLL;
          *(_OWORD *)(v29 + 24) = 0uLL;
          *(_OWORD *)(v29 + 40) = 0uLL;
          *((_DWORD *)v29 + 14) = 0;
          v28 += 64;
          v29 += 64;
        }
        while (v29 != v27);
        uint64_t v30 = *a2;
        unint64_t v31 = (unint64_t)a2[1];
        if ((char *)v31 == *a2)
        {
          int64x2_t v36 = vdupq_n_s64(v31);
        }
        else
        {
          uint64_t v32 = (uint64_t)&v24[64 * v16 - 64];
          do
          {
            *((void *)v26 - 8) = &unk_26D476958;
            v26 -= 64;
            long long v33 = *(_OWORD *)(v31 - 56);
            long long v34 = *(_OWORD *)(v31 - 40);
            long long v35 = *(_OWORD *)(v31 - 24);
            *((_DWORD *)v26 + 14) = *(_DWORD *)(v31 - 8);
            *(_OWORD *)(v26 + 40) = v35;
            *(_OWORD *)(v26 + 24) = v34;
            *(_OWORD *)(v26 + 8) = v33;
            v32 -= 64;
            v31 -= 64;
          }
          while ((char *)v31 != v30);
          int64x2_t v36 = *(int64x2_t *)a2;
        }
        *a2 = v26;
        a2[1] = v27;
        int64x2_t v65 = v36;
        uint64_t v45 = a2[2];
        a2[2] = &v24[64 * v25];
        unint64_t v66 = v45;
        uint64_t v64 = v36.i64[0];
        std::__split_buffer<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>::~__split_buffer((uint64_t)&v64);
        unint64_t v5 = v63;
        unint64_t v6 = v19;
      }
    }
    uint64_t v46 = 0;
    uint64_t v47 = *(void *)(a1 + 8);
    uint64_t v48 = *a2;
    uint64_t v49 = *(void *)(a1 + 56);
    uint64_t v50 = *(void *)(a1 + 144);
    uint64_t v51 = *(void *)(a1 + 104);
    uint64_t v52 = (float *)(v51 + 16);
    uint64_t v53 = (float *)(v48 + 20);
    uint64_t v54 = 4 * *(void *)(v51 + 8);
    do
    {
      uint64_t v55 = v47 + 12 * v46;
      float v56 = &v48[64 * v46];
      *((float *)v56 + 2) = 90.0 - *(float *)(v55 + 4);
      float v57 = (float)((float)(180.0 - *(float *)(v55 + 8))
                  - (float)(floorf((float)(180.0 - *(float *)(v55 + 8)) / 360.0) * 360.0))
          + 0.0;
      if (v57 >= 360.0)
      {
        float v57 = nextafterf(360.0, 0.0);
        unint64_t v5 = v63;
      }
      *((float *)v56 + 3) = v57;
      *((_DWORD *)v56 + 4) = *(_DWORD *)(v49 + 4 * v46);
      float v58 = (float)(1 - 2 * *(unsigned __int8 *)(v50 + v46));
      unint64_t v59 = v52;
      float v60 = v53;
      unint64_t v61 = v6;
      do
      {
        float v62 = *v59++;
        *v60++ = v62 * v58;
        --v61;
      }
      while (v61);
      ++v46;
      v53 += 16;
      uint64_t v52 = (float *)((char *)v52 + v54);
    }
    while (v46 != v5);
  }
}

void Phase::SpatialModeler::convertDirectionalMetadataToRayTracingPlaneWaveList<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(uint64_t a1, char **a2)
{
  if (*(_DWORD *)(a1 + 204)) {
    std::terminate();
  }
  unint64_t v4 = *(unint64_t **)(a1 + 104);
  if (!v4 || ((unint64_t v5 = *v4, v6 = v4[1], *v4) ? (v7 = v6 == 0) : (v7 = 1), v7))
  {
    uint64_t v9 = *a2;
    uint8x8_t v8 = a2[1];
    if (v8 != *a2)
    {
      uint64_t v10 = v8 - 144;
      uint64_t v11 = v8 - 144;
      uint64_t v12 = v8 - 144;
      do
      {
        uint64_t v13 = *(void *)v12;
        v12 -= 144;
        (*(void (**)(char *))(v13 + 16))(v11);
        v10 -= 144;
        BOOL v7 = v11 == v9;
        uint64_t v11 = v12;
      }
      while (!v7);
    }
    a2[1] = v9;
  }
  else
  {
    uint64_t v15 = *a2;
    uint64_t v14 = a2[1];
    unint64_t v16 = 0x8E38E38E38E38E39 * ((v14 - *a2) >> 4);
    unint64_t v17 = v5 - v16;
    unint64_t v67 = v5;
    if (v5 <= v16)
    {
      if (v5 < v16)
      {
        unint64_t v41 = v6;
        uint64_t v42 = &v15[144 * v5];
        if (v14 != v42)
        {
          uint64_t v43 = v14 - 144;
          uint64_t v44 = v14 - 144;
          uint64_t v45 = v14 - 144;
          do
          {
            uint64_t v46 = *(void *)v45;
            v45 -= 144;
            (*(void (**)(char *))(v46 + 16))(v44);
            v43 -= 144;
            BOOL v7 = v44 == v42;
            uint64_t v44 = v45;
          }
          while (!v7);
        }
        a2[1] = v42;
        unint64_t v5 = v67;
        unint64_t v6 = v41;
      }
    }
    else
    {
      uint64_t v18 = (uint64_t)(a2 + 2);
      unint64_t v19 = a2[2];
      if (0x8E38E38E38E38E39 * ((v19 - v14) >> 4) >= v17)
      {
        uint64_t v47 = &v14[144 * v17];
        uint64_t v48 = a2[1];
        do
        {
          *(void *)uint64_t v48 = &unk_26D476988;
          *(_OWORD *)(v48 + 8) = 0uLL;
          *(_OWORD *)(v48 + 24) = 0uLL;
          *(_OWORD *)(v48 + 40) = 0uLL;
          *(_OWORD *)(v48 + 56) = 0uLL;
          *(_OWORD *)(v48 + 72) = 0uLL;
          *(_OWORD *)(v48 + 88) = 0uLL;
          *(_OWORD *)(v48 + 104) = 0uLL;
          v14 += 144;
          *(_OWORD *)(v48 + 120) = 0uLL;
          *((void *)v48 + 17) = 0;
          v48 += 144;
        }
        while (v48 != v47);
        a2[1] = v47;
      }
      else
      {
        if (v5 > 0x1C71C71C71C71C7) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v20 = v6;
        unint64_t v21 = 0x8E38E38E38E38E39 * ((v19 - v15) >> 4);
        uint64_t v22 = 2 * v21;
        if (2 * v21 <= v5) {
          uint64_t v22 = v5;
        }
        unint64_t v23 = v5;
        if (v21 >= 0xE38E38E38E38E3) {
          unint64_t v24 = 0x1C71C71C71C71C7;
        }
        else {
          unint64_t v24 = v22;
        }
        uint64_t v71 = a2 + 2;
        uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>>(v18, v24);
        uint64_t v27 = &v25[144 * v16];
        uint64_t v28 = &v25[144 * v23];
        uint64_t v29 = v27;
        uint64_t v30 = v27;
        do
        {
          *(void *)uint64_t v30 = &unk_26D476988;
          *(_OWORD *)(v30 + 8) = 0uLL;
          *(_OWORD *)(v30 + 24) = 0uLL;
          *(_OWORD *)(v30 + 40) = 0uLL;
          *(_OWORD *)(v30 + 56) = 0uLL;
          *(_OWORD *)(v30 + 72) = 0uLL;
          *(_OWORD *)(v30 + 88) = 0uLL;
          *(_OWORD *)(v30 + 104) = 0uLL;
          v29 += 144;
          *(_OWORD *)(v30 + 120) = 0uLL;
          *((void *)v30 + 17) = 0;
          v30 += 144;
        }
        while (v30 != v28);
        unint64_t v31 = *a2;
        unint64_t v32 = (unint64_t)a2[1];
        if ((char *)v32 == *a2)
        {
          int64x2_t v40 = vdupq_n_s64(v32);
        }
        else
        {
          uint64_t v33 = (uint64_t)&v25[144 * v16 - 144];
          do
          {
            *((void *)v27 - 18) = &unk_26D476988;
            v27 -= 144;
            *(_OWORD *)(v27 + 8) = *(_OWORD *)(v32 - 136);
            long long v34 = *(_OWORD *)(v32 - 120);
            long long v35 = *(_OWORD *)(v32 - 104);
            long long v36 = *(_OWORD *)(v32 - 88);
            *(_OWORD *)(v27 + 72) = *(_OWORD *)(v32 - 72);
            *(_OWORD *)(v27 + 56) = v36;
            *(_OWORD *)(v27 + 40) = v35;
            *(_OWORD *)(v27 + 24) = v34;
            long long v37 = *(_OWORD *)(v32 - 56);
            long long v38 = *(_OWORD *)(v32 - 40);
            long long v39 = *(_OWORD *)(v32 - 24);
            *((void *)v27 + 17) = *(void *)(v32 - 8);
            *(_OWORD *)(v27 + 120) = v39;
            *(_OWORD *)(v27 + 104) = v38;
            *(_OWORD *)(v27 + 88) = v37;
            v33 -= 144;
            v32 -= 144;
          }
          while ((char *)v32 != v31);
          int64x2_t v40 = *(int64x2_t *)a2;
        }
        *a2 = v27;
        a2[1] = v28;
        int64x2_t v69 = v40;
        uint64_t v49 = a2[2];
        a2[2] = &v25[144 * v26];
        double v70 = v49;
        uint64_t v68 = v40.i64[0];
        std::__split_buffer<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::~__split_buffer((uint64_t)&v68);
        unint64_t v5 = v67;
        unint64_t v6 = v20;
      }
    }
    uint64_t v50 = 0;
    uint64_t v51 = *(void *)(a1 + 8);
    uint64_t v52 = *a2;
    uint64_t v53 = *(void *)(a1 + 56);
    uint64_t v54 = *(void *)(a1 + 144);
    uint64_t v55 = *(void *)(a1 + 104);
    float v56 = (float *)(v55 + 16);
    float v57 = (float *)(v52 + 20);
    uint64_t v58 = 4 * *(void *)(v55 + 8);
    do
    {
      uint64_t v59 = v51 + 12 * v50;
      *(float *)&v52[144 * v50 + 8] = 90.0 - *(float *)(v59 + 4);
      float v60 = (float)((float)(180.0 - *(float *)(v59 + 8))
                  - (float)(floorf((float)(180.0 - *(float *)(v59 + 8)) / 360.0) * 360.0))
          + 0.0;
      if (v60 >= 360.0)
      {
        float v60 = nextafterf(360.0, 0.0);
        unint64_t v5 = v67;
      }
      unint64_t v61 = &v52[144 * v50];
      *((float *)v61 + 3) = v60;
      *((_DWORD *)v61 + 4) = *(_DWORD *)(v53 + 4 * v50);
      float v62 = (float)(1 - 2 * *(unsigned __int8 *)(v54 + v50));
      unint64_t v63 = v56;
      uint64_t v64 = v57;
      unint64_t v65 = v6;
      do
      {
        float v66 = *v63++;
        *v64++ = v66 * v62;
        --v65;
      }
      while (v65);
      ++v50;
      v57 += 36;
      float v56 = (float *)((char *)v56 + v58);
    }
    while (v50 != v5);
  }
}

void Phase::SpatialModeler::PrecalculateDbLevels<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(uint64_t a1, uint64_t a2, float **a3)
{
  a3[1] = *a3;
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    uint64_t v6 = (uint64_t)(a3 + 2);
    do
    {
      float __C = 0.0;
      int v7 = (**(uint64_t (***)(uint64_t))v5)(v5);
      vDSP_measqv((const float *)(v5 + 20), 1, &__C, v7);
      float v8 = log10f(__C + 1.1755e-38) * 10.0;
      uint64_t v10 = a3[1];
      unint64_t v9 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = *a3;
        uint64_t v13 = v10 - *a3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v9 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          unint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v16);
          uint64_t v12 = *a3;
          uint64_t v10 = a3[1];
        }
        else
        {
          unint64_t v17 = 0;
        }
        uint64_t v18 = (float *)&v17[4 * v13];
        *uint64_t v18 = v8;
        uint64_t v11 = v18 + 1;
        while (v10 != v12)
        {
          int v19 = *((_DWORD *)v10-- - 1);
          *((_DWORD *)v18-- - 1) = v19;
        }
        *a3 = v18;
        a3[1] = v11;
        a3[2] = (float *)&v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *uint64_t v10 = v8;
        uint64_t v11 = v10 + 1;
      }
      a3[1] = v11;
      v5 += 32;
    }
    while (v5 != a2);
  }
}

uint64_t Phase::SpatialModeler::TerminateAndWeightRemainder_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int64x2_t *a5, float a6, float a7)
{
  uint64_t v9 = a3;
  if (a2 == result)
  {
    if (a3 != a4)
    {
      do
      {
        BOOL result = Phase::SpatialModeler::WeightSingleReflection_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>((float *)v9, a7);
        unint64_t v32 = a5->u64[1];
        unint64_t v33 = a5[1].u64[0];
        if (v32 >= v33)
        {
          uint64_t v36 = (uint64_t)(v32 - a5->i64[0]) >> 5;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 59) {
LABEL_43:
          }
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          uint64_t v38 = v33 - a5->i64[0];
          if (v38 >> 4 > v37) {
            unint64_t v37 = v38 >> 4;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v39 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          uint64_t v53 = a5 + 1;
          if (v39) {
            int64x2_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>((uint64_t)a5[1].i64, v39);
          }
          else {
            int64x2_t v40 = 0;
          }
          unint64_t v41 = &v40[32 * v36];
          *(void *)unint64_t v41 = &unk_26D476928;
          long long v42 = *(_OWORD *)(v9 + 8);
          *((void *)v41 + 3) = *(void *)(v9 + 24);
          *(_OWORD *)(v41 + 8) = v42;
          uint64_t v43 = a5->i64[0];
          unint64_t v44 = a5->u64[1];
          if (v44 == a5->i64[0])
          {
            int64x2_t v48 = vdupq_n_s64(v44);
            uint64_t v46 = &v40[32 * v36];
          }
          else
          {
            uint64_t v45 = v41 - 32;
            uint64_t v46 = &v40[32 * v36];
            do
            {
              *((void *)v46 - 4) = &unk_26D476928;
              v46 -= 32;
              long long v47 = *(_OWORD *)(v44 - 24);
              *((void *)v46 + 3) = *(void *)(v44 - 8);
              *(_OWORD *)(v46 + 8) = v47;
              v45 -= 32;
              v44 -= 32;
            }
            while (v44 != v43);
            int64x2_t v48 = *a5;
          }
          long long v35 = v41 + 32;
          a5->i64[0] = (uint64_t)v46;
          a5->i64[1] = (uint64_t)(v41 + 32);
          int64x2_t v51 = v48;
          uint64_t v49 = a5[1].i64[0];
          a5[1].i64[0] = (uint64_t)&v40[32 * v39];
          uint64_t v52 = v49;
          uint64_t v50 = v48.i64[0];
          BOOL result = std::__split_buffer<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::~__split_buffer((uint64_t)&v50);
        }
        else
        {
          *(void *)unint64_t v32 = &unk_26D476928;
          long long v34 = *(_OWORD *)(v9 + 8);
          *(void *)(v32 + 24) = *(void *)(v9 + 24);
          *(_OWORD *)(v32 + 8) = v34;
          long long v35 = (char *)(v32 + 32);
        }
        a5->i64[1] = (uint64_t)v35;
        v9 += 32;
      }
      while (v9 != a4);
    }
  }
  else if (a4 == a3)
  {
    uint64_t v12 = result;
    do
    {
      BOOL result = Phase::SpatialModeler::WeightSingleReflection_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>((float *)v12, a6);
      unint64_t v13 = a5->u64[1];
      unint64_t v14 = a5[1].u64[0];
      if (v13 >= v14)
      {
        uint64_t v17 = (uint64_t)(v13 - a5->i64[0]) >> 5;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 59) {
          goto LABEL_43;
        }
        uint64_t v19 = v14 - a5->i64[0];
        if (v19 >> 4 > v18) {
          unint64_t v18 = v19 >> 4;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v20 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        uint64_t v53 = a5 + 1;
        if (v20) {
          unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>((uint64_t)a5[1].i64, v20);
        }
        else {
          unint64_t v21 = 0;
        }
        uint64_t v22 = &v21[32 * v17];
        *(void *)uint64_t v22 = &unk_26D476928;
        long long v23 = *(_OWORD *)(v12 + 8);
        *((void *)v22 + 3) = *(void *)(v12 + 24);
        *(_OWORD *)(v22 + 8) = v23;
        uint64_t v24 = a5->i64[0];
        unint64_t v25 = a5->u64[1];
        if (v25 == a5->i64[0])
        {
          int64x2_t v29 = vdupq_n_s64(v25);
          uint64_t v27 = &v21[32 * v17];
        }
        else
        {
          uint64_t v26 = v22 - 32;
          uint64_t v27 = &v21[32 * v17];
          do
          {
            *((void *)v27 - 4) = &unk_26D476928;
            v27 -= 32;
            long long v28 = *(_OWORD *)(v25 - 24);
            *((void *)v27 + 3) = *(void *)(v25 - 8);
            *(_OWORD *)(v27 + 8) = v28;
            v26 -= 32;
            v25 -= 32;
          }
          while (v25 != v24);
          int64x2_t v29 = *a5;
        }
        unint64_t v16 = v22 + 32;
        a5->i64[0] = (uint64_t)v27;
        a5->i64[1] = (uint64_t)(v22 + 32);
        int64x2_t v51 = v29;
        uint64_t v30 = a5[1].i64[0];
        a5[1].i64[0] = (uint64_t)&v21[32 * v20];
        uint64_t v52 = v30;
        uint64_t v50 = v29.i64[0];
        BOOL result = std::__split_buffer<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::~__split_buffer((uint64_t)&v50);
      }
      else
      {
        *(void *)unint64_t v13 = &unk_26D476928;
        long long v15 = *(_OWORD *)(v12 + 8);
        *(void *)(v13 + 24) = *(void *)(v12 + 24);
        *(_OWORD *)(v13 + 8) = v15;
        unint64_t v16 = (char *)(v13 + 32);
      }
      a5->i64[1] = (uint64_t)v16;
      v12 += 32;
    }
    while (v12 != a2);
  }
  return result;
}

uint64_t Phase::SpatialModeler::FindPairAndMerge<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(void *a1, uint64_t *a2, uint64_t *a3, void *a4, int64x2_t *a5, float a6, float a7)
{
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v13 = v12 - *a2;
  if (v12 == *a2)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = v13 >> 2;
    if (v16 <= 1) {
      unint64_t v16 = 1;
    }
    float v17 = -3.4028e38;
    do
    {
      if (*(float *)(v11 + 4 * v14) > v17)
      {
        uint64_t v15 = v14;
        float v17 = *(float *)(v11 + 4 * v14);
      }
      ++v14;
    }
    while (v16 != v14);
  }
  uint64_t v18 = *a1;
  uint64_t v19 = *a1 + 32 * v15;
  float v20 = *(float *)(v11 + 4 * v15);
  float v21 = *(float *)(v19 + 16);
  uint64_t v22 = *a3;
  uint64_t v23 = a3[1];
  uint64_t v24 = *a4;
  uint64_t v25 = Phase::SpatialModeler::GetNearestReflectionIndex<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(*a3, v23, v21);
  float v26 = *(float *)(v22 + 32 * v25 + 16);
  float v27 = v26 + 0.1;
  unint64_t v28 = Phase::SpatialModeler::GetNearestReflectionIndex<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(v22, v23, v26 + -0.1);
  unint64_t v29 = Phase::SpatialModeler::GetNearestReflectionIndex<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(v22, v23, v27);
  if (v28 <= v29)
  {
    uint64_t v30 = (float *)(v22 + 32 * v28 + 16);
    float v31 = 3.4028e38;
    do
    {
      float v32 = *v30;
      v30 += 8;
      float v33 = (float)((float)(*(float *)(v24 + 4 * v28) - v20) * (float)(*(float *)(v24 + 4 * v28) - v20))
          + (float)((float)((float)(v32 - v21) / 0.01) * (float)((float)(v32 - v21) / 0.01));
      if (v33 < v31)
      {
        uint64_t v25 = v28;
        float v31 = v33;
      }
      ++v28;
    }
    while (v28 <= v29);
  }
  HIDWORD(v104) = 0;
  uint64_t v105 = 0;
  float v34 = *(float *)(v19 + 12);
  long long v35 = (float *)(v22 + 32 * v25);
  float v36 = v35[3];
  if (vabds_f32(v34, v36) <= 180.0)
  {
    unint64_t v37 = a1;
  }
  else
  {
    unint64_t v37 = a1;
    if (v34 >= v36) {
      float v36 = v36 + 360.0;
    }
    else {
      float v34 = v34 + 360.0;
    }
  }
  float v38 = (float)(v36 * a7) + (float)(v34 * a6);
  if (v38 > 360.0) {
    float v38 = v38 + -360.0;
  }
  *((float *)&v104 + 1) = v38;
  uint64_t v39 = v18 + 32 * v15;
  *(float *)&long long v104 = (float)(v35[2] * a7) + (float)(*(float *)(v39 + 8) * a6);
  *((float *)&v104 + 2) = (float)(v35[4] * a7) + (float)(v21 * a6);
  if ((**(int (***)(uint64_t))v19)(v19) >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = v22 + 32 * v25 + 20;
    float v42 = 0.0;
    float v43 = 1.0;
    do
    {
      float v44 = *(float *)(v39 + 20 + 4 * v40);
      float v45 = fabsf(v44);
      float v46 = *(float *)(v41 + 4 * v40);
      float v47 = fabsf(v46);
      if (v46 == 0.0) {
        float v48 = COERCE_FLOAT(1);
      }
      else {
        float v48 = v47;
      }
      if (v46 < 0.0) {
        float v49 = -1.0;
      }
      else {
        float v49 = 1.0;
      }
      float v103 = v49;
      BOOL v50 = v44 < 0.0;
      if (v44 == 0.0) {
        float v51 = COERCE_FLOAT(1);
      }
      else {
        float v51 = v45;
      }
      if (v50) {
        float v52 = -1.0;
      }
      else {
        float v52 = 1.0;
      }
      float v53 = (float)((float)((float)(logf(v51) * 8.6859) / 10.0) * 10.0) * a6;
      float v54 = (float)((float)((float)(logf(v48) * 8.6859) / 10.0) * 10.0) * a7;
      *((float *)&v104 + v40 + 3) = expf((float)((float)((float)(v53 + v54) * 10.0) / 10.0) * 0.11513);
      if (v53 <= v42) {
        v55.n128_f32[0] = v43;
      }
      else {
        v55.n128_f32[0] = v52;
      }
      if (v53 <= v42) {
        float v56 = v42;
      }
      else {
        float v56 = v53;
      }
      if (v54 <= v56) {
        float v43 = v55.n128_f32[0];
      }
      else {
        float v43 = v103;
      }
      if (v54 <= v56) {
        float v42 = v56;
      }
      else {
        float v42 = v54;
      }
      ++v40;
    }
    while (v40 < (**(int (***)(uint64_t, __n128))v19)(v19, v55));
    *(float *)&uint64_t __B = v43;
    unint64_t v37 = a1;
    if (v43 < 0.0)
    {
      int v57 = (**(uint64_t (***)(uint64_t))v19)(v19);
      vDSP_vsmul((const float *)&v104 + 3, 1, (const float *)&__B, (float *)&v104 + 3, 1, v57);
    }
  }
  uint64_t result = (uint64_t)a5[1].i64;
  unint64_t v59 = a5[1].u64[0];
  unint64_t v60 = a5->u64[1];
  if (v60 >= v59)
  {
    uint64_t v64 = (uint64_t)(v60 - a5->i64[0]) >> 5;
    unint64_t v65 = v64 + 1;
    unint64_t v63 = a3;
    if ((unint64_t)(v64 + 1) >> 59) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v66 = v59 - a5->i64[0];
    if (v66 >> 4 > v65) {
      unint64_t v65 = v66 >> 4;
    }
    if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v67 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v65;
    }
    int v109 = a5 + 1;
    if (v67) {
      uint64_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>(result, v67);
    }
    else {
      uint64_t v68 = 0;
    }
    int64x2_t v69 = &v68[32 * v64];
    *(void *)int64x2_t v69 = &unk_26D476928;
    long long v70 = v104;
    *((void *)v69 + 3) = v105;
    *(_OWORD *)(v69 + 8) = v70;
    uint64_t v71 = a5->i64[0];
    unint64_t v72 = a5->u64[1];
    if (v72 == a5->i64[0])
    {
      int64x2_t v76 = vdupq_n_s64(v72);
      double v74 = &v68[32 * v64];
    }
    else
    {
      uint64_t v73 = v69 - 32;
      double v74 = &v68[32 * v64];
      do
      {
        *((void *)v74 - 4) = &unk_26D476928;
        v74 -= 32;
        long long v75 = *(_OWORD *)(v72 - 24);
        *((void *)v74 + 3) = *(void *)(v72 - 8);
        *(_OWORD *)(v74 + 8) = v75;
        v73 -= 32;
        v72 -= 32;
      }
      while (v72 != v71);
      int64x2_t v76 = *a5;
    }
    float v62 = v69 + 32;
    a5->i64[0] = (uint64_t)v74;
    a5->i64[1] = (uint64_t)(v69 + 32);
    int64x2_t v107 = v76;
    uint64_t v77 = a5[1].i64[0];
    a5[1].i64[0] = (uint64_t)&v68[32 * v67];
    uint64_t v108 = v77;
    uint64_t __B = v76.i64[0];
    uint64_t result = std::__split_buffer<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::~__split_buffer((uint64_t)&__B);
  }
  else
  {
    *(void *)unint64_t v60 = &unk_26D476928;
    long long v61 = v104;
    *(void *)(v60 + 24) = v105;
    *(_OWORD *)(v60 + 8) = v61;
    float v62 = (char *)(v60 + 32);
    unint64_t v63 = a3;
  }
  a5->i64[1] = (uint64_t)v62;
  uint64_t v78 = v37[1];
  uint64_t v79 = *v37 + 32 * v15;
  uint64_t v80 = v79 + 32;
  if (v79 + 32 != v78)
  {
    do
    {
      *(_OWORD *)(v80 - 24) = *(_OWORD *)(v80 + 8);
      *(void *)(v80 - 8) = *(void *)(v80 + 24);
      v80 += 32;
      v79 += 32;
    }
    while (v80 != v78);
    uint64_t v80 = v37[1];
  }
  if (v80 != v79)
  {
    uint64_t v81 = v80 - 32;
    __int16 v82 = (void *)(v80 - 32);
    double v83 = (void *)(v80 - 32);
    do
    {
      uint64_t v84 = *v83;
      v83 -= 4;
      uint64_t result = (*(uint64_t (**)(void *))(v84 + 16))(v82);
      v81 -= 32;
      BOOL v85 = v82 == (void *)v79;
      __int16 v82 = v83;
    }
    while (!v85);
  }
  v37[1] = v79;
  uint64_t v86 = a2[1];
  uint64_t v87 = *a2 + 4 * v15;
  uint64_t v88 = v86 - (v87 + 4);
  if (v86 != v87 + 4) {
    uint64_t result = (uint64_t)memmove((void *)(*a2 + 4 * v15), (const void *)(v87 + 4), v86 - (v87 + 4));
  }
  a2[1] = v87 + v88;
  uint64_t v89 = v63[1];
  uint64_t v90 = *v63 + 32 * v25;
  uint64_t v91 = v90 + 32;
  if (v90 + 32 != v89)
  {
    do
    {
      *(_OWORD *)(v91 - 24) = *(_OWORD *)(v91 + 8);
      *(void *)(v91 - 8) = *(void *)(v91 + 24);
      v91 += 32;
      v90 += 32;
    }
    while (v91 != v89);
    uint64_t v91 = v63[1];
  }
  if (v91 != v90)
  {
    uint64_t v92 = v91 - 32;
    uint64_t v93 = (void *)(v91 - 32);
    __int16 v94 = (void *)(v91 - 32);
    do
    {
      uint64_t v95 = *v94;
      v94 -= 4;
      uint64_t result = (*(uint64_t (**)(void *))(v95 + 16))(v93);
      v92 -= 32;
      BOOL v85 = v93 == (void *)v90;
      uint64_t v93 = v94;
    }
    while (!v85);
  }
  v63[1] = v90;
  __int16 v96 = a4;
  uint64_t v97 = a4[1];
  uint64_t v98 = *a4 + 4 * v25;
  uint64_t v99 = v97 - (v98 + 4);
  if (v97 != v98 + 4)
  {
    uint64_t result = (uint64_t)memmove((void *)v98, (const void *)(v98 + 4), v97 - (v98 + 4));
    __int16 v96 = a4;
  }
  v96[1] = v98 + v99;
  return result;
}

uint64_t Phase::SpatialModeler::WeightSingleReflection_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(float *a1, float a2)
{
  float v3 = expf((float)((float)((float)((float)(a2 * 60.0) + -60.0) * 10.0) / 10.0) * 0.11513);
  uint64_t result = (**(uint64_t (***)(float *))a1)(a1);
  if ((int)result >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      a1[v5 + 5] = v3 * a1[v5 + 5];
      ++v5;
      uint64_t result = (**(uint64_t (***)(float *))a1)(a1);
    }
    while (v5 < (int)result);
  }
  return result;
}

uint64_t Phase::SpatialModeler::GetNearestReflectionIndex<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(uint64_t a1, uint64_t a2, float a3)
{
  unint64_t v3 = (unint64_t)(a2 - a1) >> 5;
  int v4 = v3 - 1;
  if ((int)v3 >= 3)
  {
    int v5 = 0;
    int v6 = v3 - 1;
    while (1)
    {
      float v7 = *(float *)(a1 + 32 * v5 + 16);
      float v8 = *(float *)(a1 + 32 * v6 + 16);
      float v9 = v7 - v8;
      if ((float)(v7 - v8) < 0.0) {
        float v9 = -(float)(v7 - v8);
      }
      float v10 = fminf(fmaxf((float)(a3 - v7) / (float)(v8 - v7), 0.0), 1.0);
      BOOL v11 = v7 <= a3;
      if (v7 >= a3) {
        float v12 = 0.5;
      }
      else {
        float v12 = 1.0;
      }
      if (!v11) {
        float v12 = 0.0;
      }
      if (v9 > 0.00000011921) {
        float v12 = v10;
      }
      int v13 = llroundf((float)(v12 * (float)v6) + (float)((float)(1.0 - v12) * (float)v5));
      float v14 = *(float *)(a1 + 32 * v13 + 16);
      if (v14 == a3)
      {
        LODWORD(v16) = v13;
        goto LABEL_23;
      }
      if (v14 >= a3)
      {
        uint64_t v16 = (v13 - 1);
        if (v13 < 1)
        {
          LODWORD(v16) = 0;
          int v13 = 0;
          goto LABEL_23;
        }
        int v6 = v13 - 1;
        if (*(float *)(a1 + 32 * v16 + 16) < a3) {
          goto LABEL_23;
        }
      }
      else
      {
        if (v4 <= v13)
        {
          LODWORD(v16) = v4;
          goto LABEL_22;
        }
        int v5 = v13 + 1;
        float v15 = *(float *)(a1 + 32 * (v13 + 1) + 16);
        LODWORD(v16) = v13++;
        if (v15 > a3) {
          goto LABEL_23;
        }
      }
      LODWORD(v16) = v5;
      int v13 = v6;
      if (v6 <= v5 + 1) {
        goto LABEL_23;
      }
    }
  }
  LODWORD(v16) = 0;
LABEL_22:
  int v13 = v4;
LABEL_23:
  float v17 = *(float *)(a1 + 32 * (int)v16 + 16);
  float v18 = *(float *)(a1 + 32 * v13 + 16);
  float v19 = v17 - v18;
  if ((float)(v17 - v18) < 0.0) {
    float v19 = -(float)(v17 - v18);
  }
  float v20 = fminf(fmaxf((float)(a3 - v17) / (float)(v18 - v17), 0.0), 1.0);
  BOOL v21 = v17 < a3;
  BOOL v22 = v17 <= a3;
  float v23 = 0.5;
  if (v21) {
    float v23 = 1.0;
  }
  if (!v22) {
    float v23 = 0.0;
  }
  if (v19 > 0.00000011921) {
    float v23 = v20;
  }
  return (int)llroundf((float)(v23 * (float)(int)v16) + (float)((float)(1.0 - v23) * (float)v13));
}

void *std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band*,Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v4 = result;
    if (a4 >> 59) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::GraphDescriptionNode>>((uint64_t)(result + 2), a4);
    *int v4 = result;
    v4[1] = result;
    v4[2] = &result[4 * v7];
    if (a2 != a3)
    {
      float v8 = result;
      do
      {
        *float v8 = &unk_26D476928;
        long long v9 = *(_OWORD *)(a2 + 8);
        v8[3] = *(void *)(a2 + 24);
        *(_OWORD *)(v8 + 1) = v9;
        a2 += 32;
        result += 4;
        v8 += 4;
      }
      while (a2 != a3);
    }
    v4[1] = result;
  }
  return result;
}

void sub_221FB3FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void Phase::SpatialModeler::PrecalculateDbLevels<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(uint64_t a1, uint64_t a2, float **a3)
{
  a3[1] = *a3;
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    uint64_t v6 = (uint64_t)(a3 + 2);
    do
    {
      float __C = 0.0;
      int v7 = (**(uint64_t (***)(uint64_t))v5)(v5);
      vDSP_measqv((const float *)(v5 + 20), 1, &__C, v7);
      float v8 = log10f(__C + 1.1755e-38) * 10.0;
      float v10 = a3[1];
      unint64_t v9 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v9)
      {
        float v12 = *a3;
        uint64_t v13 = v10 - *a3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v9 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v16);
          float v12 = *a3;
          float v10 = a3[1];
        }
        else
        {
          float v17 = 0;
        }
        float v18 = (float *)&v17[4 * v13];
        *float v18 = v8;
        BOOL v11 = v18 + 1;
        while (v10 != v12)
        {
          int v19 = *((_DWORD *)v10-- - 1);
          *((_DWORD *)v18-- - 1) = v19;
        }
        *a3 = v18;
        a3[1] = v11;
        a3[2] = (float *)&v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *float v10 = v8;
        BOOL v11 = v10 + 1;
      }
      a3[1] = v11;
      v5 += 64;
    }
    while (v5 != a2);
  }
}

uint64_t Phase::SpatialModeler::TerminateAndWeightRemainder_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int64x2_t *a5, float a6, float a7)
{
  uint64_t v9 = a3;
  if (a2 == result)
  {
    if (a3 != a4)
    {
      do
      {
        uint64_t result = Phase::SpatialModeler::WeightSingleReflection_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>((float *)v9, a7);
        unint64_t v38 = a5->u64[1];
        unint64_t v39 = a5[1].u64[0];
        if (v38 >= v39)
        {
          uint64_t v44 = (uint64_t)(v38 - a5->i64[0]) >> 6;
          unint64_t v45 = v44 + 1;
          if ((unint64_t)(v44 + 1) >> 58) {
LABEL_43:
          }
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          uint64_t v46 = v39 - a5->i64[0];
          if (v46 >> 5 > v45) {
            unint64_t v45 = v46 >> 5;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFC0) {
            unint64_t v47 = 0x3FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v45;
          }
          unint64_t v65 = a5 + 1;
          if (v47) {
            float v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>>((uint64_t)a5[1].i64, v47);
          }
          else {
            float v48 = 0;
          }
          float v49 = &v48[64 * v44];
          *(void *)float v49 = &unk_26D476958;
          long long v50 = *(_OWORD *)(v9 + 8);
          long long v51 = *(_OWORD *)(v9 + 24);
          long long v52 = *(_OWORD *)(v9 + 40);
          *((_DWORD *)v49 + 14) = *(_DWORD *)(v9 + 56);
          *(_OWORD *)(v49 + 40) = v52;
          *(_OWORD *)(v49 + 24) = v51;
          *(_OWORD *)(v49 + 8) = v50;
          uint64_t v53 = a5->i64[0];
          unint64_t v54 = a5->u64[1];
          if (v54 == a5->i64[0])
          {
            int64x2_t v60 = vdupq_n_s64(v54);
            float v56 = &v48[64 * v44];
          }
          else
          {
            __n128 v55 = v49 - 64;
            float v56 = &v48[64 * v44];
            do
            {
              *((void *)v56 - 8) = &unk_26D476958;
              v56 -= 64;
              long long v57 = *(_OWORD *)(v54 - 56);
              long long v58 = *(_OWORD *)(v54 - 40);
              long long v59 = *(_OWORD *)(v54 - 24);
              *((_DWORD *)v56 + 14) = *(_DWORD *)(v54 - 8);
              *(_OWORD *)(v56 + 40) = v59;
              *(_OWORD *)(v56 + 24) = v58;
              *(_OWORD *)(v56 + 8) = v57;
              v55 -= 64;
              v54 -= 64;
            }
            while (v54 != v53);
            int64x2_t v60 = *a5;
          }
          float v43 = v49 + 64;
          a5->i64[0] = (uint64_t)v56;
          a5->i64[1] = (uint64_t)(v49 + 64);
          int64x2_t v63 = v60;
          uint64_t v61 = a5[1].i64[0];
          a5[1].i64[0] = (uint64_t)&v48[64 * v47];
          uint64_t v64 = v61;
          uint64_t v62 = v60.i64[0];
          uint64_t result = std::__split_buffer<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>::~__split_buffer((uint64_t)&v62);
        }
        else
        {
          *(void *)unint64_t v38 = &unk_26D476958;
          long long v40 = *(_OWORD *)(v9 + 8);
          long long v41 = *(_OWORD *)(v9 + 24);
          long long v42 = *(_OWORD *)(v9 + 40);
          *(_DWORD *)(v38 + 56) = *(_DWORD *)(v9 + 56);
          *(_OWORD *)(v38 + 40) = v42;
          *(_OWORD *)(v38 + 24) = v41;
          *(_OWORD *)(v38 + 8) = v40;
          float v43 = (char *)(v38 + 64);
        }
        a5->i64[1] = (uint64_t)v43;
        v9 += 64;
      }
      while (v9 != a4);
    }
  }
  else if (a4 == a3)
  {
    uint64_t v12 = result;
    do
    {
      uint64_t result = Phase::SpatialModeler::WeightSingleReflection_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>((float *)v12, a6);
      unint64_t v13 = a5->u64[1];
      unint64_t v14 = a5[1].u64[0];
      if (v13 >= v14)
      {
        uint64_t v19 = (uint64_t)(v13 - a5->i64[0]) >> 6;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 58) {
          goto LABEL_43;
        }
        uint64_t v21 = v14 - a5->i64[0];
        if (v21 >> 5 > v20) {
          unint64_t v20 = v21 >> 5;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v22 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        unint64_t v65 = a5 + 1;
        if (v22) {
          float v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>>((uint64_t)a5[1].i64, v22);
        }
        else {
          float v23 = 0;
        }
        uint64_t v24 = &v23[64 * v19];
        *(void *)uint64_t v24 = &unk_26D476958;
        long long v25 = *(_OWORD *)(v12 + 8);
        long long v26 = *(_OWORD *)(v12 + 24);
        long long v27 = *(_OWORD *)(v12 + 40);
        *((_DWORD *)v24 + 14) = *(_DWORD *)(v12 + 56);
        *(_OWORD *)(v24 + 40) = v27;
        *(_OWORD *)(v24 + 24) = v26;
        *(_OWORD *)(v24 + 8) = v25;
        uint64_t v28 = a5->i64[0];
        unint64_t v29 = a5->u64[1];
        if (v29 == a5->i64[0])
        {
          int64x2_t v35 = vdupq_n_s64(v29);
          float v31 = &v23[64 * v19];
        }
        else
        {
          uint64_t v30 = v24 - 64;
          float v31 = &v23[64 * v19];
          do
          {
            *((void *)v31 - 8) = &unk_26D476958;
            v31 -= 64;
            long long v32 = *(_OWORD *)(v29 - 56);
            long long v33 = *(_OWORD *)(v29 - 40);
            long long v34 = *(_OWORD *)(v29 - 24);
            *((_DWORD *)v31 + 14) = *(_DWORD *)(v29 - 8);
            *(_OWORD *)(v31 + 40) = v34;
            *(_OWORD *)(v31 + 24) = v33;
            *(_OWORD *)(v31 + 8) = v32;
            v30 -= 64;
            v29 -= 64;
          }
          while (v29 != v28);
          int64x2_t v35 = *a5;
        }
        float v18 = v24 + 64;
        a5->i64[0] = (uint64_t)v31;
        a5->i64[1] = (uint64_t)(v24 + 64);
        int64x2_t v63 = v35;
        uint64_t v36 = a5[1].i64[0];
        a5[1].i64[0] = (uint64_t)&v23[64 * v22];
        uint64_t v64 = v36;
        uint64_t v62 = v35.i64[0];
        uint64_t result = std::__split_buffer<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>::~__split_buffer((uint64_t)&v62);
      }
      else
      {
        *(void *)unint64_t v13 = &unk_26D476958;
        long long v15 = *(_OWORD *)(v12 + 8);
        long long v16 = *(_OWORD *)(v12 + 24);
        long long v17 = *(_OWORD *)(v12 + 40);
        *(_DWORD *)(v13 + 56) = *(_DWORD *)(v12 + 56);
        *(_OWORD *)(v13 + 40) = v17;
        *(_OWORD *)(v13 + 24) = v16;
        *(_OWORD *)(v13 + 8) = v15;
        float v18 = (char *)(v13 + 64);
      }
      a5->i64[1] = (uint64_t)v18;
      v12 += 64;
    }
    while (v12 != a2);
  }
  return result;
}

uint64_t Phase::SpatialModeler::FindPairAndMerge<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(void *a1, uint64_t *a2, uint64_t *a3, void *a4, int64x2_t *a5, float a6, float a7)
{
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v13 = v12 - *a2;
  if (v12 == *a2)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = v13 >> 2;
    if (v16 <= 1) {
      unint64_t v16 = 1;
    }
    float v17 = -3.4028e38;
    do
    {
      if (*(float *)(v11 + 4 * v14) > v17)
      {
        uint64_t v15 = v14;
        float v17 = *(float *)(v11 + 4 * v14);
      }
      ++v14;
    }
    while (v16 != v14);
  }
  uint64_t v18 = *a1;
  uint64_t v19 = *a1 + (v15 << 6);
  float v20 = *(float *)(v11 + 4 * v15);
  float v21 = *(float *)(v19 + 16);
  uint64_t v22 = *a3;
  uint64_t v23 = a3[1];
  uint64_t v24 = *a4;
  uint64_t v25 = Phase::SpatialModeler::GetNearestReflectionIndex<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(*a3, v23, v21);
  float v26 = *(float *)(v22 + (v25 << 6) + 16);
  float v27 = v26 + 0.1;
  unint64_t v28 = Phase::SpatialModeler::GetNearestReflectionIndex<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(v22, v23, v26 + -0.1);
  unint64_t v29 = Phase::SpatialModeler::GetNearestReflectionIndex<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(v22, v23, v27);
  if (v28 <= v29)
  {
    uint64_t v30 = (float *)(v22 + (v28 << 6) + 16);
    float v31 = 3.4028e38;
    do
    {
      float v32 = *v30;
      v30 += 16;
      float v33 = (float)((float)(*(float *)(v24 + 4 * v28) - v20) * (float)(*(float *)(v24 + 4 * v28) - v20))
          + (float)((float)((float)(v32 - v21) / 0.01) * (float)((float)(v32 - v21) / 0.01));
      if (v33 < v31)
      {
        uint64_t v25 = v28;
        float v31 = v33;
      }
      ++v28;
    }
    while (v28 <= v29);
  }
  memset(&v110[8], 0, 44);
  float v34 = *(float *)(v19 + 12);
  int64x2_t v35 = (float *)(v22 + (v25 << 6));
  float v36 = v35[3];
  if (vabds_f32(v34, v36) <= 180.0)
  {
    unint64_t v37 = a1;
  }
  else
  {
    unint64_t v37 = a1;
    if (v34 >= v36) {
      float v36 = v36 + 360.0;
    }
    else {
      float v34 = v34 + 360.0;
    }
  }
  float v38 = (float)(v36 * a7) + (float)(v34 * a6);
  if (v38 > 360.0) {
    float v38 = v38 + -360.0;
  }
  *(float *)&v110[4] = v38;
  uint64_t v39 = v18 + (v15 << 6);
  *(float *)uint64_t v110 = (float)(v35[2] * a7) + (float)(*(float *)(v39 + 8) * a6);
  *(float *)&v110[8] = (float)(v35[4] * a7) + (float)(v21 * a6);
  if ((**(int (***)(uint64_t))v19)(v19) >= 1)
  {
    uint64_t v40 = 0;
    uint64_t v41 = v22 + (v25 << 6) + 20;
    float v42 = 0.0;
    float v43 = 1.0;
    do
    {
      float v44 = *(float *)(v39 + 20 + 4 * v40);
      float v45 = fabsf(v44);
      float v46 = *(float *)(v41 + 4 * v40);
      float v47 = fabsf(v46);
      if (v46 == 0.0) {
        float v48 = COERCE_FLOAT(1);
      }
      else {
        float v48 = v47;
      }
      if (v46 < 0.0) {
        float v49 = -1.0;
      }
      else {
        float v49 = 1.0;
      }
      float v109 = v49;
      BOOL v50 = v44 < 0.0;
      if (v44 == 0.0) {
        float v51 = COERCE_FLOAT(1);
      }
      else {
        float v51 = v45;
      }
      if (v50) {
        float v52 = -1.0;
      }
      else {
        float v52 = 1.0;
      }
      float v53 = (float)((float)((float)(logf(v51) * 8.6859) / 10.0) * 10.0) * a6;
      float v54 = (float)((float)((float)(logf(v48) * 8.6859) / 10.0) * 10.0) * a7;
      *(float *)&v110[4 * v40 + 12] = expf((float)((float)((float)(v53 + v54) * 10.0) / 10.0) * 0.11513);
      if (v53 <= v42) {
        v55.n128_f32[0] = v43;
      }
      else {
        v55.n128_f32[0] = v52;
      }
      if (v53 <= v42) {
        float v56 = v42;
      }
      else {
        float v56 = v53;
      }
      if (v54 <= v56) {
        float v43 = v55.n128_f32[0];
      }
      else {
        float v43 = v109;
      }
      if (v54 <= v56) {
        float v42 = v56;
      }
      else {
        float v42 = v54;
      }
      ++v40;
    }
    while (v40 < (**(int (***)(uint64_t, __n128))v19)(v19, v55));
    *(float *)&uint64_t __B = v43;
    unint64_t v37 = a1;
    if (v43 < 0.0)
    {
      int v57 = (**(uint64_t (***)(uint64_t))v19)(v19);
      vDSP_vsmul((const float *)&v110[12], 1, (const float *)&__B, (float *)&v110[12], 1, v57);
    }
  }
  uint64_t result = (uint64_t)a5[1].i64;
  unint64_t v59 = a5[1].u64[0];
  unint64_t v60 = a5->u64[1];
  if (v60 >= v59)
  {
    uint64_t v66 = (uint64_t)(v60 - a5->i64[0]) >> 6;
    unint64_t v67 = v66 + 1;
    unint64_t v65 = a3;
    if ((unint64_t)(v66 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v68 = v59 - a5->i64[0];
    if (v68 >> 5 > v67) {
      unint64_t v67 = v68 >> 5;
    }
    if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v69 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v69 = v67;
    }
    unint64_t v114 = a5 + 1;
    if (v69) {
      long long v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>>(result, v69);
    }
    else {
      long long v70 = 0;
    }
    uint64_t v71 = &v70[64 * v66];
    *(void *)uint64_t v71 = &unk_26D476958;
    long long v72 = *(_OWORD *)v110;
    long long v73 = *(_OWORD *)&v110[16];
    long long v74 = *(_OWORD *)&v110[32];
    *((_DWORD *)v71 + 14) = *(_DWORD *)&v110[48];
    *(_OWORD *)(v71 + 40) = v74;
    *(_OWORD *)(v71 + 24) = v73;
    *(_OWORD *)(v71 + 8) = v72;
    uint64_t v75 = a5->i64[0];
    unint64_t v76 = a5->u64[1];
    if (v76 == a5->i64[0])
    {
      int64x2_t v82 = vdupq_n_s64(v76);
      uint64_t v78 = &v70[64 * v66];
    }
    else
    {
      uint64_t v77 = v71 - 64;
      uint64_t v78 = &v70[64 * v66];
      do
      {
        *((void *)v78 - 8) = &unk_26D476958;
        v78 -= 64;
        long long v79 = *(_OWORD *)(v76 - 56);
        long long v80 = *(_OWORD *)(v76 - 40);
        long long v81 = *(_OWORD *)(v76 - 24);
        *((_DWORD *)v78 + 14) = *(_DWORD *)(v76 - 8);
        *(_OWORD *)(v78 + 40) = v81;
        *(_OWORD *)(v78 + 24) = v80;
        *(_OWORD *)(v78 + 8) = v79;
        v77 -= 64;
        v76 -= 64;
      }
      while (v76 != v75);
      int64x2_t v82 = *a5;
    }
    uint64_t v64 = v71 + 64;
    a5->i64[0] = (uint64_t)v78;
    a5->i64[1] = (uint64_t)(v71 + 64);
    int64x2_t v112 = v82;
    uint64_t v83 = a5[1].i64[0];
    a5[1].i64[0] = (uint64_t)&v70[64 * v69];
    uint64_t v113 = v83;
    uint64_t __B = v82.i64[0];
    uint64_t result = std::__split_buffer<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>::~__split_buffer((uint64_t)&__B);
  }
  else
  {
    *(void *)unint64_t v60 = &unk_26D476958;
    long long v61 = *(_OWORD *)v110;
    long long v62 = *(_OWORD *)&v110[16];
    long long v63 = *(_OWORD *)&v110[32];
    *(_DWORD *)(v60 + 56) = *(_DWORD *)&v110[48];
    *(_OWORD *)(v60 + 40) = v63;
    *(_OWORD *)(v60 + 24) = v62;
    *(_OWORD *)(v60 + 8) = v61;
    uint64_t v64 = (char *)(v60 + 64);
    unint64_t v65 = a3;
  }
  a5->i64[1] = (uint64_t)v64;
  uint64_t v84 = (void *)v37[1];
  BOOL v85 = (void *)(*v37 + (v15 << 6));
  uint64_t v86 = v85 + 8;
  if (v85 + 8 != v84)
  {
    do
    {
      *(_OWORD *)(v86 - 7) = *(_OWORD *)(v86 + 1);
      *(_OWORD *)(v86 - 5) = *(_OWORD *)(v86 + 3);
      *(_OWORD *)(v86 - 3) = *(_OWORD *)(v86 + 5);
      *((_DWORD *)v86 - 2) = *((_DWORD *)v86 + 14);
      v86 += 8;
      v85 += 8;
    }
    while (v86 != v84);
    uint64_t v86 = (void *)v37[1];
  }
  if (v86 != v85)
  {
    uint64_t v87 = v86 - 8;
    uint64_t v88 = v86 - 8;
    uint64_t v89 = v86 - 8;
    do
    {
      uint64_t v90 = *v89;
      v89 -= 8;
      uint64_t result = (*(uint64_t (**)(void *))(v90 + 16))(v88);
      v87 -= 8;
      BOOL v91 = v88 == v85;
      uint64_t v88 = v89;
    }
    while (!v91);
  }
  v37[1] = v85;
  uint64_t v92 = a2[1];
  uint64_t v93 = *a2 + 4 * v15;
  uint64_t v94 = v92 - (v93 + 4);
  if (v92 != v93 + 4) {
    uint64_t result = (uint64_t)memmove((void *)(*a2 + 4 * v15), (const void *)(v93 + 4), v92 - (v93 + 4));
  }
  a2[1] = v93 + v94;
  uint64_t v95 = v65[1];
  uint64_t v96 = *v65 + (v25 << 6);
  uint64_t v97 = v96 + 64;
  if (v96 + 64 != v95)
  {
    do
    {
      *(_OWORD *)(v97 - 56) = *(_OWORD *)(v97 + 8);
      *(_OWORD *)(v97 - 40) = *(_OWORD *)(v97 + 24);
      *(_OWORD *)(v97 - 24) = *(_OWORD *)(v97 + 40);
      *(_DWORD *)(v97 - 8) = *(_DWORD *)(v97 + 56);
      v97 += 64;
      v96 += 64;
    }
    while (v97 != v95);
    uint64_t v97 = v65[1];
  }
  if (v97 != v96)
  {
    uint64_t v98 = v97 - 64;
    uint64_t v99 = (void *)(v97 - 64);
    int64_t v100 = (void *)(v97 - 64);
    do
    {
      uint64_t v101 = *v100;
      v100 -= 8;
      uint64_t result = (*(uint64_t (**)(void *))(v101 + 16))(v99);
      v98 -= 64;
      BOOL v91 = v99 == (void *)v96;
      uint64_t v99 = v100;
    }
    while (!v91);
  }
  v65[1] = v96;
  int64_t v102 = a4;
  uint64_t v103 = a4[1];
  uint64_t v104 = *a4 + 4 * v25;
  uint64_t v105 = v103 - (v104 + 4);
  if (v103 != v104 + 4)
  {
    uint64_t result = (uint64_t)memmove((void *)v104, (const void *)(v104 + 4), v103 - (v104 + 4));
    int64_t v102 = a4;
  }
  v102[1] = v104 + v105;
  return result;
}

uint64_t Phase::SpatialModeler::GetNearestReflectionIndex<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>(uint64_t a1, uint64_t a2, float a3)
{
  unint64_t v3 = (unint64_t)(a2 - a1) >> 6;
  int v4 = v3 - 1;
  if ((int)v3 >= 3)
  {
    int v5 = 0;
    int v6 = v3 - 1;
    while (1)
    {
      float v7 = *(float *)(a1 + ((uint64_t)v5 << 6) + 16);
      float v8 = *(float *)(a1 + ((uint64_t)v6 << 6) + 16);
      float v9 = v7 - v8;
      if ((float)(v7 - v8) < 0.0) {
        float v9 = -(float)(v7 - v8);
      }
      float v10 = fminf(fmaxf((float)(a3 - v7) / (float)(v8 - v7), 0.0), 1.0);
      BOOL v11 = v7 <= a3;
      if (v7 >= a3) {
        float v12 = 0.5;
      }
      else {
        float v12 = 1.0;
      }
      if (!v11) {
        float v12 = 0.0;
      }
      if (v9 > 0.00000011921) {
        float v12 = v10;
      }
      int v13 = llroundf((float)(v12 * (float)v6) + (float)((float)(1.0 - v12) * (float)v5));
      float v14 = *(float *)(a1 + ((uint64_t)v13 << 6) + 16);
      if (v14 == a3)
      {
        LODWORD(v16) = v13;
        goto LABEL_23;
      }
      if (v14 >= a3)
      {
        uint64_t v16 = (v13 - 1);
        if (v13 < 1)
        {
          LODWORD(v16) = 0;
          int v13 = 0;
          goto LABEL_23;
        }
        int v6 = v13 - 1;
        if (*(float *)(a1 + (v16 << 6) + 16) < a3) {
          goto LABEL_23;
        }
      }
      else
      {
        if (v4 <= v13)
        {
          LODWORD(v16) = v4;
          goto LABEL_22;
        }
        int v5 = v13 + 1;
        float v15 = *(float *)(a1 + ((v13 + 1) << 6) + 16);
        LODWORD(v16) = v13++;
        if (v15 > a3) {
          goto LABEL_23;
        }
      }
      LODWORD(v16) = v5;
      int v13 = v6;
      if (v6 <= v5 + 1) {
        goto LABEL_23;
      }
    }
  }
  LODWORD(v16) = 0;
LABEL_22:
  int v13 = v4;
LABEL_23:
  float v17 = *(float *)(a1 + ((uint64_t)(int)v16 << 6) + 16);
  float v18 = *(float *)(a1 + ((uint64_t)v13 << 6) + 16);
  float v19 = v17 - v18;
  if ((float)(v17 - v18) < 0.0) {
    float v19 = -(float)(v17 - v18);
  }
  float v20 = fminf(fmaxf((float)(a3 - v17) / (float)(v18 - v17), 0.0), 1.0);
  BOOL v21 = v17 < a3;
  BOOL v22 = v17 <= a3;
  float v23 = 0.5;
  if (v21) {
    float v23 = 1.0;
  }
  if (!v22) {
    float v23 = 0.0;
  }
  if (v19 > 0.00000011921) {
    float v23 = v20;
  }
  return (int)llroundf((float)(v23 * (float)(int)v16) + (float)((float)(1.0 - v23) * (float)v13));
}

void *std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave*,Phase::SpatialModeler::PhaseSpatialModelerMetadata_Octave*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v4 = result;
    if (a4 >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::SegmentInternal>>((uint64_t)(result + 2), a4);
    *int v4 = result;
    v4[1] = result;
    v4[2] = &result[8 * v7];
    if (a2 != a3)
    {
      float v8 = result;
      do
      {
        *float v8 = &unk_26D476958;
        long long v9 = *(_OWORD *)(a2 + 8);
        long long v10 = *(_OWORD *)(a2 + 24);
        long long v11 = *(_OWORD *)(a2 + 40);
        *((_DWORD *)v8 + 14) = *(_DWORD *)(a2 + 56);
        *(_OWORD *)(v8 + 5) = v11;
        *(_OWORD *)(v8 + 3) = v10;
        *(_OWORD *)(v8 + 1) = v9;
        a2 += 64;
        result += 8;
        v8 += 8;
      }
      while (a2 != a3);
    }
    v4[1] = result;
  }
  return result;
}

void sub_221FB4EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void Phase::SpatialModeler::PrecalculateDbLevels<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(uint64_t a1, uint64_t a2, float **a3)
{
  a3[1] = *a3;
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    uint64_t v6 = (uint64_t)(a3 + 2);
    do
    {
      float __C = 0.0;
      int v7 = (**(uint64_t (***)(uint64_t))v5)(v5);
      vDSP_measqv((const float *)(v5 + 20), 1, &__C, v7);
      float v8 = log10f(__C + 1.1755e-38) * 10.0;
      long long v10 = a3[1];
      unint64_t v9 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v9)
      {
        float v12 = *a3;
        uint64_t v13 = v10 - *a3;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<float>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = v9 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v16);
          float v12 = *a3;
          long long v10 = a3[1];
        }
        else
        {
          float v17 = 0;
        }
        float v18 = (float *)&v17[4 * v13];
        *float v18 = v8;
        long long v11 = v18 + 1;
        while (v10 != v12)
        {
          int v19 = *((_DWORD *)v10-- - 1);
          *((_DWORD *)v18-- - 1) = v19;
        }
        *a3 = v18;
        a3[1] = v11;
        a3[2] = (float *)&v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *long long v10 = v8;
        long long v11 = v10 + 1;
      }
      a3[1] = v11;
      v5 += 144;
    }
    while (v5 != a2);
  }
}

uint64_t Phase::SpatialModeler::TerminateAndWeightRemainder_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(uint64_t result, float *a2, float *a3, float *a4, char **a5, float a6, float a7)
{
  unint64_t v9 = a3;
  if (a2 == (float *)result)
  {
    if (a3 != a4)
    {
      do
      {
        Phase::SpatialModeler::WeightSingleReflection_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(v9, a7);
        uint64_t result = std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::push_back[abi:ne180100](a5, (uint64_t)v9);
        v9 += 36;
      }
      while (v9 != a4);
    }
  }
  else if (a4 == a3)
  {
    float v12 = (float *)result;
    do
    {
      Phase::SpatialModeler::WeightSingleReflection_dBDomain<Phase::SpatialModeler::PhaseSpatialModelerMetadata_3Band>(v12, a6);
      uint64_t result = std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::push_back[abi:ne180100](a5, (uint64_t)v12);
      v12 += 36;
    }
    while (v12 != a2);
  }
  return result;
}

uint64_t Phase::SpatialModeler::FindPairAndMerge<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(void *a1, uint64_t *a2, uint64_t *a3, void *a4, int64x2_t *a5, float a6, float a7)
{
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v13 = v12 - *a2;
  if (v12 == *a2)
  {
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    unint64_t v16 = v13 >> 2;
    if (v16 <= 1) {
      unint64_t v16 = 1;
    }
    float v17 = -3.4028e38;
    do
    {
      if (*(float *)(v11 + 4 * v14) > v17)
      {
        uint64_t v15 = v14;
        float v17 = *(float *)(v11 + 4 * v14);
      }
      ++v14;
    }
    while (v16 != v14);
  }
  uint64_t v18 = *a1;
  uint64_t v19 = *a1 + 144 * v15;
  float v20 = *(float *)(v11 + 4 * v15);
  float v21 = *(float *)(v19 + 16);
  uint64_t v22 = *a3;
  uint64_t v23 = a3[1];
  uint64_t v24 = *a4;
  uint64_t v25 = Phase::SpatialModeler::GetNearestReflectionIndex<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(*a3, v23, v21);
  float v26 = *(float *)(v22 + 144 * v25 + 16);
  float v27 = v26 + 0.1;
  unint64_t v28 = Phase::SpatialModeler::GetNearestReflectionIndex<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(v22, v23, v26 + -0.1);
  unint64_t v29 = Phase::SpatialModeler::GetNearestReflectionIndex<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(v22, v23, v27);
  if (v28 <= v29)
  {
    uint64_t v30 = (float *)(v22 + 144 * v28 + 16);
    float v31 = 3.4028e38;
    do
    {
      float v32 = *v30;
      v30 += 36;
      float v33 = (float)((float)(*(float *)(v24 + 4 * v28) - v20) * (float)(*(float *)(v24 + 4 * v28) - v20))
          + (float)((float)((float)(v32 - v21) / 0.01) * (float)((float)(v32 - v21) / 0.01));
      if (v33 < v31)
      {
        uint64_t v25 = v28;
        float v31 = v33;
      }
      ++v28;
    }
    while (v28 <= v29);
  }
  memset(&v119[8], 0, 128);
  float v34 = *(float *)(v18 + 144 * v15 + 12);
  float v35 = *(float *)(v22 + 144 * v25 + 12);
  if (vabds_f32(v34, v35) <= 180.0)
  {
    float v36 = a1;
  }
  else
  {
    float v36 = a1;
    if (v34 >= v35) {
      float v35 = v35 + 360.0;
    }
    else {
      float v34 = v34 + 360.0;
    }
  }
  float v37 = (float)(v35 * a7) + (float)(v34 * a6);
  if (v37 > 360.0) {
    float v37 = v37 + -360.0;
  }
  *(float *)&v119[4] = v37;
  uint64_t v38 = v22 + 144 * v25;
  *(float *)unsigned int v119 = (float)(*(float *)(v38 + 8) * a7) + (float)(*(float *)(v18 + 144 * v15 + 8) * a6);
  *(float *)&v119[8] = (float)(*(float *)(v38 + 16) * a7) + (float)(v21 * a6);
  if ((**(int (***)(uint64_t))v19)(v19) >= 1)
  {
    uint64_t v39 = 0;
    uint64_t v40 = v22 + 144 * v25 + 20;
    uint64_t v41 = v18 + 144 * v15 + 20;
    float v42 = 0.0;
    float v43 = 1.0;
    do
    {
      float v44 = *(float *)(v41 + 4 * v39);
      float v45 = fabsf(v44);
      float v46 = *(float *)(v40 + 4 * v39);
      float v47 = fabsf(v46);
      if (v46 == 0.0) {
        float v48 = COERCE_FLOAT(1);
      }
      else {
        float v48 = v47;
      }
      if (v46 < 0.0) {
        float v49 = -1.0;
      }
      else {
        float v49 = 1.0;
      }
      float v118 = v49;
      BOOL v50 = v44 < 0.0;
      if (v44 == 0.0) {
        float v51 = COERCE_FLOAT(1);
      }
      else {
        float v51 = v45;
      }
      if (v50) {
        float v52 = -1.0;
      }
      else {
        float v52 = 1.0;
      }
      float v53 = (float)((float)((float)(logf(v51) * 8.6859) / 10.0) * 10.0) * a6;
      float v54 = (float)((float)((float)(logf(v48) * 8.6859) / 10.0) * 10.0) * a7;
      *(float *)&v119[4 * v39 + 12] = expf((float)((float)((float)(v53 + v54) * 10.0) / 10.0) * 0.11513);
      if (v53 <= v42) {
        v55.n128_f32[0] = v43;
      }
      else {
        v55.n128_f32[0] = v52;
      }
      if (v53 <= v42) {
        float v56 = v42;
      }
      else {
        float v56 = v53;
      }
      if (v54 <= v56) {
        float v43 = v55.n128_f32[0];
      }
      else {
        float v43 = v118;
      }
      if (v54 <= v56) {
        float v42 = v56;
      }
      else {
        float v42 = v54;
      }
      ++v39;
    }
    while (v39 < (**(int (***)(uint64_t, __n128))v19)(v19, v55));
    *(float *)&uint64_t __B = v43;
    float v36 = a1;
    if (v43 < 0.0)
    {
      int v57 = (**(uint64_t (***)(uint64_t))v19)(v19);
      vDSP_vsmul((const float *)&v119[12], 1, (const float *)&__B, (float *)&v119[12], 1, v57);
    }
  }
  uint64_t result = (uint64_t)a5[1].i64;
  unint64_t v59 = a5[1].u64[0];
  unint64_t v60 = a5->u64[1];
  if (v60 >= v59)
  {
    unint64_t v69 = 0x8E38E38E38E38E39 * ((uint64_t)(v60 - a5->i64[0]) >> 4);
    unint64_t v70 = v69 + 1;
    uint64_t v68 = a3;
    if (v69 + 1 > 0x1C71C71C71C71C7) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v71 = 0x8E38E38E38E38E39 * ((uint64_t)(v59 - a5->i64[0]) >> 4);
    if (2 * v71 > v70) {
      unint64_t v70 = 2 * v71;
    }
    if (v71 >= 0xE38E38E38E38E3) {
      unint64_t v72 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v72 = v70;
    }
    uint64_t v123 = a5 + 1;
    if (v72) {
      long long v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>>(result, v72);
    }
    else {
      long long v73 = 0;
    }
    long long v74 = &v73[144 * v69];
    *(void *)long long v74 = &unk_26D476988;
    *(_OWORD *)(v74 + 8) = *(_OWORD *)v119;
    long long v75 = *(_OWORD *)&v119[16];
    long long v76 = *(_OWORD *)&v119[32];
    long long v77 = *(_OWORD *)&v119[48];
    *(_OWORD *)(v74 + 72) = *(_OWORD *)&v119[64];
    *(_OWORD *)(v74 + 56) = v77;
    *(_OWORD *)(v74 + 40) = v76;
    *(_OWORD *)(v74 + 24) = v75;
    long long v78 = *(_OWORD *)&v119[80];
    long long v79 = *(_OWORD *)&v119[96];
    long long v80 = *(_OWORD *)&v119[112];
    *((void *)v74 + 17) = *(void *)&v119[128];
    *(_OWORD *)(v74 + 120) = v80;
    *(_OWORD *)(v74 + 104) = v79;
    *(_OWORD *)(v74 + 88) = v78;
    uint64_t v81 = a5->i64[0];
    unint64_t v82 = a5->u64[1];
    if (v82 == a5->i64[0])
    {
      int64x2_t v91 = vdupq_n_s64(v82);
      uint64_t v84 = &v73[144 * v69];
    }
    else
    {
      uint64_t v83 = (uint64_t)&v73[144 * v69 - 144];
      uint64_t v84 = &v73[144 * v69];
      do
      {
        *((void *)v84 - 18) = &unk_26D476988;
        v84 -= 144;
        *(_OWORD *)(v84 + 8) = *(_OWORD *)(v82 - 136);
        long long v85 = *(_OWORD *)(v82 - 120);
        long long v86 = *(_OWORD *)(v82 - 104);
        long long v87 = *(_OWORD *)(v82 - 88);
        *(_OWORD *)(v84 + 72) = *(_OWORD *)(v82 - 72);
        *(_OWORD *)(v84 + 56) = v87;
        *(_OWORD *)(v84 + 40) = v86;
        *(_OWORD *)(v84 + 24) = v85;
        long long v88 = *(_OWORD *)(v82 - 56);
        long long v89 = *(_OWORD *)(v82 - 40);
        long long v90 = *(_OWORD *)(v82 - 24);
        *((void *)v84 + 17) = *(void *)(v82 - 8);
        *(_OWORD *)(v84 + 120) = v90;
        *(_OWORD *)(v84 + 104) = v89;
        *(_OWORD *)(v84 + 88) = v88;
        v83 -= 144;
        v82 -= 144;
      }
      while (v82 != v81);
      int64x2_t v91 = *a5;
    }
    unint64_t v67 = v74 + 144;
    a5->i64[0] = (uint64_t)v84;
    a5->i64[1] = (uint64_t)(v74 + 144);
    int64x2_t v121 = v91;
    uint64_t v92 = a5[1].i64[0];
    a5[1].i64[0] = (uint64_t)&v73[144 * v72];
    uint64_t v122 = v92;
    uint64_t __B = v91.i64[0];
    uint64_t result = std::__split_buffer<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::~__split_buffer((uint64_t)&__B);
  }
  else
  {
    *(void *)unint64_t v60 = &unk_26D476988;
    *(_OWORD *)(v60 + 8) = *(_OWORD *)v119;
    long long v61 = *(_OWORD *)&v119[16];
    long long v62 = *(_OWORD *)&v119[32];
    long long v63 = *(_OWORD *)&v119[48];
    *(_OWORD *)(v60 + 72) = *(_OWORD *)&v119[64];
    *(_OWORD *)(v60 + 56) = v63;
    *(_OWORD *)(v60 + 40) = v62;
    *(_OWORD *)(v60 + 24) = v61;
    long long v64 = *(_OWORD *)&v119[80];
    long long v65 = *(_OWORD *)&v119[96];
    long long v66 = *(_OWORD *)&v119[112];
    *(void *)(v60 + 136) = *(void *)&v119[128];
    *(_OWORD *)(v60 + 120) = v66;
    *(_OWORD *)(v60 + 104) = v65;
    *(_OWORD *)(v60 + 88) = v64;
    unint64_t v67 = (char *)(v60 + 144);
    uint64_t v68 = a3;
  }
  a5->i64[1] = (uint64_t)v67;
  uint64_t v93 = v36[1];
  uint64_t v94 = *v36 + 144 * v15;
  uint64_t v95 = v94 + 144;
  if (v94 + 144 != v93)
  {
    do
    {
      *(_OWORD *)(v95 - 56) = *(_OWORD *)(v95 + 88);
      *(_OWORD *)(v95 - 40) = *(_OWORD *)(v95 + 104);
      *(_OWORD *)(v95 - 24) = *(_OWORD *)(v95 + 120);
      *(void *)(v95 - 8) = *(void *)(v95 + 136);
      *(_OWORD *)(v95 - 120) = *(_OWORD *)(v95 + 24);
      *(_OWORD *)(v95 - 104) = *(_OWORD *)(v95 + 40);
      *(_OWORD *)(v95 - 88) = *(_OWORD *)(v95 + 56);
      *(_OWORD *)(v95 - 72) = *(_OWORD *)(v95 + 72);
      *(_OWORD *)(v95 - 136) = *(_OWORD *)(v95 + 8);
      v95 += 144;
      v94 += 144;
    }
    while (v95 != v93);
    uint64_t v95 = v36[1];
  }
  if (v95 != v94)
  {
    uint64_t v96 = v95 - 144;
    uint64_t v97 = (void *)(v95 - 144);
    uint64_t v98 = (void *)(v95 - 144);
    do
    {
      uint64_t v99 = *v98;
      v98 -= 18;
      uint64_t result = (*(uint64_t (**)(void *))(v99 + 16))(v97);
      v96 -= 144;
      BOOL v100 = v97 == (void *)v94;
      uint64_t v97 = v98;
    }
    while (!v100);
  }
  v36[1] = v94;
  uint64_t v101 = a2[1];
  uint64_t v102 = *a2 + 4 * v15;
  uint64_t v103 = v101 - (v102 + 4);
  if (v101 != v102 + 4) {
    uint64_t result = (uint64_t)memmove((void *)(*a2 + 4 * v15), (const void *)(v102 + 4), v101 - (v102 + 4));
  }
  a2[1] = v102 + v103;
  uint64_t v104 = v68[1];
  uint64_t v105 = *v68 + 144 * v25;
  uint64_t v106 = v105 + 144;
  if (v105 + 144 != v104)
  {
    do
    {
      *(_OWORD *)(v106 - 56) = *(_OWORD *)(v106 + 88);
      *(_OWORD *)(v106 - 40) = *(_OWORD *)(v106 + 104);
      *(_OWORD *)(v106 - 24) = *(_OWORD *)(v106 + 120);
      *(void *)(v106 - 8) = *(void *)(v106 + 136);
      *(_OWORD *)(v106 - 120) = *(_OWORD *)(v106 + 24);
      *(_OWORD *)(v106 - 104) = *(_OWORD *)(v106 + 40);
      *(_OWORD *)(v106 - 88) = *(_OWORD *)(v106 + 56);
      *(_OWORD *)(v106 - 72) = *(_OWORD *)(v106 + 72);
      *(_OWORD *)(v106 - 136) = *(_OWORD *)(v106 + 8);
      v106 += 144;
      v105 += 144;
    }
    while (v106 != v104);
    uint64_t v106 = v68[1];
  }
  if (v106 != v105)
  {
    uint64_t v107 = v106 - 144;
    uint64_t v108 = (void *)(v106 - 144);
    float v109 = (void *)(v106 - 144);
    do
    {
      uint64_t v110 = *v109;
      v109 -= 18;
      uint64_t result = (*(uint64_t (**)(void *))(v110 + 16))(v108);
      v107 -= 144;
      BOOL v100 = v108 == (void *)v105;
      uint64_t v108 = v109;
    }
    while (!v100);
  }
  v68[1] = v105;
  uint64_t v111 = a4;
  uint64_t v112 = a4[1];
  uint64_t v113 = *a4 + 4 * v25;
  uint64_t v114 = v112 - (v113 + 4);
  if (v112 != v113 + 4)
  {
    uint64_t result = (uint64_t)memmove((void *)v113, (const void *)(v113 + 4), v112 - (v113 + 4));
    uint64_t v111 = a4;
  }
  v111[1] = v113 + v114;
  return result;
}

uint64_t std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::push_back[abi:ne180100](char **a1, uint64_t a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v15 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - (void)*a1) >> 4);
    unint64_t v16 = v15 + 1;
    if (v15 + 1 > 0x1C71C71C71C71C7) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - (void)*a1) >> 4);
    if (2 * v17 > v16) {
      unint64_t v16 = 2 * v17;
    }
    if (v17 >= 0xE38E38E38E38E3) {
      unint64_t v18 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v18 = v16;
    }
    uint64_t v42 = result;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>>(result, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    float v20 = &v19[144 * v15];
    *(void *)float v20 = &unk_26D476988;
    *(_OWORD *)(v20 + 8) = *(_OWORD *)(a2 + 8);
    long long v21 = *(_OWORD *)(a2 + 24);
    long long v22 = *(_OWORD *)(a2 + 40);
    long long v23 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v20 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(v20 + 56) = v23;
    *(_OWORD *)(v20 + 40) = v22;
    *(_OWORD *)(v20 + 24) = v21;
    long long v24 = *(_OWORD *)(a2 + 88);
    long long v25 = *(_OWORD *)(a2 + 104);
    long long v26 = *(_OWORD *)(a2 + 120);
    *((void *)v20 + 17) = *(void *)(a2 + 136);
    *(_OWORD *)(v20 + 120) = v26;
    *(_OWORD *)(v20 + 104) = v25;
    *(_OWORD *)(v20 + 88) = v24;
    float v27 = *a1;
    unint64_t v28 = (unint64_t)a1[1];
    if ((char *)v28 == *a1)
    {
      int64x2_t v37 = vdupq_n_s64(v28);
      uint64_t v30 = &v19[144 * v15];
    }
    else
    {
      uint64_t v29 = (uint64_t)&v19[144 * v15 - 144];
      uint64_t v30 = &v19[144 * v15];
      do
      {
        *((void *)v30 - 18) = &unk_26D476988;
        v30 -= 144;
        *(_OWORD *)(v30 + 8) = *(_OWORD *)(v28 - 136);
        long long v31 = *(_OWORD *)(v28 - 120);
        long long v32 = *(_OWORD *)(v28 - 104);
        long long v33 = *(_OWORD *)(v28 - 88);
        *(_OWORD *)(v30 + 72) = *(_OWORD *)(v28 - 72);
        *(_OWORD *)(v30 + 56) = v33;
        *(_OWORD *)(v30 + 40) = v32;
        *(_OWORD *)(v30 + 24) = v31;
        long long v34 = *(_OWORD *)(v28 - 56);
        long long v35 = *(_OWORD *)(v28 - 40);
        long long v36 = *(_OWORD *)(v28 - 24);
        *((void *)v30 + 17) = *(void *)(v28 - 8);
        *(_OWORD *)(v30 + 120) = v36;
        *(_OWORD *)(v30 + 104) = v35;
        *(_OWORD *)(v30 + 88) = v34;
        v29 -= 144;
        v28 -= 144;
      }
      while ((char *)v28 != v27);
      int64x2_t v37 = *(int64x2_t *)a1;
    }
    uint64_t v14 = v20 + 144;
    *a1 = v30;
    a1[1] = v20 + 144;
    int64x2_t v40 = v37;
    uint64_t v38 = a1[2];
    a1[2] = &v19[144 * v18];
    uint64_t v41 = v38;
    uint64_t v39 = v37.i64[0];
    uint64_t result = std::__split_buffer<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::~__split_buffer((uint64_t)&v39);
  }
  else
  {
    *(void *)unint64_t v7 = &unk_26D476988;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    long long v8 = *(_OWORD *)(a2 + 24);
    long long v9 = *(_OWORD *)(a2 + 40);
    long long v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(v7 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(v7 + 56) = v10;
    *(_OWORD *)(v7 + 40) = v9;
    *(_OWORD *)(v7 + 24) = v8;
    long long v11 = *(_OWORD *)(a2 + 88);
    long long v12 = *(_OWORD *)(a2 + 104);
    long long v13 = *(_OWORD *)(a2 + 120);
    *(void *)(v7 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(v7 + 120) = v13;
    *(_OWORD *)(v7 + 104) = v12;
    *(_OWORD *)(v7 + 88) = v11;
    uint64_t v14 = (char *)(v7 + 144);
  }
  a1[1] = v14;
  return result;
}

uint64_t Phase::SpatialModeler::GetNearestReflectionIndex<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>(uint64_t a1, uint64_t a2, float a3)
{
  int v3 = 954437177 * ((unint64_t)(a2 - a1) >> 4);
  if (v3 >= 3)
  {
    LODWORD(v4) = 0;
    int v5 = v3 - 1;
    while (1)
    {
      float v6 = *(float *)(a1 + 144 * (int)v4 + 16);
      float v7 = *(float *)(a1 + 144 * v5 + 16);
      float v8 = v6 - v7;
      if ((float)(v6 - v7) < 0.0) {
        float v8 = -(float)(v6 - v7);
      }
      float v9 = fminf(fmaxf((float)(a3 - v6) / (float)(v7 - v6), 0.0), 1.0);
      BOOL v10 = v6 <= a3;
      if (v6 >= a3) {
        float v11 = 0.5;
      }
      else {
        float v11 = 1.0;
      }
      if (!v10) {
        float v11 = 0.0;
      }
      if (v8 > 0.00000011921) {
        float v11 = v9;
      }
      int v12 = llroundf((float)(v11 * (float)v5) + (float)((float)(1.0 - v11) * (float)(int)v4));
      float v13 = *(float *)(a1 + 144 * v12 + 16);
      if (v13 == a3)
      {
        int v14 = v12;
        goto LABEL_23;
      }
      if (v13 >= a3)
      {
        int v5 = v12 - 1;
        if (v12 < 1)
        {
          int v14 = 0;
          int v12 = 0;
          goto LABEL_23;
        }
        int v14 = v12 - 1;
        if (*(float *)(a1 + 144 * v5 + 16) < a3) {
          goto LABEL_23;
        }
      }
      else
      {
        if (v3 - 1 <= v12)
        {
          int v14 = v3 - 1;
          goto LABEL_22;
        }
        uint64_t v4 = v12 + 1;
        int v14 = v12++;
        if (*(float *)(a1 + 144 * v4 + 16) > a3) {
          goto LABEL_23;
        }
      }
      int v14 = v4;
      int v12 = v5;
      if (v5 <= (int)v4 + 1) {
        goto LABEL_23;
      }
    }
  }
  int v14 = 0;
LABEL_22:
  int v12 = v3 - 1;
LABEL_23:
  float v15 = *(float *)(a1 + 144 * v14 + 16);
  float v16 = *(float *)(a1 + 144 * v12 + 16);
  float v17 = v15 - v16;
  if ((float)(v15 - v16) < 0.0) {
    float v17 = -(float)(v15 - v16);
  }
  float v18 = fminf(fmaxf((float)(a3 - v15) / (float)(v16 - v15), 0.0), 1.0);
  BOOL v19 = v15 < a3;
  BOOL v20 = v15 <= a3;
  float v21 = 0.5;
  if (v19) {
    float v21 = 1.0;
  }
  if (!v20) {
    float v21 = 0.0;
  }
  if (v17 > 0.00000011921) {
    float v21 = v18;
  }
  return (int)llroundf((float)(v21 * (float)v14) + (float)((float)(1.0 - v21) * (float)v12));
}

void *std::vector<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>::__init_with_size[abi:ne180100]<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave*,Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x1C71C71C71C71C8) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::SpatialModeler::PhaseSpatialModelerMetadata_ThirdOctave>>((uint64_t)(result + 2), a4);
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[18 * v7];
    if (a2 != a3)
    {
      float v8 = result;
      do
      {
        *float v8 = &unk_26D476988;
        *(_OWORD *)(v8 + 1) = *(_OWORD *)(a2 + 8);
        long long v9 = *(_OWORD *)(a2 + 24);
        long long v10 = *(_OWORD *)(a2 + 40);
        long long v11 = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(v8 + 9) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(v8 + 7) = v11;
        *(_OWORD *)(v8 + 5) = v10;
        *(_OWORD *)(v8 + 3) = v9;
        long long v12 = *(_OWORD *)(a2 + 88);
        long long v13 = *(_OWORD *)(a2 + 104);
        long long v14 = *(_OWORD *)(a2 + 120);
        v8[17] = *(void *)(a2 + 136);
        *(_OWORD *)(v8 + 15) = v14;
        *(_OWORD *)(v8 + 13) = v13;
        *(_OWORD *)(v8 + 11) = v12;
        a2 += 144;
        result += 18;
        v8 += 18;
      }
      while (a2 != a3);
    }
    v4[1] = result;
  }
  return result;
}

void sub_221FB5E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t Phase::DspLayer::NullMixer::NullMixer(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = Phase::DspLayer::VoicePool::VoicePool(a1, (uint64_t)"NullMixer", a2, a3, 32880);
  *(void *)uint64_t v4 = &unk_26D478B98;
  if (*(int *)(v4 + 40) >= 1)
  {
    int v5 = 0;
    do
    {
      float v6 = (void *)(*(void *)(a1 + 24) + *(int *)(a1 + 16) * (uint64_t)v5);
      *float v6 = &unk_26D478BB8;
      v6[1] = 0;
      bzero(v6 + 2, 0x8060uLL);
      ++v5;
    }
    while (v5 < *(_DWORD *)(a1 + 40));
  }
  return a1;
}

void Phase::DspLayer::NullMixer::GetNewRegistryEntry(Phase::DspLayer::NullMixer *this)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  malloc_type_malloc(0, 0x1050040B063AAFAuLL);
  operator new();
}

void sub_221FB6078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::DspLayer::NullMixer::~NullMixer(Phase::DspLayer::NullMixer *this)
{
  Phase::DspLayer::VoicePool::~VoicePool(this);

  JUMPOUT(0x223C938A0);
}

void anonymous namespace'::NullMixerSlice::~NullMixerSlice(_anonymous_namespace_::NullMixerSlice *this)
{
}

double anonymous namespace'::NullMixerSlice::Reset(_OWORD *a1)
{
  a1[1] = 0u;
  a1[1026] = 0u;
  (*(void (**)(_OWORD *))(*(void *)a1 + 48))(a1);
  double result = 0.0;
  a1[2054] = 0u;
  a1[2053] = 0u;
  return result;
}

uint64_t anonymous namespace'::NullMixerSlice::Reset(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7 = a1 + 4 * a3;
  *(_DWORD *)(v7 + 16) = 0;
  *(_DWORD *)(v7 + 16416) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  *(void *)(a1 + 8 * a3 + 32848) = a4;
  return result;
}

uint64_t anonymous namespace'::NullMixerSlice::GetParameter(_anonymous_namespace_::NullMixerSlice *this)
{
  return 9;
}

uint64_t anonymous namespace'::NullMixerSlice::SetParameter(_anonymous_namespace_::NullMixerSlice *this, double a2)
{
  return 9;
}

__n128 anonymous namespace'::NullMixerSlice::UpdateParameters(__n128 *a1)
{
  __n128 v3 = a1[1026];
  memcpy(&a1[1027], &a1[1], 0x4010uLL);
  __n128 result = v3;
  a1[2052] = v3;
  return result;
}

uint64_t anonymous namespace'::NullMixerSlice::UpdateParameters(uint64_t result, uint64_t a2, int a3)
{
  __n128 v3 = (unsigned int *)(result + 4 * a3);
  unsigned int v4 = v3[4104];
  uint64_t v5 = v3[4];
  v3[4108] = v5;
  if ((int)v5 >= 1)
  {
    float v6 = (_DWORD *)(result + 4 * a3);
    uint64_t v7 = v6 + 4116;
    do
    {
      int v8 = v6[8];
      v6 += 8;
      *(v7 - 4) = v8;
      *uint64_t v7 = v6[4];
      v7 += 8;
      --v5;
    }
    while (v5);
  }
  *(_DWORD *)(result + 4 * a3 + 32832) = v4;
  return result;
}

int8x16_t *anonymous namespace'::NullMixerSlice::Run(int8x16_t *result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int32x4_t v4 = (int32x4_t)vandq_s8(result[1027], (int8x16_t)vcgtq_s32(vdupq_n_s32(a4), (int32x4_t)xmmword_2220A5190));
  int64x2_t v5 = (int64x2_t)vcgtzq_s32(v4);
  if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0])
  {
    uint64_t v6 = *(void *)(a2 + 56);
    uint64_t v7 = (float32x4_t *)&result[1029];
    float32x4_t v8 = 0uLL;
    int32x4_t v9 = 0uLL;
    v10.i64[0] = 0x100000001;
    v10.i64[1] = 0x100000001;
    do
    {
      v11.i32[0] = *(_DWORD *)(v6 + 4 * v7[-1].i32[0]);
      v11.i32[1] = *(_DWORD *)(v6 + 4 * v7[-1].i32[1]);
      v11.i32[2] = *(_DWORD *)(v6 + 4 * v7[-1].i32[2]);
      v11.i32[3] = *(_DWORD *)(v6 + 4 * v7[-1].i32[3]);
      float32x4_t v8 = vmlaq_f32(v8, (float32x4_t)vandq_s8((int8x16_t)v5, v11), *v7);
      int32x4_t v9 = vaddq_s32(v9, v10);
      int64x2_t v5 = (int64x2_t)vcgtq_s32(v4, v9);
      v7 += 2;
    }
    while (vorrq_s8((int8x16_t)vdupq_laneq_s64(v5, 1), (int8x16_t)v5).u64[0]);
  }
  else
  {
    float32x4_t v8 = 0uLL;
  }
  HIDWORD(v12) = a4 - 1;
  LODWORD(v12) = a4 - 1;
  int8x16_t v13 = vandq_s8((int8x16_t)v8, vorrq_s8((int8x16_t)vcltzq_f32(v8), (int8x16_t)vcgezq_f32(v8)));
  switch((v12 >> 1))
  {
    case 0u:
      goto LABEL_10;
    case 1u:
      goto LABEL_9;
    case 3u:
      goto LABEL_8;
    case 7u:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * result[2052].i32[3]) = v13.i32[3];
LABEL_8:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * result[2052].i32[2]) = v13.i32[2];
LABEL_9:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * result[2052].i32[1]) = v13.i32[1];
LABEL_10:
      *(_DWORD *)(*(void *)(a2 + 56) + 4 * result[2052].i32[0]) = v13.i32[0];
      break;
    default:
      return result;
  }
  return result;
}

uint64_t anonymous namespace'::NullMixerSlice::CopyVoiceState(uint64_t this, Phase::DspLayer::VoicePoolSlice *a2, int a3, int a4)
{
  uint64_t v4 = *((unsigned int *)a2 + a3 + 4);
  *(_DWORD *)(this + 4 * a4 + 16) = v4;
  if ((int)v4 >= 1)
  {
    int64x2_t v5 = (_DWORD *)(this + 4 * a4 + 48);
    uint64_t v6 = (int *)((char *)a2 + 4 * a3 + 48);
    do
    {
      *(v5 - 4) = *(v6 - 4);
      int v7 = *v6;
      v6 += 8;
      *int64x2_t v5 = v7;
      v5 += 8;
      --v4;
    }
    while (v4);
  }
  float32x4_t v8 = (_DWORD *)(this + 4 * a4);
  int32x4_t v9 = (_DWORD *)((char *)a2 + 4 * a3);
  uint64_t v10 = v9[4108];
  v8[4108] = v10;
  if ((int)v10 >= 1)
  {
    int8x16_t v11 = v8 + 4116;
    unint64_t v12 = v9 + 4116;
    do
    {
      *(v11 - 4) = *(v12 - 4);
      int v13 = *v12;
      v12 += 8;
      *int8x16_t v11 = v13;
      v11 += 8;
      --v10;
    }
    while (v10);
  }
  v8[4104] = v9[4104];
  v8[8208] = v9[8208];
  *(void *)(this + 8 * a4 + 32848) = *((void *)a2 + a3 + 4106);
  return this;
}

uint64_t anonymous namespace'::NullMixerSlice::AddInput(_anonymous_namespace_::NullMixerSlice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  int v7 = (char *)this + 16;
  uint64_t v8 = *((int *)this + a3 + 4);
  if ((int)v8 > 511) {
    return 6;
  }
  uint64_t result = 0;
  int32x4_t v9 = (char *)this + 32 * v8 + 4 * a3;
  *((_DWORD *)v9 + 8) = a4;
  *((float *)v9 + 12) = a5;
  *(_DWORD *)&v7[4 * a3] = v8 + 1;
  return result;
}

uint64_t anonymous namespace'::NullMixerSlice::RemoveInput(_anonymous_namespace_::NullMixerSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  int64x2_t v5 = (char *)this + 16;
  uint64_t v6 = *((unsigned int *)this + a3 + 4);
  if ((int)v6 < 1) {
    return 7;
  }
  uint64_t v7 = 0;
  for (unint64_t i = (_DWORD *)((char *)this + 4 * a3 + 32); *i != a4; i += 8)
  {
    if (v6 == ++v7) {
      return 7;
    }
  }
  if ((v7 & 0x80000000) != 0) {
    return 7;
  }
  uint64_t v9 = (v6 - 1);
  if ((int)v9 > (int)v7)
  {
    uint64_t v10 = (char *)this + 32 * v9 + 4 * a3;
    _DWORD *i = *((_DWORD *)v10 + 8);
    i[4] = *((_DWORD *)v10 + 12);
  }
  uint64_t result = 0;
  *(_DWORD *)&v5[4 * a3] = v9;
  return result;
}

uint64_t anonymous namespace'::NullMixerSlice::SetInputGain(_anonymous_namespace_::NullMixerSlice *this, int a2, int a3, int a4, float a5)
{
  if (a2) {
    return 8;
  }
  uint64_t v6 = *((unsigned int *)this + a3 + 4);
  if ((int)v6 < 1) {
    return 7;
  }
  uint64_t v7 = 0;
  for (unint64_t i = (float *)((char *)this + 4 * a3 + 48); *((_DWORD *)i - 4) != a4; i += 8)
  {
    if (v6 == ++v7) {
      return 7;
    }
  }
  if ((v7 & 0x80000000) != 0) {
    return 7;
  }
  uint64_t result = 0;
  float *i = a5;
  return result;
}

void anonymous namespace'::NullMixerSlice::GetInputs(_anonymous_namespace_::NullMixerSlice *this@<X0>, int a2@<W1>, int a3@<W2>, char **a4@<X8>)
{
  if (a2)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    uint64_t v7 = (char *)this + 4 * a3;
    unint64_t v9 = *((int *)v7 + 4);
    uint64_t v8 = v7 + 16;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    std::vector<std::pair<int,float>>::reserve((void **)a4, v9);
    uint64_t v10 = v9;
    if ((int)v9 >= 1)
    {
      uint64_t v11 = 0;
      uint64_t v12 = a3;
      int v13 = a4 + 2;
      long long v14 = a4[1];
      do
      {
        float v15 = &v8[32 * v11 + 16];
        float v16 = (_DWORD *)((char *)this + 32 * v11 + 4 * v12 + 48);
        if ((unint64_t)v14 >= *v13)
        {
          uint64_t v17 = (v14 - *a4) >> 3;
          if ((unint64_t)(v17 + 1) >> 61) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v18 = *v13 - (void)*a4;
          uint64_t v19 = v18 >> 2;
          if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
            uint64_t v19 = v17 + 1;
          }
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          float v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)(a4 + 2), v20);
          long long v23 = &v21[8 * v17];
          *(_DWORD *)long long v23 = *(_DWORD *)v15;
          *((_DWORD *)v23 + 1) = *v16;
          long long v25 = *a4;
          long long v24 = a4[1];
          long long v26 = v23;
          if (v24 != *a4)
          {
            do
            {
              uint64_t v27 = *((void *)v24 - 1);
              v24 -= 8;
              *((void *)v26 - 1) = v27;
              v26 -= 8;
            }
            while (v24 != v25);
            long long v24 = *a4;
          }
          long long v14 = v23 + 8;
          *a4 = v26;
          a4[1] = v23 + 8;
          a4[2] = &v21[8 * v22];
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          *(_DWORD *)long long v14 = *(_DWORD *)v15;
          *((_DWORD *)v14 + 1) = *v16;
          v14 += 8;
        }
        a4[1] = v14;
        ++v11;
      }
      while (v11 != v10);
    }
  }
}

void sub_221FB6758(_Unwind_Exception *exception_object)
{
  __n128 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::NullMixerSlice::ClearInputs(_anonymous_namespace_::NullMixerSlice *this, int a2)
{
  *((_DWORD *)this + a2 + 4) = 0;
  return 0;
}

uint64_t anonymous namespace'::NullMixerSlice::GetMaximumInputConnectionCount(_anonymous_namespace_::NullMixerSlice *this, int a2)
{
  return (a2 == 0) << 9;
}

unint64_t anonymous namespace'::NullMixerSlice::GetOutput(_anonymous_namespace_::NullMixerSlice *this, int a2, int a3)
{
  if (a2) {
    return 0xFFFFFFFF00000008;
  }
  else {
    return (unint64_t)*((unsigned int *)this + a3 + 4104) << 32;
  }
}

uint64_t anonymous namespace'::NullMixerSlice::SetOutput(_anonymous_namespace_::NullMixerSlice *this, int a2, int a3, int a4)
{
  if (a2) {
    return 8;
  }
  uint64_t result = 0;
  *((_DWORD *)this + a3 + 4104) = a4;
  return result;
}

void std::__function::__func<Phase::DspLayer::NullMixer::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::NullMixer::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::~__func()
{
}

void *std::__function::__func<Phase::DspLayer::NullMixer::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::NullMixer::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D478C90;
  return result;
}

void std::__function::__func<Phase::DspLayer::NullMixer::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::NullMixer::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D478C90;
}

void std::__function::__func<Phase::DspLayer::NullMixer::GetNewRegistryEntry(void)::$_0,std::allocator<Phase::DspLayer::NullMixer::GetNewRegistryEntry(void)::$_0>,Phase::DspLayer::VoicePool * ()(Phase::DspLayer::VoiceEngine *,int)>::operator()()
{
}

void sub_221FB68B4(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10F1C408EBD29CELL);
  _Unwind_Resume(a1);
}

uint64_t Phase::DspLayer::IConvolver::FilterState::Copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int *)(a2 + 16);
  if (v2 != *(_DWORD *)(a1 + 16)) {
    return 0;
  }
  int64x2_t v5 = *(void **)(a1 + 8);
  if (!v5
    || (uint64_t v6 = *(const void **)(a2 + 8)) == 0
    || (memcpy(v5, v6, 4 * v2), uint64_t v7 = *(unsigned int *)(a1 + 16), v7 != *(_DWORD *)(a1 + 20))
    && *(_DWORD *)(a2 + 16) != *(_DWORD *)(a2 + 20))
  {
    uint64_t v8 = *(int *)(a1 + 20);
    int v9 = *(_DWORD *)(a2 + 20);
    if (v8 == v9)
    {
      memcpy(*(void **)a1, *(const void **)a2, 4 * v8);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      return *(unsigned int *)(a1 + 20);
    }
    else
    {
      int v10 = *(_DWORD *)(a2 + 24);
      if ((int)v8 >= v10) {
        int v11 = *(_DWORD *)(a2 + 24);
      }
      else {
        int v11 = *(_DWORD *)(a1 + 20);
      }
      int v12 = v10 - v11;
      int v13 = v9 - v10;
      int v14 = v8 - v11;
      if (v14 >= v13) {
        int v15 = v13;
      }
      else {
        int v15 = v14;
      }
      uint64_t v7 = (v15 + v11);
      memcpy(*(void **)a1, (const void *)(*(void *)a2 + 4 * (v9 - v15)), 4 * v15);
      memcpy((void *)(*(void *)a1 + 4 * v15), (const void *)(*(void *)a2 + 4 * v12), 4 * v11);
      *(_DWORD *)(a1 + 24) = (int)v7 % *(_DWORD *)(a1 + 20);
    }
  }
  return v7;
}

Phase::DspLayer::NUPReblockerIn *Phase::DspLayer::NUPReblockerIn::NUPReblockerIn(Phase::DspLayer::NUPReblockerIn *this, int a2)
{
  uint64_t v4 = (float *)malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)this = v4;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = a2;
  if (a2 <= 0) {
    __assert_rtn("NUPReblockerIn", "NUPReblockerIn.cpp", 17, "n > 0");
  }
  if (!v4) {
    __assert_rtn("NUPReblockerIn", "NUPReblockerIn.cpp", 18, "mBuffer != nullptr");
  }
  vDSP_vclr(v4, 1, a2);
  return this;
}

void *Phase::DspLayer::NUPReblockerIn::Copy(Phase::DspLayer::NUPReblockerIn *this, const void **a2)
{
  uint64_t v4 = *((int *)a2 + 3);
  vDSP_Length v5 = *((int *)this + 3);
  uint64_t v6 = *(void **)this;
  if (v4 == v5)
  {
    uint64_t result = memcpy(v6, *a2, 4 * v4);
    int v8 = *((_DWORD *)a2 + 2);
  }
  else
  {
    vDSP_vclr((float *)v6, 1, v5);
    int v9 = *((_DWORD *)this + 3);
    int v11 = *((_DWORD *)a2 + 2);
    int v10 = *((_DWORD *)a2 + 3);
    if (v9 >= v11) {
      unsigned int v12 = *((_DWORD *)a2 + 2);
    }
    else {
      unsigned int v12 = *((_DWORD *)this + 3);
    }
    if ((int)(v9 - v12) >= v10 - v11) {
      unsigned int v13 = v10 - v11;
    }
    else {
      unsigned int v13 = v9 - v12;
    }
    if ((v12 & 0x80000000) != 0) {
      __assert_rtn("Copy", "NUPReblockerIn.cpp", 64, "newFramesToCopy >= 0");
    }
    if ((v13 & 0x80000000) != 0) {
      __assert_rtn("Copy", "NUPReblockerIn.cpp", 65, "oldFramesToCopy >= 0");
    }
    unsigned int v14 = v11 - v12;
    if (((v11 - v12) & 0x80000000) != 0) {
      __assert_rtn("Copy", "NUPReblockerIn.cpp", 66, "newFramesSrcOffset >= 0");
    }
    unsigned int v15 = v10 - v13;
    if ((v15 & 0x80000000) != 0) {
      __assert_rtn("Copy", "NUPReblockerIn.cpp", 67, "oldFramesSrcOffset >= 0");
    }
    if ((int)(v13 + v12) > v9) {
      __assert_rtn("Copy", "NUPReblockerIn.cpp", 68, "totalFramesCopied <= mBufferLength");
    }
    if (!*a2) {
      __assert_rtn("Copy", "NUPReblockerIn.cpp", 73, "src != nullptr");
    }
    if (!*(void *)this) {
      __assert_rtn("Copy", "NUPReblockerIn.cpp", 74, "dest != nullptr");
    }
    memcpy(*(void **)this, (char *)*a2 + 4 * v15, 4 * v13);
    if (!*a2) {
      __assert_rtn("Copy", "NUPReblockerIn.cpp", 81, "src != nullptr");
    }
    if (!*(void *)this) {
      __assert_rtn("Copy", "NUPReblockerIn.cpp", 82, "dest != nullptr");
    }
    uint64_t result = memcpy((void *)(*(void *)this + 4 * v13), (char *)*a2 + 4 * v14, 4 * v12);
    int v8 = (int)(v13 + v12) % *((_DWORD *)this + 3);
  }
  *((_DWORD *)this + 2) = v8;
  return result;
}

Phase::DspLayer::NUPReblockerOut *Phase::DspLayer::NUPReblockerOut::NUPReblockerOut(Phase::DspLayer::NUPReblockerOut *this, int a2)
{
  uint64_t v4 = (float *)malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  *(void *)this = v4;
  *((_DWORD *)this + 2) = 0;
  *((_DWORD *)this + 3) = a2;
  if (a2 <= 0) {
    __assert_rtn("NUPReblockerOut", "NUPReblockerOut.cpp", 17, "n > 0");
  }
  if (!v4) {
    __assert_rtn("NUPReblockerOut", "NUPReblockerOut.cpp", 18, "mBuffer != nullptr");
  }
  vDSP_vclr(v4, 1, a2);
  return this;
}

void Phase::DspLayer::NUPReblockerOut::addBlock(float **this, const float *__B, int a3)
{
  uint64_t v5 = *((int *)this + 2);
  vDSP_Length v6 = *((int *)this + 3) - v5;
  uint64_t v7 = &(*this)[v5];
  int v8 = a3 - v6;
  if (a3 <= (int)v6)
  {
    vDSP_Length v10 = a3;
    int v9 = __B;
  }
  else
  {
    vDSP_vadd(v7, 1, __B, 1, v7, 1, v6);
    uint64_t v7 = *this;
    int v9 = &__B[v6];
    vDSP_Length v10 = v8;
  }

  vDSP_vadd(v7, 1, v9, 1, v7, 1, v10);
}

void Phase::DspLayer::NUPSConvolver::NUPSConvolver(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_26D478CD8;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = a4;
  *(void *)(a1 + 24) = 0;
  Phase::DspLayer::NUPReblockerIn::NUPReblockerIn((Phase::DspLayer::NUPReblockerIn *)(a1 + 32), *(_DWORD *)(*(void *)(a2 + 8) - 4));
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)(a1 + 56), *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 48) = malloc_type_malloc(8 * *(int *)(a1 + 8), 0x2004093837F09uLL);
  if (*(int *)(a1 + 8) >= 1) {
    operator new();
  }
  unint64_t v6 = *(void *)(a1 + 64) - *(void *)(a1 + 56);
  *(_DWORD *)(a1 + 12) = v6 >> 2;
  *(void *)(a1 + 24) = malloc_type_malloc((uint64_t)(v6 << 30) >> 29, 0x2004093837F09uLL);
  if (*(void *)(a1 + 64) - *(void *)(a1 + 56) == 4) {
    operator new();
  }
  operator new();
}

void sub_221FB6FE4(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v4, 0x10E1C4077BC1CF2);
  unint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 64) = v6;
    operator delete(v6);
  }
  free(*v1);
  _Unwind_Resume(a1);
}

void Phase::DspLayer::NUPSConvolver::~NUPSConvolver(Phase::DspLayer::NUPSConvolver *this)
{
  *(void *)this = &unk_26D478CD8;
  int v2 = *((_DWORD *)this + 3);
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i < v2; ++i)
    {
      uint64_t v4 = *(void *)(*((void *)this + 3) + 8 * i);
      if (v4)
      {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        int v2 = *((_DWORD *)this + 3);
      }
    }
  }
  int v5 = *((_DWORD *)this + 2);
  if (v5 >= 1)
  {
    for (uint64_t j = 0; j < v5; ++j)
    {
      uint64_t v7 = *(void ***)(*((void *)this + 6) + 8 * j);
      if (v7)
      {
        free(*v7);
        MEMORY[0x223C938A0](v7, 0x1080C40FC6463CFLL);
        int v5 = *((_DWORD *)this + 2);
      }
    }
  }
  free(*((void **)this + 3));
  free(*((void **)this + 6));
  int v8 = (void *)*((void *)this + 7);
  if (v8)
  {
    *((void *)this + 8) = v8;
    operator delete(v8);
  }
  free(*((void **)this + 4));
}

{
  uint64_t vars8;

  Phase::DspLayer::NUPSConvolver::~NUPSConvolver(this);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::DspLayer::NUPSConvolver::GetBlockSize(Phase::DspLayer::NUPSConvolver *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 3) + 56))();
}

uint64_t Phase::DspLayer::NUPSConvolver::GetFilterLength(Phase::DspLayer::NUPSConvolver *this)
{
  if (*((int *)this + 4) < 1) {
    return 0;
  }
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  do
  {
    uint64_t v4 = *(void *)(*((void *)this + 3) + 8 * v2);
    uint64_t v3 = (*(unsigned int (**)(uint64_t))(*(void *)v4 + 40))(v4) + v3;
    ++v2;
  }
  while (v2 < *((int *)this + 4));
  return v3;
}

uint64_t Phase::DspLayer::NUPSConvolver::GetMaxFilterLength(Phase::DspLayer::NUPSConvolver *this)
{
  if (*((int *)this + 3) < 1) {
    return 0;
  }
  uint64_t v2 = 0;
  LODWORD(v3) = 0;
  do
  {
    uint64_t v4 = *(void *)(*((void *)this + 3) + 8 * v2);
    uint64_t v3 = (*(unsigned int (**)(uint64_t))(*(void *)v4 + 48))(v4) + v3;
    ++v2;
  }
  while (v2 < *((int *)this + 3));
  return v3;
}

uint64_t Phase::DspLayer::NUPSConvolver::GetNumOutputChannels(Phase::DspLayer::NUPSConvolver *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t Phase::DspLayer::NUPSConvolver::Reset(uint64_t this)
{
  if (*(int *)(this + 16) >= 1)
  {
    uint64_t v1 = this;
    uint64_t v2 = 0;
    do
    {
      uint64_t v3 = *(void *)(*(void *)(v1 + 24) + 8 * v2);
      this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 16));
  }
  return this;
}

uint64_t Phase::DspLayer::NUPSConvolver::SetFilter(Phase::DspLayer::NUPSConvolver *this, uint64_t a2, float *a3, int a4)
{
  if ((a2 & 0x80000000) != 0) {
    return 2;
  }
  if (*((_DWORD *)this + 2) <= (int)a2) {
    return 2;
  }
  if (a4 < 1 || (*(int (**)(Phase::DspLayer::NUPSConvolver *))(*(void *)this + 48))(this) < a4) {
    return 1;
  }
  *((_DWORD *)this + 4) = 0;
  if (*((int *)this + 3) < 2)
  {
    int v10 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(*((void *)this + 3) + 8 * v9);
      int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
      if (a4 - v10 >= v12) {
        uint64_t v14 = v12;
      }
      else {
        uint64_t v14 = (a4 - v10);
      }
      uint64_t v13 = *(void *)(*((void *)this + 3) + 8 * v9);
      (*(void (**)(uint64_t, uint64_t, float *, uint64_t))(*(void *)v13 + 16))(v13, a2, &a3[v10], v14);
      v10 += v12;
      uint64_t v15 = *((int *)this + 3);
      ++*((_DWORD *)this + 4);
      ++v9;
    }
    while (v9 < v15 - 1 && v10 < a4);
    if (v10 >= a4) {
      return 0;
    }
  }
  uint64_t v16 = *(void *)(*((void *)this + 3) + 8 * v9);
  (*(void (**)(uint64_t, uint64_t, float *, void))(*(void *)v16 + 16))(v16, a2, &a3[v10], (a4 - v10));
  uint64_t result = 0;
  ++*((_DWORD *)this + 4);
  return result;
}

void Phase::DspLayer::NUPSConvolver::Process(Phase::DspLayer::NUPSConvolver *this, float *a2, float **a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  int v6 = (*(uint64_t (**)(void))(***((void ***)this + 3) + 56))(**((void **)this + 3));
  vDSP_Length v7 = v6;
  size_t v8 = 4 * v6;
  memcpy((void *)(*((void *)this + 4) + 4 * *((int *)this + 10)), a2, v8);
  int v9 = *((_DWORD *)this + 11);
  int v10 = *((_DWORD *)this + 10) + v6;
  if (v10 < v9) {
    int v9 = 0;
  }
  *((_DWORD *)this + 10) = v10 - v9;
  uint64_t v11 = *(void *)(*((void *)this + 3) + 8 * *((int *)this + 4) - 8);
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(v11);
  int v13 = v12;
  int v14 = *((_DWORD *)this + 2);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (const float *)((char *)&v52 - v15);
  bzero((char *)&v52 - v15, v17);
  float v52 = v16;
  if (v14 == 2)
  {
    float v53 = v16;
    float v54 = &v16[v13];
    if (*((int *)this + 4) >= 1)
    {
      uint64_t v27 = 0;
      do
      {
        uint64_t v28 = *(void *)(*((void *)this + 3) + 8 * v27);
        int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 56))(v28);
        int v30 = *((_DWORD *)this + 10);
        if (v30 % v29) {
          break;
        }
        int v31 = v29;
        int v32 = v30 - v29;
        if (v32 < 0) {
          v32 += *((_DWORD *)this + 11);
        }
        uint64_t v33 = *(void *)(*((void *)this + 3) + 8 * v27);
        (*(void (**)(uint64_t, uint64_t, const float **))(*(void *)v33 + 24))(v33, *((void *)this + 4) + 4 * v32, &v53);
        Phase::DspLayer::NUPReblockerOut::addBlock(**((float ****)this + 6), v53, v31);
        Phase::DspLayer::NUPReblockerOut::addBlock(*(float ***)(*((void *)this + 6) + 8), v54, v31);
        ++v27;
      }
      while (v27 < *((int *)this + 4));
    }
    memcpy(*a3, (const void *)(***((void ***)this + 6) + 4 * *(int *)(**((void **)this + 6) + 8)), v8);
    memcpy(a3[1], (const void *)(**(void **)(*((void *)this + 6) + 8)+ 4 * *(int *)(*(void *)(*((void *)this + 6) + 8) + 8)), v8);
    uint64_t v34 = **((void **)this + 6);
    vDSP_vclr((float *)(*(void *)v34 + 4 * *(int *)(v34 + 8)), 1, v7);
    *(_DWORD *)(v34 + 8) = (*(_DWORD *)(v34 + 12) - 1) & (*(_DWORD *)(v34 + 8) + v7);
    uint64_t v26 = *(void *)(*((void *)this + 6) + 8);
    goto LABEL_19;
  }
  if (v14 == 1)
  {
    if (*((int *)this + 4) >= 1)
    {
      uint64_t v19 = 0;
      do
      {
        uint64_t v20 = *(void *)(*((void *)this + 3) + 8 * v19);
        int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 56))(v20);
        int v22 = *((_DWORD *)this + 10);
        if (v22 % v21) {
          break;
        }
        int v23 = v21;
        int v24 = v22 - v21;
        if (v24 < 0) {
          v24 += *((_DWORD *)this + 11);
        }
        uint64_t v25 = *(void *)(*((void *)this + 3) + 8 * v19);
        (*(void (**)(uint64_t, uint64_t, const float **))(*(void *)v25 + 24))(v25, *((void *)this + 4) + 4 * v24, &v52);
        Phase::DspLayer::NUPReblockerOut::addBlock(**((float ****)this + 6), v52, v23);
        ++v19;
      }
      while (v19 < *((int *)this + 4));
    }
    memcpy(*a3, (const void *)(***((void ***)this + 6) + 4 * *(int *)(**((void **)this + 6) + 8)), v8);
    uint64_t v26 = **((void **)this + 6);
LABEL_19:
    vDSP_vclr((float *)(*(void *)v26 + 4 * *(int *)(v26 + 8)), 1, v7);
    *(_DWORD *)(v26 + 8) = (*(_DWORD *)(v26 + 12) - 1) & (*(_DWORD *)(v26 + 8) + v7);
    return;
  }
  MEMORY[0x270FA5388](v18);
  long long v36 = (char *)&v52 - ((v35 + 15) & 0xFFFFFFFF0);
  if (v35 >= 0x200) {
    size_t v37 = 512;
  }
  else {
    size_t v37 = v35;
  }
  bzero((char *)&v52 - ((v35 + 15) & 0xFFFFFFFF0), v37);
  LODWORD(v38) = *((_DWORD *)this + 2);
  if ((int)v38 >= 1)
  {
    uint64_t v39 = (const float **)v36;
    uint64_t v40 = *((unsigned int *)this + 2);
    do
    {
      *v39++ = v16;
      v16 += v13;
      --v40;
    }
    while (v40);
  }
  if (*((int *)this + 4) >= 1)
  {
    uint64_t v41 = 0;
    while (1)
    {
      uint64_t v42 = *(void *)(*((void *)this + 3) + 8 * v41);
      int v43 = (*(uint64_t (**)(uint64_t))(*(void *)v42 + 56))(v42);
      int v44 = *((_DWORD *)this + 10);
      if (v44 % v43) {
        break;
      }
      int v45 = v43;
      int v46 = v44 - v43;
      if (v46 < 0) {
        v46 += *((_DWORD *)this + 11);
      }
      uint64_t v47 = *(void *)(*((void *)this + 3) + 8 * v41);
      (*(void (**)(uint64_t, uint64_t, char *))(*(void *)v47 + 24))(v47, *((void *)this + 4) + 4 * v46, v36);
      LODWORD(v38) = *((_DWORD *)this + 2);
      if ((int)v38 >= 1)
      {
        uint64_t v48 = 0;
        do
        {
          Phase::DspLayer::NUPReblockerOut::addBlock(*(float ***)(*((void *)this + 6) + 8 * v48), *(const float **)&v36[8 * v48], v45);
          ++v48;
          uint64_t v38 = *((int *)this + 2);
        }
        while (v48 < v38);
      }
      if (++v41 >= *((int *)this + 4)) {
        goto LABEL_38;
      }
    }
    LODWORD(v38) = *((_DWORD *)this + 2);
  }
LABEL_38:
  if ((int)v38 >= 1)
  {
    uint64_t v49 = 0;
    do
    {
      uint64_t v50 = *(void *)(*((void *)this + 6) + 8 * v49);
      memcpy(a3[v49], (const void *)(*(void *)v50 + 4 * *(int *)(v50 + 8)), v8);
      uint64_t v51 = *(void *)(*((void *)this + 6) + 8 * v49);
      vDSP_vclr((float *)(*(void *)v51 + 4 * *(int *)(v51 + 8)), 1, v7);
      *(_DWORD *)(v51 + 8) = (*(_DWORD *)(v51 + 12) - 1) & (*(_DWORD *)(v51 + 8) + v7);
      ++v49;
    }
    while (v49 < *((int *)this + 2));
  }
}

void Phase::DspLayer::NUPSConvolver::GetFilterState(Phase::DspLayer::NUPSConvolver *this)
{
}

uint64_t Phase::DspLayer::NUPSConvolver::GetNumPartitions(Phase::DspLayer::NUPSConvolver *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t Phase::DspLayer::NUPSConvolver::GetPartition(Phase::DspLayer::NUPSConvolver *this, int a2)
{
  if (*((_DWORD *)this + 4) >= a2) {
    return *(void *)(*((void *)this + 3) + 8 * a2);
  }
  else {
    return 0;
  }
}

uint64_t Phase::DspLayer::NUPSConvolver::GetReblockerIn(Phase::DspLayer::NUPSConvolver *this)
{
  return (uint64_t)this + 32;
}

uint64_t Phase::DspLayer::NUPSConvolver::CopyStates(Phase::DspLayer::NUPSConvolver *this, Phase::DspLayer::IConvolver *a2)
{
  uint64_t v4 = (const void **)(*(uint64_t (**)(Phase::DspLayer::IConvolver *))(*(void *)a2 + 96))(a2);
  if (v4) {
    Phase::DspLayer::NUPReblockerIn::Copy((Phase::DspLayer::NUPSConvolver *)((char *)this + 32), v4);
  }
  int v5 = (*(uint64_t (**)(Phase::DspLayer::IConvolver *))(*(void *)a2 + 72))(a2);
  int v6 = (*(uint64_t (**)(Phase::DspLayer::NUPSConvolver *))(*(void *)this + 72))(this);
  if (v6 >= v5) {
    int v7 = v5;
  }
  else {
    int v7 = v6;
  }
  if (v7 < 1) {
    return 0;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  do
  {
    uint64_t v10 = (*(uint64_t (**)(Phase::DspLayer::IConvolver *, uint64_t))(*(void *)a2 + 80))(a2, v8);
    uint64_t v11 = (*(uint64_t (**)(Phase::DspLayer::NUPSConvolver *, uint64_t))(*(void *)this + 80))(this, v8);
    if (v11) {
      BOOL v12 = v10 == 0;
    }
    else {
      BOOL v12 = 1;
    }
    if (!v12)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 88))(v11);
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
      uint64_t v9 = Phase::DspLayer::IConvolver::FilterState::Copy(v13, v14) + v9;
    }
    uint64_t v8 = (v8 + 1);
  }
  while (v7 != v8);
  return v9;
}

uint64_t Phase::ParserSetParseError(uint64_t a1, uint64_t a2, char *__src, const char *a4, const char *a5, ...)
{
  va_start(va, a5);
  *(void *)a1 = a2;
  uint64_t v8 = (char *)(a1 + 136);
  strncpy((char *)(a1 + 8), __src, 0x80uLL);
  strncpy(v8, a4, 0x80uLL);
  return vsnprintf((char *)(a1 + 264), 0x100uLL, a5, va);
}

uint64_t Phase::BuildActionTree(uint64_t a1)
{
  uint64_t v1 = MEMORY[0x270FA5388](a1);
  uint64_t v3 = v2;
  uint64_t v162 = v4;
  uint64_t v5 = v1;
  uint64_t v219 = *MEMORY[0x263EF8340];
  id v7 = v6;
  id v161 = v3;
  unint64_t v163 = v7;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(v5, 1346924643, "<ActionTreeStruct>", "", "Actiontree object must be a structure");
    goto LABEL_243;
  }
  long long v199 = 0u;
  long long v200 = 0u;
  long long v197 = 0u;
  long long v198 = 0u;
  long long v195 = 0u;
  long long v196 = 0u;
  long long v193 = 0u;
  long long v194 = 0u;
  int v201 = 0;
  long long v192 = 0u;
  long long v191 = 0u;
  long long v190 = 0u;
  long long v189 = 0u;
  long long v188 = 0u;
  long long v187 = 0u;
  long long v186 = 0u;
  long long v185 = 0u;
  char v202 = 1;
  if ((Phase::ReadString(v5, v7, @"Name", (uint64_t)&v183, 0x80uLL, v162) & 1) == 0) {
    goto LABEL_242;
  }
  unsigned int v8 = v183;
  if (v183)
  {
    uint64_t v9 = v184;
    uint64_t v10 = 0xCBF29CE484222325;
    do
    {
      uint64_t v10 = 0x100000001B3 * (v10 ^ v8);
      unsigned int v11 = *v9++;
      unsigned int v8 = v11;
    }
    while (v11);
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(void *)&v184[127] = v10;
  id v159 = [v7 objectForKeyedSubscript:@"Submixes"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(v5, 1346924643, "", (const char *)[@"Submixes" UTF8String], "Submix array object must be an array");

    goto LABEL_242;
  }
  memset(v172, 0, sizeof(v172));
  int v173 = 1065353216;
  long long v175 = 0u;
  long long v176 = 0u;
  long long v177 = 0u;
  long long v178 = 0u;
  obuint64_t j = v159;
  uint64_t v12 = [obj countByEnumeratingWithState:&v175 objects:v216 count:16];
  if (!v12)
  {
    int v83 = 1;
    goto LABEL_178;
  }
  uint64_t v154 = *(void *)v176;
LABEL_12:
  uint64_t v13 = 0;
  float v146 = (char *)v12;
LABEL_13:
  if (*(void *)v176 != v154) {
    objc_enumerationMutation(obj);
  }
  float v155 = v13;
  uint64_t v14 = *(void **)(*((void *)&v175 + 1) + 8 * (void)v13);
  bzero(__src, 0x1738uLL);
  if ((Phase::ReadString(v5, v14, @"Name", (uint64_t)v215, 0x80uLL, 0) & 1) == 0)
  {
    *(_OWORD *)(v5 + 72) = xmmword_2220E6C50;
    *(_OWORD *)(v5 + 88) = unk_2220E6C60;
    *(_OWORD *)(v5 + 104) = xmmword_2220E6C70;
    *(_OWORD *)(v5 + 120) = unk_2220E6C80;
    *(_OWORD *)(v5 + 8) = *(_OWORD *)"<SubmixStruct>";
    *(_OWORD *)(v5 + 24) = unk_2220E6C20;
    *(_OWORD *)(v5 + 40) = xmmword_2220E6C30;
    *(_OWORD *)(v5 + 56) = unk_2220E6C40;
    goto LABEL_177;
  }
  std::string::basic_string[abi:ne180100]<0>(v217, v215);
  uint64_t v15 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v172, (unsigned __int8 *)v217);
  if (v218 < 0) {
    operator delete(v217[0]);
  }
  if (v15)
  {
    Phase::ParserSetParseError(v5, 1346924646, &v183, v215, "Mixer array contains multiple mixers named the same thing");
    goto LABEL_177;
  }
  std::string::basic_string[abi:ne180100]<0>(v217, v215);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v172, (unsigned __int8 *)v217, (uint64_t)v217);
  if (v218 < 0) {
    operator delete(v217[0]);
  }
  if ((Phase::ReadPhaseId(v5, v14, @"Name", __src, v162) & 1) == 0)
  {
LABEL_145:
    strncpy((char *)(v5 + 8), v215, 0x80uLL);
    goto LABEL_177;
  }
  id v16 = v14;
  size_t v17 = @"Type";
  uint64_t v18 = [v16 objectForKeyedSubscript:@"Type"];
  if (!v18)
  {
    long long v85 = @"Type";
    Phase::ParserSetParseError(v5, 1346924642, "", (const char *)[@"Type" UTF8String], "");
LABEL_144:

    goto LABEL_145;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    long long v86 = @"Type";
    Phase::ParserSetParseError(v5, 1346924643, "", (const char *)[@"Type" UTF8String], "Field should be a string");
    goto LABEL_144;
  }
  __src[1] = GetMixerType((NSString *)v18);
  if (!__src[1])
  {
    long long v87 = @"Type";
    long long v88 = (const char *)[@"Type" UTF8String];
    long long v89 = @"Type";
    [@"Type" UTF8String];
    [v18 UTF8String];
    Phase::ParserSetParseError(v5, 1346924643, "", v88, "Field is bad %s - %s");
    goto LABEL_144;
  }

  if ((Phase::ReadFloatTypeWithDefault<double>(v5, v16, @"Gain", (double *)&__src[2], 1.0, 0.0, 1.0) & 1) == 0
    || (Phase::ReadParamIdx(v5, v16, @"GainParameterName", (Phase *)&v183, (unsigned char *)&__src[3] + 2, v162) & 1) == 0)
  {
    goto LABEL_145;
  }
  LOWORD(__src[3]) = 0;
  switch(__src[1])
  {
    case 0:
      goto LABEL_177;
    case 1:
      id v19 = v16;
      memset(&__src[4], 0, 416);
      uint64_t v20 = (__CFString *)v19;
      int v21 = @"DistanceModelType";
      int v22 = [(__CFString *)v20 objectForKeyedSubscript:@"DistanceModelType"];
      if (!v22)
      {
        LOBYTE(__src[4]) = 0;
        uint64_t v39 = @"DistanceModelType";
        uint64_t v40 = v20;
        goto LABEL_50;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v94 = @"DistanceModelType";
        Phase::ParserSetParseError(v5, 1346924643, "", (const char *)[@"DistanceModelType" UTF8String], "Field should be a string");

        goto LABEL_163;
      }
      DistanceModeluint64_t Type = GetDistanceModelType((NSString *)v22);
      LOBYTE(__src[4]) = DistanceModelType;

      if (DistanceModelType != 2)
      {
        if (DistanceModelType != 1
          || (Phase::ReadFloatTypeWithDefault<double>(v5, v20, @"RolloffFactor", (double *)&__src[5], 1.0, 0.0, 1.79769313e308) & 1) != 0)
        {
          goto LABEL_51;
        }
        goto LABEL_163;
      }
      LODWORD(__src[6]) = 0;
      id v174 = 0;
      char OptionalChildArray = Phase::GetOptionalChildArray(v5, v20, @"EnvelopeSegments", &v174);
      id v76 = v174;
      long long v77 = v76;
      if ((OptionalChildArray & 1) == 0)
      {
        Phase::ParserSetParseError(v5, 1346924643, v215, (const char *)[@"EnvelopeSegments" UTF8String], "Submix envelope segment array object must be an array");

        goto LABEL_164;
      }
      long long v181 = 0u;
      long long v182 = 0u;
      long long v179 = 0u;
      long long v180 = 0u;
      uint64_t v39 = (__CFString *)v76;
      uint64_t v78 = [(__CFString *)v39 countByEnumeratingWithState:&v179 objects:v217 count:16];
      if (!v78) {
        goto LABEL_132;
      }
      unsigned int v79 = 0;
      uint64_t v80 = *(void *)v180;
      do
      {
        for (uint64_t i = 0; i != v78; ++i)
        {
          if (*(void *)v180 != v80) {
            objc_enumerationMutation(v39);
          }
          unint64_t v82 = *(void **)(*((void *)&v179 + 1) + 8 * i);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            Phase::ParserSetParseError(v5, 1346924643, v215, (const char *)[@"EnvelopeSegments" UTF8String], "Submix envelope segment object must be a dictionary");
            goto LABEL_160;
          }
          if (v79 >= 0x11)
          {
            Phase::ParserSetParseError(v5, 1346924646, v215, (const char *)[@"EnvelopeSegments" UTF8String], "Too many submix envelope segments.  Masimd_float4 x = %d");
LABEL_160:

LABEL_164:
            goto LABEL_177;
          }
          if ((Phase::ReadFloatTypeWithDefault<double>(v5, v82, @"Distance", (double *)&__src[3 * v79 + 7], 1.79769313e308, 0.0, 1.79769313e308) & 1) == 0|| (Phase::ReadFloatTypeWithDefault<double>(v5, v82, @"Gain", (double *)&__src[3 * v79 + 8], 1.0, 0.0, 1.0) & 1) == 0|| (Phase::ReadEnumWithDefault<PHASECurveType>(v5, v82, &__src[3 * v79 + 9]) & 1) == 0)
          {
            strncpy((char *)(v5 + 8), v215, 0x80uLL);
            goto LABEL_160;
          }
          unsigned int v79 = ++LODWORD(__src[6]);
        }
        uint64_t v78 = [(__CFString *)v39 countByEnumeratingWithState:&v179 objects:v217 count:16];
      }
      while (v78);
LABEL_132:
      uint64_t v40 = v39;
LABEL_50:

LABEL_51:
      if ((Phase::ReadFloatTypeWithDefault<double>(v5, v20, @"FadeOutCullDistance", (double *)&__src[55], 1.79769313e308, 1.0, 1.79769313e308) & 1) == 0)
      {
LABEL_163:
        strncpy((char *)(v5 + 8), v215, 0x80uLL);
        goto LABEL_164;
      }

      if (!Phase::ParseDirectivityModelParams(v5, v20, v215, (double *)&__src[56], 1)
        || !Phase::ParseDirectivityModelParams(v5, v20, v215, (double *)&__src[182], 0))
      {
        goto LABEL_177;
      }
      if ((Phase::ReadFloatTypeWithDefault<double>(v5, v20, @"ListenerDopplerFactor", (double *)&__src[308], 1.0, 0.0, 1.79769313e308) & 1) == 0|| (Phase::ReadFloatTypeWithDefault<double>(v5, v20, @"SourceDopplerFactor", (double *)&__src[309], 1.0, 0.0, 1.79769313e308) & 1) == 0)
      {
        goto LABEL_145;
      }
      LODWORD(__src[310]) = 0;
      HIDWORD(__src[318]) = 0;
      id v171 = 0;
      char v41 = Phase::GetOptionalChildArray(v5, v20, @"SpatialCategories", &v171);
      id v42 = v171;
      int v43 = v42;
      if ((v41 & 1) == 0)
      {
        Phase::ParserSetParseError(v5, 1346924643, v215, (const char *)[@"SpatialCategories" UTF8String], "Submix spatial categories object must be an array");

        goto LABEL_177;
      }
      long long v213 = 0u;
      long long v212 = 0u;
      memset(buf, 0, sizeof(buf));
      id v152 = v42;
      uint64_t v44 = [v152 countByEnumeratingWithState:buf objects:&v207 count:16];
      if (!v44)
      {
LABEL_96:

        goto LABEL_100;
      }
      unsigned int v45 = 0;
      uint64_t v46 = **(void **)&buf[16];
      uint64_t v136 = **(void **)&buf[16];
LABEL_59:
      uint64_t v47 = 0;
      uint64_t v137 = v44;
      while (1)
      {
        if (**(void **)&buf[16] != v46) {
          objc_enumerationMutation(v152);
        }
        uint64_t v48 = *(void **)(*(void *)&buf[8] + 8 * v47);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          Phase::ParserSetParseError(v5, 1346924643, v215, (const char *)[@"SpatialCategories" UTF8String], "Submix spatial categories object must be a dictionary");
          goto LABEL_176;
        }
        if (v45 >= 9)
        {
          Phase::ParserSetParseError(v5, 1346924646, v215, (const char *)[@"SpatialCategories" UTF8String], "Too many spatial categories. Masimd_float4 x = %d");
          goto LABEL_176;
        }
        if ((Phase::ReadString(v5, v48, @"Category", (uint64_t)v217, 0x80uLL, 0) & 1) == 0)
        {
          strncpy((char *)(v5 + 8), v215, 0x80uLL);
          *(_OWORD *)(v5 + 200) = xmmword_2220E6CD1;
          *(_OWORD *)(v5 + 216) = unk_2220E6CE1;
          *(_OWORD *)(v5 + 232) = xmmword_2220E6CF1;
          *(_OWORD *)(v5 + 248) = unk_2220E6D01;
          strcpy((char *)(v5 + 136), "<SpatialCategoryStruct>");
          *(void *)(v5 + 160) = unk_2220E6CA9;
          *(_OWORD *)(v5 + 168) = xmmword_2220E6CB1;
          *(_OWORD *)(v5 + 184) = unk_2220E6CC1;
          goto LABEL_176;
        }
        uint64_t v139 = v47;
        uint64_t v49 = &__src[53 * v45];
        *((_DWORD *)v49 + 647) = 0;
        id v50 = v48;
        uint64_t v51 = @"Category";
        float v52 = [v50 objectForKeyedSubscript:@"Category"];
        if (!v52)
        {
          uint64_t v97 = @"Category";
          Phase::ParserSetParseError(v5, 1346924642, "", (const char *)[@"Category" UTF8String], "");
LABEL_174:

LABEL_175:
          strncpy((char *)(v5 + 8), v215, 0x80uLL);
          goto LABEL_176;
        }
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          uint64_t v98 = @"Category";
          Phase::ParserSetParseError(v5, 1346924643, "", (const char *)[@"Category" UTF8String], "Field should be a string");
          goto LABEL_174;
        }
        int SpatialCategory = GetSpatialCategory((NSString *)v52);
        *((_DWORD *)v49 + 638) = SpatialCategory;
        if (!SpatialCategory)
        {
          uint64_t v99 = @"Category";
          BOOL v100 = (const char *)[@"Category" UTF8String];
          uint64_t v101 = @"Category";
          [@"Category" UTF8String];
          [v52 UTF8String];
          Phase::ParserSetParseError(v5, 1346924643, "", v100, "Field is bad %s - %s");
          goto LABEL_174;
        }

        if ((Phase::ReadFloatTypeWithDefault<double>(v5, v50, @"Send", (double *)&__src[53 * v45 + 320], 1.0, 0.0, 1.0) & 1) == 0|| (Phase::ReadFloatTypeWithDefault<double>(v5, v50, @"SendHF", (double *)&__src[53 * v45 + 321], 1.0, 0.0, 1.0) & 1) == 0|| (Phase::ReadFloatTypeWithDefault<double>(v5, v50, @"SendLF",
                (double *)&__src[53 * v45 + 322],
                1.0,
                0.0,
                1.0) & 1) == 0
          || (Phase::ReadParamIdx(v5, v50, @"SendParameterName", (Phase *)&v183, &__src[53 * v45 + 323], v162) & 1) == 0
          || (Phase::ReadParamIdx(v5, v50, @"SendHFParameterName", (Phase *)&v183, (unsigned char *)&__src[53 * v45 + 323] + 1, v162) & 1) == 0|| (Phase::ReadParamIdx(v5, v50, @"SendLFParameterName", (Phase *)&v183, (unsigned char *)&__src[53 * v45 + 323] + 2, v162) & 1) == 0)
        {
          goto LABEL_175;
        }
        id v170 = 0;
        char OptionalChildDictionary = Phase::GetOptionalChildDictionary(v5, v50, @"TweakParams", &v170);
        id v55 = v170;
        uint64_t v138 = v55;
        if ((OptionalChildDictionary & 1) == 0)
        {
          Phase::ParserSetParseError(v5, 1346924643, v215, (const char *)v217, "Submix category tweak param object must be a dictionary");
          goto LABEL_157;
        }
        long long v168 = 0u;
        long long v169 = 0u;
        long long v166 = 0u;
        long long v167 = 0u;
        id v149 = v55;
        uint64_t v56 = [v149 countByEnumeratingWithState:&v166 objects:&v203 count:16];
        if (v56) {
          break;
        }
LABEL_94:

        unsigned int v45 = ++HIDWORD(__src[318]);
        uint64_t v47 = v139 + 1;
        uint64_t v46 = v136;
        if (v139 + 1 == v137)
        {
          uint64_t v44 = [v152 countByEnumeratingWithState:buf objects:&v207 count:16];
          if (!v44) {
            goto LABEL_96;
          }
          goto LABEL_59;
        }
      }
      int v57 = (int *)v49 + 647;
      uint64_t v141 = *(void *)v167;
      while (2)
      {
        uint64_t v58 = 0;
LABEL_78:
        if (*(void *)v167 != v141) {
          objc_enumerationMutation(v149);
        }
        unint64_t v59 = *(Phase **)(*((void *)&v166 + 1) + 8 * v58);
        int v60 = *v57;
        if (v162 && (Phase::AddStringToPool(v5, v162, *(void **)(*((void *)&v166 + 1) + 8 * v58)) & 1) == 0)
        {
LABEL_151:
          int64x2_t v91 = (const char *)[(Phase *)v59 UTF8String];
          long long v90 = (char *)(v5 + 8);
LABEL_152:
          strncpy(v90, v91, 0x80uLL);
          goto LABEL_156;
        }
        long long v62 = &__src[53 * v45 + 324 + 3 * v60];
        if (![(Phase *)v59 hasPrefix:@"metaparam_"])
        {
          if (v162 && (Phase::AddStringToPool(v5, v162, v59) & 1) == 0) {
            goto LABEL_151;
          }
          *long long v62 = Phase::GetStringHashId(v59, v61);
          if ((Phase::ReadFloatTypeWithDefault<double>(v5, v149, v59, (double *)&__src[53 * v45 + 325 + 3 * v60], 1.0, -INFINITY, INFINITY) & 1) == 0)
          {
            long long v90 = (char *)(v5 + 8);
            int64x2_t v91 = v215;
            goto LABEL_152;
          }
          LOBYTE(__src[53 * v45 + 326 + 3 * v60]) = -1;
          goto LABEL_92;
        }
        -[Phase substringFromIndex:](v59, "substringFromIndex:", [@"metaparam_" length]);
        long long v64 = (Phase *)objc_claimAutoreleasedReturnValue();
        if (!v162) {
          goto LABEL_86;
        }
        if ((Phase::AddStringToPool(v5, v162, v59) & 1) == 0) {
          goto LABEL_154;
        }
        if (Phase::AddStringToPool(v5, v162, v64))
        {
LABEL_86:
          *long long v62 = Phase::GetStringHashId(v64, v63);
          long long v65 = &__src[53 * v45 + 3 * v60];
          v65[325] = 0;
          if (!Phase::ReadParamIdx(v5, v149, v59, (Phase *)&v183, (unsigned char *)v65 + 2608, v162))
          {
            uint64_t v92 = v215;
            goto LABEL_155;
          }

LABEL_92:
          ++*v57;
          if (v56 == ++v58)
          {
            uint64_t v56 = [v149 countByEnumeratingWithState:&v166 objects:&v203 count:16];
            if (!v56) {
              goto LABEL_94;
            }
            continue;
          }
          goto LABEL_78;
        }
        break;
      }
      unint64_t v59 = v64;
LABEL_154:
      uint64_t v92 = (const char *)[(Phase *)v59 UTF8String];
LABEL_155:
      strncpy((char *)(v5 + 8), v92, 0x80uLL);

LABEL_156:
LABEL_157:

LABEL_176:
LABEL_177:
      int v83 = 0;
LABEL_178:

      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v172);
      if (v83)
      {
        uint64_t v102 = [v163 objectForKeyedSubscript:@"Parameters"];
        char v103 = Phase::BuildParameters(v5, v102, (char **)&v191, v162);

        if (v103)
        {
          id v104 = [v163 objectForKeyedSubscript:@"Nodes"];
          id v105 = v161;
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            id v153 = v105;
            id v160 = objc_alloc_init(MEMORY[0x263EFF9A0]);
            id obja = objc_alloc_init(MEMORY[0x263EFF9C0]);
            long long v210 = 0u;
            long long v209 = 0u;
            long long v208 = 0u;
            long long v207 = 0u;
            id v156 = v104;
            uint64_t v106 = [v156 countByEnumeratingWithState:&v207 objects:__src count:16];
            if (v106)
            {
              uint64_t v107 = *(void *)v208;
LABEL_183:
              uint64_t v108 = 0;
              while (1)
              {
                if (*(void *)v208 != v107) {
                  objc_enumerationMutation(v156);
                }
                float v109 = *(void **)(*((void *)&v207 + 1) + 8 * v108);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0)
                {
                  Phase::ParserSetParseError(v5, 1346924643, &v183, (const char *)[@"Nodes" UTF8String], "Member of array is not a structure");
                  goto LABEL_229;
                }
                uint64_t v110 = [v109 objectForKeyedSubscript:@"Name"];
                if (!v110 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
                {
                  Phase::ParserSetParseError(v5, 1346924646, &v183, (const char *)[@"Name" UTF8String], "Node has a missing or bad node name");

LABEL_229:
                  uint64_t v129 = v156;
                  goto LABEL_241;
                }
                uint64_t v111 = [v109 objectForKeyedSubscript:@"Type"];
                if (!v111) {
                  break;
                }
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) == 0) {
                  break;
                }
                uint64_t v112 = [v160 objectForKey:v110];
                BOOL v113 = v112 == 0;

                if (!v113)
                {
                  Phase::ParserSetParseError(v5, 1346924646, &v183, (const char *)[v110 UTF8String], "Node array contains multiple nodes named the same thing");
                  goto LABEL_228;
                }
                [v160 setObject:v109 forKeyedSubscript:v110];
                [obja addObject:v110];

                if (v106 == ++v108)
                {
                  uint64_t v106 = [v156 countByEnumeratingWithState:&v207 objects:__src count:16];
                  if (v106) {
                    goto LABEL_183;
                  }
                  goto LABEL_194;
                }
              }
              Phase::ParserSetParseError(v5, 1346924646, &v183, (const char *)[v110 UTF8String], "Node has a missing or bad type");
LABEL_228:

              goto LABEL_229;
            }
LABEL_194:

            long long v205 = 0u;
            long long v206 = 0u;
            long long v203 = 0u;
            long long v204 = 0u;
            id v114 = v156;
            double v147 = v114;
            uint64_t v115 = [v114 countByEnumeratingWithState:&v203 objects:v217 count:16];
            if (!v115) {
              goto LABEL_222;
            }
            uint64_t v144 = *(void *)v204;
LABEL_196:
            uint64_t v116 = 0;
            uint64_t v140 = v115;
LABEL_197:
            if (*(void *)v204 != v144) {
              objc_enumerationMutation(v114);
            }
            uint64_t v145 = v116;
            long long v117 = *(void **)(*((void *)&v203 + 1) + 8 * v116);
            float v118 = [v117 objectForKeyedSubscript:@"Name"];
            double v150 = v118;
            if (v118 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              unsigned int v119 = [v117 objectForKeyedSubscript:@"Type"];
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                Nodeuint64_t Type = Phase::GetNodeType(v119, v120);
                uint64_t v122 = [v117 objectForKeyedSubscript:@"Children"];
                if (!v122) {
                  goto LABEL_220;
                }
                uint64_t v142 = v119;
                objc_opt_class();
                if (objc_opt_isKindOfClass())
                {
                  long long v181 = 0u;
                  long long v182 = 0u;
                  long long v179 = 0u;
                  long long v180 = 0u;
                  id v151 = v122;
                  uint64_t v123 = [v151 countByEnumeratingWithState:&v179 objects:v216 count:16];
                  if (!v123) {
                    goto LABEL_219;
                  }
                  uint64_t v124 = *(void *)v180;
LABEL_206:
                  uint64_t v125 = 0;
                  while (1)
                  {
                    if (*(void *)v180 != v124) {
                      objc_enumerationMutation(v151);
                    }
                    unint64_t v126 = *(void **)(*((void *)&v179 + 1) + 8 * v125);
                    if ((NodeType - 2) >= 3)
                    {
                      if (NodeType != 5) {
                        goto LABEL_230;
                      }
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) == 0)
                      {
                        id v128 = [v117 objectForKeyedSubscript:@"Name"];
                        Phase::ParserSetParseError(v5, 1346924643, (char *)[v128 UTF8String], (const char *)objc_msgSend(@"Children", "UTF8String"), "Child list must be an array of strings");
                        goto LABEL_239;
                      }
                      id v127 = v126;
                    }
                    else
                    {
                      objc_opt_class();
                      if ((objc_opt_isKindOfClass() & 1) == 0)
                      {
                        id v128 = [v117 objectForKeyedSubscript:@"Name"];
                        Phase::ParserSetParseError(v5, 1346924643, (char *)[v128 UTF8String], (const char *)objc_msgSend(@"Children", "UTF8String"), "Child object must be a struct");
LABEL_239:

                        goto LABEL_240;
                      }
                      id v127 = [v126 objectForKeyedSubscript:@"SubTreeNodeName"];
                    }
                    id v128 = v127;
                    if (!v127)
                    {
LABEL_230:
                      id v128 = [v117 objectForKeyedSubscript:@"Name"];
                      Phase::ParserSetParseError(v5, 1346924641, (char *)[v128 UTF8String], "", "SubtreeNodeName was not found");
                      goto LABEL_239;
                    }
                    objc_opt_class();
                    if ((objc_opt_isKindOfClass() & 1) == 0)
                    {
                      id v130 = [v117 objectForKeyedSubscript:@"Name"];
                      Phase::ParserSetParseError(v5, 1346924646, (char *)[v130 UTF8String], "", "SubtreeNodeName is not a valid string");

                      goto LABEL_239;
                    }
                    [obja removeObject:v128];

                    if (v123 == ++v125)
                    {
                      uint64_t v123 = [v151 countByEnumeratingWithState:&v179 objects:v216 count:16];
                      if (v123) {
                        goto LABEL_206;
                      }
LABEL_219:

                      unsigned int v119 = v142;
LABEL_220:

                      id v114 = v147;
                      uint64_t v116 = v145 + 1;
                      if (v145 + 1 == v140)
                      {
                        uint64_t v115 = [v147 countByEnumeratingWithState:&v203 objects:v217 count:16];
                        if (!v115)
                        {
LABEL_222:

                          Phase::MsgBuffer::Init((Phase::MsgBuffer *)((char *)&v192 + 8));
                        }
                        goto LABEL_196;
                      }
                      goto LABEL_197;
                    }
                  }
                }
                id v135 = [v117 objectForKeyedSubscript:@"Name"];
                Phase::ParserSetParseError(v5, 1346924643, (char *)[v135 UTF8String], (const char *)objc_msgSend(@"Children", "UTF8String"), "Children field must be an array");
              }
              else
              {
                unint64_t v143 = v119;
                id v131 = v118;
                BOOL v132 = (Phase::Logger *)Phase::ParserSetParseError(v5, 1346924643, &v183, (const char *)[v131 UTF8String], "NodeType is not a valid string");
                uint64_t v133 = **(id **)(Phase::Logger::GetInstance(v132) + 16);
                if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136315394;
                  *(void *)&uint8_t buf[4] = "ParserCore.mm";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 2116;
                  _os_log_impl(&dword_221E5E000, v133, OS_LOG_TYPE_ERROR, "%25s:%-5d NodeType is not a valid string", buf, 0x12u);
                }
              }
            }
            else
            {
              Phase::ParserSetParseError(v5, 1346924646, &v183, (const char *)[@"Name" UTF8String], "Node has a missing or bad node name");
            }
LABEL_240:
            uint64_t v129 = v147;
LABEL_241:
          }
          else
          {
            Phase::ParserSetParseError(v5, 1346924643, &v183, (const char *)[@"Nodes" UTF8String], "Field should be an array");
          }
        }
      }
LABEL_242:
      Phase::ActionTreeBuilder::~ActionTreeBuilder((Phase::ActionTreeBuilder *)&v183);
LABEL_243:

      return 0;
    case 2:
      id v164 = 0;
      BOOL v28 = Phase::ReadAVAudioChannelLayout(v5, v16, &v164);
      id v152 = v164;
      if (!v28) {
        goto LABEL_138;
      }
      id v29 = v16;
      int v30 = @"Orientation";
      int v31 = [v29 objectForKeyedSubscript:@"Orientation"];
      if (!v31)
      {
        *(_OWORD *)((char *)&__src[4] + 4) = xmmword_2220A4E00;

        goto LABEL_98;
      }
      id v148 = v29;
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        if ([v31 count] == 4)
        {
          long long v181 = 0u;
          long long v182 = 0u;
          long long v179 = 0u;
          long long v180 = 0u;
          id v32 = v31;
          uint64_t v33 = [v32 countByEnumeratingWithState:&v179 objects:v217 count:16];
          if (!v33) {
            goto LABEL_48;
          }
          uint64_t v34 = *(void *)v180;
          unint64_t v35 = (_DWORD *)&__src[4] + 1;
          while (1)
          {
            for (uint64_t j = 0; j != v33; ++j)
            {
              if (*(void *)v180 != v34) {
                objc_enumerationMutation(v32);
              }
              size_t v37 = *(void **)(*((void *)&v179 + 1) + 8 * j);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0)
              {
                uint64_t v84 = @"Orientation";
                Phase::ParserSetParseError(v5, 1346924646, "", (const char *)[@"Orientation" UTF8String], "Invalid quaternion coefficient type");

LABEL_138:
                strncpy((char *)(v5 + 8), v215, 0x80uLL);

                goto LABEL_177;
              }
              [v37 floatValue];
              *v35++ = v38;
            }
            uint64_t v33 = [v32 countByEnumeratingWithState:&v179 objects:v217 count:16];
            if (!v33)
            {
LABEL_48:

LABEL_98:
              uint64_t v27 = (_DWORD *)[v152 layout];
LABEL_99:
              LODWORD(__src[4]) = *v27;
LABEL_100:

LABEL_101:
              long long v66 = (char *)*((void *)&v200 + 1);
              if (*((void *)&v200 + 1) >= (unint64_t)v201)
              {
                uint64_t v68 = (char *)v200;
                uint64_t v69 = 0x74CD59ED64F3F0D7 * ((uint64_t)(*((void *)&v200 + 1) - v200) >> 3);
                unint64_t v70 = v69 + 1;
                if ((unint64_t)(v69 + 1) > 0xB068BE30ED0CBLL) {
                  std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                }
                if (0xE99AB3DAC9E7E1AELL * ((uint64_t)&v201[-v200] >> 3) > v70) {
                  unint64_t v70 = 0xE99AB3DAC9E7E1AELL * ((uint64_t)&v201[-v200] >> 3);
                }
                if ((unint64_t)(0x74CD59ED64F3F0D7 * ((uint64_t)&v201[-v200] >> 3)) >= 0x58345F1876865) {
                  unint64_t v71 = 0xB068BE30ED0CBLL;
                }
                else {
                  unint64_t v71 = v70;
                }
                if (v71)
                {
                  if (v71 > 0xB068BE30ED0CBLL) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  unint64_t v72 = (char *)operator new(5944 * v71);
                }
                else
                {
                  unint64_t v72 = 0;
                }
                long long v73 = &v72[5944 * v69];
                memcpy(v73, __src, 0x1738uLL);
                long long v74 = v73;
                while (v66 != v68)
                {
                  v66 -= 5944;
                  v74 -= 5944;
                  memcpy(v74, v66, 0x1738uLL);
                }
                unint64_t v67 = v73 + 5944;
                *(void *)&long long v200 = v74;
                *((void *)&v200 + 1) = v73 + 5944;
                int v201 = &v72[5944 * v71];
                if (v68) {
                  operator delete(v68);
                }
              }
              else
              {
                memcpy(*((void **)&v200 + 1), __src, 0x1738uLL);
                unint64_t v67 = v66 + 5944;
              }
              *((void *)&v200 + 1) = v67;
              uint64_t v13 = v155 + 1;
              if (v155 + 1 == v146)
              {
                uint64_t v12 = [obj countByEnumeratingWithState:&v175 objects:v216 count:16];
                int v83 = 1;
                if (!v12) {
                  goto LABEL_178;
                }
                goto LABEL_12;
              }
              goto LABEL_13;
            }
          }
        }
        uint64_t v96 = @"Orientation";
        Phase::ParserSetParseError(v5, 1346924646, "", (const char *)[@"Orientation" UTF8String], "Invalid quaternion size");
      }
      else
      {
        uint64_t v95 = @"Orientation";
        Phase::ParserSetParseError(v5, 1346924643, "", (const char *)[@"Orientation" UTF8String], "Field should be a quaternion (4 float array).");
      }

      goto LABEL_138;
    case 3:
      id v165 = 0;
      BOOL v24 = Phase::ReadAVAudioChannelLayout(v5, v16, &v165);
      id v25 = v165;
      if (!v24)
      {
        uint64_t v93 = v25;
        strncpy((char *)(v5 + 8), v215, 0x80uLL);

        goto LABEL_177;
      }
      id v26 = v25;
      uint64_t v27 = (_DWORD *)[v25 layout];
      id v152 = v26;
      goto LABEL_99;
    default:
      goto LABEL_101;
  }
}

void sub_221FBA108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35,void *a36,uint64_t a37,void *a38)
{
  Phase::ActionTreeBuilder::~ActionTreeBuilder((Phase::ActionTreeBuilder *)&STACK[0x208]);
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadString(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  id v11 = a3;
  uint64_t v12 = [a2 objectForKeyedSubscript:v11];
  if (v12)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if ([v12 lengthOfBytesUsingEncoding:4] <= a5)
      {
        [v12 getCString:a4 maxLength:a5 encoding:4];
        if (!a6 || (Phase::AddStringToPool(a1, a6, v12) & 1) != 0)
        {
          uint64_t v15 = 1;
          goto LABEL_8;
        }
        strncpy((char *)(a1 + 8), (const char *)[v12 UTF8String], 0x80uLL);
      }
      else
      {
        uint64_t v13 = (const char *)[v11 UTF8String];
        id v14 = v12;
        [v14 UTF8String];
        strlen((const char *)[v14 UTF8String]);
        Phase::ParserSetParseError(a1, 1346924645, "", v13, "Field too long: %s must be length %d or shorter. Current size: %d");
      }
    }
    else
    {
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[v11 UTF8String], "Field should be a string");
    }
  }
  else
  {
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)[v11 UTF8String], "");
  }
  uint64_t v15 = 0;
LABEL_8:

  return v15;
}

void sub_221FBA6D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::BuildParameters(uint64_t a1, void *a2, char **a3, uint64_t a4)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  id v6 = a2;
  uint64_t v69 = v6;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"Parameters" UTF8String], "Parameter array object must be an array");
    uint64_t v45 = 0;
    goto LABEL_112;
  }
  memset(v82, 0, sizeof(v82));
  int v83 = 1065353216;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  obuint64_t j = v6;
  uint64_t v7 = [obj countByEnumeratingWithState:&v78 objects:v86 count:16];
  if (!v7)
  {
    uint64_t v45 = 1;
    goto LABEL_111;
  }
  uint64_t v66 = *(void *)v79;
  while (2)
  {
    uint64_t v8 = 0;
    uint64_t v65 = v7;
    do
    {
      if (*(void *)v79 != v66) {
        objc_enumerationMutation(obj);
      }
      uint64_t v9 = *(void **)(*((void *)&v78 + 1) + 8 * v8);
      memset(__src, 0, sizeof(__src));
      if ((Phase::ReadString(a1, v9, @"Name", (uint64_t)__s, 0x80uLL, 0) & 1) == 0)
      {
        *(_OWORD *)(a1 + 72) = xmmword_2220E6D52;
        *(_OWORD *)(a1 + 88) = unk_2220E6D62;
        *(_OWORD *)(a1 + 104) = xmmword_2220E6D72;
        *(_OWORD *)(a1 + 120) = unk_2220E6D82;
        strcpy((char *)(a1 + 8), "<ParameterStruct>");
        *(_WORD *)(a1 + 26) = 0;
        *(_DWORD *)(a1 + 28) = 0;
        *(void *)(a1 + 32) = unk_2220E6D2A;
        *(_OWORD *)(a1 + 40) = xmmword_2220E6D32;
        *(_OWORD *)(a1 + 56) = unk_2220E6D42;
        goto LABEL_110;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      uint64_t v10 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(v82, (unsigned __int8 *)__p);
      if (v76 < 0) {
        operator delete(__p[0]);
      }
      if (v10)
      {
        Phase::ParserSetParseError(a1, 1346924646, "MetaParameters", __s, "Mixer array contains multiple mixers named the same thing");
        goto LABEL_110;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, __s);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v82, (unsigned __int8 *)__p, (uint64_t)__p);
      if (v76 < 0) {
        operator delete(__p[0]);
      }
      if ((Phase::ReadPhaseId(a1, v9, @"Name", __src, a4) & 1) == 0) {
        goto LABEL_99;
      }
      id v11 = v9;
      uint64_t v12 = @"Type";
      uint64_t v13 = [v11 objectForKeyedSubscript:@"Type"];
      if (!v13)
      {
        uint64_t v46 = @"Type";
        Phase::ParserSetParseError(a1, 1346924642, "", (const char *)[@"Type" UTF8String], "");
        goto LABEL_94;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v50 = @"Type";
        Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"Type" UTF8String], "Field should be a string");
        goto LABEL_94;
      }
      Paramuint64_t Type = Phase::GetParamType(v13, v14);
      DWORD2(__src[0]) = ParamType;
      if (!ParamType)
      {
        uint64_t v51 = @"Type";
        float v52 = (const char *)[@"Type" UTF8String];
        float v53 = @"Type";
        [@"Type" UTF8String];
        [(Phase *)v13 UTF8String];
        Phase::ParserSetParseError(a1, 1346924643, "", v52, "Field is bad %s - %s");
LABEL_94:

LABEL_99:
        strncpy((char *)(a1 + 8), __s, 0x80uLL);
        goto LABEL_110;
      }

      id v16 = v11;
      size_t v17 = @"InputType";
      uint64_t v18 = [v16 objectForKeyedSubscript:@"InputType"];
      if (!v18)
      {
        float v54 = @"InputType";
        Phase::ParserSetParseError(a1, 1346924642, "", (const char *)[@"InputType" UTF8String], "");
LABEL_98:

        goto LABEL_99;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v55 = @"InputType";
        Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"InputType" UTF8String], "Field should be a string");
        goto LABEL_98;
      }
      InputParamuint64_t Type = Phase::GetInputParamType((Phase *)v18, v19);
      HIDWORD(__src[0]) = InputParamType;
      if (!InputParamType)
      {
        uint64_t v56 = @"InputType";
        int v57 = (const char *)[@"InputType" UTF8String];
        uint64_t v58 = @"InputType";
        [@"InputType" UTF8String];
        [v18 UTF8String];
        Phase::ParserSetParseError(a1, 1346924643, "", v57, "Field is bad %s - %s");
        goto LABEL_98;
      }

      switch(ParamType)
      {
        case 3:
          if ((Phase::ReadEnumWithoutDefault<Phase::OutputMetaParamType>(a1, v16, &__src[1]) & 1) == 0
            || (Phase::ReadPhaseId(a1, v16, @"LinkedInputParameter", (void *)&__src[1] + 1, a4) & 1) == 0)
          {
            goto LABEL_99;
          }
          id v25 = [v16 objectForKeyedSubscript:@"DiscreteValues"];
          if (!v25 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
          {
            Phase::ParserSetParseError(a1, 1346924643, __s, (const char *)[@"DiscreteValues" UTF8String], "Range array object must be an array");

            goto LABEL_110;
          }
          DWORD2(__src[3]) = 0;
          id v64 = v25;
          if ((unint64_t)[v64 count] >= 0x10)
          {
            [v64 count];
            Phase::ParserSetParseError(a1, 1346924646, __s, __s, "Discrete value range has too many segments %d > %d");
            goto LABEL_109;
          }
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          id v23 = v64;
          uint64_t v26 = [v23 countByEnumeratingWithState:&v70 objects:v84 count:16];
          if (!v26)
          {

LABEL_117:
            Phase::ParserSetParseError(a1, 1346924641, __s, "", "Mapped param doesn't have any ranges");
LABEL_109:

LABEL_110:
            uint64_t v45 = 0;
            goto LABEL_111;
          }
          unsigned int v27 = 0;
          uint64_t v28 = *(void *)v71;
LABEL_43:
          uint64_t v29 = 0;
          while (2)
          {
            if (*(void *)v71 != v28) {
              objc_enumerationMutation(v23);
            }
            int v30 = *(void **)(*((void *)&v70 + 1) + 8 * v29);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              uint64_t v47 = (char *)[@"DiscreteValues" UTF8String];
              uint64_t v48 = "Range array object must be a structure";
              uint64_t v49 = __s;
LABEL_104:
              uint64_t v60 = a1;
              uint64_t v59 = 1346924643;
LABEL_107:
              Phase::ParserSetParseError(v60, v59, v49, v47, v48);
LABEL_108:

              goto LABEL_109;
            }
            if (HIDWORD(__src[0]) == 2)
            {
              char PhaseId = Phase::ReadPhaseId(a1, v30, @"InputValue", &__src[v27 + 4], a4);
            }
            else
            {
              if (HIDWORD(__src[0]) != 1)
              {
                uint64_t v49 = "";
                uint64_t v48 = "Invalid input type for dicrete mapped parameter";
LABEL_103:
                uint64_t v47 = __s;
                goto LABEL_104;
              }
              char PhaseId = Phase::ReadFloatType<double>(a1, v30, @"InputValue", (double *)&__src[v27 + 4]);
            }
            if ((PhaseId & 1) == 0)
            {
LABEL_87:
              strncpy((char *)(a1 + 8), __s, 0x80uLL);
              goto LABEL_108;
            }
            switch(LODWORD(__src[1]))
            {
              case 1:
                if ((Phase::ReadFloatType<double>(a1, v30, @"OutputValue", (double *)&__src[DWORD2(__src[3]) + 4] + 1) & 1) == 0)goto LABEL_87; {
                char FloatTypeWith = Phase::ReadFloatTypeWithDefault<double>(a1, v16, @"DefaultValue", (double *)&__src[3], 0.0, -INFINITY, INFINITY);
                }
                goto LABEL_57;
              case 2:
                if ((Phase::ReadPhaseId(a1, v30, @"OutputValue", (void *)&__src[DWORD2(__src[3]) + 4] + 1, a4) & 1) == 0) {
                  goto LABEL_87;
                }
                char FloatTypeWith = Phase::ReadPhaseIdWithDefault(a1, v16, @"DefaultValue", &__src[3], a4);
LABEL_57:
                if ((FloatTypeWith & 1) == 0) {
                  goto LABEL_87;
                }
                unsigned int v27 = ++DWORD2(__src[3]);
                if (v26 != ++v29) {
                  continue;
                }
                uint64_t v26 = [v23 countByEnumeratingWithState:&v70 objects:v84 count:16];
                if (v26) {
                  goto LABEL_43;
                }

                if (!v27) {
                  goto LABEL_117;
                }

                break;
              case 3:
                uint64_t v59 = 1346924649;
                uint64_t v49 = "";
                uint64_t v48 = "ParamSet params are not yet implemented";
                goto LABEL_106;
              case 4:
                uint64_t v59 = 1346924649;
                uint64_t v49 = "";
                uint64_t v48 = "InsertFx params are not yet implemented";
LABEL_106:
                uint64_t v47 = __s;
                uint64_t v60 = a1;
                goto LABEL_107;
              default:
                uint64_t v49 = "";
                uint64_t v48 = "Invalid output type for mapped range parameter";
                goto LABEL_103;
            }
            goto LABEL_35;
          }
        case 2:
          if ((Phase::ReadEnumWithoutDefault<Phase::OutputMetaParamType>(a1, v16, &__src[1]) & 1) == 0
            || (Phase::ReadPhaseId(a1, v16, @"LinkedInputParameter", (void *)&__src[1] + 1, a4) & 1) == 0)
          {
            goto LABEL_99;
          }
          if (*(void *)((char *)__src + 12) != 0x100000001) {
            Phase::ParserSetParseError(a1, 1346924643, "", __s, "Invalid input/output type for mapped range parameter");
          }
          id v74 = 0;
          char ChildDictionary = Phase::GetChildDictionary(a1, v16, &v74);
          id v23 = v74;
          if ((ChildDictionary & 1) == 0 || (Phase::ParseEnvelope(a1, v23, __s, (uint64_t)&__src[3] + 8) & 1) == 0)
          {
            strncpy((char *)(a1 + 8), __s, 0x80uLL);

            goto LABEL_110;
          }
          uint64_t v24 = *((void *)&__src[5] + 3 * (DWORD2(__src[4]) - 1));
          *(void *)&__src[2] = *((void *)&__src[3] + 1);
          *((void *)&__src[2] + 1) = v24;
LABEL_35:

          break;
        case 1:
          if (InputParamType == 2)
          {
            char PhaseIdWithDefault = Phase::ReadPhaseIdWithDefault(a1, v16, @"DefaultValue", &__src[3], a4);
          }
          else
          {
            if (InputParamType != 1)
            {
              long long v62 = (const char *)[@"InputType" UTF8String];
              long long v63 = [v16 objectForKeyedSubscript:@"InputType"];
              Phase::ParserSetParseError(a1, 1346924646, __s, v62, "Invalid InputType: %s", v63);

              goto LABEL_110;
            }
            if ((Phase::ReadFloatTypeWithDefault<double>(a1, v16, @"RangeMin", (double *)&__src[2], -INFINITY, -INFINITY, INFINITY) & 1) == 0|| (Phase::ReadFloatTypeWithDefault<double>(a1, v16, @"RangeMax", (double *)&__src[2] + 1, INFINITY, -INFINITY, INFINITY) & 1) == 0)
            {
              goto LABEL_99;
            }
            char PhaseIdWithDefault = Phase::ReadFloatTypeWithDefault<double>(a1, v16, @"DefaultValue", (double *)&__src[3], 0.0, -INFINITY, INFINITY);
          }
          if ((PhaseIdWithDefault & 1) == 0) {
            goto LABEL_99;
          }
          break;
      }
      uint64_t v34 = a3[1];
      unint64_t v33 = (unint64_t)a3[2];
      if ((unint64_t)v34 >= v33)
      {
        long long v36 = *a3;
        uint64_t v37 = 0x34F72C234F72C235 * ((v34 - *a3) >> 4);
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) > 0x8D3DCB08D3DCB0) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v39 = 0x34F72C234F72C235 * ((uint64_t)(v33 - (void)v36) >> 4);
        if (2 * v39 > v38) {
          unint64_t v38 = 2 * v39;
        }
        if (v39 >= 0x469EE58469EE58) {
          unint64_t v40 = 0x8D3DCB08D3DCB0;
        }
        else {
          unint64_t v40 = v38;
        }
        if (v40)
        {
          if (v40 > 0x8D3DCB08D3DCB0) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          char v41 = (char *)operator new(464 * v40);
        }
        else
        {
          char v41 = 0;
        }
        id v42 = &v41[464 * v37];
        memcpy(v42, __src, 0x1D0uLL);
        int v43 = v42;
        if (v34 == v36)
        {
          uint64_t v44 = a3;
        }
        else
        {
          do
          {
            v34 -= 464;
            v43 -= 464;
            memcpy(v43, v34, 0x1D0uLL);
          }
          while (v34 != v36);
          uint64_t v44 = a3;
          uint64_t v34 = *a3;
        }
        unint64_t v35 = v42 + 464;
        *uint64_t v44 = v43;
        v44[1] = v42 + 464;
        uint64_t v44[2] = &v41[464 * v40];
        if (v34) {
          operator delete(v34);
        }
      }
      else
      {
        memcpy(a3[1], __src, 0x1D0uLL);
        unint64_t v35 = v34 + 464;
      }
      a3[1] = v35;
      ++v8;
    }
    while (v8 != v65);
    uint64_t v7 = [obj countByEnumeratingWithState:&v78 objects:v86 count:16];
    uint64_t v45 = 1;
    if (v7) {
      continue;
    }
    break;
  }
LABEL_111:

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v82);
LABEL_112:

  return v45;
}

void sub_221FBB42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&STACK[0x300]);
  _Unwind_Resume(a1);
}

uint64_t Phase::BuildObjArray<Phase::MetaParameter>(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    is_mul_ok(0x34F72C234F72C235 * (v2 >> 4), 0x1D0uLL);
    operator new[]();
  }
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    JUMPOUT(0x223C93870);
  }
  return result;
}

uint64_t Phase::BuildObjArray<unsigned long long>(void *a1, uint64_t *a2)
{
  if (a1[1] != *a1) {
    operator new[]();
  }
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    JUMPOUT(0x223C93870);
  }
  return result;
}

uint64_t Phase::LoadAssetDef(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v7 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924643, "<AssetDefinition>", "", "Asset definition object must be a structure");
LABEL_21:
    uint64_t v13 = 0;
    goto LABEL_22;
  }
  if (Phase::ReadString(a1, v7, @"Name", (uint64_t)__src, 0x80uLL, 0))
  {
    if ((Phase::ReadPhaseId(a1, v7, @"Name", (void *)a3, a4) & 1) == 0
      || (Phase::ReadString(a1, v7, @"Path", a3 + 8, 0x400uLL, a4) & 1) == 0)
    {
      goto LABEL_20;
    }
    id v8 = v7;
    uint64_t v9 = @"AssetType";
    uint64_t v10 = [v8 objectForKeyedSubscript:@"AssetType"];
    if (v10)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        id v19 = @"AssetType";
        Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"AssetType" UTF8String], "Field should be a string");

        goto LABEL_20;
      }
      Assetuint64_t Type = Phase::GetAssetType((Phase *)v10, v11);
    }
    else
    {
      Assetuint64_t Type = 0;
    }
    *(void *)(a3 + 1032) = AssetType;

    id v14 = v8;
    uint64_t v15 = @"NormalizationMode";
    id v16 = [v14 objectForKeyedSubscript:@"NormalizationMode"];
    if (!v16)
    {
      uint64_t NormalizationMode = 0;
      goto LABEL_16;
    }
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t NormalizationMode = Phase::GetNormalizationMode(v16, v17);
LABEL_16:
      *(void *)(a3 + 1040) = NormalizationMode;

      if ((Phase::ReadAudioChannelLayoutTag(a1, v14, @"ChannelLayout", (unsigned int *)(a3 + 1056)) & 1) != 0
        && (Phase::ReadFloatTypeWithDefault<double>(a1, v14, @"TargetLKFS", (double *)(a3 + 1048), -12.0, -100.0, 0.0) & 1) != 0)
      {
        uint64_t v13 = 1;
        goto LABEL_22;
      }
      goto LABEL_20;
    }
    uint64_t v20 = @"NormalizationMode";
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"NormalizationMode" UTF8String], "Field should be a string");

LABEL_20:
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    goto LABEL_21;
  }
  uint64_t v13 = 0;
  *(_OWORD *)(a1 + 72) = xmmword_2220E6DD3;
  *(_OWORD *)(a1 + 88) = unk_2220E6DE3;
  *(_OWORD *)(a1 + 104) = xmmword_2220E6DF3;
  *(_OWORD *)(a1 + 120) = unk_2220E6E03;
  strcpy((char *)(a1 + 8), "<AssetDefinition>");
  *(_WORD *)(a1 + 26) = unk_2220E6DA5;
  *(_DWORD *)(a1 + 28) = unk_2220E6DA7;
  *(void *)(a1 + 32) = unk_2220E6DAB;
  *(_OWORD *)(a1 + 40) = xmmword_2220E6DB3;
  *(_OWORD *)(a1 + 56) = unk_2220E6DC3;
LABEL_22:

  return v13;
}

void sub_221FBBAF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadPhaseId(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = [v9 objectForKeyedSubscript:v10];
  if (!v11)
  {
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)[v10 UTF8String], "");
LABEL_8:
    uint64_t v13 = 0;
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[v10 UTF8String], "Field should be a string");
    goto LABEL_8;
  }
  *a4 = Phase::GetStringHashId(v11, v12);
  if (a5 && (Phase::AddStringToPool(a1, a5, v11) & 1) == 0)
  {
    strncpy((char *)(a1 + 8), (const char *)[(Phase *)v11 UTF8String], 0x80uLL);
    goto LABEL_8;
  }
  uint64_t v13 = 1;
LABEL_9:

  return v13;
}

void sub_221FBBC94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::GetAssetType(Phase *this, NSString *a2)
{
  uint64_t v2 = this;
  if ([(Phase *)v2 isEqualToString:@"resident"]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = [(Phase *)v2 isEqualToString:@"streamed"];
  }

  return v3;
}

void sub_221FBBD0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::GetNormalizationMode(Phase *this, NSString *a2)
{
  uint64_t v2 = this;
  if ([(Phase *)v2 isEqualToString:@"none"]) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = [(Phase *)v2 isEqualToString:@"dynamic"];
  }

  return v3;
}

void sub_221FBBD74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadAudioChannelLayoutTag(uint64_t a1, void *a2, void *a3, unsigned int *a4)
{
  id v7 = a3;
  id v8 = [a2 objectForKeyedSubscript:v7];
  if (!v8)
  {
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)[v7 UTF8String], "");
LABEL_12:
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v11 = (const char *)[v7 UTF8String];
    uint64_t v12 = 1346924643;
    uint64_t v13 = "Field should be a stringified channel layout tag.";
LABEL_11:
    Phase::ParserSetParseError(a1, v12, "", v11, v13);
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v8 UTF8String]);
  unsigned int LayoutTagFromString = Phase::ChannelLayout::GetLayoutTagFromString((uint64_t)__p);
  *a4 = LayoutTagFromString;
  if (v16 < 0)
  {
    operator delete(__p[0]);
    unsigned int LayoutTagFromString = *a4;
  }
  if (LayoutTagFromString > 0xFFFEFFFF || (LayoutTagFromString & 0xFFFF0000) == 0x930000)
  {
    id v11 = (const char *)[v7 UTF8String];
    uint64_t v12 = 1346924646;
    uint64_t v13 = "Invalid Channel Layout name";
    goto LABEL_11;
  }
  uint64_t v10 = 1;
LABEL_13:

  return v10;
}

void sub_221FBBEF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t Phase::ReadFloatTypeWithDefault<double>(uint64_t a1, void *a2, void *a3, double *a4, double a5, double a6, double a7)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v13 = a2;
  id v14 = a3;
  uint64_t v15 = [v13 objectForKeyedSubscript:v14];
  char v16 = v15;
  if (v15)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[v14 UTF8String], "Field should be a number");
      uint64_t v21 = 0;
      goto LABEL_11;
    }
    uint64_t v15 = (Phase::Logger *)[(Phase::Logger *)v16 doubleValue];
    a5 = v17;
  }
  *a4 = a5;
  if (a5 < a6 || a5 > a7)
  {
    uint64_t v18 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v15)
                                                                                        + 16)));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = [v14 UTF8String];
      double v20 = *a4;
      int v23 = 136316418;
      uint64_t v24 = "ParserCore.mm";
      __int16 v25 = 1024;
      int v26 = 617;
      __int16 v27 = 2080;
      uint64_t v28 = v19;
      __int16 v29 = 2048;
      double v30 = v20;
      __int16 v31 = 2048;
      double v32 = a6;
      __int16 v33 = 2048;
      double v34 = a7;
      _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d WARNING: %s %f is out of range [%f, %f]. Clamping...", (uint8_t *)&v23, 0x3Au);
    }

    *a4 = fmin(fmax(*a4, a6), a7);
  }
  uint64_t v21 = 1;
LABEL_11:

  return v21;
}

void sub_221FBC120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::LoadChannelMapping(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id v7 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924643, "<ChannelMapping>", "", "ChannelMapping object must be a structure");
LABEL_18:
    uint64_t v12 = 0;
    goto LABEL_19;
  }
  if ((Phase::ReadString(a1, v7, @"Name", (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
  {
    uint64_t v12 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_2220E6E54;
    *(_OWORD *)(a1 + 88) = unk_2220E6E64;
    *(_OWORD *)(a1 + 104) = xmmword_2220E6E74;
    *(_OWORD *)(a1 + 120) = unk_2220E6E84;
    strcpy((char *)(a1 + 8), "<ChannelMapping>");
    *(unsigned char *)(a1 + 25) = unk_2220E6E25;
    *(_WORD *)(a1 + 26) = unk_2220E6E26;
    *(_DWORD *)(a1 + 28) = unk_2220E6E28;
    *(void *)(a1 + 32) = unk_2220E6E2C;
    *(_OWORD *)(a1 + 40) = xmmword_2220E6E34;
    *(_OWORD *)(a1 + 56) = unk_2220E6E44;
    goto LABEL_19;
  }
  if ((Phase::ReadPhaseId(a1, v7, @"Name", (void *)a3, a4) & 1) == 0)
  {
LABEL_17:
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    goto LABEL_18;
  }
  id v8 = v7;
  id v9 = @"NumInputChannels";
  uint64_t v10 = [v8 objectForKeyedSubscript:@"NumInputChannels"];
  if (!v10)
  {
    id v13 = @"NumInputChannels";
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)[@"NumInputChannels" UTF8String], "");
LABEL_16:

    goto LABEL_17;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v14 = @"NumInputChannels";
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"NumInputChannels" UTF8String], "Field should be a number");
    goto LABEL_16;
  }
  *(unsigned char *)(a3 + 8) = [v10 longLongValue];

  if ((Phase::ReadPhaseId(a1, v8, @"OutputConfiguration", (void *)(a3 + 16), a4) & 1) == 0) {
    goto LABEL_17;
  }
  id v11 = [v8 objectForKeyedSubscript:@"Matrix"];
  if (!v11 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    Phase::ParserSetParseError(a1, 1346924643, __src, (const char *)[@"Matrix" UTF8String], "Matrix object must be an array");
    goto LABEL_22;
  }
  if ([v11 count] != *(unsigned __int8 *)(a3 + 8))
  {
    Phase::ParserSetParseError(a1, 1346924641, __src, (const char *)[@"NumInputChannels" UTF8String], "The NumInputChannels and number of rows in the matrix do not match");
    goto LABEL_22;
  }
  if ((unint64_t)[v11 count] >= 0xD)
  {
    Phase::ParserSetParseError(a1, 1346924641, __src, (const char *)[@"NumInputChannels" UTF8String], "Exceeded maximum number of input channels");
LABEL_22:
    uint64_t v12 = 0;
    goto LABEL_23;
  }
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  obuint64_t j = v11;
  uint64_t v16 = [obj countByEnumeratingWithState:&v46 objects:v51 count:16];
  if (!v16)
  {
    uint64_t v12 = 1;
    goto LABEL_50;
  }
  LODWORD(v17) = 0;
  uint64_t v18 = *(void *)v47;
  uint64_t v19 = a3 + 24;
  uint64_t v41 = 0xFFFFFFFFLL;
  uint64_t v35 = *(void *)v47;
  uint64_t v33 = a3 + 24;
  while (2)
  {
    uint64_t v17 = (int)v17;
    uint64_t v38 = v19 + 96 * (int)v17;
    uint64_t v39 = 0;
    uint64_t v36 = v16;
    do
    {
      if (*(void *)v47 != v18) {
        objc_enumerationMutation(obj);
      }
      double v20 = *(void **)(*((void *)&v46 + 1) + 8 * v39);
      if (!v20 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        Phase::ParserSetParseError(a1, 1346924643, __src, (const char *)[@"Matrix" UTF8String], "Matrix row object must be an array");
LABEL_48:
        uint64_t v12 = 0;
        goto LABEL_50;
      }
      if (v41 == 0xFFFFFFFFLL)
      {
        unint64_t v21 = [v20 count];
      }
      else
      {
        uint64_t v22 = [v20 count];
        unint64_t v21 = v41;
        if (v22 != v41)
        {
          __int16 v31 = (const char *)[@"Matrix" UTF8String];
          double v32 = "Inconsistant number of columns in matrix";
          goto LABEL_54;
        }
      }
      uint64_t v41 = v21;
      if (v21 >= 0xD)
      {
        __int16 v31 = (const char *)[@"OutputConfiguration" UTF8String];
        double v32 = "Exceeded maximum number of output channels";
LABEL_54:
        Phase::ParserSetParseError(a1, 1346924641, __src, v31, v32);
        goto LABEL_48;
      }
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      id v23 = v20;
      uint64_t v24 = [v23 countByEnumeratingWithState:&v42 objects:v50 count:16];
      if (v24)
      {
        int v25 = 0;
        uint64_t v26 = *(void *)v43;
        uint64_t v34 = v17;
        while (2)
        {
          uint64_t v27 = 0;
          int v37 = v25;
          uint64_t v28 = v38 + 8 * v25;
          do
          {
            if (*(void *)v43 != v26) {
              objc_enumerationMutation(v23);
            }
            __int16 v29 = *(void **)(*((void *)&v42 + 1) + 8 * v27);
            if (!v29 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
            {
              Phase::ParserSetParseError(a1, 1346924643, __src, (const char *)[@"Matrix" UTF8String], "Matrix object is not a number");

              goto LABEL_48;
            }
            [v29 floatValue];
            *(double *)(v28 + 8 * v27++) = v30;
          }
          while (v24 != v27);
          uint64_t v24 = [v23 countByEnumeratingWithState:&v42 objects:v50 count:16];
          int v25 = v37 + v27;
          uint64_t v17 = v34;
          uint64_t v18 = v35;
          if (v24) {
            continue;
          }
          break;
        }
      }

      ++v17;
      v38 += 96;
      ++v39;
    }
    while (v39 != v36);
    uint64_t v12 = 1;
    uint64_t v18 = v35;
    uint64_t v19 = v33;
    uint64_t v16 = [obj countByEnumeratingWithState:&v46 objects:v51 count:16];
    if (v16) {
      continue;
    }
    break;
  }
LABEL_50:

LABEL_23:
LABEL_19:

  return v12;
}

void sub_221FBC7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

id Phase::GetNSErrorFromParserError(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 136;
  if (*(unsigned char *)(a1 + 136))
  {
    uint64_t v3 = NSString;
    uint64_t v4 = [MEMORY[0x263F086E0] mainBundle];
    uint64_t v5 = [v4 localizedStringForKey:@"%s : Struct: %s Field: %s" value:&stru_26D47BF58 table:0];
    uint64_t v6 = objc_msgSend(v3, "stringWithFormat:", v5, a1 + 264, a1 + 8, v2);
  }
  else
  {
    BOOL v7 = *(unsigned char *)(a1 + 8) == 0;
    id v8 = NSString;
    id v9 = [MEMORY[0x263F086E0] mainBundle];
    uint64_t v4 = v9;
    if (v7)
    {
      uint64_t v5 = [v9 localizedStringForKey:@"%s" value:&stru_26D47BF58 table:0];
      objc_msgSend(v8, "stringWithFormat:", v5, a1 + 264);
    }
    else
    {
      uint64_t v5 = [v9 localizedStringForKey:@"%s : Struct: %s" value:&stru_26D47BF58 table:0];
      objc_msgSend(v8, "stringWithFormat:", v5, a1 + 264, a1 + 8);
    uint64_t v6 = };
  }
  uint64_t v10 = (void *)v6;

  uint64_t v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v11)
                                                                                      + 16)));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    unint64_t v13 = *(void *)a1 - 1346924642;
    if (v13 > 7) {
      id v14 = "Parse Error";
    }
    else {
      id v14 = off_2645F76A8[v13];
    }
    *(_DWORD *)buf = 136315906;
    unint64_t v21 = "ParserCore.mm";
    __int16 v22 = 1024;
    int v23 = 3306;
    __int16 v24 = 2080;
    int v25 = v14;
    __int16 v26 = 2080;
    uint64_t v27 = [v10 UTF8String];
    _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d Error: %s - %s", buf, 0x26u);
  }

  uint64_t v18 = *MEMORY[0x263F08320];
  uint64_t v19 = v10;
  uint64_t v15 = [NSDictionary dictionaryWithObjects:&v19 forKeys:&v18 count:1];
  uint64_t v16 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346924648 userInfo:v15];

  return v16;
}

void sub_221FBCAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::MakeDataBundle(uint64_t a1, void *a2)
{
}

void sub_221FBD310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  uint64_t v17 = *(void **)(v15 - 224);
  if (v17) {
    operator delete(v17);
  }
  uint64_t v18 = a15;
  a15 = 0;
  if (v18) {
    std::default_delete<Phase::DataBundle>::operator()[abi:ne180100]((uint64_t)&a15, v18);
  }

  _Unwind_Resume(a1);
}

void Phase::MakeActionTree(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  id v6 = a1;
  id v7 = a3;
  if (a4) {
    *a4 = 0;
  }
  operator new();
}

void sub_221FBD5A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<Phase::ActionTree>::reset[abi:ne180100]((Phase::ActionTree **)va, 0);

  _Unwind_Resume(a1);
}

void Phase::MakeGlobalMetaParameters(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  id v7 = a1;
  memset(__p, 0, sizeof(__p));
  if (a3) {
    *a3 = 0;
  }
  if (Phase::BuildParameters((uint64_t)v11, v7, (char **)__p, a2))
  {
    *a4 = 0;
    Phase::BuildObjArray<Phase::MetaParameter>(__p, a4);
  }
  else
  {
    uint64_t v8 = Phase::GetNSErrorFromParserError((uint64_t)v11);
    id v9 = v8;
    if (a3) {
      *a3 = v8;
    }
    *a4 = 0;
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
}

void sub_221FBD6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t Phase::GetStringHashId(Phase *this, NSString *a2)
{
  uint64_t v2 = this;
  uint64_t v3 = (unsigned char *)[(Phase *)v2 cStringUsingEncoding:4];
  if (v3 && (unsigned int v4 = *v3, *v3))
  {
    uint64_t v5 = v3 + 1;
    uint64_t v6 = 0xCBF29CE484222325;
    do
    {
      uint64_t v6 = 0x100000001B3 * (v6 ^ v4);
      unsigned int v7 = *v5++;
      unsigned int v4 = v7;
    }
    while (v7);
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

void sub_221FBD790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::AddStringToPool(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([v4 length])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v4 UTF8String]);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(a2, (unsigned __int8 *)__p, (uint64_t)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }

  return 1;
}

void sub_221FBD828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    Phase::ParserSetParseError(v16, 1346924644, "", "", "Out of memory");
    __cxa_end_catch();
    JUMPOUT(0x221FBD80CLL);
  }

  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = (void *)(a1 + 16);
  uint64_t v17 = operator new(0x28uLL);
  void *v17 = 0;
  v17[1] = v9;
  *((_OWORD *)v17 + 1) = *(_OWORD *)a3;
  void v17[4] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  int v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    void *v17 = *v25;
LABEL_38:
    *int v25 = v17;
    goto LABEL_39;
  }
  void *v17 = *v16;
  void *v16 = v17;
  *(void *)(v24 + 8 * v3) = v16;
  if (*v17)
  {
    unint64_t v26 = *(void *)(*v17 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    int v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*v7;
}

void sub_221FBDAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    unint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t Phase::ReadParamIdx(uint64_t a1, void *a2, void *a3, Phase *a4, unsigned char *a5, uint64_t a6)
{
  id v11 = a2;
  id v12 = a3;
  unint64_t v13 = [v11 objectForKeyedSubscript:v12];
  if (!v13)
  {
    *a5 = -1;
    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[v12 UTF8String], "Field should be a string");
    goto LABEL_39;
  }
  uint64_t StringHashId = (Phase::ActionTreeBuilder *)Phase::GetStringHashId(v13, v14);
  if ((Phase::GetParamIndex(a4, StringHashId, a5, v16) & 1) == 0)
  {
    float v18 = v13;
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      if ([(Phase *)v18 length])
      {
        uint64_t v20 = Phase::GetStringHashId(v18, v19);
        if (v20)
        {
          unint64_t v21 = (uint64_t *)*((void *)a4 + 17);
          unint64_t v22 = (uint64_t *)*((void *)a4 + 18);
          size_t v23 = v21;
          if (v21 != v22)
          {
            while (*v23 != v20)
            {
              if (++v23 == v22)
              {
                size_t v23 = (uint64_t *)*((void *)a4 + 18);
                break;
              }
            }
          }
          if (v23 == v22)
          {
            unint64_t v24 = *((void *)a4 + 19);
            if ((unint64_t)v22 >= v24)
            {
              uint64_t v38 = v22 - v21;
              if ((unint64_t)(v38 + 1) >> 61) {
                std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v27 = v24 - (void)v21;
              unint64_t v28 = (uint64_t)(v24 - (void)v21) >> 2;
              if (v28 <= v38 + 1) {
                unint64_t v28 = v38 + 1;
              }
              if (v27 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v28;
              }
              if (v29)
              {
                float v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)a4 + 152, v29);
                unint64_t v21 = (uint64_t *)*((void *)a4 + 17);
                unint64_t v22 = (uint64_t *)*((void *)a4 + 18);
              }
              else
              {
                float v30 = 0;
              }
              __int16 v31 = (uint64_t *)&v30[8 * v38];
              double v32 = &v30[8 * v29];
              *__int16 v31 = v20;
              int v25 = v31 + 1;
              while (v22 != v21)
              {
                uint64_t v33 = *--v22;
                *--__int16 v31 = v33;
              }
              *((void *)a4 + 17) = v31;
              *((void *)a4 + 18) = v25;
              *((void *)a4 + 19) = v32;
              if (v21) {
                operator delete(v21);
              }
            }
            else
            {
              uint64_t *v22 = v20;
              int v25 = v22 + 1;
            }
            *((void *)a4 + 18) = v25;
          }
        }
      }

      uint64_t v35 = (Phase::ActionTreeBuilder *)Phase::GetStringHashId(v18, v34);
      if (Phase::GetParamIndex(a4, v35, a5, v36)) {
        goto LABEL_4;
      }
      unint64_t v26 = (const char *)[v12 UTF8String];
      [(Phase *)v18 UTF8String];
    }
    else
    {
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[(Phase *)v18 UTF8String], "Parameter name should be a string");

      unint64_t v26 = (const char *)[v12 UTF8String];
      [(Phase *)v18 UTF8String];
    }
    Phase::ParserSetParseError(a1, 1346924643, "", v26, "Failed to parse %s as a param index");
    goto LABEL_39;
  }
LABEL_4:
  if (a6 && (Phase::AddStringToPool(a1, a6, v13) & 1) == 0)
  {
    strncpy((char *)(a1 + 8), (const char *)[(Phase *)v13 UTF8String], 0x80uLL);
LABEL_39:
    uint64_t v17 = 0;
    goto LABEL_40;
  }
LABEL_8:
  uint64_t v17 = 1;
LABEL_40:

  return v17;
}

uint64_t Phase::ParseDirectivityModelParams(uint64_t a1, void *a2, char *a3, double *a4, int a5)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  id v9 = a2;
  bzero(a4, 0x3F0uLL);
  int v56 = a5;
  if (a5) {
    int v10 = @"ListenerDirectivityModelType";
  }
  else {
    int v10 = @"SourceDirectivityModelType";
  }
  id v11 = v9;
  id v12 = v10;
  unint64_t v13 = [v11 objectForKeyedSubscript:v12];
  if (v13)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      unint64_t v26 = v12;
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[(__CFString *)v26 UTF8String], "Field should be a string");

      strncpy((char *)(a1 + 8), a3, 0x80uLL);
LABEL_66:
      uint64_t v45 = 0;
      goto LABEL_67;
    }
    DirectivityModeluint64_t Type = GetDirectivityModelType((NSString *)v13);
  }
  else
  {
    DirectivityModeluint64_t Type = 0;
  }
  *(unsigned char *)a4 = DirectivityModelType;

  int v15 = *(unsigned __int8 *)a4;
  if (v15 == 3)
  {
    if (v56) {
      unint64_t v27 = @"ListenerSphericalCapDirectivityParameters";
    }
    else {
      unint64_t v27 = @"SourceSphericalCapDirectivityParameters";
    }
    id v57 = 0;
    char OptionalChildDictionary = Phase::GetOptionalChildDictionary(a1, v11, v27, &v57);
    id v19 = v57;
    if (OptionalChildDictionary)
    {
      if ((Phase::ReadFloatTypeWithDefault<double>(a1, v19, @"SphereRadius", a4 + 1, 0.3, 0.001, 10.0) & 1) != 0
        && (Phase::ReadFloatTypeWithDefault<double>(a1, v19, @"CapOpeningAngle", a4 + 2, 30.0, 0.01, 360.0) & 1) != 0)
      {

        goto LABEL_58;
      }
      strncpy((char *)(a1 + 8), a3, 0x80uLL);
    }
    else
    {
      Phase::ParserSetParseError(a1, 1346924643, a3, (const char *)[(__CFString *)v27 UTF8String], "Submix %s directivity parameters object must be a dictionary");
    }
LABEL_65:

    goto LABEL_66;
  }
  if (v15 != 2)
  {
    if (v15 != 1) {
      goto LABEL_58;
    }
    *((_DWORD *)a4 + 2) = 0;
    if (v56) {
      uint64_t v16 = @"ListenerCardioidDirectivitySubbands";
    }
    else {
      uint64_t v16 = @"SourceCardioidDirectivitySubbands";
    }
    id v67 = 0;
    char OptionalChildArray = Phase::GetOptionalChildArray(a1, v11, v16, &v67);
    id v18 = v67;
    id v19 = v18;
    if (OptionalChildArray)
    {
      id v54 = v11;
      long long v66 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v63 = 0u;
      id v20 = v18;
      uint64_t v21 = [v20 countByEnumeratingWithState:&v63 objects:v77 count:16];
      if (v21)
      {
        obuint64_t j = *(id *)v64;
        unint64_t v22 = a4 + 2;
        while (2)
        {
          for (uint64_t i = 0; i != v21; ++i)
          {
            if (*(id *)v64 != obj) {
              objc_enumerationMutation(v20);
            }
            unint64_t v24 = *(void **)(*((void *)&v63 + 1) + 8 * i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              Phase::ParserSetParseError(a1, 1346924643, a3, (const char *)[@"EnvelopeSegments" UTF8String], "Submix %s directivity subband object must be a dictionary");
              goto LABEL_72;
            }
            unsigned int v25 = *((_DWORD *)a4 + 2);
            if (v25 >= 0x20)
            {
              Phase::ParserSetParseError(a1, 1346924646, a3, (const char *)[@"EnvelopeSegments" UTF8String], "Too many submix %s directivity subbands.  Masimd_float4 x = %d");
              goto LABEL_72;
            }
            if ((Phase::ReadFloatTypeWithDefault<double>(a1, v24, @"Frequency", &v22[3 * v25], 1000.0, 20.0, 20000.0) & 1) == 0|| (Phase::ReadFloatTypeWithDefault<double>(a1, v24, @"Pattern", &v22[3 * v25 + 1], 0.0, 0.0, 1.0) & 1) == 0|| (Phase::ReadFloatTypeWithDefault<double>(a1, v24, @"Sharpness", &v22[3 * v25 + 2], 1.0, 1.0, 1.79769313e308) & 1) == 0)
            {
              strncpy((char *)(a1 + 8), a3, 0x80uLL);
LABEL_72:
              id v11 = v54;

              goto LABEL_66;
            }
            ++*((_DWORD *)a4 + 2);
          }
          uint64_t v21 = [v20 countByEnumeratingWithState:&v63 objects:v77 count:16];
          if (v21) {
            continue;
          }
          break;
        }
      }

      id v11 = v54;
      goto LABEL_58;
    }
    Phase::ParserSetParseError(a1, 1346924643, a3, (const char *)[@"EnvelopeSegments" UTF8String], "Submix %s directivity subband array object must be an array");
    goto LABEL_65;
  }
  *((_DWORD *)a4 + 2) = 0;
  if (v56) {
    unint64_t v29 = @"ListenerConeDirectivitySubbands";
  }
  else {
    unint64_t v29 = @"SourceConeDirectivitySubbands";
  }
  id v62 = 0;
  char v30 = Phase::GetOptionalChildArray(a1, v11, v29, &v62);
  id v31 = v62;
  double v32 = v31;
  if ((v30 & 1) == 0)
  {
    long long v46 = (const char *)[@"EnvelopeSegments" UTF8String];
    long long v47 = "source";
    if (v56) {
      long long v47 = "listener";
    }
    Phase::ParserSetParseError(a1, 1346924643, a3, v46, "Submix %s directivity subband array object must be an array", v47);

    goto LABEL_66;
  }
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id v33 = v31;
  uint64_t v34 = [v33 countByEnumeratingWithState:&v58 objects:v76 count:16];
  if (!v34) {
    goto LABEL_57;
  }
  uint64_t v35 = a4 + 2;
  uint64_t v36 = *(void *)v59;
  id obja = v33;
  id v55 = v11;
  __src = a3;
  while (2)
  {
    for (uint64_t j = 0; j != v34; ++j)
    {
      if (*(void *)v59 != v36) {
        objc_enumerationMutation(obja);
      }
      uint64_t v38 = *(void **)(*((void *)&v58 + 1) + 8 * j);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        long long v49 = obja;
        Phase::ParserSetParseError(a1, 1346924643, __src, (const char *)[@"EnvelopeSegments" UTF8String], "Submix %s directivity subband object must be a dictionary");
        goto LABEL_76;
      }
      uint64_t v39 = *((unsigned int *)a4 + 2);
      if (v39 >= 0x20)
      {
        long long v49 = obja;
        Phase::ParserSetParseError(a1, 1346924646, __src, (const char *)[@"EnvelopeSegments" UTF8String], "Too many submix %s directivity subbands.  Masimd_float4 x = %d");
        goto LABEL_76;
      }
      if ((Phase::ReadFloatTypeWithDefault<double>(a1, v38, @"Frequency", &v35[4 * v39], 1000.0, 20.0, 20000.0) & 1) == 0
        || (unint64_t v40 = &v35[4 * v39 + 1],
            (Phase::ReadFloatTypeWithDefault<double>(a1, v38, @"InnerAngle", v40, 360.0, 0.0, 360.0) & 1) == 0)
        || (uint64_t v41 = &v35[4 * v39 + 2],
            uint64_t FloatTypeWith = Phase::ReadFloatTypeWithDefault<double>(a1, v38, @"OuterAngle", v41, 360.0, 0.0, 360.0), (FloatTypeWith & 1) == 0))
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);
        long long v49 = obja;
        id v11 = v55;
LABEL_76:

        goto LABEL_66;
      }
      if (*v40 > *v41)
      {
        log = objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance((Phase::Logger *)FloatTypeWith)
                                                         + 16));
        if (os_log_type_enabled(log, OS_LOG_TYPE_ERROR))
        {
          double v43 = *v40;
          double v44 = *v41;
          *(_DWORD *)buf = 136315906;
          uint64_t v69 = "ParserCore.mm";
          __int16 v70 = 1024;
          int v71 = 2480;
          __int16 v72 = 2048;
          double v73 = v43;
          __int16 v74 = 2048;
          double v75 = v44;
          _os_log_impl(&dword_221E5E000, log, OS_LOG_TYPE_ERROR, "%25s:%-5d WARNING: subband.mInnerAngleInDegrees %f is greater than subband.mOuterAngleInDegrees %f. Clamping subband.mInnerAngleInDegrees to subband.mOuterAngleInDegrees.", buf, 0x26u);
        }
        *unint64_t v40 = *v41;
      }
      id v11 = v55;
      if ((Phase::ReadFloatTypeWithDefault<double>(a1, v38, @"OuterGain", &v35[4 * v39 + 3], 1.0, 0.0, 1.0) & 1) == 0)
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);
        long long v49 = obja;
        goto LABEL_76;
      }
      ++*((_DWORD *)a4 + 2);
    }
    id v33 = obja;
    uint64_t v34 = [obja countByEnumeratingWithState:&v58 objects:v76 count:16];
    if (v34) {
      continue;
    }
    break;
  }
LABEL_57:

LABEL_58:
  uint64_t v45 = 1;
LABEL_67:

  return v45;
}

void sub_221FBE938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::GetOptionalChildArray(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = [v7 objectForKeyedSubscript:v8];
  if (v9)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[v8 UTF8String], "Field should be an array");
      uint64_t v10 = 0;
      goto LABEL_7;
    }
    *a4 = v9;
  }
  else
  {
    *a4 = 0;
  }
  uint64_t v10 = 1;
LABEL_7:

  return v10;
}

void sub_221FBEAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::GetOptionalChildDictionary(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = [v7 objectForKeyedSubscript:v8];
  if (v9)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[v8 UTF8String], "Field should be a dictionary");
      uint64_t v10 = 0;
      goto LABEL_7;
    }
    *a4 = v9;
  }
  else
  {
    *a4 = 0;
  }
  uint64_t v10 = 1;
LABEL_7:

  return v10;
}

void sub_221FBEBA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL Phase::ReadAVAudioChannelLayout(uint64_t a1, void *a2, id *a3)
{
  id v5 = a2;
  uint64_t v6 = @"ChannelLayout";
  unsigned int v11 = 0;
  BOOL v9 = Phase::ReadAudioChannelLayoutTag(a1, v5, @"ChannelLayout", &v11)
    && (id v7 = objc_alloc(MEMORY[0x263EF9328]),
        id v8 = (id)[v7 initWithLayoutTag:v11],
        (*a3 = v8) != 0)
    && !*(_DWORD *)([v8 layout] + 8)
    && *(_DWORD *)([*a3 layout] + 4) == 0;

  return v9;
}

void sub_221FBEC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unsigned int v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unsigned int v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t Phase::GetParamIndex(Phase *this, Phase::ActionTreeBuilder *a2, unsigned char *a3, signed __int8 *a4)
{
  if ((Phase::ActionTreeBuilder *)Phase::GetStringHashId((Phase *)@"auto_distance", (NSString *)a2) == a2)
  {
    uint64_t result = 1;
    LOBYTE(v8) = -2;
  }
  else
  {
    uint64_t v10 = *((void *)this + 17);
    uint64_t v9 = *((void *)this + 18);
    uint64_t v11 = v9 - v10;
    if (v9 == v10)
    {
LABEL_8:
      uint64_t result = 0;
      LOBYTE(v8) = -1;
    }
    else
    {
      uint64_t v8 = 0;
      unint64_t v12 = v11 >> 3;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      while (*(Phase::ActionTreeBuilder **)(v10 + 8 * v8) != a2)
      {
        if (v12 == ++v8) {
          goto LABEL_8;
        }
      }
      uint64_t result = 1;
    }
  }
  *a3 = v8;
  return result;
}

uint64_t Phase::ReadEnumWithDefault<PHASECurveType>(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = @"CurveType";
  uint8x8_t v7 = [v5 objectForKeyedSubscript:@"CurveType"];
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v9 = @"CurveType";
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"CurveType" UTF8String], "Field should be a string");
      uint64_t v8 = 0;
      goto LABEL_7;
    }
    *a3 = GetCurveType(v7);
  }
  else
  {
    *a3 = 1668435054;
  }
  uint64_t v8 = 1;
LABEL_7:

  return v8;
}

void sub_221FBEF30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    unint64_t v2 = __p;
    do
    {
      unint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t Phase::GetParamType(Phase *this, NSString *a2)
{
  unint64_t v2 = this;
  if ([(Phase *)v2 isEqualToString:@"input"])
  {
    uint64_t v3 = 1;
  }
  else if ([(Phase *)v2 isEqualToString:@"mapped_range"])
  {
    uint64_t v3 = 2;
  }
  else if ([(Phase *)v2 isEqualToString:@"mapped_discrete"])
  {
    uint64_t v3 = 3;
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_221FBF05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::GetInputParamType(Phase *this, NSString *a2)
{
  unint64_t v2 = this;
  if ([(Phase *)v2 isEqualToString:@"float"])
  {
    uint64_t v3 = 1;
  }
  else if ([(Phase *)v2 isEqualToString:@"string"])
  {
    uint64_t v3 = 2;
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_221FBF0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadPhaseIdWithDefault(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  uint64_t v11 = [v9 objectForKeyedSubscript:v10];
  if (!v11)
  {
    *a4 = 0;
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[v10 UTF8String], "Field should be a string");
LABEL_10:
    uint64_t v13 = 0;
    goto LABEL_11;
  }
  if (a5 && (Phase::AddStringToPool(a1, a5, v11) & 1) == 0)
  {
    strncpy((char *)(a1 + 8), (const char *)[v11 UTF8String], 0x80uLL);
    goto LABEL_10;
  }
  *a4 = Phase::GetStringHashId((Phase *)v11, v12);
LABEL_7:
  uint64_t v13 = 1;
LABEL_11:

  return v13;
}

void sub_221FBF1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadEnumWithoutDefault<Phase::OutputMetaParamType>(uint64_t a1, void *a2, _DWORD *a3)
{
  id v5 = a2;
  unint64_t v6 = @"OutputType";
  uint8x8_t v7 = [v5 objectForKeyedSubscript:@"OutputType"];
  if (!v7)
  {
    uint64_t v11 = @"OutputType";
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)[@"OutputType" UTF8String], "");
LABEL_8:
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v12 = @"OutputType";
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"OutputType" UTF8String], "Field should be a string");
    goto LABEL_8;
  }
  OutputParamuint64_t Type = Phase::GetOutputParamType(v7, v8);
  *a3 = OutputParamType;
  if (!OutputParamType)
  {
    uint64_t v13 = @"OutputType";
    BOOL v14 = (const char *)[@"OutputType" UTF8String];
    int v15 = @"OutputType";
    [@"OutputType" UTF8String];
    [(Phase *)v7 UTF8String];
    Phase::ParserSetParseError(a1, 1346924643, "", v14, "Field is bad %s - %s");
    goto LABEL_8;
  }
  uint64_t v10 = 1;
LABEL_9:

  return v10;
}

void sub_221FBF3B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::GetOutputParamType(Phase *this, NSString *a2)
{
  unint64_t v2 = this;
  if ([(Phase *)v2 isEqualToString:@"float"])
  {
    uint64_t v3 = 1;
  }
  else if ([(Phase *)v2 isEqualToString:@"string"])
  {
    uint64_t v3 = 2;
  }
  else if ([(Phase *)v2 isEqualToString:@"paramset"])
  {
    uint64_t v3 = 3;
  }
  else if ([(Phase *)v2 isEqualToString:@"insertfx"])
  {
    uint64_t v3 = 4;
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_221FBF470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::GetChildDictionary(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = @"Envelope";
  uint8x8_t v7 = [v5 objectForKeyedSubscript:@"Envelope"];
  if (!v7)
  {
    id v9 = @"Envelope";
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)[@"Envelope" UTF8String], "");
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v10 = @"Envelope";
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"Envelope" UTF8String], "Field should be a dictionary");
    goto LABEL_6;
  }
  *a3 = v7;
  uint64_t v8 = 1;
LABEL_7:

  return v8;
}

void sub_221FBF59C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ParseEnvelope(uint64_t a1, void *a2, char *a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  id v7 = a2;
  if ((Phase::ReadFloatType<double>(a1, v7, @"StartInputValue", (double *)a4) & 1) != 0
    && (Phase::ReadFloatType<double>(a1, v7, @"StartOutputValue", (double *)(a4 + 8)) & 1) != 0)
  {
    *(_DWORD *)(a4 + 16) = 0;
    id v29 = 0;
    char OptionalChildArray = Phase::GetOptionalChildArray(a1, v7, @"Segments", &v29);
    id v9 = v29;
    uint64_t v10 = v9;
    if (OptionalChildArray)
    {
      if ((unint64_t)[v9 count] >= 0x11)
      {
        [v10 count];
        Phase::ParserSetParseError(a1, 1346924646, a3, a3, "Envelope has too many segments %d > %d");
LABEL_9:
        uint64_t v11 = 0;
LABEL_10:

        goto LABEL_11;
      }
      long long v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      obuint64_t j = v10;
      uint64_t v17 = [obj countByEnumeratingWithState:&v25 objects:v30 count:16];
      if (v17)
      {
        uint64_t v18 = a4 + 24;
        uint64_t v24 = *(void *)v26;
        unint64_t v22 = v10;
        while (2)
        {
          for (uint64_t i = 0; i != v17; ++i)
          {
            if (*(void *)v26 != v24) {
              objc_enumerationMutation(obj);
            }
            id v20 = *(void **)(*((void *)&v25 + 1) + 8 * i);
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              uint64_t v10 = v22;
              Phase::ParserSetParseError(a1, 1346924643, a3, (const char *)[@"Segments" UTF8String], "Envelope segment object must be a dictionary");
              goto LABEL_27;
            }
            unsigned int v21 = *(_DWORD *)(a4 + 16);
            if ((Phase::ReadFloatType<double>(a1, v20, @"InputValue", (double *)(v18 + 24 * v21)) & 1) == 0
              || (Phase::ReadFloatType<double>(a1, v20, @"OutputValue", (double *)(v18 + 24 * v21 + 8)) & 1) == 0
              || (Phase::ReadEnumWithDefault<PHASECurveType>(a1, v20, (void *)(v18 + 24 * v21 + 16)) & 1) == 0)
            {
              strncpy((char *)(a1 + 8), a3, 0x80uLL);
              uint64_t v10 = v22;
LABEL_27:

              goto LABEL_9;
            }
            ++*(_DWORD *)(a4 + 16);
          }
          uint64_t v17 = [obj countByEnumeratingWithState:&v25 objects:v30 count:16];
          uint64_t v10 = v22;
          if (v17) {
            continue;
          }
          break;
        }
      }

      if (*(_DWORD *)(a4 + 16))
      {
        uint64_t v11 = 1;
        goto LABEL_10;
      }
      uint64_t v15 = 1346924641;
      unint64_t v12 = "";
      uint64_t v13 = "Envelope doesn't have any segments";
      uint64_t v14 = a1;
    }
    else
    {
      unint64_t v12 = (const char *)[@"Segments" UTF8String];
      uint64_t v13 = "Envelope segment array object must be an array";
      uint64_t v14 = a1;
      uint64_t v15 = 1346924643;
    }
    Phase::ParserSetParseError(v14, v15, a3, v12, v13);
    goto LABEL_9;
  }
  strncpy((char *)(a1 + 8), a3, 0x80uLL);
  uint64_t v11 = 0;
LABEL_11:

  return v11;
}

void sub_221FBF8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadFloatType<double>(uint64_t a1, void *a2, void *a3, double *a4)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v7 = a2;
  id v8 = a3;
  id v9 = [v7 objectForKeyedSubscript:v8];
  if (!v9)
  {
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)[v8 UTF8String], "");
LABEL_11:
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[v8 UTF8String], "Field should be a number");
    goto LABEL_11;
  }
  uint64_t v10 = (Phase::Logger *)[v9 doubleValue];
  *a4 = v11;
  if (v11 < -1.79769313e308 || v11 > 1.79769313e308)
  {
    unint64_t v12 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v10)
                                                                                        + 16)));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = [v8 UTF8String];
      double v14 = *a4;
      int v17 = 136316418;
      uint64_t v18 = "ParserCore.mm";
      __int16 v19 = 1024;
      int v20 = 583;
      __int16 v21 = 2080;
      uint64_t v22 = v13;
      __int16 v23 = 2048;
      double v24 = v14;
      __int16 v25 = 2048;
      unint64_t v26 = 0xFFEFFFFFFFFFFFFFLL;
      __int16 v27 = 2048;
      uint64_t v28 = 0x7FEFFFFFFFFFFFFFLL;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d WARNING: %s %f is out of range [%f, %f]. Clamping...", (uint8_t *)&v17, 0x3Au);
    }

    *a4 = fmin(fmax(*a4, -1.79769313e308), 1.79769313e308);
  }
  uint64_t v15 = 1;
LABEL_12:

  return v15;
}

void sub_221FBFB70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::GetNodeType(Phase *this, NSString *a2)
{
  unint64_t v2 = this;
  if ([(Phase *)v2 isEqualToString:@"sampler"])
  {
    uint64_t v3 = 1;
  }
  else if ([(Phase *)v2 isEqualToString:@"blend"])
  {
    uint64_t v3 = 2;
  }
  else if ([(Phase *)v2 isEqualToString:@"random"])
  {
    uint64_t v3 = 3;
  }
  else if ([(Phase *)v2 isEqualToString:@"switch"])
  {
    uint64_t v3 = 4;
  }
  else if ([(Phase *)v2 isEqualToString:@"container"])
  {
    uint64_t v3 = 5;
  }
  else if ([(Phase *)v2 isEqualToString:@"pushstream"])
  {
    uint64_t v3 = 6;
  }
  else if ([(Phase *)v2 isEqualToString:@"procedure"])
  {
    uint64_t v3 = 7;
  }
  else if ([(Phase *)v2 isEqualToString:@"externaloutputpullstream"])
  {
    uint64_t v3 = 8;
  }
  else if ([(Phase *)v2 isEqualToString:@"pullstream"])
  {
    uint64_t v3 = 9;
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_221FBFCCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::MsgBuffer::Init(Phase::MsgBuffer *this)
{
}

uint64_t Phase::TraverseNode(uint64_t a1, void *a2, void *a3, void *a4, Phase *a5, uint64_t a6, void *a7, uint64_t a8)
{
  id v15 = a2;
  id v16 = a3;
  id v17 = a7;
  uint64_t v18 = [v16 objectForKeyedSubscript:v15];
  __int16 v19 = v18;
  if (!v18)
  {
    Phase::ParserSetParseError(a1, 1346924641, "NodeName", (const char *)[v15 UTF8String], "Node not found.");
    uint64_t v23 = 0;
    goto LABEL_10;
  }
  int v20 = [v18 objectForKeyedSubscript:@"Type"];
  if (v20 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    switch(Phase::GetNodeType((Phase *)v20, v21))
    {
      case 1u:
        char v22 = Phase::ParseSampler(a1, v19, a4, (uint64_t)a5, a6);
        break;
      case 2u:
        char v22 = Phase::ParseBlend(a1, v19, v16, a4, a5, a6, v17);
        break;
      case 3u:
        char v22 = Phase::ParseRandom(a1, v19, v16, a4, (uint64_t)a5, a6, v17);
        break;
      case 4u:
        char v22 = Phase::ParseSwitch(a1, v19, v16, a4, a5, a6, v17);
        break;
      case 5u:
        char v22 = Phase::ParseContainer(a1, v19, v16, (uint64_t)a4, (uint64_t)a5, a6, v17, a8);
        break;
      case 6u:
        char v22 = Phase::ParsePushStream(a1, v19, a4, (uint64_t)a5, a6, v17, a8);
        break;
      case 7u:
        char v22 = Phase::ParseProcedure(a1, v19, a4, (uint64_t)a5, a6);
        break;
      case 8u:
        char v22 = Phase::ParseExternalOutputPullStream(a1, v19, a4, (uint64_t)a5, a6, a8);
        break;
      case 9u:
        char v22 = Phase::ParsePullStream(a1, v19, a4, (uint64_t)a5, a6, v17, a8);
        break;
      default:
        [v20 UTF8String];
        Phase::ParserSetParseError(a1, 1346924646, "", "", "Unknown node type %s");
        goto LABEL_7;
    }
    if (v22)
    {
      uint64_t v23 = 1;
      goto LABEL_8;
    }
  }
  else
  {
    Phase::ParserSetParseError(a1, 1346924643, (char *)[v15 UTF8String], "NodeType", "Child node type not a string");
  }
LABEL_7:
  uint64_t v23 = 0;
LABEL_8:

LABEL_10:
  return v23;
}

void sub_221FC003C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ParseSampler(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v9 = a2;
  if ((Phase::ReadString(a1, v9, @"Name", (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
  {
    uint64_t v10 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_2220E6ED5;
    *(_OWORD *)(a1 + 88) = unk_2220E6EE5;
    *(_OWORD *)(a1 + 104) = xmmword_2220E6EF5;
    *(_OWORD *)(a1 + 120) = unk_2220E6F05;
    strcpy((char *)(a1 + 8), "<SamplerStruct>");
    *(_OWORD *)(a1 + 24) = unk_2220E6EA5;
    *(_OWORD *)(a1 + 40) = xmmword_2220E6EB5;
    *(_OWORD *)(a1 + 56) = unk_2220E6EC5;
    goto LABEL_13;
  }
  if ((Phase::ReadPhaseId(a1, v9, @"Name", &v12, a5) & 1) == 0
    || (Phase::ReadPhaseId(a1, v9, @"Asset", &v13, a5) & 1) == 0
    || (Phase::ReadEnumWithDefault<PHASEPlaybackMode>(a1, v9, &v16) & 1) == 0)
  {
    goto LABEL_11;
  }
  *(unsigned char *)(a4 + 400) = v16 == 0;
  if (!Phase::ParseLeafNode(a1, v9, __src, &v14, (Phase *)a4, a5))
  {
LABEL_12:
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  if ((Phase::ReadEnumWithDefault<PHASECullOption>(a1, v9, &v15) & 1) == 0) {
    goto LABEL_11;
  }
  if ((Phase::AddLeafNodeName((Phase *)a4, v12, *(unsigned __int16 *)(a4 + 272)) & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924646, __src, "name", "Name %s is not a valid name", __src);
    goto LABEL_12;
  }
  if (!Phase::MsgBuffer::WriteMsg(a3, a1, 0, &v12, 0x50uLL))
  {
LABEL_11:
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    goto LABEL_12;
  }
  uint64_t v10 = 1;
LABEL_13:

  return v10;
}

void sub_221FC02A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ParseBlend(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  id v13 = a2;
  id v14 = a3;
  id v15 = a7;
  if ((Phase::ReadString(a1, v13, @"Name", (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
  {
    uint64_t ChildArray = 0;
    *(_OWORD *)(a1 + 72) = xmmword_2220E6F56;
    *(_OWORD *)(a1 + 88) = unk_2220E6F66;
    *(_OWORD *)(a1 + 104) = xmmword_2220E6F76;
    *(_OWORD *)(a1 + 120) = unk_2220E6F86;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)"<BlendStruct>";
    *(_OWORD *)(a1 + 24) = *(_OWORD *)&algn_2220E6F24[2];
    *(_OWORD *)(a1 + 40) = xmmword_2220E6F36;
    *(_OWORD *)(a1 + 56) = unk_2220E6F46;
    goto LABEL_68;
  }
  uint64_t v65 = 0;
  if ((Phase::ReadPhaseId(a1, v13, @"Name", &v65, a6) & 1) == 0
    || (char v64 = 0, (Phase::ReadParamIdx(a1, v13, @"BlendParameter", (Phase *)a5, &v64, a6) & 1) == 0))
  {
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    uint64_t ChildArray = 0;
    goto LABEL_68;
  }
  id v63 = 0;
  uint64_t ChildArray = Phase::GetChildArray(a1, v13, &v63);
  id v17 = v63;
  long long v49 = v17;
  if (!ChildArray)
  {
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    goto LABEL_67;
  }
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  obuint64_t j = v17;
  uint64_t v46 = [obj countByEnumeratingWithState:&v59 objects:v67 count:16];
  if (!v46)
  {
    uint64_t ChildArray = 1;
    goto LABEL_66;
  }
  uint64_t v47 = *(void *)v60;
  uint64_t v45 = a5 + 22;
  while (2)
  {
    for (uint64_t i = 0; i != v46; ++i)
    {
      if (*(void *)v60 != v47) {
        objc_enumerationMutation(obj);
      }
      uint64_t v18 = *(void **)(*((void *)&v59 + 1) + 8 * i);
      if (!v18 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        Phase::ParserSetParseError(a1, 1346924643, __src, (const char *)[@"Children" UTF8String], "");
        goto LABEL_65;
      }
      id v54 = 0;
      uint64_t v55 = v65;
      char v56 = v64;
      char ChildDictionary = Phase::GetChildDictionary(a1, v18, &v54);
      id v51 = v54;
      if ((ChildDictionary & 1) == 0 || !Phase::ParseEnvelope(a1, v51, __src, (uint64_t)&v57))
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);

        goto LABEL_65;
      }
      id v53 = 0;
      char v20 = Phase::ReadString(a1, v18, &v53, a6);
      id v52 = v53;
      if ((v20 & 1) == 0) {
        goto LABEL_60;
      }
      __int16 v21 = [v13 objectForKeyedSubscript:@"BlendParameter"];
      int v22 = [v21 isEqualToString:@"auto_distance"];

      if (v22)
      {
        if ((Phase::ReadPhaseId(a1, v13, @"DistanceSubmixName", &v58, a6) & 1) == 0) {
          goto LABEL_60;
        }
        uint64_t v23 = (void *)a5[47];
        uint64_t v24 = a5[48] - (void)v23;
        if (!v24) {
          goto LABEL_59;
        }
        uint64_t v25 = v58;
        unint64_t v26 = v24 / 5944;
        if (v26 <= 1) {
          uint64_t v27 = 1;
        }
        else {
          uint64_t v27 = v26;
        }
        if (*v23 != v58)
        {
          unint64_t v28 = 0;
          uint64_t v29 = v23 + 743;
          uint64_t v30 = v27 - 1;
          while (v30 != v28)
          {
            uint64_t v31 = *v29;
            v29 += 743;
            ++v28;
            if (v31 == v58)
            {
              if (v26 <= v28) {
                break;
              }
              goto LABEL_26;
            }
          }
LABEL_59:
          id v43 = [v18 objectForKeyedSubscript:@"DistanceSubmixName"];
          Phase::ParserSetParseError(a1, 1346924646, __src, "submix", "Submix %s was not found in the sound event asset", (const char *)[v43 UTF8String]);

LABEL_61:
LABEL_65:
          uint64_t ChildArray = 0;
          goto LABEL_66;
        }
LABEL_26:
        double v32 = (char *)a5[20];
        id v33 = (char *)a5[21];
        uint64_t v34 = v32;
        if (v32 != v33)
        {
          while (*(void *)v34 != v58)
          {
            v34 += 8;
            if (v34 == v33)
            {
              uint64_t v34 = (char *)a5[21];
              break;
            }
          }
        }
        if (v34 == v33)
        {
          if ((unint64_t)v33 >= *v45)
          {
            uint64_t v36 = (v33 - v32) >> 3;
            unint64_t v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 61) {
              std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v38 = *v45 - (void)v32;
            if (v38 >> 2 > v37) {
              unint64_t v37 = v38 >> 2;
            }
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v39 = v37;
            }
            if (v39)
            {
              unint64_t v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v45, v39);
              double v32 = (char *)a5[20];
              id v33 = (char *)a5[21];
            }
            else
            {
              unint64_t v40 = 0;
            }
            uint64_t v41 = &v40[8 * v36];
            *(void *)uint64_t v41 = v25;
            uint64_t v35 = v41 + 8;
            while (v33 != v32)
            {
              uint64_t v42 = *((void *)v33 - 1);
              v33 -= 8;
              *((void *)v41 - 1) = v42;
              v41 -= 8;
            }
            a5[20] = v41;
            a5[21] = v35;
            a5[22] = &v40[8 * v39];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *(void *)id v33 = v58;
            uint64_t v35 = v33 + 8;
          }
          a5[21] = v35;
        }
      }
      else
      {
        uint64_t v58 = 0;
      }
      if (!Phase::MsgBuffer::WriteMsg(a4, a1, 1, &v55, 0x1B0uLL))
      {
LABEL_60:
        strncpy((char *)(a1 + 8), __src, 0x80uLL);
        goto LABEL_61;
      }
      if (!Phase::TraverseNode(a1, v52, v14, a4, a5, a6, v15, 0)) {
        goto LABEL_61;
      }
      if (!Phase::MsgBuffer::WriteMsg(a4, a1, 2, v66, 8uLL))
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);

        goto LABEL_65;
      }
    }
    uint64_t ChildArray = 1;
    uint64_t v46 = [obj countByEnumeratingWithState:&v59 objects:v67 count:16];
    if (v46) {
      continue;
    }
    break;
  }
LABEL_66:

LABEL_67:
LABEL_68:

  return ChildArray;
}

void sub_221FC08EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ParseRandom(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  id v13 = a2;
  id v14 = a3;
  id v15 = a7;
  if (Phase::ReadString(a1, v13, @"Name", (uint64_t)__src, 0x80uLL, 0))
  {
    if ((Phase::ReadPhaseId(a1, v13, @"Name", &v45, a6) & 1) != 0
      && (Phase::ReadIntTypeWithDefault<int>(a1, v13, @"UniqueSelectionQueueLength", &v46, 0, 0, 128) & 1) != 0)
    {
      id v44 = 0;
      uint64_t ChildArray = Phase::GetChildArray(a1, v13, &v44);
      id v17 = v44;
      uint64_t v18 = v17;
      if (ChildArray)
      {
        unint64_t v19 = [v17 count];
        if (v19 >= 0xFF) {
          __assert_rtn("ParseRandom", "ParserCore.mm", 1759, "childCount < UCHAR_MAX");
        }
        char v47 = v19;
        if (v19 <= v46)
        {
          Phase::ParserSetParseError(a1, 1346924646, __src, (const char *)[@"UniqueSelectionQueueLength" UTF8String], "UniqueSelectionQueueLength must be less than the number of child nodes");
        }
        else
        {
          if (Phase::MsgBuffer::WriteMsg(a4, a1, 5, &v45, 0x10uLL))
          {
            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            uint64_t v30 = v18;
            obuint64_t j = v18;
            uint64_t v20 = [obj countByEnumeratingWithState:&v40 objects:v51 count:16];
            if (v20)
            {
              uint64_t v33 = *(void *)v41;
              while (2)
              {
                for (uint64_t i = 0; i != v20; ++i)
                {
                  if (*(void *)v41 != v33) {
                    objc_enumerationMutation(obj);
                  }
                  int v22 = *(void **)(*((void *)&v40 + 1) + 8 * i);
                  if (!v22 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
                  {
                    Phase::ParserSetParseError(a1, 1346924643, __src, (const char *)[@"Children" UTF8String], "");
LABEL_38:

                    uint64_t v18 = v30;
                    goto LABEL_39;
                  }
                  if ((Phase::ReadFloatTypeWithDefault<double>(a1, v22, @"Weight", &v50, 1.0, 1.0, 8.98846567e307) & 1) == 0|| !Phase::MsgBuffer::WriteMsg(a4, a1, 6, &v50, 8uLL))
                  {
                    strncpy((char *)(a1 + 8), __src, 0x80uLL);
                    goto LABEL_38;
                  }
                }
                uint64_t v20 = [obj countByEnumeratingWithState:&v40 objects:v51 count:16];
                if (v20) {
                  continue;
                }
                break;
              }
            }

            uint64_t v18 = v30;
            long long v38 = 0u;
            long long v39 = 0u;
            long long v36 = 0u;
            long long v37 = 0u;
            id v29 = obj;
            uint64_t v23 = [v29 countByEnumeratingWithState:&v36 objects:v49 count:16];
            if (v23)
            {
              id obja = (id)v23;
              uint64_t v34 = *(void *)v37;
              while (2)
              {
                for (uint64_t j = 0; j != obja; uint64_t j = (char *)j + 1)
                {
                  if (*(void *)v37 != v34) {
                    objc_enumerationMutation(v29);
                  }
                  uint64_t v25 = *(void **)(*((void *)&v36 + 1) + 8 * (void)j);
                  id v35 = 0;
                  char v26 = Phase::ReadString(a1, v25, &v35, a6);
                  id v27 = v35;
                  if ((v26 & 1) == 0 || !Phase::MsgBuffer::WriteMsg(a4, a1, 7, &v50, 8uLL))
                  {
                    strncpy((char *)(a1 + 8), __src, 0x80uLL);
LABEL_44:

                    uint64_t v18 = v30;
LABEL_46:
                    uint64_t ChildArray = 0;
                    goto LABEL_47;
                  }
                  if (!Phase::TraverseNode(a1, v27, v14, a4, a5, a6, v15, 0)) {
                    goto LABEL_44;
                  }
                  uint64_t v18 = v30;
                  if (!Phase::MsgBuffer::WriteMsg(a4, a1, 8, v48, 8uLL))
                  {
                    strncpy((char *)(a1 + 8), __src, 0x80uLL);

                    goto LABEL_46;
                  }
                }
                uint64_t ChildArray = 1;
                id obja = (id)[v29 countByEnumeratingWithState:&v36 objects:v49 count:16];
                if (obja) {
                  continue;
                }
                break;
              }
            }
            else
            {
              uint64_t ChildArray = 1;
            }
LABEL_47:

            goto LABEL_40;
          }
          strncpy((char *)(a1 + 8), __src, 0x80uLL);
        }
LABEL_39:
        uint64_t ChildArray = 0;
      }
      else
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);
      }
LABEL_40:

      goto LABEL_41;
    }
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    uint64_t ChildArray = 0;
  }
  else
  {
    uint64_t ChildArray = 0;
    *(_OWORD *)(a1 + 72) = xmmword_2220E6FD7;
    *(_OWORD *)(a1 + 88) = unk_2220E6FE7;
    *(_OWORD *)(a1 + 104) = xmmword_2220E6FF7;
    *(_OWORD *)(a1 + 120) = unk_2220E7007;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)"<RandomStruct>";
    *(_OWORD *)(a1 + 24) = unk_2220E6FA7;
    *(_OWORD *)(a1 + 40) = xmmword_2220E6FB7;
    *(_OWORD *)(a1 + 56) = unk_2220E6FC7;
  }
LABEL_41:

  return ChildArray;
}

void sub_221FC0ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ParseSwitch(uint64_t a1, void *a2, void *a3, void *a4, Phase *a5, uint64_t a6, void *a7)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  id v13 = a2;
  id v32 = a3;
  id v14 = a7;
  if ((Phase::ReadString(a1, v13, @"Name", (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
  {
    uint64_t v25 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_2220E7058;
    *(_OWORD *)(a1 + 88) = unk_2220E7068;
    *(_OWORD *)(a1 + 104) = xmmword_2220E7078;
    *(_OWORD *)(a1 + 120) = unk_2220E7088;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)"<SwitchStruct>";
    *(_OWORD *)(a1 + 24) = unk_2220E7028;
    *(_OWORD *)(a1 + 40) = xmmword_2220E7038;
    *(_OWORD *)(a1 + 56) = unk_2220E7048;
    goto LABEL_23;
  }
  uint64_t v43 = 0;
  if ((Phase::ReadPhaseId(a1, v13, @"Name", &v43, a6) & 1) == 0
    || (char v42 = 0, (Phase::ReadParamIdx(a1, v13, @"SwitchParameter", a5, &v42, a6) & 1) == 0))
  {
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
LABEL_22:
    uint64_t v25 = 0;
    goto LABEL_23;
  }
  id v41 = 0;
  int ChildArray = Phase::GetChildArray(a1, v13, &v41);
  uint64_t v31 = a5;
  id v16 = v41;
  id v17 = v16;
  if (!ChildArray)
  {
    strncpy((char *)(a1 + 8), __src, 0x80uLL);

    goto LABEL_22;
  }
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  obuint64_t j = v16;
  uint64_t v18 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (!v18)
  {
    uint64_t v25 = 1;
    goto LABEL_31;
  }
  uint64_t v29 = *(void *)v38;
  uint64_t v28 = v43;
  char v27 = v42;
  while (2)
  {
    for (uint64_t i = 0; i != v18; ++i)
    {
      if (*(void *)v38 != v29) {
        objc_enumerationMutation(obj);
      }
      uint64_t v20 = *(void **)(*((void *)&v37 + 1) + 8 * i);
      if (!v20 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
      {
        Phase::ParserSetParseError(a1, 1346924643, __src, (const char *)[@"Children" UTF8String], "");
        goto LABEL_30;
      }
      id v21 = v14;
      uint64_t v22 = v18;
      id v33 = 0;
      char v23 = Phase::ReadString(a1, v20, &v33, a6);
      id v24 = v33;
      if ((v23 & 1) == 0
        || (v34 = v28, char v35 = v27, !Phase::ReadPhaseId(a1, v20, @"SwitchValue", &v36, a6))
        || !Phase::MsgBuffer::WriteMsg(a4, a1, 3, &v34, 0x18uLL))
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);
LABEL_27:

        id v14 = v21;
LABEL_30:
        uint64_t v25 = 0;
        goto LABEL_31;
      }
      if (!Phase::TraverseNode(a1, v24, v32, a4, v31, a6, v21, 0)) {
        goto LABEL_27;
      }
      uint64_t v18 = v22;
      id v14 = v21;
      if (!Phase::MsgBuffer::WriteMsg(a4, a1, 4, v44, 8uLL))
      {
        strncpy((char *)(a1 + 8), __src, 0x80uLL);

        goto LABEL_30;
      }
    }
    uint64_t v18 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
    uint64_t v25 = 1;
    if (v18) {
      continue;
    }
    break;
  }
LABEL_31:

LABEL_23:
  return v25;
}

void sub_221FC1320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ParseContainer(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  id v15 = a2;
  id v30 = a3;
  id v16 = a7;
  uint64_t v29 = v15;
  if (Phase::ReadString(a1, v15, @"Name", (uint64_t)v37, 0x80uLL, 0))
  {
    id v35 = 0;
    int ChildArray = Phase::GetChildArray(a1, v15, &v35);
    id v18 = v35;
    unint64_t v19 = v18;
    if (v18) {
      int v20 = ChildArray;
    }
    else {
      int v20 = 0;
    }
    if (v20 == 1)
    {
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      obuint64_t j = v18;
      uint64_t v21 = [obj countByEnumeratingWithState:&v31 objects:v36 count:16];
      char v27 = v19;
      if (v21)
      {
        uint64_t v22 = *(void *)v32;
        while (2)
        {
          for (uint64_t i = 0; i != v21; ++i)
          {
            if (*(void *)v32 != v22) {
              objc_enumerationMutation(obj);
            }
            uint64_t v24 = *(void *)(*((void *)&v31 + 1) + 8 * i);
            if (!v24 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
            {
              Phase::ParserSetParseError(a1, 1346924643, "", v37, "Container node child name was not a string", v27);
LABEL_20:
              uint64_t v25 = 0;
              goto LABEL_22;
            }
            if (!Phase::TraverseNode(a1, v24, v30, a4, a5, a6, v16, a8)) {
              goto LABEL_20;
            }
          }
          uint64_t v21 = [obj countByEnumeratingWithState:&v31 objects:v36 count:16];
          uint64_t v25 = 1;
          if (v21) {
            continue;
          }
          break;
        }
      }
      else
      {
        uint64_t v25 = 1;
      }
LABEL_22:

      unint64_t v19 = v27;
    }
    else
    {
      uint64_t v25 = 0;
      *(_OWORD *)(a1 + 72) = xmmword_2220E715A;
      *(_OWORD *)(a1 + 88) = unk_2220E716A;
      *(_OWORD *)(a1 + 104) = xmmword_2220E717A;
      *(_OWORD *)(a1 + 120) = unk_2220E718A;
      strcpy((char *)(a1 + 8), "<ContainerNode>");
      *(_OWORD *)(a1 + 24) = unk_2220E712A;
      *(_OWORD *)(a1 + 40) = xmmword_2220E713A;
      *(_OWORD *)(a1 + 56) = unk_2220E714A;
    }
  }
  else
  {
    uint64_t v25 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_2220E70D9;
    *(_OWORD *)(a1 + 88) = unk_2220E70E9;
    *(_OWORD *)(a1 + 104) = xmmword_2220E70F9;
    *(_OWORD *)(a1 + 120) = unk_2220E7109;
    strcpy((char *)(a1 + 8), "<ContainerStruct>");
    *(_WORD *)(a1 + 26) = unk_2220E70AB;
    *(_DWORD *)(a1 + 28) = unk_2220E70AD;
    *(void *)(a1 + 32) = unk_2220E70B1;
    *(_OWORD *)(a1 + 40) = xmmword_2220E70B9;
    *(_OWORD *)(a1 + 56) = unk_2220E70C9;
  }

  return v25;
}

void sub_221FC1624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ParsePushStream(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, char a7)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  id v13 = a2;
  id v14 = a6;
  if ((Phase::ReadString(a1, v13, @"Name", (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
  {
    uint64_t v15 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_2220E71DB;
    *(_OWORD *)(a1 + 88) = unk_2220E71EB;
    *(_OWORD *)(a1 + 104) = xmmword_2220E71FB;
    *(_OWORD *)(a1 + 120) = unk_2220E720B;
    strcpy((char *)(a1 + 8), "<PushStreamStruct>");
    *(unsigned char *)(a1 + 27) = unk_2220E71AE;
    *(_DWORD *)(a1 + 28) = unk_2220E71AF;
    *(void *)(a1 + 32) = unk_2220E71B3;
    *(_OWORD *)(a1 + 40) = xmmword_2220E71BB;
    *(_OWORD *)(a1 + 56) = unk_2220E71CB;
    goto LABEL_16;
  }
  if ((a7 & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924646, __src, "", "PushStreamNode cannot be a child of switch, random, or blend nodes");
    goto LABEL_15;
  }
  if ((Phase::ReadPhaseId(a1, v13, @"Name", &v21, a5) & 1) == 0) {
    goto LABEL_14;
  }
  *(unsigned char *)(a4 + 400) = 0;
  if (!Phase::ParseLeafNode(a1, v13, __src, &v22, (Phase *)a4, a5))
  {
LABEL_15:
    uint64_t v15 = 0;
    goto LABEL_16;
  }
  if ((Phase::AddLeafNodeName((Phase *)a4, v21, *(unsigned __int16 *)(a4 + 272)) & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924646, __src, "name", "Name %s is not a valid name");
    goto LABEL_15;
  }
  if ((Phase::ReadBoolWithDefault(a1, v13, v23) & 1) == 0
    || (Phase::ReadFloatTypeWithDefault<double>(a1, v13, @"TargetLKFS", &v24, -12.0, -100.0, 0.0) & 1) == 0
    || !Phase::MsgBuffer::WriteMsg(a3, a1, 9, &v21, 0x48uLL))
  {
LABEL_14:
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    goto LABEL_15;
  }
  id v20 = 0;
  uint64_t v15 = Phase::ReadAVAudioFormat(a1, v13, &v20);
  id v16 = v20;
  if (v15)
  {
    id v17 = [v14 streamNodeFormats];
    id v18 = [v13 objectForKeyedSubscript:@"Name"];
    [v17 setObject:v16 forKey:v18];
  }
  else
  {
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
  }

LABEL_16:
  return v15;
}

void sub_221FC1914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ParseProcedure(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  id v9 = a2;
  if ((Phase::ReadString(a1, v9, @"Name", (uint64_t)__src, 0x80uLL, 0) & 1) == 0)
  {
    uint64_t v10 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_2220E725C;
    *(_OWORD *)(a1 + 88) = unk_2220E726C;
    *(_OWORD *)(a1 + 104) = xmmword_2220E727C;
    *(_OWORD *)(a1 + 120) = unk_2220E728C;
    strcpy((char *)(a1 + 8), "<ProcedureStruct>");
    *(_WORD *)(a1 + 26) = unk_2220E722E;
    *(_DWORD *)(a1 + 28) = unk_2220E7230;
    *(void *)(a1 + 32) = unk_2220E7234;
    *(_OWORD *)(a1 + 40) = xmmword_2220E723C;
    *(_OWORD *)(a1 + 56) = unk_2220E724C;
    goto LABEL_17;
  }
  if ((Phase::ReadPhaseId(a1, v9, @"Name", &v12, a5) & 1) == 0
    || (Phase::ReadEnumWithDefault<PHASEPlaybackMode>(a1, v9, &v15) & 1) == 0)
  {
    goto LABEL_15;
  }
  *(unsigned char *)(a4 + 400) = v15 == 0;
  if (!Phase::ParseLeafNode(a1, v9, __src, &v13, (Phase *)a4, a5))
  {
LABEL_16:
    uint64_t v10 = 0;
    goto LABEL_17;
  }
  if ((Phase::ReadEnumWithDefault<PHASECullOption>(a1, v9, &v14) & 1) == 0
    || (Phase::ReadIntTypeWithDefault<int>(a1, v9, @"ProcedureMaxPolyphony", &v16, 16, 1, 0x7FFFFFFF) & 1) == 0
    || (Phase::ReadEnumWithDefault<PHASEVoiceStealingType>(a1, v9, &v17) & 1) == 0
    || (Phase::ReadEnumWithDefault<Phase::ProcedureMsg::Type>(a1, v9, v18) & 1) == 0)
  {
    goto LABEL_15;
  }
  if (v18[0] == 1 && !Phase::ParseWaterProcedureParams(a1, v9, __src, (uint64_t)&v19, (Phase *)a4, a5)) {
    goto LABEL_16;
  }
  if ((Phase::AddLeafNodeName((Phase *)a4, v12, *(unsigned __int16 *)(a4 + 272)) & 1) == 0)
  {
    Phase::ParserSetParseError(a1, 1346924646, __src, "name", "Name %s is not a valid name", __src);
    goto LABEL_16;
  }
  if (!Phase::MsgBuffer::WriteMsg(a3, a1, 10, &v12, 0xB8uLL))
  {
LABEL_15:
    strncpy((char *)(a1 + 8), __src, 0x80uLL);
    goto LABEL_16;
  }
  uint64_t v10 = 1;
LABEL_17:

  return v10;
}

void sub_221FC1BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ParseExternalOutputPullStream(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  id v11 = a2;
  if (Phase::ReadString(a1, v11, @"Name", (uint64_t)__src, 0x80uLL, 0))
  {
    if ((a6 & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924646, __src, "", "ExternalOutputPullStreamNode cannot be a child of switch, random, or blend nodes");
      uint64_t v14 = 0;
      goto LABEL_20;
    }
    if (Phase::ReadString(a1, v11, @"UUID", (uint64_t)v24, 0x80uLL, 0))
    {
      unint64_t v12 = objc_msgSend(NSString, "stringWithFormat:", @"%s", v24);
      double v13 = (void *)[objc_alloc(MEMORY[0x263F08C38]) initWithUUIDString:v12];
      long long v26 = 0uLL;
      [v13 getUUIDBytes:&v26];
      long long v18 = v26;
      if (Phase::ReadPhaseId(a1, v11, @"Name", &v17, a5))
      {
        *(unsigned char *)(a4 + 400) = 0;
        if (!Phase::ParseLeafNode(a1, v11, __src, &v19, (Phase *)a4, a5))
        {
LABEL_18:
          uint64_t v14 = 0;
          goto LABEL_19;
        }
        if (v20 != 1.0)
        {
          Phase::ParserSetParseError(a1, 1346924646, __src, "rate", "Rate %f is not a valid rate for a pullstream.  Must be 1.0", v20);
          goto LABEL_18;
        }
        if ((Phase::AddLeafNodeName((Phase *)a4, v17, *(unsigned __int16 *)(a4 + 272)) & 1) == 0)
        {
          Phase::ParserSetParseError(a1, 1346924646, __src, "name", "Name %s is not a valid name", v15);
          goto LABEL_18;
        }
        if ((Phase::ReadBoolWithDefault(a1, v11, v21) & 1) != 0
          && (Phase::ReadFloatTypeWithDefault<double>(a1, v11, @"TargetLKFS", &v22, -12.0, -100.0, 0.0) & 1) != 0
          && (Phase::ReadAudioChannelLayoutTag(a1, v11, @"ChannelLayoutTag", &v23) & 1) != 0
          && Phase::MsgBuffer::WriteMsg(a3, a1, 11, &v17, 0x60uLL))
        {
          uint64_t v14 = 1;
LABEL_19:

          goto LABEL_20;
        }
      }
      strncpy((char *)(a1 + 8), __src, 0x80uLL);
      goto LABEL_18;
    }
  }
  uint64_t v14 = 0;
  *(_OWORD *)(a1 + 72) = xmmword_2220E72DD;
  *(_OWORD *)(a1 + 88) = unk_2220E72ED;
  *(_OWORD *)(a1 + 104) = xmmword_2220E72FD;
  *(_OWORD *)(a1 + 120) = unk_2220E730D;
  strcpy((char *)(a1 + 8), "<ExternalOutputPullStreamStruct>");
  *(unsigned char *)(a1 + 41) = unk_2220E72BE;
  *(_WORD *)(a1 + 42) = unk_2220E72BF;
  *(_DWORD *)(a1 + 44) = unk_2220E72C1;
  *(void *)(a1 + 48) = unk_2220E72C5;
  *(_OWORD *)(a1 + 56) = unk_2220E72CD;
LABEL_20:

  return v14;
}

void sub_221FC1ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ParsePullStream(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, char a7)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  id v13 = a2;
  id v14 = a6;
  if (Phase::ReadString(a1, v13, @"Name", (uint64_t)__src, 0x80uLL, 0))
  {
    if ((a7 & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924646, __src, "", "PullStreamNode cannot be a child of switch, random, or blend nodes");
      goto LABEL_17;
    }
    if ((Phase::ReadPhaseId(a1, v13, @"Name", &v22, a5) & 1) == 0) {
      goto LABEL_16;
    }
    *(unsigned char *)(a4 + 400) = 0;
    if (!Phase::ParseLeafNode(a1, v13, __src, &v23, (Phase *)a4, a5))
    {
LABEL_17:
      uint64_t v15 = 0;
      goto LABEL_18;
    }
    if (v24 != 1.0)
    {
      Phase::ParserSetParseError(a1, 1346924646, __src, "rate", "Rate %f is not a valid rate for a pullstream.  Must be 1.0", v24);
      goto LABEL_17;
    }
    if ((Phase::AddLeafNodeName((Phase *)a4, v22, *(unsigned __int16 *)(a4 + 272)) & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924646, __src, "name", "Name %s is not a valid name", v16);
      goto LABEL_17;
    }
    if ((Phase::ReadBoolWithDefault(a1, v13, v25) & 1) == 0
      || (Phase::ReadFloatTypeWithDefault<double>(a1, v13, @"TargetLKFS", &v26, -12.0, -100.0, 0.0) & 1) == 0
      || !Phase::MsgBuffer::WriteMsg(a3, a1, 12, &v22, 0x50uLL))
    {
LABEL_16:
      strncpy((char *)(a1 + 8), __src, 0x80uLL);
      goto LABEL_17;
    }
    id v21 = 0;
    uint64_t v15 = Phase::ReadAVAudioFormat(a1, v13, &v21);
    id v17 = v21;
    if (v15)
    {
      long long v18 = [v14 streamNodeFormats];
      double v19 = [v13 objectForKeyedSubscript:@"Name"];
      [v18 setObject:v17 forKey:v19];
    }
    else
    {
      strncpy((char *)(a1 + 8), __src, 0x80uLL);
    }
  }
  else
  {
    uint64_t v15 = 0;
    *(_OWORD *)(a1 + 72) = xmmword_2220E735E;
    *(_OWORD *)(a1 + 88) = unk_2220E736E;
    *(_OWORD *)(a1 + 104) = xmmword_2220E737E;
    *(_OWORD *)(a1 + 120) = unk_2220E738E;
    strcpy((char *)(a1 + 8), "<PullStreamStruct>");
    *(unsigned char *)(a1 + 27) = unk_2220E7331;
    *(_DWORD *)(a1 + 28) = unk_2220E7332;
    *(void *)(a1 + 32) = unk_2220E7336;
    *(_OWORD *)(a1 + 40) = xmmword_2220E733E;
    *(_OWORD *)(a1 + 56) = unk_2220E734E;
  }
LABEL_18:

  return v15;
}

void sub_221FC21D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadEnumWithDefault<PHASEPlaybackMode>(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = @"PlaybackMode";
  id v7 = [v5 objectForKeyedSubscript:@"PlaybackMode"];
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v9 = @"PlaybackMode";
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"PlaybackMode" UTF8String], "Field should be a string");
      uint64_t v8 = 0;
      goto LABEL_7;
    }
    *a3 = GetPlaybackMode(v7);
  }
  else
  {
    *a3 = 0;
  }
  uint64_t v8 = 1;
LABEL_7:

  return v8;
}

void sub_221FC22FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ParseLeafNode(uint64_t a1, void *a2, char *a3, double *a4, Phase *a5, uint64_t a6)
{
  id v11 = a2;
  if ((Phase::ReadPhaseId(a1, v11, @"Submix", a4, a6) & 1) == 0) {
    goto LABEL_29;
  }
  id v13 = (char *)*((void *)a5 + 47);
  unint64_t v12 = (char *)*((void *)a5 + 48);
  int64_t v14 = v12 - v13;
  if (v12 == v13)
  {
LABEL_14:
    id v27 = [v11 objectForKeyedSubscript:@"Submix"];
    Phase::ParserSetParseError(a1, 1346924646, a3, "submix", "Submix %s was not found in the sound event asset", (const char *)[v27 UTF8String]);

LABEL_30:
    uint64_t v31 = 0;
    goto LABEL_31;
  }
  double v15 = *a4;
  unint64_t v16 = v14 / 5944;
  if (v16 <= 1) {
    uint64_t v17 = 1;
  }
  else {
    uint64_t v17 = v16;
  }
  if (*(void *)v13 != *(void *)&v15)
  {
    unint64_t v23 = 0;
    double v24 = (uint64_t *)(v13 + 5944);
    uint64_t v25 = v17 - 1;
    while (v25 != v23)
    {
      uint64_t v26 = *v24;
      v24 += 743;
      ++v23;
      if (v26 == *(void *)&v15)
      {
        if (v16 > v23) {
          goto LABEL_7;
        }
        goto LABEL_14;
      }
    }
    goto LABEL_14;
  }
LABEL_7:
  id v18 = v11;
  double v19 = @"CalibrationMode";
  double v20 = [v18 objectForKeyedSubscript:@"CalibrationMode"];
  if (v20)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v30 = @"CalibrationMode";
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"CalibrationMode" UTF8String], "Field should be a string");

      goto LABEL_29;
    }
    uint64_t CalibrationMode = Phase::GetCalibrationMode((Phase *)v20, v21);
  }
  else
  {
    uint64_t CalibrationMode = 0;
  }
  *((void *)a4 + 1) = CalibrationMode;

  uint64_t v28 = *((void *)a4 + 1);
  switch(v28)
  {
    case 2:
      char FloatTypeWith = Phase::ReadFloatTypeWithDefault<double>(a1, v18, @"Level", a4 + 2, 85.0, 0.0, 120.0);
      goto LABEL_23;
    case 1:
      char FloatTypeWith = Phase::ReadFloatTypeWithDefault<double>(a1, v18, @"Level", a4 + 2, 0.0, -200.0, 12.0);
LABEL_23:
      if (FloatTypeWith) {
        break;
      }
LABEL_29:
      strncpy((char *)(a1 + 8), a3, 0x80uLL);
      goto LABEL_30;
    case 0:
      char FloatTypeWith = Phase::ReadFloatTypeWithDefault<double>(a1, v18, @"Level", a4 + 2, 1.0, 0.0, 1.0);
      goto LABEL_23;
  }
  if ((Phase::ReadFloatTypeWithDefault<double>(a1, v18, @"Rate", a4 + 3, 1.0, 0.25, 4.0) & 1) == 0
    || (Phase::ReadPhaseIdWithDefault(a1, v18, @"Group", (void *)a4 + 4, a6) & 1) == 0
    || (Phase::ReadParamIdx(a1, v18, @"GainParameterName", a5, (unsigned char *)a4 + 40, a6) & 1) == 0
    || (Phase::ReadParamIdx(a1, v18, @"RateParameterName", a5, (unsigned char *)a4 + 41, a6) & 1) == 0)
  {
    goto LABEL_29;
  }
  uint64_t v31 = 1;
LABEL_31:

  return v31;
}

void sub_221FC2678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadEnumWithDefault<PHASECullOption>(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = @"CullOption";
  id v7 = [v5 objectForKeyedSubscript:@"CullOption"];
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v9 = @"CullOption";
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"CullOption" UTF8String], "Field should be a string");
      uint64_t v8 = 0;
      goto LABEL_7;
    }
    *a3 = GetCullOption(v7);
  }
  else
  {
    *a3 = 0;
  }
  uint64_t v8 = 1;
LABEL_7:

  return v8;
}

void sub_221FC27A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::AddLeafNodeName(Phase *this, Phase::ActionTreeBuilder *a2, int a3)
{
  if (!a2) {
    return 0;
  }
  unint64_t v6 = (char *)this + 200;
  unint64_t v7 = *((void *)this + 25);
  uint64_t v8 = (char *)*((void *)this + 24);
  if ((unint64_t)v8 >= v7)
  {
    uint64_t v10 = (char *)*((void *)this + 23);
    uint64_t v11 = (v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<Phase::SpatialModeler::OptionalPropertyDescription>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = v7 - (void)v10;
    unint64_t v13 = (uint64_t)(v7 - (void)v10) >> 2;
    if (v13 <= v11 + 1) {
      unint64_t v13 = v11 + 1;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14)
    {
      double v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)v6, v14);
      uint64_t v10 = (char *)*((void *)this + 23);
      uint64_t v8 = (char *)*((void *)this + 24);
    }
    else
    {
      double v15 = 0;
    }
    unint64_t v16 = &v15[8 * v11];
    uint64_t v17 = &v15[8 * v14];
    *(void *)unint64_t v16 = a2;
    id v9 = v16 + 8;
    while (v8 != v10)
    {
      uint64_t v18 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v16 - 1) = v18;
      v16 -= 8;
    }
    *((void *)this + 23) = v16;
    *((void *)this + 24) = v9;
    *((void *)this + 25) = v17;
    if (v10) {
      operator delete(v10);
    }
  }
  else
  {
    *(void *)uint64_t v8 = a2;
    id v9 = v8 + 8;
  }
  unint64_t v19 = *((void *)this + 28);
  *((void *)this + 24) = v9;
  double v20 = (char *)*((void *)this + 27);
  if ((unint64_t)v20 >= v19)
  {
    double v22 = (char *)*((void *)this + 26);
    uint64_t v23 = (v20 - v22) >> 2;
    if ((unint64_t)(v23 + 1) >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = v19 - (void)v22;
    unint64_t v25 = (uint64_t)(v19 - (void)v22) >> 1;
    if (v25 <= v23 + 1) {
      unint64_t v25 = v23 + 1;
    }
    if (v24 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v26 = v25;
    }
    if (v26)
    {
      id v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 224, v26);
      double v22 = (char *)*((void *)this + 26);
      double v20 = (char *)*((void *)this + 27);
    }
    else
    {
      id v27 = 0;
    }
    uint64_t v28 = &v27[4 * v23];
    uint64_t v29 = &v27[4 * v26];
    *(_DWORD *)uint64_t v28 = a3;
    id v21 = v28 + 4;
    while (v20 != v22)
    {
      int v30 = *((_DWORD *)v20 - 1);
      v20 -= 4;
      *((_DWORD *)v28 - 1) = v30;
      v28 -= 4;
    }
    *((void *)this + 26) = v28;
    *((void *)this + 27) = v21;
    *((void *)this + 28) = v29;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    *(_DWORD *)double v20 = a3;
    id v21 = v20 + 4;
  }
  *((void *)this + 27) = v21;
  return 1;
}

BOOL Phase::MsgBuffer::WriteMsg(void *a1, uint64_t a2, int a3, void *__src, size_t __n)
{
  unint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v7 = v5 + __n + 8;
  if (v7 >= v6)
  {
    Phase::ParserSetParseError(a2, 1346924644, "", "", "");
  }
  else
  {
    uint64_t v9 = __n;
    uint64_t v10 = (_DWORD *)(*a1 + v5);
    *uint64_t v10 = a3;
    v10[1] = __n;
    uint64_t v11 = a1[2] + 8;
    a1[2] = v11;
    memcpy((void *)(*a1 + v11), __src, __n);
    a1[2] += v9;
  }
  return v7 < v6;
}

uint64_t Phase::GetCalibrationMode(Phase *this, NSString *a2)
{
  unint64_t v2 = this;
  if ([(Phase *)v2 isEqualToString:@"none"])
  {
    uint64_t v3 = 0;
  }
  else if ([(Phase *)v2 isEqualToString:@"relative_spl"])
  {
    uint64_t v3 = 1;
  }
  else if ([(Phase *)v2 isEqualToString:@"absolute_spl"])
  {
    uint64_t v3 = 2;
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_221FC2AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::GetChildArray(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = @"Children";
  unint64_t v7 = [v5 objectForKeyedSubscript:@"Children"];
  if (!v7)
  {
    uint64_t v9 = @"Children";
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)[@"Children" UTF8String], "");
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v10 = @"Children";
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"Children" UTF8String], "Field should be an array");
    goto LABEL_6;
  }
  *a3 = v7;
  uint64_t v8 = 1;
LABEL_7:

  return v8;
}

void sub_221FC2BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadString(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = @"SubTreeNodeName";
  uint64_t v9 = [v7 objectForKeyedSubscript:@"SubTreeNodeName"];
  if (!v9)
  {
    unint64_t v13 = @"SubTreeNodeName";
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)[@"SubTreeNodeName" UTF8String], "");
LABEL_8:
    uint64_t v12 = 0;
    goto LABEL_9;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    unint64_t v14 = @"SubTreeNodeName";
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"SubTreeNodeName" UTF8String], "Field should be a string");
    goto LABEL_8;
  }
  id v10 = v9;
  *a3 = v10;
  if (a4)
  {
    uint64_t v11 = v10;
    if ((Phase::AddStringToPool(a1, a4, v10) & 1) == 0)
    {
      strncpy((char *)(a1 + 8), (const char *)[v11 UTF8String], 0x80uLL);
      goto LABEL_8;
    }
  }
  uint64_t v12 = 1;
LABEL_9:

  return v12;
}

void sub_221FC2D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadIntTypeWithDefault<int>(uint64_t a1, void *a2, void *a3, int *a4, int a5, int a6, int a7)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  id v13 = a2;
  id v14 = a3;
  double v15 = [v13 objectForKeyedSubscript:v14];
  unint64_t v16 = v15;
  if (v15)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[v14 UTF8String], "Field should be a number");
      uint64_t v21 = 0;
      goto LABEL_13;
    }
    double v15 = (Phase::Logger *)[(Phase::Logger *)v16 longLongValue];
    a5 = (int)v15;
  }
  *a4 = a5;
  if (a5 < a6 || a5 > a7)
  {
    uint64_t v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v15)
                                                                                        + 16)));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = [v14 UTF8String];
      uint64_t v19 = *a4;
      int v23 = 136316418;
      unint64_t v24 = "ParserCore.mm";
      __int16 v25 = 1024;
      int v26 = 549;
      __int16 v27 = 2080;
      uint64_t v28 = v18;
      __int16 v29 = 2048;
      uint64_t v30 = v19;
      __int16 v31 = 2048;
      uint64_t v32 = a6;
      __int16 v33 = 2048;
      uint64_t v34 = a7;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d WARNING: %s %lld is out of range [%lld, %lld]. Clamping...", (uint8_t *)&v23, 0x3Au);
    }

    int v20 = *a4;
    if (*a4 <= a6) {
      int v20 = a6;
    }
    *a4 = ((a7 - v20) & ((a7 - v20) >> 31)) + v20;
  }
  uint64_t v21 = 1;
LABEL_13:

  return v21;
}

void sub_221FC2F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadBoolWithDefault(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  unint64_t v6 = @"Normalize";
  id v7 = [v5 objectForKeyedSubscript:@"Normalize"];
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v10 = @"Normalize";
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"Normalize" UTF8String], "Field should be a number");
      uint64_t v9 = 0;
      goto LABEL_7;
    }
    char v8 = [v7 BOOLValue];
  }
  else
  {
    char v8 = 0;
  }
  *a3 = v8;
  uint64_t v9 = 1;
LABEL_7:

  return v9;
}

void sub_221FC30BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadAVAudioFormat(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = @"Format";
  id v7 = [v5 objectForKeyedSubscript:@"Format"];
  if (!v7)
  {
    uint64_t v9 = @"Format";
    Phase::ParserSetParseError(a1, 1346924642, "", (const char *)[@"Format" UTF8String], "");
LABEL_6:
    uint64_t v8 = 0;
    goto LABEL_7;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v10 = @"Format";
    Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"Format" UTF8String], "Field should be AVAudioFormat");
    goto LABEL_6;
  }
  *a3 = v7;
  uint64_t v8 = 1;
LABEL_7:

  return v8;
}

void sub_221FC3200(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadEnumWithDefault<PHASEVoiceStealingType>(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v6 = @"ProcedureVoiceStealingType";
  id v7 = [v5 objectForKeyedSubscript:@"ProcedureVoiceStealingType"];
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v9 = @"ProcedureVoiceStealingType";
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"ProcedureVoiceStealingType" UTF8String], "Field should be a string");
      uint64_t v8 = 0;
      goto LABEL_7;
    }
    *a3 = GetVoiceStealingType(v7);
  }
  else
  {
    *a3 = 0;
  }
  uint64_t v8 = 1;
LABEL_7:

  return v8;
}

void sub_221FC3310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ReadEnumWithDefault<Phase::ProcedureMsg::Type>(uint64_t a1, void *a2, unsigned char *a3)
{
  id v5 = a2;
  unint64_t v6 = @"ProcedureType";
  id v7 = [v5 objectForKeyedSubscript:@"ProcedureType"];
  if (v7)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v9 = @"ProcedureType";
      Phase::ParserSetParseError(a1, 1346924643, "", (const char *)[@"ProcedureType" UTF8String], "Field should be a string");
      uint64_t v8 = 0;
      goto LABEL_7;
    }
    *a3 = GetProcedureType(v7);
  }
  else
  {
    *a3 = 0;
  }
  uint64_t v8 = 1;
LABEL_7:

  return v8;
}

void sub_221FC3420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::ParseWaterProcedureParams(uint64_t a1, void *a2, const char *a3, uint64_t a4, Phase *a5, uint64_t a6)
{
  id v11 = a2;
  if ((Phase::ReadFloatTypeWithDefault<double>(a1, v11, @"FallRate", (double *)a4, 1000.0, 0.1, 48000.0) & 1) != 0
    && Phase::ReadFloatTypeWithDefault<double>(a1, v11, @"AverageDropDiameter", (double *)(a4 + 8), 1.0, 0.1, 5.0)&& Phase::ReadFloatTypeWithDefault<double>(a1, v11, @"MaxDropDiameter", (double *)(a4 + 16), 5.0, 5.0, 20.0)&& Phase::ReadFloatTypeWithDefault<double>(a1, v11, @"ImpulseShape",
                       (double *)(a4 + 24),
                       1.0,
                       0.1,
                       10.0)
    && Phase::ReadFloatTypeWithDefault<double>(a1, v11, @"ImpulseGainExponent", (double *)(a4 + 32), 4.0, 4.0, 7.0)&& Phase::ReadFloatTypeWithDefault<double>(a1, v11, @"ImpulseGain", (double *)(a4 + 40), 1.0, 0.0, 1.0)&& Phase::ReadFloatTypeWithDefault<double>(a1, v11, @"ChirpRiseRate",
                       (double *)(a4 + 48),
                       0.1,
                       0.01,
                       10.0)
    && Phase::ReadFloatTypeWithDefault<double>(a1, v11, @"BaseFrequencyMultiplier", (double *)(a4 + 56), 3.0, 0.1, 10.0)&& Phase::ReadFloatTypeWithDefault<double>(a1, v11, @"BubbleGain", (double *)(a4 + 64), 1.0, 0.0, 1.0)&& Phase::ReadParamIdx(a1, v11, @"FallRateParameterName", a5, (unsigned char *)(a4 + 72), a6)&& Phase::ReadParamIdx(a1, v11, @"AverageDropDiameterParameterName", a5, (unsigned char *)(a4 + 73), a6)&& Phase::ReadParamIdx(a1, v11, @"MaxDropDiameterParameterName", a5, (unsigned char *)(a4 + 74), a6)&& Phase::ReadParamIdx(a1, v11, @"ImpulseShapeParameterName", a5, (unsigned char *)(a4 + 75), a6)
    && Phase::ReadParamIdx(a1, v11, @"ImpulseGainExponentParameterName", a5, (unsigned char *)(a4 + 76), a6)
    && Phase::ReadParamIdx(a1, v11, @"ImpulseGainParameterName", a5, (unsigned char *)(a4 + 77), a6)
    && Phase::ReadParamIdx(a1, v11, @"ChirpRiseRateParameterName", a5, (unsigned char *)(a4 + 78), a6)
    && Phase::ReadParamIdx(a1, v11, @"BaseFrequencyMultiplierParameterName", a5, (unsigned char *)(a4 + 79), a6)&& (Phase::ReadParamIdx(a1, v11, @"BubbleGainParameterName", a5, (unsigned char *)(a4 + 80), a6) & 1) != 0)
  {
    uint64_t v12 = 1;
  }
  else
  {
    strncpy((char *)(a1 + 8), a3, 0x80uLL);
    uint64_t v12 = 0;
  }

  return v12;
}

void sub_221FC377C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::ActionTreeBuilder::~ActionTreeBuilder(Phase::ActionTreeBuilder *this)
{
  unint64_t v2 = (void *)*((void *)this + 47);
  if (v2)
  {
    *((void *)this + 48) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 44);
  if (v3)
  {
    *((void *)this + 45) = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)*((void *)this + 41);
  if (v4)
  {
    *((void *)this + 42) = v4;
    operator delete(v4);
  }
  id v5 = (void *)*((void *)this + 38);
  if (v5)
  {
    *((void *)this + 39) = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)*((void *)this + 35);
  if (v6)
  {
    *((void *)this + 36) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v7) {
    MEMORY[0x223C93870](v7, 0x1000C8077774924);
  }
  uint64_t v8 = (void *)*((void *)this + 29);
  if (v8)
  {
    *((void *)this + 30) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 26);
  if (v9)
  {
    *((void *)this + 27) = v9;
    operator delete(v9);
  }
  id v10 = (void *)*((void *)this + 23);
  if (v10)
  {
    *((void *)this + 24) = v10;
    operator delete(v10);
  }
  id v11 = (void *)*((void *)this + 20);
  if (v11)
  {
    *((void *)this + 21) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 17);
  if (v12)
  {
    *((void *)this + 18) = v12;
    operator delete(v12);
  }
}

void std::default_delete<Phase::DataBundle>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = a2[8];
    a2[8] = 0;
    if (v3) {
      MEMORY[0x223C93870](v3, 0x1000C80D9B47DDELL);
    }
    uint64_t v4 = a2[6];
    a2[6] = 0;
    if (v4) {
      MEMORY[0x223C93870](v4, 0x1000C80281E3F58);
    }
    uint64_t v5 = a2[4];
    a2[4] = 0;
    if (v5) {
      MEMORY[0x223C93870](v5, 0x1000C8039DDB5B0);
    }
    uint64_t v6 = a2[2];
    a2[2] = 0;
    if (v6) {
      std::default_delete<Phase::ActionTree []>::operator()[abi:ne180100]<Phase::ActionTree>((uint64_t)(a2 + 2), v6);
    }
    JUMPOUT(0x223C938A0);
  }
}

void std::default_delete<Phase::ActionTree []>::operator()[abi:ne180100]<Phase::ActionTree>(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 - 8);
    if (v2)
    {
      uint64_t v3 = 120 * v2;
      uint64_t v4 = a2 - 120;
      do
      {
        Phase::ActionTree::~ActionTree((Phase::ActionTree *)(v4 + v3));
        v3 -= 120;
      }
      while (v3);
    }
    JUMPOUT(0x223C93870);
  }
}

void Phase::ActionTree::~ActionTree(Phase::ActionTree *this)
{
  uint64_t v2 = *((void *)this + 13);
  *((void *)this + 13) = 0;
  if (v2) {
    MEMORY[0x223C93870](v2, 0x1000C809937E4EELL);
  }
  uint64_t v3 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v3) {
    MEMORY[0x223C93870](v3, 0x1000C8077774924);
  }
  uint64_t v4 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v4) {
    MEMORY[0x223C93870](v4, 0x1000C80D9B47DDELL);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    MEMORY[0x223C93870](v5, 0x1000C8052888210);
  }
  uint64_t v6 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v6) {
    MEMORY[0x223C93870](v6, 0x1000C8000313F17);
  }
  uint64_t v7 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v7) {
    MEMORY[0x223C93870](v7, 0x1000C8000313F17);
  }
  uint64_t v8 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v8) {
    MEMORY[0x223C93870](v8, 0x1000C8000313F17);
  }
}

Phase::ActionTree *std::unique_ptr<Phase::ActionTree>::reset[abi:ne180100](Phase::ActionTree **a1, Phase::ActionTree *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::ActionTree::~ActionTree(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void sub_221FC3B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC3C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC3D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC3D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC3E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC3FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC4040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC4178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC466C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_221FC47E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC4848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC4A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC4A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC4BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC4D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC4EB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_221FC4EF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC5000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC68AC()
{
}

void sub_221FC68C0()
{
  JUMPOUT(0x221FC6AC4);
}

void sub_221FC68CC()
{
}

void sub_221FC692C()
{
  __cxa_end_catch();

  JUMPOUT(0x221FC699CLL);
}

void sub_221FC6944()
{
  JUMPOUT(0x221FC6954);
}

void sub_221FC6950()
{
  objc_sync_exit(v0);

  JUMPOUT(0x221FC6AF4);
}

void sub_221FC6968()
{
}

void sub_221FC6974()
{
  operator delete(v0);
  JUMPOUT(0x221FC69ECLL);
}

void sub_221FC69A4()
{
  if (*(char *)(v0 - 169) < 0) {
    JUMPOUT(0x221FC6A8CLL);
  }
  JUMPOUT(0x221FC6AACLL);
}

void sub_221FC69C4()
{
}

void sub_221FC69DC()
{
}

void sub_221FC6A3C()
{
  __cxa_end_catch();

  JUMPOUT(0x221FC6AA8);
}

void sub_221FC6A54(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_221FC6A64()
{
}

void sub_221FC6A94()
{
}

void sub_221FC6E64(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, Phase::Logger *a14, long long buf, long long a16)
{
  if (a2 == 1)
  {
    double v22 = __cxa_begin_catch(a1);
    int v23 = NSString;
    (*(void (**)(void *))(*(void *)v22 + 16))(v22);
    unint64_t v24 = [v23 stringWithFormat:@"Error Creating Sound Asset: %s"];
    __int16 v25 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v24)
                                                                                        + 816)));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = [(Phase::Logger *)v24 UTF8String];
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "PHASEAssetRegistry.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 883;
      WORD1(a16) = 2048;
      *(void *)((char *)&a16 + 4) = a11;
      WORD6(a16) = 2080;
      *(void *)((char *)&a16 + 14) = v26;
      _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", (uint8_t *)&buf, 0x26u);
    }

    if (v20)
    {
      a13 = *MEMORY[0x263F08320];
      a14 = v24;
      __int16 v27 = [NSDictionary dictionaryWithObjects:&a14 forKeys:&a13 count:1];
      *int v20 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920805 userInfo:v27];
    }
    __cxa_end_catch();
    JUMPOUT(0x221FC6D6CLL);
  }

  _Unwind_Resume(a1);
}

void sub_221FC71BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC72C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC73CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC757C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

double PHASEGetPropertyBounded<double>(void *a1, void *a2, double a3, double a4, double a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v9 = a1;
  id v10 = a2;
  id v11 = v10;
  if (a3 < a4 || a3 > a5)
  {
    id v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v10)
                                                                                        + 432)));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 136316674;
      unint64_t v16 = "PHASEGetProperty.h";
      __int16 v17 = 1024;
      int v18 = 28;
      __int16 v19 = 2080;
      uint64_t v20 = [v9 UTF8String];
      __int16 v21 = 2080;
      uint64_t v22 = [(Phase::Logger *)v11 UTF8String];
      __int16 v23 = 2048;
      double v24 = a3;
      __int16 v25 = 2048;
      double v26 = a4;
      __int16 v27 = 2048;
      double v28 = a5;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s:%s Value is out of bounds. Clamping %f to range [%f, %f]", (uint8_t *)&v15, 0x44u);
    }

    a3 = fmin(fmax(a3, a4), a5);
  }

  return a3;
}

void sub_221FC773C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC7830(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC792C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC7A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC7DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_221FC812C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC8238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC8350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC8460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC8890(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, Phase::Logger *a16, long long buf, long long a18)
{
  if (a2 == 1)
  {
    uint64_t v22 = __cxa_begin_catch(a1);
    __int16 v23 = NSString;
    (*(void (**)(void *))(*(void *)v22 + 16))(v22);
    double v24 = [v23 stringWithFormat:@"Error Creating Sound Asset: %s"];
    __int16 v25 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v24)
                                                                                        + 816)));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = [(Phase::Logger *)v24 UTF8String];
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "PHASEAssetRegistry.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1298;
      WORD1(a18) = 2048;
      *(void *)((char *)&a18 + 4) = a10;
      WORD6(a18) = 2080;
      *(void *)((char *)&a18 + 14) = v26;
      _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_ERROR, "%25s:%-5d SoundAssetError for assetId %llu: %s", (uint8_t *)&buf, 0x26u);
    }

    if (v20)
    {
      a15 = *MEMORY[0x263F08320];
      a16 = v24;
      __int16 v27 = [NSDictionary dictionaryWithObjects:&a16 forKeys:&a15 count:1];
      *uint64_t v20 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920805 userInfo:v27];
    }
    __cxa_end_catch();
    JUMPOUT(0x221FC872CLL);
  }

  _Unwind_Resume(a1);
}

void sub_221FC8CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC8FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  objc_sync_exit(v9);
  MEMORY[0x223C938A0](v8, 0x1000C40D9B47DDELL);
  MEMORY[0x223C93870](a3, 0x1000C80D9B47DDELL);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_221FC93E8(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v12 = va_arg(va1, Phase::ActionTree *);

  std::unique_ptr<Phase::ActionTree>::reset[abi:ne180100]((Phase::ActionTree **)va, 0);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_221FC94E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FC963C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FC9750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FC9828(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_221FC9BA8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FC9A00);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::AssetUnloader>(Phase::Logger *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    uint64_t v7 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      id v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  uint64_t v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    id v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      id v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      id v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 121;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 2080;
      uint64_t v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    id v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  uint64_t v5 = std::any_cast[abi:ne180100]<Phase::Controller::AssetUnloader * const>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return (uint64_t)*v5;
}

void sub_221FC9E6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_221FC9F7C(_Unwind_Exception *a1)
{
}

void sub_221FC9F9C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_221FCA078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_221FCA218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_221FCA5DC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void **a20)
{
  uint64_t v22 = a20;
  a20 = 0;
  if (v22) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](a9, v22);
  }

  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if (a14)
    {
      *a14 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:1346920806 userInfo:0];
    }
    __cxa_end_catch();
    JUMPOUT(0x221FCA574);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_221FCA6A0()
{
}

void sub_221FCA844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FCAA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FCAEC0()
{
}

void sub_221FCB270(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_221FCB6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FCB814(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_221FCB8CC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_221FCB9C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_221FCBB5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FCBC40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FCBF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FCDB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_221FCE218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FCEA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23,void *a24,uint64_t a25,uint64_t a26,void *a27)
{
  _Unwind_Resume(a1);
}

void sub_221FCEF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_221FCF5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_221FCFDDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD0EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,void *a30,uint64_t a31,void *a32,void *a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,void *a42)
{
  _Unwind_Resume(a1);
}

uint64_t std::deque<int>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 1024;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,std::deque<int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::deque<int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::deque<int>::~deque[abi:ne180100]((uint64_t)v1 + 24);
    }
    operator delete(v1);
  }
}

void std::default_delete<Phase::StringPool>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    if (v3) {
      MEMORY[0x223C93870](v3, 0x1000C8077774924);
    }
    uint64_t v4 = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
    if (v4) {
      MEMORY[0x223C93870](v4, 0x1050C80C058ABA2);
    }
    JUMPOUT(0x223C938A0);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,void *>>>::operator()[abi:ne180100](char a1, id *a2)
{
  if (a1)
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>>>::__erase_unique<unsigned long long>(void *a1, unint64_t a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::find<PHASETapType>(a1, a2);
  if (result)
  {
    return (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>>>::erase(a1, result);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>>>::erase(void *a1, uint64_t *a2)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  uint64_t v5 = *a2;
  unint64_t v4 = a2[1];
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v3);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v7 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    uint64_t v8 = v7;
    uint64_t v7 = (uint64_t *)*v7;
  }
  while (v7 != a2);
  if (v8 != a1 + 2)
  {
    unint64_t v9 = v8[1];
    if (v6.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    uint64_t v10 = *a2;
    if (v9 == v4)
    {
LABEL_20:
      if (!v10) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v5) {
    goto LABEL_19;
  }
  unint64_t v11 = *(void *)(v5 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v3) {
      v11 %= *(void *)&v3;
    }
  }
  else
  {
    v11 &= *(void *)&v3 - 1;
  }
  uint64_t v10 = *a2;
  if (v11 != v4)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v4) = 0;
    uint64_t v10 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v12 = *(void *)(v10 + 8);
  if (v6.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v3) {
      v12 %= *(void *)&v3;
    }
  }
  else
  {
    v12 &= *(void *)&v3 - 1;
  }
  if (v12 != v4)
  {
    *(void *)(*a1 + 8 * v12) = v8;
    uint64_t v10 = *a2;
  }
LABEL_27:
  *uint64_t v8 = v10;
  *a2 = 0;
  --a1[3];

  operator delete(a2);
  return v5;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>>>::__emplace_unique_key_args<unsigned long long,std::pair<unsigned long long,std::unique_ptr<Phase::StringPool>>>(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unint64_t v9 = *(void **)(*a1 + 8 * v3);
    if (v9)
    {
      for (uint64_t i = (void *)*v9; i; uint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == a2)
        {
          if (i[2] == a2) {
            return 0;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v12 = a1 + 2;
  id v13 = operator new(0x20uLL);
  *id v13 = 0;
  v13[1] = v5;
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  a3[1] = 0;
  uint64_t v13[2] = v14;
  void v13[3] = v15;
  float v16 = (float)(unint64_t)(a1[3] + 1);
  float v17 = *((float *)a1 + 8);
  if (v7 && (float)(v17 * (float)v7) >= v16)
  {
    unint64_t v5 = v3;
    goto LABEL_64;
  }
  BOOL v18 = 1;
  if (v7 >= 3) {
    BOOL v18 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v19 = v18 | (2 * v7);
  unint64_t v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20) {
    int8x8_t prime = (int8x8_t)v20;
  }
  else {
    int8x8_t prime = (int8x8_t)v19;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v28 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v29 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      unint64_t v28 = std::__next_prime(v28);
    }
    else
    {
      uint64_t v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2) {
        unint64_t v28 = v30;
      }
    }
    if (*(void *)&prime <= v28) {
      int8x8_t prime = (int8x8_t)v28;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      long long v37 = (void *)*a1;
      *a1 = 0;
      if (v37) {
        operator delete(v37);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v22 = operator new(8 * *(void *)&prime);
  __int16 v23 = (void *)*a1;
  *a1 = (uint64_t)v22;
  if (v23) {
    operator delete(v23);
  }
  uint64_t v24 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v24++) = 0;
  while (*(void *)&prime != v24);
  __int16 v25 = (void *)*v12;
  if (*v12)
  {
    unint64_t v26 = v25[1];
    uint8x8_t v27 = (uint8x8_t)vcnt_s8(prime);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      if (v26 >= *(void *)&prime) {
        v26 %= *(void *)&prime;
      }
    }
    else
    {
      v26 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v26) = v12;
    __int16 v31 = (void *)*v25;
    if (*v25)
    {
      do
      {
        unint64_t v32 = v31[1];
        if (v27.u32[0] > 1uLL)
        {
          if (v32 >= *(void *)&prime) {
            v32 %= *(void *)&prime;
          }
        }
        else
        {
          v32 &= *(void *)&prime - 1;
        }
        if (v32 != v26)
        {
          if (!*(void *)(*a1 + 8 * v32))
          {
            *(void *)(*a1 + 8 * v32) = v25;
            goto LABEL_56;
          }
          *__int16 v25 = *v31;
          *__int16 v31 = **(void **)(*a1 + 8 * v32);
          **(void **)(*a1 + 8 * v32) = v31;
          __int16 v31 = v25;
        }
        unint64_t v32 = v26;
LABEL_56:
        __int16 v25 = v31;
        __int16 v31 = (void *)*v31;
        unint64_t v26 = v32;
      }
      while (v31);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_64:
  uint64_t v33 = *a1;
  uint64_t v34 = *(void **)(*a1 + 8 * v5);
  if (v34)
  {
    *id v13 = *v34;
LABEL_72:
    void *v34 = v13;
    goto LABEL_73;
  }
  *id v13 = *v12;
  *unint64_t v12 = v13;
  *(void *)(v33 + 8 * v5) = v12;
  if (*v13)
  {
    unint64_t v35 = *(void *)(*v13 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v35 >= v7) {
        v35 %= v7;
      }
    }
    else
    {
      v35 &= v7 - 1;
    }
    uint64_t v34 = (void *)(*a1 + 8 * v35);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return 1;
}

void sub_221FD1A90(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,void *>>>::operator()[abi:ne180100](char a1, char *__p)
{
  if (a1)
  {
    unint64_t v3 = __p + 24;
    uint64_t v4 = *((void *)__p + 3);
    *((void *)__p + 3) = 0;
    if (v4) {
      std::default_delete<Phase::StringPool>::operator()[abi:ne180100]((uint64_t)v3, v4);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,PHASEDataBundleAsset * {__strong}&>(uint64_t a1, unint64_t a2, uint64_t a3, void *a4)
{
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = a2;
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v4);
    if (v11)
    {
      for (uint64_t i = (void *)*v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == a2)
        {
          if (i[2] == a2) {
            return 0;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = operator new(0x20uLL);
  void *v14 = 0;
  v14[1] = a2;
  void v14[2] = a3;
  void v14[3] = a4;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,Phase::Controller::OptionalProperties::Property>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= a2) {
        unint64_t v4 = a2 % v9;
      }
      else {
        unint64_t v4 = a2;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & a2;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *v14 = *v22;
LABEL_38:
    void *v22 = v14;
    goto LABEL_39;
  }
  void *v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    unint64_t v23 = *(void *)(*v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return 1;
}

void sub_221FD1D20(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,PHASEAsset * {__strong}>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>>>::__erase_unique<unsigned long long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return;
  }
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v5 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & a2;
  }
  uint8x8_t v6 = *(char ***)(*a1 + 8 * v5);
  if (!v6) {
    return;
  }
  unint64_t v7 = *v6;
  if (!*v6) {
    return;
  }
  uint64_t v8 = *(void *)&v2 - 1;
  while (1)
  {
    unint64_t v9 = *((void *)v7 + 1);
    if (v9 == a2) {
      break;
    }
    if (v4.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v2) {
        v9 %= *(void *)&v2;
      }
    }
    else
    {
      v9 &= v8;
    }
    if (v9 != v5) {
      return;
    }
LABEL_17:
    unint64_t v7 = *(char **)v7;
    if (!v7) {
      return;
    }
  }
  if (*((void *)v7 + 2) != a2) {
    goto LABEL_17;
  }
  uint8x8_t v10 = *(char **)v7;
  if (v4.u32[0] > 1uLL)
  {
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
  }
  else
  {
    v9 &= v8;
  }
  unint64_t v11 = *(char **)(*a1 + 8 * v9);
  do
  {
    unint64_t v12 = v11;
    unint64_t v11 = *(char **)v11;
  }
  while (v11 != v7);
  if (v12 == a1 + 2) {
    goto LABEL_36;
  }
  unint64_t v13 = v12[1];
  if (v4.u32[0] > 1uLL)
  {
    if (v13 >= *(void *)&v2) {
      v13 %= *(void *)&v2;
    }
  }
  else
  {
    v13 &= v8;
  }
  if (v13 == v9)
  {
LABEL_38:
    if (v10)
    {
      unint64_t v14 = *((void *)v10 + 1);
      goto LABEL_40;
    }
  }
  else
  {
LABEL_36:
    if (!v10) {
      goto LABEL_37;
    }
    unint64_t v14 = *((void *)v10 + 1);
    if (v4.u32[0] > 1uLL)
    {
      unint64_t v15 = *((void *)v10 + 1);
      if (v14 >= *(void *)&v2) {
        unint64_t v15 = v14 % *(void *)&v2;
      }
    }
    else
    {
      unint64_t v15 = v14 & v8;
    }
    if (v15 != v9)
    {
LABEL_37:
      *(void *)(*a1 + 8 * v9) = 0;
      uint8x8_t v10 = *(char **)v7;
      goto LABEL_38;
    }
LABEL_40:
    if (v4.u32[0] > 1uLL)
    {
      if (v14 >= *(void *)&v2) {
        v14 %= *(void *)&v2;
      }
    }
    else
    {
      v14 &= v8;
    }
    if (v14 != v9)
    {
      *(void *)(*a1 + 8 * v14) = v12;
      uint8x8_t v10 = *(char **)v7;
    }
  }
  *unint64_t v12 = v10;
  *(void *)unint64_t v7 = 0;
  --a1[3];
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<Phase::StringPool>>,void *>>>::operator()[abi:ne180100](1, v7);
}

uint64_t *std::unique_ptr<Phase::Controller::ResidentSoundAssetInfo>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    int8x8_t v2 = *(void **)(v1 + 48);
    *(void *)(v1 + 48) = 0;

    JUMPOUT(0x223C938A0);
  }
  return result;
}

Phase::Controller::StreamedSoundAssetInfo *std::unique_ptr<Phase::Controller::StreamedSoundAssetInfo>::reset[abi:ne180100](Phase::Controller::StreamedSoundAssetInfo **a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    Phase::Controller::StreamedSoundAssetInfo::~StreamedSoundAssetInfo(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::GlobalMetaParameterManager,BOOL,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double>(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (*(int *)(a1 + 16) <= 0)
  {
    unint64_t v14 = **(id **)(a1 + 24);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v22 = "Commandable.hpp";
      __int16 v23 = 1024;
      int v24 = 132;
      _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.");
  }
  uint64_t v10 = **(void **)(a1 + 8);
  unint64_t v20 = 0;
  BOOL v19 = 1;
  uint64_t v11 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v10, 64, &v20, &v19);
  if (!v11)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    BOOL v17 = **(id **)(v10 + 48);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v22 = "CommandQueue.hpp";
      __int16 v23 = 1024;
      int v24 = 100;
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    unint64_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v18, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v19)
  {
    unint64_t v12 = **(id **)(v10 + 48);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      uint64_t v22 = "CommandQueue.hpp";
      __int16 v23 = 1024;
      int v24 = 89;
      __int16 v25 = 2048;
      unint64_t v26 = v20;
      __int16 v27 = 2048;
      uint64_t v28 = 64;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v11 = &unk_26D478D58;
  *(void *)(v11 + 8) = a1;
  *(void *)(v11 + 16) = Phase::GlobalMetaParameterManager::SetGlobalMetaParameter;
  *(void *)(v11 + 24) = 0;
  *(void *)(v11 + 32) = a2;
  *(_DWORD *)(v11 + 40) = a3;
  *(void *)(v11 + 48) = a4;
  *(double *)(v11 + 56) = a5;
  uint64_t result = Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v10, 64);
  atomic_store(0, (unsigned __int8 *)(v10 + 40));
  return result;
}

void sub_221FD22A0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FD210CLL);
  }
  _Unwind_Resume(exception_object);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::GlobalMetaParameterManager,BOOL,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double>(int,BOOL (Phase::GlobalMetaParameterManager::*)(unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double),unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double)::{lambda(void)#1},void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::GlobalMetaParameterManager,BOOL,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double>(int,BOOL (Phase::GlobalMetaParameterManager::*)(unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double),unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void *, void, void, void, double))(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  unint64_t v3 = (void *)(*(void *)(a1 + 8) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(uint64_t (**)(void *, void, void, void, double))(*v3 + v1);
  }
  return v1(v3, *(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(void *)(a1 + 48), *(double *)(a1 + 56));
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::AssetUnloader * const>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::AssetUnloader *>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_221FD2490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD2548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD26E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FD2790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FD2840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FD295C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FD2B24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD2BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FD2C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD2D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD2DD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD2E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD2F34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD3074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FD3130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FD3208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FD3258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD3348(_Unwind_Exception *a1)
{
  uint8x8_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_221FD33B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD353C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FD359C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD3A7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD3BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD41E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_221FD459C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FD44A8);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FD4890(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FD47A0);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FD4B04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD4C04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void GetDefaultClientEngineMode(void)
{
  {
    if (v0)
    {
      GetDefaultClientEngineMode(void)::$_0::operator()(v0);
    }
  }
}

void sub_221FD4C78(_Unwind_Exception *a1)
{
}

void sub_221FD4DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD4E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD51B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD538C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD5438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD54F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD5740(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

PHASEEngineImpl *std::unique_ptr<PHASEEngineImpl>::reset[abi:ne180100](PHASEEngineImpl **a1, PHASEEngineImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    PHASEEngineImpl::~PHASEEngineImpl(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void sub_221FD5840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  objc_sync_exit(v9);

  a9.receiver = v9;
  a9.super_class = (Class)PHASEEngine;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_221FD59A4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_221FD5AB0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_221FD5BC0(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_221FD5E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD6124(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_221FD6614(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_221FD6784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD7254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47)
{
  if (__p) {
    operator delete(__p);
  }
  if (a37) {
    operator delete(a37);
  }
  if (a40) {
    operator delete(a40);
  }
  if (a43) {
    operator delete(a43);
  }
  if (a46) {
    operator delete(a46);
  }

  _Unwind_Resume(a1);
}

void Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,float const*,float *,&float Phase::Identity<float>,&float Phase::Identity<float>>(float *a1, float *a2, uint64_t a3, float *a4, float *a5, uint64_t a6)
{
  uint64_t v9 = (char *)a2 - (char *)a1;
  if (a2 != a1)
  {
    for (uint64_t i = a1 + 1; i != a2; ++i)
    {
      float v12 = *(i - 1);
      float v11 = *i;
      if (v11 < v12) {
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 262, "std::is_sorted(inFrequenciesFirst, inFrequenciesLast)");
      }
    }
  }
  if (a4 != a5)
  {
    for (uint64_t j = a4 + 1; j != a5; ++j)
    {
      float v15 = *(j - 1);
      float v14 = *j;
      if (v14 < v15) {
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 263, "std::is_sorted(inOutputFrequenciesFirst, inOutputFrequenciesLast)");
      }
    }
  }
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float *>,float>(a1, a2, (float **)v87, 22000.0);
  Phase::GetBandsFromCenterFrequencies<float const*,float>(a4, a5, (float **)v86, 22000.0);
  std::string __p = 0;
  uint64_t v84 = 0;
  long long v85 = 0;
  long long v80 = 0;
  long long v81 = 0;
  unint64_t v82 = 0;
  long long v77 = 0;
  long long v79 = 0;
  if ((char *)a5 - (char *)a4 > 0)
  {
    float v16 = 0;
    BOOL v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = a5 - a4;
    uint64_t v21 = v9 >> 2;
    uint64_t v22 = (v9 >> 2) - 1;
    if (v20 <= 1) {
      uint64_t v20 = 1;
    }
    uint64_t v75 = v20;
    do
    {
      __int16 v23 = (float *)((char *)v86[0] + 8 * v19);
      float v24 = *v23;
      float v25 = v23[1];
      uint64_t v84 = (float *)__p;
      long long v81 = v17;
      uint64_t v78 = v16;
      if (v18 < v21)
      {
        unint64_t v26 = (float *)((char *)v87[0] + 8 * v18);
        float v27 = *v26;
        float v28 = v26[1];
        if (v25 < v28) {
          float v28 = v25;
        }
        if (v27 >= v24) {
          float v29 = *v26;
        }
        else {
          float v29 = v24;
        }
        float v30 = fmaxf(v28 - v29, 0.0);
        float v31 = v25;
        uint64_t v32 = v18;
        if (v30 == 0.0)
        {
LABEL_62:
          v18 -= v27 != v31;
        }
        else
        {
          while (1)
          {
            uint64_t v33 = v84;
            if (v84 >= v85)
            {
              unint64_t v35 = (float *)__p;
              uint64_t v36 = ((char *)v84 - (unsigned char *)__p) >> 2;
              unint64_t v37 = v36 + 1;
              if ((unint64_t)(v36 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v38 = (char *)v85 - (unsigned char *)__p;
              if (((char *)v85 - (unsigned char *)__p) >> 1 > v37) {
                unint64_t v37 = v38 >> 1;
              }
              if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v39 = v37;
              }
              if (v39)
              {
                long long v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v85, v39);
                unint64_t v35 = (float *)__p;
                uint64_t v33 = v84;
              }
              else
              {
                long long v40 = 0;
              }
              id v41 = (float *)&v40[4 * v36];
              *id v41 = v30;
              uint64_t v34 = v41 + 1;
              while (v33 != v35)
              {
                int v42 = *((_DWORD *)v33-- - 1);
                *((_DWORD *)v41-- - 1) = v42;
              }
              std::string __p = v41;
              uint64_t v84 = v34;
              long long v85 = (float *)&v40[4 * v39];
              if (v35) {
                operator delete(v35);
              }
            }
            else
            {
              *uint64_t v84 = v30;
              uint64_t v34 = v33 + 1;
            }
            uint64_t v84 = v34;
            uint64_t v43 = v81;
            if (v81 >= v82)
            {
              id v44 = (char *)v80;
              uint64_t v45 = (v81 - (unsigned char *)v80) >> 3;
              unint64_t v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 61) {
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v47 = v82 - (unsigned char *)v80;
              if ((v82 - (unsigned char *)v80) >> 2 > v46) {
                unint64_t v46 = v47 >> 2;
              }
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v48 = v46;
              }
              if (v48)
              {
                long long v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v82, v48);
                id v44 = (char *)v80;
                uint64_t v43 = v81;
              }
              else
              {
                long long v49 = 0;
              }
              double v50 = (uint64_t *)&v49[8 * v45];
              *double v50 = v18;
              BOOL v17 = (char *)(v50 + 1);
              while (v43 != v44)
              {
                uint64_t v51 = *((void *)v43 - 1);
                v43 -= 8;
                *--double v50 = v51;
              }
              long long v80 = v50;
              long long v81 = v17;
              unint64_t v82 = &v49[8 * v48];
              if (v44) {
                operator delete(v44);
              }
            }
            else
            {
              *(void *)long long v81 = v18;
              BOOL v17 = v43 + 8;
            }
            long long v81 = v17;
            if (v18 == v22) {
              uint64_t v32 = v18;
            }
            if (++v18 == v21) {
              break;
            }
            id v52 = (float *)((char *)v87[0] + 8 * v18);
            float v27 = *v52;
            float v53 = v52[1];
            id v54 = (float *)((char *)v86[0] + 8 * v19);
            float v55 = *v54;
            float v31 = v54[1];
            if (v31 < v53) {
              float v53 = v54[1];
            }
            if (v27 >= v55) {
              float v55 = v27;
            }
            float v30 = fmaxf(v53 - v55, 0.0);
            if (v30 == 0.0) {
              goto LABEL_62;
            }
          }
          uint64_t v18 = v32;
        }
      }
      char v56 = v78;
      if (v17 == v80)
      {
        float v59 = 0.0;
      }
      else
      {
        unint64_t v57 = 0;
        float v58 = v25 - v24;
        float v59 = 0.0;
        long long v60 = v78;
        BOOL v17 = (char *)v80;
        do
        {
          float v61 = *((float *)__p + v57) / v58;
          float v62 = v61 * *(float *)(a3 + 4 * *(void *)&v17[8 * v57]);
          if (v60 >= v79)
          {
            id v63 = v77;
            uint64_t v64 = v60 - v77;
            unint64_t v65 = v64 + 1;
            if ((unint64_t)(v64 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v66 = (char *)v79 - (char *)v77;
            if (((char *)v79 - (char *)v77) >> 1 > v65) {
              unint64_t v65 = v66 >> 1;
            }
            if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v67 = v65;
            }
            if (v67)
            {
              uint64_t v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v79, v67);
              id v63 = v77;
              long long v60 = v78;
            }
            else
            {
              uint64_t v68 = 0;
            }
            uint64_t v69 = (float *)&v68[4 * v64];
            *uint64_t v69 = v62;
            char v56 = v69 + 1;
            while (v60 != v63)
            {
              int v70 = *((_DWORD *)v60-- - 1);
              *((_DWORD *)v69-- - 1) = v70;
            }
            long long v77 = v69;
            long long v79 = (float *)&v68[4 * v67];
            if (v63) {
              operator delete(v63);
            }
          }
          else
          {
            *long long v60 = v62;
            char v56 = v60 + 1;
          }
          float v59 = v59 + v61;
          uint64_t v78 = v56;
          ++v57;
          BOOL v17 = (char *)v80;
          long long v60 = v56;
        }
        while (v57 < (v81 - (unsigned char *)v80) >> 3);
      }
      float v16 = v77;
      double v71 = 0.0;
      if (v77 != v56)
      {
        __int16 v72 = v77;
        do
        {
          float v73 = *v72++;
          double v71 = v71 + v73;
        }
        while (v72 != v56);
      }
      float v74 = v71;
      uint64_t v22 = (v9 >> 2) - 1;
      *(float *)(a6 + 4 * v19++) = v74 / v59;
    }
    while (v19 != v75);
    if (v77)
    {
      operator delete(v77);
      BOOL v17 = (char *)v80;
    }
    if (v17)
    {
      long long v81 = v17;
      operator delete(v17);
    }
  }
  if (__p)
  {
    uint64_t v84 = (float *)__p;
    operator delete(__p);
  }
  if (v86[0])
  {
    v86[1] = v86[0];
    operator delete(v86[0]);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
}

void sub_221FD7878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FD7DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *GetReverbPresetName(uint64_t a1)
{
  uint64_t result = 0;
  uint64_t v41 = *MEMORY[0x263EF8340];
  if (a1 <= 1917152816)
  {
    if (a1 <= 1916890724)
    {
      switch(a1)
      {
        case 1:
          goto LABEL_82;
        case 2:
          goto LABEL_41;
        case 3:
          goto LABEL_91;
        case 4:
LABEL_11:
          uint8x8_t v4 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
            return @"LargeRoom";
          }
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 126;
          unint64_t v5 = "%25s:%-5d Setting reverb to LargeRoom";
          goto LABEL_137;
        case 5:
LABEL_76:
          BOOL v17 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 135;
            _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LargeRoom2", (uint8_t *)&v37, 0x12u);
          }
          return @"LargeRoom2";
        case 6:
          goto LABEL_68;
        case 7:
          goto LABEL_47;
        case 8:
          goto LABEL_85;
        case 9:
          goto LABEL_88;
        case 10:
          goto LABEL_53;
        case 11:
          goto LABEL_79;
        case 12:
          goto LABEL_73;
        default:
          return result;
      }
    }
    if (a1 > 1917023335)
    {
      if (a1 > 1917137200)
      {
        if (a1 == 1917137201)
        {
          uint8x8_t v4 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 345;
            unint64_t v5 = "%25s:%-5d Setting reverb to LargeRoom. In the future, return Environment11";
LABEL_137:
            _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v37, 0x12u);
          }
          return @"LargeRoom";
        }
        else if (a1 == 1917137202)
        {
          float v14 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 351;
            _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment12", (uint8_t *)&v37, 0x12u);
          }
          return @"Environment12";
        }
      }
      else if (a1 == 1917023336)
      {
LABEL_82:
        uint64_t v19 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 99;
          _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Cathedral", (uint8_t *)&v37, 0x12u);
        }
        return @"Cathedral";
      }
      else if (a1 == 1917137200)
      {
        uint64_t v9 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 338;
          _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment10", (uint8_t *)&v37, 0x12u);
        }
        return @"Environment10";
      }
    }
    else if (a1 > 1917020525)
    {
      if (a1 == 1917020526)
      {
        unint64_t v35 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 268;
          _os_log_impl(&dword_221E5E000, v35, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Cinema", (uint8_t *)&v37, 0x12u);
        }
        return @"Cinema";
      }
      else if (a1 == 1917022062)
      {
        unint64_t v13 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 212;
          _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to ConcertHall", (uint8_t *)&v37, 0x12u);
        }
        return @"ConcertHall";
      }
    }
    else if (a1 == 1916890725)
    {
      float v31 = **(id **)(Phase::Logger::GetInstance(0) + 432);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        int v37 = 136315394;
        uint64_t v38 = "PHASEEngine.mm";
        __int16 v39 = 1024;
        int v40 = 357;
        _os_log_impl(&dword_221E5E000, v31, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Anechoic", (uint8_t *)&v37, 0x12u);
      }
      return @"Anechoic";
    }
    else if (a1 == 1916952948)
    {
      unint64_t v7 = **(id **)(Phase::Logger::GetInstance(0) + 432);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v37 = 136315394;
        uint64_t v38 = "PHASEEngine.mm";
        __int16 v39 = 1024;
        int v40 = 254;
        _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Bathroom", (uint8_t *)&v37, 0x12u);
      }
      return @"Bathroom";
    }
  }
  else if (a1 <= 1917604400)
  {
    if (a1 > 1917547629)
    {
      if (a1 > 1917601840)
      {
        if (a1 == 1917601841)
        {
LABEL_91:
          uint64_t v22 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 117;
            _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LargeHall", (uint8_t *)&v37, 0x12u);
          }
          return @"LargeHall";
        }
        else if (a1 == 1917601842)
        {
LABEL_68:
          float v15 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 144;
            _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LargeHall2", (uint8_t *)&v37, 0x12u);
          }
          return @"LargeHall2";
        }
      }
      else if (a1 == 1917547630)
      {
        uint64_t v32 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 247;
          _os_log_impl(&dword_221E5E000, v32, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Kitchen", (uint8_t *)&v37, 0x12u);
        }
        return @"Kitchen";
      }
      else if (a1 == 1917600616)
      {
LABEL_41:
        uint64_t v10 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 108;
          _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LargeChamber", (uint8_t *)&v37, 0x12u);
        }
        return @"LargeChamber";
      }
    }
    else
    {
      switch(a1)
      {
        case 1917152817:
          uint8x8_t v6 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 275;
            _os_log_impl(&dword_221E5E000, v6, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment01", (uint8_t *)&v37, 0x12u);
          }
          uint64_t result = @"Environment01";
          break;
        case 1917152818:
          float v24 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 282;
            _os_log_impl(&dword_221E5E000, v24, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment02", (uint8_t *)&v37, 0x12u);
          }
          uint64_t result = @"Environment02";
          break;
        case 1917152819:
          float v25 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 289;
            _os_log_impl(&dword_221E5E000, v25, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment03", (uint8_t *)&v37, 0x12u);
          }
          uint64_t result = @"Environment03";
          break;
        case 1917152820:
          unint64_t v26 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 296;
            _os_log_impl(&dword_221E5E000, v26, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment04", (uint8_t *)&v37, 0x12u);
          }
          uint64_t result = @"Environment04";
          break;
        case 1917152821:
          float v27 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 303;
            _os_log_impl(&dword_221E5E000, v27, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment05", (uint8_t *)&v37, 0x12u);
          }
          uint64_t result = @"Environment05";
          break;
        case 1917152822:
          float v28 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 310;
            _os_log_impl(&dword_221E5E000, v28, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment06", (uint8_t *)&v37, 0x12u);
          }
          uint64_t result = @"Environment06";
          break;
        case 1917152823:
          uint8x8_t v4 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
            return @"LargeRoom";
          }
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 317;
          unint64_t v5 = "%25s:%-5d Setting reverb to LargeRoom. In the future, return Environment07";
          goto LABEL_137;
        case 1917152824:
          float v29 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 324;
            _os_log_impl(&dword_221E5E000, v29, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment08", (uint8_t *)&v37, 0x12u);
          }
          uint64_t result = @"Environment08";
          break;
        case 1917152825:
          float v30 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 331;
            _os_log_impl(&dword_221E5E000, v30, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Environment09", (uint8_t *)&v37, 0x12u);
          }
          uint64_t result = @"Environment09";
          break;
        default:
          return result;
      }
    }
  }
  else if (a1 > 1917667376)
  {
    if (a1 <= 1917669996)
    {
      switch(a1)
      {
        case 1917667377:
LABEL_85:
          uint64_t v20 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 162;
            _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to MediumHall", (uint8_t *)&v37, 0x12u);
          }
          return @"MediumHall";
        case 1917667378:
LABEL_88:
          uint64_t v21 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 171;
            _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to MediumHall2", (uint8_t *)&v37, 0x12u);
          }
          return @"MediumHall2";
        case 1917667379:
LABEL_53:
          float v12 = **(id **)(Phase::Logger::GetInstance(0) + 432);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = 136315394;
            uint64_t v38 = "PHASEEngine.mm";
            __int16 v39 = 1024;
            int v40 = 180;
            _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to MediumHall3", (uint8_t *)&v37, 0x12u);
          }
          return @"MediumHall3";
      }
    }
    else if (a1 > 1917810035)
    {
      if (a1 == 1917810036)
      {
        uint64_t v36 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 205;
          _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Outside", (uint8_t *)&v37, 0x12u);
        }
        return @"Outside";
      }
      else if (a1 == 1918063213)
      {
LABEL_73:
        float v16 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 198;
          _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to SmallRoom", (uint8_t *)&v37, 0x12u);
        }
        return @"SmallRoom";
      }
    }
    else if (a1 == 1917669997)
    {
LABEL_79:
      uint64_t v18 = **(id **)(Phase::Logger::GetInstance(0) + 432);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        int v37 = 136315394;
        uint64_t v38 = "PHASEEngine.mm";
        __int16 v39 = 1024;
        int v40 = 189;
        _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to MediumRoom", (uint8_t *)&v37, 0x12u);
      }
      return @"MediumRoom";
    }
    else if (a1 == 1917678445)
    {
      uint64_t v8 = **(id **)(Phase::Logger::GetInstance(0) + 432);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        int v37 = 136315394;
        uint64_t v38 = "PHASEEngine.mm";
        __int16 v39 = 1024;
        int v40 = 233;
        _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to Museum", (uint8_t *)&v37, 0x12u);
      }
      return @"Museum";
    }
  }
  else if (a1 > 1917612652)
  {
    switch(a1)
    {
      case 1917612653:
        uint64_t v33 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 261;
          _os_log_impl(&dword_221E5E000, v33, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to ListeningRoom", (uint8_t *)&v37, 0x12u);
        }
        return @"ListeningRoom";
      case 1917613682:
        uint64_t v34 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 240;
          _os_log_impl(&dword_221E5E000, v34, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LivingRoom", (uint8_t *)&v37, 0x12u);
        }
        return @"LivingRoom";
      case 1917666152:
LABEL_47:
        float v11 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 153;
          _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to MediumChamber", (uint8_t *)&v37, 0x12u);
        }
        return @"MediumChamber";
    }
  }
  else
  {
    switch(a1)
    {
      case 1917604401:
        goto LABEL_11;
      case 1917604402:
        goto LABEL_76;
      case 1917604403:
        unint64_t v3 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 219;
          _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LargeRoom3", (uint8_t *)&v37, 0x12u);
        }
        uint64_t result = @"LargeRoom3";
        break;
      case 1917604404:
        __int16 v23 = **(id **)(Phase::Logger::GetInstance(0) + 432);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          int v37 = 136315394;
          uint64_t v38 = "PHASEEngine.mm";
          __int16 v39 = 1024;
          int v40 = 226;
          _os_log_impl(&dword_221E5E000, v23, OS_LOG_TYPE_DEFAULT, "%25s:%-5d Setting reverb to LargeRoom4", (uint8_t *)&v37, 0x12u);
        }
        uint64_t result = @"LargeRoom4";
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_221FD9398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD9664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FD987C(_Unwind_Exception *exception_object)
{
}

void sub_221FD9C64(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FD9B68);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FD9E88(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_221FD9F48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_221FD9FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

void sub_221FDA100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_221FDA18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FDA204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FDA2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FDA320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FDA3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  _Unwind_Resume(a1);
}

void sub_221FDA4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_221FDA5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_221FDA704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_221FDAA5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FDAD7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FDB0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FDB264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FDB5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FDB9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FDBB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void GetDefaultClientEngineMode(void)::$_0::operator()(Phase::Logger *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v1 = **(id **)(Phase::Logger::GetInstance(a1) + 432);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315906;
    unint64_t v3 = "PHASEEngine.mm";
    __int16 v4 = 1024;
    int v5 = 455;
    __int16 v6 = 2080;
    unint64_t v7 = "";
    __int16 v8 = 2080;
    uint64_t v9 = "default";
    _os_log_impl(&dword_221E5E000, v1, OS_LOG_TYPE_DEBUG, "%25s:%-5d Phase %smode = %s", (uint8_t *)&v2, 0x26u);
  }
}

void Phase::GetValuesFromFrequencyResponse<std::__wrap_iter<float *>,std::__wrap_iter<float *>,float const*,float *,&float Phase::DecibelsToEnergy<float>,&float Phase::EnergyToDecibels<float>>(float *a1, float *a2, uint64_t a3, float *a4, float *a5, uint64_t a6)
{
  uint64_t v9 = (char *)a2 - (char *)a1;
  if (a2 != a1)
  {
    for (uint64_t i = a1 + 1; i != a2; ++i)
    {
      float v12 = *(i - 1);
      float v11 = *i;
      if (v11 < v12) {
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 262, "std::is_sorted(inFrequenciesFirst, inFrequenciesLast)");
      }
    }
  }
  if (a4 != a5)
  {
    for (uint64_t j = a4 + 1; j != a5; ++j)
    {
      float v15 = *(j - 1);
      float v14 = *j;
      if (v14 < v15) {
        __assert_rtn("GetValuesFromFrequencyResponse", "FrequencyResponse.hpp", 263, "std::is_sorted(inOutputFrequenciesFirst, inOutputFrequenciesLast)");
      }
    }
  }
  Phase::GetBandsFromCenterFrequencies<std::__wrap_iter<float *>,float>(a1, a2, (float **)v89, 22000.0);
  Phase::GetBandsFromCenterFrequencies<float const*,float>(a4, a5, (float **)v88, 22000.0);
  std::string __p = 0;
  long long v86 = 0;
  uint64_t v87 = 0;
  unint64_t v82 = 0;
  int v83 = 0;
  uint64_t v84 = 0;
  long long v79 = 0;
  long long v81 = 0;
  if ((char *)a5 - (char *)a4 > 0)
  {
    float v16 = 0;
    BOOL v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = a5 - a4;
    uint64_t v21 = v9 >> 2;
    uint64_t v78 = (v9 >> 2) - 1;
    if (v20 <= 1) {
      uint64_t v20 = 1;
    }
    uint64_t v75 = v20;
    uint64_t v76 = v9 >> 2;
    do
    {
      uint64_t v22 = (float *)((char *)v88[0] + 8 * v19);
      float v23 = *v22;
      float v24 = v22[1];
      long long v86 = (float *)__p;
      int v83 = v17;
      long long v80 = v16;
      if (v18 < v21)
      {
        float v25 = (float *)((char *)v89[0] + 8 * v18);
        float v26 = *v25;
        float v27 = v25[1];
        if (v24 < v27) {
          float v27 = v24;
        }
        if (v26 >= v23) {
          float v28 = *v25;
        }
        else {
          float v28 = v23;
        }
        float v29 = fmaxf(v27 - v28, 0.0);
        float v30 = v24;
        uint64_t v31 = v18;
        if (v29 == 0.0)
        {
LABEL_62:
          v18 -= v26 != v30;
        }
        else
        {
          while (1)
          {
            uint64_t v32 = v86;
            if (v86 >= v87)
            {
              uint64_t v34 = (float *)__p;
              uint64_t v35 = ((char *)v86 - (unsigned char *)__p) >> 2;
              unint64_t v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62) {
                std::vector<float>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v37 = (char *)v87 - (unsigned char *)__p;
              if (((char *)v87 - (unsigned char *)__p) >> 1 > v36) {
                unint64_t v36 = v37 >> 1;
              }
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v38 = v36;
              }
              if (v38)
              {
                __int16 v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v87, v38);
                uint64_t v34 = (float *)__p;
                uint64_t v32 = v86;
              }
              else
              {
                __int16 v39 = 0;
              }
              int v40 = (float *)&v39[4 * v35];
              *int v40 = v29;
              uint64_t v33 = v40 + 1;
              while (v32 != v34)
              {
                int v41 = *((_DWORD *)v32-- - 1);
                *((_DWORD *)v40-- - 1) = v41;
              }
              std::string __p = v40;
              long long v86 = v33;
              uint64_t v87 = (float *)&v39[4 * v38];
              if (v34) {
                operator delete(v34);
              }
            }
            else
            {
              *long long v86 = v29;
              uint64_t v33 = v32 + 1;
            }
            long long v86 = v33;
            int v42 = v83;
            if (v83 >= v84)
            {
              uint64_t v43 = (char *)v82;
              uint64_t v44 = (v83 - (unsigned char *)v82) >> 3;
              unint64_t v45 = v44 + 1;
              if ((unint64_t)(v44 + 1) >> 61) {
                std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v46 = v84 - (unsigned char *)v82;
              if ((v84 - (unsigned char *)v82) >> 2 > v45) {
                unint64_t v45 = v46 >> 2;
              }
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v47 = v45;
              }
              if (v47)
              {
                unint64_t v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((uint64_t)&v84, v47);
                uint64_t v43 = (char *)v82;
                int v42 = v83;
              }
              else
              {
                unint64_t v48 = 0;
              }
              long long v49 = (uint64_t *)&v48[8 * v44];
              *long long v49 = v18;
              BOOL v17 = (char *)(v49 + 1);
              while (v42 != v43)
              {
                uint64_t v50 = *((void *)v42 - 1);
                v42 -= 8;
                *--long long v49 = v50;
              }
              unint64_t v82 = v49;
              int v83 = v17;
              uint64_t v84 = &v48[8 * v47];
              if (v43) {
                operator delete(v43);
              }
            }
            else
            {
              *(void *)int v83 = v18;
              BOOL v17 = v42 + 8;
            }
            int v83 = v17;
            if (v18 == v78) {
              uint64_t v31 = v18;
            }
            if (++v18 == v21) {
              break;
            }
            uint64_t v51 = (float *)((char *)v89[0] + 8 * v18);
            float v26 = *v51;
            float v52 = v51[1];
            float v53 = (float *)((char *)v88[0] + 8 * v19);
            float v54 = *v53;
            float v30 = v53[1];
            if (v30 < v52) {
              float v52 = v53[1];
            }
            if (v26 >= v54) {
              float v54 = v26;
            }
            float v29 = fmaxf(v52 - v54, 0.0);
            if (v29 == 0.0) {
              goto LABEL_62;
            }
          }
          uint64_t v18 = v31;
        }
      }
      float v55 = v80;
      if (v17 == v82)
      {
        float v58 = 0.0;
      }
      else
      {
        unint64_t v56 = 0;
        float v57 = v24 - v23;
        float v58 = 0.0;
        float v59 = v80;
        BOOL v17 = (char *)v82;
        do
        {
          float v60 = *((float *)__p + v56) / v57;
          float v61 = v60 * expf((float)((float)(*(float *)(a3 + 4 * *(void *)&v17[8 * v56]) * 10.0) / 10.0) * 0.23026);
          if (v59 >= v81)
          {
            float v62 = v79;
            uint64_t v63 = v59 - v79;
            unint64_t v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v65 = (char *)v81 - (char *)v79;
            if (((char *)v81 - (char *)v79) >> 1 > v64) {
              unint64_t v64 = v65 >> 1;
            }
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v66 = v64;
            }
            if (v66)
            {
              unint64_t v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v81, v66);
              float v62 = v79;
              float v59 = v80;
            }
            else
            {
              unint64_t v67 = 0;
            }
            uint64_t v68 = (float *)&v67[4 * v63];
            *uint64_t v68 = v61;
            float v55 = v68 + 1;
            while (v59 != v62)
            {
              int v69 = *((_DWORD *)v59-- - 1);
              *((_DWORD *)v68-- - 1) = v69;
            }
            long long v79 = v68;
            long long v81 = (float *)&v67[4 * v66];
            if (v62) {
              operator delete(v62);
            }
          }
          else
          {
            *float v59 = v61;
            float v55 = v59 + 1;
          }
          float v58 = v58 + v60;
          long long v80 = v55;
          ++v56;
          BOOL v17 = (char *)v82;
          float v59 = v55;
        }
        while (v56 < (v83 - (unsigned char *)v82) >> 3);
      }
      float v16 = v79;
      double v70 = 0.0;
      if (v79 != v55)
      {
        double v71 = v79;
        do
        {
          float v72 = *v71++;
          double v70 = v70 + v72;
        }
        while (v71 != v55);
      }
      float v73 = v70;
      float v74 = v73 / v58;
      if (v74 <= 0.0) {
        float v74 = COERCE_FLOAT(1);
      }
      uint64_t v21 = v76;
      *(float *)(a6 + 4 * v19++) = (float)((float)(logf(v74) * 4.3429) / 10.0) * 10.0;
    }
    while (v19 != v75);
    if (v79)
    {
      operator delete(v79);
      BOOL v17 = (char *)v82;
    }
    if (v17)
    {
      int v83 = v17;
      operator delete(v17);
    }
  }
  if (__p)
  {
    long long v86 = (float *)__p;
    operator delete(__p);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  if (v89[0])
  {
    v89[1] = v89[0];
    operator delete(v89[0]);
  }
}

void sub_221FDC208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PHASEEngineImpl::PHASEEngineImpl(uint64_t a1, void *a2, double a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v10 = a2;
  a6;
  objc_initWeak((id *)a1, v10);
  *(double *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = a5;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 36) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 44) = 0;
  Phase::Controller::TaskManager::TaskManager((Phase::Controller::TaskManager *)(a1 + 48));
}

void sub_221FDCF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t *a11, id **a12, id ***a13, Phase::SpatialModeler::ReverbPresetDatabase::Implementation ***a14, Phase::Controller::SpatializerManager **a15, uint64_t *a16, uint64_t a17, void *a18, Phase::ActionTreeServerCommandProcessor **a19, uint64_t *a20,Phase::Controller::VoiceManager::Implementation ***a21,uint64_t *a22,Phase::Controller::ClientTapRegistryProxy **a23,Phase::Controller::LoadBalancer **a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  __cxa_free_exception(v30);
  std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);

  uint64_t v34 = *(void *)(v29 + 488);
  *(void *)(v29 + 488) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  std::unique_ptr<Phase::TapSourceRegistry>::reset[abi:ne180100](a22, 0);
  std::unique_ptr<Phase::Controller::ClientTapRegistryProxy>::reset[abi:ne180100](a23, 0);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a10);
  uint64_t v35 = *(void *)(v29 + 424);
  *(void *)(v29 + 424) = 0;
  if (v35) {
    (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
  }
  uint64_t v36 = *(void *)(v29 + 416);
  *(void *)(v29 + 416) = 0;
  if (v36) {
    (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
  }
  uint64_t v37 = *(void *)(v29 + 408);
  *(void *)(v29 + 408) = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  std::unique_ptr<Phase::Dispatch::ClientTransactionManager>::reset[abi:ne180100](a20, 0);
  unint64_t v38 = *(void **)(v29 + 392);
  *(void *)(v29 + 392) = 0;
  if (v38) {
    std::default_delete<Phase::ActionTreeManager>::operator()[abi:ne180100](v38);
  }
  uint64_t v39 = *(void *)(v29 + 384);
  *(void *)(v29 + 384) = 0;
  if (v39) {
    (*(void (**)(uint64_t))(*(void *)v39 + 24))(v39);
  }
  uint64_t v40 = *(void *)(v29 + 376);
  *(void *)(v29 + 376) = 0;
  if (v40) {
    std::default_delete<Phase::Controller::AssetUnloader>::operator()[abi:ne180100](v40);
  }
  uint64_t v41 = *(void *)(v29 + 368);
  *(void *)(v29 + 368) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = *(void *)(v29 + 360);
  *(void *)(v29 + 360) = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 24))(v42);
  }
  std::unique_ptr<Phase::Controller::SharedEntityManager>::reset[abi:ne180100](a11, 0);
  std::unique_ptr<Phase::Controller::RoomCongruenceManager>::reset[abi:ne180100]((Phase::Controller::RoomCongruenceManager **)(v32 + 136), 0);
  std::unique_ptr<Phase::Controller::SessionManager>::reset[abi:ne180100](a12, 0);
  std::unique_ptr<Phase::ActionTreeServerCommandProcessor>::reset[abi:ne180100](a19, 0);
  std::unique_ptr<Phase::Controller::StatisticsDatabase>::reset[abi:ne180100](a13, 0);
  uint64_t v43 = *(void *)(v29 + 312);
  *(void *)(v29 + 312) = 0;
  if (v43) {
    MEMORY[0x223C938A0](v43, 0x1000C4077B8E174);
  }
  std::unique_ptr<Phase::SpatialModeler::ReverbPresetDatabase>::reset[abi:ne180100](a14, 0);
  uint64_t v44 = *(void *)(v29 + 296);
  *(void *)(v29 + 296) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 24))(v44);
  }
  std::unique_ptr<Phase::Controller::SpatializerManager>::reset[abi:ne180100](a15, 0);
  uint64_t v45 = *(void *)(v29 + 280);
  *(void *)(v29 + 280) = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 24))(v45);
  }
  std::unique_ptr<Phase::Controller::LoadBalancer>::reset[abi:ne180100](a24, 0);
  std::unique_ptr<Phase::Controller::VoiceManager>::reset[abi:ne180100](a21, 0);
  uint64_t v46 = *(void *)(v29 + 256);
  *(void *)(v29 + 256) = 0;
  if (v46) {
    MEMORY[0x223C938A0](v46, 0x1000C405A0DE52CLL);
  }
  std::unique_ptr<Phase::Controller::ProfileRegistry>::reset[abi:ne180100]((uint64_t *)(v32 + 40), 0);
  std::unique_ptr<Phase::Controller::SpatialModelerRegistry>::reset[abi:ne180100](a16, 0);
  std::unique_ptr<Phase::Controller::ProcedureRegistry>::reset[abi:ne180100]((uint64_t *)(v32 + 24), 0);
  uint64_t v47 = *(void *)(v29 + 224);
  *(void *)(v29 + 224) = 0;
  if (v47) {
    (*(void (**)(uint64_t))(*(void *)v47 + 24))(v47);
  }
  std::unique_ptr<Phase::Controller::IR::IRBuilder>::reset[abi:ne180100]((Phase::Controller::IR::IRBuilder **)(v32 + 8), 0);
  std::unique_ptr<Phase::Geometry::System>::reset[abi:ne180100]((Phase::Geometry::System **)v32, 0);
  Phase::Controller::TaskManager::~TaskManager(v31);
  objc_destroyWeak((id *)v29);

  _Unwind_Resume(a1);
}

void PHASEEngineImpl::ServerInit(PHASEEngineImpl *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  Phase::Logger::GetInstance((Phase::Logger *)this);
  if (!*((void *)this + 59)) {
    operator new();
  }
  operator new();
}

void sub_221FDEE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  __cxa_guard_abort(&qword_267F77B88);

  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(a12);
  _Unwind_Resume(a1);
}

void PHASEEngineImpl::UpdateFrame(PHASEEngineImpl *this, double a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 2);
  switch(v4)
  {
    case 2:
      uint64_t Instance = Phase::Logger::GetInstance((Phase::Logger *)this);
      __int16 v6 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(Instance + 992));
      float v30 = (Phase::Logger *)Phase::Logger::GetInstance(v6);
      if (*((unsigned char *)v30 + 1000))
      {
        uint64_t v31 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v30)
                                                                                            + 992)));
        uint64_t v32 = v31;
        if ((unint64_t)v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v31))
        {
          LODWORD(v42) = 134217984;
          *(void *)((char *)&v42 + 4) = this;
          _os_signpost_emit_with_name_impl(&dword_221E5E000, v32, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v6, "Phase_Client_Engine_Update", "impl@%p Client Engine Update Start", (uint8_t *)&v42, 0xCu);
        }
      }
      PHASEEngineImpl::UpdateFrameClient(this, a2);
      uint64_t v34 = (Phase::Logger *)Phase::Logger::GetInstance(v33);
      if (*((unsigned char *)v34 + 1000))
      {
        uint64_t v35 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v34)
                                                                                            + 992)));
        float v26 = v35;
        if ((unint64_t)v6 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v35)) {
          goto LABEL_47;
        }
        LODWORD(v42) = 134217984;
        *(void *)((char *)&v42 + 4) = this;
        float v27 = "Phase_Client_Engine_Update";
        float v28 = "impl@%p Client Engine Update Finish";
        goto LABEL_46;
      }
      break;
    case 1:
      uint64_t v19 = Phase::Logger::GetInstance((Phase::Logger *)this);
      __int16 v6 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(v19 + 992));
      uint64_t v20 = (Phase::Logger *)Phase::Logger::GetInstance(v6);
      if (*((unsigned char *)v20 + 1000))
      {
        uint64_t v21 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v20)
                                                                                            + 992)));
        uint64_t v22 = v21;
        if ((unint64_t)v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
        {
          LODWORD(v42) = 134217984;
          *(void *)((char *)&v42 + 4) = this;
          _os_signpost_emit_with_name_impl(&dword_221E5E000, v22, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v6, "Phase_Client_Engine_Update", "impl@%p Client Engine Update Start", (uint8_t *)&v42, 0xCu);
        }
      }
      PHASEEngineImpl::UpdateFrameClient(this, a2);
      float v24 = (Phase::Logger *)Phase::Logger::GetInstance(v23);
      if (*((unsigned char *)v24 + 1000))
      {
        float v25 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v24)
                                                                                            + 992)));
        float v26 = v25;
        if ((unint64_t)v6 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v25)) {
          goto LABEL_47;
        }
        LODWORD(v42) = 134217984;
        *(void *)((char *)&v42 + 4) = this;
        float v27 = "Phase_Client_Engine_Update";
        float v28 = "impl@%p Client Engine Update Finish";
        goto LABEL_46;
      }
      break;
    case 0:
      uint64_t v5 = Phase::Logger::GetInstance((Phase::Logger *)this);
      __int16 v6 = (Phase::Logger *)os_signpost_id_generate(**(os_log_t **)(v5 + 976));
      unint64_t v7 = (Phase::Logger *)Phase::Logger::GetInstance(v6);
      if (*((unsigned char *)v7 + 984))
      {
        __int16 v8 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v7)
                                                                                           + 976)));
        uint64_t v9 = v8;
        if ((unint64_t)v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
        {
          LODWORD(v42) = 134217984;
          *(void *)((char *)&v42 + 4) = this;
          _os_signpost_emit_with_name_impl(&dword_221E5E000, v9, OS_SIGNPOST_INTERVAL_BEGIN, (os_signpost_id_t)v6, "Phase_Engine_Update", "impl@%p Engine Update Start", (uint8_t *)&v42, 0xCu);
        }
      }
      uint64_t v10 = *(void *)(*((void *)this + 26) + 2400);
      *(void *)(v10 + 2736) = pthread_self();
      Phase::Controller::SpatializerManager::Update(*((Phase::Controller::SpatializerManager **)this + 36), a2);
      Phase::Commandable<128,Phase::LockFreeQueueMPSC>::ExecuteCommands(*((void *)this + 35));
      if (*((void *)this + 44))
      {
        unint64_t v11 = atomic_load((unint64_t *)this + 3);
        if (v11 == 1)
        {
          float v12 = a2;
          Phase::Controller::SharedEntityManager::Update(*((Phase::Controller::SharedEntityManager **)this + 44), v12);
        }
      }
      float v13 = a2;
      Phase::Controller::ListenerManager::Update(*((id ****)this + 45), v13);
      float v14 = a2;
      Phase::Geometry::SystemScheduler::Update((Phase::Geometry::SystemScheduler *)(*((void *)this + 26) + 2352), v14);
      if (*((void *)this + 43))
      {
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267F77B88, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_267F77B88))
        {
          _MergedGlobals_19 = _os_feature_enabled_impl();
          __cxa_guard_release(&qword_267F77B88);
        }
        if (_MergedGlobals_19) {
          Phase::Controller::RoomCongruenceManager::Update(*((Phase::Controller::RoomCongruenceManager **)this + 43));
        }
      }
      Phase::Controller::LoadBalancer::Update(*((Phase::Controller::LoadBalancer **)this + 34));
      PHASEEngineImpl::UpdateFrameClient(this, a2);
      uint64_t v15 = *((void *)this + 50);
      float v16 = (uint64_t *)*((void *)this + 41);
      uint64_t v17 = *(void *)(v15 + 480);
      v16[6] = *(void *)(v15 + 472);
      v16[7] = v17;
      v16 += 6;
      uint64_t v16[2] = 0;
      Phase::MessagePipeReader<Phase::ActionTreeServerCommand>::Execute(v16, v16 - 5);
      if (*(void *)(v15 + 472))
      {
        *(void *)(v15 + 480) = 0;
      }
      else if (*(void *)(v15 + 528))
      {
        long long v42 = 0u;
        long long v43 = 0u;
        uint64_t v18 = (Phase::Logger *)std::function<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::operator()(v15 + 504, v15 + 472, (uint64_t)&v42, 0);
        long long v36 = v43;
        *(_OWORD *)(v15 + 472) = v42;
        *(_OWORD *)(v15 + 488) = v36;
      }
      uint64_t v37 = *((void *)this + 41);
      if (*(void *)(v37 + 200))
      {
        unint64_t v38 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", *(void *)(v37 + 192));
        Phase::Dispatch::ClientTransactionManager::AddTransaction(*((id **)this + 50), 0, v38);
        Phase::MessagePipeWriter<Phase::ActionTreeClientCommand>::Clear(*((void *)this + 41) + 192);
      }
      unint64_t v39 = atomic_load((unint64_t *)this + 3);
      if (v39 == 1) {
        uint64_t v18 = (Phase::Logger *)Phase::Controller::VoiceManager::Implementation::Update(**((Phase::Controller::VoiceManager::Implementation ***)this + 33), a2);
      }
      uint64_t v40 = (Phase::Logger *)Phase::Logger::GetInstance(v18);
      if (*((unsigned char *)v40 + 984))
      {
        uint64_t v41 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v40)
                                                                                            + 976)));
        float v26 = v41;
        if ((unint64_t)v6 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v41)) {
          goto LABEL_47;
        }
        LODWORD(v42) = 134217984;
        *(void *)((char *)&v42 + 4) = this;
        float v27 = "Phase_Engine_Update";
        float v28 = "impl@%p Engine Update Finish";
LABEL_46:
        _os_signpost_emit_with_name_impl(&dword_221E5E000, v26, OS_SIGNPOST_INTERVAL_END, (os_signpost_id_t)v6, v27, v28, (uint8_t *)&v42, 0xCu);
LABEL_47:
      }
      break;
  }
}

void sub_221FDF794(_Unwind_Exception *a1)
{
}

void *Phase::Controller::TaskManager::RegisterService<Phase::Controller::ClientTapRegistryProxy>(void *result, uint64_t (*a2)(void, void, void, void, void))
{
  v5[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v3 = result[6];
  uint64_t v4 = result + 6;
  if ((unint64_t)(result[7] - v3) <= 0x200)
  {
    uint64_t result = std::vector<std::any>::resize(result + 6, 0x11uLL);
    uint64_t v3 = *v4;
  }
  if (!*(void *)(v3 + 512))
  {
    v5[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<Phase::Controller::ClientTapRegistryProxy *>::__handle[abi:ne180100];
    v5[1] = a2;
    if (v5 != (uint64_t (**)(void, void, void, void, void))(v3 + 512))
    {
      *(void *)(v3 + 520) = a2;
      *(void *)(v3 + 512) = std::__any_imp::_SmallHandler<Phase::Controller::ClientTapRegistryProxy *>::__handle[abi:ne180100];
      v5[0] = 0;
    }
    return std::any::reset[abi:ne180100](v5);
  }
  return result;
}

Phase::Geometry::System *std::unique_ptr<Phase::Geometry::System>::reset[abi:ne180100](Phase::Geometry::System **a1, Phase::Geometry::System *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Geometry::System::~System(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void Phase::SpatialModeler::ReverbPresetFile::~ReverbPresetFile(void **this)
{
  uint64_t v2 = this + 6;
  std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this + 3;
  std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void Phase::Controller::VoiceManagerInitializeParameters::~VoiceManagerInitializeParameters(Phase::Controller::VoiceManagerInitializeParameters *this)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  if (v2)
  {
    *((void *)this + 15) = v2;
    operator delete(v2);
  }
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 72);
}

void PHASEEngineImpl::~PHASEEngineImpl(PHASEEngineImpl *this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  PHASEEngineImpl::Stop(this);
  if (*((unsigned char *)this + 36))
  {
    uint64_t v2 = (Phase::Logger *)CACentralStateDumpUnregisterSubsystem();
    int v3 = (int)v2;
    if (v2)
    {
      uint64_t v4 = **(id **)(Phase::Logger::GetInstance(v2) + 432);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)float v23 = 136315906;
        *(void *)&v23[4] = "PHASEEngineImpl.mm";
        __int16 v24 = 1024;
        int v25 = 508;
        __int16 v26 = 2048;
        float v27 = this;
        __int16 v28 = 1024;
        int v29 = v3;
        _os_log_impl(&dword_221E5E000, v4, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: failed to unregister client state dump: %d", v23, 0x22u);
      }
    }
  }
  if (*((unsigned char *)this + 44))
  {
    uint64_t v5 = (Phase::Logger *)CACentralStateDumpUnregisterSubsystem();
    int v6 = (int)v5;
    if (v5)
    {
      unint64_t v7 = **(id **)(Phase::Logger::GetInstance(v5) + 432);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)float v23 = 136315906;
        *(void *)&v23[4] = "PHASEEngineImpl.mm";
        __int16 v24 = 1024;
        int v25 = 518;
        __int16 v26 = 2048;
        float v27 = this;
        __int16 v28 = 1024;
        int v29 = v6;
        _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: failed to unregister server state dump: %d", v23, 0x22u);
      }
    }
  }
  __int16 v8 = (Phase::Controller::VoiceManager::Implementation **)*((void *)this + 33);
  if (v8) {
    Phase::Controller::VoiceManager::Implementation::Destroy(*v8);
  }
  std::unique_ptr<Phase::Dispatch::ClientTransactionManager>::reset[abi:ne180100]((uint64_t *)this + 50, 0);
  std::unique_ptr<Phase::ActionTreeServerCommandProcessor>::reset[abi:ne180100]((Phase::ActionTreeServerCommandProcessor **)this + 41, 0);
  Phase::Controller::TaskManager::ClearServiceRegistry((Phase::Controller::TaskManager *)((char *)this + 48));
  Phase::Controller::TaskManager::ResetUpdateFunction((Phase::Controller::TaskManager *)((char *)this + 48));
  objc_storeWeak((id *)this, 0);
  *(void *)float v23 = (char *)this + 544;
  std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100]((void ***)v23);

  uint64_t v9 = *((void *)this + 61);
  *((void *)this + 61) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  std::unique_ptr<Phase::TapSourceRegistry>::reset[abi:ne180100]((uint64_t *)this + 60, 0);
  std::unique_ptr<Phase::Controller::ClientTapRegistryProxy>::reset[abi:ne180100]((Phase::Controller::ClientTapRegistryProxy **)this + 59, 0);
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table((uint64_t)this + 432);
  uint64_t v10 = *((void *)this + 53);
  *((void *)this + 53) = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 52);
  *((void *)this + 52) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  uint64_t v12 = *((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  std::unique_ptr<Phase::Dispatch::ClientTransactionManager>::reset[abi:ne180100]((uint64_t *)this + 50, 0);
  float v13 = (void *)*((void *)this + 49);
  *((void *)this + 49) = 0;
  if (v13) {
    std::default_delete<Phase::ActionTreeManager>::operator()[abi:ne180100](v13);
  }
  uint64_t v14 = *((void *)this + 48);
  *((void *)this + 48) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 24))(v14);
  }
  uint64_t v15 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v15) {
    std::default_delete<Phase::Controller::AssetUnloader>::operator()[abi:ne180100](v15);
  }
  uint64_t v16 = *((void *)this + 46);
  *((void *)this + 46) = 0;
  if (v16) {
    (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
  }
  uint64_t v17 = *((void *)this + 45);
  *((void *)this + 45) = 0;
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 24))(v17);
  }
  std::unique_ptr<Phase::Controller::SharedEntityManager>::reset[abi:ne180100]((uint64_t *)this + 44, 0);
  std::unique_ptr<Phase::Controller::RoomCongruenceManager>::reset[abi:ne180100]((Phase::Controller::RoomCongruenceManager **)this + 43, 0);
  std::unique_ptr<Phase::Controller::SessionManager>::reset[abi:ne180100]((id **)this + 42, 0);
  std::unique_ptr<Phase::ActionTreeServerCommandProcessor>::reset[abi:ne180100]((Phase::ActionTreeServerCommandProcessor **)this + 41, 0);
  std::unique_ptr<Phase::Controller::StatisticsDatabase>::reset[abi:ne180100]((id ***)this + 40, 0);
  uint64_t v18 = *((void *)this + 39);
  *((void *)this + 39) = 0;
  if (v18) {
    MEMORY[0x223C938A0](v18, 0x1000C4077B8E174);
  }
  std::unique_ptr<Phase::SpatialModeler::ReverbPresetDatabase>::reset[abi:ne180100]((Phase::SpatialModeler::ReverbPresetDatabase::Implementation ***)this + 38, 0);
  uint64_t v19 = *((void *)this + 37);
  *((void *)this + 37) = 0;
  if (v19) {
    (*(void (**)(uint64_t))(*(void *)v19 + 24))(v19);
  }
  std::unique_ptr<Phase::Controller::SpatializerManager>::reset[abi:ne180100]((Phase::Controller::SpatializerManager **)this + 36, 0);
  uint64_t v20 = *((void *)this + 35);
  *((void *)this + 35) = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 24))(v20);
  }
  std::unique_ptr<Phase::Controller::LoadBalancer>::reset[abi:ne180100]((Phase::Controller::LoadBalancer **)this + 34, 0);
  std::unique_ptr<Phase::Controller::VoiceManager>::reset[abi:ne180100]((Phase::Controller::VoiceManager::Implementation ***)this + 33, 0);
  uint64_t v21 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v21) {
    MEMORY[0x223C938A0](v21, 0x1000C405A0DE52CLL);
  }
  std::unique_ptr<Phase::Controller::ProfileRegistry>::reset[abi:ne180100]((uint64_t *)this + 31, 0);
  std::unique_ptr<Phase::Controller::SpatialModelerRegistry>::reset[abi:ne180100]((uint64_t *)this + 30, 0);
  std::unique_ptr<Phase::Controller::ProcedureRegistry>::reset[abi:ne180100]((uint64_t *)this + 29, 0);
  uint64_t v22 = *((void *)this + 28);
  *((void *)this + 28) = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
  }
  std::unique_ptr<Phase::Controller::IR::IRBuilder>::reset[abi:ne180100]((Phase::Controller::IR::IRBuilder **)this + 27, 0);
  std::unique_ptr<Phase::Geometry::System>::reset[abi:ne180100]((Phase::Geometry::System **)this + 26, 0);
  Phase::Controller::TaskManager::~TaskManager((std::__shared_weak_count **)this + 6);
  objc_destroyWeak((id *)this);
}

void sub_221FDFEB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void PHASEEngineImpl::Stop(PHASEEngineImpl *this)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (atomic_load((unint64_t *)this + 3))
  {
    int v3 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 432);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      uint64_t v17 = "PHASEEngineImpl.mm";
      __int16 v18 = 1024;
      int v19 = 912;
      _os_log_impl(&dword_221E5E000, v3, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PHASEEngine stopping", (uint8_t *)&v16, 0x12u);
    }
    *((unsigned char *)this + 528) = 1;
    Phase::Controller::TaskManager::StopUpdateLoop((Phase::Controller::TaskManager *)((char *)this + 48));
    uint64_t v4 = (Phase::Controller::VoiceManager::Implementation **)*((void *)this + 33);
    if (v4)
    {
      unint64_t v5 = Phase::Controller::VoiceManager::Implementation::Stop(*v4);
      if (HIDWORD(v5)) {
        BOOL v6 = 1;
      }
      else {
        BOOL v6 = v5 == 0;
      }
      if (!v6)
      {
        uint64_t v11 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v5) + 480);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          int v16 = 136315394;
          uint64_t v17 = "PHASEEngineImpl.mm";
          __int16 v18 = 1024;
          int v19 = 922;
          _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: result.IsOkay() is false.", (uint8_t *)&v16, 0x12u);
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "POSTCONDITION: result.IsOkay() is false.");
      }
      if (atomic_load(**((unsigned __int8 ***)this + 33)))
      {
        uint64_t v14 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)v5) + 480);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          int v16 = 136315394;
          uint64_t v17 = "PHASEEngineImpl.mm";
          __int16 v18 = 1024;
          int v19 = 923;
          _os_log_impl(&dword_221E5E000, v14, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: mpVoiceManager->GetState() == State::Stopped is false.", (uint8_t *)&v16, 0x12u);
        }
        uint64_t v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v15, "POSTCONDITION: mpVoiceManager->GetState() == State::Stopped is false.");
      }
    }
    __int16 v8 = (Phase::ActionTreeManager *)*((void *)this + 49);
    if (v8) {
      Phase::ActionTreeManager::Reset(v8);
    }
    uint64_t v9 = *((void *)this + 48);
    if (v9 && *(int *)(v9 + 16) >= 1)
    {
      uint64_t v10 = 0;
      do
        Phase::CommandQueue<Phase::LockFreeQueueMPSC>::Reset(*(void *)(*(void *)(v9 + 8) + 8 * v10++));
      while (v10 < *(int *)(v9 + 16));
    }
    atomic_store(0, (unint64_t *)this + 3);
    *((unsigned char *)this + 528) = 0;
  }
}

void sub_221FE0170(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<Phase::Dispatch::ClientTransactionManager>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::__function::__value_func<void ()(Phase::MessageWriteBuffer &,Phase::MessageWriteBuffer &,unsigned long)>::~__value_func[abi:ne180100]((void *)(v2 + 504));
    int v3 = *(void **)(v2 + 448);
    if (v3)
    {
      *(void *)(v2 + 456) = v3;
      operator delete(v3);
    }
    *(void *)(v2 + 352) = &unk_26D474C38;

    std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2 + 360);
    *(void *)(v2 + 264) = &unk_26D474BC0;

    std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2 + 272);
    *(void *)(v2 + 176) = &unk_26D474C10;

    std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2 + 184);
    *(void *)(v2 + 88) = &unk_26D4710F0;

    std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2 + 96);
    *(void *)uint64_t v2 = &unk_26D474BE8;

    std::__hash_table<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::__unordered_map_hasher<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::hash<Phase::ActionTreeClientCommand>,std::equal_to<Phase::ActionTreeClientCommand>,true>,std::__unordered_map_equal<Phase::ActionTreeClientCommand,std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>,std::equal_to<Phase::ActionTreeClientCommand>,std::hash<Phase::ActionTreeClientCommand>,true>,std::allocator<std::__hash_value_type<Phase::ActionTreeClientCommand,std::function<void ()(void const*)>>>>::~__hash_table(v2 + 8);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

Phase::ActionTreeServerCommandProcessor *std::unique_ptr<Phase::ActionTreeServerCommandProcessor>::reset[abi:ne180100](Phase::ActionTreeServerCommandProcessor **a1, Phase::ActionTreeServerCommandProcessor *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::ActionTreeServerCommandProcessor::~ActionTreeServerCommandProcessor(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void PHASEEngineImpl::UpdateFrameClient(PHASEEngineImpl *this, double a2)
{
  (*(void (**)(void))(**((void **)this + 46) + 552))(*((void *)this + 46));
  (*(void (**)(void))(**((void **)this + 51) + 72))(*((void *)this + 51));
  (*(void (**)(void))(**((void **)this + 52) + 96))(*((void *)this + 52));
  (*(void (**)(void))(**((void **)this + 53) + 80))(*((void *)this + 53));
  uint64_t v4 = *((void *)this + 61);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 56))(v4);
  }
  Phase::Controller::AssetUnloader::Update(*((Phase::Controller::AssetUnloader **)this + 47));
  unint64_t v5 = atomic_load((unint64_t *)this + 3);
  if (v5 == 1)
  {
    Phase::Dispatch::TransactionExecutor<Phase::Dispatch::GeometryServerMessageType>::ExecuteTransactions(*((void *)this + 50));
    Phase::Dispatch::TransactionExecutor<Phase::Dispatch::ExternalStreamServerMessageType>::ExecuteTransactions(*((void *)this + 50) + 264);
    Phase::Dispatch::TransactionExecutor<Phase::Dispatch::MiscServerMessageType>::ExecuteTransactions(*((void *)this + 50) + 176);
    Phase::Dispatch::TransactionExecutor<Phase::Dispatch::TapsServerMessageType>::ExecuteTransactions(*((void *)this + 50) + 352);
    Phase::Dispatch::TransactionExecutor<Phase::ActionTreeClientCommand>::ExecuteTransactions(*((void *)this + 50) + 88);
    if (*((void *)this + 57))
    {
      BOOL v6 = (void *)*((void *)this + 56);
      if (v6)
      {
        do
        {
          unint64_t v7 = (void *)*v6;
          operator delete(v6);
          BOOL v6 = v7;
        }
        while (v7);
      }
      *((void *)this + 56) = 0;
      uint64_t v8 = *((void *)this + 55);
      if (v8)
      {
        for (uint64_t i = 0; i != v8; ++i)
          *(void *)(*((void *)this + 54) + 8 * i) = 0;
      }
      *((void *)this + 57) = 0;
    }
    Phase::ActionTreeManager::GetActiveGroups(*((void **)this + 49), (uint64_t)this + 432);
    Phase::Controller::GroupManager::Update(*((void *)this + 37), (void *)this + 54, a2);
    Phase::GlobalMetaParameterManager::Update(*((Phase::GlobalMetaParameterManager **)this + 48), a2);
    uint64_t v10 = (Phase::Logger *)*((void *)this + 49);
    uint64_t v11 = (void *)(*((void *)this + 50) + 472);
    Phase::ActionTreeManager::UpdateActionTrees(v10, v11, a2);
  }
}

id PHASEEngineImpl::Start(PHASEEngineImpl *this, double a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  unint64_t v2 = atomic_load((unint64_t *)this + 3);
  if (v2 == 1)
  {
    id v3 = 0;
    goto LABEL_22;
  }
  uint64_t v5 = *((void *)this + 2);
  if (v5 != 3 && v5 != 0)
  {
    int v16 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 432);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      uint64_t v20 = "PHASEEngineImpl.mm";
      __int16 v21 = 1024;
      int v22 = 839;
      _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Server type error starting PHASE system\"", (uint8_t *)&v19, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Server type error starting PHASE system");
  }
  uint64_t v8 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 432);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = 136315394;
    uint64_t v20 = "PHASEEngineImpl.mm";
    __int16 v21 = 1024;
    int v22 = 813;
    _os_log_impl(&dword_221E5E000, v8, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PHASEEngine starting the voice manager", (uint8_t *)&v19, 0x12u);
  }
  uint64_t v9 = (Phase::Logger *)Phase::Controller::VoiceManager::Implementation::Start(**((Phase::Controller::VoiceManager::Implementation ***)this + 33), 5.0);
  if (v9)
  {
    id v10 = [MEMORY[0x263F087E8] errorWithDomain:@"com.apple.coreaudio.phase" code:(int)v9 userInfo:0];

    id v3 = v10;
    goto LABEL_22;
  }
  if (*((void *)this + 63) == 1)
  {
    PHASEEngineImpl::UpdateFrame(this, 0.0);
  }
  else
  {
    if (a2 <= 0.0) {
      std::terminate();
    }
    double v11 = *((double *)this + 24);
    *((double *)this + 67) = v11;
    if (*((void *)this + 22))
    {
      if (v11 != a2)
      {
        uint64_t v12 = **(id **)(Phase::Logger::GetInstance(v9) + 432);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          uint64_t v13 = *((void *)this + 67);
          int v19 = 136316162;
          uint64_t v20 = "PHASEEngineImpl.mm";
          __int16 v21 = 1024;
          int v22 = 859;
          __int16 v23 = 2048;
          __int16 v24 = this;
          __int16 v25 = 2048;
          uint64_t v26 = v13;
          __int16 v27 = 2048;
          double v28 = a2;
          _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d impl@%p: engine already running in auto update mode at %ff Hz - new framerate %ff Hz ignored", (uint8_t *)&v19, 0x30u);
        }
      }
      goto LABEL_21;
    }
    Phase::Controller::TaskManager::StartUpdateLoop((Phase::Controller::TaskManager *)((char *)this + 48), a2);
  }
  *((double *)this + 67) = a2;
LABEL_21:
  id v3 = 0;
  atomic_store(1uLL, (unint64_t *)this + 3);
LABEL_22:
  id v14 = v3;

  return v14;
}

void sub_221FE0830(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

PHASEEngineImpl *PHASEEngineImpl::Pause(PHASEEngineImpl *this)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  unint64_t v1 = atomic_load((unint64_t *)this + 3);
  if (v1 == 1)
  {
    unint64_t v2 = this;
    uint64_t v3 = *((void *)this + 2);
    if (v3 != 3 && v3 != 0)
    {
      id v10 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 432);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        id v14 = "PHASEEngineImpl.mm";
        __int16 v15 = 1024;
        int v16 = 901;
        _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"Server type error pausing PHASE system\"", (uint8_t *)&v13, 0x12u);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Server type error pausing PHASE system");
    }
    uint64_t v5 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 432);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315394;
      id v14 = "PHASEEngineImpl.mm";
      __int16 v15 = 1024;
      int v16 = 884;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_DEFAULT, "%25s:%-5d PHASEEngine pausing", (uint8_t *)&v13, 0x12u);
    }
    this = (PHASEEngineImpl *)Phase::Controller::VoiceManager::Implementation::Pause(**((Phase::Controller::VoiceManager::Implementation ***)v2
                                                                                      + 33));
    if ((unint64_t)this >> 32) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = this == 0;
    }
    if (!v6)
    {
      unint64_t v7 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 480);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        int v13 = 136315394;
        id v14 = "PHASEEngineImpl.mm";
        __int16 v15 = 1024;
        int v16 = 888;
        _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d POSTCONDITION: result.IsOkay() is false.", (uint8_t *)&v13, 0x12u);
      }
      uint64_t v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v9, "POSTCONDITION: result.IsOkay() is false.");
    }
    atomic_store(2uLL, (unint64_t *)v2 + 3);
  }
  return this;
}

void sub_221FE0AA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_impl<int,unsigned int &>(uint64_t a1, unsigned int a2, int a3)
{
  BOOL v6 = operator new(0x18uLL);
  unint64_t v7 = v6;
  *((_DWORD *)v6 + 4) = a2;
  *((_DWORD *)v6 + 5) = a3;
  unint64_t v8 = a2;
  *BOOL v6 = 0;
  v6[1] = a2;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v11 = a2;
      if (v9 <= a2) {
        unint64_t v11 = a2 % v9;
      }
    }
    else
    {
      unint64_t v11 = (v9 - 1) & a2;
    }
    uint64_t v12 = *(uint64_t ***)(*(void *)a1 + 8 * v11);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            operator delete(v6);
            return 0;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v11) {
            break;
          }
        }
      }
    }
  }
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    uint64_t v17 = 2 * v9;
    BOOL v18 = v9 < 3 || (v9 & (v9 - 1)) != 0;
    size_t v19 = v18 | v17;
    unint64_t v20 = vcvtps_u32_f32(v15 / v16);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    unint64_t v8 = v7[1];
  }
  uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v22.i16[0] = vaddlv_u8(v22);
  if (v22.u32[0] > 1uLL)
  {
    if (v8 >= v9) {
      v8 %= v9;
    }
  }
  else
  {
    v8 &= v9 - 1;
  }
  uint64_t v23 = *(void *)a1;
  __int16 v24 = *(void **)(*(void *)a1 + 8 * v8);
  if (v24)
  {
    *unint64_t v7 = *v24;
LABEL_38:
    *__int16 v24 = v7;
    goto LABEL_39;
  }
  *unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v7;
  *(void *)(v23 + 8 * v8) = a1 + 16;
  if (*v7)
  {
    unint64_t v25 = *(void *)(*v7 + 8);
    if (v22.u32[0] > 1uLL)
    {
      if (v25 >= v9) {
        v25 %= v9;
      }
    }
    else
    {
      v25 &= v9 - 1;
    }
    __int16 v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return 1;
}

void sub_221FE0CD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<Phase::SpatialModeler::ReverbPresetFile::ReflectionEntry>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 24)
  {
    uint64_t result = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (result) {
      uint64_t result = MEMORY[0x223C93870](result, 0x1000C8052888210);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

Phase::Controller::IR::IRBuilder *std::unique_ptr<Phase::Controller::IR::IRBuilder>::reset[abi:ne180100](Phase::Controller::IR::IRBuilder **a1, Phase::Controller::IR::IRBuilder *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::IR::IRBuilder::~IRBuilder(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t std::unique_ptr<Phase::Controller::ProcedureRegistry>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>>>::~__hash_table(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t std::unique_ptr<Phase::Controller::SpatialModelerRegistry>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::SpatialModelerInfo>>>::~__hash_table(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t std::unique_ptr<Phase::Controller::ProfileRegistry>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::~__hash_table(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Profile>>>::__deallocate_node(uint64_t a1, void **a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void **)*v2;
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table((uint64_t)(v2 + 11));
      if (!*((unsigned char *)v2 + 56)) {
        free(v2[6]);
      }
      v2[5] = 0;
      v2[6] = &str_33;
      *((unsigned char *)v2 + 56) = 1;
      if (!*((unsigned char *)v2 + 32)) {
        free(v2[3]);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Category>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<Phase::StringId const,Phase::Controller::ProfileRegistry::Category>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<Phase::StringId const,Phase::Controller::ProfileRegistry::Category>,0>(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 64)) {
    free(*(void **)(a1 + 56));
  }
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = &str_33;
  *(unsigned char *)(a1 + 64) = 1;
  if (!*(unsigned char *)(a1 + 40)) {
    free(*(void **)(a1 + 32));
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &str_33;
  *(unsigned char *)(a1 + 40) = 1;
  if (!*(unsigned char *)(a1 + 16)) {
    free(*(void **)(a1 + 8));
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = &str_33;
  *(unsigned char *)(a1 + 16) = 1;
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Graph>>>::__deallocate_node(uint64_t a1, void **a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void **)*v2;
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::~__hash_table((uint64_t)(v2 + 8));
      if (!*((unsigned char *)v2 + 56)) {
        free(v2[6]);
      }
      v2[5] = 0;
      v2[6] = &str_33;
      *((unsigned char *)v2 + 56) = 1;
      if (!*((unsigned char *)v2 + 32)) {
        free(v2[3]);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Stage>>>::__deallocate_node(uint64_t a1, void **a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void **)*v2;
      std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::~__hash_table((uint64_t)(v2 + 8));
      if (!*((unsigned char *)v2 + 56)) {
        free(v2[6]);
      }
      v2[5] = 0;
      v2[6] = &str_33;
      *((unsigned char *)v2 + 56) = 1;
      if (!*((unsigned char *)v2 + 32)) {
        free(v2[3]);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::__unordered_map_hasher<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::hash<Phase::StringId>,std::equal_to<Phase::StringId>,true>,std::__unordered_map_equal<Phase::StringId,std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>,std::equal_to<Phase::StringId>,std::hash<Phase::StringId>,true>,std::allocator<std::__hash_value_type<Phase::StringId,Phase::Controller::ProfileRegistry::Parameter>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<Phase::StringId const,Phase::Controller::ProfileRegistry::Parameter>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<Phase::StringId const,Phase::Controller::ProfileRegistry::Parameter>,0>(uint64_t a1)
{
  unint64_t v2 = (void **)(a1 + 48);
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (!*(unsigned char *)(a1 + 40)) {
    free(*(void **)(a1 + 32));
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &str_33;
  *(unsigned char *)(a1 + 40) = 1;
  if (!*(unsigned char *)(a1 + 16)) {
    free(*(void **)(a1 + 8));
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = &str_33;
  *(unsigned char *)(a1 + 16) = 1;
}

Phase::Controller::VoiceManager::Implementation ***std::unique_ptr<Phase::Controller::VoiceManager>::reset[abi:ne180100](Phase::Controller::VoiceManager::Implementation ***result, Phase::Controller::VoiceManager::Implementation **a2)
{
  unint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::Controller::VoiceManager::Implementation>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

Phase::Controller::LoadBalancer *std::unique_ptr<Phase::Controller::LoadBalancer>::reset[abi:ne180100](Phase::Controller::LoadBalancer **a1, Phase::Controller::LoadBalancer *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::LoadBalancer::~LoadBalancer(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

Phase::Controller::SpatializerManager *std::unique_ptr<Phase::Controller::SpatializerManager>::reset[abi:ne180100](Phase::Controller::SpatializerManager **a1, Phase::Controller::SpatializerManager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SpatializerManager::~SpatializerManager(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

Phase::SpatialModeler::ReverbPresetDatabase::Implementation ***std::unique_ptr<Phase::SpatialModeler::ReverbPresetDatabase>::reset[abi:ne180100](Phase::SpatialModeler::ReverbPresetDatabase::Implementation ***result, Phase::SpatialModeler::ReverbPresetDatabase::Implementation **a2)
{
  unint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::SpatialModeler::ReverbPresetDatabase::Implementation>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

id ***std::unique_ptr<Phase::Controller::StatisticsDatabase>::reset[abi:ne180100](id ***result, id **a2)
{
  unint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = *v2;
    void *v2 = 0;
    if (v3) {
      std::default_delete<Phase::Controller::StatisticsDatabase::Implementation>::operator()[abi:ne180100]((uint64_t)v2, v3);
    }
    JUMPOUT(0x223C938A0);
  }
  return result;
}

id *std::unique_ptr<Phase::Controller::SessionManager>::reset[abi:ne180100](id **a1, id *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::SessionManager::~SessionManager(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

Phase::Controller::RoomCongruenceManager *std::unique_ptr<Phase::Controller::RoomCongruenceManager>::reset[abi:ne180100](Phase::Controller::RoomCongruenceManager **a1, Phase::Controller::RoomCongruenceManager *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::RoomCongruenceManager::~RoomCongruenceManager(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::Controller::SharedEntityManager>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::unique_ptr<Phase::Controller::HeadTracker>::reset[abi:ne180100]((CFTypeRef ***)(v2 + 152), 0);
    uint64_t v3 = *(void **)(v2 + 136);
    *(void *)(v2 + 136) = 0;

    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2 + 88);
    std::__hash_table<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::__unordered_map_hasher<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,true>,std::__unordered_map_equal<Phase::Controller::IR::IRBuilder::Processor,std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>,std::equal_to<Phase::Controller::IR::IRBuilder::Processor>,std::hash<Phase::Controller::IR::IRBuilder::Processor>,true>,std::allocator<std::__hash_value_type<Phase::Controller::IR::IRBuilder::Processor,std::unordered_map<Phase::Controller::IR::IRBuilder::Method,Phase::Controller::IR::IRBuilderBase *>>>>::~__hash_table(v2 + 40);
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::~__hash_table(v2);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

CFTypeRef **std::unique_ptr<Phase::Controller::HeadTracker>::reset[abi:ne180100](CFTypeRef ***a1, CFTypeRef **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::HeadTracker::~HeadTracker(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void std::default_delete<Phase::Controller::AssetUnloader>::operator()[abi:ne180100](uint64_t a1)
{
  objc_destroyWeak((id *)(a1 + 104));
  std::__list_imp<Phase::Controller::AssetUnloader::ObjectUnloadRequest>::clear((void *)(a1 + 64));
  std::__list_imp<Phase::Controller::AssetUnloader::UnloadRequest>::clear((void *)(a1 + 40));
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable((void *)a1);

  JUMPOUT(0x223C938A0);
}

void std::default_delete<Phase::ActionTreeManager>::operator()[abi:ne180100](void *a1)
{
  caulk::concurrent::guarded_lookup_hash_table<Phase::UniqueObjectId,Phase::Controller::StreamRenderer *,(caulk::concurrent::guarded_lookup_hash_table_options)2,std::function<unsigned int ()(Phase::UniqueObjectId)>>::~guarded_lookup_hash_table((uint64_t)(a1 + 10));
  std::__hash_table<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::__unordered_map_hasher<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::hash<Phase::UniqueObjectId>,std::equal_to<Phase::UniqueObjectId>,true>,std::__unordered_map_equal<Phase::UniqueObjectId,std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>,std::equal_to<Phase::UniqueObjectId>,std::hash<Phase::UniqueObjectId>,true>,std::allocator<std::__hash_value_type<Phase::UniqueObjectId,std::shared_ptr<Phase::ActionTreeObject>>>>::~__hash_table((uint64_t)(a1 + 5));
  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(a1);

  JUMPOUT(0x223C938A0);
}

Phase::Controller::ClientTapRegistryProxy *std::unique_ptr<Phase::Controller::ClientTapRegistryProxy>::reset[abi:ne180100](Phase::Controller::ClientTapRegistryProxy **a1, Phase::Controller::ClientTapRegistryProxy *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    Phase::Controller::ClientTapRegistryProxy::~ClientTapRegistryProxy(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t *std::unique_ptr<Phase::TapSourceRegistry>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,PHASETapStreamType>,std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,PHASETapStreamType>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*(void **)(v2 + 168));
    std::__tree<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,std::string>,std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,std::string>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*(char **)(v2 + 144));
    std::__tree<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,PHASETapStreamType>,std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,PHASETapStreamType>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*(void **)(v2 + 120));
    std::__tree<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,PHASETapStreamType>,std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,PHASETapStreamType>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*(void **)(v2 + 96));
    std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::~__hash_table(v2 + 48);
    std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::~__hash_table(v2 + 8);
    objc_destroyWeak((id *)v2);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

void std::__tree<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,PHASETapStreamType>,std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,PHASETapStreamType>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,PHASETapStreamType>,std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,PHASETapStreamType>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,PHASETapStreamType>,std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,PHASETapStreamType>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,PHASETapStreamType>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(a1[1]);
    uint64_t v2 = (id *)a1[6];
    a1[6] = 0;
    if (v2) {
      std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)(a1 + 6), v2);
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,std::string>,std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,std::string>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,std::string>,std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,std::string>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__map_value_compare<std::pair<PHASETapType,std::string>,std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::less<std::pair<PHASETapType,std::string>>,true>,std::allocator<std::__value_type<std::pair<PHASETapType,std::string>,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (id *)*((void *)a1 + 8);
    *((void *)a1 + 8) = 0;
    if (v2) {
      std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)(a1 + 64), v2);
    }
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::__unordered_map_hasher<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::hash<PHASETapType>,std::equal_to<PHASETapType>,true>,std::__unordered_map_equal<PHASETapType,std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>,std::equal_to<PHASETapType>,std::hash<PHASETapType>,true>,std::allocator<std::__hash_value_type<PHASETapType,std::unique_ptr<Phase::TapSourceRegistry::TapSourceInfo>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (id *)v2[3];
      v2[3] = 0;
      if (v4) {
        std::default_delete<Phase::TapSourceRegistry::TapSourceInfo>::operator()[abi:ne180100]((uint64_t)(v2 + 3), v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void std::__function::__func<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>>,void ()(double)>::~__func()
{
}

__n128 std::__function::__func<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>>,void ()(double)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D478E20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>>,void ()(double)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D478E20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (PHASEEngineImpl::*)(double),PHASEEngineImpl*,std::placeholders::__ph<1> const&>>,void ()(double)>::operator()(void *a1, double *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, double))a1[1];
  uint64_t v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, double))(*v4 + v3);
  }
  return v3(v4, *a2);
}

void *std::__function::__value_func<void ()(double)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__any_imp::_SmallHandler<PHASEAssetRegistry * {__strong}>::__handle[abi:ne180100](unsigned int a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      id v9 = *(id *)(a2 + 8);
      uint64_t result = 0;
      *a3 = std::__any_imp::_SmallHandler<PHASEAssetRegistry * {__strong}>::__handle[abi:ne180100];
      a3[1] = v9;
      break;
    case 2:
      uint64_t v11 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *a3 = std::__any_imp::_SmallHandler<PHASEAssetRegistry * {__strong}>::__handle[abi:ne180100];
      a3[1] = v11;
      goto LABEL_10;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<PHASEAssetRegistry * {__strong}>::__id && a4 == 0) {
        uint64_t result = a2 + 8;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
LABEL_10:

      uint64_t result = 0;
      *(void *)a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::ClientTapRegistryProxy *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::ClientTapRegistryProxy *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::ClientTapRegistryProxy *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::ClientTapRegistryProxy *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::TapSourceRegistry *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::TapSourceRegistry *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::TapSourceRegistry *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::TapSourceRegistry *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void Phase::GlobalMetaParameterManager::~GlobalMetaParameterManager(id *this)
{
  *this = &unk_26D478E68;
  std::__hash_table<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>>>::~__hash_table((uint64_t)(this + 6));

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);
}

{
  uint64_t vars8;

  *this = &unk_26D478E68;
  std::__hash_table<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>>>::~__hash_table((uint64_t)(this + 6));

  Phase::Commandable<128,Phase::LockFreeQueueMPSC>::~Commandable(this);

  JUMPOUT(0x223C938A0);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,PHASEGlobalMetaParameterAsset * {__weak}>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (id *)*v2;
      objc_destroyWeak(v2 + 3);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__any_imp::_SmallHandler<Phase::GlobalMetaParameterManager *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::GlobalMetaParameterManager *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::GlobalMetaParameterManager *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::GlobalMetaParameterManager *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::GroupManager *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::GroupManager *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::GroupManager *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::GroupManager *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::ActionTreeManager *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::ActionTreeManager *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::ActionTreeManager *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::ActionTreeManager *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::AssetUnloader *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::AssetUnloader *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::AssetUnloader *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::AssetUnloader *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::VoicePoolRegistry *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::VoicePoolRegistry *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::VoicePoolRegistry *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::VoicePoolRegistry *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::ProcedureRegistry *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::ProcedureRegistry *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::ProcedureRegistry *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::ProcedureRegistry *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Geometry::System *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Geometry::System *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Geometry::System *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Geometry::System *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::SharedEntityManager *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::SharedEntityManager *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::SharedEntityManager *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::SharedEntityManager *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::ListenerManager *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::ListenerManager *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::ListenerManager *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::ListenerManager *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::SpatialModelerRegistry *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::SpatialModelerRegistry *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::SpatialModelerRegistry *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::SpatialModelerRegistry *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::SpatializerManager *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::SpatializerManager *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::SpatializerManager *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::SpatializerManager *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::DeviceManager *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::DeviceManager *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::DeviceManager *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::DeviceManager *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::IR::IRBuilder *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::IR::IRBuilder *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::IR::IRBuilder *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::IR::IRBuilder *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::StatisticsDatabase *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::StatisticsDatabase *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::StatisticsDatabase *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::StatisticsDatabase *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::CalibrationManager *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::CalibrationManager *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::CalibrationManager *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::CalibrationManager *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::SessionManager *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::SessionManager *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::SessionManager *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::SessionManager *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::RoomCongruenceManager *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::RoomCongruenceManager *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::RoomCongruenceManager *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::RoomCongruenceManager *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

void *std::__any_imp::_SmallHandler<Phase::Controller::VoiceManager *>::__handle[abi:ne180100](unsigned int a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      uint64_t v7 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::VoiceManager *>::__handle[abi:ne180100];
      a3[1] = v7;
      break;
    case 2:
      uint64_t result = 0;
      uint64_t v8 = a2[1];
      *a3 = std::__any_imp::_SmallHandler<Phase::Controller::VoiceManager *>::__handle[abi:ne180100];
      a3[1] = v8;
      goto LABEL_5;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<Phase::Controller::VoiceManager *>::__id && a4 == 0) {
        uint64_t result = a2 + 1;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t std::__any_imp::_SmallHandler<ExternalStreamManager * {__strong}>::__handle[abi:ne180100](unsigned int a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = 0;
  switch(v5)
  {
    case 1:
      id v9 = *(id *)(a2 + 8);
      uint64_t result = 0;
      *a3 = std::__any_imp::_SmallHandler<ExternalStreamManager * {__strong}>::__handle[abi:ne180100];
      a3[1] = v9;
      break;
    case 2:
      uint64_t v11 = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *a3 = std::__any_imp::_SmallHandler<ExternalStreamManager * {__strong}>::__handle[abi:ne180100];
      a3[1] = v11;
      goto LABEL_10;
    case 3:
      if (a5 == &std::__any_imp::__unique_typeinfo<ExternalStreamManager * {__strong}>::__id && a4 == 0) {
        uint64_t result = a2 + 8;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
LABEL_10:

      uint64_t result = 0;
      *(void *)a2 = 0;
      break;
  }
  return result;
}

__CFString *GetCalibrationModeString(PHASECalibrationMode a1)
{
  unint64_t v1 = @"none";
  if (a1 == PHASECalibrationModeRelativeSpl) {
    unint64_t v1 = @"relative_spl";
  }
  if (a1 == PHASECalibrationModeAbsoluteSpl) {
    return @"absolute_spl";
  }
  else {
    return v1;
  }
}

__CFString *GetCullOptionString(PHASECullOption a1)
{
  if ((unint64_t)(a1 - 1) > 3) {
    return @"terminate";
  }
  else {
    return off_2645F7790[a1 - 1];
  }
}

uint64_t GetCullOption(NSString *a1)
{
  unint64_t v1 = a1;
  if ([(NSString *)v1 isEqualToString:@"terminate"])
  {
    uint64_t v2 = 0;
  }
  else if ([(NSString *)v1 isEqualToString:@"sleep_wake_at_zero"])
  {
    uint64_t v2 = 1;
  }
  else if ([(NSString *)v1 isEqualToString:@"sleep_wake_at_random_offset"])
  {
    uint64_t v2 = 2;
  }
  else if ([(NSString *)v1 isEqualToString:@"sleep_wake_at_realtime_offset"])
  {
    uint64_t v2 = 3;
  }
  else if ([(NSString *)v1 isEqualToString:@"do_not_cull"])
  {
    uint64_t v2 = 4;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_221FE2AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *GetPlaybackModeString(PHASEPlaybackMode a1)
{
  if (a1 == PHASEPlaybackModeLooping) {
    return @"looping";
  }
  else {
    return @"one_shot";
  }
}

uint64_t GetPlaybackMode(NSString *a1)
{
  unint64_t v1 = a1;
  if ([(NSString *)v1 isEqualToString:@"one_shot"]) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = [(NSString *)v1 isEqualToString:@"looping"];
  }

  return v2;
}

void sub_221FE2B64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *GetVoiceStealingTypeString(uint64_t a1)
{
  unint64_t v1 = @"none";
  if (a1 == 1) {
    unint64_t v1 = @"oldest";
  }
  if (a1 == 2) {
    return @"quietest";
  }
  else {
    return v1;
  }
}

uint64_t GetVoiceStealingType(NSString *a1)
{
  unint64_t v1 = a1;
  if ([(NSString *)v1 isEqualToString:@"none"])
  {
    uint64_t v2 = 0;
  }
  else if ([(NSString *)v1 isEqualToString:@"oldest"])
  {
    uint64_t v2 = 1;
  }
  else if ([(NSString *)v1 isEqualToString:@"quietest"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_221FE2C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *GetCurveTypeString(PHASECurveType a1)
{
  uint64_t result = @"linear";
  if (a1 > 1668434002)
  {
    if (a1 <= 1668434258)
    {
      if (a1 > 1668434246)
      {
        if (a1 == PHASECurveTypeInverseSigmoid)
        {
          return @"inversesigmoid";
        }
        else if (a1 == PHASECurveTypeInverseSquared)
        {
          return @"inversesquared";
        }
      }
      else if (a1 == PHASECurveTypeHoldStartValue)
      {
        return @"holdstartvalue";
      }
      else if (a1 == PHASECurveTypeInverseCubed)
      {
        return @"inversecubed";
      }
    }
    else if (a1 <= 1668436838)
    {
      if (a1 == PHASECurveTypeInverseSine)
      {
        return @"inversesine";
      }
      else if (a1 == PHASECurveTypeJumpToEndValue)
      {
        return @"jumptoendvalue";
      }
    }
    else
    {
      switch(a1)
      {
        case PHASECurveTypeSigmoid:
          return @"sigmoid";
        case PHASECurveTypeSine:
          return @"sine";
        case PHASECurveTypeSquared:
          return @"squared";
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 1:
        return @"squared";
      case 2:
        return @"inversesquared";
      case 3:
        goto LABEL_25;
      case 4:
        return @"inversecubed";
      case 5:
        return @"inversesine";
      case 6:
        return @"sine";
      case 7:
        return @"sigmoid";
      case 8:
        return @"inversesigmoid";
      default:
        if (a1 == PHASECurveTypeCubed) {
LABEL_25:
        }
          uint64_t result = @"cubed";
        break;
    }
  }
  return result;
}

uint64_t GetCurveType(NSString *a1)
{
  unint64_t v1 = a1;
  uint64_t v2 = 1668435054;
  if (![(NSString *)v1 isEqualToString:@"linear"])
  {
    if ([(NSString *)v1 isEqualToString:@"squared"])
    {
      uint64_t v2 = 1668436849;
    }
    else if ([(NSString *)v1 isEqualToString:@"inversesquared"])
    {
      uint64_t v2 = 1668434257;
    }
    else if ([(NSString *)v1 isEqualToString:@"cubed"])
    {
      uint64_t v2 = 1668432757;
    }
    else if ([(NSString *)v1 isEqualToString:@"inversecubed"])
    {
      uint64_t v2 = 1668434243;
    }
    else if ([(NSString *)v1 isEqualToString:@"inversesine"])
    {
      uint64_t v2 = 1668434259;
    }
    else if ([(NSString *)v1 isEqualToString:@"sine"])
    {
      uint64_t v2 = 1668436846;
    }
    else if ([(NSString *)v1 isEqualToString:@"sigmoid"])
    {
      uint64_t v2 = 1668436839;
    }
    else if ([(NSString *)v1 isEqualToString:@"inversesigmoid"])
    {
      uint64_t v2 = 1668434247;
    }
    else if ([(NSString *)v1 isEqualToString:@"holdstartvalue"])
    {
      uint64_t v2 = 1668434003;
    }
    else if ([(NSString *)v1 isEqualToString:@"jumptoendvalue"])
    {
      uint64_t v2 = 1668434501;
    }
  }

  return v2;
}

void sub_221FE2F38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GetMixerType(NSString *a1)
{
  unint64_t v1 = a1;
  if ([(NSString *)v1 isEqualToString:@"spatial"])
  {
    uint64_t v2 = 1;
  }
  else if ([(NSString *)v1 isEqualToString:@"channel"])
  {
    uint64_t v2 = 3;
  }
  else if ([(NSString *)v1 isEqualToString:@"ambient"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_221FE2FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GetDistanceModelType(NSString *a1)
{
  unint64_t v1 = a1;
  if ([(NSString *)v1 isEqualToString:@"none"])
  {
    uint64_t v2 = 0;
  }
  else if ([(NSString *)v1 isEqualToString:@"geometric_spreading"])
  {
    uint64_t v2 = 1;
  }
  else if ([(NSString *)v1 isEqualToString:@"envelope"])
  {
    uint64_t v2 = 2;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_221FE3050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GetDirectivityModelType(NSString *a1)
{
  unint64_t v1 = a1;
  if ([(NSString *)v1 isEqualToString:@"none"])
  {
    uint64_t v2 = 0;
  }
  else if ([(NSString *)v1 isEqualToString:@"cardioid"])
  {
    uint64_t v2 = 1;
  }
  else if ([(NSString *)v1 isEqualToString:@"cone"])
  {
    uint64_t v2 = 2;
  }
  else if ([(NSString *)v1 isEqualToString:@"sphericalcap"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_221FE30F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id GetChannelLayoutString(Phase::ChannelLayout *a1)
{
  Phase::ChannelLayout::GetStringFromLayoutTag(a1, __p);
  unint64_t v1 = NSString;
  int v2 = v9;
  uint64_t v3 = (void **)__p[0];
  uint64_t v4 = [NSString defaultCStringEncoding];
  if (v2 >= 0) {
    uint64_t v5 = __p;
  }
  else {
    uint64_t v5 = v3;
  }
  BOOL v6 = [v1 stringWithCString:v5 encoding:v4];
  if (v9 < 0) {
    operator delete(__p[0]);
  }

  return v6;
}

void sub_221FE3198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t GetProcedureType(NSString *a1)
{
  unint64_t v1 = a1;
  uint64_t v2 = ![(NSString *)v1 isEqualToString:@"none"]
    && [(NSString *)v1 isEqualToString:@"water"];

  return v2;
}

void sub_221FE320C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t GetSpatialCategory(NSString *a1)
{
  unint64_t v1 = a1;
  if ([(NSString *)v1 isEqualToString:@"direct_path_transmission"])
  {
    uint64_t v2 = 1;
  }
  else if ([(NSString *)v1 isEqualToString:@"early_reflections"])
  {
    uint64_t v2 = 2;
  }
  else if ([(NSString *)v1 isEqualToString:@"late_reverb"])
  {
    uint64_t v2 = 3;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_221FE3298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *GetSpatialCategoryString(int a1)
{
  if ((a1 - 1) > 2) {
    return @"Invalid";
  }
  else {
    return off_2645F77B0[a1 - 1];
  }
}

__CFString *GetSpatialCategoryStringFromSpatialCategoryKey(NSString *a1)
{
  unint64_t v1 = a1;
  if ([(NSString *)v1 isEqualToString:@"PHASEDirectPathTransmission"])
  {
    uint64_t v2 = @"direct_path_transmission";
  }
  else if ([(NSString *)v1 isEqualToString:@"PHASEEarlyReflections"])
  {
    uint64_t v2 = @"early_reflections";
  }
  else if ([(NSString *)v1 isEqualToString:@"PHASELateReverb"])
  {
    uint64_t v2 = @"late_reverb";
  }
  else
  {
    uint64_t v2 = @"Invalid";
  }

  return v2;
}

void sub_221FE336C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFString *GetTapTypeString(uint64_t a1)
{
  unint64_t v1 = @"Invalid";
  if (a1 == 1) {
    unint64_t v1 = @"PHASETapTypePreSpatial_PreSessionVolume";
  }
  if (a1) {
    return v1;
  }
  else {
    return @"PHASETapTypePreSpatial";
  }
}

void sub_221FE354C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE382C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void **a24)
{
  a24 = (void **)&a12;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100](&a24);

  _Unwind_Resume(a1);
}

double Phase::Envelope<double>::Range(uint64_t *a1)
{
  uint64_t v2 = std::__minmax_element_impl[abi:ne180100]<std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__identity,Phase::Envelope<double>::Range(void)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1}>(*a1, a1[1]);
  double result = *(double *)(std::__minmax_element_impl[abi:ne180100]<std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__identity,Phase::Envelope<double>::Range(void)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#2}>(*a1, a1[1])+ 24);
  if (result >= *(double *)(v2 + 8)) {
    return *(double *)(v2 + 8);
  }
  return result;
}

uint64_t std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__push_back_slow_path<Phase::Envelope<double>::Segment const&>(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint8x8_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>>(v7, v9);
  }
  else {
    uint8x8_t v10 = 0;
  }
  uint64_t v11 = &v10[48 * v4];
  v14[0] = v10;
  v14[1] = v11;
  float v15 = v11;
  float v16 = &v10[48 * v9];
  *(void *)uint64_t v11 = *a2;
  *((void *)v11 + 1) = a2[1];
  std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)(v11 + 16), (uint64_t)(a2 + 2));
  v15 += 48;
  std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_221FE3B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>,std::reverse_iterator<Phase::Envelope<double>::Segment*>,std::reverse_iterator<Phase::Envelope<double>::Segment*>,std::reverse_iterator<Phase::Envelope<double>::Segment*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>,std::reverse_iterator<Phase::Envelope<double>::Segment*>,std::reverse_iterator<Phase::Envelope<double>::Segment*>,std::reverse_iterator<Phase::Envelope<double>::Segment*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 64; ; i -= 48)
  {
    uint64_t v12 = a3 + i;
    if (a3 + i - 64 == a5) {
      break;
    }
    uint64_t v13 = a7 + i;
    *(void *)(v13 - 112) = *(void *)(a3 + i - 112);
    *(void *)(v13 - 104) = *(void *)(a3 + i - 104);
    uint64_t v14 = a7 + i - 96;
    std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](v14, v12 - 96);
  }
  return a6;
}

uint64_t std::__split_buffer<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ***std::unique_ptr<Phase::Envelope<double>>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (void ***)MEMORY[0x223C938A0](v2, 0x20C40960023A9);
  }
  return result;
}

uint64_t std::__minmax_element_impl[abi:ne180100]<std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__identity,Phase::Envelope<double>::Range(void)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#1}>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (result != a2 && result + 64 != a2)
  {
    if (*(double *)(result + 72) >= *(double *)(result + 8))
    {
      uint64_t v4 = result + 64;
    }
    else
    {
      result += 64;
      uint64_t v4 = v2;
    }
    uint64_t v5 = v2 + 128;
    while (v5 != a2)
    {
      uint64_t v6 = v5;
      uint64_t v7 = v5 + 64;
      if (v7 == a2)
      {
        if (*(double *)(v6 + 8) < *(double *)(result + 8)) {
          return v6;
        }
        return result;
      }
      uint64_t v8 = v2 + 192;
      double v9 = *(double *)(v6 + 72);
      double v10 = *(double *)(v6 + 8);
      double v11 = *(double *)(result + 8);
      double v12 = *(double *)(v4 + 8);
      if (v10 >= v11) {
        uint64_t v13 = result;
      }
      else {
        uint64_t v13 = v6;
      }
      if (v9 < v12) {
        uint64_t v8 = v4;
      }
      if (v9 >= v11) {
        uint64_t v7 = result;
      }
      if (v10 >= v12) {
        uint64_t v14 = v6;
      }
      else {
        uint64_t v14 = v4;
      }
      if (v9 < v10) {
        uint64_t result = v7;
      }
      else {
        uint64_t result = v13;
      }
      if (v9 < v10) {
        uint64_t v4 = v14;
      }
      else {
        uint64_t v4 = v8;
      }
      uint64_t v5 = v6 + 128;
      uint64_t v2 = v6;
    }
  }
  return result;
}

uint64_t std::__minmax_element_impl[abi:ne180100]<std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__wrap_iter<Phase::Envelope<double>::SegmentInternal const*>,std::__identity,Phase::Envelope<double>::Range(void)::{lambda(Phase::Envelope<double>::SegmentInternal const&,Phase::Envelope<double>::SegmentInternal const&)#2}>(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (result != a2 && result + 64 != a2)
  {
    if (*(double *)(result + 88) >= *(double *)(result + 24))
    {
      uint64_t v4 = result + 64;
    }
    else
    {
      result += 64;
      uint64_t v4 = v2;
    }
    uint64_t v5 = v2 + 128;
    while (v5 != a2)
    {
      uint64_t v6 = v5;
      uint64_t v7 = v5 + 64;
      if (v7 == a2)
      {
        if (*(double *)(v6 + 24) < *(double *)(result + 24)) {
          return v6;
        }
        return result;
      }
      uint64_t v8 = v2 + 192;
      double v9 = *(double *)(v6 + 88);
      double v10 = *(double *)(v6 + 24);
      double v11 = *(double *)(result + 24);
      double v12 = *(double *)(v4 + 24);
      if (v10 >= v11) {
        uint64_t v13 = result;
      }
      else {
        uint64_t v13 = v6;
      }
      if (v9 < v12) {
        uint64_t v8 = v4;
      }
      if (v9 >= v11) {
        uint64_t v7 = result;
      }
      if (v10 >= v12) {
        uint64_t v14 = v6;
      }
      else {
        uint64_t v14 = v4;
      }
      if (v9 < v10) {
        uint64_t result = v7;
      }
      else {
        uint64_t result = v13;
      }
      if (v9 < v10) {
        uint64_t v4 = v14;
      }
      else {
        uint64_t v4 = v8;
      }
      uint64_t v5 = v6 + 128;
      uint64_t v2 = v6;
    }
  }
  return result;
}

void sub_221FE3EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE402C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE40F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE41F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE4358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE4410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE4530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE4598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  double v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PHASEExternalStream;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_221FE4734(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_221FE481C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_221FE4924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE49D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_221FE4AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE4CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_221FE4E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE4F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sDefaultAudioSessionToken(void)
{
  if (gInProcessServer) {
    BOOL v0 = 1;
  }
  else {
    BOOL v0 = ihdYoUjk3kGK <= 0;
  }
  if (!v0) {
    return 0;
  }
  unint64_t v1 = [MEMORY[0x263EF93E0] sharedInstance];
  uint64_t v2 = [v1 opaqueSessionID];

  return v2;
}

void sub_221FE4FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE5198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE52BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE53A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE54B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE55A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FE5D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location,id a27)
{
  _Unwind_Resume(a1);
}

void sub_221FE6150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE6264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE6320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE6450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE653C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FE663C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE6D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_221FE715C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  __int16 v24 = v23;

  _Unwind_Resume(a1);
}

void sub_221FE7430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  double v28 = v17;

  _Unwind_Resume(a1);
}

void sub_221FE7544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FE7630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FE76C8(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_221FE7764(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);

  _Unwind_Resume(a1);
}

void sub_221FE798C(_Unwind_Exception *a1)
{
  objc_sync_exit(v2);
  _Unwind_Resume(a1);
}

void sub_221FE804C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  objc_sync_exit(v15);
  _Unwind_Resume(a1);
}

void sub_221FE8334(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_221FE8620(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_221FE8930(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_221FE8B50(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_221FE8BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  double v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PHASEExternalOutputStreamController;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_221FE8DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE8E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE8F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE8FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE90CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE91BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FE9958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id location,id a27)
{
  _Unwind_Resume(a1);
}

void sub_221FE9D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FE9F68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEA28C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  _Unwind_Resume(a1);
}

void sub_221FEA3A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FEA454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FEA5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEA664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FEA748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEA89C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEA940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FEAA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEAC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEACC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FEAE60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void sub_221FEB168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEB28C(_Unwind_Exception *exception_object)
{
}

void sub_221FEB3F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEB540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned long,Phase::Vector<unsigned short,3ul> *)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_221FEB798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEBA0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEBB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEBC04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEBE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned int,void const*)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::UniqueObjectId>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    float v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    float v16 = &v14[16 * a2];
    BOOL v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void sub_221FEC20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FEC494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FEC4E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEC5B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEC638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEC94C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FEC84CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FECC2C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FECB24);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FECF90(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FECE98);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FED320(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FED228);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FED6B0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FED5B8);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FEDA40(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FED948);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FEDD20(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FEDC28);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FEDFD0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FEDEDCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FEE284(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FEE18CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FEE534(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FEE440);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FEE9B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEEBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEEC70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEED5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEEFE0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FEEEDCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FEF2E0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FEF1D8);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FEF5E4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FEF4E4);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FEF8EC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FEF7E8);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FEFB5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEFCCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEFE2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FEFEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FEFFC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF0200(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_221FF0300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FF03A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF04F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF0550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF09E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_221FF0F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_221FF106C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sGetFrequencies(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t result = std::vector<float>::__assign_with_size[abi:ne180100]<float const*,float const*>((char *)a1, Phase::sThirdOctaveBandFrequencies, (uint64_t)&qword_2220E7580, 0x1FuLL);
  if (*(void *)a1 == *(void *)(a1 + 8)) {
    std::terminate();
  }
  return result;
}

void sub_221FF10F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FF115C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF14D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_221FF1910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_221FF1A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FF1AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF1DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_221FF2218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_221FF2370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FF23F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF36B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_221FF3C6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF3EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_221FF4AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_221FF5138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_221FF5604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF56FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)PHASEMaterial;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_221FF5804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF5A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF5F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_221FF61E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_221FF6300(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FF66D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

double Phase::Geometry::WeatherUtility<double>::SetTemperatureInCelsius(uint64_t a1, double a2)
{
  double result = Phase::Controller::sClamp<double>((Phase::Logger *)a1, a2 + 273.15, *(double *)a1, *(double *)(a1 + 8));
  if (result == *(double *)(a1 + 24))
  {
    if (!*(unsigned char *)(a1 + 32)) {
      return result;
    }
  }
  else
  {
    *(double *)(a1 + 24) = result;
    *(unsigned char *)(a1 + 32) = 1;
  }

  return Phase::Geometry::WeatherUtility<double>::InitInternal(a1);
}

double Phase::Geometry::WeatherUtility<double>::SetRelativeHumidityPercentage(uint64_t a1, double a2)
{
  double result = Phase::Controller::sClamp<double>((Phase::Logger *)a1, a2, *(double *)(a1 + 40), *(double *)(a1 + 48));
  if (result == *(double *)(a1 + 64))
  {
    if (!*(unsigned char *)(a1 + 72)) {
      return result;
    }
  }
  else
  {
    *(double *)(a1 + 64) = result;
    *(unsigned char *)(a1 + 72) = 1;
  }

  return Phase::Geometry::WeatherUtility<double>::InitInternal(a1);
}

long double Phase::Geometry::WeatherUtility<double>::AtmosphericAbsorptionInDecibelsPerMeter(double *a1, double a2)
{
  double v3 = a1[3];
  double v4 = a2 * a2;
  double v5 = 101.325 / (a1[13] / 1000.0) * 1.84e-11;
  double v6 = fabs(sqrt(v3 / 293.16));
  if (v3 / 293.16 == -INFINITY) {
    double v7 = INFINITY;
  }
  else {
    double v7 = v6;
  }
  double v8 = pow(v3 / 293.16, -2.5);
  long double v9 = exp(-2239.1 / v3) * 0.01278 / (a1[15] + v4 / a1[15]);
  return v4 * (v8 * (v9 + exp(-3352.0 / v3) * 0.1068 / (a1[16] + v4 / a1[16])) + v5 * v7) * 8.68588964 / 4.34294482;
}

void sub_221FF6DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

float PHASEGetPropertyBounded<float>(void *a1, void *a2, float a3, float a4, float a5)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  id v9 = a1;
  uint64_t v10 = a2;
  uint64_t v11 = v10;
  if (a3 < a4 || a3 > a5)
  {
    uint64_t v13 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v10)
                                                                                        + 432)));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      int v15 = 136316674;
      float v16 = "PHASEGetProperty.h";
      __int16 v17 = 1024;
      int v18 = 28;
      __int16 v19 = 2080;
      uint64_t v20 = [v9 UTF8String];
      __int16 v21 = 2080;
      uint64_t v22 = [(Phase::Logger *)v11 UTF8String];
      __int16 v23 = 2048;
      double v24 = a3;
      __int16 v25 = 2048;
      double v26 = a4;
      __int16 v27 = 2048;
      double v28 = a5;
      _os_log_impl(&dword_221E5E000, v13, OS_LOG_TYPE_DEBUG, "%25s:%-5d %s:%s Value is out of bounds. Clamping %f to range [%f, %f]", (uint8_t *)&v15, 0x44u);
    }

    a3 = fminf(fmaxf(a3, a4), a5);
  }

  return a3;
}

void sub_221FF704C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double Phase::Geometry::WaterUtility<double>::SetTemperatureInCelsius(uint64_t a1, double a2)
{
  double result = Phase::Controller::sClamp<double>((Phase::Logger *)a1, a2, *(double *)a1, *(double *)(a1 + 8));
  if (result == *(double *)(a1 + 24))
  {
    if (!*(unsigned char *)(a1 + 32)) {
      return result;
    }
  }
  else
  {
    *(double *)(a1 + 24) = result;
    *(unsigned char *)(a1 + 32) = 1;
  }

  return Phase::Geometry::WaterUtility<double>::InitInternal(a1);
}

double Phase::Geometry::WaterUtility<double>::SetDepthInMeters(uint64_t a1, double a2)
{
  double result = Phase::Controller::sClamp<double>((Phase::Logger *)a1, a2, *(double *)(a1 + 40), *(double *)(a1 + 48));
  if (result == *(double *)(a1 + 64))
  {
    if (!*(unsigned char *)(a1 + 72)) {
      return result;
    }
  }
  else
  {
    *(double *)(a1 + 64) = result;
    *(unsigned char *)(a1 + 72) = 1;
  }

  return Phase::Geometry::WaterUtility<double>::InitInternal(a1);
}

long double Phase::Geometry::WaterUtility<double>::WaterAbsorptionInDecibelsPerMeter(double *a1, double a2)
{
  double v3 = a2 / 1000.0;
  double v4 = a1[8] / 1000.0;
  double v5 = v3 * v3;
  double v6 = v3 * (v3 * a1[20]) / (v3 * v3 + a1[20] * a1[20]) * 0.106;
  long double v7 = v6 * exp((a1[18] + -8.0) / 0.56);
  double v8 = a1[3];
  double v9 = a1[13] / 35.0 * ((v8 / 43.0 + 1.0) * 0.52) * (v3 * (v3 * a1[21]) / (v3 * v3 + a1[21] * a1[21]));
  long double v10 = exp(v4 / -6.0) * v9;
  return (v5 * 0.00049 * exp(-(v4 / 17.0 + v8 / 27.0)) + v7 + v10) / 1000.0;
}

void sub_221FF7424(_Unwind_Exception *a1)
{
  double v5 = v4;

  _Unwind_Resume(a1);
}

void sub_221FF751C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF75F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)PHASEMedium;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_221FF76C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Geometry::WeatherUtility<double>::WeatherUtility(uint64_t a1)
{
  *(_OWORD *)a1 = xmmword_2220E77E0;
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x4072526666666666uLL);
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_2220E77F0;
  *(void *)(a1 + 64) = 0x4049000000000000;
  *(unsigned char *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = xmmword_2220E7800;
  *(int64x2_t *)(a1 + 96) = vdupq_n_s64(0x40F8BCD000000000uLL);
  *(unsigned char *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = 0;
  double v3 = Phase::Controller::sClamp<double>((Phase::Logger *)a1, 50.0, 0.0, 100.0);
  if (v3 != *(double *)(a1 + 64))
  {
    *(double *)(a1 + 64) = v3;
    *(unsigned char *)(a1 + 72) = 1;
  }
  double v4 = Phase::Controller::sClamp<double>(v2, 101325.0, *(double *)(a1 + 80), *(double *)(a1 + 88));
  if (v4 != *(double *)(a1 + 104))
  {
    *(double *)(a1 + 104) = v4;
    *(unsigned char *)(a1 + 112) = 1;
  }
  Phase::Geometry::WeatherUtility<double>::InitInternal(a1);
  return a1;
}

long double Phase::Geometry::WeatherUtility<double>::InitInternal(uint64_t a1)
{
  double v2 = *(double *)(a1 + 24);
  double v3 = *(double *)(a1 + 64);
  double v4 = *(double *)(a1 + 104);
  double v5 = v4 / 1000.0 / 101.325;
  double v6 = 1.0 - 273.16 / v2;
  long double v7 = log10(v2 / 273.16) * -5.02808 + v6 * 10.79586;
  long double v8 = v7 + (1.0 - __exp10((v2 / 273.16 + -1.0) * -8.29692)) * 0.000150474;
  double v9 = __exp10(v6 * -4.76955);
  double v10 = v3 * __exp10(v8 + (v9 + -1.0) * 0.00042873 + -2.2195983) / v5;
  *(double *)(a1 + 120) = v5 * (v10 * 40400.0 * ((v10 + 0.02) / (v10 + 0.391)) + 24.0);
  long double v11 = pow(v2 / 293.16, -0.5) * v5;
  long double v12 = pow(v2 / 293.16, -0.3333333);
  *(long double *)(a1 + 128) = v11 * (v10 * 280.0 * exp((v12 + -1.0) * -4.17) + 9.0);
  double v13 = v2 + -273.15;
  long double v15 = -6343.1645 / v2 + 33.9371105;
  double v16 = exp(v2 * -0.019121316 + v2 * v2 * 1.2378847 * 0.00000999999975);
  long double v17 = v3 * (v4 * 0.0000000314 + 1.00062 + v13 * v13 * 5.6 * 0.0000001) * (exp(v15) * v16) / v4 / 100.0;
  double v14 = v13 * v13;
  long double result = (v13 * -0.228525 + -85.20931 + v14 * 5.91 / 100000.0) * 0.0004
         + (v13 * 0.0000000373 + -0.000000182 + v14 * -2.93 / 1.0e10) * v4
         + v13 * 0.603055
         + 331.5024
         + v14 * -5.28 / 10000.0
         + (v13 * 0.1495874 + 51.471935 + v14 * -7.82 / 10000.0) * v17
         - (v4 * v4 * 2.15 / 1.0e13
          + v17 * v17 * 2.835149
          + -0.00000466876192
          + v4 * (v17 * -0.000486) * 0.0004);
  *(long double *)(a1 + 136) = result;
  return result;
}

uint64_t Phase::Geometry::WaterUtility<double>::WaterUtility(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_2220E7810;
  *(void *)(a1 + 24) = 0x4034000000000000;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = xmmword_2220E7820;
  *(void *)(a1 + 64) = 0x4024000000000000;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_2220E7830;
  *(void *)(a1 + 104) = 0x4041800000000000;
  *(unsigned char *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_2220E7840;
  __asm { FMOV            V0.2D, #8.0 }
  *(_OWORD *)(a1 + 136) = _Q0;
  *(unsigned char *)(a1 + 152) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  double v8 = Phase::Controller::sClamp<double>((Phase::Logger *)a1, 10.0, 0.0, 10000.0);
  if (v8 != *(double *)(a1 + 64))
  {
    *(double *)(a1 + 64) = v8;
    *(unsigned char *)(a1 + 72) = 1;
  }
  double v10 = Phase::Controller::sClamp<double>(v7, 35.0, *(double *)(a1 + 80), *(double *)(a1 + 88));
  if (v10 != *(double *)(a1 + 104))
  {
    *(double *)(a1 + 104) = v10;
    *(unsigned char *)(a1 + 112) = 1;
  }
  double v11 = Phase::Controller::sClamp<double>(v9, 8.0, *(double *)(a1 + 120), *(double *)(a1 + 128));
  if (v11 != *(double *)(a1 + 144))
  {
    *(double *)(a1 + 144) = v11;
    *(unsigned char *)(a1 + 152) = 1;
  }
  Phase::Geometry::WaterUtility<double>::InitInternal(a1);
  return a1;
}

long double Phase::Geometry::WaterUtility<double>::InitInternal(uint64_t a1)
{
  double v2 = *(double *)(a1 + 104);
  double v3 = *(double *)(a1 + 24);
  *(long double *)(a1 + 160) = sqrt(v2 / 35.0) * 0.78 * exp(v3 / 26.0);
  long double result = exp(v3 / 17.0) * 42.0;
  double v5 = *(double *)(a1 + 64) / 1000.0;
  *(long double *)(a1 + 168) = result;
  *(double *)(a1 + 176) = v3 / 10.0 * 45.7
                        + 1449.05
                        + v3 / 10.0 * -5.21 * (v3 / 10.0)
                        + v3 / 10.0 * (v3 / 10.0 * 0.23) * (v3 / 10.0)
                        + (v2 + -35.0) * (v3 / 10.0 * -0.126 + 1.333 + v3 / 10.0 * 0.009 * (v3 / 10.0))
                        + (v3 / 10.0 * 0.352 + 16.23) * v5
                        + (v3 / 10.0 * -0.1 + 0.213) * v5 * v5
                        + v3 / 10.0 * ((v2 + -35.0) * ((v2 + -35.0) * 0.0002 + 0.016)) * v5;
  return result;
}

void sub_221FF7E58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF7EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF7F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF7FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF8084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF816C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF8394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF840C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF84B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF8554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF85B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF85F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF8634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF8674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF8718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF87FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF88B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF8980(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF8B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_221FF8CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF8D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF8E00(_Unwind_Exception *a1)
{
  double v5 = v4;

  _Unwind_Resume(a1);
}

void sub_221FF8ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  double v11 = v10;

  _Unwind_Resume(a1);
}

void sub_221FF8F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF8FB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF9070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF90BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF91F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FF9290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF9954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

void sub_221FF9B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FF9F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFA08C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFA13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FFA1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FFA374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFA42C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFA4F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFA650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFA6CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFA788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFA9FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFAA8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFAB60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFAC58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFADC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFAFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFB03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFB1B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFB528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, uint64_t a16, __int16 a17, int a18, __int16 a19, uint64_t a20)
{
  if (a2)
  {
    __cxa_free_exception(v21);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v20);
    __cxa_end_catch();
    double v24 = **(id **)(Phase::Logger::GetInstance(v23) + 432);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      JUMPOUT(0x221FFB300);
    }
    JUMPOUT(0x221FFB438);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FFB7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFB894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FFB960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FFBA6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFC1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_221FFC49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFC760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)PHASEObject;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_221FFC8F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFCA90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFCE68(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x221FFCD6CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_221FFCF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFDE60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFE2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFE44C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFE510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFF2FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFF484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFF54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_221FFF63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFF6E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float Phase::Determinant<float>(float *a1)
{
  float v1 = a1[4];
  float v2 = a1[5];
  float v3 = a1[8];
  float v4 = a1[9];
  float v6 = a1[12];
  float v5 = a1[13];
  float v7 = a1[10];
  float v8 = a1[14];
  float v9 = a1[6];
  float v10 = a1[1];
  float v11 = a1[2];
  return (float)((float)((float)(a1[7]
                               * (float)((float)((float)((float)((float)((float)(v6 * (float)(v7 * v10))
                                                                       + (float)((float)(v4 * *a1) * v8))
                                                               + (float)((float)(v3 * v11) * v5))
                                                       + (float)((float)-(float)(v11 * v4) * v6))
                                               + (float)((float)-(float)(v10 * v3) * v8))
                                       + (float)((float)-(float)(*a1 * v7) * v5)))
                       - (float)(a1[3]
                               * (float)((float)((float)((float)((float)((float)((float)(v2 * v7) * v6)
                                                                       + (float)((float)(v1 * v4) * v8))
                                                               + (float)((float)(v9 * v3) * v5))
                                                       + (float)((float)-(float)(v9 * v4) * v6))
                                               + (float)((float)-(float)(v2 * v3) * v8))
                                       + (float)((float)-(float)(v1 * v7) * v5))))
               - (float)(a1[11]
                       * (float)((float)((float)((float)((float)((float)(v6 * (float)(v9 * v10))
                                                               + (float)((float)(v2 * *a1) * v8))
                                                       + (float)((float)(v1 * v11) * v5))
                                               + (float)((float)-(float)(v11 * v2) * v6))
                                       + (float)((float)-(float)(v10 * v1) * v8))
                               + (float)((float)-(float)(*a1 * v9) * v5))))
       + (float)(a1[15]
               * (float)((float)((float)((float)((float)((float)(v3 * (float)(v9 * v10))
                                                       + (float)((float)(v2 * *a1) * v7))
                                               + (float)((float)(v1 * v11) * v4))
                                       + (float)((float)-(float)(v11 * v2) * v3))
                               + (float)((float)-(float)(v10 * v1) * v7))
                       + (float)((float)-(float)(*a1 * v9) * v4)));
}

void sub_221FFF96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFFAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFFB78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_221FFFD78(_Unwind_Exception *a1)
{
  float v5 = v4;

  _Unwind_Resume(a1);
}

void sub_221FFFF9C(_Unwind_Exception *exception_object)
{
}

void sub_2220001C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2220002F8(_Unwind_Exception *exception_object)
{
}

void sub_222000424(_Unwind_Exception *exception_object)
{
}

void sub_222000550(_Unwind_Exception *exception_object)
{
}

void sub_22200067C(_Unwind_Exception *exception_object)
{
}

void sub_2220007C4(_Unwind_Exception *exception_object)
{
}

void sub_2220008F0(_Unwind_Exception *exception_object)
{
}

void sub_222000A2C(_Unwind_Exception *exception_object)
{
}

void sub_222000C2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_222000D80(_Unwind_Exception *exception_object)
{
}

void sub_222000EAC(_Unwind_Exception *exception_object)
{
}

void sub_222000FE8(_Unwind_Exception *exception_object)
{
}

void sub_2220011E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_222001834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222001958(_Unwind_Exception *exception_object)
{
}

void sub_222001A84(_Unwind_Exception *exception_object)
{
}

void sub_222001BB0(_Unwind_Exception *exception_object)
{
}

void sub_222001DA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_222001F90(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_222002274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220023BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_222002510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222002670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_2220027C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222002924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_222002A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222002BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_222002D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222002E8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_222002FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222003154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::RoomSimulationDebugger::RoomSimulationDebugView *)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_22200324C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22200330C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220033B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222003464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222003510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220035C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222003670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200371C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220037C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222003874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222003B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222003D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222003F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2220041B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2220043E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222004674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2220046B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222004718(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220047EC(_Unwind_Exception *a1)
{
  float v3 = v2;

  _Unwind_Resume(a1);
}

void sub_222004920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222004A18(_Unwind_Exception *exception_object)
{
}

void sub_222004B00(_Unwind_Exception *exception_object)
{
}

void sub_222004CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222004F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222004FDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200512C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222005258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200538C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222005598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220056A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222005714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220057D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222005848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2220058D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222005CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  v12[8] = v13;

  _Unwind_Resume(a1);
}

void sub_222005ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222006060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222006374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_2220064E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222006A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  _Unwind_Resume(a1);
}

void sub_222006BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222006CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222006E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)PHASEShape;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_2220074F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220078AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222007C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<Phase::Controller::GeometryPermutation>::__destroy_vector::operator()[abi:ne180100](&a14);

  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::LocalizedGeometryPermutation>,Phase::LocalizedGeometryPermutation*,Phase::LocalizedGeometryPermutation*,Phase::LocalizedGeometryPermutation*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = a1 + v6;
      *(_DWORD *)(a3 + v6) = *(_DWORD *)(a1 + v6);
      std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(a3 + v6 + 8, a1 + v6 + 8);
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      float v9 = (void *)(a3 + v6 + 48);
      uint64_t v9[2] = 0;
      std::vector<Phase::Geometry::EntityType>::__init_with_size[abi:ne180100]<Phase::Geometry::EntityType*,Phase::Geometry::EntityType*>(v9, *(const void **)(v8 + 48), *(void *)(v8 + 56), (uint64_t)(*(void *)(v8 + 56) - *(void *)(v8 + 48)) >> 2);
      *(_OWORD *)(a3 + v6 + 72) = *(_OWORD *)(a1 + v6 + 72);
      v6 += 88;
    }
    while (v8 + 88 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_222007E38(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v1 + v2 + 8);
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      std::allocator<Phase::LocalizedGeometryPermutation>::destroy[abi:ne180100](v4 + v2);
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(a1);
}

uint64_t std::allocator<Phase::LocalizedGeometryPermutation>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

  return std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(a1 + 8);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<Phase::LocalizedGeometryPermutation *,Phase::LocalizedGeometryPermutation *,Phase::LocalizedGeometryPermutation *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = a3;
    do
    {
      uint64_t v6 = a1 + v4;
      uint64_t v7 = v3 + v4;
      *(_DWORD *)(v3 + v4) = *(_DWORD *)(a1 + v4);
      if (v3 != a1)
      {
        *(_DWORD *)(v7 + 40) = *(_DWORD *)(v6 + 40);
        std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,void *> *>>((void *)(v7 + 8), *(uint64_t **)(v6 + 24), 0);
        uint64_t v8 = *(char **)(v7 + 48);
        float v10 = *(char **)(v6 + 48);
        float v9 = *(unsigned char **)(v6 + 56);
        uint64_t v11 = v9 - v10;
        unint64_t v12 = (v9 - v10) >> 2;
        uint64_t v13 = *(void *)(v7 + 64);
        if (v12 <= (v13 - (uint64_t)v8) >> 2)
        {
          __int16 v21 = (void **)(v5 + 56);
          long double v17 = *(unsigned char **)(a3 + v4 + 56);
          unint64_t v18 = (v17 - v8) >> 2;
          if (v18 >= v12)
          {
            if (v9 != v10) {
              memmove(v8, v10, v9 - v10);
            }
            uint64_t v3 = a3;
          }
          else
          {
            if (v17 != v8)
            {
              memmove(v8, v10, v17 - v8);
              uint64_t v8 = *(char **)(a3 + v4 + 56);
            }
            uint64_t v3 = a3;
            __int16 v19 = &v10[4 * v18];
            uint64_t v11 = v9 - v19;
            if (v9 != v19) {
              memmove(v8, v19, v9 - v19);
            }
          }
          double v16 = v21;
        }
        else
        {
          if (v8)
          {
            *(void *)(a3 + v4 + 56) = v8;
            operator delete(v8);
            uint64_t v13 = 0;
            *(void *)(v7 + 48) = 0;
            *(void *)(v7 + 56) = 0;
            *(void *)(v7 + 64) = 0;
          }
          if (v11 < 0) {
            std::vector<Phase::Controller::GeometryPermutation>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v13 >> 1;
          if (v13 >> 1 <= v12) {
            uint64_t v14 = (v9 - v10) >> 2;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          std::vector<Phase::Geometry::EntityType>::__vallocate[abi:ne180100]((void *)(v7 + 48), v15);
          uint64_t v3 = a3;
          double v16 = (void **)(a3 + v4 + 56);
          uint64_t v8 = (char *)*v16;
          if (v9 != v10) {
            memmove(*(void **)(a3 + v4 + 56), v10, v9 - v10);
          }
        }
        const char *v16 = &v8[v11];
      }
      *(_OWORD *)(v7 + 72) = *(_OWORD *)(v6 + 72);
      v4 += 88;
      uint64_t v5 = v7 + 88;
    }
    while (v6 + 88 != a2);
    v3 += v4;
  }
  return v3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::LocalizedGeometryPermutation>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a1);
}

__n128 std::allocator<Phase::LocalizedGeometryPermutation>::construct[abi:ne180100]<Phase::LocalizedGeometryPermutation,Phase::LocalizedGeometryPermutation const&>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  std::unordered_map<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,std::allocator<std::pair<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey const,Phase::OptionsValue>>>::unordered_map(a1 + 8, a2 + 8);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  std::vector<Phase::Geometry::EntityType>::__init_with_size[abi:ne180100]<Phase::Geometry::EntityType*,Phase::Geometry::EntityType*>((void *)(a1 + 48), *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  return result;
}

void sub_22200814C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,std::__unordered_map_hasher<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,true>,std::__unordered_map_equal<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalEqualTo,Phase::UnorderedStringMap<Phase::OptionsValue>::InternalHash,true>,std::allocator<std::__hash_value_type<Phase::UnorderedStringMap<Phase::OptionsValue>::InternalKey,Phase::OptionsValue>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Phase::LocalizedGeometryPermutation>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    std::allocator<Phase::LocalizedGeometryPermutation>::destroy[abi:ne180100](i - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_222008238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220082D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222008460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220085AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200862C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220086C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222008860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222008908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222008A4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222008BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222008C8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222008D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222008D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222008E34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222008EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222008FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)PHASESharedListener;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_22200941C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222009634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222009790(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222009900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222009940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222009A78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222009C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222009CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)PHASESharedRoot;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_222009E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200ADB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::bad_alloc a32,uint64_t a33,uint64_t a34,uint8_t buf,int a36,int a37,__int16 a38,__int16 a39,__int16 a40,__int16 a41)
{
  if (a2)
  {
    __cxa_free_exception(v42);
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(a11);
    __cxa_end_catch();
    if (!v41) {
      JUMPOUT(0x22200A924);
    }
    JUMPOUT(0x22200A914);
  }
  _Unwind_Resume(exception_object);
}

void sub_22200B2DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200B4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_22200B608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200B6C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200B7AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200B884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200B940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200BA28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200BAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200BB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200BC30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200BCD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200BDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_22200C0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200C560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200C77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_22200C9E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200CC84(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, __int16 a14, __int16 a15)
{
  if (a2)
  {
    __cxa_free_exception(v16);
    __cxa_begin_catch(a1);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v15);
    __cxa_end_catch();
    __int16 v19 = **(id **)(Phase::Logger::GetInstance(v18) + 432);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "PHASESoundEvent.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 692;
      a15 = 2112;
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d %@ Command buffer full.  Unable to pause PHASESoundEvent.  Consider having fewer sound event API calls in a given frame", (uint8_t *)&buf, 0x1Cu);
    }
    JUMPOUT(0x22200CBA0);
  }
  _Unwind_Resume(a1);
}

void sub_22200CFC8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, __int16 a14, __int16 a15)
{
  if (a2)
  {
    __cxa_free_exception(v16);
    __cxa_begin_catch(a1);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v15);
    __cxa_end_catch();
    __int16 v19 = **(id **)(Phase::Logger::GetInstance(v18) + 432);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "PHASESoundEvent.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 715;
      a15 = 2112;
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d %@ Command buffer full.  Unable to resume PHASESoundEvent.  Consider having fewer sound event API calls in a given frame", (uint8_t *)&buf, 0x1Cu);
    }
    JUMPOUT(0x22200CEE4);
  }
  _Unwind_Resume(a1);
}

void sub_22200D3E8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long buf, __int16 a14, __int16 a15)
{
  if (a2)
  {
    __cxa_free_exception(v16);
    __cxa_begin_catch(a1);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v15);
    __cxa_end_catch();
    __int16 v19 = **(id **)(Phase::Logger::GetInstance(v18) + 432);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "PHASESoundEvent.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 749;
      a15 = 2112;
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d %@ Command buffer full.  Unable to stop PHASESoundEvent.  Consider having fewer sound event API calls in a given frame", (uint8_t *)&buf, 0x1Cu);
    }
    JUMPOUT(0x22200D300);
  }
  _Unwind_Resume(a1);
}

void sub_22200D680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::TapSourceRegistry>(Phase::Logger *a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if ((unint64_t)(a2 - (void)a1) <= 0x220)
  {
    uint64_t v5 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      unint64_t v12 = "TaskManager.hpp";
      __int16 v13 = 1024;
      int v14 = 112;
      _os_log_impl(&dword_221E5E000, v5, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  uint64_t v2 = (uint64_t (*)(uint64_t, char *, void, void, void *))*((void *)a1 + 68);
  if (!v2)
  {
    uint64_t v7 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(a1)
                                                                                       + 448)));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      uint64_t v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      unint64_t v12 = "TaskManager.hpp";
      __int16 v13 = 1024;
      int v14 = 121;
      __int16 v15 = 1024;
      int v16 = 17;
      __int16 v17 = 2080;
      unint64_t v18 = v8;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    float v9 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v9, "No service registered for Id %i, in call \n%s");
  }
  uint64_t v3 = v2(3, (char *)a1 + 544, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::TapSourceRegistry *>::__id);
  if (!v3) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return *(void *)v3;
}

void sub_22200D8EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_22200D9FC(_Unwind_Exception *a1)
{
}

void sub_22200DA1C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22200DB80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22200DD64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200DF9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200E3BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200E948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_22200EFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
  {
    __cxa_free_exception(v31);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v30);
    __cxa_end_catch();
    long long v36 = **(id **)(Phase::Logger::GetInstance(v35) + 432);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v33 - 128) = 136315650;
      *(void *)(v32 + 4) = "PHASESoundEvent.mm";
      *(_WORD *)(v33 - 116) = 1024;
      *(_DWORD *)(v32 + 14) = 1090;
      *(_WORD *)(v33 - 110) = 2112;
      *(void *)(v32 + 20) = v29;
      _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d %@ Command buffer full.  Unable to Prepare PHASESoundEvent.  Consider having fewer sound event API calls in a given frame", (uint8_t *)(v33 - 128), 0x1Cu);
    }
    (*(void (**)(uint64_t, void, uint64_t))(v28 + 16))(v28, 0, 1);
    JUMPOUT(0x22200ECB4);
  }
  _Unwind_Resume(exception_object);
}

void *__Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  __n128 result = _Block_copy(*(const void **)(a2 + 40));
  *(void *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_22200F700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2)
  {
    __cxa_free_exception(v31);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v30);
    __cxa_end_catch();
    long long v36 = **(id **)(Phase::Logger::GetInstance(v35) + 432);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v33 - 128) = 136315650;
      *(void *)(v32 + 4) = "PHASESoundEvent.mm";
      *(_WORD *)(v33 - 116) = 1024;
      *(_DWORD *)(v32 + 14) = 1141;
      *(_WORD *)(v33 - 110) = 2112;
      *(void *)(v32 + 20) = v29;
      _os_log_impl(&dword_221E5E000, v36, OS_LOG_TYPE_ERROR, "%25s:%-5d %@ Command buffer full.  Unable to Start PHASESoundEvent.  Consider having fewer sound event API calls in a given frame", (uint8_t *)(v33 - 128), 0x1Cu);
    }
    (*(void (**)(uint64_t, void))(v28 + 16))(v28, 0);
    JUMPOUT(0x22200F40CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_22200F998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22200FC08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220111D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_2220118BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_222011C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_222011E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_2220123EC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, __int16 a12, __int16 a13)
{
  if (a2)
  {
    __cxa_free_exception(v16);
    __cxa_begin_catch(a1);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v15);
    __cxa_end_catch();

    uint64_t v19 = **(id **)(Phase::Logger::GetInstance(v18) + 432);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315650;
      *(void *)((char *)&buf + 4) = "PHASESoundEvent.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1675;
      a13 = 2112;
      _os_log_impl(&dword_221E5E000, v19, OS_LOG_TYPE_ERROR, "%25s:%-5d %@ Command buffer full.  Unable to Seek.  Consider having fewer sound event API calls in a given frame", (uint8_t *)&buf, 0x1Cu);
    }
    (*(void (**)(uint64_t, void))(v13 + 16))(v13, 0);
    JUMPOUT(0x222012130);
  }
  _Unwind_Resume(a1);
}

void sub_22201285C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

void sub_222012A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222012A7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222012B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,std::shared_ptr<Phase::ActionTreeObject>>(int,BOOL (Phase::ActionTreeManager::*)(std::shared_ptr<Phase::ActionTreeObject>),std::shared_ptr<Phase::ActionTreeObject>)::{lambda(void)#1},void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D479398;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,std::shared_ptr<Phase::ActionTreeObject>>(int,BOOL (Phase::ActionTreeManager::*)(std::shared_ptr<Phase::ActionTreeObject>),std::shared_ptr<Phase::ActionTreeObject>)::{lambda(void)#1},void>::~LambdaFunction(void *a1)
{
  *a1 = &unk_26D479398;
  uint64_t v1 = (std::__shared_weak_count *)a1[5];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223C938A0);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,std::shared_ptr<Phase::ActionTreeObject>>(int,BOOL (Phase::ActionTreeManager::*)(std::shared_ptr<Phase::ActionTreeObject>),std::shared_ptr<Phase::ActionTreeObject>)::{lambda(void)#1},void>::operator()(void *a1)
{
  uint64_t v2 = (void (*)(void *, uint64_t *))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(void (**)(void *, uint64_t *))(*v4 + v2);
  }
  uint64_t v6 = a1[4];
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v2(v4, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_222012CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, double a7)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*(int *)(a1 + 16) <= 0)
  {
    unint64_t v18 = **(id **)(a1 + 24);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      double v26 = "Commandable.hpp";
      __int16 v27 = 1024;
      int v28 = 132;
      _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pQueueId >= 0 && pQueueId < mQueueCount is false.");
  }
  uint64_t v14 = **(void **)(a1 + 8);
  unint64_t v24 = 0;
  BOOL v23 = 1;
  uint64_t v15 = Phase::LockFreeQueueMPSC::GetWriteBuffer((atomic_uchar *)v14, 80, &v24, &v23);
  if (!v15)
  {
    uint64_t Instance = (Phase::Logger *)Phase::Logger::GetInstance(0);
    Phase::Logger::DumpTailspinWithThrottleAsync(Instance, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
    __int16 v21 = **(id **)(v14 + 48);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      double v26 = "CommandQueue.hpp";
      __int16 v27 = 1024;
      int v28 = 100;
      _os_log_impl(&dword_221E5E000, v21, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [true is true]: \"CommandQueue unable to retrieve write buffer; buffer "
        "is full, unable to grow.\"",
        buf,
        0x12u);
    }
    uint64_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v22, "CommandQueue unable to retrieve write buffer; buffer is full, unable to grow.");
  }
  if (v23)
  {
    int v16 = **(id **)(v14 + 48);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      double v26 = "CommandQueue.hpp";
      __int16 v27 = 1024;
      int v28 = 89;
      __int16 v29 = 2048;
      unint64_t v30 = v24;
      __int16 v31 = 2048;
      uint64_t v32 = 80;
      _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_DEBUG, "%25s:%-5d Warning: CommandQueue grew buffer to %zu bytes to accommodate extra %zu bytes - this usually means the system is under load or the command queue is too small.", buf, 0x26u);
    }
  }
  *(void *)uint64_t v15 = &unk_26D479438;
  *(void *)(v15 + 8) = a1;
  *(void *)(v15 + 16) = Phase::ActionTreeManager::SetMetaParameter;
  *(void *)(v15 + 24) = 0;
  *(void *)(v15 + 32) = a2;
  *(void *)(v15 + 40) = a3;
  *(void *)(v15 + 48) = a4;
  *(_DWORD *)(v15 + 56) = a5;
  *(void *)(v15 + 64) = a6;
  *(double *)(v15 + 72) = a7;
  Phase::LockFreeQueueSPSC::CommitBytes((atomic_uchar *)v14, 80);
  atomic_store(0, (unsigned __int8 *)(v14 + 40));
  return 1;
}

void sub_222013098(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x222012F00);
  }
  _Unwind_Resume(exception_object);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double),Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double)::{lambda(void)#1},void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double),Phase::UniqueObjectId,unsigned long long,Phase::InputMetaParamType,Phase::MetaParamValue,double)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void *, void, void, void, void, void, double))(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = (void *)(*(void *)(a1 + 8) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(uint64_t (**)(void *, void, void, void, void, void, double))(*v3 + v1);
  }
  return v1(v3, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), *(void *)(a1 + 64), *(double *)(a1 + 72));
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,unsigned long long,BOOL,PHASESoundEventPrepareHandlerReason,void *),void *>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,unsigned long long,BOOL,PHASESoundEventPrepareHandlerReason,void *),void *),Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,unsigned long long,BOOL,PHASESoundEventPrepareHandlerReason,void *),void *)::{lambda(void)#1},void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,unsigned long long,BOOL,PHASESoundEventPrepareHandlerReason,void *),void *>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,unsigned long long,BOOL,PHASESoundEventPrepareHandlerReason,void *),void *),Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,unsigned long long,BOOL,PHASESoundEventPrepareHandlerReason,void *),void *)::{lambda(void)#1},void>::operator()(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *, void, void, void, void))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(uint64_t (**)(void *, void, void, void, void))(*v3 + v1);
  }
  return v1(v3, a1[4], a1[5], a1[6], a1[7]);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,Phase::Controller::IOTimeStamps const&,PHASESoundEventStartHandlerReason,void *),void *>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,Phase::Controller::IOTimeStamps const&,PHASESoundEventStartHandlerReason,void *),void *),Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,Phase::Controller::IOTimeStamps const&,PHASESoundEventStartHandlerReason,void *),void *)::{lambda(void)#1},void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,Phase::Controller::IOTimeStamps const&,PHASESoundEventStartHandlerReason,void *),void *>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,Phase::Controller::IOTimeStamps const&,PHASESoundEventStartHandlerReason,void *),void *),Phase::UniqueObjectId,void (*)(Phase::UniqueObjectId,Phase::Controller::IOTimeStamps const&,PHASESoundEventStartHandlerReason,void *),void *)::{lambda(void)#1},void>::operator()(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *, void, void, void, void))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(uint64_t (**)(void *, void, void, void, void))(*v3 + v1);
  }
  return v1(v3, a1[4], a1[5], a1[6], a1[7]);
}

void Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,double,void (*)(Phase::UniqueObjectId,PHASESoundEventSeekHandlerReason,void *),void *>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,double,void (*)(Phase::UniqueObjectId,PHASESoundEventSeekHandlerReason,void *),void *),Phase::UniqueObjectId,double,void (*)(Phase::UniqueObjectId,PHASESoundEventSeekHandlerReason,void *),void *)::{lambda(void)#1},void>::~LambdaFunction()
{
}

uint64_t Phase::LambdaFunction<BOOL Phase::Commandable<128,Phase::LockFreeQueueMPSC>::CallAsync<Phase::ActionTreeManager,BOOL,Phase::UniqueObjectId,double,void (*)(Phase::UniqueObjectId,PHASESoundEventSeekHandlerReason,void *),void *>(int,BOOL (Phase::ActionTreeManager::*)(Phase::UniqueObjectId,double,void (*)(Phase::UniqueObjectId,PHASESoundEventSeekHandlerReason,void *),void *),Phase::UniqueObjectId,double,void (*)(Phase::UniqueObjectId,PHASESoundEventSeekHandlerReason,void *),void *)::{lambda(void)#1},void>::operator()(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void *, void, void, void, void, double))(a1 + 16);
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = (void *)(*(void *)(a1 + 8) + (v2 >> 1));
  if (v2) {
    uint64_t v1 = *(uint64_t (**)(void *, void, void, void, void, double))(*v3 + v1);
  }
  return v1(v3, *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 56), *(void *)(a1 + 64), *(double *)(a1 + 48));
}

void sub_2220132F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222013388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220134C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222013630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2220136F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2220138A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222013964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222013A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222013BC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222013C70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222013D7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222013E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222013F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222014050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222014184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_222014368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_2220144C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void sub_2220145AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222014710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220147AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220148E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222014A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222014BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222014C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222014D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222014DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222014F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220150B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220151C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222015318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201544C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201550C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222015928(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_222015A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222015DA8(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v3);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v2);
    __cxa_end_catch();
    JUMPOUT(0x222015CB4);
  }
  _Unwind_Resume(exception_object);
}

void sub_2220160E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    __cxa_free_exception(v10);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v11);
    __cxa_end_catch();
    JUMPOUT(0x222015FDCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_222016420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2)
  {
    __cxa_free_exception(v10);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v11);
    __cxa_end_catch();
    JUMPOUT(0x222016320);
  }
  _Unwind_Resume(exception_object);
}

void sub_2220167B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2)
  {
    __cxa_free_exception(v19);
    __cxa_begin_catch(exception_object);
    Phase::Commandable<128,Phase::LockFreeQueueMPSC>::LogOverflow(v18);
    __cxa_end_catch();
    JUMPOUT(0x2220166B0);
  }
  _Unwind_Resume(exception_object);
}

void sub_2220168BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222016978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222016D94(_Unwind_Exception *a1)
{
  uint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void sub_222016EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222017058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201729C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220173A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222017468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201766C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222017724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2220177D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222017890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222017944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2220179F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222017AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222017B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222017C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222018230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222018494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222018620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222018708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222018784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  float v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PHASESoundPrototype;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_222018820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220188CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220189C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222018AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222018C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222018E9C(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_222018FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222019120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220191BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222019284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222019328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2220193CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222019534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2220195D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222019670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_222019740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222019948(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222019B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222019C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222019DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_222019EF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201A060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201A1A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201A3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201A4A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201A524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::TaskManager::GetService<Phase::Controller::ClientTapRegistryProxy>(Phase::Logger *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)a1 + 6);
  if (a2 >= (unint64_t)((*((void *)a1 + 7) - v3) >> 5))
  {
    uint64_t v7 = **(id **)(Phase::Logger::GetInstance(a1) + 448);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 112;
      _os_log_impl(&dword_221E5E000, v7, OS_LOG_TYPE_ERROR, "%25s:%-5d PRECONDITION: pId < mServiceRegistry.size() is false.", buf, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](exception, "PRECONDITION: pId < mServiceRegistry.size() is false.");
  }
  uint64_t v4 = (Phase::Logger *)(v3 + 32 * a2);
  if (!*(void *)v4)
  {
    float v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v4)
                                                                                       + 448)));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      Phase::GetBacktraceFrame<1ul>(&__p);
      float v10 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315906;
      uint64_t v14 = "TaskManager.hpp";
      __int16 v15 = 1024;
      int v16 = 121;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 2080;
      uint64_t v20 = v10;
      _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::domain_error) [not lService.has_value() is true]: \"No service registered for Id %i, in call \\n%s\"", buf, 0x22u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }

    uint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::domain_error::domain_error[abi:ne180100](v11, "No service registered for Id %i, in call \n%s");
  }
  uint64_t v5 = std::any_cast[abi:ne180100]<Phase::Controller::ClientTapRegistryProxy * const>((uint64_t (**)(uint64_t, void, void, void, void *))v4);
  if (!v5) {
    std::__throw_bad_any_cast[abi:ne180100]();
  }
  return (uint64_t)*v5;
}

void sub_22201A764(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_22201A874(_Unwind_Exception *a1)
{
}

void sub_22201A894(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_22201A934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201A9C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201AA70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201AB00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201AB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201AC08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201AC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201AE0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201AED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201AFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)PHASEPreSpatialTapSource;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_22201B080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201B13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201B314(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  _Unwind_Resume(a1);
}

void sub_22201B51C(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  _Unwind_Resume(a1);
}

void sub_22201B6BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201B790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201B834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201B8CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t (**std::any_cast[abi:ne180100]<Phase::Controller::ClientTapRegistryProxy * const>(uint64_t (**result)(uint64_t, void, void, void, void *)))(uint64_t, void, void, void, void *)
{
  if (result)
  {
    if (*result) {
      return (uint64_t (**)(uint64_t, void, void, void, void *))(*result)(3, result, 0, 0, &std::__any_imp::__unique_typeinfo<Phase::Controller::ClientTapRegistryProxy *>::__id);
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_22201BA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201BAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201BB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201BC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201BCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201BDA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201BE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201C09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201C1C0(_Unwind_Exception *exception_object)
{
}

void sub_22201C2F4(_Unwind_Exception *exception_object)
{
}

void sub_22201C424(_Unwind_Exception *exception_object)
{
}

void sub_22201C504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201C64C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::RenderSourceView const*)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_22201C7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201C97C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(Phase::SpatialModeler::DirectPathTransmissionDebugger::AudibleTriangleView const*)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_22201CAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201CCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__function::__value_func<void ()(Phase::Geometry::SystemDebugger *)>::~__value_func[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void sub_22201CE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__function::__value_func<void ()(Phase::Geometry::SystemDebugger *)>::~__value_func[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void sub_22201D050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__function::__value_func<void ()(Phase::Geometry::SystemDebugger *)>::~__value_func[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void sub_22201D22C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__function::__value_func<void ()(Phase::Geometry::SystemDebugger *)>::~__value_func[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void sub_22201D4D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201D848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201DC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201DD3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201DDF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201DE90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_22201DFF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201E1CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201E21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_22201E2E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *Phase::SpatialModeler::PresetEarlyReflectionsErrorCategory::name(Phase::SpatialModeler::PresetEarlyReflectionsErrorCategory *this)
{
  return "Preset Early Reflections";
}

void Phase::SpatialModeler::PresetEarlyReflectionsErrorCategory::message(int a1@<W1>, uint64_t a2@<X8>)
{
  if (a1 >= 8) {
    std::terminate();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Preset early reflections ");
  Phase::SpatialModeler::ModelerErrorMessage(a1, (const void **)__p, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22201E578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::PresetEarlyReflectionsErrorCategory::~PresetEarlyReflectionsErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);

  JUMPOUT(0x223C938A0);
}

void Phase::SpatialModeler::PresetEarlyReflections::GetSupportedQueryDescs(std::string **a1@<X8>)
{
  *(void *)&long long v20 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v7, "CULL");
  uint64_t v8 = 0;
  uint64_t v9 = 0x100000001;
  int v10 = 1;
  long long v11 = 0u;
  long long v12 = 0u;
  std::string::basic_string[abi:ne180100]<0>(v13, "CLUSTER");
  void v13[3] = 1;
  void v13[4] = 0x200000003;
  int v14 = 1;
  long long v15 = 0u;
  long long v16 = 0u;
  std::string::basic_string[abi:ne180100]<0>(v17, "SPATIAL");
  v17[3] = 2;
  void v17[4] = 0x300000002;
  int v18 = 1;
  memset(v19, 0, sizeof(v19));
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (std::string *)operator new(0xF0uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 10;
  uint64_t v4 = 0;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::QueryDesc>,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc*>((uint64_t)(a1 + 2), &v7, &v20, v3);
  do
  {
    uint64_t v5 = (char *)&v7 + v4 * 16;
    char v6 = *(void **)&v19[v4];
    if (v6)
    {
      *((void *)v5 + 27) = v6;
      operator delete(v6);
    }
    if (v5[183] < 0) {
      operator delete(*((void **)v5 + 20));
    }
    v4 -= 5;
  }
  while (v4 != -15);
}

void sub_22201E74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  *(void *)(v12 + 8) = v13;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (uint64_t i = 160; i != -80; i -= 80)
    Phase::SpatialModeler::QueryDesc::~QueryDesc((Phase::SpatialModeler::QueryDesc *)(&a12 + i));
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::PresetEarlyReflections::Init(uint64_t a1, void *a2)
{
  *(void *)(a1 + 1024) = *a2;
}

void *Phase::SpatialModeler::PresetEarlyReflections::Shutdown(Phase::SpatialModeler::PresetEarlyReflections *this)
{
  return Phase::HeapAllocator::Destroy((Phase::SpatialModeler::PresetEarlyReflections *)((char *)this + 40));
}

void Phase::SpatialModeler::PresetEarlyReflections::RunQuery(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v199 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[10];
  if (v5 == 2)
  {
    uint64_t v28 = a2[11];
    if (!v28 || *(_DWORD *)v28 != 2) {
      goto LABEL_44;
    }
    uint64_t v29 = a2[12];
    if (!v29 || *(_DWORD *)v29 != 3) {
      goto LABEL_48;
    }
    uint64_t v30 = a2[8];
    if (!v30) {
      goto LABEL_52;
    }
    uint64_t v31 = *(void *)(v28 + 552);
    unsigned int v32 = *(_DWORD *)(v30 + 136);
    if (v32 <= v31
      || (uint64_t v33 = *(void *)(v30 + 120), *(_DWORD *)(v33 + 24 * v31 + 20) != HIDWORD(v31))
      || (uint64_t v34 = *(float32x2_t **)(v33 + 24 * *(void *)(v28 + 552))) == 0
      || v34->i32[0] != 2)
    {
      if (!a1) {
        goto LABEL_122;
      }
      uint64_t v43 = (**(uint64_t (***)(uint64_t))a1)(a1);
      goto LABEL_120;
    }
    unint64_t v35 = *(void *)(v30 + 160);
    memset(v181, 0, 12);
    if (*(unsigned char *)(a1 + 1068))
    {
      if (*(void *)(v28 + 192) || *(void *)(v28 + 200))
      {
        uint64_t v36 = *(unsigned int *)(v28 + 508);
        long long v174 = 0u;
        long long v175 = 0u;
        long long v176 = 0u;
        long long v177 = 0u;
        long long v178 = 0u;
        long long v179 = 0u;
        memset(v180, 0, sizeof(v180));
        if (v36)
        {
          uint64_t v37 = (float *)&v174;
          uint64_t v38 = v28;
          uint64_t v39 = v36;
          do
          {
            *v37++ = *(float *)(v38 + 384) - *(float *)(v38 + 64);
            v38 += 4;
            --v39;
          }
          while (v39);
          long long v186 = 0u;
          memset(v187, 0, 28);
          long long v184 = 0u;
          long long v185 = 0u;
          long long v183 = 0u;
          memset(buf, 0, sizeof(buf));
          uint64_t v40 = buf;
          uint64_t v41 = (float *)&v174;
          HIDWORD(v187[1]) = v36;
          do
          {
            float v42 = *v41++;
            *(float *)uint64_t v40 = fmaxf(v42, 0.0);
            v40 += 4;
            --v36;
          }
          while (v36);
        }
        else
        {
          memset(v187, 0, 32);
          long long v185 = 0uLL;
          long long v186 = 0uLL;
          long long v183 = 0uLL;
          long long v184 = 0uLL;
          memset(buf, 0, sizeof(buf));
        }
        long long v195 = v185;
        long long v196 = v186;
        long long v197 = v187[0];
        long long v198 = v187[1];
        long long v191 = *(_OWORD *)buf;
        long long v192 = *(_OWORD *)&buf[16];
        float v133 = 0.0;
        float v170 = 0.0;
        long long v193 = v183;
        long long v194 = v184;
        float v134 = 0.0;
LABEL_137:
        float v172 = v134;
        uint64_t v135 = *(void *)(v28 + 8);
        if (v135)
        {
          float v136 = 0.0;
          uint64_t v137 = (float *)&v191;
          uint64_t v138 = *(void *)(v28 + 8);
          do
          {
            float v139 = *v137++;
            float v140 = v139;
            if (v139 > v136) {
              float v136 = v140;
            }
            --v138;
          }
          while (v138);
        }
        else
        {
          float v136 = 0.0;
        }
        float v141 = -v136;
        if (v35 != *(void *)(a1 + 1056))
        {
          uint64_t v142 = **(void **)(a1 + 1024);
          double v143 = exp(v141 * 10.0 / 10.0 * 0.115129255);
          Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Query(v142, v35, 0, v135, (uint64_t)buf, v143);
          *(_DWORD *)(a1 + 1072) = *(_DWORD *)buf;
          *(unsigned char *)(a1 + 1076) = buf[4];
          std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1080), (uint64_t *)&buf[8]);
          *(void *)(a1 + 1120) = v184;
          std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1128), (uint64_t *)&v184 + 1);
          *(void *)(a1 + 1168) = *(void *)&v187[0];
          std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1176), (uint64_t *)v187 + 1);
          std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1216), &v188);
          *(void *)(a1 + 1256) = v189[4];
          *(_OWORD *)(a1 + 1264) = v190;
          std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v188);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v189);
          std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)v187 + 1, 0);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v187[1]);
          std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v184 + 1);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v185);
          std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&buf[8]);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[16]);
        }
        uint64_t v144 = *(void *)(a1 + 1120);
        if (v144)
        {
          Phase::SpatialModeler::AllocMetadata<float,Phase::HeapAllocator>((uint64_t *)v29, (Phase *)(a1 + 40), v144, *(void *)(v28 + 8));
          *(_OWORD *)buf = xmmword_2220A4E00;
          if (!*(unsigned char *)(a1 + 1068))
          {
            float v145 = v133 < 0.0 ? -v133 : v133;
            if (v145 > 0.0001) {
              goto LABEL_158;
            }
            float v146 = -v170;
            if (v170 >= 0.0) {
              float v146 = v170;
            }
            if (v146 > 0.0001) {
              goto LABEL_158;
            }
            float v147 = v172;
            if (v172 < 0.0) {
              float v147 = -v172;
            }
            if (v147 > 0.0001)
            {
LABEL_158:
              float v148 = asinf(v170 / sqrtf((float)((float)(v133 * v133) + (float)(v170 * v170)) + (float)(v172 * v172)));
              float v149 = atan2f(-v133, -v172) * 0.5;
              __float2 v150 = __sincosf_stret(v148 * 0.5);
              __float2 v151 = __sincosf_stret(v149);
              *(float *)buf = (float)(v150.__sinval * v151.__cosval)
                            - (float)((float)(v150.__cosval * v151.__sinval) * 0.0);
              *(float *)&uint8_t buf[4] = (float)(v150.__cosval * v151.__sinval)
                                + (float)((float)(v150.__sinval * v151.__cosval) * 0.0);
              *(float *)&uint8_t buf[8] = (float)((float)(v150.__cosval * v151.__cosval) * 0.0)
                                - (float)(v150.__sinval * v151.__sinval);
              *(float *)&unsigned char buf[12] = (float)(v150.__cosval * v151.__cosval)
                                 + (float)((float)(v150.__sinval * v151.__sinval) * 0.0);
            }
          }
          if (*(void *)(a1 + 1120))
          {
            uint64_t v152 = 0;
            unint64_t v153 = 0;
            do
            {
              if (*(_DWORD *)(a1 + 1276) != 1) {
                __assert_rtn("RunSpatialQuery", "PresetEarlyReflectionsModeler.cpp", 570, "mLastPresetMetadataEntries.mDirectionType == DirectionalMetadataOutput<float>::DirectionType::CartesianInWorldSpace");
              }
              Phase::operator*<float>((float *)buf, (float *)(*(void *)(a1 + 1080) + 12 * v153), (float *)&v174);
              float v154 = *(float *)&v174;
              float v155 = *((float *)&v174 + 2);
              float v156 = sqrtf((float)((float)(v154 * v154) + (float)(*((float *)&v174 + 1) * *((float *)&v174 + 1)))+ (float)(v155 * v155));
              float v157 = acosf(*((float *)&v174 + 1) / v156);
              float v158 = atan2f(v154, v155);
              float v159 = (float)((float)(180.0 - (float)(v158 * 57.296))
                           - (float)(floorf((float)(180.0 - (float)(v158 * 57.296)) / 360.0) * 360.0))
                   + 0.0;
              if (v159 >= 360.0) {
                float v159 = nextafterf(360.0, 0.0);
              }
              id v160 = (float *)(*(void *)(v29 + 8) + 12 * v153);
              float *v160 = v156;
              v160[1] = v157 * 57.296;
              v160[2] = v159;
              *(_DWORD *)(*(void *)(v29 + 56) + 4 * v153) = *(_DWORD *)(*(void *)(a1 + 1128) + 4 * v153);
              uint64_t v161 = *(void *)(v28 + 8);
              if (v161)
              {
                uint64_t v162 = (_DWORD *)(*(void *)(v29 + 104) + *(void *)(*(void *)(v29 + 104) + 8) * v152 + 16);
                unint64_t v163 = (int *)(*(void *)(a1 + 1176) + *(void *)(*(void *)(a1 + 1176) + 8) * v152 + 16);
                do
                {
                  int v164 = *v163++;
                  *v162++ = v164;
                  --v161;
                }
                while (v161);
              }
              *(unsigned char *)(*(void *)(v29 + 144) + v153) = *(unsigned char *)(*(void *)(a1 + 1216) + v153);
              ++v153;
              v152 += 4;
            }
            while (v153 < *(void *)(a1 + 1120));
          }
          *(unsigned char *)(v29 + 201) = *(unsigned char *)(a1 + 1273);
          *(_DWORD *)(v29 + 204) = 0;
        }
        else
        {
          Phase::SpatialModeler::ClearMetadata<float>((uint64_t *)v29);
        }
        unint64_t v165 = v35;
        if (v35 == *(void *)(a1 + 1056) && *(float *)(a1 + 1064) == v141 && v133 == *(float *)(a1 + 1032))
        {
          BOOL v166 = v170 != *(float *)(a1 + 1036) || v172 != *(float *)(a1 + 1040);
          unint64_t v165 = v35;
        }
        else
        {
          BOOL v166 = 1;
        }
        *(unsigned char *)(v29 + 4) = v166;
        *(float *)(a1 + 1032) = v133;
        *(float *)(a1 + 1036) = v170;
        *(float *)(a1 + 1040) = v172;
        *(void *)(a1 + 1056) = v165;
        int v8 = 1;
        *(float *)(a1 + 1064) = v141;
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t v124 = *(void *)(v28 + 208);
      if (v32 > v124 && *(_DWORD *)(v33 + 24 * v124 + 20) == HIDWORD(v124))
      {
        uint64_t v125 = *(float32x2_t **)(v33 + 24 * *(void *)(v28 + 208));
        if (v125)
        {
          if (v125->i32[0] == 3)
          {
            uint64_t v126 = *(unsigned int *)(v28 + 508);
            long long v174 = 0u;
            long long v175 = 0u;
            long long v176 = 0u;
            long long v177 = 0u;
            long long v178 = 0u;
            long long v179 = 0u;
            memset(v180, 0, sizeof(v180));
            if (v126)
            {
              id v127 = (float *)&v174;
              uint64_t v128 = v28;
              uint64_t v129 = v126;
              do
              {
                *v127++ = *(float *)(v128 + 384) - *(float *)(v128 + 64);
                v128 += 4;
                --v129;
              }
              while (v129);
              long long v186 = 0u;
              memset(v187, 0, 28);
              long long v184 = 0u;
              long long v185 = 0u;
              long long v183 = 0u;
              memset(buf, 0, sizeof(buf));
              id v130 = buf;
              id v131 = (float *)&v174;
              HIDWORD(v187[1]) = v126;
              do
              {
                float v132 = *v131++;
                *(float *)id v130 = fmaxf(v132, 0.0);
                v130 += 4;
                --v126;
              }
              while (v126);
            }
            else
            {
              memset(v187, 0, 32);
              long long v185 = 0uLL;
              long long v186 = 0uLL;
              long long v183 = 0uLL;
              long long v184 = 0uLL;
              memset(buf, 0, sizeof(buf));
            }
            long long v195 = v185;
            long long v196 = v186;
            long long v197 = v187[0];
            long long v198 = v187[1];
            long long v191 = *(_OWORD *)buf;
            long long v192 = *(_OWORD *)&buf[16];
            long long v193 = v183;
            long long v194 = v184;
            v181[0] = v125[8];
            v181[1].i32[0] = v125[9].i32[0];
            Phase::TransformPositionByInverse<float>(v34 + 6, v181, (float *)buf);
            float v133 = *(float *)buf;
            float v170 = *(float *)&buf[4];
            float v134 = *(float *)&buf[8];
            goto LABEL_137;
          }
        }
      }
    }
    uint64_t v43 = (**(uint64_t (***)(uint64_t))a1)(a1);
LABEL_134:
    uint64_t v44 = 6;
    goto LABEL_50;
  }
  if (v5 == 1)
  {
    uint64_t v9 = a2[11];
    if (v9 && *(_DWORD *)v9 == 3)
    {
      uint64_t v10 = a2[12];
      if (v10 && *(_DWORD *)v10 == 2)
      {
        uint64_t v11 = a2[8];
        if (v11)
        {
          uint64_t v171 = a2[8];
          uint64_t v12 = *(void *)(v11 + 160);
          BOOL v13 = v12 != *(void *)(a1 + 1048);
          *(void *)(a1 + 1048) = v12;
          double v14 = *(double *)(v9 + 40);
          *(unsigned char *)(a1 + 1068) = v14 == 1.0;
          if (v14 == 1.0)
          {
            if (*(void *)(a1 + 48)) {
              long long v15 = *(const char **)(a1 + 48);
            }
            else {
              long long v15 = "<Unnamed>";
            }
            long long v16 = Phase::HeapAllocator::Allocate((Phase::HeapAllocator *)(a1 + 40), 0x150uLL, v15, 0, 0x10uLL);
            __int16 v17 = v16;
            uint64_t v18 = 0;
            *(_OWORD *)long long v16 = 0u;
            *((_OWORD *)v16 + 1) = 0u;
            *((_DWORD *)v16 + 8) = 0;
            *(void *)((char *)v16 + 36) = 1065353216;
            *(void *)((char *)v16 + 44) = 0;
            *((_DWORD *)v16 + 13) = 1065353216;
            do
            {
              __int16 v19 = (char *)v16 + v18;
              *((_DWORD *)v19 + 14) = 0;
              *((void *)v19 + 8) = 0;
              v18 += 16;
            }
            while (v18 != 128);
            *((void *)v16 + 23) = 0;
            *(void *)buf = 0;
            *(_DWORD *)&uint8_t buf[8] = 0;
            Phase::Subbands<float>::Subbands((uint64_t)v16 + 192, buf, 3);
            *((unsigned char *)v17 + 320) = 0;
            *(void *)buf = &unk_26D4797E0;
            *(void *)&uint8_t buf[8] = a1 + 40;
            *(void *)&uint8_t buf[24] = buf;
            *(void *)&long long v191 = v17;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v191 + 8, (uint64_t)buf);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](buf);
            uint64_t v20 = v191;
            *(void *)&long long v191 = 0;
            *(void *)buf = v20;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v191 + 8);
            *((void *)&v183 + 1) = 1;
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v191);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v191 + 1);
            uint64_t v21 = v10 + 8;
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v10 + 8), (uint64_t *)buf);
            *(void *)(v10 + 48) = *((void *)&v183 + 1);
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
            if (*(void *)(a1 + 48)) {
              uint64_t v22 = *(const char **)(a1 + 48);
            }
            else {
              uint64_t v22 = "<Unnamed>";
            }
            BOOL v23 = Phase::HeapAllocator::Allocate((Phase::HeapAllocator *)(a1 + 40), 1uLL, v22, 0, 1uLL);
            *(void *)buf = &unk_26D479900;
            *(void *)&uint8_t buf[8] = a1 + 40;
            *(void *)&uint8_t buf[24] = buf;
            *(void *)&long long v191 = v23;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v191 + 8, (uint64_t)buf);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](buf);
            uint64_t v24 = v191;
            *(void *)&long long v191 = 0;
            *(void *)buf = v24;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v191 + 8);
            *((void *)&v183 + 1) = 1;
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v191);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v191 + 1);
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v10 + 56), (uint64_t *)buf);
            *(void *)(v10 + 96) = *((void *)&v183 + 1);
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
            if (*(void *)(v9 + 96))
            {
              __int16 v25 = *(long long **)(v9 + 56);
              double v26 = *(_OWORD **)v21;
              long long v27 = *v25;
              *((void *)v26 + 2) = *((void *)v25 + 2);
              *double v26 = v27;
              *((_DWORD *)v26 + 6) = *((_DWORD *)v25 + 6);
              *((_DWORD *)v26 + 7) = *((_DWORD *)v25 + 7);
              *((_DWORD *)v26 + 8) = *((_DWORD *)v25 + 8);
              *((_DWORD *)v26 + 9) = *((_DWORD *)v25 + 9);
              *((_DWORD *)v26 + 10) = *((_DWORD *)v25 + 10);
              *((_DWORD *)v26 + 11) = *((_DWORD *)v25 + 11);
              *((_DWORD *)v26 + 12) = *((_DWORD *)v25 + 12);
              *((_DWORD *)v26 + 13) = *((_DWORD *)v25 + 13);
              memcpy((char *)v26 + 56, (char *)v25 + 56, 0x109uLL);
            }
            else
            {
              MEMORY[0x223C944F0](buf);
              *(_OWORD *)*(void *)uint64_t v21 = *(_OWORD *)buf;
              BOOL v13 = 1;
            }
            **(unsigned char **)(v10 + 56) = v13;
            *(unsigned char *)(*(void *)v21 + 320) = 1;
            uint64_t v75 = *(void *)(v9 + 144);
            if (v75)
            {
              uint64_t v76 = 0;
              uint64_t v77 = *(void *)(v9 + 104);
              uint64_t v78 = (float *)(v77 + 16);
              float v79 = -3.4028e38;
              do
              {
                uint64_t v80 = *(unsigned int *)(v77 + 304 * v76 + 140);
                long long v81 = v78;
                if (v80)
                {
                  do
                  {
                    float v82 = *v81++;
                    float v83 = v82;
                    if (v82 > v79) {
                      float v79 = v83;
                    }
                    --v80;
                  }
                  while (v80);
                }
                ++v76;
                v78 += 76;
              }
              while (v76 != v75);
            }
            else
            {
              float v79 = -3.4028e38;
            }
            *(float *)&long long v191 = v79;
            *((float *)&v191 + 1) = v79;
            *((float *)&v191 + 2) = v79;
            Phase::Subbands<float>::Subbands((uint64_t)buf, &v191, 3);
            uint64_t v84 = *(_OWORD **)v21;
            long long v85 = v186;
            v84[16] = v185;
            v84[17] = v85;
            long long v86 = v187[1];
            v84[18] = v187[0];
            v84[19] = v86;
            long long v87 = *(_OWORD *)&buf[16];
            v84[12] = *(_OWORD *)buf;
            v84[13] = v87;
            long long v88 = v184;
            v84[14] = v183;
            v84[15] = v88;
          }
          else
          {
            uint64_t v46 = *(void *)(v9 + 144);
            if (!v46)
            {
              long long v167 = **(NSObject ***)(Phase::Logger::GetInstance((Phase::Logger *)a1) + 112);
              if (os_log_type_enabled(v167, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136315394;
                *(void *)&uint8_t buf[4] = "ManagedPtr.hpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 229;
                _os_log_impl(&dword_221E5E000, v167, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", buf, 0x12u);
              }
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
            }
            if (*(void *)(a1 + 48)) {
              uint64_t v47 = *(const char **)(a1 + 48);
            }
            else {
              uint64_t v47 = "<Unnamed>";
            }
            unint64_t v48 = Phase::HeapAllocator::Allocate((Phase::HeapAllocator *)(a1 + 40), 336 * v46, v47, 0, 0x10uLL);
            long long v49 = v48;
            do
            {
              uint64_t v50 = 0;
              *((_DWORD *)v49 + 8) = 0;
              *(_OWORD *)long long v49 = 0u;
              *((_OWORD *)v49 + 1) = 0u;
              *(void *)((char *)v49 + 36) = 1065353216;
              *(void *)((char *)v49 + 44) = 0;
              *((_DWORD *)v49 + 13) = 1065353216;
              do
              {
                uint64_t v51 = (char *)v49 + v50;
                *((_DWORD *)v51 + 14) = 0;
                *((void *)v51 + 8) = 0;
                v50 += 16;
              }
              while (v50 != 128);
              *((void *)v49 + 23) = 0;
              *(void *)buf = 0;
              *(_DWORD *)&uint8_t buf[8] = 0;
              Phase::Subbands<float>::Subbands((uint64_t)v49 + 192, buf, 3);
              *((unsigned char *)v49 + 320) = 0;
              long long v49 = (Phase *)((char *)v49 + 336);
            }
            while (v49 != (Phase *)((char *)v48 + 336 * v46));
            *(void *)buf = &unk_26D4797E0;
            *(void *)&uint8_t buf[8] = a1 + 40;
            *(void *)&uint8_t buf[24] = buf;
            *(void *)&long long v191 = v48;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v191 + 8, (uint64_t)buf);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](buf);
            uint64_t v52 = v191;
            *(void *)&long long v191 = 0;
            *(void *)buf = v52;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v191 + 8);
            *((void *)&v183 + 1) = v46;
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v191);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v191 + 1);
            float v53 = (void *)(v10 + 8);
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v10 + 8), (uint64_t *)buf);
            *(void *)(v10 + 48) = *((void *)&v183 + 1);
            std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
            uint64_t v54 = *(void *)(v9 + 144);
            uint64_t v173 = a1 + 40;
            *(void *)&long long v174 = v54;
            v181[0] = (float32x2_t)1;
            *(void *)buf = a1 + 40;
            *(void *)&uint8_t buf[8] = &v174;
            *(void *)&uint8_t buf[16] = v181;
            Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(v54, (uint64_t)buf, &v173, (Phase **)&v191);
            uint64_t v55 = v191;
            *(void *)&long long v191 = 0;
            *(void *)buf = v55;
            std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v191 + 8);
            *((void *)&v183 + 1) = v54;
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v191);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v191 + 1);
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v10 + 56), (uint64_t *)buf);
            *(void *)(v10 + 96) = *((void *)&v183 + 1);
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
            if (*(void *)(v9 + 144))
            {
              uint64_t v56 = 0;
              uint64_t v57 = 0;
              unint64_t v58 = 0;
              do
              {
                *(_OWORD *)(*v53 + v57) = *(_OWORD *)(*(void *)(v9 + 104) + v56);
                uint64_t v59 = *(void *)(v9 + 104) + v56;
                uint64_t v60 = *v53 + v57;
                *(void *)(v60 + 16) = *(void *)(v59 + 144);
                long long v61 = *(_OWORD *)(v59 + 160);
                long long v62 = *(_OWORD *)(v59 + 176);
                long long v63 = *(_OWORD *)(v59 + 192);
                *(_OWORD *)(v60 + 104) = *(_OWORD *)(v59 + 208);
                *(_OWORD *)(v60 + 88) = v63;
                *(_OWORD *)(v60 + 72) = v62;
                *(_OWORD *)(v60 + 56) = v61;
                long long v64 = *(_OWORD *)(v59 + 224);
                long long v65 = *(_OWORD *)(v59 + 240);
                long long v66 = *(_OWORD *)(v59 + 256);
                *(_OWORD *)(v60 + 168) = *(_OWORD *)(v59 + 272);
                *(_OWORD *)(v60 + 152) = v66;
                *(_OWORD *)(v60 + 136) = v65;
                *(_OWORD *)(v60 + 120) = v64;
                unint64_t v67 = (_OWORD *)(*(void *)(v9 + 104) + v56);
                uint64_t v68 = (_OWORD *)(*v53 + v57);
                long long v69 = v67[8];
                long long v71 = v67[5];
                long long v70 = v67[6];
                v68[18] = v67[7];
                v68[19] = v69;
                v68[16] = v71;
                v68[17] = v70;
                long long v72 = v67[1];
                long long v73 = v67[2];
                long long v74 = v67[4];
                v68[14] = v67[3];
                v68[15] = v74;
                v68[12] = v72;
                v68[13] = v73;
                *(unsigned char *)(*(void *)(v10 + 56) + v58++) = 1;
                v57 += 336;
                v56 += 304;
              }
              while (*(void *)(v9 + 144) > v58);
            }
          }
          uint64_t v89 = *(void *)(v9 + 152);
          if (*(_DWORD *)(v171 + 136) > v89)
          {
            uint64_t v90 = *(void *)(v171 + 120);
            if (*(_DWORD *)(v90 + 24 * v89 + 20) == HIDWORD(v89))
            {
              uint64_t v91 = *(void *)(v90 + 24 * *(void *)(v9 + 152));
              if (v91)
              {
                if (*(_DWORD *)v91 == 2)
                {
                  uint64_t v92 = *(void *)(v9 + 144);
                  uint64_t v173 = a1 + 40;
                  *(void *)&long long v174 = v92;
                  v181[0] = (float32x2_t)8;
                  *(void *)buf = a1 + 40;
                  *(void *)&uint8_t buf[8] = &v174;
                  *(void *)&uint8_t buf[16] = v181;
                  Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(v92, (uint64_t)buf, &v173, (Phase **)&v191);
                  uint64_t v93 = v191;
                  *(void *)&long long v191 = 0;
                  *(void *)buf = v93;
                  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&buf[8], (uint64_t)&v191 + 8);
                  *((void *)&v183 + 1) = v92;
                  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v191);
                  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v191 + 1);
                  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v10 + 104), (uint64_t *)buf);
                  *(void *)(v10 + 144) = *((void *)&v183 + 1);
                  std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)buf);
                  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf[8]);
                  unint64_t v94 = *(void *)(v10 + 144);
                  if (!v94) {
                    goto LABEL_9;
                  }
                  uint64_t v95 = 0;
                  uint64_t v96 = 0;
                  unint64_t v97 = 0;
                  uint64_t v98 = *(void *)(v10 + 104);
                  uint64_t v99 = v171;
                  while (1)
                  {
                    int v100 = *(unsigned __int8 *)(a1 + 1068);
                    uint64_t v101 = *(unsigned char *)(a1 + 1068) ? 0 : v97;
                    *(void *)(v98 + v96) = v101;
                    uint64_t v102 = *(void *)(v9 + 104);
                    uint64_t v103 = *(void *)(v102 + v95 + 144);
                    if (*(_DWORD *)(v99 + 136) <= v103) {
                      break;
                    }
                    uint64_t v104 = *(void *)(v99 + 120);
                    if (*(_DWORD *)(v104 + 24 * v103 + 20) != HIDWORD(v103)) {
                      break;
                    }
                    uint64_t v105 = *(void *)(v104 + 24 * *(void *)(v102 + v95 + 144));
                    if (!v105 || *(_DWORD *)v105 != 3) {
                      break;
                    }
                    uint64_t v106 = *(uint64_t **)(v105 + 120);
                    float v107 = 0.0;
                    if (v106 != *(uint64_t **)(v105 + 128))
                    {
                      uint64_t v108 = *v106;
                      if (*(_DWORD *)(v99 + 112) > *v106)
                      {
                        uint64_t v109 = *(void *)(v99 + 96);
                        if (*(_DWORD *)(v109 + 24 * v108 + 20) == HIDWORD(v108))
                        {
                          uint64_t v110 = *(float **)(v109 + 24 * v108);
                          if (v110) {
                            float v107 = (float)(*(float *)(v105 + 76)
                          }
                                         * fmaxf(fmaxf(v110[9] - v110[6], v110[10] - v110[7]), v110[11] - v110[8]))
                                 * 0.5;
                        }
                      }
                    }
                    if (v100
                      && (*(_DWORD *)(v102 + v95 + 176) != 1 ? (uint64_t v111 = 0) : (uint64_t v111 = *(void *)(v102 + v95 + 184)),
                          *(_DWORD *)(v99 + 40) > v111
                       && (uint64_t v112 = *(void *)(v99 + 24),
                           *(_DWORD *)(v112 + 24 * v111 + 20) == HIDWORD(v111))
                       && (uint64_t v113 = *(void *)(v112 + 24 * v111)) != 0))
                    {
                      float v114 = *(float *)(v91 + 64) - *(float *)(v105 + 64);
                      float v115 = *(float *)(v91 + 68) - *(float *)(v105 + 68);
                      float v116 = sqrtf((float)((float)(v114 * v114) + (float)(v115 * v115))+ (float)((float)(*(float *)(v91 + 72) - *(float *)(v105 + 72))* (float)(*(float *)(v91 + 72) - *(float *)(v105 + 72))));
                      float v117 = *(double *)(v91 + 152);
                      float v118 = fmaxf(v117, v107 + (float)(v116 - v107));
                      if (*(_DWORD *)v113 == 2)
                      {
                        uint64_t v121 = **(void **)(v113 + 40);
                        if (!v121) {
                          goto LABEL_122;
                        }
                        float v122 = Phase::Envelope<float>::operator()((float **)(v121 + 16), v118);
                        if (v122 <= 0.0) {
                          float v122 = COERCE_FLOAT(1);
                        }
                        float v119 = (float)((float)(logf(v122) * 8.6859) / 10.0) * 10.0;
                        uint64_t v98 = *(void *)(v10 + 104);
                        unint64_t v94 = *(void *)(v10 + 144);
                        uint64_t v99 = v171;
                      }
                      else
                      {
                        float v119 = 0.0;
                        if (*(_DWORD *)v113 == 1)
                        {
                          unint64_t v169 = v94;
                          uint64_t v120 = **(void **)(v113 + 40);
                          if (!v120) {
                            goto LABEL_122;
                          }
                          float v119 = (float)(log2f(v118 / (float)(v107 + 1.0)) * -6.0206) * *(float *)(v120 + 16);
                          unint64_t v94 = v169;
                          uint64_t v99 = v171;
                        }
                      }
                      double v123 = v119;
                      if (v119 > 0.0) {
                        double v123 = 0.0;
                      }
                      *(double *)(v98 + v96 + 8) = v123;
                    }
                    else
                    {
                      *(void *)(v98 + v96 + 8) = 0;
                    }
                    ++v97;
                    v96 += 16;
                    v95 += 304;
                    int v8 = 1;
                    if (v97 >= v94) {
                      goto LABEL_51;
                    }
                  }
                  uint64_t v43 = (**(uint64_t (***)(uint64_t))a1)(a1);
                  goto LABEL_134;
                }
              }
            }
          }
          if (!a1) {
            goto LABEL_122;
          }
          uint64_t v43 = (**(uint64_t (***)(uint64_t))a1)(a1);
LABEL_120:
          uint64_t v44 = 7;
          goto LABEL_50;
        }
LABEL_52:
        if (a1)
        {
          uint64_t v43 = (**(uint64_t (***)(uint64_t))a1)(a1);
          uint64_t v44 = 5;
          goto LABEL_50;
        }
        goto LABEL_122;
      }
LABEL_48:
      if (a1)
      {
        uint64_t v43 = (**(uint64_t (***)(uint64_t))a1)(a1);
        uint64_t v44 = 4;
        goto LABEL_50;
      }
      goto LABEL_122;
    }
LABEL_44:
    if (a1)
    {
      uint64_t v43 = (**(uint64_t (***)(uint64_t))a1)(a1);
      uint64_t v44 = 3;
LABEL_50:
      *(void *)a3 = v44;
      *(void *)(a3 + 8) = v43;
      int v8 = 2;
      goto LABEL_51;
    }
LABEL_122:
    std::terminate();
  }
  if (v5)
  {
    if (a1)
    {
      uint64_t v45 = (**(uint64_t (***)(uint64_t))a1)(a1);
      *(void *)a3 = 2;
      *(void *)(a3 + 8) = v45;
      *(_DWORD *)(a3 + 24) = 2;
      return;
    }
    goto LABEL_122;
  }
  char v6 = (_DWORD *)a2[11];
  if (!v6 || *v6 != 1) {
    goto LABEL_44;
  }
  long long v7 = (_DWORD *)a2[12];
  if (!v7 || *v7 != 1) {
    goto LABEL_48;
  }
  v7[2] = 0;
LABEL_9:
  int v8 = 1;
LABEL_51:
  *(_DWORD *)(a3 + 24) = v8;
}

void sub_22201FBE4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::PresetEarlyReflections::GetGraphDescription@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 2:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x223C933A0](a2, "PresetEarlyReflectionsSpatialQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t result = MEMORY[0x223C933A0](v4, "FullPresetEarlyReflectionsSpatialGraph");
      goto LABEL_7;
    case 1:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x223C933A0](a2, "PresetEarlyReflectionsClusterQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t result = MEMORY[0x223C933A0](v4, "FullPresetEarlyReflectionsClusterGraph");
      goto LABEL_7;
    case 0:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x223C933A0](a2, "PresetEarlyReflectionsCullQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t result = MEMORY[0x223C933A0](v4, "FullPresetEarlyReflectionsCullGraph");
LABEL_7:
      *(void *)(v4 + 24) = 0xFFFFFFFFLL;
      return result;
  }
  *(_OWORD *)(a2 + 16) = 0uLL;
  *(_OWORD *)(a2 + 32) = 0uLL;
  *(_OWORD *)a2 = 0uLL;
  return result;
}

void sub_22201FD08(_Unwind_Exception *a1)
{
  Phase::SpatialModeler::GraphDescription::~GraphDescription(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::PresetEarlyReflections::GetErrorCategory(Phase::SpatialModeler::PresetEarlyReflections *this)
{
  return (uint64_t)this + 32;
}

BOOL Phase::SpatialModeler::PresetEarlyReflections::IsQueryIndexValid(Phase::SpatialModeler::PresetEarlyReflections *this, unint64_t a2)
{
  return a2 < 3;
}

void *Phase::SpatialModeler::AllocMetadata<float,Phase::HeapAllocator>(uint64_t *a1, Phase *a2, uint64_t a3, uint64_t a4)
{
  double v20[4] = *MEMORY[0x263EF8340];
  uint64_t v13 = 4;
  uint64_t v14 = a3;
  long long v15 = a2;
  long long v16 = &v14;
  __int16 v17 = &v13;
  uint64_t v12 = a2;
  Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(a3, (uint64_t)&v15, (uint64_t *)&v12, &v19);
  int v8 = v19;
  __int16 v19 = 0;
  long long v15 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v16, (uint64_t)v20);
  uint64_t v18 = a3;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v19);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v20);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 1, (uint64_t *)&v15);
  a1[6] = v18;
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v15);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v16);
  uint64_t v13 = 4;
  uint64_t v14 = a3;
  long long v15 = a2;
  long long v16 = &v14;
  __int16 v17 = &v13;
  uint64_t v12 = a2;
  Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(a3, (uint64_t)&v15, (uint64_t *)&v12, &v19);
  uint64_t v9 = v19;
  __int16 v19 = 0;
  long long v15 = v9;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v16, (uint64_t)v20);
  uint64_t v18 = a3;
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v19);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v20);
  std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 7, (uint64_t *)&v15);
  a1[12] = v18;
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v15);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v16);
  Phase::AllocPackedSubbandArray<float,Phase::HeapAllocator>(a2, a3, a4, &v15);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 13, (uint64_t *)&v15);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v15, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v16);
  uint64_t v13 = 1;
  uint64_t v14 = a3;
  long long v15 = a2;
  long long v16 = &v14;
  __int16 v17 = &v13;
  uint64_t v12 = a2;
  Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(a3, (uint64_t)&v15, (uint64_t *)&v12, &v19);
  uint64_t v10 = v19;
  __int16 v19 = 0;
  long long v15 = v10;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v16, (uint64_t)v20);
  uint64_t v18 = a3;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v19);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v20);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100](a1 + 18, (uint64_t *)&v15);
  a1[23] = v18;
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v15);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v16);
}

uint64_t *Phase::SpatialModeler::ClearMetadata<float>(uint64_t *a1)
{
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100](a1 + 1);
  a1[6] = 0;
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100](a1 + 7);
  a1[12] = 0;
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100](a1 + 13, 0);
  uint64_t result = std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](a1 + 18);
  a1[23] = 0;
  return result;
}

void Phase::SpatialModeler::PresetEarlyReflections::~PresetEarlyReflections(Phase::SpatialModeler::PresetEarlyReflections *this)
{
  *(void *)this = &unk_26D479770;
  uint64_t v2 = (Phase::SpatialModeler::PresetEarlyReflections *)((char *)this + 40);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 152);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 153);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 147, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 148);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 141);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 142);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 135);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 136);
  Phase::HeapAllocator::Destroy(v2);
  std::error_category::~error_category((std::error_category *)this + 4);
  *(void *)this = &unk_26D471808;
  std::error_category::~error_category((std::error_category *)this + 1);
}

{
  Phase::HeapAllocator *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D479770;
  uint64_t v2 = (Phase::SpatialModeler::PresetEarlyReflections *)((char *)this + 40);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 152);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 153);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 147, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 148);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 141);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 142);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 135);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 136);
  Phase::HeapAllocator::Destroy(v2);
  std::error_category::~error_category((std::error_category *)this + 4);
  *(void *)this = &unk_26D471808;
  std::error_category::~error_category((std::error_category *)this + 1);

  JUMPOUT(0x223C938A0);
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4797E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4797E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::RenderGroup,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::RenderGroup*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, Phase **a2)
{
  return Phase::HeapAllocator::Free(*(Phase::HeapAllocator **)(a1 + 8), *a2);
}

void *Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, Phase **a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v10 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 112);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)&void v12[4] = "ManagedPtr.hpp";
      *(_WORD *)&v12[12] = 1024;
      *(_DWORD *)&v12[14] = 229;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v12, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  if (*(void *)(*(void *)a2 + 8)) {
    char v6 = *(const char **)(*(void *)a2 + 8);
  }
  else {
    char v6 = "<Unnamed>";
  }
  long long v7 = Phase::HeapAllocator::Allocate(*(Phase::HeapAllocator **)a2, **(void **)(a2 + 8), v6, 0, **(void **)(a2 + 16));
  uint64_t v8 = *a3;
  *(void *)uint64_t v12 = &unk_26D479900;
  *(void *)&v12[8] = v8;
  uint64_t v13 = v12;
  *a4 = v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v12);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v12);
}

void sub_2220203D4(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D479900;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D479900;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<BOOL [],std::function<void ()(void *)>> Phase::details::AllocArray<BOOL,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(BOOL*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, Phase **a2)
{
  return Phase::HeapAllocator::Free(*(Phase::HeapAllocator **)(a1 + 8), *a2);
}

void *Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, Phase **a4@<X8>)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v12 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 112);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v14 = 136315394;
      *(void *)&void v14[4] = "ManagedPtr.hpp";
      *(_WORD *)&v14[12] = 1024;
      *(_DWORD *)&v14[14] = 229;
      _os_log_impl(&dword_221E5E000, v12, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v14, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  if (*(void *)(*(void *)a2 + 8)) {
    long long v7 = *(const char **)(*(void *)a2 + 8);
  }
  else {
    long long v7 = "<Unnamed>";
  }
  uint64_t v8 = Phase::HeapAllocator::Allocate(*(Phase::HeapAllocator **)a2, 16 * **(void **)(a2 + 8), v7, 0, **(void **)(a2 + 16));
  uint64_t v9 = v8;
  do
  {
    *(void *)uint64_t v9 = -1;
    *((void *)v9 + 1) = 0;
    uint64_t v9 = (Phase *)((char *)v9 + 16);
  }
  while (v9 != (Phase *)((char *)v8 + 16 * a1));
  uint64_t v10 = *a3;
  *(void *)uint64_t v14 = &unk_26D479828;
  *(void *)&v14[8] = v10;
  long long v15 = v14;
  *a4 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v14);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v14);
}

void sub_222020620(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D479828;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D479828;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, Phase **a2)
{
  return Phase::HeapAllocator::Free(*(Phase::HeapAllocator **)(a1 + 8), *a2);
}

void *Phase::AllocPackedSubbandArray<float,Phase::HeapAllocator>@<X0>(Phase::HeapAllocator *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Phase **a4@<X8>)
{
  void v11[4] = *MEMORY[0x263EF8340];
  unint64_t v7 = 4 * a2 * a3 + 16;
  if (*((void *)a1 + 1)) {
    uint64_t v8 = (const char *)*((void *)a1 + 1);
  }
  else {
    uint64_t v8 = "<Unnamed>";
  }
  v11[0] = &unk_26D479948;
  v11[1] = a1;
  v11[3] = v11;
  *a4 = Phase::HeapAllocator::Allocate(a1, v7, v8, 0, 8uLL);
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v11);
  uint64_t result = std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v11);
  uint64_t v10 = *a4;
  *(void *)uint64_t v10 = a2;
  *((void *)v10 + 1) = a3;
  return result;
}

void *Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, Phase **a4@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v11 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 112);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v13 = 136315394;
      *(void *)&void v13[4] = "ManagedPtr.hpp";
      *(_WORD *)&v13[12] = 1024;
      *(_DWORD *)&v13[14] = 229;
      _os_log_impl(&dword_221E5E000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v13, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  if (*(void *)(*(void *)a2 + 8)) {
    unint64_t v7 = *(const char **)(*(void *)a2 + 8);
  }
  else {
    unint64_t v7 = "<Unnamed>";
  }
  uint64_t v8 = Phase::HeapAllocator::Allocate(*(Phase::HeapAllocator **)a2, 12 * **(void **)(a2 + 8), v7, 0, **(void **)(a2 + 16));
  bzero(v8, 12 * ((12 * a1 - 12) / 0xCuLL) + 12);
  uint64_t v9 = *a3;
  *(void *)uint64_t v13 = &unk_26D479870;
  *(void *)&v13[8] = v9;
  uint64_t v14 = v13;
  *a4 = v8;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v13);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v13);
}

void sub_22202095C(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D479870;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D479870;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::Vector<float,3ul>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::Vector<float,3ul>*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, Phase **a2)
{
  return Phase::HeapAllocator::Free(*(Phase::HeapAllocator **)(a1 + 8), *a2);
}

void *Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, Phase **a4@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (!a1)
  {
    uint64_t v10 = **(NSObject ***)(Phase::Logger::GetInstance(0) + 112);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v12 = 136315394;
      *(void *)&void v12[4] = "ManagedPtr.hpp";
      *(_WORD *)&v12[12] = 1024;
      *(_DWORD *)&v12[14] = 229;
      _os_log_impl(&dword_221E5E000, v10, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::logic_error) [inCount == 0 is true]: \"Attempting to allocate an array of 0 elements\"", v12, 0x12u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Attempting to allocate an array of 0 elements");
  }
  if (*(void *)(*(void *)a2 + 8)) {
    char v6 = *(const char **)(*(void *)a2 + 8);
  }
  else {
    char v6 = "<Unnamed>";
  }
  unint64_t v7 = Phase::HeapAllocator::Allocate(*(Phase::HeapAllocator **)a2, 4 * **(void **)(a2 + 8), v6, 0, **(void **)(a2 + 16));
  uint64_t v8 = *a3;
  *(void *)uint64_t v12 = &unk_26D4798B8;
  *(void *)&v12[8] = v8;
  uint64_t v13 = v12;
  *a4 = v7;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v12);
  return std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v12);
}

void sub_222020B84(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4798B8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4798B8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1},std::allocator<std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&>(unsigned long,Phase::HeapAllocator&&,std::unique_ptr<float [],std::function<void ()(void *)>> Phase::details::AllocArray<float,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(float*)#1} const&)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, Phase **a2)
{
  return Phase::HeapAllocator::Free(*(Phase::HeapAllocator **)(a1 + 8), *a2);
}

void std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D479948;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D479948;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1},std::allocator<std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>> Phase::details::AllocMem<Phase::PackedSubbandArray<float>,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void *)#1}>,void ()(void *)>::operator()(uint64_t a1, Phase **a2)
{
  return Phase::HeapAllocator::Free(*(Phase::HeapAllocator **)(a1 + 8), *a2);
}

const char *Phase::SpatialModeler::PresetLateReverbErrorCategory::name(Phase::SpatialModeler::PresetLateReverbErrorCategory *this)
{
  return "Preset Late Reverb";
}

void Phase::SpatialModeler::PresetLateReverbErrorCategory::message(int a1@<W1>, uint64_t a2@<X8>)
{
  if (a1 >= 8) {
    std::terminate();
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Preset late reverb ");
  Phase::SpatialModeler::ModelerErrorMessage(a1, (const void **)__p, a2);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
}

void sub_222020D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Phase::SpatialModeler::PresetLateReverbErrorCategory::~PresetLateReverbErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);

  JUMPOUT(0x223C938A0);
}

void Phase::SpatialModeler::PresetLateReverb::GetSupportedQueryDescs(std::string **a1@<X8>)
{
  *(void *)&long long v20 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v7, "CULL");
  uint64_t v8 = 0;
  uint64_t v9 = 0x100000001;
  int v10 = 1;
  long long v11 = 0u;
  long long v12 = 0u;
  std::string::basic_string[abi:ne180100]<0>(v13, "CLUSTER");
  void v13[3] = 1;
  void v13[4] = 0x200000003;
  int v14 = 1;
  long long v15 = 0u;
  long long v16 = 0u;
  std::string::basic_string[abi:ne180100]<0>(v17, "SPATIAL");
  v17[3] = 2;
  void v17[4] = 0x300000002;
  int v18 = 1;
  memset(v19, 0, sizeof(v19));
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v3 = (std::string *)operator new(0xF0uLL);
  *a1 = v3;
  a1[1] = v3;
  a1[2] = v3 + 10;
  uint64_t v4 = 0;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<Phase::SpatialModeler::QueryDesc>,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc const*,Phase::SpatialModeler::QueryDesc*>((uint64_t)(a1 + 2), &v7, &v20, v3);
  do
  {
    uint64_t v5 = (char *)&v7 + v4 * 16;
    char v6 = *(void **)&v19[v4];
    if (v6)
    {
      *((void *)v5 + 27) = v6;
      operator delete(v6);
    }
    if (v5[183] < 0) {
      operator delete(*((void **)v5 + 20));
    }
    v4 -= 5;
  }
  while (v4 != -15);
}

void sub_222020F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  *(void *)(v12 + 8) = v13;
  std::vector<Phase::SpatialModeler::QueryDesc>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (uint64_t i = 160; i != -80; i -= 80)
    Phase::SpatialModeler::QueryDesc::~QueryDesc((Phase::SpatialModeler::QueryDesc *)(&a12 + i));
  _Unwind_Resume(a1);
}

void Phase::SpatialModeler::PresetLateReverb::Init(uint64_t a1, void *a2)
{
  *(void *)(a1 + 1024) = *a2;
}

void *Phase::SpatialModeler::PresetLateReverb::Shutdown(Phase::SpatialModeler::PresetLateReverb *this)
{
  return Phase::HeapAllocator::Destroy((Phase::SpatialModeler::PresetLateReverb *)((char *)this + 40));
}

void Phase::SpatialModeler::PresetLateReverb::RunQuery(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v146 = *MEMORY[0x263EF8340];
  uint64_t v5 = a2[10];
  if (v5 == 2)
  {
    uint64_t v9 = a2[11];
    if (v9 && *(_DWORD *)v9 == 2)
    {
      uint64_t v10 = a2[12];
      if (v10 && *(_DWORD *)v10 == 3)
      {
        if (*(void *)(v9 + 208))
        {
          if (!a1) {
            goto LABEL_120;
          }
          uint64_t v11 = (**(uint64_t (***)(uint64_t))a1)(a1);
LABEL_17:
          uint64_t v12 = 6;
          goto LABEL_39;
        }
        uint64_t v32 = a2[8];
        if (v32)
        {
          unint64_t v33 = *(void *)(v32 + 160);
          uint64_t v34 = *(unsigned int *)(v9 + 508);
          long long v129 = 0u;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v132 = 0u;
          long long v133 = 0u;
          long long v134 = 0u;
          memset(v135, 0, 28);
          if (v34)
          {
            unint64_t v35 = (float *)&v129;
            uint64_t v36 = v9;
            uint64_t v37 = v34;
            do
            {
              *v35++ = *(float *)(v36 + 384) - *(float *)(v36 + 64);
              v36 += 4;
              --v37;
            }
            while (v37);
            long long v144 = 0u;
            memset(v145, 0, 28);
            long long v142 = 0u;
            long long v143 = 0u;
            long long v140 = 0u;
            long long v141 = 0u;
            uint64_t v38 = (float *)&v139;
            uint64_t v39 = (float *)&v129;
            long long v139 = 0u;
            do
            {
              float v40 = *v39++;
              *v38++ = fmaxf(v40, 0.0);
              --v34;
            }
            while (v34);
          }
          else
          {
            memset(v145, 0, sizeof(v145));
            long long v143 = 0uLL;
            long long v144 = 0uLL;
            long long v141 = 0uLL;
            long long v142 = 0uLL;
            long long v139 = 0uLL;
            long long v140 = 0uLL;
          }
          uint64_t v89 = *(void *)(v9 + 8);
          if (v89)
          {
            float v90 = 0.0;
            uint64_t v91 = (float *)&v139;
            uint64_t v92 = *(void *)(v9 + 8);
            do
            {
              float v93 = *v91++;
              float v94 = v93;
              if (v93 > v90) {
                float v90 = v94;
              }
              --v92;
            }
            while (v92);
          }
          else
          {
            float v90 = 0.0;
          }
          float v95 = -v90;
          if (v33 != *(void *)(a1 + 1040))
          {
            uint64_t v96 = **(void **)(a1 + 1024);
            double v97 = exp(v95 * 10.0 / 10.0 * 0.115129255);
            Phase::SpatialModeler::ReverbPresetDatabase::Implementation::Query(v96, v33, 1, v89, (uint64_t)&v129, v97);
            *(_DWORD *)(a1 + 1056) = v129;
            *(unsigned char *)(a1 + 1060) = BYTE4(v129);
            std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1064), (uint64_t *)&v129 + 1);
            *(void *)(a1 + 1104) = v132;
            std::unique_ptr<float [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1112), (uint64_t *)&v132 + 1);
            *(void *)(a1 + 1152) = *(void *)v135;
            std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1160), (uint64_t *)&v135[8]);
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(a1 + 1200), &v136);
            *(void *)(a1 + 1240) = v137[4];
            *(_OWORD *)(a1 + 1248) = v138;
            std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100](&v136);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v137);
            std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v135[8], 0);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v135[16]);
            std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v132 + 1);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v133);
            std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v129 + 1);
            std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v130);
          }
          uint64_t v98 = *(void *)(a1 + 1104);
          if (v98)
          {
            Phase::SpatialModeler::AllocMetadata<float,Phase::HeapAllocator>((uint64_t *)v10, (Phase *)(a1 + 40), v98, *(void *)(v9 + 8));
            uint64_t v99 = *(void *)(a1 + 1104);
            if (v99)
            {
              uint64_t v100 = 0;
              uint64_t v101 = *(void *)(a1 + 1064);
              uint64_t v102 = *(void *)(v10 + 8);
              uint64_t v103 = *(void *)(a1 + 1112);
              uint64_t v104 = *(void *)(v10 + 56);
              uint64_t v105 = *(void *)(v10 + 104);
              uint64_t v106 = (_DWORD *)(v105 + 16);
              uint64_t v107 = *(void *)(v105 + 8);
              uint64_t v108 = *(void *)(a1 + 1160);
              uint64_t v109 = (int *)(v108 + 16);
              uint64_t v110 = *(void *)(v108 + 8);
              uint64_t v111 = *(void *)(v9 + 8);
              uint64_t v112 = *(void *)(a1 + 1200);
              uint64_t v113 = *(void *)(v10 + 144);
              uint64_t v114 = 4 * v107;
              uint64_t v115 = 4 * v110;
              do
              {
                float v116 = (_DWORD *)(v101 + 12 * v100);
                float v117 = (_DWORD *)(v102 + 12 * v100);
                *float v117 = *v116;
                v117[1] = v116[1];
                v117[2] = v116[2];
                *(_DWORD *)(v104 + 4 * v100) = *(_DWORD *)(v103 + 4 * v100);
                float v118 = v109;
                float v119 = v106;
                for (uint64_t i = v111; i; --i)
                {
                  int v121 = *v118++;
                  *v119++ = v121;
                }
                *(unsigned char *)(v113 + v100) = *(unsigned char *)(v112 + v100);
                ++v100;
                uint64_t v106 = (_DWORD *)((char *)v106 + v114);
                uint64_t v109 = (int *)((char *)v109 + v115);
              }
              while (v100 != v99);
            }
            *(unsigned char *)(v10 + 201) = *(unsigned char *)(a1 + 1257);
            *(_DWORD *)(v10 + 204) = 0;
          }
          else
          {
            Phase::SpatialModeler::ClearMetadata<float>((uint64_t *)v10);
          }
          int v8 = 1;
          BOOL v122 = 1;
          if (v33 == *(void *)(a1 + 1040)) {
            BOOL v122 = *(float *)(a1 + 1048) != v95;
          }
          *(unsigned char *)(v10 + 4) = v122;
          *(void *)(a1 + 1040) = v33;
          *(float *)(a1 + 1048) = v95;
          goto LABEL_40;
        }
LABEL_48:
        if (a1)
        {
          uint64_t v11 = (**(uint64_t (***)(uint64_t))a1)(a1);
          uint64_t v12 = 5;
          goto LABEL_39;
        }
        goto LABEL_120;
      }
LABEL_37:
      if (a1)
      {
        uint64_t v11 = (**(uint64_t (***)(uint64_t))a1)(a1);
        uint64_t v12 = 4;
        goto LABEL_39;
      }
LABEL_120:
      std::terminate();
    }
LABEL_33:
    if (!a1) {
      goto LABEL_120;
    }
    uint64_t v11 = (**(uint64_t (***)(uint64_t))a1)(a1);
    uint64_t v12 = 3;
LABEL_39:
    *(void *)a3 = v12;
    *(void *)(a3 + 8) = v11;
    int v8 = 2;
    goto LABEL_40;
  }
  if (v5 == 1)
  {
    uint64_t v13 = a2[11];
    if (v13 && *(_DWORD *)v13 == 3)
    {
      uint64_t v14 = a2[12];
      if (v14 && *(_DWORD *)v14 == 2)
      {
        uint64_t v15 = a2[8];
        if (v15)
        {
          uint64_t v125 = a2[8];
          uint64_t v16 = *(void *)(v15 + 160);
          uint64_t v123 = *(void *)(a1 + 1032);
          *(void *)(a1 + 1032) = v16;
          if (*(void *)(a1 + 48)) {
            __int16 v17 = *(const char **)(a1 + 48);
          }
          else {
            __int16 v17 = "<Unnamed>";
          }
          int v18 = Phase::HeapAllocator::Allocate((Phase::HeapAllocator *)(a1 + 40), 0x150uLL, v17, 0, 0x10uLL);
          __int16 v19 = v18;
          uint64_t v20 = 0;
          *(_OWORD *)int v18 = 0u;
          *((_OWORD *)v18 + 1) = 0u;
          *((_DWORD *)v18 + 8) = 0;
          *(void *)((char *)v18 + 36) = 1065353216;
          *(void *)((char *)v18 + 44) = 0;
          *((_DWORD *)v18 + 13) = 1065353216;
          do
          {
            uint64_t v21 = (char *)v18 + v20;
            *((_DWORD *)v21 + 14) = 0;
            *((void *)v21 + 8) = 0;
            v20 += 16;
          }
          while (v20 != 128);
          *((void *)v18 + 23) = 0;
          *(void *)&long long v129 = 0;
          DWORD2(v129) = 0;
          Phase::Subbands<float>::Subbands((uint64_t)v18 + 192, &v129, 3);
          *((unsigned char *)v19 + 320) = 0;
          *(void *)&long long v129 = &unk_26D4797E0;
          *((void *)&v129 + 1) = a1 + 40;
          *((void *)&v130 + 1) = &v129;
          *(void *)&long long v139 = v19;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v139 + 8, (uint64_t)&v129);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v129);
          uint64_t v22 = v139;
          *(void *)&long long v139 = 0;
          *(void *)&long long v129 = v22;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v129 + 8, (uint64_t)&v139 + 8);
          *((void *)&v131 + 1) = 1;
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v139);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v139 + 1);
          uint64_t v23 = v14 + 8;
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v14 + 8), (uint64_t *)&v129);
          *(void *)(v14 + 48) = *((void *)&v131 + 1);
          std::unique_ptr<Phase::SpatialModeler::RenderGroup [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v129);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v129 + 1);
          if (*(void *)(a1 + 48)) {
            uint64_t v24 = *(const char **)(a1 + 48);
          }
          else {
            uint64_t v24 = "<Unnamed>";
          }
          __int16 v25 = Phase::HeapAllocator::Allocate((Phase::HeapAllocator *)(a1 + 40), 1uLL, v24, 0, 1uLL);
          *(void *)&long long v129 = &unk_26D479900;
          *((void *)&v129 + 1) = a1 + 40;
          *((void *)&v130 + 1) = &v129;
          *(void *)&long long v139 = v25;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v139 + 8, (uint64_t)&v129);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v129);
          uint64_t v26 = v139;
          *(void *)&long long v139 = 0;
          *(void *)&long long v129 = v26;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v129 + 8, (uint64_t)&v139 + 8);
          *((void *)&v131 + 1) = 1;
          std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v139);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v139 + 1);
          std::unique_ptr<BOOL [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v14 + 56), (uint64_t *)&v129);
          *(void *)(v14 + 96) = *((void *)&v131 + 1);
          std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v129);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v129 + 1);
          if (*(void *)(v13 + 96))
          {
            BOOL v27 = v16 != v123;
            uint64_t v28 = *(long long **)(v13 + 56);
            uint64_t v29 = *(_OWORD **)v23;
            long long v30 = *v28;
            *((void *)v29 + 2) = *((void *)v28 + 2);
            *uint64_t v29 = v30;
            *((_DWORD *)v29 + 6) = *((_DWORD *)v28 + 6);
            *((_DWORD *)v29 + 7) = *((_DWORD *)v28 + 7);
            *((_DWORD *)v29 + 8) = *((_DWORD *)v28 + 8);
            *((_DWORD *)v29 + 9) = *((_DWORD *)v28 + 9);
            *((_DWORD *)v29 + 10) = *((_DWORD *)v28 + 10);
            *((_DWORD *)v29 + 11) = *((_DWORD *)v28 + 11);
            *((_DWORD *)v29 + 12) = *((_DWORD *)v28 + 12);
            *((_DWORD *)v29 + 13) = *((_DWORD *)v28 + 13);
            memcpy((char *)v29 + 56, (char *)v28 + 56, 0x109uLL);
          }
          else
          {
            MEMORY[0x223C944F0](&v129);
            *(_OWORD *)*(void *)uint64_t v23 = v129;
            BOOL v27 = 1;
          }
          **(unsigned char **)(v14 + 56) = v27;
          *(unsigned char *)(*(void *)v23 + 320) = 1;
          uint64_t v41 = *(void *)(v13 + 144);
          if (v41)
          {
            uint64_t v42 = 0;
            uint64_t v43 = *(void *)(v13 + 104);
            uint64_t v44 = (float *)(v43 + 16);
            float v45 = -3.4028e38;
            do
            {
              uint64_t v46 = *(unsigned int *)(v43 + 304 * v42 + 140);
              uint64_t v47 = v44;
              if (v46)
              {
                do
                {
                  float v48 = *v47++;
                  float v49 = v48;
                  if (v48 > v45) {
                    float v45 = v49;
                  }
                  --v46;
                }
                while (v46);
              }
              ++v42;
              v44 += 76;
            }
            while (v42 != v41);
          }
          else
          {
            float v45 = -3.4028e38;
          }
          *(float *)&long long v139 = v45;
          *((float *)&v139 + 1) = v45;
          *((float *)&v139 + 2) = v45;
          Phase::Subbands<float>::Subbands((uint64_t)&v129, &v139, 3);
          uint64_t v50 = *(_OWORD **)v23;
          long long v51 = v134;
          v50[16] = v133;
          v50[17] = v51;
          long long v52 = *(_OWORD *)&v135[16];
          v50[18] = *(_OWORD *)v135;
          v50[19] = v52;
          long long v53 = v130;
          v50[12] = v129;
          v50[13] = v53;
          long long v54 = v132;
          v50[14] = v131;
          v50[15] = v54;
          uint64_t v55 = *(void *)(v13 + 152);
          if (*(_DWORD *)(v125 + 136) <= v55
            || (uint64_t v56 = *(void *)(v125 + 120), *(_DWORD *)(v56 + 24 * v55 + 20) != HIDWORD(v55))
            || (uint64_t v57 = *(void *)(v56 + 24 * *(void *)(v13 + 152))) == 0
            || *(_DWORD *)v57 != 2)
          {
            if (a1)
            {
              uint64_t v11 = (**(uint64_t (***)(uint64_t))a1)(a1);
              uint64_t v12 = 7;
              goto LABEL_39;
            }
            goto LABEL_120;
          }
          uint64_t v58 = *(void *)(v13 + 144);
          uint64_t v127 = 8;
          uint64_t v128 = v58;
          *(void *)&long long v129 = a1 + 40;
          *((void *)&v129 + 1) = &v128;
          *(void *)&long long v130 = &v127;
          uint64_t v126 = a1 + 40;
          Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(void)#1} const&,std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>> Phase::details::AllocArray<Phase::SpatialModeler::SubmixRoutingOutput,Phase::HeapAllocator>(Phase::HeapAllocator &,unsigned long,unsigned long)::{lambda(Phase::SpatialModeler::SubmixRoutingOutput*)#1} const&>(v58, (uint64_t)&v129, &v126, (Phase **)&v139);
          uint64_t v59 = v139;
          *(void *)&long long v139 = 0;
          *(void *)&long long v129 = v59;
          std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v129 + 8, (uint64_t)&v139 + 8);
          *((void *)&v131 + 1) = v58;
          std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v139);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v139 + 1);
          std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)(v14 + 104), (uint64_t *)&v129);
          *(void *)(v14 + 144) = *((void *)&v131 + 1);
          std::unique_ptr<Phase::SpatialModeler::SubmixRoutingOutput [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v129);
          std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)&v129 + 1);
          unint64_t v60 = *(void *)(v14 + 144);
          if (!v60) {
            goto LABEL_9;
          }
          uint64_t v61 = 0;
          uint64_t v62 = 0;
          unint64_t v63 = 0;
          uint64_t v64 = *(void *)(v14 + 104);
          uint64_t v65 = v125;
          while (1)
          {
            *(void *)(v64 + v62) = 0;
            uint64_t v66 = *(void *)(v13 + 104);
            uint64_t v67 = *(void *)(v66 + v61 + 144);
            if (*(_DWORD *)(v65 + 136) <= v67) {
              break;
            }
            uint64_t v68 = *(void *)(v65 + 120);
            if (*(_DWORD *)(v68 + 24 * v67 + 20) != HIDWORD(v67)) {
              break;
            }
            uint64_t v69 = *(void *)(v68 + 24 * *(void *)(v66 + v61 + 144));
            if (!v69 || *(_DWORD *)v69 != 3) {
              break;
            }
            long long v70 = *(uint64_t **)(v69 + 120);
            float v71 = 0.0;
            if (v70 != *(uint64_t **)(v69 + 128))
            {
              uint64_t v72 = *v70;
              if (*(_DWORD *)(v65 + 112) > *v70)
              {
                uint64_t v73 = *(void *)(v65 + 96);
                if (*(_DWORD *)(v73 + 24 * v72 + 20) == HIDWORD(v72))
                {
                  long long v74 = *(float **)(v73 + 24 * v72);
                  if (v74) {
                    float v71 = (float)(*(float *)(v69 + 76)
                  }
                                * fmaxf(fmaxf(v74[9] - v74[6], v74[10] - v74[7]), v74[11] - v74[8]))
                        * 0.5;
                }
              }
            }
            uint64_t v75 = v66 + v61;
            if (*(_DWORD *)(v75 + 176) == 1) {
              uint64_t v76 = *(void *)(v75 + 184);
            }
            else {
              uint64_t v76 = 0;
            }
            if (*(_DWORD *)(v65 + 40) > v76
              && (uint64_t v77 = *(void *)(v65 + 24), *(_DWORD *)(v77 + 24 * v76 + 20) == HIDWORD(v76))
              && (uint64_t v78 = *(void *)(v77 + 24 * v76)) != 0)
            {
              float v79 = *(float *)(v57 + 64) - *(float *)(v69 + 64);
              float v80 = *(float *)(v57 + 68) - *(float *)(v69 + 68);
              float v81 = sqrtf((float)((float)(v79 * v79) + (float)(v80 * v80))+ (float)((float)(*(float *)(v57 + 72) - *(float *)(v69 + 72))* (float)(*(float *)(v57 + 72) - *(float *)(v69 + 72))));
              float v82 = *(double *)(v57 + 152);
              float v83 = fmaxf(v82, v71 + (float)(v81 - v71));
              if (*(_DWORD *)v78 == 2)
              {
                uint64_t v86 = **(void **)(v78 + 40);
                if (!v86) {
                  goto LABEL_120;
                }
                float v87 = Phase::Envelope<float>::operator()((float **)(v86 + 16), v83);
                if (v87 <= 0.0) {
                  float v87 = COERCE_FLOAT(1);
                }
                float v84 = (float)((float)(logf(v87) * 8.6859) / 10.0) * 10.0;
                uint64_t v64 = *(void *)(v14 + 104);
                unint64_t v60 = *(void *)(v14 + 144);
                uint64_t v65 = v125;
              }
              else
              {
                float v84 = 0.0;
                if (*(_DWORD *)v78 == 1)
                {
                  unint64_t v124 = v60;
                  uint64_t v85 = **(void **)(v78 + 40);
                  if (!v85) {
                    goto LABEL_120;
                  }
                  float v84 = (float)((float)(log2f(v83 / (float)(v71 + 1.0)) * -6.0206) * 0.5) * *(float *)(v85 + 16);
                  unint64_t v60 = v124;
                  uint64_t v65 = v125;
                }
              }
              double v88 = v84;
              if (v84 > 0.0) {
                double v88 = 0.0;
              }
              *(double *)(v64 + v62 + 8) = v88;
            }
            else
            {
              *(void *)(v64 + v62 + 8) = 0;
            }
            ++v63;
            v62 += 16;
            v61 += 304;
            int v8 = 1;
            if (v63 >= v60) {
              goto LABEL_40;
            }
          }
          if (!a1) {
            goto LABEL_120;
          }
          uint64_t v11 = (**(uint64_t (***)(uint64_t))a1)(a1);
          goto LABEL_17;
        }
        goto LABEL_48;
      }
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  if (v5)
  {
    if (a1)
    {
      uint64_t v31 = (**(uint64_t (***)(uint64_t))a1)(a1);
      *(void *)a3 = 2;
      *(void *)(a3 + 8) = v31;
      *(_DWORD *)(a3 + 24) = 2;
      return;
    }
    goto LABEL_120;
  }
  char v6 = (_DWORD *)a2[11];
  if (!v6 || *v6 != 1) {
    goto LABEL_33;
  }
  long long v7 = (_DWORD *)a2[12];
  if (!v7 || *v7 != 1) {
    goto LABEL_37;
  }
  v7[2] = 0;
LABEL_9:
  int v8 = 1;
LABEL_40:
  *(_DWORD *)(a3 + 24) = v8;
}

uint64_t Phase::SpatialModeler::PresetLateReverb::GetGraphDescription@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 2:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x223C933A0](a2, "PresetLateReverbSpatialQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t result = MEMORY[0x223C933A0](v4, "FullPresetLateReverbSpatialGraph");
      goto LABEL_7;
    case 1:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x223C933A0](a2, "PresetLateReverbClusterQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t result = MEMORY[0x223C933A0](v4, "FullPresetLateReverbClusterGraph");
      goto LABEL_7;
    case 0:
      *(_OWORD *)(a2 + 16) = 0uLL;
      *(_OWORD *)(a2 + 32) = 0uLL;
      *(_OWORD *)a2 = 0uLL;
      MEMORY[0x223C933A0](a2, "PresetLateReverbCullQueryGraph");
      std::vector<Phase::SpatialModeler::GraphDescriptionNode>::resize((uint64_t *)(a2 + 24), 1uLL);
      uint64_t v4 = *(void *)(a2 + 24);
      uint64_t result = MEMORY[0x223C933A0](v4, "FullPresetLateReverbCullGraph");
LABEL_7:
      *(void *)(v4 + 24) = 0xFFFFFFFFLL;
      return result;
  }
  *(_OWORD *)(a2 + 16) = 0uLL;
  *(_OWORD *)(a2 + 32) = 0uLL;
  *(_OWORD *)a2 = 0uLL;
  return result;
}

void sub_222021D54(_Unwind_Exception *a1)
{
  Phase::SpatialModeler::GraphDescription::~GraphDescription(v1);
  _Unwind_Resume(a1);
}

uint64_t Phase::SpatialModeler::PresetLateReverb::GetErrorCategory(Phase::SpatialModeler::PresetLateReverb *this)
{
  return (uint64_t)this + 32;
}

BOOL Phase::SpatialModeler::PresetLateReverb::IsQueryIndexValid(Phase::SpatialModeler::PresetLateReverb *this, unint64_t a2)
{
  return a2 < 3;
}

void Phase::SpatialModeler::PresetLateReverb::~PresetLateReverb(Phase::SpatialModeler::PresetLateReverb *this)
{
  *(void *)this = &unk_26D4799D8;
  uint64_t v2 = (Phase::SpatialModeler::PresetLateReverb *)((char *)this + 40);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 150);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 151);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 145, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 146);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 139);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 140);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 133);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 134);
  Phase::HeapAllocator::Destroy(v2);
  std::error_category::~error_category((std::error_category *)this + 4);
  *(void *)this = &unk_26D471808;
  std::error_category::~error_category((std::error_category *)this + 1);
}

{
  Phase::HeapAllocator *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D4799D8;
  uint64_t v2 = (Phase::SpatialModeler::PresetLateReverb *)((char *)this + 40);
  std::unique_ptr<BOOL [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 150);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 151);
  std::unique_ptr<Phase::PackedSubbandArray<float>,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 145, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 146);
  std::unique_ptr<float [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 139);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 140);
  std::unique_ptr<Phase::Vector<float,3ul> [],std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this + 133);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 134);
  Phase::HeapAllocator::Destroy(v2);
  std::error_category::~error_category((std::error_category *)this + 4);
  *(void *)this = &unk_26D471808;
  std::error_category::~error_category((std::error_category *)this + 1);

  JUMPOUT(0x223C938A0);
}

uint64_t Phase::Controller::PreSpatialTapSourceObject::PreSpatialTapSourceObject(uint64_t a1, atomic_ullong *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26D479A48;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 112) = atomic_fetch_add(a2, 1uLL);
  *(void *)(a1 + 120) = a4;
  *(void *)(a1 + 128) = a5;
  *(void *)(a1 + 136) = a6;
  *(void *)(a1 + 144) = a7;
  std::__function::__value_func<void ()(float *,unsigned long)>::__value_func[abi:ne180100](a1 + 152, a8);
  *(unsigned char *)(a1 + 184) = 0;
  uint64_t v9 = (void *)[objc_alloc(MEMORY[0x263EF9328]) initWithLayoutTag:6553601];
  uint64_t v10 = [objc_alloc(MEMORY[0x263EF9388]) initWithCommonFormat:1 sampleRate:0 interleaved:v9 channelLayout:48000.0];
  uint64_t v11 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v10;

  return a1;
}

void sub_22202203C(_Unwind_Exception *a1)
{
  std::unique_ptr<Phase::Controller::VoiceBufferExchangeManager>::reset[abi:ne180100](v2, 0);
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*(void **)(v1 + 88));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*(void **)(v1 + 64));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*(void **)(v1 + 40));

  _Unwind_Resume(a1);
}

void Phase::Controller::PreSpatialTapSourceObject::~PreSpatialTapSourceObject(Phase::Controller::PreSpatialTapSourceObject *this)
{
  uint64_t v1 = this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 184))
  {
    this = (Phase::Controller::PreSpatialTapSourceObject *)Phase::Controller::DVM::VoiceGraph::RemoveTap(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 16) + 72), *((void *)this + 14));
    if (!this) {
      *((unsigned char *)v1 + 184) = 0;
    }
  }
  uint64_t v2 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(this)
                                                                                     + 944)));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)v1 + 14);
    uint64_t v4 = GetTapTypeString(*((void *)v1 + 18));
    int v5 = 136316162;
    char v6 = "PreSpatialTap.mm";
    __int16 v7 = 1024;
    int v8 = 43;
    __int16 v9 = 2048;
    uint64_t v10 = v1;
    __int16 v11 = 2048;
    uint64_t v12 = v3;
    __int16 v13 = 2112;
    uint64_t v14 = v4;
    _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d pre-spatialTap@%p: tapId %llu, type %@ destroyed!", (uint8_t *)&v5, 0x30u);
  }
  std::__function::__value_func<void ()(float *,unsigned long)>::~__value_func[abi:ne180100]((void *)v1 + 19);
  std::unique_ptr<Phase::Controller::VoiceBufferExchangeManager>::reset[abi:ne180100]((uint64_t *)v1 + 13, 0);
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*((void **)v1 + 11));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*((void **)v1 + 8));
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*((void **)v1 + 5));
}

{
  uint64_t vars8;

  Phase::Controller::PreSpatialTapSourceObject::~PreSpatialTapSourceObject(this);

  JUMPOUT(0x223C938A0);
}

void sub_2220221FC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::PreSpatialTapSourceObject::UnregisterTap(uint64_t this)
{
  if (*(unsigned char *)(this + 184))
  {
    uint64_t v1 = this;
    this = Phase::Controller::DVM::VoiceGraph::RemoveTap(*(Phase::Controller::DVM::VoiceGraph **)(**(void **)(this + 128) + 72), *(void *)(this + 112));
    if (!this) {
      *(unsigned char *)(v1 + 184) = 0;
    }
  }
  return this;
}

void Phase::Controller::PreSpatialTapSourceObject::UnregisterTapsAndReset(Phase::Controller::PreSpatialTapSourceObject *this)
{
  if (*((unsigned char *)this + 184)
    && !Phase::Controller::DVM::VoiceGraph::RemoveTap(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 16) + 72), *((void *)this + 14)))
  {
    *((unsigned char *)this + 184) = 0;
  }
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*((void **)this + 11));
  *((void *)this + 10) = (char *)this + 88;
  *((void *)this + 12) = 0;
  *((void *)this + 11) = 0;
  uint64_t v2 = (void *)((char *)this + 40);
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(*((void **)this + 5));
  uint64_t v4 = (void *)*((void *)this + 8);
  uint64_t v3 = (void *)((char *)this + 64);
  *(v3 - 4) = v2;
  void *v2 = 0;
  *(v3 - 2) = 0;
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(v4);
  *(v3 - 1) = v3;
  *uint64_t v3 = 0;
  v3[1] = 0;
}

void Phase::Controller::PreSpatialTapSourceObject::RegisterTap(Phase::Controller::PreSpatialTapSourceObject *this)
{
  v32[4] = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 184))
  {
    int v5 = (uint64_t *)*((void *)this + 16);
    unint64_t v6 = *((void *)this + 14);
    std::__function::__value_func<void ()(float *,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)this + 152);
    LODWORD(v5) = Phase::Controller::DSPVoiceManager::AddTap(v5, v6, (uint64_t)v32, *((void *)this + 18));
    __int16 v7 = (Phase::Logger *)std::__function::__value_func<void ()(float *,unsigned long)>::~__value_func[abi:ne180100](v32);
    if (v5 == 4)
    {
      unint64_t add = atomic_fetch_add(*((atomic_ullong *volatile *)this + 3), 1uLL);
      __int16 v9 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v7)
                                                                                         + 944)));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *((void *)this + 14);
        __int16 v11 = GetTapTypeString(*((void *)this + 18));
        *(_DWORD *)buf = 136316418;
        *(void *)&uint8_t buf[4] = "PreSpatialTap.mm";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 69;
        __int16 v24 = 2048;
        __int16 v25 = this;
        __int16 v26 = 2048;
        uint64_t v27 = v10;
        __int16 v28 = 2112;
        uint64_t v29 = v11;
        __int16 v30 = 2048;
        unint64_t v31 = add;
        _os_log_impl(&dword_221E5E000, v9, OS_LOG_TYPE_DEFAULT, "%25s:%-5d pre-spatialTap@%p: tapId %llu, type %@ already registered, trying with new id %llu", buf, 0x3Au);
      }
      uint64_t v12 = (uint64_t *)*((void *)this + 16);
      std::__function::__value_func<void ()(float *,unsigned long)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)this + 152);
      int v13 = Phase::Controller::DSPVoiceManager::AddTap(v12, add, (uint64_t)v22, *((void *)this + 18));
      uint64_t v14 = (Phase::Logger *)std::__function::__value_func<void ()(float *,unsigned long)>::~__value_func[abi:ne180100](v22);
      if (v13)
      {
        uint64_t v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v14)
                                                                                            + 944)));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          uint64_t v16 = *((void *)this + 14);
          __int16 v17 = GetTapTypeString(*((void *)this + 18));
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "PreSpatialTap.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 81;
          __int16 v24 = 2048;
          __int16 v25 = this;
          __int16 v26 = 2048;
          uint64_t v27 = v16;
          __int16 v28 = 2112;
          uint64_t v29 = v17;
          _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d pre-spatialTap@%p: unable to register tapId %llu, type %@", buf, 0x30u);
        }
      }
      else
      {
        int v18 = (void *)*((void *)this + 11);
        *((void *)this + 14) = add;
        std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(v18);
        *((void *)this + 10) = (char *)this + 88;
        *((void *)this + 11) = 0;
        *((void *)this + 12) = 0;
        uint64_t v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v19)
                                                                                            + 944)));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v20 = *((void *)this + 14);
          uint64_t v21 = GetTapTypeString(*((void *)this + 18));
          *(_DWORD *)buf = 136316162;
          *(void *)&uint8_t buf[4] = "PreSpatialTap.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 76;
          __int16 v24 = 2048;
          __int16 v25 = this;
          __int16 v26 = 2048;
          uint64_t v27 = v20;
          __int16 v28 = 2112;
          uint64_t v29 = v21;
          _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_DEFAULT, "%25s:%-5d pre-spatialTap@%p: registered tapId %llu, type %@", buf, 0x30u);
        }
      }
    }
    *(_DWORD *)operator new(4uLL) = 0;
    operator new();
  }
  uint64_t v2 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(this)
                                                                                     + 944)));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *((void *)this + 14);
    uint64_t v4 = GetTapTypeString(*((void *)this + 18));
    *(_DWORD *)buf = 136316162;
    *(void *)&uint8_t buf[4] = "PreSpatialTap.mm";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 59;
    __int16 v24 = 2048;
    __int16 v25 = this;
    __int16 v26 = 2048;
    uint64_t v27 = v3;
    __int16 v28 = 2112;
    uint64_t v29 = v4;
    _os_log_impl(&dword_221E5E000, v2, OS_LOG_TYPE_DEFAULT, "%25s:%-5d pre-spatialTap@%p: tapId %llu, type %@ already registered", buf, 0x30u);
  }
}

void sub_222022AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t *Phase::Controller::PreSpatialTapSourceObject::AddMixer(Phase::Controller::PreSpatialTapSourceObject *this, UniqueObjectId a2)
{
  UniqueObjectId v6 = a2;
  uint64_t v2 = (uint64_t **)((char *)this + 56);
  uint64_t result = std::__tree<Phase::UniqueObjectId>::__find_equal<Phase::UniqueObjectId>((uint64_t)this + 56, &v7, v6.mStorage);
  if (!*result)
  {
    uint64_t v4 = (uint64_t **)result;
    int v5 = (UniqueObjectId *)operator new(0x30uLL);
    v5[2] = v6;
    return std::__tree<Phase::SpatialCategory>::__insert_node_at(v2, v7, v4, (uint64_t *)v5);
  }
  return result;
}

void Phase::Controller::PreSpatialTapSourceObject::AddSource(Phase::Controller::PreSpatialTapSourceObject *this, Handle64 a2)
{
  uint64_t v4 = (Handle64 *)operator new(0x28uLL);
  int v5 = (uint64_t *)v4;
  v4[4].mData = a2.mData;
  UniqueObjectId v6 = (uint64_t **)((char *)this + 40);
  uint64_t v7 = (uint64_t *)*((void *)this + 5);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v7;
        unint64_t v9 = v7[4];
        if (v9 <= a2.mData) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        UniqueObjectId v6 = v8;
        if (!*v8) {
          goto LABEL_9;
        }
      }
      if (v9 >= a2.mData) {
        break;
      }
      uint64_t v7 = (uint64_t *)v7[1];
      if (!v7)
      {
        UniqueObjectId v6 = v8 + 1;
        goto LABEL_9;
      }
    }
    operator delete(v4);
  }
  else
  {
    int v8 = (uint64_t **)((char *)this + 40);
LABEL_9:
    v4->mData = 0;
    v4[1].mData = 0;
    v4[2].mData = (unint64_t)v8;
    *UniqueObjectId v6 = (uint64_t *)v4;
    uint64_t v10 = **((void **)this + 4);
    if (v10)
    {
      *((void *)this + 4) = v10;
      int v5 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 5), v5);
    ++*((void *)this + 6);
  }
}

void Phase::Controller::PreSpatialTapSourceObject::RemoveMixer(uint64_t a1, unint64_t a2, unint64_t a3)
{
}

void Phase::Controller::PreSpatialTapSourceObject::RemoveSource(Phase::Controller::PreSpatialTapSourceObject *this, Handle64 a2)
{
  uint64_t v4 = (uint64_t *)((char *)this + 40);
  uint64_t v3 = (uint64_t *)*((void *)this + 5);
  if (v3)
  {
    int v5 = v4;
    UniqueObjectId v6 = v3;
    do
    {
      unint64_t v7 = v6[4];
      BOOL v8 = v7 >= a2.mData;
      if (v7 >= a2.mData) {
        unint64_t v9 = (uint64_t **)v6;
      }
      else {
        unint64_t v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        int v5 = v6;
      }
      UniqueObjectId v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2.mData)
    {
      uint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          __int16 v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        uint64_t v12 = v5;
        do
        {
          __int16 v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          uint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*((uint64_t **)this + 4) == v5) {
        *((void *)this + 4) = v11;
      }
      --*((void *)this + 6);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

void Phase::Controller::PreSpatialTapSourceObject::Update(Phase::Controller::PreSpatialTapSourceObject *this)
{
  if (!*((unsigned char *)this + 184)) {
    return;
  }
  unint64_t v60 = 0;
  uint64_t v61 = 0;
  uint64_t v62 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  uint64_t v55 = 0;
  unint64_t v56 = 0;
  long long v54 = (char *)&v55;
  if (&v54 == (char **)((char *)this + 56)
    || (v2 = (char *)*((void *)this + 7), uint64_t v3 = (char *)this + 64, v2 == (char *)this + 64))
  {
    unint64_t v14 = 0;
  }
  else
  {
    do
    {
      uint64_t v4 = (uint64_t *)operator new(0x30uLL);
      int v5 = v4;
      *((_OWORD *)v4 + 2) = *((_OWORD *)v2 + 2);
      UniqueObjectId v6 = v55;
      unint64_t v7 = &v55;
      BOOL v8 = &v55;
      if (v55)
      {
        unint64_t v9 = v4[5];
        do
        {
          while (1)
          {
            unint64_t v7 = (uint64_t **)v6;
            unint64_t v10 = v6[5];
            BOOL v11 = v4[4] < (unint64_t)v6[4];
            BOOL v12 = v9 == v10;
            BOOL v13 = v9 < v10;
            if (v12) {
              BOOL v13 = v11;
            }
            if (!v13) {
              break;
            }
            UniqueObjectId v6 = *v7;
            BOOL v8 = v7;
            if (!*v7) {
              goto LABEL_13;
            }
          }
          UniqueObjectId v6 = v7[1];
        }
        while (v6);
        BOOL v8 = v7 + 1;
      }
LABEL_13:
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = (uint64_t)v7;
      *BOOL v8 = v4;
      if (*(void *)v54)
      {
        long long v54 = *(char **)v54;
        int v5 = *v8;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v55, v5);
      unint64_t v14 = ++v56;
      uint64_t v15 = (char *)*((void *)v2 + 1);
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (char *)*((void *)v2 + 2);
          BOOL v12 = *(void *)v16 == (void)v2;
          uint64_t v2 = v16;
        }
        while (!v12);
      }
      uint64_t v2 = v16;
    }
    while (v16 != v3);
  }
  __int16 v17 = (Phase::Controller::PreSpatialTapSourceObject *)*((void *)this + 4);
  if (v17 != (Phase::Controller::PreSpatialTapSourceObject *)((char *)this + 40))
  {
    do
    {
      Phase::Controller::SubmixSystem::GetSubmixesForSource(*((uint64_t **)this + 17), *((uint64_t **)v17 + 4), (uint64_t **)&v54);
      int v18 = (Phase::Controller::PreSpatialTapSourceObject *)*((void *)v17 + 1);
      if (v18)
      {
        do
        {
          __int16 v19 = v18;
          int v18 = *(Phase::Controller::PreSpatialTapSourceObject **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          __int16 v19 = (Phase::Controller::PreSpatialTapSourceObject *)*((void *)v17 + 2);
          BOOL v12 = *(void *)v19 == (void)v17;
          __int16 v17 = v19;
        }
        while (!v12);
      }
      __int16 v17 = v19;
    }
    while (v19 != (Phase::Controller::PreSpatialTapSourceObject *)((char *)this + 40));
    unint64_t v14 = v56;
  }
  if (v14 <= *((void *)this + 12)) {
    unint64_t v20 = *((void *)this + 12);
  }
  else {
    unint64_t v20 = v14;
  }
  std::vector<Phase::UniqueObjectId>::resize((uint64_t)&v60, v20);
  std::vector<Phase::UniqueObjectId>::resize((uint64_t)&v57, v20);
  uint64_t v21 = (char *)*((void *)this + 10);
  *(void *)__simd_float4 x = v54;
  __p[0] = &v55;
  v52.__begin_ = v21;
  uint64_t v50 = (uint64_t **)((char *)this + 88);
  v63[0] = (uint64_t)v60;
  uint64_t v22 = (char *)std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__wrap_iter<Phase::UniqueObjectId*> &>((uint64_t)__x, __p, (uint64_t)&v52, &v50, v63);
  *(void *)__simd_float4 x = *((void *)this + 10);
  __p[0] = (char *)this + 88;
  v52.__begin_ = v54;
  uint64_t v50 = &v55;
  v63[0] = (uint64_t)v57;
  uint64_t v23 = (char *)std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__wrap_iter<Phase::UniqueObjectId*> &>((uint64_t)__x, __p, (uint64_t)&v52, &v50, v63);
  std::vector<Phase::UniqueObjectId>::resize((uint64_t)&v60, (v22 - (char *)v60) >> 4);
  std::vector<Phase::UniqueObjectId>::resize((uint64_t)&v57, (v23 - (unsigned char *)v57) >> 4);
  __int16 v24 = (uint64_t **)((char *)this + 80);
  __int16 v25 = v60;
  if (v60 == v61)
  {
    uint64_t v44 = (unint64_t *)v57;
    if (v57 == v58) {
      goto LABEL_72;
    }
    do
    {
LABEL_70:
      std::__tree<Phase::UniqueObjectId>::__erase_unique<Phase::UniqueObjectId>(v24, *v44, v44[1]);
      Phase::Controller::DVM::VoiceGraph::RemoveSubmixFromTap(*(void *)(**((void **)this + 16) + 72), *((void *)this + 14), *v44, v44[1]);
      v44 += 2;
    }
    while (v44 != v58);
LABEL_71:
    if (!Phase::Controller::DVM::VoiceGraph::ConnectTapToSubmixes(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 16) + 72), *((void *)this + 14)))goto LABEL_72; {
LABEL_77:
    }
    std::terminate();
  }
  char v45 = 0;
  do
  {
    uint64_t v26 = *((void *)this + 15);
    Submisimd_float4 x = Phase::Controller::SubmixSystem::GetSubmix(*((Phase::Logger **)this + 17), *v25, v25[1]);
    if ((Phase::Controller::Submix::ExcludeFromTapBinding(Submix, v26) & 1) == 0)
    {
      uint64_t v28 = Phase::Controller::SubmixSystem::GetSubmix(*((Phase::Logger **)this + 17), *v25, v25[1]);
      (*(void (**)(void **__return_ptr))(*(void *)v28 + 272))(__p);
      __x[0] = 0;
      std::vector<char>::vector(&v52, 0x20uLL, __x);
      std::vector<char>::pointer begin = v52.__begin_;
      *(void *)v52.__begin_ = 6553601;
      *((_DWORD *)begin + 2) = 0;
      Phase::ChannelLayout::GetCrossmixMatrix((int **)__p, (int **)&v52, &v50);
      *(void *)__simd_float4 x = 0;
      uint64_t v47 = 0;
      float v48 = 0;
      int v49 = 1065353216;
      __int16 v30 = v50;
      if (v51 != v50)
      {
        unint64_t v31 = 0;
        unint64_t v32 = 0;
        do
        {
          unint64_t v33 = &v30[3 * v32];
          uint64_t v34 = *v33;
          if ((char *)v33[1] - (char *)*v33 != 4) {
            goto LABEL_77;
          }
          if (v31 >= v48)
          {
            uint64_t v36 = *(char **)__x;
            uint64_t v37 = (uint64_t)&v31[-*(void *)__x] >> 2;
            unint64_t v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62) {
              std::vector<float>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v39 = (uint64_t)&v48[-*(void *)__x];
            if ((uint64_t)&v48[-*(void *)__x] >> 1 > v38) {
              unint64_t v38 = v39 >> 1;
            }
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v40 = v38;
            }
            if (v40)
            {
              uint64_t v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v48, v40);
              uint64_t v36 = *(char **)__x;
              unint64_t v31 = v47;
            }
            else
            {
              uint64_t v41 = 0;
            }
            uint64_t v42 = &v41[4 * v37];
            *(_DWORD *)uint64_t v42 = *(_DWORD *)v34;
            unint64_t v35 = v42 + 4;
            while (v31 != v36)
            {
              int v43 = *((_DWORD *)v31 - 1);
              v31 -= 4;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            *(void *)__simd_float4 x = v42;
            uint64_t v47 = v35;
            float v48 = &v41[4 * v40];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v31 = *(_DWORD *)v34;
            unint64_t v35 = v31 + 4;
          }
          uint64_t v47 = v35;
          ++v32;
          __int16 v30 = v50;
          unint64_t v31 = v35;
        }
        while (0xAAAAAAAAAAAAAAABLL * (v51 - v50) > v32);
      }
      if ((Phase::Controller::DVM::VoiceGraph::AddSubmixToTap(*(Phase::Controller::DVM::VoiceGraph **)(**((void **)this + 16) + 72), *((void *)this + 14), *v25, v25[1], (uint64_t)__x) & 0xFFFFFFFB) == 0)
      {
        std::__tree<Phase::UniqueObjectId>::__emplace_unique_key_args<Phase::UniqueObjectId,Phase::UniqueObjectId const&>((uint64_t **)this + 10, (unint64_t *)v25, v25);
        char v45 = 1;
      }
      if (*(void *)__x)
      {
        uint64_t v47 = *(char **)__x;
        operator delete(*(void **)__x);
      }
      *(void *)__simd_float4 x = &v50;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
      if (v52.__begin_)
      {
        v52.__end_ = v52.__begin_;
        operator delete(v52.__begin_);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v25 += 2;
  }
  while (v25 != v61);
  uint64_t v44 = (unint64_t *)v57;
  __int16 v24 = (uint64_t **)((char *)this + 80);
  if (v57 != v58) {
    goto LABEL_70;
  }
  if (v45) {
    goto LABEL_71;
  }
LABEL_72:
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(v55);
  if (v57)
  {
    uint64_t v58 = v57;
    operator delete(v57);
  }
  if (v60)
  {
    uint64_t v61 = v60;
    operator delete(v60);
  }
}

void sub_222023360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,void *__p,uint64_t a28)
{
  std::__tree<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::__map_value_compare<std::pair<Phase::DspLayer::VoicePool *,long long>,std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>,std::less<std::pair<Phase::DspLayer::VoicePool *,long long>>,true>,std::allocator<std::__value_type<std::pair<Phase::DspLayer::VoicePool *,long long>,Phase::Controller::DVM::VoiceNode *>>>::destroy(a25);
  if (__p) {
    operator delete(__p);
  }
  __int16 v30 = *(void **)(v28 - 136);
  if (v30)
  {
    *(void *)(v28 - 128) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t Phase::Controller::PreSpatialTapSourceObject::IsRegistered(Phase::Controller::PreSpatialTapSourceObject *this)
{
  return *((unsigned __int8 *)this + 184);
}

uint64_t std::unique_ptr<Phase::Controller::VoiceBufferExchangeManager>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>>>::~__hash_table(result);
    JUMPOUT(0x223C938A0);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::__unordered_map_hasher<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,Phase::Controller::VoiceBufferExchange>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = 0;
      uint64_t v4 = (void *)*v2;
      do
      {
        if (LOBYTE(v2[v3 + 13]))
        {
          int v5 = (std::__shared_weak_count *)v2[v3 + 12];
          if (v5) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          }
        }
        v3 -= 3;
      }
      while (v3 != -9);
      operator delete(v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
}

void std::__tree<Phase::UniqueObjectId>::__erase_unique<Phase::UniqueObjectId>(uint64_t **a1, unint64_t a2, unint64_t a3)
{
  int v5 = (uint64_t *)(a1 + 1);
  uint64_t v4 = a1[1];
  if (v4)
  {
    UniqueObjectId v6 = v5;
    unint64_t v7 = v4;
    do
    {
      unint64_t v8 = v7[5];
      BOOL v10 = v8 == a3;
      BOOL v9 = v8 < a3;
      if (v10) {
        BOOL v9 = v7[4] < a2;
      }
      BOOL v10 = !v9;
      if (v9) {
        BOOL v11 = (uint64_t **)(v7 + 1);
      }
      else {
        BOOL v11 = (uint64_t **)v7;
      }
      if (v10) {
        UniqueObjectId v6 = v7;
      }
      unint64_t v7 = *v11;
    }
    while (*v11);
    if (v6 != v5)
    {
      unint64_t v12 = v6[5];
      BOOL v10 = v12 == a3;
      BOOL v13 = v12 > a3;
      if (v10) {
        BOOL v13 = v6[4] > a2;
      }
      if (!v13)
      {
        unint64_t v14 = (uint64_t *)v6[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            unint64_t v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          uint64_t v16 = v6;
          do
          {
            uint64_t v15 = (uint64_t *)v16[2];
            BOOL v10 = *v15 == (void)v16;
            uint64_t v16 = v15;
          }
          while (!v10);
        }
        if (*a1 == v6) {
          *a1 = v15;
        }
        a1[2] = (uint64_t *)((char *)a1[2] - 1);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v4, v6);
        operator delete(v6);
      }
    }
  }
}

_OWORD *std::__set_difference[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__tree_const_iterator<Phase::UniqueObjectId,std::__tree_node<Phase::UniqueObjectId,void *> *,long> &,std::__wrap_iter<Phase::UniqueObjectId*> &>(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t *a5)
{
  while (1)
  {
    int v5 = *(void **)a1;
    UniqueObjectId v6 = (void *)*a2;
    if (*(void *)a1 == *a2) {
      return (_OWORD *)*a5;
    }
    unint64_t v7 = *(void **)a3;
    if (*(void *)a3 == *a4) {
      break;
    }
    unint64_t v9 = v5[4];
    unint64_t v8 = v5[5];
    unint64_t v11 = v7[4];
    unint64_t v10 = v7[5];
    BOOL v12 = v9 < v11;
    if (v8 != v10) {
      BOOL v12 = v8 < v10;
    }
    if (v12)
    {
      *(_OWORD *)*a5 = *((_OWORD *)v5 + 2);
      BOOL v13 = *(void **)a1;
      unint64_t v14 = *(void **)(*(void *)a1 + 8);
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v13[2];
          BOOL v16 = *v15 == (void)v13;
          BOOL v13 = v15;
        }
        while (!v16);
      }
      *(void *)a1 = v15;
      *a5 += 16;
    }
    else
    {
      BOOL v17 = v11 < v9;
      if (v8 != v10) {
        BOOL v17 = v10 < v8;
      }
      if (v17)
      {
        int v18 = (void *)v7[1];
        if (v18)
        {
          do
          {
            __int16 v19 = v18;
            int v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            __int16 v19 = (void *)v7[2];
            BOOL v16 = *v19 == (void)v7;
            unint64_t v7 = v19;
          }
          while (!v16);
        }
        *(void *)a3 = v19;
      }
      else
      {
        unint64_t v20 = (void *)v5[1];
        if (v20)
        {
          do
          {
            uint64_t v21 = v20;
            unint64_t v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            uint64_t v21 = (void *)v5[2];
            BOOL v16 = *v21 == (void)v5;
            int v5 = v21;
          }
          while (!v16);
        }
        *(void *)a1 = v21;
        uint64_t v22 = *(void **)a3;
        uint64_t v23 = *(void **)(*(void *)a3 + 8);
        if (v23)
        {
          do
          {
            __int16 v24 = v23;
            uint64_t v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            __int16 v24 = (void *)v22[2];
            BOOL v16 = *v24 == (void)v22;
            uint64_t v22 = v24;
          }
          while (!v16);
        }
        *(void *)a3 = v24;
      }
    }
  }
  uint64_t v25 = *a5;
  if (v5 == v6) {
    return (_OWORD *)v25;
  }
  uint64_t v26 = (_OWORD *)*a5;
  do
  {
    *uint64_t v26 = *((_OWORD *)v5 + 2);
    uint64_t v27 = (void *)v5[1];
    if (v27)
    {
      do
      {
        uint64_t v28 = v27;
        uint64_t v27 = (void *)*v27;
      }
      while (v27);
    }
    else
    {
      do
      {
        uint64_t v28 = (void *)v5[2];
        BOOL v16 = *v28 == (void)v5;
        int v5 = v28;
      }
      while (!v16);
    }
    ++v26;
    int v5 = v28;
  }
  while (v28 != v6);
  return v26;
}

void Phase::Controller::ProcedureManager_RT::Initialize(Phase::Controller::ProcedureManager_RT *this, int a2)
{
  float v4 = (float)(unint64_t)a2;
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)this + 8, vcvtps_u32_f32(v4 / *((float *)this + 10)));
  std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>((uint64_t)this + 48, vcvtps_u32_f32(v4 / *((float *)this + 20)));
  *(_DWORD *)this = a2;
}

BOOL Phase::Controller::ProcedureManager_RT::PlayProcedure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL active = Phase::Controller::ProcedureManager_RT::AddActiveProcedure((int *)a1, a2, a3);
  if (active)
  {
    uint64_t v7 = a2;
    std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__erase_unique<Phase::Controller::DVM::ProcedureBase *>((void *)(a1 + 48), &v7);
  }
  return active;
}

BOOL Phase::Controller::ProcedureManager_RT::AddActiveProcedure(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  float v4 = a1 + 2;
  if (*((void *)a1 + 4) >= (unint64_t)*a1) {
    return std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::find<Phase::Controller::DVM::ProcedureBase *>(v4, &v7) != 0;
  }
  v6[0] = a2;
  v6[1] = a3;
  std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__emplace_unique_key_args<Phase::Controller::DVM::ProcedureBase *,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>((uint64_t)v4, v6, v6);
  return 1;
}

BOOL Phase::Controller::ProcedureManager_RT::PauseProcedure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5 = Phase::Controller::ProcedureManager_RT::AddInactiveProcedure((int *)a1, a2, a3);
  if (v5)
  {
    uint64_t v7 = a2;
    std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__erase_unique<Phase::Controller::DVM::ProcedureBase *>((void *)(a1 + 8), &v7);
  }
  return v5;
}

BOOL Phase::Controller::ProcedureManager_RT::AddInactiveProcedure(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a2;
  float v4 = a1 + 12;
  if (*((void *)a1 + 9) >= (unint64_t)*a1) {
    return std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::find<Phase::Controller::DVM::ProcedureBase *>(v4, &v7) != 0;
  }
  v6[0] = a2;
  v6[1] = a3;
  std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__emplace_unique_key_args<Phase::Controller::DVM::ProcedureBase *,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>((uint64_t)v4, v6, v6);
  return 1;
}

uint64_t *Phase::Controller::ProcedureManager_RT::StopProcedure(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__erase_unique<Phase::Controller::DVM::ProcedureBase *>((void *)(a1 + 8), &v5);
  if (result != (uint64_t *)1)
  {
    uint64_t v5 = a2;
    return (uint64_t *)(std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__erase_unique<Phase::Controller::DVM::ProcedureBase *>((void *)(a1 + 48), &v5) == (uint64_t *)1);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__emplace_unique_key_args<Phase::Controller::DVM::ProcedureBase *,std::pair<Phase::Controller::DVM::ProcedureBase *,long long>>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  uint64_t v14 = a3[1];
  i[2] = *a3;
  i[3] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::__unordered_map_hasher<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::hash<Phase::SpatialCategory>,std::equal_to<Phase::SpatialCategory>,true>,std::__unordered_map_equal<Phase::SpatialCategory,std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>,std::equal_to<Phase::SpatialCategory>,std::hash<Phase::SpatialCategory>,true>,std::allocator<std::__hash_value_type<Phase::SpatialCategory,Phase::Controller::SpatialCategoryParameters>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_222023C40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::find<Phase::Controller::DVM::ProcedureBase *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::__unordered_map_hasher<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::hash<Phase::Controller::DVM::ProcedureBase *>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,true>,std::__unordered_map_equal<Phase::Controller::DVM::ProcedureBase *,std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>,std::equal_to<Phase::Controller::DVM::ProcedureBase *>,std::hash<Phase::Controller::DVM::ProcedureBase *>,true>,std::allocator<std::__hash_value_type<Phase::Controller::DVM::ProcedureBase *,long long>>>::__erase_unique<Phase::Controller::DVM::ProcedureBase *>(void *a1, void *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::__unordered_map_hasher<void *,std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::hash<void *>,std::equal_to<void *>,true>,std::__unordered_map_equal<void *,std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>,std::equal_to<void *>,std::hash<void *>,true>,std::allocator<std::__hash_value_type<void *,std::shared_ptr<Phase::DspLayer::VoiceBuffer>>>>::find<void *>(a1, a2);
  if (result)
  {
    std::__hash_table<Phase::Controller::Renderer *,std::hash<Phase::Controller::Renderer *>,std::equal_to<Phase::Controller::Renderer *>,std::allocator<Phase::Controller::Renderer *>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

Phase::Controller::ProcedureRegistry *Phase::Controller::ProcedureRegistry::ProcedureRegistry(Phase::Controller::ProcedureRegistry *this)
{
  uint64_t v288 = *MEMORY[0x263EF8340];
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(&__str, "WaterProcedure");
  v283 = 0;
  memset(v276, 0, sizeof(v276));
  int64x2_t v277 = 0u;
  *(_OWORD *)v278 = 0u;
  long long v279 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v281, 0, sizeof(v281));
  std::string::operator=((std::string *)v276, &__str);
  uint64_t v1 = 0xCBF29CE484222325;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    unint64_t v3 = (unint64_t)this;
    uint64_t p_str = __str.__r_.__value_.__r.__words[0];
    if (!__str.__r_.__value_.__r.__words[0]) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t p_str = (uint64_t)&__str;
    unint64_t v3 = (unint64_t)this;
  }
  unsigned int v4 = *(unsigned __int8 *)p_str;
  if (*(unsigned char *)p_str)
  {
    unint64_t v5 = (unsigned __int8 *)(p_str + 1);
    uint64_t p_str = 0xCBF29CE484222325;
    do
    {
      uint64_t p_str = 0x100000001B3 * (p_str ^ v4);
      unsigned int v6 = *v5++;
      unsigned int v4 = v6;
    }
    while (v6);
  }
  else
  {
    uint64_t p_str = 0;
  }
LABEL_9:
  *(void *)&v276[24] = p_str;
  LODWORD(v274) = 0;
  v286[0] = 0.1;
  p_std::string::size_type size = 0x40E7700000000000;
  uint64_t v275 = 0x408F400000000000;
  uint64_t v7 = v277.i64[1];
  if ((void *)v277.i64[1] >= v278[0])
  {
    uint64_t v9 = (v277.i64[1] - v277.i64[0]) >> 6;
    if ((unint64_t)(v9 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v10 <= v9 + 1) {
      unint64_t v10 = v9 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    v285 = v278;
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    *(void *)buf = v11;
    *(void *)&uint8_t buf[8] = v11 + (v9 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v11 + (v12 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[10],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v14 = v277.i64[1];
    uint64_t v13 = v277.i64[0];
    uint64_t v16 = *(void *)&buf[8];
    uint64_t v15 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v20 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v17 = *(_OWORD *)(v14 - 64);
        *(void *)(v16 - 48) = *(void *)(v14 - 48);
        *(_OWORD *)(v16 - 64) = v17;
        *(void *)(v14 - 56) = 0;
        *(void *)(v14 - 48) = 0;
        *(void *)(v14 - 64) = 0;
        long long v18 = *(_OWORD *)(v14 - 40);
        long long v19 = *(_OWORD *)(v14 - 24);
        *(void *)(v16 - 8) = *(void *)(v14 - 8);
        *(_OWORD *)(v16 - 24) = v19;
        *(_OWORD *)(v16 - 40) = v18;
        v16 -= 64;
        v14 -= 64;
      }
      while (v14 != v13);
      int64x2_t v20 = v277;
    }
    unint64_t v8 = (std::string *)(v15 + 64);
    v277.i64[0] = v16;
    v277.i64[1] = v15 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v20;
    uint64_t v21 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v21;
    *(void *)buf = v20.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[10],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>((std::string *)v277.i64[1], (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    unint64_t v8 = (std::string *)(v7 + 64);
  }
  v277.i64[1] = (uint64_t)v8;
  LODWORD(v275) = 1;
  v286[0] = 0.1;
  LODWORD(v274) = 5;
  p_std::string::size_type size = 0x3FF0000000000000;
  if (v8 >= v278[0])
  {
    uint64_t v23 = ((uint64_t)v8 - v277.i64[0]) >> 6;
    if ((unint64_t)(v23 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v24 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v24 <= v23 + 1) {
      unint64_t v24 = v23 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    v285 = v278;
    if (v25) {
      unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v25);
    }
    else {
      uint64_t v26 = 0;
    }
    *(void *)buf = v25;
    *(void *)&uint8_t buf[8] = v25 + (v23 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v25 + (v26 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[22],Phase::Controller::DVM::WaterProcedure::Parameter,double,int,double>(*(std::string **)&buf[8], (int *)&v275, v286, (int *)&v274, (double *)&p_size);
    uint64_t v28 = v277.i64[1];
    uint64_t v27 = v277.i64[0];
    uint64_t v30 = *(void *)&buf[8];
    uint64_t v29 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v34 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v31 = *(_OWORD *)(v28 - 64);
        *(void *)(v30 - 48) = *(void *)(v28 - 48);
        *(_OWORD *)(v30 - 64) = v31;
        *(void *)(v28 - 56) = 0;
        *(void *)(v28 - 48) = 0;
        *(void *)(v28 - 64) = 0;
        long long v32 = *(_OWORD *)(v28 - 40);
        long long v33 = *(_OWORD *)(v28 - 24);
        *(void *)(v30 - 8) = *(void *)(v28 - 8);
        *(_OWORD *)(v30 - 24) = v33;
        *(_OWORD *)(v30 - 40) = v32;
        v30 -= 64;
        v28 -= 64;
      }
      while (v28 != v27);
      int64x2_t v34 = v277;
    }
    uint64_t v22 = (std::string *)(v29 + 64);
    v277.i64[0] = v30;
    v277.i64[1] = v29 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v34;
    unint64_t v35 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v35;
    *(void *)buf = v34.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[22],Phase::Controller::DVM::WaterProcedure::Parameter,double,int,double>(v8, (int *)&v275, v286, (int *)&v274, (double *)&p_size);
    uint64_t v22 = (std::string *)((char *)v8 + 64);
  }
  v277.i64[1] = (uint64_t)v22;
  LODWORD(v274) = 2;
  v286[0] = 5.0;
  p_std::string::size_type size = 0x4034000000000000;
  uint64_t v275 = 0x4014000000000000;
  if (v22 >= v278[0])
  {
    uint64_t v37 = ((uint64_t)v22 - v277.i64[0]) >> 6;
    if ((unint64_t)(v37 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v38 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v38 <= v37 + 1) {
      unint64_t v38 = v37 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v39 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v38;
    }
    v285 = v278;
    if (v39) {
      unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v39);
    }
    else {
      uint64_t v40 = 0;
    }
    *(void *)buf = v39;
    *(void *)&uint8_t buf[8] = v39 + (v37 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v39 + (v40 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[18],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v42 = v277.i64[1];
    uint64_t v41 = v277.i64[0];
    uint64_t v44 = *(void *)&buf[8];
    uint64_t v43 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v48 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v45 = *(_OWORD *)(v42 - 64);
        *(void *)(v44 - 48) = *(void *)(v42 - 48);
        *(_OWORD *)(v44 - 64) = v45;
        *(void *)(v42 - 56) = 0;
        *(void *)(v42 - 48) = 0;
        *(void *)(v42 - 64) = 0;
        long long v46 = *(_OWORD *)(v42 - 40);
        long long v47 = *(_OWORD *)(v42 - 24);
        *(void *)(v44 - 8) = *(void *)(v42 - 8);
        *(_OWORD *)(v44 - 24) = v47;
        *(_OWORD *)(v44 - 40) = v46;
        v44 -= 64;
        v42 -= 64;
      }
      while (v42 != v41);
      int64x2_t v48 = v277;
    }
    uint64_t v36 = (std::string *)(v43 + 64);
    v277.i64[0] = v44;
    v277.i64[1] = v43 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v48;
    int v49 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v49;
    *(void *)buf = v48.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[18],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v22, (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v36 = (std::string *)((char *)v22 + 64);
  }
  v277.i64[1] = (uint64_t)v36;
  LODWORD(v274) = 3;
  v286[0] = 0.1;
  p_std::string::size_type size = 0x4024000000000000;
  uint64_t v275 = 0x3FF0000000000000;
  if (v36 >= v278[0])
  {
    uint64_t v51 = ((uint64_t)v36 - v277.i64[0]) >> 6;
    if ((unint64_t)(v51 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v52 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v52 <= v51 + 1) {
      unint64_t v52 = v51 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v53 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v53 = v52;
    }
    v285 = v278;
    if (v53) {
      unint64_t v53 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v53);
    }
    else {
      uint64_t v54 = 0;
    }
    *(void *)buf = v53;
    *(void *)&uint8_t buf[8] = v53 + (v51 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v53 + (v54 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[14],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v56 = v277.i64[1];
    uint64_t v55 = v277.i64[0];
    uint64_t v58 = *(void *)&buf[8];
    uint64_t v57 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v62 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v59 = *(_OWORD *)(v56 - 64);
        *(void *)(v58 - 48) = *(void *)(v56 - 48);
        *(_OWORD *)(v58 - 64) = v59;
        *(void *)(v56 - 56) = 0;
        *(void *)(v56 - 48) = 0;
        *(void *)(v56 - 64) = 0;
        long long v60 = *(_OWORD *)(v56 - 40);
        long long v61 = *(_OWORD *)(v56 - 24);
        *(void *)(v58 - 8) = *(void *)(v56 - 8);
        *(_OWORD *)(v58 - 24) = v61;
        *(_OWORD *)(v58 - 40) = v60;
        v58 -= 64;
        v56 -= 64;
      }
      while (v56 != v55);
      int64x2_t v62 = v277;
    }
    uint64_t v50 = (std::string *)(v57 + 64);
    v277.i64[0] = v58;
    v277.i64[1] = v57 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v62;
    unint64_t v63 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v63;
    *(void *)buf = v62.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[14],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v36, (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v50 = (std::string *)((char *)v36 + 64);
  }
  v277.i64[1] = (uint64_t)v50;
  LODWORD(v274) = 4;
  v286[0] = 4.0;
  p_std::string::size_type size = 0x401C000000000000;
  uint64_t v275 = 0x4010000000000000;
  if (v50 >= v278[0])
  {
    uint64_t v65 = ((uint64_t)v50 - v277.i64[0]) >> 6;
    if ((unint64_t)(v65 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v66 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v66 <= v65 + 1) {
      unint64_t v66 = v65 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v67 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v66;
    }
    v285 = v278;
    if (v67) {
      unint64_t v67 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v67);
    }
    else {
      uint64_t v68 = 0;
    }
    *(void *)buf = v67;
    *(void *)&uint8_t buf[8] = v67 + (v65 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v67 + (v68 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[22],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v70 = v277.i64[1];
    uint64_t v69 = v277.i64[0];
    uint64_t v72 = *(void *)&buf[8];
    uint64_t v71 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v76 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v73 = *(_OWORD *)(v70 - 64);
        *(void *)(v72 - 48) = *(void *)(v70 - 48);
        *(_OWORD *)(v72 - 64) = v73;
        *(void *)(v70 - 56) = 0;
        *(void *)(v70 - 48) = 0;
        *(void *)(v70 - 64) = 0;
        long long v74 = *(_OWORD *)(v70 - 40);
        long long v75 = *(_OWORD *)(v70 - 24);
        *(void *)(v72 - 8) = *(void *)(v70 - 8);
        *(_OWORD *)(v72 - 24) = v75;
        *(_OWORD *)(v72 - 40) = v74;
        v72 -= 64;
        v70 -= 64;
      }
      while (v70 != v69);
      int64x2_t v76 = v277;
    }
    uint64_t v64 = (std::string *)(v71 + 64);
    v277.i64[0] = v72;
    v277.i64[1] = v71 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v76;
    uint64_t v77 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v77;
    *(void *)buf = v76.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[22],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v50, (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v64 = (std::string *)((char *)v50 + 64);
  }
  v277.i64[1] = (uint64_t)v64;
  LODWORD(v274) = 5;
  v286[0] = 0.0;
  p_std::string::size_type size = 0x3FF0000000000000;
  uint64_t v275 = 0x3FF0000000000000;
  if (v64 >= v278[0])
  {
    uint64_t v79 = ((uint64_t)v64 - v277.i64[0]) >> 6;
    if ((unint64_t)(v79 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v80 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v80 <= v79 + 1) {
      unint64_t v80 = v79 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v81 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v81 = v80;
    }
    v285 = v278;
    if (v81) {
      unint64_t v81 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v81);
    }
    else {
      uint64_t v82 = 0;
    }
    *(void *)buf = v81;
    *(void *)&uint8_t buf[8] = v81 + (v79 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v81 + (v82 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[13],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v84 = v277.i64[1];
    uint64_t v83 = v277.i64[0];
    uint64_t v86 = *(void *)&buf[8];
    uint64_t v85 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v90 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v87 = *(_OWORD *)(v84 - 64);
        *(void *)(v86 - 48) = *(void *)(v84 - 48);
        *(_OWORD *)(v86 - 64) = v87;
        *(void *)(v84 - 56) = 0;
        *(void *)(v84 - 48) = 0;
        *(void *)(v84 - 64) = 0;
        long long v88 = *(_OWORD *)(v84 - 40);
        long long v89 = *(_OWORD *)(v84 - 24);
        *(void *)(v86 - 8) = *(void *)(v84 - 8);
        *(_OWORD *)(v86 - 24) = v89;
        *(_OWORD *)(v86 - 40) = v88;
        v86 -= 64;
        v84 -= 64;
      }
      while (v84 != v83);
      int64x2_t v90 = v277;
    }
    uint64_t v78 = (std::string *)(v85 + 64);
    v277.i64[0] = v86;
    v277.i64[1] = v85 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v90;
    uint64_t v91 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v91;
    *(void *)buf = v90.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[13],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v64, (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v78 = (std::string *)((char *)v64 + 64);
  }
  v277.i64[1] = (uint64_t)v78;
  LODWORD(v275) = 6;
  v286[0] = 0.01;
  LODWORD(v274) = 10;
  p_std::string::size_type size = 0x3FB999999999999ALL;
  if (v78 >= v278[0])
  {
    uint64_t v93 = ((uint64_t)v78 - v277.i64[0]) >> 6;
    if ((unint64_t)(v93 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v94 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v94 <= v93 + 1) {
      unint64_t v94 = v93 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v95 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v95 = v94;
    }
    v285 = v278;
    if (v95) {
      unint64_t v95 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v95);
    }
    else {
      uint64_t v96 = 0;
    }
    *(void *)buf = v95;
    *(void *)&uint8_t buf[8] = v95 + (v93 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v95 + (v96 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[16],Phase::Controller::DVM::WaterProcedure::Parameter,double,int,double>(*(std::string **)&buf[8], (int *)&v275, v286, (int *)&v274, (double *)&p_size);
    uint64_t v98 = v277.i64[1];
    uint64_t v97 = v277.i64[0];
    uint64_t v100 = *(void *)&buf[8];
    uint64_t v99 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v104 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v101 = *(_OWORD *)(v98 - 64);
        *(void *)(v100 - 48) = *(void *)(v98 - 48);
        *(_OWORD *)(v100 - 64) = v101;
        *(void *)(v98 - 56) = 0;
        *(void *)(v98 - 48) = 0;
        *(void *)(v98 - 64) = 0;
        long long v102 = *(_OWORD *)(v98 - 40);
        long long v103 = *(_OWORD *)(v98 - 24);
        *(void *)(v100 - 8) = *(void *)(v98 - 8);
        *(_OWORD *)(v100 - 24) = v103;
        *(_OWORD *)(v100 - 40) = v102;
        v100 -= 64;
        v98 -= 64;
      }
      while (v98 != v97);
      int64x2_t v104 = v277;
    }
    uint64_t v92 = (std::string *)(v99 + 64);
    v277.i64[0] = v100;
    v277.i64[1] = v99 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v104;
    uint64_t v105 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v105;
    *(void *)buf = v104.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[16],Phase::Controller::DVM::WaterProcedure::Parameter,double,int,double>(v78, (int *)&v275, v286, (int *)&v274, (double *)&p_size);
    uint64_t v92 = (std::string *)((char *)v78 + 64);
  }
  v277.i64[1] = (uint64_t)v92;
  LODWORD(v274) = 7;
  v286[0] = 0.1;
  p_std::string::size_type size = 0x4024000000000000;
  uint64_t v275 = 0x4008000000000000;
  if (v92 >= v278[0])
  {
    uint64_t v107 = ((uint64_t)v92 - v277.i64[0]) >> 6;
    if ((unint64_t)(v107 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v108 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v108 <= v107 + 1) {
      unint64_t v108 = v107 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v109 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v109 = v108;
    }
    v285 = v278;
    if (v109) {
      unint64_t v109 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v109);
    }
    else {
      uint64_t v110 = 0;
    }
    *(void *)buf = v109;
    *(void *)&uint8_t buf[8] = v109 + (v107 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v109 + (v110 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[26],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v112 = v277.i64[1];
    uint64_t v111 = v277.i64[0];
    uint64_t v114 = *(void *)&buf[8];
    uint64_t v113 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v118 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v115 = *(_OWORD *)(v112 - 64);
        *(void *)(v114 - 48) = *(void *)(v112 - 48);
        *(_OWORD *)(v114 - 64) = v115;
        *(void *)(v112 - 56) = 0;
        *(void *)(v112 - 48) = 0;
        *(void *)(v112 - 64) = 0;
        long long v116 = *(_OWORD *)(v112 - 40);
        long long v117 = *(_OWORD *)(v112 - 24);
        *(void *)(v114 - 8) = *(void *)(v112 - 8);
        *(_OWORD *)(v114 - 24) = v117;
        *(_OWORD *)(v114 - 40) = v116;
        v114 -= 64;
        v112 -= 64;
      }
      while (v112 != v111);
      int64x2_t v118 = v277;
    }
    uint64_t v106 = (std::string *)(v113 + 64);
    v277.i64[0] = v114;
    v277.i64[1] = v113 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v118;
    float v119 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v119;
    *(void *)buf = v118.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[26],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v92, (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v106 = (std::string *)((char *)v92 + 64);
  }
  v277.i64[1] = (uint64_t)v106;
  LODWORD(v274) = 8;
  v286[0] = 0.0;
  p_std::string::size_type size = 0x3FF0000000000000;
  uint64_t v275 = 0x3FF0000000000000;
  if (v106 >= v278[0])
  {
    uint64_t v121 = ((uint64_t)v106 - v277.i64[0]) >> 6;
    if ((unint64_t)(v121 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v122 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v122 <= v121 + 1) {
      unint64_t v122 = v121 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v123 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v123 = v122;
    }
    v285 = v278;
    if (v123) {
      unint64_t v123 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v123);
    }
    else {
      uint64_t v124 = 0;
    }
    *(void *)buf = v123;
    *(void *)&uint8_t buf[8] = v123 + (v121 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v123 + (v124 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "Bubble Gain", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v126 = v277.i64[1];
    uint64_t v125 = v277.i64[0];
    uint64_t v128 = *(void *)&buf[8];
    uint64_t v127 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v132 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v129 = *(_OWORD *)(v126 - 64);
        *(void *)(v128 - 48) = *(void *)(v126 - 48);
        *(_OWORD *)(v128 - 64) = v129;
        *(void *)(v126 - 56) = 0;
        *(void *)(v126 - 48) = 0;
        *(void *)(v126 - 64) = 0;
        long long v130 = *(_OWORD *)(v126 - 40);
        long long v131 = *(_OWORD *)(v126 - 24);
        *(void *)(v128 - 8) = *(void *)(v126 - 8);
        *(_OWORD *)(v128 - 24) = v131;
        *(_OWORD *)(v128 - 40) = v130;
        v128 -= 64;
        v126 -= 64;
      }
      while (v126 != v125);
      int64x2_t v132 = v277;
    }
    uint64_t v120 = (std::string *)(v127 + 64);
    v277.i64[0] = v128;
    v277.i64[1] = v127 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v132;
    long long v133 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v133;
    *(void *)buf = v132.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v106, "Bubble Gain", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v120 = (std::string *)((char *)v106 + 64);
  }
  v277.i64[1] = (uint64_t)v120;
  LODWORD(v274) = 9;
  v286[0] = 0.25;
  p_std::string::size_type size = 0x4010000000000000;
  uint64_t v275 = 0x3FF0000000000000;
  if (v120 >= v278[0])
  {
    uint64_t v135 = ((uint64_t)v120 - v277.i64[0]) >> 6;
    if ((unint64_t)(v135 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v136 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v136 <= v135 + 1) {
      unint64_t v136 = v135 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v137 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v137 = v136;
    }
    v285 = v278;
    if (v137) {
      unint64_t v137 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v137);
    }
    else {
      uint64_t v138 = 0;
    }
    *(void *)buf = v137;
    *(void *)&uint8_t buf[8] = v137 + (v135 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v137 + (v138 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[5],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "Rate", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v140 = v277.i64[1];
    uint64_t v139 = v277.i64[0];
    uint64_t v142 = *(void *)&buf[8];
    uint64_t v141 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v146 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v143 = *(_OWORD *)(v140 - 64);
        *(void *)(v142 - 48) = *(void *)(v140 - 48);
        *(_OWORD *)(v142 - 64) = v143;
        *(void *)(v140 - 56) = 0;
        *(void *)(v140 - 48) = 0;
        *(void *)(v140 - 64) = 0;
        long long v144 = *(_OWORD *)(v140 - 40);
        long long v145 = *(_OWORD *)(v140 - 24);
        *(void *)(v142 - 8) = *(void *)(v140 - 8);
        *(_OWORD *)(v142 - 24) = v145;
        *(_OWORD *)(v142 - 40) = v144;
        v142 -= 64;
        v140 -= 64;
      }
      while (v140 != v139);
      int64x2_t v146 = v277;
    }
    long long v134 = (std::string *)(v141 + 64);
    v277.i64[0] = v142;
    v277.i64[1] = v141 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v146;
    float v147 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v147;
    *(void *)buf = v146.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[5],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v120, "Rate", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    long long v134 = (std::string *)((char *)v120 + 64);
  }
  v277.i64[1] = (uint64_t)v134;
  LODWORD(v274) = 10;
  v286[0] = 0.0;
  p_std::string::size_type size = 0x3FF0000000000000;
  uint64_t v275 = 0x3FF0000000000000;
  if (v134 >= v278[0])
  {
    uint64_t v149 = ((uint64_t)v134 - v277.i64[0]) >> 6;
    if ((unint64_t)(v149 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v150 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v150 <= v149 + 1) {
      unint64_t v150 = v149 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v151 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v151 = v150;
    }
    v285 = v278;
    if (v151) {
      unint64_t v151 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v151);
    }
    else {
      uint64_t v152 = 0;
    }
    *(void *)buf = v151;
    *(void *)&uint8_t buf[8] = v151 + (v149 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v151 + (v152 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[5],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "Gain", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v154 = v277.i64[1];
    uint64_t v153 = v277.i64[0];
    uint64_t v156 = *(void *)&buf[8];
    uint64_t v155 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v160 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v157 = *(_OWORD *)(v154 - 64);
        *(void *)(v156 - 48) = *(void *)(v154 - 48);
        *(_OWORD *)(v156 - 64) = v157;
        *(void *)(v154 - 56) = 0;
        *(void *)(v154 - 48) = 0;
        *(void *)(v154 - 64) = 0;
        long long v158 = *(_OWORD *)(v154 - 40);
        long long v159 = *(_OWORD *)(v154 - 24);
        *(void *)(v156 - 8) = *(void *)(v154 - 8);
        *(_OWORD *)(v156 - 24) = v159;
        *(_OWORD *)(v156 - 40) = v158;
        v156 -= 64;
        v154 -= 64;
      }
      while (v154 != v153);
      int64x2_t v160 = v277;
    }
    float v148 = (std::string *)(v155 + 64);
    v277.i64[0] = v156;
    v277.i64[1] = v155 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v160;
    uint64_t v161 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v161;
    *(void *)buf = v160.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[5],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v134, "Gain", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    float v148 = (std::string *)((char *)v134 + 64);
  }
  v277.i64[1] = (uint64_t)v148;
  LODWORD(v274) = 11;
  v286[0] = 20.0;
  p_std::string::size_type size = 0x40D3880000000000;
  uint64_t v275 = 0x40B3880000000000;
  if (v148 >= v278[0])
  {
    uint64_t v163 = ((uint64_t)v148 - v277.i64[0]) >> 6;
    if ((unint64_t)(v163 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v164 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v164 <= v163 + 1) {
      unint64_t v164 = v163 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v165 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v165 = v164;
    }
    v285 = v278;
    if (v165) {
      unint64_t v165 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v165);
    }
    else {
      uint64_t v166 = 0;
    }
    *(void *)buf = v165;
    *(void *)&uint8_t buf[8] = v165 + (v163 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v165 + (v166 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "ReferenceHF", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v168 = v277.i64[1];
    uint64_t v167 = v277.i64[0];
    uint64_t v170 = *(void *)&buf[8];
    uint64_t v169 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v174 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v171 = *(_OWORD *)(v168 - 64);
        *(void *)(v170 - 48) = *(void *)(v168 - 48);
        *(_OWORD *)(v170 - 64) = v171;
        *(void *)(v168 - 56) = 0;
        *(void *)(v168 - 48) = 0;
        *(void *)(v168 - 64) = 0;
        long long v172 = *(_OWORD *)(v168 - 40);
        long long v173 = *(_OWORD *)(v168 - 24);
        *(void *)(v170 - 8) = *(void *)(v168 - 8);
        *(_OWORD *)(v170 - 24) = v173;
        *(_OWORD *)(v170 - 40) = v172;
        v170 -= 64;
        v168 -= 64;
      }
      while (v168 != v167);
      int64x2_t v174 = v277;
    }
    uint64_t v162 = (std::string *)(v169 + 64);
    v277.i64[0] = v170;
    v277.i64[1] = v169 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v174;
    long long v175 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v175;
    *(void *)buf = v174.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v148, "ReferenceHF", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v162 = (std::string *)((char *)v148 + 64);
  }
  v277.i64[1] = (uint64_t)v162;
  LODWORD(v274) = 12;
  v286[0] = 0.0;
  p_std::string::size_type size = 0x3FF0000000000000;
  uint64_t v275 = 0x3FF0000000000000;
  if (v162 >= v278[0])
  {
    uint64_t v177 = ((uint64_t)v162 - v277.i64[0]) >> 6;
    if ((unint64_t)(v177 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v178 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v178 <= v177 + 1) {
      unint64_t v178 = v177 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v179 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v179 = v178;
    }
    v285 = v278;
    if (v179) {
      unint64_t v179 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v179);
    }
    else {
      uint64_t v180 = 0;
    }
    *(void *)buf = v179;
    *(void *)&uint8_t buf[8] = v179 + (v177 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v179 + (v180 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[7],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "GainHF", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v182 = v277.i64[1];
    uint64_t v181 = v277.i64[0];
    uint64_t v184 = *(void *)&buf[8];
    uint64_t v183 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v188 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v185 = *(_OWORD *)(v182 - 64);
        *(void *)(v184 - 48) = *(void *)(v182 - 48);
        *(_OWORD *)(v184 - 64) = v185;
        *(void *)(v182 - 56) = 0;
        *(void *)(v182 - 48) = 0;
        *(void *)(v182 - 64) = 0;
        long long v186 = *(_OWORD *)(v182 - 40);
        long long v187 = *(_OWORD *)(v182 - 24);
        *(void *)(v184 - 8) = *(void *)(v182 - 8);
        *(_OWORD *)(v184 - 24) = v187;
        *(_OWORD *)(v184 - 40) = v186;
        v184 -= 64;
        v182 -= 64;
      }
      while (v182 != v181);
      int64x2_t v188 = v277;
    }
    long long v176 = (std::string *)(v183 + 64);
    v277.i64[0] = v184;
    v277.i64[1] = v183 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v188;
    long long v189 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v189;
    *(void *)buf = v188.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[7],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v162, "GainHF", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    long long v176 = (std::string *)((char *)v162 + 64);
  }
  v277.i64[1] = (uint64_t)v176;
  LODWORD(v274) = 13;
  v286[0] = 20.0;
  p_std::string::size_type size = 0x40D3880000000000;
  uint64_t v275 = 0x407F400000000000;
  if (v176 >= v278[0])
  {
    uint64_t v191 = ((uint64_t)v176 - v277.i64[0]) >> 6;
    if ((unint64_t)(v191 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v192 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v192 <= v191 + 1) {
      unint64_t v192 = v191 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v193 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v193 = v192;
    }
    v285 = v278;
    if (v193) {
      unint64_t v193 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v193);
    }
    else {
      uint64_t v194 = 0;
    }
    *(void *)buf = v193;
    *(void *)&uint8_t buf[8] = v193 + (v191 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v193 + (v194 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "ReferenceLF", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v196 = v277.i64[1];
    uint64_t v195 = v277.i64[0];
    uint64_t v198 = *(void *)&buf[8];
    uint64_t v197 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v202 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v199 = *(_OWORD *)(v196 - 64);
        *(void *)(v198 - 48) = *(void *)(v196 - 48);
        *(_OWORD *)(v198 - 64) = v199;
        *(void *)(v196 - 56) = 0;
        *(void *)(v196 - 48) = 0;
        *(void *)(v196 - 64) = 0;
        long long v200 = *(_OWORD *)(v196 - 40);
        long long v201 = *(_OWORD *)(v196 - 24);
        *(void *)(v198 - 8) = *(void *)(v196 - 8);
        *(_OWORD *)(v198 - 24) = v201;
        *(_OWORD *)(v198 - 40) = v200;
        v198 -= 64;
        v196 -= 64;
      }
      while (v196 != v195);
      int64x2_t v202 = v277;
    }
    long long v190 = (std::string *)(v197 + 64);
    v277.i64[0] = v198;
    v277.i64[1] = v197 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v202;
    long long v203 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v203;
    *(void *)buf = v202.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v176, "ReferenceLF", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    long long v190 = (std::string *)((char *)v176 + 64);
  }
  v277.i64[1] = (uint64_t)v190;
  LODWORD(v274) = 14;
  v286[0] = 0.0;
  p_std::string::size_type size = 0x3FF0000000000000;
  uint64_t v275 = 0x3FF0000000000000;
  if (v190 >= v278[0])
  {
    uint64_t v205 = ((uint64_t)v190 - v277.i64[0]) >> 6;
    if ((unint64_t)(v205 + 1) >> 58) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v206 = ((uint64_t)v278[0] - v277.i64[0]) >> 5;
    if (v206 <= v205 + 1) {
      unint64_t v206 = v205 + 1;
    }
    if ((char *)v278[0] - v277.i64[0] >= (void *)0x7FFFFFFFFFFFFFC0) {
      unint64_t v207 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v207 = v206;
    }
    v285 = v278;
    if (v207) {
      unint64_t v207 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v207);
    }
    else {
      uint64_t v208 = 0;
    }
    *(void *)buf = v207;
    *(void *)&uint8_t buf[8] = v207 + (v205 << 6);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    *(void *)&uint8_t buf[24] = v207 + (v208 << 6);
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[7],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(*(std::string **)&buf[8], "GainLF", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    uint64_t v210 = v277.i64[1];
    uint64_t v209 = v277.i64[0];
    uint64_t v212 = *(void *)&buf[8];
    uint64_t v211 = *(void *)&buf[16];
    if (v277.i64[1] == v277.i64[0])
    {
      int64x2_t v216 = vdupq_n_s64(v277.u64[1]);
    }
    else
    {
      do
      {
        long long v213 = *(_OWORD *)(v210 - 64);
        *(void *)(v212 - 48) = *(void *)(v210 - 48);
        *(_OWORD *)(v212 - 64) = v213;
        *(void *)(v210 - 56) = 0;
        *(void *)(v210 - 48) = 0;
        *(void *)(v210 - 64) = 0;
        long long v214 = *(_OWORD *)(v210 - 40);
        long long v215 = *(_OWORD *)(v210 - 24);
        *(void *)(v212 - 8) = *(void *)(v210 - 8);
        *(_OWORD *)(v212 - 24) = v215;
        *(_OWORD *)(v212 - 40) = v214;
        v212 -= 64;
        v210 -= 64;
      }
      while (v210 != v209);
      int64x2_t v216 = v277;
    }
    long long v204 = (std::string::value_type *)(v211 + 64);
    v277.i64[0] = v212;
    v277.i64[1] = v211 + 64;
    *(int64x2_t *)&uint8_t buf[8] = v216;
    v217 = v278[0];
    v278[0] = *(void **)&buf[24];
    *(void *)&uint8_t buf[24] = v217;
    *(void *)buf = v216.i64[0];
    std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[7],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(v190, "GainLF", (int *)&v274, v286, (double *)&p_size, (double *)&v275);
    long long v204 = &v190[2].__r_.__value_.__s.__data_[16];
  }
  *(_OWORD *)((char *)v281 + 8) = xmmword_2220A5520;
  v277.i64[1] = (uint64_t)v204;
  *((void *)&v281[1] + 1) = 0;
  *(void *)buf = &unk_26D479AC0;
  if (v283 == v282)
  {
    *(void *)&v286[0] = &unk_26D479AC0;
    *(void *)&uint8_t buf[24] = 0;
    (*(void (**)(void *, unsigned char *))(v282[0] + 24))(v282, buf);
    (*(void (**)(void *))(*v283 + 32))(v283);
    v283 = 0;
    *(void *)&uint8_t buf[24] = buf;
    (*(void (**)(double *, void *))(*(void *)&v286[0] + 24))(v286, v282);
    (*(void (**)(double *))(*(void *)&v286[0] + 32))(v286);
  }
  else
  {
    *(void *)&uint8_t buf[24] = v283;
    v282[0] = &unk_26D479AC0;
  }
  v283 = v282;
  std::__function::__value_func<std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::~__value_func[abi:ne180100](buf);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    char v218 = (std::string *)__str.__r_.__value_.__r.__words[0];
    if (!__str.__r_.__value_.__r.__words[0])
    {
LABEL_259:
      uint64_t v1 = 0;
      goto LABEL_260;
    }
  }
  else
  {
    char v218 = &__str;
  }
  unsigned int v219 = v218->__r_.__value_.__s.__data_[0];
  if (!v218->__r_.__value_.__s.__data_[0]) {
    goto LABEL_259;
  }
  uint64_t v220 = &v218->__r_.__value_.__s.__data_[1];
  do
  {
    uint64_t v1 = 0x100000001B3 * (v1 ^ v219);
    unsigned int v221 = *v220++;
    unsigned int v219 = v221;
  }
  while (v221);
LABEL_260:
  unint64_t v271 = v1;
  v222 = (Phase::Logger *)std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>((void *)v3, &v271);
  if (v222)
  {
    v267 = **(id **)(Phase::Logger::GetInstance(v222) + 752);
    if (os_log_type_enabled(v267, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "ProcedureRegistry.mm";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 109;
      *(_WORD *)&unsigned char buf[18] = 2048;
      *(void *)&buf[20] = v271;
      _os_log_impl(&dword_221E5E000, v267, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error): \"A registry entry with id %llu already exists!\"", buf, 0x1Cu);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "A registry entry with id %llu already exists!");
LABEL_374:
  }
  unint64_t v223 = v271;
  unint64_t v224 = *((void *)this + 1);
  if (v224)
  {
    uint8x8_t v225 = (uint8x8_t)vcnt_s8((int8x8_t)v224);
    v225.i16[0] = vaddlv_u8(v225);
    if (v225.u32[0] > 1uLL)
    {
      unint64_t v3 = v271;
      if (v224 <= v271) {
        unint64_t v3 = v271 % v224;
      }
    }
    else
    {
      unint64_t v3 = (v224 - 1) & v271;
    }
    v226 = *(void **)(*(void *)this + 8 * v3);
    if (v226)
    {
      for (uint64_t i = (void *)*v226; i; uint64_t i = (void *)*i)
      {
        unint64_t v228 = i[1];
        if (v228 == v271)
        {
          if (i[2] == v271)
          {
            v264 = **(id **)(Phase::Logger::GetInstance(0) + 752);
            if (os_log_type_enabled(v264, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136315650;
              *(void *)&uint8_t buf[4] = "ProcedureRegistry.mm";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 105;
              *(_WORD *)&unsigned char buf[18] = 2048;
              *(void *)&buf[20] = v271;
              _os_log_impl(&dword_221E5E000, v264, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::runtime_error) [!pair.second is true]: \"Failed to register procedure info with id %llu\"", buf, 0x1Cu);
            }
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Failed to register procedure info with id %llu");
            goto LABEL_374;
          }
        }
        else
        {
          if (v225.u32[0] > 1uLL)
          {
            if (v228 >= v224) {
              v228 %= v224;
            }
          }
          else
          {
            v228 &= v224 - 1;
          }
          if (v228 != v3) {
            break;
          }
        }
      }
    }
  }
  float v229 = (std::string *)operator new(0xB8uLL);
  *(void *)&v286[0] = v229;
  *(void *)&v286[1] = (char *)this + 16;
  v268 = (void *)((char *)this + 16);
  char v287 = 0;
  v229->__r_.__value_.__r.__words[0] = 0;
  v229->__r_.__value_.__l.__size_ = v223;
  v229->__r_.__value_.__r.__words[2] = v223;
  int v230 = v229 + 1;
  if ((v276[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(v230, *(const std::string::value_type **)v276, *(std::string::size_type *)&v276[8]);
  }
  else
  {
    *(_OWORD *)&v230->__r_.__value_.__l.__data_ = *(_OWORD *)v276;
    v229[1].__r_.__value_.__r.__words[2] = *(void *)&v276[16];
  }
  v229[2].__r_.__value_.__l.__size_ = 0;
  uint64_t v231 = v277.i64[0];
  v229[2].__r_.__value_.__r.__words[0] = *(void *)&v276[24];
  v229[2].__r_.__value_.__r.__words[2] = 0;
  v229[3].__r_.__value_.__r.__words[0] = 0;
  uint64_t v232 = v277.i64[1];
  p_std::string::size_type size = (uint64_t)&v229[2].__r_.__value_.__l.__size_;
  char v273 = 0;
  uint64_t v233 = v277.i64[1] - v231;
  if (v277.i64[1] != v231)
  {
    if (v233 < 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v234 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(v233 >> 6);
    v229[3].__r_.__value_.__r.__words[0] = (std::string::size_type)&v234[64 * v235];
    v229[2].__r_.__value_.__l.__size_ = (std::string::size_type)v234;
    v229[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v234;
    v274 = v234;
    uint64_t v275 = (uint64_t)v234;
    *(void *)buf = v229 + 3;
    *(void *)&uint8_t buf[8] = &v274;
    *(void *)&uint8_t buf[16] = &v275;
    uint64_t v236 = v234;
    uint8_t buf[24] = 0;
    do
    {
      if (*(char *)(v231 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v236, *(const std::string::value_type **)v231, *(void *)(v231 + 8));
        uint64_t v238 = v275;
      }
      else
      {
        long long v237 = *(_OWORD *)v231;
        *((void *)v236 + 2) = *(void *)(v231 + 16);
        *(_OWORD *)uint64_t v236 = v237;
        uint64_t v238 = (uint64_t)v236;
      }
      long long v239 = *(_OWORD *)(v231 + 24);
      long long v240 = *(_OWORD *)(v231 + 40);
      *((void *)v236 + 7) = *(void *)(v231 + 56);
      *(_OWORD *)(v236 + 40) = v240;
      *(_OWORD *)(v236 + 24) = v239;
      v231 += 64;
      uint64_t v236 = (char *)(v238 + 64);
      uint64_t v275 = v238 + 64;
    }
    while (v231 != v232);
    uint8_t buf[24] = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::ProcedureParameter>,Phase::Controller::ProcedureParameter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)buf);
    v229[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v236;
  }
  v229[3].__r_.__value_.__l.__size_ = 0;
  v229[3].__r_.__value_.__r.__words[2] = 0;
  v229[4].__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v229[3].__r_.__value_.__l.__size_, v278[1], v279, (uint64_t)(v279 - (unint64_t)v278[1]) >> 2);
  v229[4].__r_.__value_.__l.__size_ = 0;
  v229[4].__r_.__value_.__r.__words[2] = 0;
  v229[5].__r_.__value_.__r.__words[0] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v229[4].__r_.__value_.__l.__size_, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
  *(_OWORD *)&v229[5].__r_.__value_.__r.__words[1] = *(_OWORD *)((char *)v281 + 8);
  v229[6].__r_.__value_.__r.__words[0] = *((void *)&v281[1] + 1);
  uint64_t v241 = (uint64_t)v283;
  if (v283)
  {
    if (v283 == v282)
    {
      v229[7].__r_.__value_.__l.__size_ = (std::string::size_type)&v229[6].__r_.__value_.__l.__size_;
      (*(void (**)(void *))(v282[0] + 24))(v282);
      goto LABEL_294;
    }
    uint64_t v241 = (*(uint64_t (**)(void))(*v283 + 16))();
  }
  v229[7].__r_.__value_.__l.__size_ = v241;
LABEL_294:
  char v287 = 1;
  float v242 = (float)(unint64_t)(*((void *)this + 3) + 1);
  float v243 = *((float *)this + 8);
  if (!v224 || (float)(v243 * (float)v224) < v242)
  {
    BOOL v244 = v224 < 3 || (v224 & (v224 - 1)) != 0;
    unint64_t v245 = v244 | (2 * v224);
    unint64_t v246 = vcvtps_u32_f32(v242 / v243);
    if (v245 <= v246) {
      int8x8_t prime = (int8x8_t)v246;
    }
    else {
      int8x8_t prime = (int8x8_t)v245;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v224 = *((void *)this + 1);
    if (*(void *)&prime > v224) {
      goto LABEL_307;
    }
    if (*(void *)&prime < v224)
    {
      unint64_t v254 = vcvtps_u32_f32((float)*((unint64_t *)this + 3) / *((float *)this + 8));
      if (v224 < 3 || (uint8x8_t v255 = (uint8x8_t)vcnt_s8((int8x8_t)v224), v255.i16[0] = vaddlv_u8(v255), v255.u32[0] > 1uLL))
      {
        unint64_t v254 = std::__next_prime(v254);
      }
      else
      {
        uint64_t v256 = 1 << -(char)__clz(v254 - 1);
        if (v254 >= 2) {
          unint64_t v254 = v256;
        }
      }
      if (*(void *)&prime <= v254) {
        int8x8_t prime = (int8x8_t)v254;
      }
      if (*(void *)&prime >= v224)
      {
        unint64_t v224 = *((void *)this + 1);
      }
      else
      {
        if (prime)
        {
LABEL_307:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          float v248 = operator new(8 * *(void *)&prime);
          v249 = *(void **)this;
          *(void *)this = v248;
          if (v249) {
            operator delete(v249);
          }
          uint64_t v250 = 0;
          *((int8x8_t *)this + 1) = prime;
          do
            *(void *)(*(void *)this + 8 * v250++) = 0;
          while (*(void *)&prime != v250);
          v251 = (void *)*v268;
          if (*v268)
          {
            unint64_t v252 = v251[1];
            uint8x8_t v253 = (uint8x8_t)vcnt_s8(prime);
            v253.i16[0] = vaddlv_u8(v253);
            if (v253.u32[0] > 1uLL)
            {
              if (v252 >= *(void *)&prime) {
                v252 %= *(void *)&prime;
              }
            }
            else
            {
              v252 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)this + 8 * v252) = v268;
            uint64_t v257 = (void *)*v251;
            if (*v251)
            {
              do
              {
                unint64_t v258 = v257[1];
                if (v253.u32[0] > 1uLL)
                {
                  if (v258 >= *(void *)&prime) {
                    v258 %= *(void *)&prime;
                  }
                }
                else
                {
                  v258 &= *(void *)&prime - 1;
                }
                if (v258 != v252)
                {
                  if (!*(void *)(*(void *)this + 8 * v258))
                  {
                    *(void *)(*(void *)this + 8 * v258) = v251;
                    goto LABEL_332;
                  }
                  void *v251 = *v257;
                  *uint64_t v257 = **(void **)(*(void *)this + 8 * v258);
                  **(void **)(*(void *)this + 8 * v258) = v257;
                  uint64_t v257 = v251;
                }
                unint64_t v258 = v252;
LABEL_332:
                v251 = v257;
                uint64_t v257 = (void *)*v257;
                unint64_t v252 = v258;
              }
              while (v257);
            }
          }
          unint64_t v224 = (unint64_t)prime;
          goto LABEL_336;
        }
        v263 = *(void **)this;
        *(void *)this = 0;
        if (v263) {
          operator delete(v263);
        }
        unint64_t v224 = 0;
        *((void *)this + 1) = 0;
      }
    }
LABEL_336:
    if ((v224 & (v224 - 1)) != 0)
    {
      if (v224 <= v223) {
        unint64_t v3 = v223 % v224;
      }
      else {
        unint64_t v3 = v223;
      }
    }
    else
    {
      unint64_t v3 = (v224 - 1) & v223;
    }
  }
  v259 = *(void **)(*(void *)this + 8 * v3);
  double v260 = v286[0];
  if (v259)
  {
    **(void **)&v286[0] = *v259;
  }
  else
  {
    **(void **)&v286[0] = *((void *)this + 2);
    *((double *)this + 2) = v260;
    *(void *)(*(void *)this + 8 * v3) = v268;
    if (!**(void **)&v260) {
      goto LABEL_350;
    }
    unint64_t v261 = *(void *)(**(void **)&v260 + 8);
    if ((v224 & (v224 - 1)) != 0)
    {
      if (v261 >= v224) {
        v261 %= v224;
      }
    }
    else
    {
      v261 &= v224 - 1;
    }
    v259 = (void *)(*(void *)this + 8 * v261);
  }
  *(double *)v259 = v260;
LABEL_350:
  v286[0] = 0.0;
  ++*((void *)this + 3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v286);
  std::__function::__value_func<std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::~__value_func[abi:ne180100](v282);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v278[1])
  {
    *(void **)&long long v279 = v278[1];
    operator delete(v278[1]);
  }
  *(void *)buf = &v277;
  std::vector<Phase::Controller::ProcedureParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if ((v276[23] & 0x80000000) != 0) {
    operator delete(*(void **)v276);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_222025C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  __cxa_free_exception(v29);
  Phase::Controller::ProcedureInfo::~ProcedureInfo((Phase::Controller::ProcedureInfo *)&a24);
  if (a18 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>>>::~__hash_table(a12);
  _Unwind_Resume(a1);
}

void Phase::Controller::ProcedureInfo::~ProcedureInfo(Phase::Controller::ProcedureInfo *this)
{
  std::__function::__value_func<std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::~__value_func[abi:ne180100]((void *)this + 16);
  int8x8_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void **)((char *)this + 32);
  std::vector<Phase::Controller::ProcedureParameter>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void *Phase::Controller::ProcedureRegistry::CreateProcedureInstance@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  unint64_t v11 = a2;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned long long,int>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,int>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,int>>>::find<unsigned long long>(a1, &v11);
  if (result) {
    return (void *)std::function<std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::operator()((uint64_t)(result + 19), a3, a4, a5);
  }
  *a6 = 0;
  return result;
}

uint64_t std::function<std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v7 = a3;
  uint64_t v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t *))(*(void *)v4 + 48))(v4, a2, &v7, &v6);
}

void *std::__function::__value_func<std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::~__value_func[abi:ne180100](void *a1)
{
  int8x8_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<Phase::Controller::ProcedureParameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int8x8_t v2 = *a1;
  if (*v2)
  {
    std::vector<Phase::Controller::ProcedureParameter>::__clear[abi:ne180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<Phase::Controller::ProcedureParameter>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 64)
  {
    if (*(char *)(i - 41) < 0) {
      operator delete(*(void **)(i - 64));
    }
  }
  a1[1] = v2;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::ProcedureInfo>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::ProcedureInfo>,0>(uint64_t a1)
{
  std::__function::__value_func<std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::~__value_func[abi:ne180100]((void *)(a1 + 136));
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  unint64_t v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(void *)(a1 + 72) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void **)(a1 + 40);
  std::vector<Phase::Controller::ProcedureParameter>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[10],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, int *a2, double *a3, double *a4, double *a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Fall Rate");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, *a4, *a5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2220261B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *Phase::Controller::ProcedureParameter::ProcedureParameter(std::string *this, unsigned __int8 *a2, int a3, double a4, double a5, double a6)
{
  unint64_t v10 = a2;
  uint64_t v31 = *MEMORY[0x263EF8340];
  if ((char)a2[23] < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v12 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v12;
  }
  if ((((char)v10[23] & 0x80000000) == 0 || (unint64_t v10 = *(unsigned __int8 **)v10) != 0) && (v13 = *v10) != 0)
  {
    uint64_t v14 = v10 + 1;
    uint64_t v15 = 0xCBF29CE484222325;
    do
    {
      uint64_t v15 = 0x100000001B3 * (v15 ^ v13);
      unsigned int v16 = *v14++;
      unsigned int v13 = v16;
    }
    while (v16);
  }
  else
  {
    uint64_t v15 = 0;
  }
  this[1].__r_.__value_.__r.__words[0] = v15;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = a3;
  *(double *)&this[1].__r_.__value_.__r.__words[2] = a4;
  *(double *)&this[2].__r_.__value_.__l.__data_ = a5;
  *(double *)&this[2].__r_.__value_.__l.__size_ = a6;
  if (a4 > a5)
  {
    long long v18 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 752);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315906;
      uint64_t v22 = "ProcedureRegistry.hpp";
      __int16 v23 = 1024;
      int v24 = 45;
      __int16 v25 = 2048;
      double v26 = a4;
      __int16 v27 = 2048;
      double v28 = a5;
      _os_log_impl(&dword_221E5E000, v18, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inMinimum > inMaximum is true]: \"Invalid min: %f and max: %f\"", (uint8_t *)&v21, 0x26u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid min: %f and max: %f");
LABEL_21:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  }
  if (a6 < a4 || a6 > a5)
  {
    int64x2_t v20 = **(id **)(Phase::Logger::GetInstance((Phase::Logger *)this) + 752);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      int v21 = 136316162;
      uint64_t v22 = "ProcedureRegistry.hpp";
      __int16 v23 = 1024;
      int v24 = 52;
      __int16 v25 = 2048;
      double v26 = a6;
      __int16 v27 = 2048;
      double v28 = a4;
      __int16 v29 = 2048;
      double v30 = a5;
      _os_log_impl(&dword_221E5E000, v20, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (std::invalid_argument) [inDefault < inMinimum || inDefault > inMaximum is true]: \"Invalid default: %f in range [%f, %f]\"", (uint8_t *)&v21, 0x30u);
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid default: %f in range [%f, %f]");
    goto LABEL_21;
  }
  return this;
}

void sub_222026470(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Controller::ProcedureParameter>>(unint64_t a1)
{
  if (a1 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a1 << 6);
}

uint64_t std::__split_buffer<Phase::Controller::ProcedureParameter>::~__split_buffer(uint64_t a1)
{
  unint64_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 8;
      *(void *)(a1 + 16) = v2 - 8;
      if (*((char *)v2 - 41) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[22],Phase::Controller::DVM::WaterProcedure::Parameter,double,int,double>(std::string *a1, int *a2, double *a3, int *a4, double *a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Average Drop Diameter");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, (double)*a4, *a5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2220265CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[18],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, int *a2, double *a3, double *a4, double *a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Max Drop Diameter");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, *a4, *a5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22202666C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[14],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, int *a2, double *a3, double *a4, double *a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Impulse Shape");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, *a4, *a5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22202670C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[22],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, int *a2, double *a3, double *a4, double *a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Impulse Gain Exponent");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, *a4, *a5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2220267AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[13],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, int *a2, double *a3, double *a4, double *a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Impulse Gain");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, *a4, *a5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_22202684C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[16],Phase::Controller::DVM::WaterProcedure::Parameter,double,int,double>(std::string *a1, int *a2, double *a3, int *a4, double *a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Chirp Rise Rate");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, (double)*a4, *a5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2220268F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[26],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, int *a2, double *a3, double *a4, double *a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "Base Frequency Multiplier");
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a2, *a3, *a4, *a5);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_222026990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[12],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, char *a2, int *a3, double *a4, double *a5, double *a6)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a3, *a4, *a5, *a6);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_222026A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[5],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, char *a2, int *a3, double *a4, double *a5, double *a6)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a3, *a4, *a5, *a6);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_222026AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<Phase::Controller::ProcedureParameter>::construct[abi:ne180100]<Phase::Controller::ProcedureParameter,char const(&)[7],Phase::Controller::DVM::WaterProcedure::Parameter,double,double,double>(std::string *a1, char *a2, int *a3, double *a4, double *a5, double *a6)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  Phase::Controller::ProcedureParameter::ProcedureParameter(a1, (unsigned __int8 *)__p, *a3, *a4, *a5, *a6);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_222026B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0,std::allocator<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0>,std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::~__func()
{
}

void *std::__function::__func<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0,std::allocator<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0>,std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D479AC0;
  return result;
}

void std::__function::__func<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0,std::allocator<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0>,std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D479AC0;
}

void std::__function::__func<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0,std::allocator<Phase::Controller::ProcedureRegistry::ProcedureRegistry(void)::$_0>,std::unique_ptr<Phase::Controller::DVM::ProcedureBase> ()(Phase::DspLayer::VoiceEngine &,int,PHASEVoiceStealingType)>::operator()()
{
}

void sub_222026C58(_Unwind_Exception *a1)
{
  MEMORY[0x223C938A0](v1, 0x10A1C40994E4CCELL);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<Phase::Controller::ProcedureParameter>,Phase::Controller::ProcedureParameter*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 64)
    {
      if (*(char *)(i - 41) < 0) {
        operator delete(*(void **)(i - 64));
      }
    }
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,Phase::Controller::ProcedureInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned long long const,Phase::Controller::ProcedureInfo>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

double Phase::Controller::DoubleFromDictionary(Phase::Controller *this, NSDictionary *a2, NSString *a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = this;
  unint64_t v5 = a2;
  uint64_t v6 = [(Phase::Controller *)v4 objectForKeyedSubscript:v5];
  if (!v6)
  {
    unint64_t v10 = NSString;
    char v11 = [MEMORY[0x263F086E0] mainBundle];
    char v12 = [v11 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
    unsigned int v13 = objc_msgSend(v10, "stringWithFormat:", v12, v5);

    uint64_t v15 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v14)
                                                                                        + 784)));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v25 = "ProfileRegistry.mm";
      __int16 v26 = 1024;
      int v27 = 278;
      __int16 v28 = 2080;
      uint64_t v29 = [v13 UTF8String];
      _os_log_impl(&dword_221E5E000, v15, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s");
    exception->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    long long v17 = NSString;
    long long v18 = [MEMORY[0x263F086E0] mainBundle];
    long long v19 = [v18 localizedStringForKey:@"[NSObject isKindOfClass:[[NSNumber class]]] failed for key: %@" value:&stru_26D47BF58 table:0];
    int64x2_t v20 = objc_msgSend(v17, "stringWithFormat:", v19, v5);

    uint64_t v22 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v21)
                                                                                        + 784)));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      __int16 v25 = "ProfileRegistry.mm";
      __int16 v26 = 1024;
      int v27 = 285;
      __int16 v28 = 2080;
      uint64_t v29 = [v20 UTF8String];
      _os_log_impl(&dword_221E5E000, v22, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
    }

    __int16 v23 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v23, "%s");
    v23->__vftable = (std::logic_error_vtbl *)&unk_26D479C38;
  }
  [v6 doubleValue];
  double v8 = v7;

  return v8;
}

void sub_222027098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::StringIdFromDictionary(Phase::Controller *this, NSDictionary *a2, NSString *a3)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  unint64_t v5 = a2;
  uint64_t v6 = a3;
  double v7 = [(NSDictionary *)v5 objectForKeyedSubscript:v6];
  double v8 = NSString;
  if (!v7)
  {
    char v12 = [MEMORY[0x263F086E0] mainBundle];
    unsigned int v13 = [v12 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
    uint64_t v14 = objc_msgSend(v8, "stringWithFormat:", v13, v6);

    unsigned int v16 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v15)
                                                                                        + 784)));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v36 = "ProfileRegistry.mm";
      __int16 v37 = 1024;
      int v38 = 299;
      __int16 v39 = 2080;
      uint64_t v40 = [v14 UTF8String];
      _os_log_impl(&dword_221E5E000, v16, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s");
    exception->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    long long v18 = NSString;
    long long v19 = [MEMORY[0x263F086E0] mainBundle];
    int64x2_t v20 = [v19 localizedStringForKey:@"[NSObject isKindOfClass:[[NSString class]]] failed for key: %@" value:&stru_26D47BF58 table:0];
    int v21 = objc_msgSend(v18, "stringWithFormat:", v20, v6);

    __int16 v23 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v22)
                                                                                        + 784)));
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      uint64_t v36 = "ProfileRegistry.mm";
      __int16 v37 = 1024;
      int v38 = 306;
      __int16 v39 = 2080;
      uint64_t v40 = [v21 UTF8String];
      _os_log_impl(&dword_221E5E000, v23, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
    }

    int v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v24, "%s");
    v24->__vftable = (std::logic_error_vtbl *)&unk_26D479C38;
  }
  id v9 = v7;
  std::string::basic_string[abi:ne180100](__p, (void *)[v9 UTF8String], objc_msgSend(v9, "lengthOfBytesUsingEncoding:", 4));
  unint64_t v10 = v34;
  if ((v34 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (!v10)
  {
    __int16 v25 = NSString;
    __int16 v26 = [MEMORY[0x263F086E0] mainBundle];
    int v27 = [v26 localizedStringForKey:@"String for key: %@ is empty" value:&stru_26D47BF58 table:0];
    __int16 v28 = objc_msgSend(v25, "stringWithFormat:", v27, v6);

    uint64_t v30 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v29)
                                                                                        + 784)));
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = [v28 UTF8String];
      *(_DWORD *)buf = 136315650;
      uint64_t v36 = "ProfileRegistry.mm";
      __int16 v37 = 1024;
      int v38 = 313;
      __int16 v39 = 2080;
      uint64_t v40 = v31;
      _os_log_impl(&dword_221E5E000, v30, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::EmptyString): \"%s\"", buf, 0x1Cu);
    }

    long long v32 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v32, "%s");
    v32->__vftable = (std::logic_error_vtbl *)&unk_26D479C60;
  }

  if ((v34 & 0x80u) == 0) {
    char v11 = __p;
  }
  else {
    char v11 = (void **)__p[0];
  }
  Phase::StringId::StringId(this, (const char *)v11);
  if ((char)v34 < 0) {
    operator delete(__p[0]);
  }
}

void sub_222027638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void Phase::Controller::Vec2FromDictionary(Phase::Controller *this, NSDictionary *a2, NSString *a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  long long v19 = a2;
  unint64_t v5 = a3;
  uint64_t v6 = [(NSDictionary *)v19 objectForKeyedSubscript:v5];
  double v8 = v6;
  if (!v6)
  {
    char v12 = NSString;
    unsigned int v13 = [MEMORY[0x263F086E0] mainBundle];
    uint64_t v14 = [v13 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
    uint64_t v15 = objc_msgSend(v12, "stringWithFormat:", v14, v5);

    long long v17 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v16)
                                                                                        + 784)));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      int v21 = "ProfileRegistry.mm";
      __int16 v22 = 1024;
      int v23 = 332;
      __int16 v24 = 2080;
      uint64_t v25 = [v15 UTF8String];
      _os_log_impl(&dword_221E5E000, v17, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
    }

    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "%s");
    exception->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
  }
  double v9 = Phase::Controller::DoubleFromDictionary(v6, (NSDictionary *)@"X", v7);
  double v11 = Phase::Controller::DoubleFromDictionary(v8, (NSDictionary *)@"Y", v10);
  *(double *)this = v9;
  *((double *)this + 1) = v11;
}

void sub_22202795C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Phase::Controller::ParameterFromDictionary(Phase::Controller *this, NSDictionary *a2)
{
  uint64_t v147 = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  *(void *)this = 0;
  *((void *)this + 1) = &str_33;
  *((unsigned char *)this + 16) = 1;
  uint64_t v127 = v3;
  uint64_t v128 = this;
  uint64_t v126 = (void **)((char *)this + 24);
  Phase::Envelope<double>::Envelope((Phase::Controller *)((char *)this + 24));
  Phase::Controller::StringIdFromDictionary((Phase::Controller *)v141, v3, &cfstr_Name_0.isa);
  Phase::StringId::operator=((uint64_t)this, (uint64_t)v141);
  if (!v141[16]) {
    free(*(void **)&v141[8]);
  }
  if (Phase::Controller::IsSteppedParameter(this))
  {
    uint64_t v4 = v3;
    unint64_t v5 = @"Envelope";
    unint64_t v123 = v4;
    uint64_t v6 = [(NSDictionary *)v4 objectForKeyedSubscript:@"Envelope"];
    uint64_t v124 = v6;
    if (!v6)
    {
      long long v73 = NSString;
      long long v74 = [MEMORY[0x263F086E0] mainBundle];
      long long v75 = [v74 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
      int64x2_t v76 = objc_msgSend(v73, "stringWithFormat:", v75, @"Envelope");

      uint64_t v78 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v77)
                                                                                          + 784)));
      if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
      {
        uint64_t v79 = [v76 UTF8String];
        *(_DWORD *)uint64_t v141 = 136315650;
        *(void *)&v141[4] = "ProfileRegistry.mm";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 454;
        *(_WORD *)&v141[18] = 2080;
        *(void *)&v141[20] = v79;
        _os_log_impl(&dword_221E5E000, v78, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v141, 0x1Cu);
      }

      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "%s");
      exception->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
    }
    Phase::Controller::Vec2FromDictionary((Phase::Controller *)v136, v6, &cfstr_Startpoint.isa);
    long double v7 = v137;
    double v9 = modf(v137, (long double *)v141);
    if (v9 < 0.0) {
      double v9 = -v9;
    }
    if (v9 > 2.22044605e-16)
    {
      long long v89 = **(id **)(Phase::Logger::GetInstance(v8) + 784);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)uint64_t v141 = 136315650;
        *(void *)&v141[4] = "ProfileRegistry.mm";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 459;
        *(_WORD *)&v141[18] = 2048;
        *(long double *)&v141[20] = v7;
        _os_log_impl(&dword_221E5E000, v89, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::InvalidNumber) [!IsInteger(startPoint.y) is true]: \"StartPoint y value '%f' must be an integer\"", v141, 0x1Cu);
      }
      int64x2_t v90 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v90, "StartPoint y value '%f' must be an integer");
      v90->__vftable = (std::logic_error_vtbl *)&unk_26D479CD8;
    }
    long long v133 = 0;
    long long v134 = 0;
    unint64_t v135 = 0;
    unint64_t v10 = [(NSDictionary *)v124 objectForKeyedSubscript:@"Segments"];
    if (!v10)
    {
      uint64_t v99 = NSString;
      uint64_t v100 = [MEMORY[0x263F086E0] mainBundle];
      long long v101 = [v100 localizedStringForKey:@"NSArray object Segments doesn't exist in envelope %@" value:&stru_26D47BF58 table:0];
      long long v102 = objc_msgSend(v99, "stringWithFormat:", v101, @"Envelope");

      int64x2_t v104 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v103)
                                                                                           + 784)));
      if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
      {
        uint64_t v105 = [v102 UTF8String];
        *(_DWORD *)uint64_t v141 = 136315650;
        *(void *)&v141[4] = "ProfileRegistry.mm";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 468;
        *(_WORD *)&v141[18] = 2080;
        *(void *)&v141[20] = v105;
        _os_log_impl(&dword_221E5E000, v104, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v141, 0x1Cu);
      }

      uint64_t v106 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v106, "%s");
      v106->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
    }
    long long v145 = 0u;
    long long v146 = 0u;
    long long v143 = 0u;
    long long v144 = 0u;
    obuint64_t j = v10;
    uint64_t v11 = [obj countByEnumeratingWithState:&v143 objects:v141 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v144;
      do
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v144 != v12) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(NSDictionary **)(*((void *)&v143 + 1) + 8 * i);
          *(void *)buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          *(void *)&uint8_t buf[16] = &unk_26D471430;
          uint64_t v140 = &buf[16];
          Phase::Controller::Vec2FromDictionary((Phase::Controller *)__y, v14, &cfstr_Endpoint.isa);
          *(void *)buf = *(void *)__y;
          *(void *)&uint8_t buf[8] = *(void *)&__y[8];
          double v16 = modf(*(long double *)&__y[8], (long double *)__y);
          if (v16 < 0.0) {
            double v16 = -v16;
          }
          if (v16 > 2.22044605e-16)
          {
            uint64_t v54 = **(id **)(Phase::Logger::GetInstance(v15) + 784);
            if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__y = 136315650;
              *(void *)&__y[4] = "ProfileRegistry.mm";
              *(_WORD *)&__y[12] = 1024;
              *(_DWORD *)&__y[14] = 477;
              *(_WORD *)&__y[18] = 2048;
              *(void *)&__y[20] = *(void *)&buf[8];
              _os_log_impl(&dword_221E5E000, v54, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::InvalidNumber) [!IsInteger(envelopeSegment.mEndPoint.y) is true]: \"EndPoint y value '%f' must be an integer\"", __y, 0x1Cu);
            }
            uint64_t v55 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v55, "EndPoint y value '%f' must be an integer");
            v55->__vftable = (std::logic_error_vtbl *)&unk_26D479CD8;
          }
          long long v17 = [(NSDictionary *)v14 objectForKeyedSubscript:@"CurveType"];
          if ([v17 isEqualToString:@"HoldStartValue"])
          {
          }
          else
          {
            long long v18 = [(NSDictionary *)v14 objectForKeyedSubscript:@"CurveType"];
            char v19 = [v18 isEqualToString:@"JumpToEndValue"];

            if ((v19 & 1) == 0)
            {
              uint64_t v56 = **(id **)(Phase::Logger::GetInstance(v20) + 784);
              if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__y = 136315394;
                *(void *)&__y[4] = "ProfileRegistry.mm";
                *(_WORD *)&__y[12] = 1024;
                *(_DWORD *)&__y[14] = 484;
                _os_log_impl(&dword_221E5E000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::InvalidEnvelopeSegmentType): \"Envelope segments must all have stepped curve types equal to HoldStartValue or JumpToEndValue\"", __y, 0x12u);
              }
              uint64_t v57 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v57, "Envelope segments must all have stepped curve types equal to HoldStartValue or JumpToEndValue");
              v57->__vftable = (std::logic_error_vtbl *)&unk_26D479D00;
            }
          }
          int v21 = v134;
          if ((unint64_t)v134 >= v135)
          {
            __int16 v22 = (long long *)std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__push_back_slow_path<Phase::Envelope<double>::Segment const&>((uint64_t *)&v133, buf);
          }
          else
          {
            *(void *)long long v134 = *(void *)buf;
            *((void *)v21 + 1) = *(void *)&buf[8];
            std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)(v21 + 1), (uint64_t)&buf[16]);
            __int16 v22 = v21 + 3;
          }
          long long v134 = v22;
          std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&buf[16]);
        }
        uint64_t v11 = [obj countByEnumeratingWithState:&v143 objects:v141 count:16];
      }
      while (v11);
    }

    Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>((Phase::Logger *)&v131, (uint64_t)v136, v133, v134);
    *(void *)buf = &v133;
    std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  else
  {
    int v23 = v3;
    __int16 v24 = @"Envelope";
    uint64_t v125 = v23;
    uint64_t v25 = [(NSDictionary *)v23 objectForKeyedSubscript:@"Envelope"];
    if (!v25)
    {
      unint64_t v81 = NSString;
      uint64_t v82 = [MEMORY[0x263F086E0] mainBundle];
      uint64_t v83 = [v82 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
      uint64_t v84 = objc_msgSend(v81, "stringWithFormat:", v83, @"Envelope");

      uint64_t v86 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v85)
                                                                                          + 784)));
      if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
      {
        uint64_t v87 = [v84 UTF8String];
        *(_DWORD *)uint64_t v141 = 136315650;
        *(void *)&v141[4] = "ProfileRegistry.mm";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 429;
        *(_WORD *)&v141[18] = 2080;
        *(void *)&v141[20] = v87;
        _os_log_impl(&dword_221E5E000, v86, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v141, 0x1Cu);
      }

      long long v88 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v88, "%s");
      v88->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
    }
    Phase::Controller::Vec2FromDictionary((Phase::Controller *)&v133, v25, &cfstr_Startpoint.isa);
    uint64_t v26 = v25;
    int v27 = @"Segments";
    id obja = v26;
    __int16 v28 = [(NSDictionary *)v26 objectForKeyedSubscript:@"Segments"];
    if (!v28)
    {
      uint64_t v91 = NSString;
      uint64_t v92 = [MEMORY[0x263F086E0] mainBundle];
      uint64_t v93 = [v92 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
      unint64_t v94 = objc_msgSend(v91, "stringWithFormat:", v93, @"Segments");

      uint64_t v96 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v95)
                                                                                          + 784)));
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        uint64_t v97 = [v94 UTF8String];
        *(_DWORD *)uint64_t v141 = 136315650;
        *(void *)&v141[4] = "ProfileRegistry.mm";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 611;
        *(_WORD *)&v141[18] = 2080;
        *(void *)&v141[20] = v97;
        _os_log_impl(&dword_221E5E000, v96, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", v141, 0x1Cu);
      }

      uint64_t v98 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v98, "%s");
      v98->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      uint64_t v107 = NSString;
      unint64_t v108 = [MEMORY[0x263F086E0] mainBundle];
      unint64_t v109 = [v108 localizedStringForKey:@"[NSObject isKindOfClass:[[NSArray class]]] failed for key: %@" value:&stru_26D47BF58 table:0];
      uint64_t v110 = objc_msgSend(v107, "stringWithFormat:", v109, @"Segments");

      uint64_t v112 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v111)
                                                                                           + 784)));
      if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
      {
        uint64_t v113 = [v110 UTF8String];
        *(_DWORD *)uint64_t v141 = 136315650;
        *(void *)&v141[4] = "ProfileRegistry.mm";
        *(_WORD *)&v141[12] = 1024;
        *(_DWORD *)&v141[14] = 618;
        *(_WORD *)&v141[18] = 2080;
        *(void *)&v141[20] = v113;
        _os_log_impl(&dword_221E5E000, v112, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", v141, 0x1Cu);
      }

      uint64_t v114 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v114, "%s");
      v114->__vftable = (std::logic_error_vtbl *)&unk_26D479C38;
    }
    unint64_t v29 = 0;
    memset(__y, 0, 24);
    while ([v28 count] > v29)
    {
      uint64_t v30 = [v28 objectAtIndexedSubscript:v29];
      *(void *)uint64_t v141 = 0;
      *(void *)&v141[8] = 0;
      *(void *)&v141[16] = &unk_26D471430;
      uint64_t v142 = &v141[16];
      Phase::Controller::Vec2FromDictionary((Phase::Controller *)&v143, v30, &cfstr_Endpoint.isa);
      *(_OWORD *)uint64_t v141 = v143;
      uint64_t v31 = v30;
      long long v32 = @"CurveType";
      long long v33 = [(NSDictionary *)v31 objectForKeyedSubscript:@"CurveType"];
      unsigned __int8 v34 = NSString;
      if (!v33)
      {
        uint64_t v58 = [MEMORY[0x263F086E0] mainBundle];
        long long v59 = [v58 localizedStringForKey:@"[NSDictionary objectForKey] failed for key: %@" value:&stru_26D47BF58 table:0];
        long long v60 = objc_msgSend(v34, "stringWithFormat:", v59, @"CurveType");

        int64x2_t v62 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v61)
                                                                                            + 784)));
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          uint64_t v63 = [v60 UTF8String];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "ProfileRegistry.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 346;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v63;
          _os_log_impl(&dword_221E5E000, v62, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::MissingRequiredField): \"%s\"", buf, 0x1Cu);
        }

        uint64_t v64 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v64, "%s");
        v64->__vftable = (std::logic_error_vtbl *)&unk_26D479C10;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v65 = NSString;
        unint64_t v66 = [MEMORY[0x263F086E0] mainBundle];
        unint64_t v67 = [v66 localizedStringForKey:@"[NSObject isKindOfClass:[[NSString class]]] failed for key: %@" value:&stru_26D47BF58 table:0];
        uint64_t v68 = objc_msgSend(v65, "stringWithFormat:", v67, @"CurveType");

        uint64_t v70 = objc_retainAutoreleasedReturnValue(objc_retainAutorelease(**(id **)(Phase::Logger::GetInstance(v69)
                                                                                            + 784)));
        if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
        {
          uint64_t v71 = [v68 UTF8String];
          *(_DWORD *)buf = 136315650;
          *(void *)&uint8_t buf[4] = "ProfileRegistry.mm";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 353;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v71;
          _os_log_impl(&dword_221E5E000, v70, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::FieldWithWrongType): \"%s\"", buf, 0x1Cu);
        }

        uint64_t v72 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v72, "%s");
        v72->__vftable = (std::logic_error_vtbl *)&unk_26D479C38;
      }
      char v35 = [v33 isEqualToString:@"Linear"];
      uint64_t v36 = Phase::CurveFunction::Linear<double>;
      if ((v35 & 1) == 0)
      {
        char v37 = [v33 isEqualToString:@"Squared"];
        uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::Squared<double>;
        if ((v37 & 1) == 0)
        {
          char v38 = [v33 isEqualToString:@"InverseSquared"];
          uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::InverseSquared<double>;
          if ((v38 & 1) == 0)
          {
            char v39 = [v33 isEqualToString:@"Cubed"];
            uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::Squared<double>;
            if ((v39 & 1) == 0)
            {
              char v40 = [v33 isEqualToString:@"InverseCubed"];
              uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::InverseSquared<double>;
              if ((v40 & 1) == 0)
              {
                char v41 = [v33 isEqualToString:@"InverseSine"];
                uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::InverseSine<double>;
                if ((v41 & 1) == 0)
                {
                  char v42 = [v33 isEqualToString:@"Sine"];
                  uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::Sine<double>;
                  if ((v42 & 1) == 0)
                  {
                    char v43 = [v33 isEqualToString:@"Sigmoid"];
                    uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::Sigmoid<double>;
                    if ((v43 & 1) == 0)
                    {
                      char v44 = [v33 isEqualToString:@"InverseSigmoid"];
                      uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::InverseSigmoid<double>;
                      if ((v44 & 1) == 0)
                      {
                        char v45 = [v33 isEqualToString:@"HoldStartValue"];
                        uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::HoldStartValue<double>;
                        if ((v45 & 1) == 0)
                        {
                          char v46 = [v33 isEqualToString:@"JumpToEndValue"];
                          uint64_t v36 = (uint64_t (*)())Phase::CurveFunction::JumpToEndValue<double>;
                          if ((v46 & 1) == 0)
                          {
                            long long v115 = NSString;
                            long long v116 = [MEMORY[0x263F086E0] mainBundle];
                            long long v117 = [v116 localizedStringForKey:@"String: %@ for key: %@ is unrecognized" value:&stru_26D47BF58 table:0];
                            int64x2_t v118 = objc_msgSend(v115, "stringWithFormat:", v117, v33, @"CurveType");

                            uint64_t v120 = **(id **)(Phase::Logger::GetInstance(v119) + 784);
                            if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
                            {
                              uint64_t v121 = [v118 UTF8String];
                              *(_DWORD *)buf = 136315650;
                              *(void *)&uint8_t buf[4] = "ProfileRegistry.mm";
                              *(_WORD *)&unsigned char buf[12] = 1024;
                              *(_DWORD *)&buf[14] = 404;
                              *(_WORD *)&unsigned char buf[18] = 2080;
                              *(void *)&buf[20] = v121;
                              _os_log_impl(&dword_221E5E000, v120, OS_LOG_TYPE_ERROR, "%25s:%-5d EXCEPTION (ProfileRegistryException::InvalidString): \"%s\"", buf, 0x1Cu);
                            }

                            unint64_t v122 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
                            std::logic_error::logic_error(v122, "%s");
                            v122->__vftable = (std::logic_error_vtbl *)&unk_26D479C88;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      *(void *)&long long v143 = &unk_26D4715B0;
      *((void *)&v143 + 1) = v36;
      *((void *)&v144 + 1) = &v143;

      std::__function::__value_func<double ()(double)>::operator=[abi:ne180100](&v141[16], (uint64_t)&v143);
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v143);

      uint64_t v47 = *(void *)&__y[8];
      if (*(void *)&__y[8] >= *(void *)&__y[16])
      {
        unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__y[8] - *(void *)__y) >> 4);
        unint64_t v50 = v49 + 1;
        if (v49 + 1 > 0x555555555555555) {
          std::vector<Phase::MetaParamValue>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * ((uint64_t)(*(void *)&__y[16] - *(void *)__y) >> 4) > v50) {
          unint64_t v50 = 0x5555555555555556 * ((uint64_t)(*(void *)&__y[16] - *(void *)__y) >> 4);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&__y[16] - *(void *)__y) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v51 = 0x555555555555555;
        }
        else {
          unint64_t v51 = v50;
        }
        *(void *)&long long v145 = &__y[16];
        if (v51) {
          unint64_t v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Phase::Envelope<double>::Segment>>((uint64_t)&__y[16], v51);
        }
        else {
          unint64_t v52 = 0;
        }
        unint64_t v53 = &v52[48 * v49];
        *(void *)&long long v143 = v52;
        *((void *)&v143 + 1) = v53;
        *((void *)&v144 + 1) = &v52[48 * v51];
        *(void *)unint64_t v53 = *(void *)v141;
        *((void *)v53 + 1) = *(void *)&v141[8];
        std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100]((uint64_t)(v53 + 16), (uint64_t)&v141[16]);
        *(void *)&long long v144 = v53 + 48;
        std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__swap_out_circular_buffer((uint64_t *)__y, &v143);
        uint64_t v48 = *(void *)&__y[8];
        std::__split_buffer<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment> &>::~__split_buffer((uint64_t)&v143);
      }
      else
      {
        **(void **)&__y[8] = *(void *)v141;
        *(void *)(v47 + 8) = *(void *)&v141[8];
        std::__function::__value_func<double ()(double)>::__value_func[abi:ne180100](v47 + 16, (uint64_t)&v141[16]);
        uint64_t v48 = v47 + 48;
      }
      *(void *)&__y[8] = v48;
      std::__function::__value_func<double ()(double)>::~__value_func[abi:ne180100](&v141[16]);

      ++v29;
    }

    Phase::Envelope<double>::Envelope<std::__wrap_iter<Phase::Envelope<double>::Segment *>>((Phase::Logger *)&v131, (uint64_t)&v133, *(double **)__y, *(long long **)&__y[8]);
    *(void *)uint64_t v141 = __y;
    std::vector<Phase::Envelope<double>::Segment,std::allocator<Phase::Envelope<double>::Segment>>::__destroy_vector::operator()[abi:ne180100]((void ***)v141);
  }
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__vdeallocate(v126);
  *(_OWORD *)((char *)v128 + 24) = v131;
  *((void *)v128 + 5) = v132;
  uint64_t v132 = 0;
  long long v131 = 0uLL;
  *(void *)uint64_t v141 = &v131;
  std::vector<Phase::Envelope<double>::SegmentInternal,std::allocator<Phase::Envelope<double>::SegmentInternal>>::__destroy_vector::operator()[abi:ne180100]((void ***)v141);
}